
uniDi.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006e70  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002f0  08006f30  08006f30  00016f30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007220  08007220  000203d0  2**0
                  CONTENTS
  4 .ARM          00000000  08007220  08007220  000203d0  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007220  08007220  000203d0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007220  08007220  00017220  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007224  08007224  00017224  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000003d0  20000000  08007228  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002a8  200003d0  080075f8  000203d0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000678  080075f8  00020678  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  000203d0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001fae9  00000000  00000000  000203f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00004013  00000000  00000000  0003fee1  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000fb8  00000000  00000000  00043ef8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000dd0  00000000  00000000  00044eb0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00014315  00000000  00000000  00045c80  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00016f72  00000000  00000000  00059f95  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0005b5cb  00000000  00000000  00070f07  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000cc4d2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003468  00000000  00000000  000cc550  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	200003d0 	.word	0x200003d0
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08006f18 	.word	0x08006f18

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	200003d4 	.word	0x200003d4
 8000104:	08006f18 	.word	0x08006f18

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <MX_ADC_Init>:
ADC_HandleTypeDef hadc;
DMA_HandleTypeDef hdma_adc;

/* ADC init function */
void MX_ADC_Init(void)
{
 8000220:	b580      	push	{r7, lr}
 8000222:	b084      	sub	sp, #16
 8000224:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 8000226:	1d3b      	adds	r3, r7, #4
 8000228:	0018      	movs	r0, r3
 800022a:	230c      	movs	r3, #12
 800022c:	001a      	movs	r2, r3
 800022e:	2100      	movs	r1, #0
 8000230:	f006 fe6a 	bl	8006f08 <memset>

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc.Instance = ADC1;
 8000234:	4b3f      	ldr	r3, [pc, #252]	; (8000334 <MX_ADC_Init+0x114>)
 8000236:	4a40      	ldr	r2, [pc, #256]	; (8000338 <MX_ADC_Init+0x118>)
 8000238:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800023a:	4b3e      	ldr	r3, [pc, #248]	; (8000334 <MX_ADC_Init+0x114>)
 800023c:	2200      	movs	r2, #0
 800023e:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8000240:	4b3c      	ldr	r3, [pc, #240]	; (8000334 <MX_ADC_Init+0x114>)
 8000242:	2200      	movs	r2, #0
 8000244:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000246:	4b3b      	ldr	r3, [pc, #236]	; (8000334 <MX_ADC_Init+0x114>)
 8000248:	2200      	movs	r2, #0
 800024a:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 800024c:	4b39      	ldr	r3, [pc, #228]	; (8000334 <MX_ADC_Init+0x114>)
 800024e:	2201      	movs	r2, #1
 8000250:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000252:	4b38      	ldr	r3, [pc, #224]	; (8000334 <MX_ADC_Init+0x114>)
 8000254:	2204      	movs	r2, #4
 8000256:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = DISABLE;
 8000258:	4b36      	ldr	r3, [pc, #216]	; (8000334 <MX_ADC_Init+0x114>)
 800025a:	2200      	movs	r2, #0
 800025c:	619a      	str	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 800025e:	4b35      	ldr	r3, [pc, #212]	; (8000334 <MX_ADC_Init+0x114>)
 8000260:	2200      	movs	r2, #0
 8000262:	61da      	str	r2, [r3, #28]
  hadc.Init.ContinuousConvMode = ENABLE;
 8000264:	4b33      	ldr	r3, [pc, #204]	; (8000334 <MX_ADC_Init+0x114>)
 8000266:	2201      	movs	r2, #1
 8000268:	621a      	str	r2, [r3, #32]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 800026a:	4b32      	ldr	r3, [pc, #200]	; (8000334 <MX_ADC_Init+0x114>)
 800026c:	2200      	movs	r2, #0
 800026e:	625a      	str	r2, [r3, #36]	; 0x24
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000270:	4b30      	ldr	r3, [pc, #192]	; (8000334 <MX_ADC_Init+0x114>)
 8000272:	22c2      	movs	r2, #194	; 0xc2
 8000274:	32ff      	adds	r2, #255	; 0xff
 8000276:	629a      	str	r2, [r3, #40]	; 0x28
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000278:	4b2e      	ldr	r3, [pc, #184]	; (8000334 <MX_ADC_Init+0x114>)
 800027a:	2200      	movs	r2, #0
 800027c:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc.Init.DMAContinuousRequests = ENABLE;
 800027e:	4b2d      	ldr	r3, [pc, #180]	; (8000334 <MX_ADC_Init+0x114>)
 8000280:	2201      	movs	r2, #1
 8000282:	631a      	str	r2, [r3, #48]	; 0x30
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000284:	4b2b      	ldr	r3, [pc, #172]	; (8000334 <MX_ADC_Init+0x114>)
 8000286:	2201      	movs	r2, #1
 8000288:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 800028a:	4b2a      	ldr	r3, [pc, #168]	; (8000334 <MX_ADC_Init+0x114>)
 800028c:	0018      	movs	r0, r3
 800028e:	f001 fac5 	bl	800181c <HAL_ADC_Init>
 8000292:	1e03      	subs	r3, r0, #0
 8000294:	d001      	beq.n	800029a <MX_ADC_Init+0x7a>
  {
    Error_Handler();
 8000296:	f000 fb57 	bl	8000948 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted. 
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800029a:	1d3b      	adds	r3, r7, #4
 800029c:	2201      	movs	r2, #1
 800029e:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 80002a0:	1d3b      	adds	r3, r7, #4
 80002a2:	2280      	movs	r2, #128	; 0x80
 80002a4:	0152      	lsls	r2, r2, #5
 80002a6:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 80002a8:	1d3b      	adds	r3, r7, #4
 80002aa:	2207      	movs	r2, #7
 80002ac:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80002ae:	1d3a      	adds	r2, r7, #4
 80002b0:	4b20      	ldr	r3, [pc, #128]	; (8000334 <MX_ADC_Init+0x114>)
 80002b2:	0011      	movs	r1, r2
 80002b4:	0018      	movs	r0, r3
 80002b6:	f001 fd9f 	bl	8001df8 <HAL_ADC_ConfigChannel>
 80002ba:	1e03      	subs	r3, r0, #0
 80002bc:	d001      	beq.n	80002c2 <MX_ADC_Init+0xa2>
  {
    Error_Handler();
 80002be:	f000 fb43 	bl	8000948 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted. 
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80002c2:	1d3b      	adds	r3, r7, #4
 80002c4:	2203      	movs	r2, #3
 80002c6:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80002c8:	1d3a      	adds	r2, r7, #4
 80002ca:	4b1a      	ldr	r3, [pc, #104]	; (8000334 <MX_ADC_Init+0x114>)
 80002cc:	0011      	movs	r1, r2
 80002ce:	0018      	movs	r0, r3
 80002d0:	f001 fd92 	bl	8001df8 <HAL_ADC_ConfigChannel>
 80002d4:	1e03      	subs	r3, r0, #0
 80002d6:	d001      	beq.n	80002dc <MX_ADC_Init+0xbc>
  {
    Error_Handler();
 80002d8:	f000 fb36 	bl	8000948 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted. 
  */
  sConfig.Channel = ADC_CHANNEL_5;
 80002dc:	1d3b      	adds	r3, r7, #4
 80002de:	2205      	movs	r2, #5
 80002e0:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80002e2:	1d3a      	adds	r2, r7, #4
 80002e4:	4b13      	ldr	r3, [pc, #76]	; (8000334 <MX_ADC_Init+0x114>)
 80002e6:	0011      	movs	r1, r2
 80002e8:	0018      	movs	r0, r3
 80002ea:	f001 fd85 	bl	8001df8 <HAL_ADC_ConfigChannel>
 80002ee:	1e03      	subs	r3, r0, #0
 80002f0:	d001      	beq.n	80002f6 <MX_ADC_Init+0xd6>
  {
    Error_Handler();
 80002f2:	f000 fb29 	bl	8000948 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted. 
  */
  sConfig.Channel = ADC_CHANNEL_6;
 80002f6:	1d3b      	adds	r3, r7, #4
 80002f8:	2206      	movs	r2, #6
 80002fa:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80002fc:	1d3a      	adds	r2, r7, #4
 80002fe:	4b0d      	ldr	r3, [pc, #52]	; (8000334 <MX_ADC_Init+0x114>)
 8000300:	0011      	movs	r1, r2
 8000302:	0018      	movs	r0, r3
 8000304:	f001 fd78 	bl	8001df8 <HAL_ADC_ConfigChannel>
 8000308:	1e03      	subs	r3, r0, #0
 800030a:	d001      	beq.n	8000310 <MX_ADC_Init+0xf0>
  {
    Error_Handler();
 800030c:	f000 fb1c 	bl	8000948 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted. 
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8000310:	1d3b      	adds	r3, r7, #4
 8000312:	2207      	movs	r2, #7
 8000314:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000316:	1d3a      	adds	r2, r7, #4
 8000318:	4b06      	ldr	r3, [pc, #24]	; (8000334 <MX_ADC_Init+0x114>)
 800031a:	0011      	movs	r1, r2
 800031c:	0018      	movs	r0, r3
 800031e:	f001 fd6b 	bl	8001df8 <HAL_ADC_ConfigChannel>
 8000322:	1e03      	subs	r3, r0, #0
 8000324:	d001      	beq.n	800032a <MX_ADC_Init+0x10a>
  {
    Error_Handler();
 8000326:	f000 fb0f 	bl	8000948 <Error_Handler>
  }

}
 800032a:	46c0      	nop			; (mov r8, r8)
 800032c:	46bd      	mov	sp, r7
 800032e:	b004      	add	sp, #16
 8000330:	bd80      	pop	{r7, pc}
 8000332:	46c0      	nop			; (mov r8, r8)
 8000334:	20000444 	.word	0x20000444
 8000338:	40012400 	.word	0x40012400

0800033c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 800033c:	b580      	push	{r7, lr}
 800033e:	b08a      	sub	sp, #40	; 0x28
 8000340:	af00      	add	r7, sp, #0
 8000342:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000344:	2314      	movs	r3, #20
 8000346:	18fb      	adds	r3, r7, r3
 8000348:	0018      	movs	r0, r3
 800034a:	2314      	movs	r3, #20
 800034c:	001a      	movs	r2, r3
 800034e:	2100      	movs	r1, #0
 8000350:	f006 fdda 	bl	8006f08 <memset>
  if(adcHandle->Instance==ADC1)
 8000354:	687b      	ldr	r3, [r7, #4]
 8000356:	681b      	ldr	r3, [r3, #0]
 8000358:	4a2e      	ldr	r2, [pc, #184]	; (8000414 <HAL_ADC_MspInit+0xd8>)
 800035a:	4293      	cmp	r3, r2
 800035c:	d155      	bne.n	800040a <HAL_ADC_MspInit+0xce>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800035e:	4b2e      	ldr	r3, [pc, #184]	; (8000418 <HAL_ADC_MspInit+0xdc>)
 8000360:	699a      	ldr	r2, [r3, #24]
 8000362:	4b2d      	ldr	r3, [pc, #180]	; (8000418 <HAL_ADC_MspInit+0xdc>)
 8000364:	2180      	movs	r1, #128	; 0x80
 8000366:	0089      	lsls	r1, r1, #2
 8000368:	430a      	orrs	r2, r1
 800036a:	619a      	str	r2, [r3, #24]
 800036c:	4b2a      	ldr	r3, [pc, #168]	; (8000418 <HAL_ADC_MspInit+0xdc>)
 800036e:	699a      	ldr	r2, [r3, #24]
 8000370:	2380      	movs	r3, #128	; 0x80
 8000372:	009b      	lsls	r3, r3, #2
 8000374:	4013      	ands	r3, r2
 8000376:	613b      	str	r3, [r7, #16]
 8000378:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800037a:	4b27      	ldr	r3, [pc, #156]	; (8000418 <HAL_ADC_MspInit+0xdc>)
 800037c:	695a      	ldr	r2, [r3, #20]
 800037e:	4b26      	ldr	r3, [pc, #152]	; (8000418 <HAL_ADC_MspInit+0xdc>)
 8000380:	2180      	movs	r1, #128	; 0x80
 8000382:	0289      	lsls	r1, r1, #10
 8000384:	430a      	orrs	r2, r1
 8000386:	615a      	str	r2, [r3, #20]
 8000388:	4b23      	ldr	r3, [pc, #140]	; (8000418 <HAL_ADC_MspInit+0xdc>)
 800038a:	695a      	ldr	r2, [r3, #20]
 800038c:	2380      	movs	r3, #128	; 0x80
 800038e:	029b      	lsls	r3, r3, #10
 8000390:	4013      	ands	r3, r2
 8000392:	60fb      	str	r3, [r7, #12]
 8000394:	68fb      	ldr	r3, [r7, #12]
    PA3     ------> ADC_IN3
    PA6     ------> ADC_IN6
    PA1     ------> ADC_IN1
    PA7     ------> ADC_IN7 
    */
    GPIO_InitStruct.Pin = POLKA_Pin|OC_I_Pin|KLAPAN_Pin|OC_V_Pin 
 8000396:	2114      	movs	r1, #20
 8000398:	187b      	adds	r3, r7, r1
 800039a:	22ea      	movs	r2, #234	; 0xea
 800039c:	601a      	str	r2, [r3, #0]
                          |ZERO_WIEN_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800039e:	187b      	adds	r3, r7, r1
 80003a0:	2203      	movs	r2, #3
 80003a2:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003a4:	187b      	adds	r3, r7, r1
 80003a6:	2200      	movs	r2, #0
 80003a8:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80003aa:	187a      	adds	r2, r7, r1
 80003ac:	2390      	movs	r3, #144	; 0x90
 80003ae:	05db      	lsls	r3, r3, #23
 80003b0:	0011      	movs	r1, r2
 80003b2:	0018      	movs	r0, r3
 80003b4:	f002 fd74 	bl	8002ea0 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC Init */
    hdma_adc.Instance = DMA1_Channel1;
 80003b8:	4b18      	ldr	r3, [pc, #96]	; (800041c <HAL_ADC_MspInit+0xe0>)
 80003ba:	4a19      	ldr	r2, [pc, #100]	; (8000420 <HAL_ADC_MspInit+0xe4>)
 80003bc:	601a      	str	r2, [r3, #0]
    hdma_adc.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80003be:	4b17      	ldr	r3, [pc, #92]	; (800041c <HAL_ADC_MspInit+0xe0>)
 80003c0:	2200      	movs	r2, #0
 80003c2:	605a      	str	r2, [r3, #4]
    hdma_adc.Init.PeriphInc = DMA_PINC_DISABLE;
 80003c4:	4b15      	ldr	r3, [pc, #84]	; (800041c <HAL_ADC_MspInit+0xe0>)
 80003c6:	2200      	movs	r2, #0
 80003c8:	609a      	str	r2, [r3, #8]
    hdma_adc.Init.MemInc = DMA_MINC_ENABLE;
 80003ca:	4b14      	ldr	r3, [pc, #80]	; (800041c <HAL_ADC_MspInit+0xe0>)
 80003cc:	2280      	movs	r2, #128	; 0x80
 80003ce:	60da      	str	r2, [r3, #12]
    hdma_adc.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80003d0:	4b12      	ldr	r3, [pc, #72]	; (800041c <HAL_ADC_MspInit+0xe0>)
 80003d2:	2280      	movs	r2, #128	; 0x80
 80003d4:	0052      	lsls	r2, r2, #1
 80003d6:	611a      	str	r2, [r3, #16]
    hdma_adc.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80003d8:	4b10      	ldr	r3, [pc, #64]	; (800041c <HAL_ADC_MspInit+0xe0>)
 80003da:	2280      	movs	r2, #128	; 0x80
 80003dc:	00d2      	lsls	r2, r2, #3
 80003de:	615a      	str	r2, [r3, #20]
    hdma_adc.Init.Mode = DMA_CIRCULAR;
 80003e0:	4b0e      	ldr	r3, [pc, #56]	; (800041c <HAL_ADC_MspInit+0xe0>)
 80003e2:	2220      	movs	r2, #32
 80003e4:	619a      	str	r2, [r3, #24]
    hdma_adc.Init.Priority = DMA_PRIORITY_MEDIUM;
 80003e6:	4b0d      	ldr	r3, [pc, #52]	; (800041c <HAL_ADC_MspInit+0xe0>)
 80003e8:	2280      	movs	r2, #128	; 0x80
 80003ea:	0152      	lsls	r2, r2, #5
 80003ec:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc) != HAL_OK)
 80003ee:	4b0b      	ldr	r3, [pc, #44]	; (800041c <HAL_ADC_MspInit+0xe0>)
 80003f0:	0018      	movs	r0, r3
 80003f2:	f002 faf5 	bl	80029e0 <HAL_DMA_Init>
 80003f6:	1e03      	subs	r3, r0, #0
 80003f8:	d001      	beq.n	80003fe <HAL_ADC_MspInit+0xc2>
    {
      Error_Handler();
 80003fa:	f000 faa5 	bl	8000948 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc);
 80003fe:	687b      	ldr	r3, [r7, #4]
 8000400:	4a06      	ldr	r2, [pc, #24]	; (800041c <HAL_ADC_MspInit+0xe0>)
 8000402:	63da      	str	r2, [r3, #60]	; 0x3c
 8000404:	4b05      	ldr	r3, [pc, #20]	; (800041c <HAL_ADC_MspInit+0xe0>)
 8000406:	687a      	ldr	r2, [r7, #4]
 8000408:	625a      	str	r2, [r3, #36]	; 0x24

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 800040a:	46c0      	nop			; (mov r8, r8)
 800040c:	46bd      	mov	sp, r7
 800040e:	b00a      	add	sp, #40	; 0x28
 8000410:	bd80      	pop	{r7, pc}
 8000412:	46c0      	nop			; (mov r8, r8)
 8000414:	40012400 	.word	0x40012400
 8000418:	40021000 	.word	0x40021000
 800041c:	20000400 	.word	0x20000400
 8000420:	40020008 	.word	0x40020008

08000424 <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 8000424:	b580      	push	{r7, lr}
 8000426:	af00      	add	r7, sp, #0

  hcrc.Instance = CRC;
 8000428:	4b0e      	ldr	r3, [pc, #56]	; (8000464 <MX_CRC_Init+0x40>)
 800042a:	4a0f      	ldr	r2, [pc, #60]	; (8000468 <MX_CRC_Init+0x44>)
 800042c:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 800042e:	4b0d      	ldr	r3, [pc, #52]	; (8000464 <MX_CRC_Init+0x40>)
 8000430:	2200      	movs	r2, #0
 8000432:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 8000434:	4b0b      	ldr	r3, [pc, #44]	; (8000464 <MX_CRC_Init+0x40>)
 8000436:	2200      	movs	r2, #0
 8000438:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 800043a:	4b0a      	ldr	r3, [pc, #40]	; (8000464 <MX_CRC_Init+0x40>)
 800043c:	2200      	movs	r2, #0
 800043e:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8000440:	4b08      	ldr	r3, [pc, #32]	; (8000464 <MX_CRC_Init+0x40>)
 8000442:	2200      	movs	r2, #0
 8000444:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8000446:	4b07      	ldr	r3, [pc, #28]	; (8000464 <MX_CRC_Init+0x40>)
 8000448:	2201      	movs	r2, #1
 800044a:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 800044c:	4b05      	ldr	r3, [pc, #20]	; (8000464 <MX_CRC_Init+0x40>)
 800044e:	0018      	movs	r0, r3
 8000450:	f002 f880 	bl	8002554 <HAL_CRC_Init>
 8000454:	1e03      	subs	r3, r0, #0
 8000456:	d001      	beq.n	800045c <MX_CRC_Init+0x38>
  {
    Error_Handler();
 8000458:	f000 fa76 	bl	8000948 <Error_Handler>
  }

}
 800045c:	46c0      	nop			; (mov r8, r8)
 800045e:	46bd      	mov	sp, r7
 8000460:	bd80      	pop	{r7, pc}
 8000462:	46c0      	nop			; (mov r8, r8)
 8000464:	20000490 	.word	0x20000490
 8000468:	40023000 	.word	0x40023000

0800046c <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{
 800046c:	b580      	push	{r7, lr}
 800046e:	b084      	sub	sp, #16
 8000470:	af00      	add	r7, sp, #0
 8000472:	6078      	str	r0, [r7, #4]

  if(crcHandle->Instance==CRC)
 8000474:	687b      	ldr	r3, [r7, #4]
 8000476:	681b      	ldr	r3, [r3, #0]
 8000478:	4a09      	ldr	r2, [pc, #36]	; (80004a0 <HAL_CRC_MspInit+0x34>)
 800047a:	4293      	cmp	r3, r2
 800047c:	d10b      	bne.n	8000496 <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 800047e:	4b09      	ldr	r3, [pc, #36]	; (80004a4 <HAL_CRC_MspInit+0x38>)
 8000480:	695a      	ldr	r2, [r3, #20]
 8000482:	4b08      	ldr	r3, [pc, #32]	; (80004a4 <HAL_CRC_MspInit+0x38>)
 8000484:	2140      	movs	r1, #64	; 0x40
 8000486:	430a      	orrs	r2, r1
 8000488:	615a      	str	r2, [r3, #20]
 800048a:	4b06      	ldr	r3, [pc, #24]	; (80004a4 <HAL_CRC_MspInit+0x38>)
 800048c:	695b      	ldr	r3, [r3, #20]
 800048e:	2240      	movs	r2, #64	; 0x40
 8000490:	4013      	ands	r3, r2
 8000492:	60fb      	str	r3, [r7, #12]
 8000494:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 8000496:	46c0      	nop			; (mov r8, r8)
 8000498:	46bd      	mov	sp, r7
 800049a:	b004      	add	sp, #16
 800049c:	bd80      	pop	{r7, pc}
 800049e:	46c0      	nop			; (mov r8, r8)
 80004a0:	40023000 	.word	0x40023000
 80004a4:	40021000 	.word	0x40021000

080004a8 <MX_DAC1_Init>:

DAC_HandleTypeDef hdac1;

/* DAC1 init function */
void MX_DAC1_Init(void)
{
 80004a8:	b580      	push	{r7, lr}
 80004aa:	b082      	sub	sp, #8
 80004ac:	af00      	add	r7, sp, #0
  DAC_ChannelConfTypeDef sConfig = {0};
 80004ae:	003b      	movs	r3, r7
 80004b0:	0018      	movs	r0, r3
 80004b2:	2308      	movs	r3, #8
 80004b4:	001a      	movs	r2, r3
 80004b6:	2100      	movs	r1, #0
 80004b8:	f006 fd26 	bl	8006f08 <memset>

  /** DAC Initialization 
  */
  hdac1.Instance = DAC;
 80004bc:	4b0f      	ldr	r3, [pc, #60]	; (80004fc <MX_DAC1_Init+0x54>)
 80004be:	4a10      	ldr	r2, [pc, #64]	; (8000500 <MX_DAC1_Init+0x58>)
 80004c0:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 80004c2:	4b0e      	ldr	r3, [pc, #56]	; (80004fc <MX_DAC1_Init+0x54>)
 80004c4:	0018      	movs	r0, r3
 80004c6:	f002 f8ed 	bl	80026a4 <HAL_DAC_Init>
 80004ca:	1e03      	subs	r3, r0, #0
 80004cc:	d001      	beq.n	80004d2 <MX_DAC1_Init+0x2a>
  {
    Error_Handler();
 80004ce:	f000 fa3b 	bl	8000948 <Error_Handler>
  }
  /** DAC channel OUT1 config 
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_T2_TRGO;
 80004d2:	003b      	movs	r3, r7
 80004d4:	2224      	movs	r2, #36	; 0x24
 80004d6:	601a      	str	r2, [r3, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 80004d8:	003b      	movs	r3, r7
 80004da:	2200      	movs	r2, #0
 80004dc:	605a      	str	r2, [r3, #4]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 80004de:	0039      	movs	r1, r7
 80004e0:	4b06      	ldr	r3, [pc, #24]	; (80004fc <MX_DAC1_Init+0x54>)
 80004e2:	2200      	movs	r2, #0
 80004e4:	0018      	movs	r0, r3
 80004e6:	f002 f967 	bl	80027b8 <HAL_DAC_ConfigChannel>
 80004ea:	1e03      	subs	r3, r0, #0
 80004ec:	d001      	beq.n	80004f2 <MX_DAC1_Init+0x4a>
  {
    Error_Handler();
 80004ee:	f000 fa2b 	bl	8000948 <Error_Handler>
  }

}
 80004f2:	46c0      	nop			; (mov r8, r8)
 80004f4:	46bd      	mov	sp, r7
 80004f6:	b002      	add	sp, #8
 80004f8:	bd80      	pop	{r7, pc}
 80004fa:	46c0      	nop			; (mov r8, r8)
 80004fc:	200004b4 	.word	0x200004b4
 8000500:	40007400 	.word	0x40007400

08000504 <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 8000504:	b580      	push	{r7, lr}
 8000506:	b08a      	sub	sp, #40	; 0x28
 8000508:	af00      	add	r7, sp, #0
 800050a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800050c:	2314      	movs	r3, #20
 800050e:	18fb      	adds	r3, r7, r3
 8000510:	0018      	movs	r0, r3
 8000512:	2314      	movs	r3, #20
 8000514:	001a      	movs	r2, r3
 8000516:	2100      	movs	r1, #0
 8000518:	f006 fcf6 	bl	8006f08 <memset>
  if(dacHandle->Instance==DAC)
 800051c:	687b      	ldr	r3, [r7, #4]
 800051e:	681b      	ldr	r3, [r3, #0]
 8000520:	4a1d      	ldr	r2, [pc, #116]	; (8000598 <HAL_DAC_MspInit+0x94>)
 8000522:	4293      	cmp	r3, r2
 8000524:	d134      	bne.n	8000590 <HAL_DAC_MspInit+0x8c>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* DAC clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 8000526:	4b1d      	ldr	r3, [pc, #116]	; (800059c <HAL_DAC_MspInit+0x98>)
 8000528:	69da      	ldr	r2, [r3, #28]
 800052a:	4b1c      	ldr	r3, [pc, #112]	; (800059c <HAL_DAC_MspInit+0x98>)
 800052c:	2180      	movs	r1, #128	; 0x80
 800052e:	0589      	lsls	r1, r1, #22
 8000530:	430a      	orrs	r2, r1
 8000532:	61da      	str	r2, [r3, #28]
 8000534:	4b19      	ldr	r3, [pc, #100]	; (800059c <HAL_DAC_MspInit+0x98>)
 8000536:	69da      	ldr	r2, [r3, #28]
 8000538:	2380      	movs	r3, #128	; 0x80
 800053a:	059b      	lsls	r3, r3, #22
 800053c:	4013      	ands	r3, r2
 800053e:	613b      	str	r3, [r7, #16]
 8000540:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000542:	4b16      	ldr	r3, [pc, #88]	; (800059c <HAL_DAC_MspInit+0x98>)
 8000544:	695a      	ldr	r2, [r3, #20]
 8000546:	4b15      	ldr	r3, [pc, #84]	; (800059c <HAL_DAC_MspInit+0x98>)
 8000548:	2180      	movs	r1, #128	; 0x80
 800054a:	0289      	lsls	r1, r1, #10
 800054c:	430a      	orrs	r2, r1
 800054e:	615a      	str	r2, [r3, #20]
 8000550:	4b12      	ldr	r3, [pc, #72]	; (800059c <HAL_DAC_MspInit+0x98>)
 8000552:	695a      	ldr	r2, [r3, #20]
 8000554:	2380      	movs	r3, #128	; 0x80
 8000556:	029b      	lsls	r3, r3, #10
 8000558:	4013      	ands	r3, r2
 800055a:	60fb      	str	r3, [r7, #12]
 800055c:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration    
    PA4     ------> DAC1_OUT1 
    */
    GPIO_InitStruct.Pin = WIEN_Pin;
 800055e:	2114      	movs	r1, #20
 8000560:	187b      	adds	r3, r7, r1
 8000562:	2210      	movs	r2, #16
 8000564:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000566:	187b      	adds	r3, r7, r1
 8000568:	2203      	movs	r2, #3
 800056a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800056c:	187b      	adds	r3, r7, r1
 800056e:	2200      	movs	r2, #0
 8000570:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(WIEN_GPIO_Port, &GPIO_InitStruct);
 8000572:	187a      	adds	r2, r7, r1
 8000574:	2390      	movs	r3, #144	; 0x90
 8000576:	05db      	lsls	r3, r3, #23
 8000578:	0011      	movs	r1, r2
 800057a:	0018      	movs	r0, r3
 800057c:	f002 fc90 	bl	8002ea0 <HAL_GPIO_Init>

    /* DAC interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8000580:	2200      	movs	r2, #0
 8000582:	2100      	movs	r1, #0
 8000584:	2011      	movs	r0, #17
 8000586:	f001 ff9b 	bl	80024c0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800058a:	2011      	movs	r0, #17
 800058c:	f001 ffb8 	bl	8002500 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }
}
 8000590:	46c0      	nop			; (mov r8, r8)
 8000592:	46bd      	mov	sp, r7
 8000594:	b00a      	add	sp, #40	; 0x28
 8000596:	bd80      	pop	{r7, pc}
 8000598:	40007400 	.word	0x40007400
 800059c:	40021000 	.word	0x40021000

080005a0 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
void MX_DMA_Init(void) 
{
 80005a0:	b580      	push	{r7, lr}
 80005a2:	b082      	sub	sp, #8
 80005a4:	af00      	add	r7, sp, #0
  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80005a6:	4b10      	ldr	r3, [pc, #64]	; (80005e8 <MX_DMA_Init+0x48>)
 80005a8:	695a      	ldr	r2, [r3, #20]
 80005aa:	4b0f      	ldr	r3, [pc, #60]	; (80005e8 <MX_DMA_Init+0x48>)
 80005ac:	2101      	movs	r1, #1
 80005ae:	430a      	orrs	r2, r1
 80005b0:	615a      	str	r2, [r3, #20]
 80005b2:	4b0d      	ldr	r3, [pc, #52]	; (80005e8 <MX_DMA_Init+0x48>)
 80005b4:	695b      	ldr	r3, [r3, #20]
 80005b6:	2201      	movs	r2, #1
 80005b8:	4013      	ands	r3, r2
 80005ba:	607b      	str	r3, [r7, #4]
 80005bc:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80005be:	2200      	movs	r2, #0
 80005c0:	2100      	movs	r1, #0
 80005c2:	2009      	movs	r0, #9
 80005c4:	f001 ff7c 	bl	80024c0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80005c8:	2009      	movs	r0, #9
 80005ca:	f001 ff99 	bl	8002500 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_5_IRQn, 0, 0);
 80005ce:	2200      	movs	r2, #0
 80005d0:	2100      	movs	r1, #0
 80005d2:	200b      	movs	r0, #11
 80005d4:	f001 ff74 	bl	80024c0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_5_IRQn);
 80005d8:	200b      	movs	r0, #11
 80005da:	f001 ff91 	bl	8002500 <HAL_NVIC_EnableIRQ>

}
 80005de:	46c0      	nop			; (mov r8, r8)
 80005e0:	46bd      	mov	sp, r7
 80005e2:	b002      	add	sp, #8
 80005e4:	bd80      	pop	{r7, pc}
 80005e6:	46c0      	nop			; (mov r8, r8)
 80005e8:	40021000 	.word	0x40021000

080005ec <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through 
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 80005ec:	b590      	push	{r4, r7, lr}
 80005ee:	b08b      	sub	sp, #44	; 0x2c
 80005f0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005f2:	2414      	movs	r4, #20
 80005f4:	193b      	adds	r3, r7, r4
 80005f6:	0018      	movs	r0, r3
 80005f8:	2314      	movs	r3, #20
 80005fa:	001a      	movs	r2, r3
 80005fc:	2100      	movs	r1, #0
 80005fe:	f006 fc83 	bl	8006f08 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000602:	4b66      	ldr	r3, [pc, #408]	; (800079c <MX_GPIO_Init+0x1b0>)
 8000604:	695a      	ldr	r2, [r3, #20]
 8000606:	4b65      	ldr	r3, [pc, #404]	; (800079c <MX_GPIO_Init+0x1b0>)
 8000608:	2180      	movs	r1, #128	; 0x80
 800060a:	0309      	lsls	r1, r1, #12
 800060c:	430a      	orrs	r2, r1
 800060e:	615a      	str	r2, [r3, #20]
 8000610:	4b62      	ldr	r3, [pc, #392]	; (800079c <MX_GPIO_Init+0x1b0>)
 8000612:	695a      	ldr	r2, [r3, #20]
 8000614:	2380      	movs	r3, #128	; 0x80
 8000616:	031b      	lsls	r3, r3, #12
 8000618:	4013      	ands	r3, r2
 800061a:	613b      	str	r3, [r7, #16]
 800061c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800061e:	4b5f      	ldr	r3, [pc, #380]	; (800079c <MX_GPIO_Init+0x1b0>)
 8000620:	695a      	ldr	r2, [r3, #20]
 8000622:	4b5e      	ldr	r3, [pc, #376]	; (800079c <MX_GPIO_Init+0x1b0>)
 8000624:	2180      	movs	r1, #128	; 0x80
 8000626:	02c9      	lsls	r1, r1, #11
 8000628:	430a      	orrs	r2, r1
 800062a:	615a      	str	r2, [r3, #20]
 800062c:	4b5b      	ldr	r3, [pc, #364]	; (800079c <MX_GPIO_Init+0x1b0>)
 800062e:	695a      	ldr	r2, [r3, #20]
 8000630:	2380      	movs	r3, #128	; 0x80
 8000632:	02db      	lsls	r3, r3, #11
 8000634:	4013      	ands	r3, r2
 8000636:	60fb      	str	r3, [r7, #12]
 8000638:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800063a:	4b58      	ldr	r3, [pc, #352]	; (800079c <MX_GPIO_Init+0x1b0>)
 800063c:	695a      	ldr	r2, [r3, #20]
 800063e:	4b57      	ldr	r3, [pc, #348]	; (800079c <MX_GPIO_Init+0x1b0>)
 8000640:	2180      	movs	r1, #128	; 0x80
 8000642:	0289      	lsls	r1, r1, #10
 8000644:	430a      	orrs	r2, r1
 8000646:	615a      	str	r2, [r3, #20]
 8000648:	4b54      	ldr	r3, [pc, #336]	; (800079c <MX_GPIO_Init+0x1b0>)
 800064a:	695a      	ldr	r2, [r3, #20]
 800064c:	2380      	movs	r3, #128	; 0x80
 800064e:	029b      	lsls	r3, r3, #10
 8000650:	4013      	ands	r3, r2
 8000652:	60bb      	str	r3, [r7, #8]
 8000654:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000656:	4b51      	ldr	r3, [pc, #324]	; (800079c <MX_GPIO_Init+0x1b0>)
 8000658:	695a      	ldr	r2, [r3, #20]
 800065a:	4b50      	ldr	r3, [pc, #320]	; (800079c <MX_GPIO_Init+0x1b0>)
 800065c:	2180      	movs	r1, #128	; 0x80
 800065e:	0349      	lsls	r1, r1, #13
 8000660:	430a      	orrs	r2, r1
 8000662:	615a      	str	r2, [r3, #20]
 8000664:	4b4d      	ldr	r3, [pc, #308]	; (800079c <MX_GPIO_Init+0x1b0>)
 8000666:	695a      	ldr	r2, [r3, #20]
 8000668:	2380      	movs	r3, #128	; 0x80
 800066a:	035b      	lsls	r3, r3, #13
 800066c:	4013      	ands	r3, r2
 800066e:	607b      	str	r3, [r7, #4]
 8000670:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000672:	4b4a      	ldr	r3, [pc, #296]	; (800079c <MX_GPIO_Init+0x1b0>)
 8000674:	695a      	ldr	r2, [r3, #20]
 8000676:	4b49      	ldr	r3, [pc, #292]	; (800079c <MX_GPIO_Init+0x1b0>)
 8000678:	2180      	movs	r1, #128	; 0x80
 800067a:	03c9      	lsls	r1, r1, #15
 800067c:	430a      	orrs	r2, r1
 800067e:	615a      	str	r2, [r3, #20]
 8000680:	4b46      	ldr	r3, [pc, #280]	; (800079c <MX_GPIO_Init+0x1b0>)
 8000682:	695a      	ldr	r2, [r3, #20]
 8000684:	2380      	movs	r3, #128	; 0x80
 8000686:	03db      	lsls	r3, r3, #15
 8000688:	4013      	ands	r3, r2
 800068a:	603b      	str	r3, [r7, #0]
 800068c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, POLKA_LED_Pin|BOARD_LED_Pin, GPIO_PIN_RESET);
 800068e:	23c0      	movs	r3, #192	; 0xc0
 8000690:	009b      	lsls	r3, r3, #2
 8000692:	4843      	ldr	r0, [pc, #268]	; (80007a0 <MX_GPIO_Init+0x1b4>)
 8000694:	2200      	movs	r2, #0
 8000696:	0019      	movs	r1, r3
 8000698:	f002 fe58 	bl	800334c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC11 PC10 PC12 
                           PC1 PC0 PC7 PC2 
                           PC6 PC3 PC4 PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_11|GPIO_PIN_10|GPIO_PIN_12 
 800069c:	193b      	adds	r3, r7, r4
 800069e:	4a41      	ldr	r2, [pc, #260]	; (80007a4 <MX_GPIO_Init+0x1b8>)
 80006a0:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_7|GPIO_PIN_2 
                          |GPIO_PIN_6|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80006a2:	193b      	adds	r3, r7, r4
 80006a4:	2203      	movs	r2, #3
 80006a6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006a8:	193b      	adds	r3, r7, r4
 80006aa:	2200      	movs	r2, #0
 80006ac:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80006ae:	193b      	adds	r3, r7, r4
 80006b0:	4a3b      	ldr	r2, [pc, #236]	; (80007a0 <MX_GPIO_Init+0x1b4>)
 80006b2:	0019      	movs	r1, r3
 80006b4:	0010      	movs	r0, r2
 80006b6:	f002 fbf3 	bl	8002ea0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB9 PB4 PB3 PB8 
                           PB7 PB5 PB6 PB0 
                           PB14 PB1 PB2 PB10 
                           PB13 PB11 PB12 */
  GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_4|GPIO_PIN_3|GPIO_PIN_8 
 80006ba:	193b      	adds	r3, r7, r4
 80006bc:	4a3a      	ldr	r2, [pc, #232]	; (80007a8 <MX_GPIO_Init+0x1bc>)
 80006be:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_7|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_0 
                          |GPIO_PIN_14|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10 
                          |GPIO_PIN_13|GPIO_PIN_11|GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80006c0:	193b      	adds	r3, r7, r4
 80006c2:	2203      	movs	r2, #3
 80006c4:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006c6:	193b      	adds	r3, r7, r4
 80006c8:	2200      	movs	r2, #0
 80006ca:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006cc:	193b      	adds	r3, r7, r4
 80006ce:	4a37      	ldr	r2, [pc, #220]	; (80007ac <MX_GPIO_Init+0x1c0>)
 80006d0:	0019      	movs	r1, r3
 80006d2:	0010      	movs	r0, r2
 80006d4:	f002 fbe4 	bl	8002ea0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 80006d8:	193b      	adds	r3, r7, r4
 80006da:	2204      	movs	r2, #4
 80006dc:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80006de:	193b      	adds	r3, r7, r4
 80006e0:	2203      	movs	r2, #3
 80006e2:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006e4:	193b      	adds	r3, r7, r4
 80006e6:	2200      	movs	r2, #0
 80006e8:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80006ea:	193b      	adds	r3, r7, r4
 80006ec:	4a30      	ldr	r2, [pc, #192]	; (80007b0 <MX_GPIO_Init+0x1c4>)
 80006ee:	0019      	movs	r1, r3
 80006f0:	0010      	movs	r0, r2
 80006f2:	f002 fbd5 	bl	8002ea0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA12 PA9 PA11 PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_9|GPIO_PIN_11|GPIO_PIN_8;
 80006f6:	193b      	adds	r3, r7, r4
 80006f8:	22d8      	movs	r2, #216	; 0xd8
 80006fa:	0152      	lsls	r2, r2, #5
 80006fc:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80006fe:	193b      	adds	r3, r7, r4
 8000700:	2203      	movs	r2, #3
 8000702:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000704:	193b      	adds	r3, r7, r4
 8000706:	2200      	movs	r2, #0
 8000708:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800070a:	193a      	adds	r2, r7, r4
 800070c:	2390      	movs	r3, #144	; 0x90
 800070e:	05db      	lsls	r3, r3, #23
 8000710:	0011      	movs	r1, r2
 8000712:	0018      	movs	r0, r3
 8000714:	f002 fbc4 	bl	8002ea0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PF4 PF5 PF6 PF7 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000718:	193b      	adds	r3, r7, r4
 800071a:	22f0      	movs	r2, #240	; 0xf0
 800071c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800071e:	193b      	adds	r3, r7, r4
 8000720:	2203      	movs	r2, #3
 8000722:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000724:	193b      	adds	r3, r7, r4
 8000726:	2200      	movs	r2, #0
 8000728:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800072a:	193b      	adds	r3, r7, r4
 800072c:	4a21      	ldr	r2, [pc, #132]	; (80007b4 <MX_GPIO_Init+0x1c8>)
 800072e:	0019      	movs	r1, r3
 8000730:	0010      	movs	r0, r2
 8000732:	f002 fbb5 	bl	8002ea0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = POLKA_LED_Pin|BOARD_LED_Pin;
 8000736:	0021      	movs	r1, r4
 8000738:	187b      	adds	r3, r7, r1
 800073a:	22c0      	movs	r2, #192	; 0xc0
 800073c:	0092      	lsls	r2, r2, #2
 800073e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000740:	187b      	adds	r3, r7, r1
 8000742:	2201      	movs	r2, #1
 8000744:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000746:	187b      	adds	r3, r7, r1
 8000748:	2200      	movs	r2, #0
 800074a:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800074c:	187b      	adds	r3, r7, r1
 800074e:	2203      	movs	r2, #3
 8000750:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000752:	000c      	movs	r4, r1
 8000754:	187b      	adds	r3, r7, r1
 8000756:	4a12      	ldr	r2, [pc, #72]	; (80007a0 <MX_GPIO_Init+0x1b4>)
 8000758:	0019      	movs	r1, r3
 800075a:	0010      	movs	r0, r2
 800075c:	f002 fba0 	bl	8002ea0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BLOCK_PU_Pin;
 8000760:	0021      	movs	r1, r4
 8000762:	187b      	adds	r3, r7, r1
 8000764:	2201      	movs	r2, #1
 8000766:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8000768:	187b      	adds	r3, r7, r1
 800076a:	4a13      	ldr	r2, [pc, #76]	; (80007b8 <MX_GPIO_Init+0x1cc>)
 800076c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800076e:	187b      	adds	r3, r7, r1
 8000770:	2201      	movs	r2, #1
 8000772:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(BLOCK_PU_GPIO_Port, &GPIO_InitStruct);
 8000774:	187a      	adds	r2, r7, r1
 8000776:	2390      	movs	r3, #144	; 0x90
 8000778:	05db      	lsls	r3, r3, #23
 800077a:	0011      	movs	r1, r2
 800077c:	0018      	movs	r0, r3
 800077e:	f002 fb8f 	bl	8002ea0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_1_IRQn, 0, 0);
 8000782:	2200      	movs	r2, #0
 8000784:	2100      	movs	r1, #0
 8000786:	2005      	movs	r0, #5
 8000788:	f001 fe9a 	bl	80024c0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_1_IRQn);
 800078c:	2005      	movs	r0, #5
 800078e:	f001 feb7 	bl	8002500 <HAL_NVIC_EnableIRQ>

}
 8000792:	46c0      	nop			; (mov r8, r8)
 8000794:	46bd      	mov	sp, r7
 8000796:	b00b      	add	sp, #44	; 0x2c
 8000798:	bd90      	pop	{r4, r7, pc}
 800079a:	46c0      	nop			; (mov r8, r8)
 800079c:	40021000 	.word	0x40021000
 80007a0:	48000800 	.word	0x48000800
 80007a4:	00003cff 	.word	0x00003cff
 80007a8:	00007fff 	.word	0x00007fff
 80007ac:	48000400 	.word	0x48000400
 80007b0:	48000c00 	.word	0x48000c00
 80007b4:	48001400 	.word	0x48001400
 80007b8:	10310000 	.word	0x10310000

080007bc <MX_IWDG_Init>:

IWDG_HandleTypeDef hiwdg;

/* IWDG init function */
void MX_IWDG_Init(void)
{
 80007bc:	b580      	push	{r7, lr}
 80007be:	af00      	add	r7, sp, #0

  hiwdg.Instance = IWDG;
 80007c0:	4b0b      	ldr	r3, [pc, #44]	; (80007f0 <MX_IWDG_Init+0x34>)
 80007c2:	4a0c      	ldr	r2, [pc, #48]	; (80007f4 <MX_IWDG_Init+0x38>)
 80007c4:	601a      	str	r2, [r3, #0]
  hiwdg.Init.Prescaler = IWDG_PRESCALER_4;
 80007c6:	4b0a      	ldr	r3, [pc, #40]	; (80007f0 <MX_IWDG_Init+0x34>)
 80007c8:	2200      	movs	r2, #0
 80007ca:	605a      	str	r2, [r3, #4]
  hiwdg.Init.Window = 4095;
 80007cc:	4b08      	ldr	r3, [pc, #32]	; (80007f0 <MX_IWDG_Init+0x34>)
 80007ce:	4a0a      	ldr	r2, [pc, #40]	; (80007f8 <MX_IWDG_Init+0x3c>)
 80007d0:	60da      	str	r2, [r3, #12]
  hiwdg.Init.Reload = 4095;
 80007d2:	4b07      	ldr	r3, [pc, #28]	; (80007f0 <MX_IWDG_Init+0x34>)
 80007d4:	4a08      	ldr	r2, [pc, #32]	; (80007f8 <MX_IWDG_Init+0x3c>)
 80007d6:	609a      	str	r2, [r3, #8]
  if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 80007d8:	4b05      	ldr	r3, [pc, #20]	; (80007f0 <MX_IWDG_Init+0x34>)
 80007da:	0018      	movs	r0, r3
 80007dc:	f002 fe36 	bl	800344c <HAL_IWDG_Init>
 80007e0:	1e03      	subs	r3, r0, #0
 80007e2:	d001      	beq.n	80007e8 <MX_IWDG_Init+0x2c>
  {
    Error_Handler();
 80007e4:	f000 f8b0 	bl	8000948 <Error_Handler>
  }

}
 80007e8:	46c0      	nop			; (mov r8, r8)
 80007ea:	46bd      	mov	sp, r7
 80007ec:	bd80      	pop	{r7, pc}
 80007ee:	46c0      	nop			; (mov r8, r8)
 80007f0:	200004c8 	.word	0x200004c8
 80007f4:	40003000 	.word	0x40003000
 80007f8:	00000fff 	.word	0x00000fff

080007fc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007fc:	b580      	push	{r7, lr}
 80007fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

	// Enable Debug
	EnableDebugMode();
 8000800:	f000 fe1e 	bl	8001440 <EnableDebugMode>
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000804:	f000 ffa6 	bl	8001754 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000808:	f000 f82c 	bl	8000864 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800080c:	f7ff feee 	bl	80005ec <MX_GPIO_Init>
  MX_DMA_Init();
 8000810:	f7ff fec6 	bl	80005a0 <MX_DMA_Init>
  MX_ADC_Init();
 8000814:	f7ff fd04 	bl	8000220 <MX_ADC_Init>
  MX_CRC_Init();
 8000818:	f7ff fe04 	bl	8000424 <MX_CRC_Init>
  MX_DAC1_Init();
 800081c:	f7ff fe44 	bl	80004a8 <MX_DAC1_Init>
  MX_IWDG_Init();
 8000820:	f7ff ffcc 	bl	80007bc <MX_IWDG_Init>
  MX_TIM1_Init();
 8000824:	f000 f9c0 	bl	8000ba8 <MX_TIM1_Init>
  MX_TIM2_Init();
 8000828:	f000 fa76 	bl	8000d18 <MX_TIM2_Init>
  MX_USART2_UART_Init();
 800082c:	f000 fb7a 	bl	8000f24 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  	// Reset All to Default
    DigiTOS_IWDG_Init(DigiTOS_IWDG_Timeout_16s);// WatchDog
 8000830:	200c      	movs	r0, #12
 8000832:	f000 fec1 	bl	80015b8 <DigiTOS_IWDG_Init>

    BlinkLEDs(10,100);
 8000836:	2164      	movs	r1, #100	; 0x64
 8000838:	200a      	movs	r0, #10
 800083a:	f000 fd57 	bl	80012ec <BlinkLEDs>

    UseSoftStart=1;
 800083e:	4b08      	ldr	r3, [pc, #32]	; (8000860 <main+0x64>)
 8000840:	2201      	movs	r2, #1
 8000842:	601a      	str	r2, [r3, #0]
    HAL_GPIO_EXTI_Callback(BLOCK_PU_Pin); // Get State of Block Pin
 8000844:	2001      	movs	r0, #1
 8000846:	f000 f85f 	bl	8000908 <HAL_GPIO_EXTI_Callback>

    //PWM_50Hz_ON();
    //PWM_50Hz_OFF();

    DAC_SINUS_INIT();
 800084a:	f000 fe6f 	bl	800152c <DAC_SINUS_INIT>

    Set50Hz();
 800084e:	f000 fc3d 	bl	80010cc <Set50Hz>
    //Set505Hz();

    StartADC();
 8000852:	f000 fd25 	bl	80012a0 <StartADC>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  Check50Hz(); // Check if need to start\stop generator
 8000856:	f000 fd81 	bl	800135c <Check50Hz>

	  ResetWDG(); // Reset WatchDog
 800085a:	f000 fea1 	bl	80015a0 <ResetWDG>
	  Check50Hz(); // Check if need to start\stop generator
 800085e:	e7fa      	b.n	8000856 <main+0x5a>
 8000860:	200003ec 	.word	0x200003ec

08000864 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000864:	b590      	push	{r4, r7, lr}
 8000866:	b091      	sub	sp, #68	; 0x44
 8000868:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800086a:	2410      	movs	r4, #16
 800086c:	193b      	adds	r3, r7, r4
 800086e:	0018      	movs	r0, r3
 8000870:	2330      	movs	r3, #48	; 0x30
 8000872:	001a      	movs	r2, r3
 8000874:	2100      	movs	r1, #0
 8000876:	f006 fb47 	bl	8006f08 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800087a:	003b      	movs	r3, r7
 800087c:	0018      	movs	r0, r3
 800087e:	2310      	movs	r3, #16
 8000880:	001a      	movs	r2, r3
 8000882:	2100      	movs	r1, #0
 8000884:	f006 fb40 	bl	8006f08 <memset>

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI14|RCC_OSCILLATORTYPE_LSI
 8000888:	0021      	movs	r1, r4
 800088a:	187b      	adds	r3, r7, r1
 800088c:	2219      	movs	r2, #25
 800088e:	601a      	str	r2, [r3, #0]
                              |RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000890:	187b      	adds	r3, r7, r1
 8000892:	2201      	movs	r2, #1
 8000894:	605a      	str	r2, [r3, #4]
  RCC_OscInitStruct.HSI14State = RCC_HSI14_ON;
 8000896:	187b      	adds	r3, r7, r1
 8000898:	2201      	movs	r2, #1
 800089a:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.HSI14CalibrationValue = 16;
 800089c:	187b      	adds	r3, r7, r1
 800089e:	2210      	movs	r2, #16
 80008a0:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80008a2:	187b      	adds	r3, r7, r1
 80008a4:	2201      	movs	r2, #1
 80008a6:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80008a8:	187b      	adds	r3, r7, r1
 80008aa:	2202      	movs	r2, #2
 80008ac:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80008ae:	187b      	adds	r3, r7, r1
 80008b0:	2280      	movs	r2, #128	; 0x80
 80008b2:	0252      	lsls	r2, r2, #9
 80008b4:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 80008b6:	187b      	adds	r3, r7, r1
 80008b8:	2280      	movs	r2, #128	; 0x80
 80008ba:	0352      	lsls	r2, r2, #13
 80008bc:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 80008be:	187b      	adds	r3, r7, r1
 80008c0:	2200      	movs	r2, #0
 80008c2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008c4:	187b      	adds	r3, r7, r1
 80008c6:	0018      	movs	r0, r3
 80008c8:	f002 fe60 	bl	800358c <HAL_RCC_OscConfig>
 80008cc:	1e03      	subs	r3, r0, #0
 80008ce:	d001      	beq.n	80008d4 <SystemClock_Config+0x70>
  {
    Error_Handler();
 80008d0:	f000 f83a 	bl	8000948 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008d4:	003b      	movs	r3, r7
 80008d6:	2207      	movs	r2, #7
 80008d8:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80008da:	003b      	movs	r3, r7
 80008dc:	2202      	movs	r2, #2
 80008de:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008e0:	003b      	movs	r3, r7
 80008e2:	2200      	movs	r2, #0
 80008e4:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80008e6:	003b      	movs	r3, r7
 80008e8:	2200      	movs	r2, #0
 80008ea:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80008ec:	003b      	movs	r3, r7
 80008ee:	2101      	movs	r1, #1
 80008f0:	0018      	movs	r0, r3
 80008f2:	f003 fab9 	bl	8003e68 <HAL_RCC_ClockConfig>
 80008f6:	1e03      	subs	r3, r0, #0
 80008f8:	d001      	beq.n	80008fe <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80008fa:	f000 f825 	bl	8000948 <Error_Handler>
  }
}
 80008fe:	46c0      	nop			; (mov r8, r8)
 8000900:	46bd      	mov	sp, r7
 8000902:	b011      	add	sp, #68	; 0x44
 8000904:	bd90      	pop	{r4, r7, pc}
	...

08000908 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000908:	b580      	push	{r7, lr}
 800090a:	b082      	sub	sp, #8
 800090c:	af00      	add	r7, sp, #0
 800090e:	0002      	movs	r2, r0
 8000910:	1dbb      	adds	r3, r7, #6
 8000912:	801a      	strh	r2, [r3, #0]
  if(GPIO_Pin==BLOCK_PU_Pin) {
 8000914:	1dbb      	adds	r3, r7, #6
 8000916:	881b      	ldrh	r3, [r3, #0]
 8000918:	2b01      	cmp	r3, #1
 800091a:	d10e      	bne.n	800093a <HAL_GPIO_EXTI_Callback+0x32>
	  	  	  if (HAL_GPIO_ReadPin(BLOCK_PU_GPIO_Port, BLOCK_PU_Pin)==GPIO_PIN_RESET) {
 800091c:	2390      	movs	r3, #144	; 0x90
 800091e:	05db      	lsls	r3, r3, #23
 8000920:	2101      	movs	r1, #1
 8000922:	0018      	movs	r0, r3
 8000924:	f002 fce2 	bl	80032ec <HAL_GPIO_ReadPin>
 8000928:	1e03      	subs	r3, r0, #0
 800092a:	d103      	bne.n	8000934 <HAL_GPIO_EXTI_Callback+0x2c>
	  			  BlockGenerator=0; // Unblock Generator
 800092c:	4b05      	ldr	r3, [pc, #20]	; (8000944 <HAL_GPIO_EXTI_Callback+0x3c>)
 800092e:	2200      	movs	r2, #0
 8000930:	601a      	str	r2, [r3, #0]
	  		  } else {
	  			  BlockGenerator=1; //Block Generator
	  		  }
  }
}
 8000932:	e002      	b.n	800093a <HAL_GPIO_EXTI_Callback+0x32>
	  			  BlockGenerator=1; //Block Generator
 8000934:	4b03      	ldr	r3, [pc, #12]	; (8000944 <HAL_GPIO_EXTI_Callback+0x3c>)
 8000936:	2201      	movs	r2, #1
 8000938:	601a      	str	r2, [r3, #0]
}
 800093a:	46c0      	nop			; (mov r8, r8)
 800093c:	46bd      	mov	sp, r7
 800093e:	b002      	add	sp, #8
 8000940:	bd80      	pop	{r7, pc}
 8000942:	46c0      	nop			; (mov r8, r8)
 8000944:	20000004 	.word	0x20000004

08000948 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000948:	b580      	push	{r7, lr}
 800094a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800094c:	46c0      	nop			; (mov r8, r8)
 800094e:	46bd      	mov	sp, r7
 8000950:	bd80      	pop	{r7, pc}

08000952 <assert_failed>:
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(char *file, uint32_t line)
{ 
 8000952:	b580      	push	{r7, lr}
 8000954:	b082      	sub	sp, #8
 8000956:	af00      	add	r7, sp, #0
 8000958:	6078      	str	r0, [r7, #4]
 800095a:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     tex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
 800095c:	46c0      	nop			; (mov r8, r8)
 800095e:	46bd      	mov	sp, r7
 8000960:	b002      	add	sp, #8
 8000962:	bd80      	pop	{r7, pc}

08000964 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000964:	b580      	push	{r7, lr}
 8000966:	b082      	sub	sp, #8
 8000968:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800096a:	4b0f      	ldr	r3, [pc, #60]	; (80009a8 <HAL_MspInit+0x44>)
 800096c:	699a      	ldr	r2, [r3, #24]
 800096e:	4b0e      	ldr	r3, [pc, #56]	; (80009a8 <HAL_MspInit+0x44>)
 8000970:	2101      	movs	r1, #1
 8000972:	430a      	orrs	r2, r1
 8000974:	619a      	str	r2, [r3, #24]
 8000976:	4b0c      	ldr	r3, [pc, #48]	; (80009a8 <HAL_MspInit+0x44>)
 8000978:	699b      	ldr	r3, [r3, #24]
 800097a:	2201      	movs	r2, #1
 800097c:	4013      	ands	r3, r2
 800097e:	607b      	str	r3, [r7, #4]
 8000980:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000982:	4b09      	ldr	r3, [pc, #36]	; (80009a8 <HAL_MspInit+0x44>)
 8000984:	69da      	ldr	r2, [r3, #28]
 8000986:	4b08      	ldr	r3, [pc, #32]	; (80009a8 <HAL_MspInit+0x44>)
 8000988:	2180      	movs	r1, #128	; 0x80
 800098a:	0549      	lsls	r1, r1, #21
 800098c:	430a      	orrs	r2, r1
 800098e:	61da      	str	r2, [r3, #28]
 8000990:	4b05      	ldr	r3, [pc, #20]	; (80009a8 <HAL_MspInit+0x44>)
 8000992:	69da      	ldr	r2, [r3, #28]
 8000994:	2380      	movs	r3, #128	; 0x80
 8000996:	055b      	lsls	r3, r3, #21
 8000998:	4013      	ands	r3, r2
 800099a:	603b      	str	r3, [r7, #0]
 800099c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800099e:	46c0      	nop			; (mov r8, r8)
 80009a0:	46bd      	mov	sp, r7
 80009a2:	b002      	add	sp, #8
 80009a4:	bd80      	pop	{r7, pc}
 80009a6:	46c0      	nop			; (mov r8, r8)
 80009a8:	40021000 	.word	0x40021000

080009ac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009ac:	b580      	push	{r7, lr}
 80009ae:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80009b0:	46c0      	nop			; (mov r8, r8)
 80009b2:	46bd      	mov	sp, r7
 80009b4:	bd80      	pop	{r7, pc}

080009b6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009b6:	b580      	push	{r7, lr}
 80009b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009ba:	e7fe      	b.n	80009ba <HardFault_Handler+0x4>

080009bc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80009bc:	b580      	push	{r7, lr}
 80009be:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80009c0:	46c0      	nop			; (mov r8, r8)
 80009c2:	46bd      	mov	sp, r7
 80009c4:	bd80      	pop	{r7, pc}

080009c6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80009c6:	b580      	push	{r7, lr}
 80009c8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80009ca:	46c0      	nop			; (mov r8, r8)
 80009cc:	46bd      	mov	sp, r7
 80009ce:	bd80      	pop	{r7, pc}

080009d0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80009d0:	b580      	push	{r7, lr}
 80009d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80009d4:	f000 feee 	bl	80017b4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80009d8:	46c0      	nop			; (mov r8, r8)
 80009da:	46bd      	mov	sp, r7
 80009dc:	bd80      	pop	{r7, pc}

080009de <EXTI0_1_IRQHandler>:

/**
  * @brief This function handles EXTI line 0 and 1 interrupts.
  */
void EXTI0_1_IRQHandler(void)
{
 80009de:	b580      	push	{r7, lr}
 80009e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_1_IRQn 0 */

  /* USER CODE END EXTI0_1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BLOCK_PU_Pin);
 80009e2:	2001      	movs	r0, #1
 80009e4:	f002 fd16 	bl	8003414 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_1_IRQn 1 */

  /* USER CODE END EXTI0_1_IRQn 1 */
}
 80009e8:	46c0      	nop			; (mov r8, r8)
 80009ea:	46bd      	mov	sp, r7
 80009ec:	bd80      	pop	{r7, pc}
	...

080009f0 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80009f0:	b580      	push	{r7, lr}
 80009f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc);
 80009f4:	4b03      	ldr	r3, [pc, #12]	; (8000a04 <DMA1_Channel1_IRQHandler+0x14>)
 80009f6:	0018      	movs	r0, r3
 80009f8:	f002 f968 	bl	8002ccc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80009fc:	46c0      	nop			; (mov r8, r8)
 80009fe:	46bd      	mov	sp, r7
 8000a00:	bd80      	pop	{r7, pc}
 8000a02:	46c0      	nop			; (mov r8, r8)
 8000a04:	20000400 	.word	0x20000400

08000a08 <DMA1_Channel4_5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 4 and 5 interrupts.
  */
void DMA1_Channel4_5_IRQHandler(void)
{
 8000a08:	b580      	push	{r7, lr}
 8000a0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_5_IRQn 0 */

  /* USER CODE END DMA1_Channel4_5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8000a0c:	4b05      	ldr	r3, [pc, #20]	; (8000a24 <DMA1_Channel4_5_IRQHandler+0x1c>)
 8000a0e:	0018      	movs	r0, r3
 8000a10:	f002 f95c 	bl	8002ccc <HAL_DMA_IRQHandler>
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8000a14:	4b04      	ldr	r3, [pc, #16]	; (8000a28 <DMA1_Channel4_5_IRQHandler+0x20>)
 8000a16:	0018      	movs	r0, r3
 8000a18:	f002 f958 	bl	8002ccc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_5_IRQn 1 */

  /* USER CODE END DMA1_Channel4_5_IRQn 1 */
}
 8000a1c:	46c0      	nop			; (mov r8, r8)
 8000a1e:	46bd      	mov	sp, r7
 8000a20:	bd80      	pop	{r7, pc}
 8000a22:	46c0      	nop			; (mov r8, r8)
 8000a24:	2000059c 	.word	0x2000059c
 8000a28:	20000558 	.word	0x20000558

08000a2c <TIM1_BRK_UP_TRG_COM_IRQHandler>:

/**
  * @brief This function handles TIM1 break, update, trigger and commutation interrupts.
  */
void TIM1_BRK_UP_TRG_COM_IRQHandler(void)
{
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_UP_TRG_COM_IRQn 0 */

  /* USER CODE END TIM1_BRK_UP_TRG_COM_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000a30:	4b03      	ldr	r3, [pc, #12]	; (8000a40 <TIM1_BRK_UP_TRG_COM_IRQHandler+0x14>)
 8000a32:	0018      	movs	r0, r3
 8000a34:	f004 f86e 	bl	8004b14 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_UP_TRG_COM_IRQn 1 */

  /* USER CODE END TIM1_BRK_UP_TRG_COM_IRQn 1 */
}
 8000a38:	46c0      	nop			; (mov r8, r8)
 8000a3a:	46bd      	mov	sp, r7
 8000a3c:	bd80      	pop	{r7, pc}
 8000a3e:	46c0      	nop			; (mov r8, r8)
 8000a40:	200004d8 	.word	0x200004d8

08000a44 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8000a44:	b580      	push	{r7, lr}
 8000a46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000a48:	4b03      	ldr	r3, [pc, #12]	; (8000a58 <TIM1_CC_IRQHandler+0x14>)
 8000a4a:	0018      	movs	r0, r3
 8000a4c:	f004 f862 	bl	8004b14 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8000a50:	46c0      	nop			; (mov r8, r8)
 8000a52:	46bd      	mov	sp, r7
 8000a54:	bd80      	pop	{r7, pc}
 8000a56:	46c0      	nop			; (mov r8, r8)
 8000a58:	200004d8 	.word	0x200004d8

08000a5c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000a60:	4b22      	ldr	r3, [pc, #136]	; (8000aec <TIM2_IRQHandler+0x90>)
 8000a62:	0018      	movs	r0, r3
 8000a64:	f004 f856 	bl	8004b14 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */


  	if (BlockGenerator==1) {
 8000a68:	4b21      	ldr	r3, [pc, #132]	; (8000af0 <TIM2_IRQHandler+0x94>)
 8000a6a:	681b      	ldr	r3, [r3, #0]
 8000a6c:	2b01      	cmp	r3, #1
 8000a6e:	d102      	bne.n	8000a76 <TIM2_IRQHandler+0x1a>
  	 Set_DAC_SINUS_ZERO();
 8000a70:	f000 fd4e 	bl	8001510 <Set_DAC_SINUS_ZERO>
  	 return;
 8000a74:	e038      	b.n	8000ae8 <TIM2_IRQHandler+0x8c>
    }


  	HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1,DAC_ALIGN_12B_R,GetSinus());
 8000a76:	f000 fd19 	bl	80014ac <GetSinus>
 8000a7a:	0003      	movs	r3, r0
 8000a7c:	481d      	ldr	r0, [pc, #116]	; (8000af4 <TIM2_IRQHandler+0x98>)
 8000a7e:	2200      	movs	r2, #0
 8000a80:	2100      	movs	r1, #0
 8000a82:	f001 fe43 	bl	800270c <HAL_DAC_SetValue>

  	sin_step++;
 8000a86:	4b1c      	ldr	r3, [pc, #112]	; (8000af8 <TIM2_IRQHandler+0x9c>)
 8000a88:	881b      	ldrh	r3, [r3, #0]
 8000a8a:	b29b      	uxth	r3, r3
 8000a8c:	3301      	adds	r3, #1
 8000a8e:	b29a      	uxth	r2, r3
 8000a90:	4b19      	ldr	r3, [pc, #100]	; (8000af8 <TIM2_IRQHandler+0x9c>)
 8000a92:	801a      	strh	r2, [r3, #0]

					if (sin_step==1) {
 8000a94:	4b18      	ldr	r3, [pc, #96]	; (8000af8 <TIM2_IRQHandler+0x9c>)
 8000a96:	881b      	ldrh	r3, [r3, #0]
 8000a98:	b29b      	uxth	r3, r3
 8000a9a:	2b01      	cmp	r3, #1
 8000a9c:	d107      	bne.n	8000aae <TIM2_IRQHandler+0x52>
						HAL_GPIO_TogglePin(BOARD_LED_GPIO_Port, BOARD_LED_Pin); // All is OK, blink
 8000a9e:	2380      	movs	r3, #128	; 0x80
 8000aa0:	005b      	lsls	r3, r3, #1
 8000aa2:	4a16      	ldr	r2, [pc, #88]	; (8000afc <TIM2_IRQHandler+0xa0>)
 8000aa4:	0019      	movs	r1, r3
 8000aa6:	0010      	movs	r0, r2
 8000aa8:	f002 fc90 	bl	80033cc <HAL_GPIO_TogglePin>
						return;
 8000aac:	e01c      	b.n	8000ae8 <TIM2_IRQHandler+0x8c>
					}
					if (sin_step==240) {
 8000aae:	4b12      	ldr	r3, [pc, #72]	; (8000af8 <TIM2_IRQHandler+0x9c>)
 8000ab0:	881b      	ldrh	r3, [r3, #0]
 8000ab2:	b29b      	uxth	r3, r3
 8000ab4:	2bf0      	cmp	r3, #240	; 0xf0
 8000ab6:	d117      	bne.n	8000ae8 <TIM2_IRQHandler+0x8c>
  						CalcAvg();
 8000ab8:	f000 fb76 	bl	80011a8 <CalcAvg>
  						CurrentMargin=(adcWienZero_Avg/200)-1;
 8000abc:	4b10      	ldr	r3, [pc, #64]	; (8000b00 <TIM2_IRQHandler+0xa4>)
 8000abe:	681b      	ldr	r3, [r3, #0]
 8000ac0:	21c8      	movs	r1, #200	; 0xc8
 8000ac2:	0018      	movs	r0, r3
 8000ac4:	f7ff fb20 	bl	8000108 <__udivsi3>
 8000ac8:	0003      	movs	r3, r0
 8000aca:	b2db      	uxtb	r3, r3
 8000acc:	3b01      	subs	r3, #1
 8000ace:	b2da      	uxtb	r2, r3
 8000ad0:	4b0c      	ldr	r3, [pc, #48]	; (8000b04 <TIM2_IRQHandler+0xa8>)
 8000ad2:	701a      	strb	r2, [r3, #0]
  						if (CurrentMargin<SINUS_MARGIN) {
 8000ad4:	4b0b      	ldr	r3, [pc, #44]	; (8000b04 <TIM2_IRQHandler+0xa8>)
 8000ad6:	781b      	ldrb	r3, [r3, #0]
 8000ad8:	b2db      	uxtb	r3, r3
 8000ada:	2b01      	cmp	r3, #1
 8000adc:	d803      	bhi.n	8000ae6 <TIM2_IRQHandler+0x8a>
  							CurrentMargin=SINUS_MARGIN;
 8000ade:	4b09      	ldr	r3, [pc, #36]	; (8000b04 <TIM2_IRQHandler+0xa8>)
 8000ae0:	2202      	movs	r2, #2
 8000ae2:	701a      	strb	r2, [r3, #0]
  						}
  						return;
 8000ae4:	46c0      	nop			; (mov r8, r8)
 8000ae6:	46c0      	nop			; (mov r8, r8)
  					}

  /* USER CODE END TIM2_IRQn 1 */
}
 8000ae8:	46bd      	mov	sp, r7
 8000aea:	bd80      	pop	{r7, pc}
 8000aec:	20000518 	.word	0x20000518
 8000af0:	20000004 	.word	0x20000004
 8000af4:	200004b4 	.word	0x200004b4
 8000af8:	200003fc 	.word	0x200003fc
 8000afc:	48000800 	.word	0x48000800
 8000b00:	20000658 	.word	0x20000658
 8000b04:	2000000c 	.word	0x2000000c

08000b08 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global and DAC underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_DAC_IRQHandler(&hdac1);
 8000b0c:	4b03      	ldr	r3, [pc, #12]	; (8000b1c <TIM6_DAC_IRQHandler+0x14>)
 8000b0e:	0018      	movs	r0, r3
 8000b10:	f001 ff2e 	bl	8002970 <HAL_DAC_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000b14:	46c0      	nop			; (mov r8, r8)
 8000b16:	46bd      	mov	sp, r7
 8000b18:	bd80      	pop	{r7, pc}
 8000b1a:	46c0      	nop			; (mov r8, r8)
 8000b1c:	200004b4 	.word	0x200004b4

08000b20 <SystemInit>:
  *         Initialize the default HSI clock source, vector table location and the PLL configuration is reset.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000b20:	b580      	push	{r7, lr}
 8000b22:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001U;
 8000b24:	4b1a      	ldr	r3, [pc, #104]	; (8000b90 <SystemInit+0x70>)
 8000b26:	681a      	ldr	r2, [r3, #0]
 8000b28:	4b19      	ldr	r3, [pc, #100]	; (8000b90 <SystemInit+0x70>)
 8000b2a:	2101      	movs	r1, #1
 8000b2c:	430a      	orrs	r2, r1
 8000b2e:	601a      	str	r2, [r3, #0]

#if defined (STM32F051x8) || defined (STM32F058x8)
  /* Reset SW[1:0], HPRE[3:0], PPRE[2:0], ADCPRE and MCOSEL[2:0] bits */
  RCC->CFGR &= (uint32_t)0xF8FFB80CU;
 8000b30:	4b17      	ldr	r3, [pc, #92]	; (8000b90 <SystemInit+0x70>)
 8000b32:	685a      	ldr	r2, [r3, #4]
 8000b34:	4b16      	ldr	r3, [pc, #88]	; (8000b90 <SystemInit+0x70>)
 8000b36:	4917      	ldr	r1, [pc, #92]	; (8000b94 <SystemInit+0x74>)
 8000b38:	400a      	ands	r2, r1
 8000b3a:	605a      	str	r2, [r3, #4]
  /* Reset SW[1:0], HPRE[3:0], PPRE[2:0], ADCPRE, MCOSEL[2:0], MCOPRE[2:0] and PLLNODIV bits */
  RCC->CFGR &= (uint32_t)0x08FFB80CU;
#endif /* STM32F051x8 or STM32F058x8 */
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFFU;
 8000b3c:	4b14      	ldr	r3, [pc, #80]	; (8000b90 <SystemInit+0x70>)
 8000b3e:	681a      	ldr	r2, [r3, #0]
 8000b40:	4b13      	ldr	r3, [pc, #76]	; (8000b90 <SystemInit+0x70>)
 8000b42:	4915      	ldr	r1, [pc, #84]	; (8000b98 <SystemInit+0x78>)
 8000b44:	400a      	ands	r2, r1
 8000b46:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFFU;
 8000b48:	4b11      	ldr	r3, [pc, #68]	; (8000b90 <SystemInit+0x70>)
 8000b4a:	681a      	ldr	r2, [r3, #0]
 8000b4c:	4b10      	ldr	r3, [pc, #64]	; (8000b90 <SystemInit+0x70>)
 8000b4e:	4913      	ldr	r1, [pc, #76]	; (8000b9c <SystemInit+0x7c>)
 8000b50:	400a      	ands	r2, r1
 8000b52:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE and PLLMUL[3:0] bits */
  RCC->CFGR &= (uint32_t)0xFFC0FFFFU;
 8000b54:	4b0e      	ldr	r3, [pc, #56]	; (8000b90 <SystemInit+0x70>)
 8000b56:	685a      	ldr	r2, [r3, #4]
 8000b58:	4b0d      	ldr	r3, [pc, #52]	; (8000b90 <SystemInit+0x70>)
 8000b5a:	4911      	ldr	r1, [pc, #68]	; (8000ba0 <SystemInit+0x80>)
 8000b5c:	400a      	ands	r2, r1
 8000b5e:	605a      	str	r2, [r3, #4]

  /* Reset PREDIV[3:0] bits */
  RCC->CFGR2 &= (uint32_t)0xFFFFFFF0U;
 8000b60:	4b0b      	ldr	r3, [pc, #44]	; (8000b90 <SystemInit+0x70>)
 8000b62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000b64:	4b0a      	ldr	r3, [pc, #40]	; (8000b90 <SystemInit+0x70>)
 8000b66:	210f      	movs	r1, #15
 8000b68:	438a      	bics	r2, r1
 8000b6a:	62da      	str	r2, [r3, #44]	; 0x2c
#elif defined (STM32F030x6) || defined (STM32F030x8) || defined (STM32F031x6) || defined (STM32F038xx) || defined (STM32F030xC)
  /* Reset USART1SW[1:0], I2C1SW and ADCSW bits */
  RCC->CFGR3 &= (uint32_t)0xFFFFFEECU;
#elif defined (STM32F051x8) || defined (STM32F058xx)
  /* Reset USART1SW[1:0], I2C1SW, CECSW and ADCSW bits */
  RCC->CFGR3 &= (uint32_t)0xFFFFFEACU;
 8000b6c:	4b08      	ldr	r3, [pc, #32]	; (8000b90 <SystemInit+0x70>)
 8000b6e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000b70:	4b07      	ldr	r3, [pc, #28]	; (8000b90 <SystemInit+0x70>)
 8000b72:	490c      	ldr	r1, [pc, #48]	; (8000ba4 <SystemInit+0x84>)
 8000b74:	400a      	ands	r2, r1
 8000b76:	631a      	str	r2, [r3, #48]	; 0x30
#else
 #warning "No target selected"
#endif

  /* Reset HSI14 bit */
  RCC->CR2 &= (uint32_t)0xFFFFFFFEU;
 8000b78:	4b05      	ldr	r3, [pc, #20]	; (8000b90 <SystemInit+0x70>)
 8000b7a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000b7c:	4b04      	ldr	r3, [pc, #16]	; (8000b90 <SystemInit+0x70>)
 8000b7e:	2101      	movs	r1, #1
 8000b80:	438a      	bics	r2, r1
 8000b82:	635a      	str	r2, [r3, #52]	; 0x34

  /* Disable all interrupts */
  RCC->CIR = 0x00000000U;
 8000b84:	4b02      	ldr	r3, [pc, #8]	; (8000b90 <SystemInit+0x70>)
 8000b86:	2200      	movs	r2, #0
 8000b88:	609a      	str	r2, [r3, #8]

}
 8000b8a:	46c0      	nop			; (mov r8, r8)
 8000b8c:	46bd      	mov	sp, r7
 8000b8e:	bd80      	pop	{r7, pc}
 8000b90:	40021000 	.word	0x40021000
 8000b94:	f8ffb80c 	.word	0xf8ffb80c
 8000b98:	fef6ffff 	.word	0xfef6ffff
 8000b9c:	fffbffff 	.word	0xfffbffff
 8000ba0:	ffc0ffff 	.word	0xffc0ffff
 8000ba4:	fffffeac 	.word	0xfffffeac

08000ba8 <MX_TIM1_Init>:
TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim2;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	b094      	sub	sp, #80	; 0x50
 8000bac:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000bae:	2340      	movs	r3, #64	; 0x40
 8000bb0:	18fb      	adds	r3, r7, r3
 8000bb2:	0018      	movs	r0, r3
 8000bb4:	2310      	movs	r3, #16
 8000bb6:	001a      	movs	r2, r3
 8000bb8:	2100      	movs	r1, #0
 8000bba:	f006 f9a5 	bl	8006f08 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000bbe:	2338      	movs	r3, #56	; 0x38
 8000bc0:	18fb      	adds	r3, r7, r3
 8000bc2:	0018      	movs	r0, r3
 8000bc4:	2308      	movs	r3, #8
 8000bc6:	001a      	movs	r2, r3
 8000bc8:	2100      	movs	r1, #0
 8000bca:	f006 f99d 	bl	8006f08 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000bce:	231c      	movs	r3, #28
 8000bd0:	18fb      	adds	r3, r7, r3
 8000bd2:	0018      	movs	r0, r3
 8000bd4:	231c      	movs	r3, #28
 8000bd6:	001a      	movs	r2, r3
 8000bd8:	2100      	movs	r1, #0
 8000bda:	f006 f995 	bl	8006f08 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000bde:	003b      	movs	r3, r7
 8000be0:	0018      	movs	r0, r3
 8000be2:	231c      	movs	r3, #28
 8000be4:	001a      	movs	r2, r3
 8000be6:	2100      	movs	r1, #0
 8000be8:	f006 f98e 	bl	8006f08 <memset>

  htim1.Instance = TIM1;
 8000bec:	4b48      	ldr	r3, [pc, #288]	; (8000d10 <MX_TIM1_Init+0x168>)
 8000bee:	4a49      	ldr	r2, [pc, #292]	; (8000d14 <MX_TIM1_Init+0x16c>)
 8000bf0:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 480;
 8000bf2:	4b47      	ldr	r3, [pc, #284]	; (8000d10 <MX_TIM1_Init+0x168>)
 8000bf4:	22f0      	movs	r2, #240	; 0xf0
 8000bf6:	0052      	lsls	r2, r2, #1
 8000bf8:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000bfa:	4b45      	ldr	r3, [pc, #276]	; (8000d10 <MX_TIM1_Init+0x168>)
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000;
 8000c00:	4b43      	ldr	r3, [pc, #268]	; (8000d10 <MX_TIM1_Init+0x168>)
 8000c02:	22fa      	movs	r2, #250	; 0xfa
 8000c04:	0092      	lsls	r2, r2, #2
 8000c06:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c08:	4b41      	ldr	r3, [pc, #260]	; (8000d10 <MX_TIM1_Init+0x168>)
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000c0e:	4b40      	ldr	r3, [pc, #256]	; (8000d10 <MX_TIM1_Init+0x168>)
 8000c10:	2200      	movs	r2, #0
 8000c12:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000c14:	4b3e      	ldr	r3, [pc, #248]	; (8000d10 <MX_TIM1_Init+0x168>)
 8000c16:	2280      	movs	r2, #128	; 0x80
 8000c18:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000c1a:	4b3d      	ldr	r3, [pc, #244]	; (8000d10 <MX_TIM1_Init+0x168>)
 8000c1c:	0018      	movs	r0, r3
 8000c1e:	f003 fb23 	bl	8004268 <HAL_TIM_Base_Init>
 8000c22:	1e03      	subs	r3, r0, #0
 8000c24:	d001      	beq.n	8000c2a <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 8000c26:	f7ff fe8f 	bl	8000948 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000c2a:	2140      	movs	r1, #64	; 0x40
 8000c2c:	187b      	adds	r3, r7, r1
 8000c2e:	2280      	movs	r2, #128	; 0x80
 8000c30:	0152      	lsls	r2, r2, #5
 8000c32:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000c34:	187a      	adds	r2, r7, r1
 8000c36:	4b36      	ldr	r3, [pc, #216]	; (8000d10 <MX_TIM1_Init+0x168>)
 8000c38:	0011      	movs	r1, r2
 8000c3a:	0018      	movs	r0, r3
 8000c3c:	f004 f99e 	bl	8004f7c <HAL_TIM_ConfigClockSource>
 8000c40:	1e03      	subs	r3, r0, #0
 8000c42:	d001      	beq.n	8000c48 <MX_TIM1_Init+0xa0>
  {
    Error_Handler();
 8000c44:	f7ff fe80 	bl	8000948 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim1) != HAL_OK)
 8000c48:	4b31      	ldr	r3, [pc, #196]	; (8000d10 <MX_TIM1_Init+0x168>)
 8000c4a:	0018      	movs	r0, r3
 8000c4c:	f003 fd3a 	bl	80046c4 <HAL_TIM_OC_Init>
 8000c50:	1e03      	subs	r3, r0, #0
 8000c52:	d001      	beq.n	8000c58 <MX_TIM1_Init+0xb0>
  {
    Error_Handler();
 8000c54:	f7ff fe78 	bl	8000948 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c58:	2138      	movs	r1, #56	; 0x38
 8000c5a:	187b      	adds	r3, r7, r1
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c60:	187b      	adds	r3, r7, r1
 8000c62:	2200      	movs	r2, #0
 8000c64:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000c66:	187a      	adds	r2, r7, r1
 8000c68:	4b29      	ldr	r3, [pc, #164]	; (8000d10 <MX_TIM1_Init+0x168>)
 8000c6a:	0011      	movs	r1, r2
 8000c6c:	0018      	movs	r0, r3
 8000c6e:	f005 fa51 	bl	8006114 <HAL_TIMEx_MasterConfigSynchronization>
 8000c72:	1e03      	subs	r3, r0, #0
 8000c74:	d001      	beq.n	8000c7a <MX_TIM1_Init+0xd2>
  {
    Error_Handler();
 8000c76:	f7ff fe67 	bl	8000948 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TOGGLE;
 8000c7a:	211c      	movs	r1, #28
 8000c7c:	187b      	adds	r3, r7, r1
 8000c7e:	2230      	movs	r2, #48	; 0x30
 8000c80:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 500;
 8000c82:	187b      	adds	r3, r7, r1
 8000c84:	22fa      	movs	r2, #250	; 0xfa
 8000c86:	0052      	lsls	r2, r2, #1
 8000c88:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000c8a:	187b      	adds	r3, r7, r1
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000c90:	187b      	adds	r3, r7, r1
 8000c92:	2200      	movs	r2, #0
 8000c94:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000c96:	187b      	adds	r3, r7, r1
 8000c98:	2200      	movs	r2, #0
 8000c9a:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000c9c:	187b      	adds	r3, r7, r1
 8000c9e:	2200      	movs	r2, #0
 8000ca0:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000ca2:	187b      	adds	r3, r7, r1
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000ca8:	1879      	adds	r1, r7, r1
 8000caa:	4b19      	ldr	r3, [pc, #100]	; (8000d10 <MX_TIM1_Init+0x168>)
 8000cac:	2208      	movs	r2, #8
 8000cae:	0018      	movs	r0, r3
 8000cb0:	f004 f846 	bl	8004d40 <HAL_TIM_OC_ConfigChannel>
 8000cb4:	1e03      	subs	r3, r0, #0
 8000cb6:	d001      	beq.n	8000cbc <MX_TIM1_Init+0x114>
  {
    Error_Handler();
 8000cb8:	f7ff fe46 	bl	8000948 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000cbc:	003b      	movs	r3, r7
 8000cbe:	2200      	movs	r2, #0
 8000cc0:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000cc2:	003b      	movs	r3, r7
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000cc8:	003b      	movs	r3, r7
 8000cca:	2200      	movs	r2, #0
 8000ccc:	609a      	str	r2, [r3, #8]
  //sBreakDeadTimeConfig.DeadTime = 200;
  sBreakDeadTimeConfig.DeadTime = SetDeadTime();
 8000cce:	f000 fa09 	bl	80010e4 <SetDeadTime>
 8000cd2:	0002      	movs	r2, r0
 8000cd4:	003b      	movs	r3, r7
 8000cd6:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000cd8:	003b      	movs	r3, r7
 8000cda:	2200      	movs	r2, #0
 8000cdc:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000cde:	003b      	movs	r3, r7
 8000ce0:	2280      	movs	r2, #128	; 0x80
 8000ce2:	0192      	lsls	r2, r2, #6
 8000ce4:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000ce6:	003b      	movs	r3, r7
 8000ce8:	2200      	movs	r2, #0
 8000cea:	619a      	str	r2, [r3, #24]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000cec:	003a      	movs	r2, r7
 8000cee:	4b08      	ldr	r3, [pc, #32]	; (8000d10 <MX_TIM1_Init+0x168>)
 8000cf0:	0011      	movs	r1, r2
 8000cf2:	0018      	movs	r0, r3
 8000cf4:	f005 fab6 	bl	8006264 <HAL_TIMEx_ConfigBreakDeadTime>
 8000cf8:	1e03      	subs	r3, r0, #0
 8000cfa:	d001      	beq.n	8000d00 <MX_TIM1_Init+0x158>
  {
    Error_Handler();
 8000cfc:	f7ff fe24 	bl	8000948 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim1);
 8000d00:	4b03      	ldr	r3, [pc, #12]	; (8000d10 <MX_TIM1_Init+0x168>)
 8000d02:	0018      	movs	r0, r3
 8000d04:	f000 f8a6 	bl	8000e54 <HAL_TIM_MspPostInit>

}
 8000d08:	46c0      	nop			; (mov r8, r8)
 8000d0a:	46bd      	mov	sp, r7
 8000d0c:	b014      	add	sp, #80	; 0x50
 8000d0e:	bd80      	pop	{r7, pc}
 8000d10:	200004d8 	.word	0x200004d8
 8000d14:	40012c00 	.word	0x40012c00

08000d18 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	b086      	sub	sp, #24
 8000d1c:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000d1e:	2308      	movs	r3, #8
 8000d20:	18fb      	adds	r3, r7, r3
 8000d22:	0018      	movs	r0, r3
 8000d24:	2310      	movs	r3, #16
 8000d26:	001a      	movs	r2, r3
 8000d28:	2100      	movs	r1, #0
 8000d2a:	f006 f8ed 	bl	8006f08 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d2e:	003b      	movs	r3, r7
 8000d30:	0018      	movs	r0, r3
 8000d32:	2308      	movs	r3, #8
 8000d34:	001a      	movs	r2, r3
 8000d36:	2100      	movs	r1, #0
 8000d38:	f006 f8e6 	bl	8006f08 <memset>

  htim2.Instance = TIM2;
 8000d3c:	4b1f      	ldr	r3, [pc, #124]	; (8000dbc <MX_TIM2_Init+0xa4>)
 8000d3e:	2280      	movs	r2, #128	; 0x80
 8000d40:	05d2      	lsls	r2, r2, #23
 8000d42:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000d44:	4b1d      	ldr	r3, [pc, #116]	; (8000dbc <MX_TIM2_Init+0xa4>)
 8000d46:	2200      	movs	r2, #0
 8000d48:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d4a:	4b1c      	ldr	r3, [pc, #112]	; (8000dbc <MX_TIM2_Init+0xa4>)
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000;
 8000d50:	4b1a      	ldr	r3, [pc, #104]	; (8000dbc <MX_TIM2_Init+0xa4>)
 8000d52:	22fa      	movs	r2, #250	; 0xfa
 8000d54:	0092      	lsls	r2, r2, #2
 8000d56:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d58:	4b18      	ldr	r3, [pc, #96]	; (8000dbc <MX_TIM2_Init+0xa4>)
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000d5e:	4b17      	ldr	r3, [pc, #92]	; (8000dbc <MX_TIM2_Init+0xa4>)
 8000d60:	2280      	movs	r2, #128	; 0x80
 8000d62:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000d64:	4b15      	ldr	r3, [pc, #84]	; (8000dbc <MX_TIM2_Init+0xa4>)
 8000d66:	0018      	movs	r0, r3
 8000d68:	f003 fa7e 	bl	8004268 <HAL_TIM_Base_Init>
 8000d6c:	1e03      	subs	r3, r0, #0
 8000d6e:	d001      	beq.n	8000d74 <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 8000d70:	f7ff fdea 	bl	8000948 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000d74:	2108      	movs	r1, #8
 8000d76:	187b      	adds	r3, r7, r1
 8000d78:	2280      	movs	r2, #128	; 0x80
 8000d7a:	0152      	lsls	r2, r2, #5
 8000d7c:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000d7e:	187a      	adds	r2, r7, r1
 8000d80:	4b0e      	ldr	r3, [pc, #56]	; (8000dbc <MX_TIM2_Init+0xa4>)
 8000d82:	0011      	movs	r1, r2
 8000d84:	0018      	movs	r0, r3
 8000d86:	f004 f8f9 	bl	8004f7c <HAL_TIM_ConfigClockSource>
 8000d8a:	1e03      	subs	r3, r0, #0
 8000d8c:	d001      	beq.n	8000d92 <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 8000d8e:	f7ff fddb 	bl	8000948 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000d92:	003b      	movs	r3, r7
 8000d94:	2220      	movs	r2, #32
 8000d96:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d98:	003b      	movs	r3, r7
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000d9e:	003a      	movs	r2, r7
 8000da0:	4b06      	ldr	r3, [pc, #24]	; (8000dbc <MX_TIM2_Init+0xa4>)
 8000da2:	0011      	movs	r1, r2
 8000da4:	0018      	movs	r0, r3
 8000da6:	f005 f9b5 	bl	8006114 <HAL_TIMEx_MasterConfigSynchronization>
 8000daa:	1e03      	subs	r3, r0, #0
 8000dac:	d001      	beq.n	8000db2 <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8000dae:	f7ff fdcb 	bl	8000948 <Error_Handler>
  }

}
 8000db2:	46c0      	nop			; (mov r8, r8)
 8000db4:	46bd      	mov	sp, r7
 8000db6:	b006      	add	sp, #24
 8000db8:	bd80      	pop	{r7, pc}
 8000dba:	46c0      	nop			; (mov r8, r8)
 8000dbc:	20000518 	.word	0x20000518

08000dc0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	b084      	sub	sp, #16
 8000dc4:	af00      	add	r7, sp, #0
 8000dc6:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	4a1f      	ldr	r2, [pc, #124]	; (8000e4c <HAL_TIM_Base_MspInit+0x8c>)
 8000dce:	4293      	cmp	r3, r2
 8000dd0:	d11e      	bne.n	8000e10 <HAL_TIM_Base_MspInit+0x50>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000dd2:	4b1f      	ldr	r3, [pc, #124]	; (8000e50 <HAL_TIM_Base_MspInit+0x90>)
 8000dd4:	699a      	ldr	r2, [r3, #24]
 8000dd6:	4b1e      	ldr	r3, [pc, #120]	; (8000e50 <HAL_TIM_Base_MspInit+0x90>)
 8000dd8:	2180      	movs	r1, #128	; 0x80
 8000dda:	0109      	lsls	r1, r1, #4
 8000ddc:	430a      	orrs	r2, r1
 8000dde:	619a      	str	r2, [r3, #24]
 8000de0:	4b1b      	ldr	r3, [pc, #108]	; (8000e50 <HAL_TIM_Base_MspInit+0x90>)
 8000de2:	699a      	ldr	r2, [r3, #24]
 8000de4:	2380      	movs	r3, #128	; 0x80
 8000de6:	011b      	lsls	r3, r3, #4
 8000de8:	4013      	ands	r3, r2
 8000dea:	60fb      	str	r3, [r7, #12]
 8000dec:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_UP_TRG_COM_IRQn, 0, 0);
 8000dee:	2200      	movs	r2, #0
 8000df0:	2100      	movs	r1, #0
 8000df2:	200d      	movs	r0, #13
 8000df4:	f001 fb64 	bl	80024c0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_UP_TRG_COM_IRQn);
 8000df8:	200d      	movs	r0, #13
 8000dfa:	f001 fb81 	bl	8002500 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 8000dfe:	2200      	movs	r2, #0
 8000e00:	2100      	movs	r1, #0
 8000e02:	200e      	movs	r0, #14
 8000e04:	f001 fb5c 	bl	80024c0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8000e08:	200e      	movs	r0, #14
 8000e0a:	f001 fb79 	bl	8002500 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8000e0e:	e019      	b.n	8000e44 <HAL_TIM_Base_MspInit+0x84>
  else if(tim_baseHandle->Instance==TIM2)
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	681a      	ldr	r2, [r3, #0]
 8000e14:	2380      	movs	r3, #128	; 0x80
 8000e16:	05db      	lsls	r3, r3, #23
 8000e18:	429a      	cmp	r2, r3
 8000e1a:	d113      	bne.n	8000e44 <HAL_TIM_Base_MspInit+0x84>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000e1c:	4b0c      	ldr	r3, [pc, #48]	; (8000e50 <HAL_TIM_Base_MspInit+0x90>)
 8000e1e:	69da      	ldr	r2, [r3, #28]
 8000e20:	4b0b      	ldr	r3, [pc, #44]	; (8000e50 <HAL_TIM_Base_MspInit+0x90>)
 8000e22:	2101      	movs	r1, #1
 8000e24:	430a      	orrs	r2, r1
 8000e26:	61da      	str	r2, [r3, #28]
 8000e28:	4b09      	ldr	r3, [pc, #36]	; (8000e50 <HAL_TIM_Base_MspInit+0x90>)
 8000e2a:	69db      	ldr	r3, [r3, #28]
 8000e2c:	2201      	movs	r2, #1
 8000e2e:	4013      	ands	r3, r2
 8000e30:	60bb      	str	r3, [r7, #8]
 8000e32:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000e34:	2200      	movs	r2, #0
 8000e36:	2100      	movs	r1, #0
 8000e38:	200f      	movs	r0, #15
 8000e3a:	f001 fb41 	bl	80024c0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000e3e:	200f      	movs	r0, #15
 8000e40:	f001 fb5e 	bl	8002500 <HAL_NVIC_EnableIRQ>
}
 8000e44:	46c0      	nop			; (mov r8, r8)
 8000e46:	46bd      	mov	sp, r7
 8000e48:	b004      	add	sp, #16
 8000e4a:	bd80      	pop	{r7, pc}
 8000e4c:	40012c00 	.word	0x40012c00
 8000e50:	40021000 	.word	0x40021000

08000e54 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8000e54:	b590      	push	{r4, r7, lr}
 8000e56:	b08b      	sub	sp, #44	; 0x2c
 8000e58:	af00      	add	r7, sp, #0
 8000e5a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e5c:	2314      	movs	r3, #20
 8000e5e:	18fb      	adds	r3, r7, r3
 8000e60:	0018      	movs	r0, r3
 8000e62:	2314      	movs	r3, #20
 8000e64:	001a      	movs	r2, r3
 8000e66:	2100      	movs	r1, #0
 8000e68:	f006 f84e 	bl	8006f08 <memset>
  if(timHandle->Instance==TIM1)
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	4a29      	ldr	r2, [pc, #164]	; (8000f18 <HAL_TIM_MspPostInit+0xc4>)
 8000e72:	4293      	cmp	r3, r2
 8000e74:	d14b      	bne.n	8000f0e <HAL_TIM_MspPostInit+0xba>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e76:	4b29      	ldr	r3, [pc, #164]	; (8000f1c <HAL_TIM_MspPostInit+0xc8>)
 8000e78:	695a      	ldr	r2, [r3, #20]
 8000e7a:	4b28      	ldr	r3, [pc, #160]	; (8000f1c <HAL_TIM_MspPostInit+0xc8>)
 8000e7c:	2180      	movs	r1, #128	; 0x80
 8000e7e:	0289      	lsls	r1, r1, #10
 8000e80:	430a      	orrs	r2, r1
 8000e82:	615a      	str	r2, [r3, #20]
 8000e84:	4b25      	ldr	r3, [pc, #148]	; (8000f1c <HAL_TIM_MspPostInit+0xc8>)
 8000e86:	695a      	ldr	r2, [r3, #20]
 8000e88:	2380      	movs	r3, #128	; 0x80
 8000e8a:	029b      	lsls	r3, r3, #10
 8000e8c:	4013      	ands	r3, r2
 8000e8e:	613b      	str	r3, [r7, #16]
 8000e90:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e92:	4b22      	ldr	r3, [pc, #136]	; (8000f1c <HAL_TIM_MspPostInit+0xc8>)
 8000e94:	695a      	ldr	r2, [r3, #20]
 8000e96:	4b21      	ldr	r3, [pc, #132]	; (8000f1c <HAL_TIM_MspPostInit+0xc8>)
 8000e98:	2180      	movs	r1, #128	; 0x80
 8000e9a:	02c9      	lsls	r1, r1, #11
 8000e9c:	430a      	orrs	r2, r1
 8000e9e:	615a      	str	r2, [r3, #20]
 8000ea0:	4b1e      	ldr	r3, [pc, #120]	; (8000f1c <HAL_TIM_MspPostInit+0xc8>)
 8000ea2:	695a      	ldr	r2, [r3, #20]
 8000ea4:	2380      	movs	r3, #128	; 0x80
 8000ea6:	02db      	lsls	r3, r3, #11
 8000ea8:	4013      	ands	r3, r2
 8000eaa:	60fb      	str	r3, [r7, #12]
 8000eac:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration    
    PA10     ------> TIM1_CH3
    PB15     ------> TIM1_CH3N 
    */
    GPIO_InitStruct.Pin = CH1_Pin;
 8000eae:	2114      	movs	r1, #20
 8000eb0:	187b      	adds	r3, r7, r1
 8000eb2:	2280      	movs	r2, #128	; 0x80
 8000eb4:	00d2      	lsls	r2, r2, #3
 8000eb6:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000eb8:	187b      	adds	r3, r7, r1
 8000eba:	2202      	movs	r2, #2
 8000ebc:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000ebe:	187b      	adds	r3, r7, r1
 8000ec0:	2202      	movs	r2, #2
 8000ec2:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000ec4:	187b      	adds	r3, r7, r1
 8000ec6:	2203      	movs	r2, #3
 8000ec8:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8000eca:	187b      	adds	r3, r7, r1
 8000ecc:	2202      	movs	r2, #2
 8000ece:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(CH1_GPIO_Port, &GPIO_InitStruct);
 8000ed0:	000c      	movs	r4, r1
 8000ed2:	187a      	adds	r2, r7, r1
 8000ed4:	2390      	movs	r3, #144	; 0x90
 8000ed6:	05db      	lsls	r3, r3, #23
 8000ed8:	0011      	movs	r1, r2
 8000eda:	0018      	movs	r0, r3
 8000edc:	f001 ffe0 	bl	8002ea0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = CH2_Pin;
 8000ee0:	0021      	movs	r1, r4
 8000ee2:	187b      	adds	r3, r7, r1
 8000ee4:	2280      	movs	r2, #128	; 0x80
 8000ee6:	0212      	lsls	r2, r2, #8
 8000ee8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000eea:	187b      	adds	r3, r7, r1
 8000eec:	2202      	movs	r2, #2
 8000eee:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000ef0:	187b      	adds	r3, r7, r1
 8000ef2:	2202      	movs	r2, #2
 8000ef4:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000ef6:	187b      	adds	r3, r7, r1
 8000ef8:	2203      	movs	r2, #3
 8000efa:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8000efc:	187b      	adds	r3, r7, r1
 8000efe:	2202      	movs	r2, #2
 8000f00:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(CH2_GPIO_Port, &GPIO_InitStruct);
 8000f02:	187b      	adds	r3, r7, r1
 8000f04:	4a06      	ldr	r2, [pc, #24]	; (8000f20 <HAL_TIM_MspPostInit+0xcc>)
 8000f06:	0019      	movs	r1, r3
 8000f08:	0010      	movs	r0, r2
 8000f0a:	f001 ffc9 	bl	8002ea0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8000f0e:	46c0      	nop			; (mov r8, r8)
 8000f10:	46bd      	mov	sp, r7
 8000f12:	b00b      	add	sp, #44	; 0x2c
 8000f14:	bd90      	pop	{r4, r7, pc}
 8000f16:	46c0      	nop			; (mov r8, r8)
 8000f18:	40012c00 	.word	0x40012c00
 8000f1c:	40021000 	.word	0x40021000
 8000f20:	48000400 	.word	0x48000400

08000f24 <MX_USART2_UART_Init>:
DMA_HandleTypeDef hdma_usart2_tx;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000f24:	b580      	push	{r7, lr}
 8000f26:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 8000f28:	4b14      	ldr	r3, [pc, #80]	; (8000f7c <MX_USART2_UART_Init+0x58>)
 8000f2a:	4a15      	ldr	r2, [pc, #84]	; (8000f80 <MX_USART2_UART_Init+0x5c>)
 8000f2c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000f2e:	4b13      	ldr	r3, [pc, #76]	; (8000f7c <MX_USART2_UART_Init+0x58>)
 8000f30:	22e1      	movs	r2, #225	; 0xe1
 8000f32:	0252      	lsls	r2, r2, #9
 8000f34:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000f36:	4b11      	ldr	r3, [pc, #68]	; (8000f7c <MX_USART2_UART_Init+0x58>)
 8000f38:	2200      	movs	r2, #0
 8000f3a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000f3c:	4b0f      	ldr	r3, [pc, #60]	; (8000f7c <MX_USART2_UART_Init+0x58>)
 8000f3e:	2200      	movs	r2, #0
 8000f40:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000f42:	4b0e      	ldr	r3, [pc, #56]	; (8000f7c <MX_USART2_UART_Init+0x58>)
 8000f44:	2200      	movs	r2, #0
 8000f46:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000f48:	4b0c      	ldr	r3, [pc, #48]	; (8000f7c <MX_USART2_UART_Init+0x58>)
 8000f4a:	220c      	movs	r2, #12
 8000f4c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f4e:	4b0b      	ldr	r3, [pc, #44]	; (8000f7c <MX_USART2_UART_Init+0x58>)
 8000f50:	2200      	movs	r2, #0
 8000f52:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f54:	4b09      	ldr	r3, [pc, #36]	; (8000f7c <MX_USART2_UART_Init+0x58>)
 8000f56:	2200      	movs	r2, #0
 8000f58:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000f5a:	4b08      	ldr	r3, [pc, #32]	; (8000f7c <MX_USART2_UART_Init+0x58>)
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000f60:	4b06      	ldr	r3, [pc, #24]	; (8000f7c <MX_USART2_UART_Init+0x58>)
 8000f62:	2200      	movs	r2, #0
 8000f64:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000f66:	4b05      	ldr	r3, [pc, #20]	; (8000f7c <MX_USART2_UART_Init+0x58>)
 8000f68:	0018      	movs	r0, r3
 8000f6a:	f005 fac5 	bl	80064f8 <HAL_UART_Init>
 8000f6e:	1e03      	subs	r3, r0, #0
 8000f70:	d001      	beq.n	8000f76 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000f72:	f7ff fce9 	bl	8000948 <Error_Handler>
  }

}
 8000f76:	46c0      	nop			; (mov r8, r8)
 8000f78:	46bd      	mov	sp, r7
 8000f7a:	bd80      	pop	{r7, pc}
 8000f7c:	200005e0 	.word	0x200005e0
 8000f80:	40004400 	.word	0x40004400

08000f84 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b08a      	sub	sp, #40	; 0x28
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f8c:	2314      	movs	r3, #20
 8000f8e:	18fb      	adds	r3, r7, r3
 8000f90:	0018      	movs	r0, r3
 8000f92:	2314      	movs	r3, #20
 8000f94:	001a      	movs	r2, r3
 8000f96:	2100      	movs	r1, #0
 8000f98:	f005 ffb6 	bl	8006f08 <memset>
  if(uartHandle->Instance==USART2)
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	4a43      	ldr	r2, [pc, #268]	; (80010b0 <HAL_UART_MspInit+0x12c>)
 8000fa2:	4293      	cmp	r3, r2
 8000fa4:	d000      	beq.n	8000fa8 <HAL_UART_MspInit+0x24>
 8000fa6:	e07e      	b.n	80010a6 <HAL_UART_MspInit+0x122>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000fa8:	4b42      	ldr	r3, [pc, #264]	; (80010b4 <HAL_UART_MspInit+0x130>)
 8000faa:	69da      	ldr	r2, [r3, #28]
 8000fac:	4b41      	ldr	r3, [pc, #260]	; (80010b4 <HAL_UART_MspInit+0x130>)
 8000fae:	2180      	movs	r1, #128	; 0x80
 8000fb0:	0289      	lsls	r1, r1, #10
 8000fb2:	430a      	orrs	r2, r1
 8000fb4:	61da      	str	r2, [r3, #28]
 8000fb6:	4b3f      	ldr	r3, [pc, #252]	; (80010b4 <HAL_UART_MspInit+0x130>)
 8000fb8:	69da      	ldr	r2, [r3, #28]
 8000fba:	2380      	movs	r3, #128	; 0x80
 8000fbc:	029b      	lsls	r3, r3, #10
 8000fbe:	4013      	ands	r3, r2
 8000fc0:	613b      	str	r3, [r7, #16]
 8000fc2:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fc4:	4b3b      	ldr	r3, [pc, #236]	; (80010b4 <HAL_UART_MspInit+0x130>)
 8000fc6:	695a      	ldr	r2, [r3, #20]
 8000fc8:	4b3a      	ldr	r3, [pc, #232]	; (80010b4 <HAL_UART_MspInit+0x130>)
 8000fca:	2180      	movs	r1, #128	; 0x80
 8000fcc:	0289      	lsls	r1, r1, #10
 8000fce:	430a      	orrs	r2, r1
 8000fd0:	615a      	str	r2, [r3, #20]
 8000fd2:	4b38      	ldr	r3, [pc, #224]	; (80010b4 <HAL_UART_MspInit+0x130>)
 8000fd4:	695a      	ldr	r2, [r3, #20]
 8000fd6:	2380      	movs	r3, #128	; 0x80
 8000fd8:	029b      	lsls	r3, r3, #10
 8000fda:	4013      	ands	r3, r2
 8000fdc:	60fb      	str	r3, [r7, #12]
 8000fde:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration    
    PA15     ------> USART2_RX
    PA2     ------> USART2_TX 
    */
    GPIO_InitStruct.Pin = RX1_Pin|TX1_Pin;
 8000fe0:	2114      	movs	r1, #20
 8000fe2:	187b      	adds	r3, r7, r1
 8000fe4:	4a34      	ldr	r2, [pc, #208]	; (80010b8 <HAL_UART_MspInit+0x134>)
 8000fe6:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fe8:	187b      	adds	r3, r7, r1
 8000fea:	2202      	movs	r2, #2
 8000fec:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fee:	187b      	adds	r3, r7, r1
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000ff4:	187b      	adds	r3, r7, r1
 8000ff6:	2203      	movs	r2, #3
 8000ff8:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8000ffa:	187b      	adds	r3, r7, r1
 8000ffc:	2201      	movs	r2, #1
 8000ffe:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001000:	187a      	adds	r2, r7, r1
 8001002:	2390      	movs	r3, #144	; 0x90
 8001004:	05db      	lsls	r3, r3, #23
 8001006:	0011      	movs	r1, r2
 8001008:	0018      	movs	r0, r3
 800100a:	f001 ff49 	bl	8002ea0 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Channel5;
 800100e:	4b2b      	ldr	r3, [pc, #172]	; (80010bc <HAL_UART_MspInit+0x138>)
 8001010:	4a2b      	ldr	r2, [pc, #172]	; (80010c0 <HAL_UART_MspInit+0x13c>)
 8001012:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001014:	4b29      	ldr	r3, [pc, #164]	; (80010bc <HAL_UART_MspInit+0x138>)
 8001016:	2200      	movs	r2, #0
 8001018:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800101a:	4b28      	ldr	r3, [pc, #160]	; (80010bc <HAL_UART_MspInit+0x138>)
 800101c:	2200      	movs	r2, #0
 800101e:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001020:	4b26      	ldr	r3, [pc, #152]	; (80010bc <HAL_UART_MspInit+0x138>)
 8001022:	2280      	movs	r2, #128	; 0x80
 8001024:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001026:	4b25      	ldr	r3, [pc, #148]	; (80010bc <HAL_UART_MspInit+0x138>)
 8001028:	2200      	movs	r2, #0
 800102a:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800102c:	4b23      	ldr	r3, [pc, #140]	; (80010bc <HAL_UART_MspInit+0x138>)
 800102e:	2200      	movs	r2, #0
 8001030:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 8001032:	4b22      	ldr	r3, [pc, #136]	; (80010bc <HAL_UART_MspInit+0x138>)
 8001034:	2220      	movs	r2, #32
 8001036:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001038:	4b20      	ldr	r3, [pc, #128]	; (80010bc <HAL_UART_MspInit+0x138>)
 800103a:	2200      	movs	r2, #0
 800103c:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 800103e:	4b1f      	ldr	r3, [pc, #124]	; (80010bc <HAL_UART_MspInit+0x138>)
 8001040:	0018      	movs	r0, r3
 8001042:	f001 fccd 	bl	80029e0 <HAL_DMA_Init>
 8001046:	1e03      	subs	r3, r0, #0
 8001048:	d001      	beq.n	800104e <HAL_UART_MspInit+0xca>
    {
      Error_Handler();
 800104a:	f7ff fc7d 	bl	8000948 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	4a1a      	ldr	r2, [pc, #104]	; (80010bc <HAL_UART_MspInit+0x138>)
 8001052:	665a      	str	r2, [r3, #100]	; 0x64
 8001054:	4b19      	ldr	r3, [pc, #100]	; (80010bc <HAL_UART_MspInit+0x138>)
 8001056:	687a      	ldr	r2, [r7, #4]
 8001058:	625a      	str	r2, [r3, #36]	; 0x24

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Channel4;
 800105a:	4b1a      	ldr	r3, [pc, #104]	; (80010c4 <HAL_UART_MspInit+0x140>)
 800105c:	4a1a      	ldr	r2, [pc, #104]	; (80010c8 <HAL_UART_MspInit+0x144>)
 800105e:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001060:	4b18      	ldr	r3, [pc, #96]	; (80010c4 <HAL_UART_MspInit+0x140>)
 8001062:	2210      	movs	r2, #16
 8001064:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001066:	4b17      	ldr	r3, [pc, #92]	; (80010c4 <HAL_UART_MspInit+0x140>)
 8001068:	2200      	movs	r2, #0
 800106a:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 800106c:	4b15      	ldr	r3, [pc, #84]	; (80010c4 <HAL_UART_MspInit+0x140>)
 800106e:	2280      	movs	r2, #128	; 0x80
 8001070:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001072:	4b14      	ldr	r3, [pc, #80]	; (80010c4 <HAL_UART_MspInit+0x140>)
 8001074:	2200      	movs	r2, #0
 8001076:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001078:	4b12      	ldr	r3, [pc, #72]	; (80010c4 <HAL_UART_MspInit+0x140>)
 800107a:	2200      	movs	r2, #0
 800107c:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.Mode = DMA_CIRCULAR;
 800107e:	4b11      	ldr	r3, [pc, #68]	; (80010c4 <HAL_UART_MspInit+0x140>)
 8001080:	2220      	movs	r2, #32
 8001082:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001084:	4b0f      	ldr	r3, [pc, #60]	; (80010c4 <HAL_UART_MspInit+0x140>)
 8001086:	2200      	movs	r2, #0
 8001088:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 800108a:	4b0e      	ldr	r3, [pc, #56]	; (80010c4 <HAL_UART_MspInit+0x140>)
 800108c:	0018      	movs	r0, r3
 800108e:	f001 fca7 	bl	80029e0 <HAL_DMA_Init>
 8001092:	1e03      	subs	r3, r0, #0
 8001094:	d001      	beq.n	800109a <HAL_UART_MspInit+0x116>
    {
      Error_Handler();
 8001096:	f7ff fc57 	bl	8000948 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	4a09      	ldr	r2, [pc, #36]	; (80010c4 <HAL_UART_MspInit+0x140>)
 800109e:	661a      	str	r2, [r3, #96]	; 0x60
 80010a0:	4b08      	ldr	r3, [pc, #32]	; (80010c4 <HAL_UART_MspInit+0x140>)
 80010a2:	687a      	ldr	r2, [r7, #4]
 80010a4:	625a      	str	r2, [r3, #36]	; 0x24

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80010a6:	46c0      	nop			; (mov r8, r8)
 80010a8:	46bd      	mov	sp, r7
 80010aa:	b00a      	add	sp, #40	; 0x28
 80010ac:	bd80      	pop	{r7, pc}
 80010ae:	46c0      	nop			; (mov r8, r8)
 80010b0:	40004400 	.word	0x40004400
 80010b4:	40021000 	.word	0x40021000
 80010b8:	00008004 	.word	0x00008004
 80010bc:	20000558 	.word	0x20000558
 80010c0:	40020058 	.word	0x40020058
 80010c4:	2000059c 	.word	0x2000059c
 80010c8:	40020044 	.word	0x40020044

080010cc <Set50Hz>:
//#define DeadTime16X 				1 //332,8ns
//#define DeadTime32X 				1 //665,6ns
//#define DeadTime64X 				1 //1331,2ns
//#define DeadTime128X 				1 //2662,4ns

void Set50Hz() {
 80010cc:	b580      	push	{r7, lr}
 80010ce:	af00      	add	r7, sp, #0
	TIM1->PSC=479-1;
 80010d0:	4b03      	ldr	r3, [pc, #12]	; (80010e0 <Set50Hz+0x14>)
 80010d2:	22ef      	movs	r2, #239	; 0xef
 80010d4:	0052      	lsls	r2, r2, #1
 80010d6:	629a      	str	r2, [r3, #40]	; 0x28
}
 80010d8:	46c0      	nop			; (mov r8, r8)
 80010da:	46bd      	mov	sp, r7
 80010dc:	bd80      	pop	{r7, pc}
 80010de:	46c0      	nop			; (mov r8, r8)
 80010e0:	40012c00 	.word	0x40012c00

080010e4 <SetDeadTime>:

void Set505Hz() {
	TIM1->PSC=475-1;
}

uint32_t SetDeadTime() {
 80010e4:	b580      	push	{r7, lr}
 80010e6:	b082      	sub	sp, #8
 80010e8:	af00      	add	r7, sp, #0
	uint32_t _DeadTime=0;
 80010ea:	2300      	movs	r3, #0
 80010ec:	607b      	str	r3, [r7, #4]

	//_DeadTime  |= TIM_BDTR_DTG_7;//128x //2662,4ns
	_DeadTime  |= TIM_BDTR_DTG_6;//64x //1331,2ns
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	2240      	movs	r2, #64	; 0x40
 80010f2:	4313      	orrs	r3, r2
 80010f4:	607b      	str	r3, [r7, #4]
	_DeadTime  |= TIM_BDTR_DTG_5;//32x //665,6ns
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	2220      	movs	r2, #32
 80010fa:	4313      	orrs	r3, r2
 80010fc:	607b      	str	r3, [r7, #4]
	_DeadTime  |= TIM_BDTR_DTG_4;//16x //332,8ns
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	2210      	movs	r2, #16
 8001102:	4313      	orrs	r3, r2
 8001104:	607b      	str	r3, [r7, #4]
	_DeadTime  |= TIM_BDTR_DTG_3;//8x //166,4ns
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	2208      	movs	r2, #8
 800110a:	4313      	orrs	r3, r2
 800110c:	607b      	str	r3, [r7, #4]
	_DeadTime  |= TIM_BDTR_DTG_2;//4x //83,2ns
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	2204      	movs	r2, #4
 8001112:	4313      	orrs	r3, r2
 8001114:	607b      	str	r3, [r7, #4]
	_DeadTime  |= TIM_BDTR_DTG_1;//2x  //41,6ns
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	2202      	movs	r2, #2
 800111a:	4313      	orrs	r3, r2
 800111c:	607b      	str	r3, [r7, #4]
	_DeadTime  |= TIM_BDTR_DTG_0;//1x // Dead time base value 1/Fosc=1/48000=20.8ns
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	2201      	movs	r2, #1
 8001122:	4313      	orrs	r3, r2
 8001124:	607b      	str	r3, [r7, #4]

	return _DeadTime;
 8001126:	687b      	ldr	r3, [r7, #4]
}
 8001128:	0018      	movs	r0, r3
 800112a:	46bd      	mov	sp, r7
 800112c:	b002      	add	sp, #8
 800112e:	bd80      	pop	{r7, pc}

08001130 <PWM_50Hz_ON>:
    //HAL_TIM_PWM_Stop(&htim1,TIM_CHANNEL_3);
}
*/


void PWM_50Hz_ON(void){
 8001130:	b580      	push	{r7, lr}
 8001132:	af00      	add	r7, sp, #0
	//PWM_50Hz_OUTEN(); // OUTPUT ENABLE
	//PWM_50Hz_START(); // start CNT
	HAL_TIM_Base_Start(&htim1);
 8001134:	4b0b      	ldr	r3, [pc, #44]	; (8001164 <PWM_50Hz_ON+0x34>)
 8001136:	0018      	movs	r0, r3
 8001138:	f003 f93c 	bl	80043b4 <HAL_TIM_Base_Start>
	HAL_TIM_Base_Start_IT(&htim1);
 800113c:	4b09      	ldr	r3, [pc, #36]	; (8001164 <PWM_50Hz_ON+0x34>)
 800113e:	0018      	movs	r0, r3
 8001140:	f003 f9fc 	bl	800453c <HAL_TIM_Base_Start_IT>
	HAL_TIM_OC_Start(&htim1, TIM_CHANNEL_3);
 8001144:	4b07      	ldr	r3, [pc, #28]	; (8001164 <PWM_50Hz_ON+0x34>)
 8001146:	2108      	movs	r1, #8
 8001148:	0018      	movs	r0, r3
 800114a:	f003 fb73 	bl	8004834 <HAL_TIM_OC_Start>
	HAL_TIMEx_OCN_Start(&htim1, TIM_CHANNEL_3);
 800114e:	4b05      	ldr	r3, [pc, #20]	; (8001164 <PWM_50Hz_ON+0x34>)
 8001150:	2108      	movs	r1, #8
 8001152:	0018      	movs	r0, r3
 8001154:	f004 ff0c 	bl	8005f70 <HAL_TIMEx_OCN_Start>

	IsGenerator=1;
 8001158:	4b03      	ldr	r3, [pc, #12]	; (8001168 <PWM_50Hz_ON+0x38>)
 800115a:	2201      	movs	r2, #1
 800115c:	601a      	str	r2, [r3, #0]
}
 800115e:	46c0      	nop			; (mov r8, r8)
 8001160:	46bd      	mov	sp, r7
 8001162:	bd80      	pop	{r7, pc}
 8001164:	200004d8 	.word	0x200004d8
 8001168:	200003f0 	.word	0x200003f0

0800116c <PWM_50Hz_OFF>:

void PWM_50Hz_OFF(void){
 800116c:	b580      	push	{r7, lr}
 800116e:	af00      	add	r7, sp, #0
	//PWM_50Hz_OUTDIS(); // OUTPUT ENABLE
	//PWM_50Hz_STOP(); // stop CNT
	HAL_TIM_Base_Stop(&htim1);
 8001170:	4b0b      	ldr	r3, [pc, #44]	; (80011a0 <PWM_50Hz_OFF+0x34>)
 8001172:	0018      	movs	r0, r3
 8001174:	f003 f978 	bl	8004468 <HAL_TIM_Base_Stop>
	HAL_TIM_Base_Stop_IT(&htim1);
 8001178:	4b09      	ldr	r3, [pc, #36]	; (80011a0 <PWM_50Hz_OFF+0x34>)
 800117a:	0018      	movs	r0, r3
 800117c:	f003 fa38 	bl	80045f0 <HAL_TIM_Base_Stop_IT>
	HAL_TIM_OC_Stop(&htim1, TIM_CHANNEL_3);
 8001180:	4b07      	ldr	r3, [pc, #28]	; (80011a0 <PWM_50Hz_OFF+0x34>)
 8001182:	2108      	movs	r1, #8
 8001184:	0018      	movs	r0, r3
 8001186:	f003 fbff 	bl	8004988 <HAL_TIM_OC_Stop>
	HAL_TIMEx_OCN_Stop(&htim1, TIM_CHANNEL_3);
 800118a:	4b05      	ldr	r3, [pc, #20]	; (80011a0 <PWM_50Hz_OFF+0x34>)
 800118c:	2108      	movs	r1, #8
 800118e:	0018      	movs	r0, r3
 8001190:	f004 ff48 	bl	8006024 <HAL_TIMEx_OCN_Stop>

	IsGenerator=0;
 8001194:	4b03      	ldr	r3, [pc, #12]	; (80011a4 <PWM_50Hz_OFF+0x38>)
 8001196:	2200      	movs	r2, #0
 8001198:	601a      	str	r2, [r3, #0]
}
 800119a:	46c0      	nop			; (mov r8, r8)
 800119c:	46bd      	mov	sp, r7
 800119e:	bd80      	pop	{r7, pc}
 80011a0:	200004d8 	.word	0x200004d8
 80011a4:	200003f0 	.word	0x200003f0

080011a8 <CalcAvg>:
volatile uint32_t adcOC_V_Avg=1;

volatile uint8_t CurrentMargin=SINUS_MARGIN;


void CalcAvg() {
 80011a8:	b580      	push	{r7, lr}
 80011aa:	af00      	add	r7, sp, #0
	if (ADC_Cnt==0) {
 80011ac:	4b16      	ldr	r3, [pc, #88]	; (8001208 <CalcAvg+0x60>)
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d105      	bne.n	80011c0 <CalcAvg+0x18>
		adcWienZero_Avg=0;
 80011b4:	4b15      	ldr	r3, [pc, #84]	; (800120c <CalcAvg+0x64>)
 80011b6:	2200      	movs	r2, #0
 80011b8:	601a      	str	r2, [r3, #0]
		adcOC_V_Avg=3800;
 80011ba:	4b15      	ldr	r3, [pc, #84]	; (8001210 <CalcAvg+0x68>)
 80011bc:	4a15      	ldr	r2, [pc, #84]	; (8001214 <CalcAvg+0x6c>)
 80011be:	601a      	str	r2, [r3, #0]
	}
	adcWienZero_Avg=(adcWienZero/ADC_Cnt);
 80011c0:	4b15      	ldr	r3, [pc, #84]	; (8001218 <CalcAvg+0x70>)
 80011c2:	681a      	ldr	r2, [r3, #0]
 80011c4:	4b10      	ldr	r3, [pc, #64]	; (8001208 <CalcAvg+0x60>)
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	0019      	movs	r1, r3
 80011ca:	0010      	movs	r0, r2
 80011cc:	f7fe ff9c 	bl	8000108 <__udivsi3>
 80011d0:	0003      	movs	r3, r0
 80011d2:	001a      	movs	r2, r3
 80011d4:	4b0d      	ldr	r3, [pc, #52]	; (800120c <CalcAvg+0x64>)
 80011d6:	601a      	str	r2, [r3, #0]
	adcOC_V_Avg=adcOC_V/ADC_Cnt;
 80011d8:	4b10      	ldr	r3, [pc, #64]	; (800121c <CalcAvg+0x74>)
 80011da:	681a      	ldr	r2, [r3, #0]
 80011dc:	4b0a      	ldr	r3, [pc, #40]	; (8001208 <CalcAvg+0x60>)
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	0019      	movs	r1, r3
 80011e2:	0010      	movs	r0, r2
 80011e4:	f7fe ff90 	bl	8000108 <__udivsi3>
 80011e8:	0003      	movs	r3, r0
 80011ea:	001a      	movs	r2, r3
 80011ec:	4b08      	ldr	r3, [pc, #32]	; (8001210 <CalcAvg+0x68>)
 80011ee:	601a      	str	r2, [r3, #0]
	//
	ADC_Cnt=0;
 80011f0:	4b05      	ldr	r3, [pc, #20]	; (8001208 <CalcAvg+0x60>)
 80011f2:	2200      	movs	r2, #0
 80011f4:	601a      	str	r2, [r3, #0]
	adcWienZero=0;
 80011f6:	4b08      	ldr	r3, [pc, #32]	; (8001218 <CalcAvg+0x70>)
 80011f8:	2200      	movs	r2, #0
 80011fa:	601a      	str	r2, [r3, #0]
	adcOC_V=0;
 80011fc:	4b07      	ldr	r3, [pc, #28]	; (800121c <CalcAvg+0x74>)
 80011fe:	2200      	movs	r2, #0
 8001200:	601a      	str	r2, [r3, #0]
}
 8001202:	46c0      	nop			; (mov r8, r8)
 8001204:	46bd      	mov	sp, r7
 8001206:	bd80      	pop	{r7, pc}
 8001208:	200003f8 	.word	0x200003f8
 800120c:	20000658 	.word	0x20000658
 8001210:	20000008 	.word	0x20000008
 8001214:	00000ed8 	.word	0x00000ed8
 8001218:	2000065c 	.word	0x2000065c
 800121c:	20000654 	.word	0x20000654

08001220 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc1)
{
 8001220:	b580      	push	{r7, lr}
 8001222:	b082      	sub	sp, #8
 8001224:	af00      	add	r7, sp, #0
 8001226:	6078      	str	r0, [r7, #4]
	adcOC_I=adcOC_I+ADC_Data[2];
	adcKlapan=adcKlapan+ADC_Data[3];
	adcPolka=adcPolka+ADC_Data[4];
	adcWienZero=adcWienZero+ADC_Data[5];*/
	//
	ADC_Cnt=ADC_Cnt+1;
 8001228:	4b16      	ldr	r3, [pc, #88]	; (8001284 <HAL_ADC_ConvCpltCallback+0x64>)
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	1c5a      	adds	r2, r3, #1
 800122e:	4b15      	ldr	r3, [pc, #84]	; (8001284 <HAL_ADC_ConvCpltCallback+0x64>)
 8001230:	601a      	str	r2, [r3, #0]

		adcOC_V=adcOC_V+ADC_Data[3];
 8001232:	4b15      	ldr	r3, [pc, #84]	; (8001288 <HAL_ADC_ConvCpltCallback+0x68>)
 8001234:	88db      	ldrh	r3, [r3, #6]
 8001236:	b29b      	uxth	r3, r3
 8001238:	001a      	movs	r2, r3
 800123a:	4b14      	ldr	r3, [pc, #80]	; (800128c <HAL_ADC_ConvCpltCallback+0x6c>)
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	18d2      	adds	r2, r2, r3
 8001240:	4b12      	ldr	r3, [pc, #72]	; (800128c <HAL_ADC_ConvCpltCallback+0x6c>)
 8001242:	601a      	str	r2, [r3, #0]
		adcOC_I=ADC_Data[1];
 8001244:	4b10      	ldr	r3, [pc, #64]	; (8001288 <HAL_ADC_ConvCpltCallback+0x68>)
 8001246:	885b      	ldrh	r3, [r3, #2]
 8001248:	b29b      	uxth	r3, r3
 800124a:	001a      	movs	r2, r3
 800124c:	4b10      	ldr	r3, [pc, #64]	; (8001290 <HAL_ADC_ConvCpltCallback+0x70>)
 800124e:	601a      	str	r2, [r3, #0]
		adcKlapan=ADC_Data[2];
 8001250:	4b0d      	ldr	r3, [pc, #52]	; (8001288 <HAL_ADC_ConvCpltCallback+0x68>)
 8001252:	889b      	ldrh	r3, [r3, #4]
 8001254:	b29b      	uxth	r3, r3
 8001256:	001a      	movs	r2, r3
 8001258:	4b0e      	ldr	r3, [pc, #56]	; (8001294 <HAL_ADC_ConvCpltCallback+0x74>)
 800125a:	601a      	str	r2, [r3, #0]
		adcPolka=ADC_Data[0];
 800125c:	4b0a      	ldr	r3, [pc, #40]	; (8001288 <HAL_ADC_ConvCpltCallback+0x68>)
 800125e:	881b      	ldrh	r3, [r3, #0]
 8001260:	b29b      	uxth	r3, r3
 8001262:	001a      	movs	r2, r3
 8001264:	4b0c      	ldr	r3, [pc, #48]	; (8001298 <HAL_ADC_ConvCpltCallback+0x78>)
 8001266:	601a      	str	r2, [r3, #0]
		adcWienZero=adcWienZero+ADC_Data[4];
 8001268:	4b07      	ldr	r3, [pc, #28]	; (8001288 <HAL_ADC_ConvCpltCallback+0x68>)
 800126a:	891b      	ldrh	r3, [r3, #8]
 800126c:	b29b      	uxth	r3, r3
 800126e:	001a      	movs	r2, r3
 8001270:	4b0a      	ldr	r3, [pc, #40]	; (800129c <HAL_ADC_ConvCpltCallback+0x7c>)
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	18d2      	adds	r2, r2, r3
 8001276:	4b09      	ldr	r3, [pc, #36]	; (800129c <HAL_ADC_ConvCpltCallback+0x7c>)
 8001278:	601a      	str	r2, [r3, #0]
		//adcWienZero=10;

	//
	//ResetADC_Buff();
	//StartADC();
}
 800127a:	46c0      	nop			; (mov r8, r8)
 800127c:	46bd      	mov	sp, r7
 800127e:	b002      	add	sp, #8
 8001280:	bd80      	pop	{r7, pc}
 8001282:	46c0      	nop			; (mov r8, r8)
 8001284:	200003f8 	.word	0x200003f8
 8001288:	20000664 	.word	0x20000664
 800128c:	20000654 	.word	0x20000654
 8001290:	20000660 	.word	0x20000660
 8001294:	20000650 	.word	0x20000650
 8001298:	20000670 	.word	0x20000670
 800129c:	2000065c 	.word	0x2000065c

080012a0 <StartADC>:



void StartADC(){
 80012a0:	b580      	push	{r7, lr}
 80012a2:	af00      	add	r7, sp, #0
	//HAL_ADC_Start_IT(&hadc);
	//ADC->CCR |= ADC_CCR_TSEN | ADC_CCR_VREFEN;
	HAL_ADC_Start_DMA(&hadc,(uint32_t*) &ADC_Data,ADC_ChannelCnt);
 80012a4:	4904      	ldr	r1, [pc, #16]	; (80012b8 <StartADC+0x18>)
 80012a6:	4b05      	ldr	r3, [pc, #20]	; (80012bc <StartADC+0x1c>)
 80012a8:	2205      	movs	r2, #5
 80012aa:	0018      	movs	r0, r3
 80012ac:	f000 fd00 	bl	8001cb0 <HAL_ADC_Start_DMA>
}
 80012b0:	46c0      	nop			; (mov r8, r8)
 80012b2:	46bd      	mov	sp, r7
 80012b4:	bd80      	pop	{r7, pc}
 80012b6:	46c0      	nop			; (mov r8, r8)
 80012b8:	20000664 	.word	0x20000664
 80012bc:	20000444 	.word	0x20000444

080012c0 <Off_LEDs>:
void On_LEDs() {
	HAL_GPIO_WritePin(BOARD_LED_GPIO_Port, BOARD_LED_Pin,GPIO_PIN_SET); // LED On
    HAL_GPIO_WritePin(POLKA_LED_GPIO_Port, POLKA_LED_Pin,GPIO_PIN_SET); // LED On
}

void Off_LEDs() {
 80012c0:	b580      	push	{r7, lr}
 80012c2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(BOARD_LED_GPIO_Port, BOARD_LED_Pin,GPIO_PIN_RESET); // LED Off
 80012c4:	2380      	movs	r3, #128	; 0x80
 80012c6:	005b      	lsls	r3, r3, #1
 80012c8:	4807      	ldr	r0, [pc, #28]	; (80012e8 <Off_LEDs+0x28>)
 80012ca:	2200      	movs	r2, #0
 80012cc:	0019      	movs	r1, r3
 80012ce:	f002 f83d 	bl	800334c <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(POLKA_LED_GPIO_Port, POLKA_LED_Pin,GPIO_PIN_RESET); // LED Off
 80012d2:	2380      	movs	r3, #128	; 0x80
 80012d4:	009b      	lsls	r3, r3, #2
 80012d6:	4804      	ldr	r0, [pc, #16]	; (80012e8 <Off_LEDs+0x28>)
 80012d8:	2200      	movs	r2, #0
 80012da:	0019      	movs	r1, r3
 80012dc:	f002 f836 	bl	800334c <HAL_GPIO_WritePin>
}
 80012e0:	46c0      	nop			; (mov r8, r8)
 80012e2:	46bd      	mov	sp, r7
 80012e4:	bd80      	pop	{r7, pc}
 80012e6:	46c0      	nop			; (mov r8, r8)
 80012e8:	48000800 	.word	0x48000800

080012ec <BlinkLEDs>:

void BlinkLEDs(uint8_t _cnt, uint8_t _Delay) {
 80012ec:	b580      	push	{r7, lr}
 80012ee:	b084      	sub	sp, #16
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	0002      	movs	r2, r0
 80012f4:	1dfb      	adds	r3, r7, #7
 80012f6:	701a      	strb	r2, [r3, #0]
 80012f8:	1dbb      	adds	r3, r7, #6
 80012fa:	1c0a      	adds	r2, r1, #0
 80012fc:	701a      	strb	r2, [r3, #0]
	uint8_t _i=0;
 80012fe:	230f      	movs	r3, #15
 8001300:	18fb      	adds	r3, r7, r3
 8001302:	2200      	movs	r2, #0
 8001304:	701a      	strb	r2, [r3, #0]
	Off_LEDs();
 8001306:	f7ff ffdb 	bl	80012c0 <Off_LEDs>
	while (_i<_cnt) {
 800130a:	e018      	b.n	800133e <BlinkLEDs+0x52>
		HAL_GPIO_TogglePin(BOARD_LED_GPIO_Port, BOARD_LED_Pin);
 800130c:	2380      	movs	r3, #128	; 0x80
 800130e:	005b      	lsls	r3, r3, #1
 8001310:	4a11      	ldr	r2, [pc, #68]	; (8001358 <BlinkLEDs+0x6c>)
 8001312:	0019      	movs	r1, r3
 8001314:	0010      	movs	r0, r2
 8001316:	f002 f859 	bl	80033cc <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin(POLKA_LED_GPIO_Port, POLKA_LED_Pin);
 800131a:	2380      	movs	r3, #128	; 0x80
 800131c:	009b      	lsls	r3, r3, #2
 800131e:	4a0e      	ldr	r2, [pc, #56]	; (8001358 <BlinkLEDs+0x6c>)
 8001320:	0019      	movs	r1, r3
 8001322:	0010      	movs	r0, r2
 8001324:	f002 f852 	bl	80033cc <HAL_GPIO_TogglePin>
		HAL_Delay(_Delay);
 8001328:	1dbb      	adds	r3, r7, #6
 800132a:	781b      	ldrb	r3, [r3, #0]
 800132c:	0018      	movs	r0, r3
 800132e:	f000 fa57 	bl	80017e0 <HAL_Delay>
		_i++;
 8001332:	210f      	movs	r1, #15
 8001334:	187b      	adds	r3, r7, r1
 8001336:	781a      	ldrb	r2, [r3, #0]
 8001338:	187b      	adds	r3, r7, r1
 800133a:	3201      	adds	r2, #1
 800133c:	701a      	strb	r2, [r3, #0]
	while (_i<_cnt) {
 800133e:	230f      	movs	r3, #15
 8001340:	18fa      	adds	r2, r7, r3
 8001342:	1dfb      	adds	r3, r7, #7
 8001344:	7812      	ldrb	r2, [r2, #0]
 8001346:	781b      	ldrb	r3, [r3, #0]
 8001348:	429a      	cmp	r2, r3
 800134a:	d3df      	bcc.n	800130c <BlinkLEDs+0x20>
	}
	Off_LEDs();
 800134c:	f7ff ffb8 	bl	80012c0 <Off_LEDs>
}
 8001350:	46c0      	nop			; (mov r8, r8)
 8001352:	46bd      	mov	sp, r7
 8001354:	b004      	add	sp, #16
 8001356:	bd80      	pop	{r7, pc}
 8001358:	48000800 	.word	0x48000800

0800135c <Check50Hz>:

void Check50Hz() {
 800135c:	b580      	push	{r7, lr}
 800135e:	af00      	add	r7, sp, #0
	if((BlockGenerator==0) && (IsGenerator==1)) {
 8001360:	4b32      	ldr	r3, [pc, #200]	; (800142c <Check50Hz+0xd0>)
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	2b00      	cmp	r3, #0
 8001366:	d130      	bne.n	80013ca <Check50Hz+0x6e>
 8001368:	4b31      	ldr	r3, [pc, #196]	; (8001430 <Check50Hz+0xd4>)
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	2b01      	cmp	r3, #1
 800136e:	d12c      	bne.n	80013ca <Check50Hz+0x6e>
		if (((TIM1->CNT==1000) || (TIM1->CNT==0)) || ((sin_step>50) && (TIM1->CNT<10))) {
 8001370:	4b30      	ldr	r3, [pc, #192]	; (8001434 <Check50Hz+0xd8>)
 8001372:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001374:	23fa      	movs	r3, #250	; 0xfa
 8001376:	009b      	lsls	r3, r3, #2
 8001378:	429a      	cmp	r2, r3
 800137a:	d00c      	beq.n	8001396 <Check50Hz+0x3a>
 800137c:	4b2d      	ldr	r3, [pc, #180]	; (8001434 <Check50Hz+0xd8>)
 800137e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001380:	2b00      	cmp	r3, #0
 8001382:	d008      	beq.n	8001396 <Check50Hz+0x3a>
 8001384:	4b2c      	ldr	r3, [pc, #176]	; (8001438 <Check50Hz+0xdc>)
 8001386:	881b      	ldrh	r3, [r3, #0]
 8001388:	b29b      	uxth	r3, r3
 800138a:	2b32      	cmp	r3, #50	; 0x32
 800138c:	d91d      	bls.n	80013ca <Check50Hz+0x6e>
 800138e:	4b29      	ldr	r3, [pc, #164]	; (8001434 <Check50Hz+0xd8>)
 8001390:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001392:	2b09      	cmp	r3, #9
 8001394:	d819      	bhi.n	80013ca <Check50Hz+0x6e>
			sin_step=0;
 8001396:	4b28      	ldr	r3, [pc, #160]	; (8001438 <Check50Hz+0xdc>)
 8001398:	2200      	movs	r2, #0
 800139a:	801a      	strh	r2, [r3, #0]
		  	       if (((TIM1->CNT==1000) || (TIM1->CNT==0)) || ((sin_step>50) && (TIM1->CNT<10))) {
 800139c:	4b25      	ldr	r3, [pc, #148]	; (8001434 <Check50Hz+0xd8>)
 800139e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80013a0:	23fa      	movs	r3, #250	; 0xfa
 80013a2:	009b      	lsls	r3, r3, #2
 80013a4:	429a      	cmp	r2, r3
 80013a6:	d00c      	beq.n	80013c2 <Check50Hz+0x66>
 80013a8:	4b22      	ldr	r3, [pc, #136]	; (8001434 <Check50Hz+0xd8>)
 80013aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d008      	beq.n	80013c2 <Check50Hz+0x66>
 80013b0:	4b21      	ldr	r3, [pc, #132]	; (8001438 <Check50Hz+0xdc>)
 80013b2:	881b      	ldrh	r3, [r3, #0]
 80013b4:	b29b      	uxth	r3, r3
 80013b6:	2b32      	cmp	r3, #50	; 0x32
 80013b8:	d935      	bls.n	8001426 <Check50Hz+0xca>
 80013ba:	4b1e      	ldr	r3, [pc, #120]	; (8001434 <Check50Hz+0xd8>)
 80013bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013be:	2b09      	cmp	r3, #9
 80013c0:	d831      	bhi.n	8001426 <Check50Hz+0xca>
		  				sin_step=0;
 80013c2:	4b1d      	ldr	r3, [pc, #116]	; (8001438 <Check50Hz+0xdc>)
 80013c4:	2200      	movs	r2, #0
 80013c6:	801a      	strh	r2, [r3, #0]
		  				return;
 80013c8:	e02e      	b.n	8001428 <Check50Hz+0xcc>

			return;
		}
	}

	if((BlockGenerator==0) && (IsGenerator==0)) {
 80013ca:	4b18      	ldr	r3, [pc, #96]	; (800142c <Check50Hz+0xd0>)
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d10e      	bne.n	80013f0 <Check50Hz+0x94>
 80013d2:	4b17      	ldr	r3, [pc, #92]	; (8001430 <Check50Hz+0xd4>)
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d10a      	bne.n	80013f0 <Check50Hz+0x94>
		TIM1->CCR3=0;
 80013da:	4b16      	ldr	r3, [pc, #88]	; (8001434 <Check50Hz+0xd8>)
 80013dc:	2200      	movs	r2, #0
 80013de:	63da      	str	r2, [r3, #60]	; 0x3c
		TIM1->CNT=0;
 80013e0:	4b14      	ldr	r3, [pc, #80]	; (8001434 <Check50Hz+0xd8>)
 80013e2:	2200      	movs	r2, #0
 80013e4:	625a      	str	r2, [r3, #36]	; 0x24
		PWM_50Hz_ON();
 80013e6:	f7ff fea3 	bl	8001130 <PWM_50Hz_ON>
		DAC_SINUS_ON();
 80013ea:	f000 f8ad 	bl	8001548 <DAC_SINUS_ON>
		return;
 80013ee:	e01b      	b.n	8001428 <Check50Hz+0xcc>
	}

	if((BlockGenerator==1) && (IsGenerator==1)) {
 80013f0:	4b0e      	ldr	r3, [pc, #56]	; (800142c <Check50Hz+0xd0>)
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	2b01      	cmp	r3, #1
 80013f6:	d117      	bne.n	8001428 <Check50Hz+0xcc>
 80013f8:	4b0d      	ldr	r3, [pc, #52]	; (8001430 <Check50Hz+0xd4>)
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	2b01      	cmp	r3, #1
 80013fe:	d113      	bne.n	8001428 <Check50Hz+0xcc>
		TIM1->CCR3=0;
 8001400:	4b0c      	ldr	r3, [pc, #48]	; (8001434 <Check50Hz+0xd8>)
 8001402:	2200      	movs	r2, #0
 8001404:	63da      	str	r2, [r3, #60]	; 0x3c
		TIM1->CNT=0;
 8001406:	4b0b      	ldr	r3, [pc, #44]	; (8001434 <Check50Hz+0xd8>)
 8001408:	2200      	movs	r2, #0
 800140a:	625a      	str	r2, [r3, #36]	; 0x24
		PWM_50Hz_OFF();
 800140c:	f7ff feae 	bl	800116c <PWM_50Hz_OFF>
		DAC_SINUS_OFF();
 8001410:	f000 f8b0 	bl	8001574 <DAC_SINUS_OFF>
		HAL_GPIO_WritePin(BOARD_LED_GPIO_Port, BOARD_LED_Pin,GPIO_PIN_SET); // LED Off
 8001414:	2380      	movs	r3, #128	; 0x80
 8001416:	005b      	lsls	r3, r3, #1
 8001418:	4808      	ldr	r0, [pc, #32]	; (800143c <Check50Hz+0xe0>)
 800141a:	2201      	movs	r2, #1
 800141c:	0019      	movs	r1, r3
 800141e:	f001 ff95 	bl	800334c <HAL_GPIO_WritePin>
		return;
 8001422:	46c0      	nop			; (mov r8, r8)
 8001424:	e000      	b.n	8001428 <Check50Hz+0xcc>
			return;
 8001426:	46c0      	nop			; (mov r8, r8)
	}
}
 8001428:	46bd      	mov	sp, r7
 800142a:	bd80      	pop	{r7, pc}
 800142c:	20000004 	.word	0x20000004
 8001430:	200003f0 	.word	0x200003f0
 8001434:	40012c00 	.word	0x40012c00
 8001438:	200003fc 	.word	0x200003fc
 800143c:	48000800 	.word	0x48000800

08001440 <EnableDebugMode>:

void EnableDebugMode() {
 8001440:	b580      	push	{r7, lr}
 8001442:	b082      	sub	sp, #8
 8001444:	af00      	add	r7, sp, #0
				__HAL_RCC_DBGMCU_CLK_ENABLE();
 8001446:	4b17      	ldr	r3, [pc, #92]	; (80014a4 <EnableDebugMode+0x64>)
 8001448:	699a      	ldr	r2, [r3, #24]
 800144a:	4b16      	ldr	r3, [pc, #88]	; (80014a4 <EnableDebugMode+0x64>)
 800144c:	2180      	movs	r1, #128	; 0x80
 800144e:	03c9      	lsls	r1, r1, #15
 8001450:	430a      	orrs	r2, r1
 8001452:	619a      	str	r2, [r3, #24]
 8001454:	4b13      	ldr	r3, [pc, #76]	; (80014a4 <EnableDebugMode+0x64>)
 8001456:	699a      	ldr	r2, [r3, #24]
 8001458:	2380      	movs	r3, #128	; 0x80
 800145a:	03db      	lsls	r3, r3, #15
 800145c:	4013      	ands	r3, r2
 800145e:	607b      	str	r3, [r7, #4]
 8001460:	687b      	ldr	r3, [r7, #4]
			    DBGMCU->APB1FZ |= DBGMCU_APB1_FZ_DBG_WWDG_STOP;
 8001462:	4b11      	ldr	r3, [pc, #68]	; (80014a8 <EnableDebugMode+0x68>)
 8001464:	689a      	ldr	r2, [r3, #8]
 8001466:	4b10      	ldr	r3, [pc, #64]	; (80014a8 <EnableDebugMode+0x68>)
 8001468:	2180      	movs	r1, #128	; 0x80
 800146a:	0109      	lsls	r1, r1, #4
 800146c:	430a      	orrs	r2, r1
 800146e:	609a      	str	r2, [r3, #8]
			    DBGMCU->APB2FZ = 0xFFFFFFFF;
 8001470:	4b0d      	ldr	r3, [pc, #52]	; (80014a8 <EnableDebugMode+0x68>)
 8001472:	2201      	movs	r2, #1
 8001474:	4252      	negs	r2, r2
 8001476:	60da      	str	r2, [r3, #12]
			    DBGMCU->APB1FZ = 0xFFFFFFFF;
 8001478:	4b0b      	ldr	r3, [pc, #44]	; (80014a8 <EnableDebugMode+0x68>)
 800147a:	2201      	movs	r2, #1
 800147c:	4252      	negs	r2, r2
 800147e:	609a      	str	r2, [r3, #8]
			    DBGMCU->CR |=DBGMCU_CR_DBG_STOP;
 8001480:	4b09      	ldr	r3, [pc, #36]	; (80014a8 <EnableDebugMode+0x68>)
 8001482:	685a      	ldr	r2, [r3, #4]
 8001484:	4b08      	ldr	r3, [pc, #32]	; (80014a8 <EnableDebugMode+0x68>)
 8001486:	2102      	movs	r1, #2
 8001488:	430a      	orrs	r2, r1
 800148a:	605a      	str	r2, [r3, #4]
			    __HAL_DBGMCU_FREEZE_IWDG();
 800148c:	4b06      	ldr	r3, [pc, #24]	; (80014a8 <EnableDebugMode+0x68>)
 800148e:	689a      	ldr	r2, [r3, #8]
 8001490:	4b05      	ldr	r3, [pc, #20]	; (80014a8 <EnableDebugMode+0x68>)
 8001492:	2180      	movs	r1, #128	; 0x80
 8001494:	0149      	lsls	r1, r1, #5
 8001496:	430a      	orrs	r2, r1
 8001498:	609a      	str	r2, [r3, #8]
}
 800149a:	46c0      	nop			; (mov r8, r8)
 800149c:	46bd      	mov	sp, r7
 800149e:	b002      	add	sp, #8
 80014a0:	bd80      	pop	{r7, pc}
 80014a2:	46c0      	nop			; (mov r8, r8)
 80014a4:	40021000 	.word	0x40021000
 80014a8:	40015800 	.word	0x40015800

080014ac <GetSinus>:
		 1363, 1340, 1316, 1293, 1269, 1246, 1222, 1199, 1175, 1152, 1128, 1104, 1080,
		 1056, 1032, 1009, 985, 960, 936, 912, 888, 864, 840, 815, 791, 767, 742, 718,
		 693, 669, 645, 620, 595, 571, 546, 522, 497, 472, 448, 423, 398, 373, 349, 324,
		 299, 274, 250, 225, 200, 175, 150, 125, 100, 76, 51, 26};

uint16_t GetSinus() {
 80014ac:	b580      	push	{r7, lr}
 80014ae:	af00      	add	r7, sp, #0
	if ((sin_step>=SinRes) || (sin_step<=CurrentMargin) || (sin_step>=(SinRes-CurrentMargin))) {
 80014b0:	4b14      	ldr	r3, [pc, #80]	; (8001504 <GetSinus+0x58>)
 80014b2:	881b      	ldrh	r3, [r3, #0]
 80014b4:	b29a      	uxth	r2, r3
 80014b6:	23e0      	movs	r3, #224	; 0xe0
 80014b8:	33ff      	adds	r3, #255	; 0xff
 80014ba:	429a      	cmp	r2, r3
 80014bc:	d815      	bhi.n	80014ea <GetSinus+0x3e>
 80014be:	4b12      	ldr	r3, [pc, #72]	; (8001508 <GetSinus+0x5c>)
 80014c0:	781b      	ldrb	r3, [r3, #0]
 80014c2:	b2db      	uxtb	r3, r3
 80014c4:	b29a      	uxth	r2, r3
 80014c6:	4b0f      	ldr	r3, [pc, #60]	; (8001504 <GetSinus+0x58>)
 80014c8:	881b      	ldrh	r3, [r3, #0]
 80014ca:	b29b      	uxth	r3, r3
 80014cc:	429a      	cmp	r2, r3
 80014ce:	d20c      	bcs.n	80014ea <GetSinus+0x3e>
 80014d0:	4b0c      	ldr	r3, [pc, #48]	; (8001504 <GetSinus+0x58>)
 80014d2:	881b      	ldrh	r3, [r3, #0]
 80014d4:	b29b      	uxth	r3, r3
 80014d6:	001a      	movs	r2, r3
 80014d8:	4b0b      	ldr	r3, [pc, #44]	; (8001508 <GetSinus+0x5c>)
 80014da:	781b      	ldrb	r3, [r3, #0]
 80014dc:	b2db      	uxtb	r3, r3
 80014de:	0019      	movs	r1, r3
 80014e0:	23f0      	movs	r3, #240	; 0xf0
 80014e2:	005b      	lsls	r3, r3, #1
 80014e4:	1a5b      	subs	r3, r3, r1
 80014e6:	429a      	cmp	r2, r3
 80014e8:	db01      	blt.n	80014ee <GetSinus+0x42>

		return 0;
 80014ea:	2300      	movs	r3, #0
 80014ec:	e007      	b.n	80014fe <GetSinus+0x52>
	}

	return sin_data[sin_step];
 80014ee:	4b05      	ldr	r3, [pc, #20]	; (8001504 <GetSinus+0x58>)
 80014f0:	881b      	ldrh	r3, [r3, #0]
 80014f2:	b29b      	uxth	r3, r3
 80014f4:	001a      	movs	r2, r3
 80014f6:	4b05      	ldr	r3, [pc, #20]	; (800150c <GetSinus+0x60>)
 80014f8:	0052      	lsls	r2, r2, #1
 80014fa:	5ad3      	ldrh	r3, [r2, r3]
 80014fc:	b29b      	uxth	r3, r3
}
 80014fe:	0018      	movs	r0, r3
 8001500:	46bd      	mov	sp, r7
 8001502:	bd80      	pop	{r7, pc}
 8001504:	200003fc 	.word	0x200003fc
 8001508:	2000000c 	.word	0x2000000c
 800150c:	20000010 	.word	0x20000010

08001510 <Set_DAC_SINUS_ZERO>:

 void Set_DAC_SINUS_ZERO() {
 8001510:	b580      	push	{r7, lr}
 8001512:	af00      	add	r7, sp, #0
	 HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1,DAC_ALIGN_12B_R,0);
 8001514:	4804      	ldr	r0, [pc, #16]	; (8001528 <Set_DAC_SINUS_ZERO+0x18>)
 8001516:	2300      	movs	r3, #0
 8001518:	2200      	movs	r2, #0
 800151a:	2100      	movs	r1, #0
 800151c:	f001 f8f6 	bl	800270c <HAL_DAC_SetValue>
 }
 8001520:	46c0      	nop			; (mov r8, r8)
 8001522:	46bd      	mov	sp, r7
 8001524:	bd80      	pop	{r7, pc}
 8001526:	46c0      	nop			; (mov r8, r8)
 8001528:	200004b4 	.word	0x200004b4

0800152c <DAC_SINUS_INIT>:

 void DAC_SINUS_INIT() {
 800152c:	b580      	push	{r7, lr}
 800152e:	af00      	add	r7, sp, #0
	 HAL_DAC_Start(&hdac1, DAC_CHANNEL_1);
 8001530:	4b04      	ldr	r3, [pc, #16]	; (8001544 <DAC_SINUS_INIT+0x18>)
 8001532:	2100      	movs	r1, #0
 8001534:	0018      	movs	r0, r3
 8001536:	f001 f9d7 	bl	80028e8 <HAL_DAC_Start>
	 Set_DAC_SINUS_ZERO();
 800153a:	f7ff ffe9 	bl	8001510 <Set_DAC_SINUS_ZERO>
 }
 800153e:	46c0      	nop			; (mov r8, r8)
 8001540:	46bd      	mov	sp, r7
 8001542:	bd80      	pop	{r7, pc}
 8001544:	200004b4 	.word	0x200004b4

08001548 <DAC_SINUS_ON>:

void DAC_SINUS_ON() {
 8001548:	b580      	push	{r7, lr}
 800154a:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Start(&htim2);
 800154c:	4b07      	ldr	r3, [pc, #28]	; (800156c <DAC_SINUS_ON+0x24>)
 800154e:	0018      	movs	r0, r3
 8001550:	f002 ff30 	bl	80043b4 <HAL_TIM_Base_Start>
	HAL_TIM_Base_Start_IT(&htim2);
 8001554:	4b05      	ldr	r3, [pc, #20]	; (800156c <DAC_SINUS_ON+0x24>)
 8001556:	0018      	movs	r0, r3
 8001558:	f002 fff0 	bl	800453c <HAL_TIM_Base_Start_IT>
	Set_DAC_SINUS_ZERO();
 800155c:	f7ff ffd8 	bl	8001510 <Set_DAC_SINUS_ZERO>
	IsSinus=1;
 8001560:	4b03      	ldr	r3, [pc, #12]	; (8001570 <DAC_SINUS_ON+0x28>)
 8001562:	2201      	movs	r2, #1
 8001564:	601a      	str	r2, [r3, #0]
 }
 8001566:	46c0      	nop			; (mov r8, r8)
 8001568:	46bd      	mov	sp, r7
 800156a:	bd80      	pop	{r7, pc}
 800156c:	20000518 	.word	0x20000518
 8001570:	200003f4 	.word	0x200003f4

08001574 <DAC_SINUS_OFF>:


void DAC_SINUS_OFF() {
 8001574:	b580      	push	{r7, lr}
 8001576:	af00      	add	r7, sp, #0
	Set_DAC_SINUS_ZERO();
 8001578:	f7ff ffca 	bl	8001510 <Set_DAC_SINUS_ZERO>
	HAL_TIM_Base_Stop(&htim2);
 800157c:	4b06      	ldr	r3, [pc, #24]	; (8001598 <DAC_SINUS_OFF+0x24>)
 800157e:	0018      	movs	r0, r3
 8001580:	f002 ff72 	bl	8004468 <HAL_TIM_Base_Stop>
	HAL_TIM_Base_Stop_IT(&htim2);
 8001584:	4b04      	ldr	r3, [pc, #16]	; (8001598 <DAC_SINUS_OFF+0x24>)
 8001586:	0018      	movs	r0, r3
 8001588:	f003 f832 	bl	80045f0 <HAL_TIM_Base_Stop_IT>
	IsSinus=0;
 800158c:	4b03      	ldr	r3, [pc, #12]	; (800159c <DAC_SINUS_OFF+0x28>)
 800158e:	2200      	movs	r2, #0
 8001590:	601a      	str	r2, [r3, #0]
 }
 8001592:	46c0      	nop			; (mov r8, r8)
 8001594:	46bd      	mov	sp, r7
 8001596:	bd80      	pop	{r7, pc}
 8001598:	20000518 	.word	0x20000518
 800159c:	200003f4 	.word	0x200003f4

080015a0 <ResetWDG>:
#include "digiTOS-IWDG.h"

void ResetWDG() {
 80015a0:	b580      	push	{r7, lr}
 80015a2:	af00      	add	r7, sp, #0
	 HAL_IWDG_Refresh(&hiwdg);
 80015a4:	4b03      	ldr	r3, [pc, #12]	; (80015b4 <ResetWDG+0x14>)
 80015a6:	0018      	movs	r0, r3
 80015a8:	f001 ffe0 	bl	800356c <HAL_IWDG_Refresh>
	 //IWDG->KR = 0x0000AAAAU;
}
 80015ac:	46c0      	nop			; (mov r8, r8)
 80015ae:	46bd      	mov	sp, r7
 80015b0:	bd80      	pop	{r7, pc}
 80015b2:	46c0      	nop			; (mov r8, r8)
 80015b4:	200004c8 	.word	0x200004c8

080015b8 <DigiTOS_IWDG_Init>:

uint8_t DigiTOS_IWDG_Init(DigiTOS_IWDG_Timeout_t timeout) {
 80015b8:	b580      	push	{r7, lr}
 80015ba:	b084      	sub	sp, #16
 80015bc:	af00      	add	r7, sp, #0
 80015be:	0002      	movs	r2, r0
 80015c0:	1dfb      	adds	r3, r7, #7
 80015c2:	701a      	strb	r2, [r3, #0]
	uint8_t result = 0;
 80015c4:	230f      	movs	r3, #15
 80015c6:	18fb      	adds	r3, r7, r3
 80015c8:	2200      	movs	r2, #0
 80015ca:	701a      	strb	r2, [r3, #0]
	uint16_t reload = 0;
 80015cc:	230c      	movs	r3, #12
 80015ce:	18fb      	adds	r3, r7, r3
 80015d0:	2200      	movs	r2, #0
 80015d2:	801a      	strh	r2, [r3, #0]
	
	/* Check if the system has resumed from IWDG reset */
#if defined(STM32F4xx)
	if (RCC->CSR & RCC_CSR_WDGRSTF) {
#else
	if (RCC->CSR & RCC_CSR_IWDGRSTF) {	
 80015d4:	4b56      	ldr	r3, [pc, #344]	; (8001730 <DigiTOS_IWDG_Init+0x178>)
 80015d6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80015d8:	2380      	movs	r3, #128	; 0x80
 80015da:	059b      	lsls	r3, r3, #22
 80015dc:	4013      	ands	r3, r2
 80015de:	d00a      	beq.n	80015f6 <DigiTOS_IWDG_Init+0x3e>
#endif
		/* Reset by IWDG */
		result = 1;
 80015e0:	230f      	movs	r3, #15
 80015e2:	18fb      	adds	r3, r7, r3
 80015e4:	2201      	movs	r2, #1
 80015e6:	701a      	strb	r2, [r3, #0]
		
		/* Clear reset flags */
		RCC->CSR |= RCC_CSR_RMVF;
 80015e8:	4b51      	ldr	r3, [pc, #324]	; (8001730 <DigiTOS_IWDG_Init+0x178>)
 80015ea:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80015ec:	4b50      	ldr	r3, [pc, #320]	; (8001730 <DigiTOS_IWDG_Init+0x178>)
 80015ee:	2180      	movs	r1, #128	; 0x80
 80015f0:	0449      	lsls	r1, r1, #17
 80015f2:	430a      	orrs	r2, r1
 80015f4:	625a      	str	r2, [r3, #36]	; 0x24
	}

	/* Enable write access to IWDG_PR and IWDG_RLR registers */
	IWDG->KR = 0x5555;
 80015f6:	4b4f      	ldr	r3, [pc, #316]	; (8001734 <DigiTOS_IWDG_Init+0x17c>)
 80015f8:	4a4f      	ldr	r2, [pc, #316]	; (8001738 <DigiTOS_IWDG_Init+0x180>)
 80015fa:	601a      	str	r2, [r3, #0]

	/* Set proper clock depending on timeout user select */
	if (timeout >= DigiTOS_IWDG_Timeout_8s) {
 80015fc:	1dfb      	adds	r3, r7, #7
 80015fe:	781b      	ldrb	r3, [r3, #0]
 8001600:	2b0a      	cmp	r3, #10
 8001602:	d903      	bls.n	800160c <DigiTOS_IWDG_Init+0x54>
		/* IWDG counter clock: LSI/256 = 128Hz */
		IWDG->PR = 0x07;
 8001604:	4b4b      	ldr	r3, [pc, #300]	; (8001734 <DigiTOS_IWDG_Init+0x17c>)
 8001606:	2207      	movs	r2, #7
 8001608:	605a      	str	r2, [r3, #4]
 800160a:	e002      	b.n	8001612 <DigiTOS_IWDG_Init+0x5a>
	} else {
		/* IWDG counter clock: LSI/32 = 1024Hz */
		IWDG->PR = 0x03;
 800160c:	4b49      	ldr	r3, [pc, #292]	; (8001734 <DigiTOS_IWDG_Init+0x17c>)
 800160e:	2203      	movs	r2, #3
 8001610:	605a      	str	r2, [r3, #4]
	}
	
	/* Set counter reload value */
	if (timeout == DigiTOS_IWDG_Timeout_5ms) {
 8001612:	1dfb      	adds	r3, r7, #7
 8001614:	781b      	ldrb	r3, [r3, #0]
 8001616:	2b00      	cmp	r3, #0
 8001618:	d104      	bne.n	8001624 <DigiTOS_IWDG_Init+0x6c>
		reload = 5; /* 1024 Hz IWDG ticking */
 800161a:	230c      	movs	r3, #12
 800161c:	18fb      	adds	r3, r7, r3
 800161e:	2205      	movs	r2, #5
 8001620:	801a      	strh	r2, [r3, #0]
 8001622:	e073      	b.n	800170c <DigiTOS_IWDG_Init+0x154>
	} else if (timeout == DigiTOS_IWDG_Timeout_10ms) {
 8001624:	1dfb      	adds	r3, r7, #7
 8001626:	781b      	ldrb	r3, [r3, #0]
 8001628:	2b01      	cmp	r3, #1
 800162a:	d104      	bne.n	8001636 <DigiTOS_IWDG_Init+0x7e>
		reload = 10; /* 1024 Hz IWDG ticking */
 800162c:	230c      	movs	r3, #12
 800162e:	18fb      	adds	r3, r7, r3
 8001630:	220a      	movs	r2, #10
 8001632:	801a      	strh	r2, [r3, #0]
 8001634:	e06a      	b.n	800170c <DigiTOS_IWDG_Init+0x154>
	} else if (timeout == DigiTOS_IWDG_Timeout_15ms) {
 8001636:	1dfb      	adds	r3, r7, #7
 8001638:	781b      	ldrb	r3, [r3, #0]
 800163a:	2b02      	cmp	r3, #2
 800163c:	d104      	bne.n	8001648 <DigiTOS_IWDG_Init+0x90>
		reload = 15; /* 1024 Hz IWDG ticking */
 800163e:	230c      	movs	r3, #12
 8001640:	18fb      	adds	r3, r7, r3
 8001642:	220f      	movs	r2, #15
 8001644:	801a      	strh	r2, [r3, #0]
 8001646:	e061      	b.n	800170c <DigiTOS_IWDG_Init+0x154>
	} else if (timeout == DigiTOS_IWDG_Timeout_30ms) {
 8001648:	1dfb      	adds	r3, r7, #7
 800164a:	781b      	ldrb	r3, [r3, #0]
 800164c:	2b03      	cmp	r3, #3
 800164e:	d104      	bne.n	800165a <DigiTOS_IWDG_Init+0xa2>
		reload = 31; /* 1024 Hz IWDG ticking */
 8001650:	230c      	movs	r3, #12
 8001652:	18fb      	adds	r3, r7, r3
 8001654:	221f      	movs	r2, #31
 8001656:	801a      	strh	r2, [r3, #0]
 8001658:	e058      	b.n	800170c <DigiTOS_IWDG_Init+0x154>
	} else if (timeout == DigiTOS_IWDG_Timeout_60ms) {
 800165a:	1dfb      	adds	r3, r7, #7
 800165c:	781b      	ldrb	r3, [r3, #0]
 800165e:	2b04      	cmp	r3, #4
 8001660:	d104      	bne.n	800166c <DigiTOS_IWDG_Init+0xb4>
		reload = 61; /* 1024 Hz IWDG ticking */
 8001662:	230c      	movs	r3, #12
 8001664:	18fb      	adds	r3, r7, r3
 8001666:	223d      	movs	r2, #61	; 0x3d
 8001668:	801a      	strh	r2, [r3, #0]
 800166a:	e04f      	b.n	800170c <DigiTOS_IWDG_Init+0x154>
	} else if (timeout == DigiTOS_IWDG_Timeout_120ms) {
 800166c:	1dfb      	adds	r3, r7, #7
 800166e:	781b      	ldrb	r3, [r3, #0]
 8001670:	2b05      	cmp	r3, #5
 8001672:	d104      	bne.n	800167e <DigiTOS_IWDG_Init+0xc6>
		reload = 123; /* 1024 Hz IWDG ticking */
 8001674:	230c      	movs	r3, #12
 8001676:	18fb      	adds	r3, r7, r3
 8001678:	227b      	movs	r2, #123	; 0x7b
 800167a:	801a      	strh	r2, [r3, #0]
 800167c:	e046      	b.n	800170c <DigiTOS_IWDG_Init+0x154>
	} else if (timeout == DigiTOS_IWDG_Timeout_250ms) {
 800167e:	1dfb      	adds	r3, r7, #7
 8001680:	781b      	ldrb	r3, [r3, #0]
 8001682:	2b06      	cmp	r3, #6
 8001684:	d104      	bne.n	8001690 <DigiTOS_IWDG_Init+0xd8>
		reload = 255; /* 1024 Hz IWDG ticking */
 8001686:	230c      	movs	r3, #12
 8001688:	18fb      	adds	r3, r7, r3
 800168a:	22ff      	movs	r2, #255	; 0xff
 800168c:	801a      	strh	r2, [r3, #0]
 800168e:	e03d      	b.n	800170c <DigiTOS_IWDG_Init+0x154>
	} else if (timeout == DigiTOS_IWDG_Timeout_500ms) {
 8001690:	1dfb      	adds	r3, r7, #7
 8001692:	781b      	ldrb	r3, [r3, #0]
 8001694:	2b07      	cmp	r3, #7
 8001696:	d104      	bne.n	80016a2 <DigiTOS_IWDG_Init+0xea>
		reload = 511; /* 1024 Hz IWDG ticking */
 8001698:	230c      	movs	r3, #12
 800169a:	18fb      	adds	r3, r7, r3
 800169c:	4a27      	ldr	r2, [pc, #156]	; (800173c <DigiTOS_IWDG_Init+0x184>)
 800169e:	801a      	strh	r2, [r3, #0]
 80016a0:	e034      	b.n	800170c <DigiTOS_IWDG_Init+0x154>
	} else if (timeout == DigiTOS_IWDG_Timeout_1s) {
 80016a2:	1dfb      	adds	r3, r7, #7
 80016a4:	781b      	ldrb	r3, [r3, #0]
 80016a6:	2b08      	cmp	r3, #8
 80016a8:	d104      	bne.n	80016b4 <DigiTOS_IWDG_Init+0xfc>
		reload = 1023; /* 1024 Hz IWDG ticking */
 80016aa:	230c      	movs	r3, #12
 80016ac:	18fb      	adds	r3, r7, r3
 80016ae:	4a24      	ldr	r2, [pc, #144]	; (8001740 <DigiTOS_IWDG_Init+0x188>)
 80016b0:	801a      	strh	r2, [r3, #0]
 80016b2:	e02b      	b.n	800170c <DigiTOS_IWDG_Init+0x154>
	} else if (timeout == DigiTOS_IWDG_Timeout_2s) {
 80016b4:	1dfb      	adds	r3, r7, #7
 80016b6:	781b      	ldrb	r3, [r3, #0]
 80016b8:	2b09      	cmp	r3, #9
 80016ba:	d104      	bne.n	80016c6 <DigiTOS_IWDG_Init+0x10e>
		reload = 2047; /* 1024 Hz IWDG ticking */
 80016bc:	230c      	movs	r3, #12
 80016be:	18fb      	adds	r3, r7, r3
 80016c0:	4a20      	ldr	r2, [pc, #128]	; (8001744 <DigiTOS_IWDG_Init+0x18c>)
 80016c2:	801a      	strh	r2, [r3, #0]
 80016c4:	e022      	b.n	800170c <DigiTOS_IWDG_Init+0x154>
	} else if (timeout == DigiTOS_IWDG_Timeout_4s) {
 80016c6:	1dfb      	adds	r3, r7, #7
 80016c8:	781b      	ldrb	r3, [r3, #0]
 80016ca:	2b0a      	cmp	r3, #10
 80016cc:	d104      	bne.n	80016d8 <DigiTOS_IWDG_Init+0x120>
		reload = 4095; /* 1024 Hz IWDG ticking */
 80016ce:	230c      	movs	r3, #12
 80016d0:	18fb      	adds	r3, r7, r3
 80016d2:	4a1d      	ldr	r2, [pc, #116]	; (8001748 <DigiTOS_IWDG_Init+0x190>)
 80016d4:	801a      	strh	r2, [r3, #0]
 80016d6:	e019      	b.n	800170c <DigiTOS_IWDG_Init+0x154>
	} else if (timeout == DigiTOS_IWDG_Timeout_8s) {
 80016d8:	1dfb      	adds	r3, r7, #7
 80016da:	781b      	ldrb	r3, [r3, #0]
 80016dc:	2b0b      	cmp	r3, #11
 80016de:	d104      	bne.n	80016ea <DigiTOS_IWDG_Init+0x132>
		reload = 1023; /* 128 Hz IWDG ticking */
 80016e0:	230c      	movs	r3, #12
 80016e2:	18fb      	adds	r3, r7, r3
 80016e4:	4a16      	ldr	r2, [pc, #88]	; (8001740 <DigiTOS_IWDG_Init+0x188>)
 80016e6:	801a      	strh	r2, [r3, #0]
 80016e8:	e010      	b.n	800170c <DigiTOS_IWDG_Init+0x154>
	} else if (timeout == DigiTOS_IWDG_Timeout_16s) {
 80016ea:	1dfb      	adds	r3, r7, #7
 80016ec:	781b      	ldrb	r3, [r3, #0]
 80016ee:	2b0c      	cmp	r3, #12
 80016f0:	d104      	bne.n	80016fc <DigiTOS_IWDG_Init+0x144>
		reload = 2047; /* 128 Hz IWDG ticking */
 80016f2:	230c      	movs	r3, #12
 80016f4:	18fb      	adds	r3, r7, r3
 80016f6:	4a13      	ldr	r2, [pc, #76]	; (8001744 <DigiTOS_IWDG_Init+0x18c>)
 80016f8:	801a      	strh	r2, [r3, #0]
 80016fa:	e007      	b.n	800170c <DigiTOS_IWDG_Init+0x154>
	} else if (timeout == DigiTOS_IWDG_Timeout_32s) {
 80016fc:	1dfb      	adds	r3, r7, #7
 80016fe:	781b      	ldrb	r3, [r3, #0]
 8001700:	2b0d      	cmp	r3, #13
 8001702:	d103      	bne.n	800170c <DigiTOS_IWDG_Init+0x154>
		reload = 4095; /* 128 Hz IWDG ticking */
 8001704:	230c      	movs	r3, #12
 8001706:	18fb      	adds	r3, r7, r3
 8001708:	4a0f      	ldr	r2, [pc, #60]	; (8001748 <DigiTOS_IWDG_Init+0x190>)
 800170a:	801a      	strh	r2, [r3, #0]
	}
	
	/* Set reload */
	IWDG->RLR = reload;
 800170c:	4b09      	ldr	r3, [pc, #36]	; (8001734 <DigiTOS_IWDG_Init+0x17c>)
 800170e:	220c      	movs	r2, #12
 8001710:	18ba      	adds	r2, r7, r2
 8001712:	8812      	ldrh	r2, [r2, #0]
 8001714:	609a      	str	r2, [r3, #8]

	/* Reload IWDG counter */
	IWDG->KR = 0xAAAA;
 8001716:	4b07      	ldr	r3, [pc, #28]	; (8001734 <DigiTOS_IWDG_Init+0x17c>)
 8001718:	4a0c      	ldr	r2, [pc, #48]	; (800174c <DigiTOS_IWDG_Init+0x194>)
 800171a:	601a      	str	r2, [r3, #0]

	/* Enable IWDG (the LSI oscillator will be enabled by hardware) */
	IWDG->KR = 0xCCCC;
 800171c:	4b05      	ldr	r3, [pc, #20]	; (8001734 <DigiTOS_IWDG_Init+0x17c>)
 800171e:	4a0c      	ldr	r2, [pc, #48]	; (8001750 <DigiTOS_IWDG_Init+0x198>)
 8001720:	601a      	str	r2, [r3, #0]
	
	/* Return status */
	return result;
 8001722:	230f      	movs	r3, #15
 8001724:	18fb      	adds	r3, r7, r3
 8001726:	781b      	ldrb	r3, [r3, #0]
}
 8001728:	0018      	movs	r0, r3
 800172a:	46bd      	mov	sp, r7
 800172c:	b004      	add	sp, #16
 800172e:	bd80      	pop	{r7, pc}
 8001730:	40021000 	.word	0x40021000
 8001734:	40003000 	.word	0x40003000
 8001738:	00005555 	.word	0x00005555
 800173c:	000001ff 	.word	0x000001ff
 8001740:	000003ff 	.word	0x000003ff
 8001744:	000007ff 	.word	0x000007ff
 8001748:	00000fff 	.word	0x00000fff
 800174c:	0000aaaa 	.word	0x0000aaaa
 8001750:	0000cccc 	.word	0x0000cccc

08001754 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001754:	b580      	push	{r7, lr}
 8001756:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001758:	4b07      	ldr	r3, [pc, #28]	; (8001778 <HAL_Init+0x24>)
 800175a:	681a      	ldr	r2, [r3, #0]
 800175c:	4b06      	ldr	r3, [pc, #24]	; (8001778 <HAL_Init+0x24>)
 800175e:	2110      	movs	r1, #16
 8001760:	430a      	orrs	r2, r1
 8001762:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8001764:	2000      	movs	r0, #0
 8001766:	f000 f809 	bl	800177c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800176a:	f7ff f8fb 	bl	8000964 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800176e:	2300      	movs	r3, #0
}
 8001770:	0018      	movs	r0, r3
 8001772:	46bd      	mov	sp, r7
 8001774:	bd80      	pop	{r7, pc}
 8001776:	46c0      	nop			; (mov r8, r8)
 8001778:	40022000 	.word	0x40022000

0800177c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800177c:	b580      	push	{r7, lr}
 800177e:	b082      	sub	sp, #8
 8001780:	af00      	add	r7, sp, #0
 8001782:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000U);
 8001784:	f002 fd50 	bl	8004228 <HAL_RCC_GetHCLKFreq>
 8001788:	0002      	movs	r2, r0
 800178a:	23fa      	movs	r3, #250	; 0xfa
 800178c:	0099      	lsls	r1, r3, #2
 800178e:	0010      	movs	r0, r2
 8001790:	f7fe fcba 	bl	8000108 <__udivsi3>
 8001794:	0003      	movs	r3, r0
 8001796:	0018      	movs	r0, r3
 8001798:	f000 fece 	bl	8002538 <HAL_SYSTICK_Config>

  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority ,0U);
 800179c:	6879      	ldr	r1, [r7, #4]
 800179e:	2301      	movs	r3, #1
 80017a0:	425b      	negs	r3, r3
 80017a2:	2200      	movs	r2, #0
 80017a4:	0018      	movs	r0, r3
 80017a6:	f000 fe8b 	bl	80024c0 <HAL_NVIC_SetPriority>

   /* Return function status */
  return HAL_OK;
 80017aa:	2300      	movs	r3, #0
}
 80017ac:	0018      	movs	r0, r3
 80017ae:	46bd      	mov	sp, r7
 80017b0:	b002      	add	sp, #8
 80017b2:	bd80      	pop	{r7, pc}

080017b4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80017b4:	b580      	push	{r7, lr}
 80017b6:	af00      	add	r7, sp, #0
  uwTick++;
 80017b8:	4b03      	ldr	r3, [pc, #12]	; (80017c8 <HAL_IncTick+0x14>)
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	1c5a      	adds	r2, r3, #1
 80017be:	4b02      	ldr	r3, [pc, #8]	; (80017c8 <HAL_IncTick+0x14>)
 80017c0:	601a      	str	r2, [r3, #0]
}
 80017c2:	46c0      	nop			; (mov r8, r8)
 80017c4:	46bd      	mov	sp, r7
 80017c6:	bd80      	pop	{r7, pc}
 80017c8:	20000674 	.word	0x20000674

080017cc <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80017cc:	b580      	push	{r7, lr}
 80017ce:	af00      	add	r7, sp, #0
  return uwTick;
 80017d0:	4b02      	ldr	r3, [pc, #8]	; (80017dc <HAL_GetTick+0x10>)
 80017d2:	681b      	ldr	r3, [r3, #0]
}
 80017d4:	0018      	movs	r0, r3
 80017d6:	46bd      	mov	sp, r7
 80017d8:	bd80      	pop	{r7, pc}
 80017da:	46c0      	nop			; (mov r8, r8)
 80017dc:	20000674 	.word	0x20000674

080017e0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(__IO uint32_t Delay)
{
 80017e0:	b580      	push	{r7, lr}
 80017e2:	b084      	sub	sp, #16
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80017e8:	f7ff fff0 	bl	80017cc <HAL_GetTick>
 80017ec:	0003      	movs	r3, r0
 80017ee:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	60fb      	str	r3, [r7, #12]
  
  /* Add a period to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80017f4:	68fb      	ldr	r3, [r7, #12]
 80017f6:	3301      	adds	r3, #1
 80017f8:	d002      	beq.n	8001800 <HAL_Delay+0x20>
  {
     wait++;
 80017fa:	68fb      	ldr	r3, [r7, #12]
 80017fc:	3301      	adds	r3, #1
 80017fe:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8001800:	46c0      	nop			; (mov r8, r8)
 8001802:	f7ff ffe3 	bl	80017cc <HAL_GetTick>
 8001806:	0002      	movs	r2, r0
 8001808:	68bb      	ldr	r3, [r7, #8]
 800180a:	1ad3      	subs	r3, r2, r3
 800180c:	68fa      	ldr	r2, [r7, #12]
 800180e:	429a      	cmp	r2, r3
 8001810:	d8f7      	bhi.n	8001802 <HAL_Delay+0x22>
  {
  }
}
 8001812:	46c0      	nop			; (mov r8, r8)
 8001814:	46bd      	mov	sp, r7
 8001816:	b004      	add	sp, #16
 8001818:	bd80      	pop	{r7, pc}
	...

0800181c <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800181c:	b580      	push	{r7, lr}
 800181e:	b084      	sub	sp, #16
 8001820:	af00      	add	r7, sp, #0
 8001822:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001824:	230f      	movs	r3, #15
 8001826:	18fb      	adds	r3, r7, r3
 8001828:	2200      	movs	r2, #0
 800182a:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0U;
 800182c:	2300      	movs	r3, #0
 800182e:	60bb      	str	r3, [r7, #8]

  /* Check ADC handle */
  if(hadc == NULL)
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	2b00      	cmp	r3, #0
 8001834:	d101      	bne.n	800183a <HAL_ADC_Init+0x1e>
  {
    return HAL_ERROR;
 8001836:	2301      	movs	r3, #1
 8001838:	e234      	b.n	8001ca4 <HAL_ADC_Init+0x488>
  }
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	4ac4      	ldr	r2, [pc, #784]	; (8001b50 <HAL_ADC_Init+0x334>)
 8001840:	4293      	cmp	r3, r2
 8001842:	d007      	beq.n	8001854 <HAL_ADC_Init+0x38>
 8001844:	2374      	movs	r3, #116	; 0x74
 8001846:	33ff      	adds	r3, #255	; 0xff
 8001848:	001a      	movs	r2, r3
 800184a:	4bc2      	ldr	r3, [pc, #776]	; (8001b54 <HAL_ADC_Init+0x338>)
 800184c:	0011      	movs	r1, r2
 800184e:	0018      	movs	r0, r3
 8001850:	f7ff f87f 	bl	8000952 <assert_failed>
  assert_param(IS_ADC_CLOCKPRESCALER(hadc->Init.ClockPrescaler));
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	685b      	ldr	r3, [r3, #4]
 8001858:	2b00      	cmp	r3, #0
 800185a:	d012      	beq.n	8001882 <HAL_ADC_Init+0x66>
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	685a      	ldr	r2, [r3, #4]
 8001860:	2380      	movs	r3, #128	; 0x80
 8001862:	05db      	lsls	r3, r3, #23
 8001864:	429a      	cmp	r2, r3
 8001866:	d00c      	beq.n	8001882 <HAL_ADC_Init+0x66>
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	685a      	ldr	r2, [r3, #4]
 800186c:	2380      	movs	r3, #128	; 0x80
 800186e:	061b      	lsls	r3, r3, #24
 8001870:	429a      	cmp	r2, r3
 8001872:	d006      	beq.n	8001882 <HAL_ADC_Init+0x66>
 8001874:	23ba      	movs	r3, #186	; 0xba
 8001876:	005a      	lsls	r2, r3, #1
 8001878:	4bb6      	ldr	r3, [pc, #728]	; (8001b54 <HAL_ADC_Init+0x338>)
 800187a:	0011      	movs	r1, r2
 800187c:	0018      	movs	r0, r3
 800187e:	f7ff f868 	bl	8000952 <assert_failed>
  assert_param(IS_ADC_RESOLUTION(hadc->Init.Resolution));
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	689b      	ldr	r3, [r3, #8]
 8001886:	2b00      	cmp	r3, #0
 8001888:	d013      	beq.n	80018b2 <HAL_ADC_Init+0x96>
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	689b      	ldr	r3, [r3, #8]
 800188e:	2b08      	cmp	r3, #8
 8001890:	d00f      	beq.n	80018b2 <HAL_ADC_Init+0x96>
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	689b      	ldr	r3, [r3, #8]
 8001896:	2b10      	cmp	r3, #16
 8001898:	d00b      	beq.n	80018b2 <HAL_ADC_Init+0x96>
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	689b      	ldr	r3, [r3, #8]
 800189e:	2b18      	cmp	r3, #24
 80018a0:	d007      	beq.n	80018b2 <HAL_ADC_Init+0x96>
 80018a2:	2376      	movs	r3, #118	; 0x76
 80018a4:	33ff      	adds	r3, #255	; 0xff
 80018a6:	001a      	movs	r2, r3
 80018a8:	4baa      	ldr	r3, [pc, #680]	; (8001b54 <HAL_ADC_Init+0x338>)
 80018aa:	0011      	movs	r1, r2
 80018ac:	0018      	movs	r0, r3
 80018ae:	f7ff f850 	bl	8000952 <assert_failed>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign)); 
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	68db      	ldr	r3, [r3, #12]
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d00a      	beq.n	80018d0 <HAL_ADC_Init+0xb4>
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	68db      	ldr	r3, [r3, #12]
 80018be:	2b20      	cmp	r3, #32
 80018c0:	d006      	beq.n	80018d0 <HAL_ADC_Init+0xb4>
 80018c2:	23bb      	movs	r3, #187	; 0xbb
 80018c4:	005a      	lsls	r2, r3, #1
 80018c6:	4ba3      	ldr	r3, [pc, #652]	; (8001b54 <HAL_ADC_Init+0x338>)
 80018c8:	0011      	movs	r1, r2
 80018ca:	0018      	movs	r0, r3
 80018cc:	f7ff f841 	bl	8000952 <assert_failed>
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	691b      	ldr	r3, [r3, #16]
 80018d4:	2b01      	cmp	r3, #1
 80018d6:	d00b      	beq.n	80018f0 <HAL_ADC_Init+0xd4>
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	691b      	ldr	r3, [r3, #16]
 80018dc:	2b02      	cmp	r3, #2
 80018de:	d007      	beq.n	80018f0 <HAL_ADC_Init+0xd4>
 80018e0:	2378      	movs	r3, #120	; 0x78
 80018e2:	33ff      	adds	r3, #255	; 0xff
 80018e4:	001a      	movs	r2, r3
 80018e6:	4b9b      	ldr	r3, [pc, #620]	; (8001b54 <HAL_ADC_Init+0x338>)
 80018e8:	0011      	movs	r1, r2
 80018ea:	0018      	movs	r0, r3
 80018ec:	f7ff f831 	bl	8000952 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	6a1b      	ldr	r3, [r3, #32]
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d00a      	beq.n	800190e <HAL_ADC_Init+0xf2>
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	6a1b      	ldr	r3, [r3, #32]
 80018fc:	2b01      	cmp	r3, #1
 80018fe:	d006      	beq.n	800190e <HAL_ADC_Init+0xf2>
 8001900:	23bc      	movs	r3, #188	; 0xbc
 8001902:	005a      	lsls	r2, r3, #1
 8001904:	4b93      	ldr	r3, [pc, #588]	; (8001b54 <HAL_ADC_Init+0x338>)
 8001906:	0011      	movs	r1, r2
 8001908:	0018      	movs	r0, r3
 800190a:	f7ff f822 	bl	8000952 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DiscontinuousConvMode));
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001912:	2b00      	cmp	r3, #0
 8001914:	d00b      	beq.n	800192e <HAL_ADC_Init+0x112>
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800191a:	2b01      	cmp	r3, #1
 800191c:	d007      	beq.n	800192e <HAL_ADC_Init+0x112>
 800191e:	237a      	movs	r3, #122	; 0x7a
 8001920:	33ff      	adds	r3, #255	; 0xff
 8001922:	001a      	movs	r2, r3
 8001924:	4b8b      	ldr	r3, [pc, #556]	; (8001b54 <HAL_ADC_Init+0x338>)
 8001926:	0011      	movs	r1, r2
 8001928:	0018      	movs	r0, r3
 800192a:	f7ff f812 	bl	8000952 <assert_failed>
  assert_param(IS_ADC_EXTTRIG_EDGE(hadc->Init.ExternalTrigConvEdge));   
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001932:	2b00      	cmp	r3, #0
 8001934:	d018      	beq.n	8001968 <HAL_ADC_Init+0x14c>
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800193a:	2380      	movs	r3, #128	; 0x80
 800193c:	00db      	lsls	r3, r3, #3
 800193e:	429a      	cmp	r2, r3
 8001940:	d012      	beq.n	8001968 <HAL_ADC_Init+0x14c>
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001946:	2380      	movs	r3, #128	; 0x80
 8001948:	011b      	lsls	r3, r3, #4
 800194a:	429a      	cmp	r2, r3
 800194c:	d00c      	beq.n	8001968 <HAL_ADC_Init+0x14c>
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001952:	23c0      	movs	r3, #192	; 0xc0
 8001954:	011b      	lsls	r3, r3, #4
 8001956:	429a      	cmp	r2, r3
 8001958:	d006      	beq.n	8001968 <HAL_ADC_Init+0x14c>
 800195a:	23bd      	movs	r3, #189	; 0xbd
 800195c:	005a      	lsls	r2, r3, #1
 800195e:	4b7d      	ldr	r3, [pc, #500]	; (8001b54 <HAL_ADC_Init+0x338>)
 8001960:	0011      	movs	r1, r2
 8001962:	0018      	movs	r0, r3
 8001964:	f7fe fff5 	bl	8000952 <assert_failed>
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));   
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800196c:	2b00      	cmp	r3, #0
 800196e:	d01f      	beq.n	80019b0 <HAL_ADC_Init+0x194>
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001974:	2b40      	cmp	r3, #64	; 0x40
 8001976:	d01b      	beq.n	80019b0 <HAL_ADC_Init+0x194>
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800197c:	2b80      	cmp	r3, #128	; 0x80
 800197e:	d017      	beq.n	80019b0 <HAL_ADC_Init+0x194>
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001984:	2bc0      	cmp	r3, #192	; 0xc0
 8001986:	d013      	beq.n	80019b0 <HAL_ADC_Init+0x194>
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800198c:	2380      	movs	r3, #128	; 0x80
 800198e:	005b      	lsls	r3, r3, #1
 8001990:	429a      	cmp	r2, r3
 8001992:	d00d      	beq.n	80019b0 <HAL_ADC_Init+0x194>
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001998:	23c2      	movs	r3, #194	; 0xc2
 800199a:	33ff      	adds	r3, #255	; 0xff
 800199c:	429a      	cmp	r2, r3
 800199e:	d007      	beq.n	80019b0 <HAL_ADC_Init+0x194>
 80019a0:	237c      	movs	r3, #124	; 0x7c
 80019a2:	33ff      	adds	r3, #255	; 0xff
 80019a4:	001a      	movs	r2, r3
 80019a6:	4b6b      	ldr	r3, [pc, #428]	; (8001b54 <HAL_ADC_Init+0x338>)
 80019a8:	0011      	movs	r1, r2
 80019aa:	0018      	movs	r0, r3
 80019ac:	f7fe ffd1 	bl	8000952 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d00a      	beq.n	80019ce <HAL_ADC_Init+0x1b2>
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019bc:	2b01      	cmp	r3, #1
 80019be:	d006      	beq.n	80019ce <HAL_ADC_Init+0x1b2>
 80019c0:	23be      	movs	r3, #190	; 0xbe
 80019c2:	005a      	lsls	r2, r3, #1
 80019c4:	4b63      	ldr	r3, [pc, #396]	; (8001b54 <HAL_ADC_Init+0x338>)
 80019c6:	0011      	movs	r1, r2
 80019c8:	0018      	movs	r0, r3
 80019ca:	f7fe ffc2 	bl	8000952 <assert_failed>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	695b      	ldr	r3, [r3, #20]
 80019d2:	2b04      	cmp	r3, #4
 80019d4:	d00b      	beq.n	80019ee <HAL_ADC_Init+0x1d2>
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	695b      	ldr	r3, [r3, #20]
 80019da:	2b08      	cmp	r3, #8
 80019dc:	d007      	beq.n	80019ee <HAL_ADC_Init+0x1d2>
 80019de:	237e      	movs	r3, #126	; 0x7e
 80019e0:	33ff      	adds	r3, #255	; 0xff
 80019e2:	001a      	movs	r2, r3
 80019e4:	4b5b      	ldr	r3, [pc, #364]	; (8001b54 <HAL_ADC_Init+0x338>)
 80019e6:	0011      	movs	r1, r2
 80019e8:	0018      	movs	r0, r3
 80019ea:	f7fe ffb2 	bl	8000952 <assert_failed>
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80019f2:	2b01      	cmp	r3, #1
 80019f4:	d00a      	beq.n	8001a0c <HAL_ADC_Init+0x1f0>
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d006      	beq.n	8001a0c <HAL_ADC_Init+0x1f0>
 80019fe:	23bf      	movs	r3, #191	; 0xbf
 8001a00:	005a      	lsls	r2, r3, #1
 8001a02:	4b54      	ldr	r3, [pc, #336]	; (8001b54 <HAL_ADC_Init+0x338>)
 8001a04:	0011      	movs	r1, r2
 8001a06:	0018      	movs	r0, r3
 8001a08:	f7fe ffa3 	bl	8000952 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	699b      	ldr	r3, [r3, #24]
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d00b      	beq.n	8001a2c <HAL_ADC_Init+0x210>
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	699b      	ldr	r3, [r3, #24]
 8001a18:	2b01      	cmp	r3, #1
 8001a1a:	d007      	beq.n	8001a2c <HAL_ADC_Init+0x210>
 8001a1c:	2380      	movs	r3, #128	; 0x80
 8001a1e:	33ff      	adds	r3, #255	; 0xff
 8001a20:	001a      	movs	r2, r3
 8001a22:	4b4c      	ldr	r3, [pc, #304]	; (8001b54 <HAL_ADC_Init+0x338>)
 8001a24:	0011      	movs	r1, r2
 8001a26:	0018      	movs	r0, r3
 8001a28:	f7fe ff93 	bl	8000952 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoPowerOff));
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	69db      	ldr	r3, [r3, #28]
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d00a      	beq.n	8001a4a <HAL_ADC_Init+0x22e>
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	69db      	ldr	r3, [r3, #28]
 8001a38:	2b01      	cmp	r3, #1
 8001a3a:	d006      	beq.n	8001a4a <HAL_ADC_Init+0x22e>
 8001a3c:	23c0      	movs	r3, #192	; 0xc0
 8001a3e:	005a      	lsls	r2, r3, #1
 8001a40:	4b44      	ldr	r3, [pc, #272]	; (8001b54 <HAL_ADC_Init+0x338>)
 8001a42:	0011      	movs	r1, r2
 8001a44:	0018      	movs	r0, r3
 8001a46:	f7fe ff84 	bl	8000952 <assert_failed>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d10a      	bne.n	8001a68 <HAL_ADC_Init+0x24c>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	2200      	movs	r2, #0
 8001a56:	649a      	str	r2, [r3, #72]	; 0x48
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	2240      	movs	r2, #64	; 0x40
 8001a5c:	2100      	movs	r1, #0
 8001a5e:	5499      	strb	r1, [r3, r2]
    
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	0018      	movs	r0, r3
 8001a64:	f7fe fc6a 	bl	800033c <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */ 
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a6c:	2210      	movs	r2, #16
 8001a6e:	4013      	ands	r3, r2
 8001a70:	d000      	beq.n	8001a74 <HAL_ADC_Init+0x258>
 8001a72:	e10a      	b.n	8001c8a <HAL_ADC_Init+0x46e>
 8001a74:	230f      	movs	r3, #15
 8001a76:	18fb      	adds	r3, r7, r3
 8001a78:	781b      	ldrb	r3, [r3, #0]
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d000      	beq.n	8001a80 <HAL_ADC_Init+0x264>
 8001a7e:	e104      	b.n	8001c8a <HAL_ADC_Init+0x46e>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	689b      	ldr	r3, [r3, #8]
 8001a86:	2204      	movs	r2, #4
 8001a88:	4013      	ands	r3, r2
      (tmp_hal_status == HAL_OK)                                &&
 8001a8a:	d000      	beq.n	8001a8e <HAL_ADC_Init+0x272>
 8001a8c:	e0fd      	b.n	8001c8a <HAL_ADC_Init+0x46e>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a92:	4a31      	ldr	r2, [pc, #196]	; (8001b58 <HAL_ADC_Init+0x33c>)
 8001a94:	4013      	ands	r3, r2
 8001a96:	2202      	movs	r2, #2
 8001a98:	431a      	orrs	r2, r3
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	645a      	str	r2, [r3, #68]	; 0x44
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - ADC clock mode                                                      */
    /*  - ADC clock prescaler                                                 */
    /*  - ADC resolution                                                      */
    if (ADC_IS_ENABLE(hadc) == RESET)
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	689b      	ldr	r3, [r3, #8]
 8001aa4:	2203      	movs	r2, #3
 8001aa6:	4013      	ands	r3, r2
 8001aa8:	2b01      	cmp	r3, #1
 8001aaa:	d112      	bne.n	8001ad2 <HAL_ADC_Init+0x2b6>
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	2201      	movs	r2, #1
 8001ab4:	4013      	ands	r3, r2
 8001ab6:	2b01      	cmp	r3, #1
 8001ab8:	d009      	beq.n	8001ace <HAL_ADC_Init+0x2b2>
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	68da      	ldr	r2, [r3, #12]
 8001ac0:	2380      	movs	r3, #128	; 0x80
 8001ac2:	021b      	lsls	r3, r3, #8
 8001ac4:	401a      	ands	r2, r3
 8001ac6:	2380      	movs	r3, #128	; 0x80
 8001ac8:	021b      	lsls	r3, r3, #8
 8001aca:	429a      	cmp	r2, r3
 8001acc:	d101      	bne.n	8001ad2 <HAL_ADC_Init+0x2b6>
 8001ace:	2301      	movs	r3, #1
 8001ad0:	e000      	b.n	8001ad4 <HAL_ADC_Init+0x2b8>
 8001ad2:	2300      	movs	r3, #0
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d116      	bne.n	8001b06 <HAL_ADC_Init+0x2ea>
      /* parameters):                                                         */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() )                              */
     
      /* Configuration of ADC resolution                                      */
      MODIFY_REG(hadc->Instance->CFGR1,
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	68db      	ldr	r3, [r3, #12]
 8001ade:	2218      	movs	r2, #24
 8001ae0:	4393      	bics	r3, r2
 8001ae2:	0019      	movs	r1, r3
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	689a      	ldr	r2, [r3, #8]
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	430a      	orrs	r2, r1
 8001aee:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_RES        ,
                 hadc->Init.Resolution );
      
      /* Configuration of ADC clock mode: clock source AHB or HSI with        */
      /* selectable prescaler                                                 */
      MODIFY_REG(hadc->Instance->CFGR2    ,
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	691b      	ldr	r3, [r3, #16]
 8001af6:	009b      	lsls	r3, r3, #2
 8001af8:	0899      	lsrs	r1, r3, #2
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	685a      	ldr	r2, [r3, #4]
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	430a      	orrs	r2, r1
 8001b04:	611a      	str	r2, [r3, #16]
    /*  - external trigger polarity                                           */
    /*  - data alignment                                                      */
    /*  - resolution                                                          */
    /*  - scan direction                                                      */
    /*  - DMA continuous request                                              */
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_DISCEN  |
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	68da      	ldr	r2, [r3, #12]
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	4912      	ldr	r1, [pc, #72]	; (8001b5c <HAL_ADC_Init+0x340>)
 8001b12:	400a      	ands	r2, r1
 8001b14:	60da      	str	r2, [r3, #12]
                                ADC_CFGR1_EXTEN   |
                                ADC_CFGR1_ALIGN   |
                                ADC_CFGR1_SCANDIR |
                                ADC_CFGR1_DMACFG   );

    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT(hadc->Init.LowPowerAutoWait)        |
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	699b      	ldr	r3, [r3, #24]
 8001b1a:	039a      	lsls	r2, r3, #14
                 ADC_CFGR1_AUTOOFF(hadc->Init.LowPowerAutoPowerOff)     |
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	69db      	ldr	r3, [r3, #28]
 8001b20:	03db      	lsls	r3, r3, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT(hadc->Init.LowPowerAutoWait)        |
 8001b22:	431a      	orrs	r2, r3
                 ADC_CFGR1_CONTINUOUS(hadc->Init.ContinuousConvMode)    |
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	6a1b      	ldr	r3, [r3, #32]
 8001b28:	035b      	lsls	r3, r3, #13
                 ADC_CFGR1_AUTOOFF(hadc->Init.LowPowerAutoPowerOff)     |
 8001b2a:	431a      	orrs	r2, r3
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                  |
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001b30:	2b01      	cmp	r3, #1
 8001b32:	d002      	beq.n	8001b3a <HAL_ADC_Init+0x31e>
 8001b34:	2380      	movs	r3, #128	; 0x80
 8001b36:	015b      	lsls	r3, r3, #5
 8001b38:	e000      	b.n	8001b3c <HAL_ADC_Init+0x320>
 8001b3a:	2300      	movs	r3, #0
                 ADC_CFGR1_CONTINUOUS(hadc->Init.ContinuousConvMode)    |
 8001b3c:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                   |
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	68db      	ldr	r3, [r3, #12]
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                  |
 8001b42:	431a      	orrs	r2, r3
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                   |
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	691b      	ldr	r3, [r3, #16]
 8001b48:	2b02      	cmp	r3, #2
 8001b4a:	d109      	bne.n	8001b60 <HAL_ADC_Init+0x344>
 8001b4c:	2304      	movs	r3, #4
 8001b4e:	e008      	b.n	8001b62 <HAL_ADC_Init+0x346>
 8001b50:	40012400 	.word	0x40012400
 8001b54:	08006f30 	.word	0x08006f30
 8001b58:	fffffefd 	.word	0xfffffefd
 8001b5c:	fffe0219 	.word	0xfffe0219
 8001b60:	2300      	movs	r3, #0
                 hadc->Init.DataAlign                                   |
 8001b62:	431a      	orrs	r2, r3
                 ADC_CFGR1_DMACONTREQ(hadc->Init.DMAContinuousRequests)  );
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b68:	005b      	lsls	r3, r3, #1
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                   |
 8001b6a:	4313      	orrs	r3, r2
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT(hadc->Init.LowPowerAutoWait)        |
 8001b6c:	68ba      	ldr	r2, [r7, #8]
 8001b6e:	4313      	orrs	r3, r2
 8001b70:	60bb      	str	r3, [r7, #8]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b76:	2b01      	cmp	r3, #1
 8001b78:	d115      	bne.n	8001ba6 <HAL_ADC_Init+0x38a>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	6a1b      	ldr	r3, [r3, #32]
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d105      	bne.n	8001b8e <HAL_ADC_Init+0x372>
      {
        /* Enable the selected ADC group regular discontinuous mode */
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8001b82:	68bb      	ldr	r3, [r7, #8]
 8001b84:	2280      	movs	r2, #128	; 0x80
 8001b86:	0252      	lsls	r2, r2, #9
 8001b88:	4313      	orrs	r3, r2
 8001b8a:	60bb      	str	r3, [r7, #8]
 8001b8c:	e00b      	b.n	8001ba6 <HAL_ADC_Init+0x38a>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b92:	2220      	movs	r2, #32
 8001b94:	431a      	orrs	r2, r3
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	645a      	str	r2, [r3, #68]	; 0x44
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001b9e:	2201      	movs	r2, #1
 8001ba0:	431a      	orrs	r2, r3
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	649a      	str	r2, [r3, #72]	; 0x48
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001baa:	23c2      	movs	r3, #194	; 0xc2
 8001bac:	33ff      	adds	r3, #255	; 0xff
 8001bae:	429a      	cmp	r2, r3
 8001bb0:	d007      	beq.n	8001bc2 <HAL_ADC_Init+0x3a6>
    {
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
                    hadc->Init.ExternalTrigConvEdge );
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8001bba:	4313      	orrs	r3, r2
 8001bbc:	68ba      	ldr	r2, [r7, #8]
 8001bbe:	4313      	orrs	r3, r2
 8001bc0:	60bb      	str	r3, [r7, #8]
    }
    
    /* Update ADC configuration register with previous settings */
    hadc->Instance->CFGR1 |= tmpCFGR1;
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	68d9      	ldr	r1, [r3, #12]
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	68ba      	ldr	r2, [r7, #8]
 8001bce:	430a      	orrs	r2, r1
 8001bd0:	60da      	str	r2, [r3, #12]
    /* Management of parameters "SamplingTimeCommon" and "SamplingTime"       */
    /* (obsolete): sampling time set in this function if parameter            */
    /*  "SamplingTimeCommon" has been set to a valid sampling time.           */
    /* Otherwise, sampling time is set into ADC channel initialization        */
    /* structure with parameter "SamplingTime" (obsolete).                    */
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001bd6:	2380      	movs	r3, #128	; 0x80
 8001bd8:	055b      	lsls	r3, r3, #21
 8001bda:	429a      	cmp	r2, r3
 8001bdc:	d01b      	beq.n	8001c16 <HAL_ADC_Init+0x3fa>
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001be2:	2b01      	cmp	r3, #1
 8001be4:	d017      	beq.n	8001c16 <HAL_ADC_Init+0x3fa>
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001bea:	2b02      	cmp	r3, #2
 8001bec:	d013      	beq.n	8001c16 <HAL_ADC_Init+0x3fa>
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001bf2:	2b03      	cmp	r3, #3
 8001bf4:	d00f      	beq.n	8001c16 <HAL_ADC_Init+0x3fa>
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001bfa:	2b04      	cmp	r3, #4
 8001bfc:	d00b      	beq.n	8001c16 <HAL_ADC_Init+0x3fa>
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c02:	2b05      	cmp	r3, #5
 8001c04:	d007      	beq.n	8001c16 <HAL_ADC_Init+0x3fa>
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c0a:	2b06      	cmp	r3, #6
 8001c0c:	d003      	beq.n	8001c16 <HAL_ADC_Init+0x3fa>
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c12:	2b07      	cmp	r3, #7
 8001c14:	d112      	bne.n	8001c3c <HAL_ADC_Init+0x420>
    {
      /* Channel sampling time configuration */
      /* Clear the old sample time */
      hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	695a      	ldr	r2, [r3, #20]
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	2107      	movs	r1, #7
 8001c22:	438a      	bics	r2, r1
 8001c24:	615a      	str	r2, [r3, #20]
      
      /* Set the new sample time */
      hadc->Instance->SMPR |= ADC_SMPR_SET(hadc->Init.SamplingTimeCommon);
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	6959      	ldr	r1, [r3, #20]
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c30:	2207      	movs	r2, #7
 8001c32:	401a      	ands	r2, r3
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	430a      	orrs	r2, r1
 8001c3a:	615a      	str	r2, [r3, #20]
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CFGR1 (excluding analog watchdog configuration: */
    /* set into separate dedicated function, and bits of ADC resolution set   */
    /* out of temporary variable 'tmpCFGR1').                                 */
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	68db      	ldr	r3, [r3, #12]
 8001c42:	4a1a      	ldr	r2, [pc, #104]	; (8001cac <HAL_ADC_Init+0x490>)
 8001c44:	4013      	ands	r3, r2
 8001c46:	68ba      	ldr	r2, [r7, #8]
 8001c48:	429a      	cmp	r2, r3
 8001c4a:	d10b      	bne.n	8001c64 <HAL_ADC_Init+0x448>
         == tmpCFGR1)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	2200      	movs	r2, #0
 8001c50:	649a      	str	r2, [r3, #72]	; 0x48
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c56:	2203      	movs	r2, #3
 8001c58:	4393      	bics	r3, r2
 8001c5a:	2201      	movs	r2, #1
 8001c5c:	431a      	orrs	r2, r3
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	645a      	str	r2, [r3, #68]	; 0x44
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8001c62:	e01c      	b.n	8001c9e <HAL_ADC_Init+0x482>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c68:	2212      	movs	r2, #18
 8001c6a:	4393      	bics	r3, r2
 8001c6c:	2210      	movs	r2, #16
 8001c6e:	431a      	orrs	r2, r3
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	645a      	str	r2, [r3, #68]	; 0x44
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001c78:	2201      	movs	r2, #1
 8001c7a:	431a      	orrs	r2, r3
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	649a      	str	r2, [r3, #72]	; 0x48
      
      tmp_hal_status = HAL_ERROR;
 8001c80:	230f      	movs	r3, #15
 8001c82:	18fb      	adds	r3, r7, r3
 8001c84:	2201      	movs	r2, #1
 8001c86:	701a      	strb	r2, [r3, #0]
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8001c88:	e009      	b.n	8001c9e <HAL_ADC_Init+0x482>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c8e:	2210      	movs	r2, #16
 8001c90:	431a      	orrs	r2, r3
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	645a      	str	r2, [r3, #68]	; 0x44
        
    tmp_hal_status = HAL_ERROR;
 8001c96:	230f      	movs	r3, #15
 8001c98:	18fb      	adds	r3, r7, r3
 8001c9a:	2201      	movs	r2, #1
 8001c9c:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001c9e:	230f      	movs	r3, #15
 8001ca0:	18fb      	adds	r3, r7, r3
 8001ca2:	781b      	ldrb	r3, [r3, #0]
}
 8001ca4:	0018      	movs	r0, r3
 8001ca6:	46bd      	mov	sp, r7
 8001ca8:	b004      	add	sp, #16
 8001caa:	bd80      	pop	{r7, pc}
 8001cac:	833fffe7 	.word	0x833fffe7

08001cb0 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8001cb0:	b590      	push	{r4, r7, lr}
 8001cb2:	b087      	sub	sp, #28
 8001cb4:	af00      	add	r7, sp, #0
 8001cb6:	60f8      	str	r0, [r7, #12]
 8001cb8:	60b9      	str	r1, [r7, #8]
 8001cba:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001cbc:	2317      	movs	r3, #23
 8001cbe:	18fb      	adds	r3, r7, r3
 8001cc0:	2200      	movs	r2, #0
 8001cc2:	701a      	strb	r2, [r3, #0]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	4a3c      	ldr	r2, [pc, #240]	; (8001dbc <HAL_ADC_Start_DMA+0x10c>)
 8001cca:	4293      	cmp	r3, r2
 8001ccc:	d005      	beq.n	8001cda <HAL_ADC_Start_DMA+0x2a>
 8001cce:	4a3c      	ldr	r2, [pc, #240]	; (8001dc0 <HAL_ADC_Start_DMA+0x110>)
 8001cd0:	4b3c      	ldr	r3, [pc, #240]	; (8001dc4 <HAL_ADC_Start_DMA+0x114>)
 8001cd2:	0011      	movs	r1, r2
 8001cd4:	0018      	movs	r0, r3
 8001cd6:	f7fe fe3c 	bl	8000952 <assert_failed>

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	689b      	ldr	r3, [r3, #8]
 8001ce0:	2204      	movs	r2, #4
 8001ce2:	4013      	ands	r3, r2
 8001ce4:	d15e      	bne.n	8001da4 <HAL_ADC_Start_DMA+0xf4>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	2240      	movs	r2, #64	; 0x40
 8001cea:	5c9b      	ldrb	r3, [r3, r2]
 8001cec:	2b01      	cmp	r3, #1
 8001cee:	d101      	bne.n	8001cf4 <HAL_ADC_Start_DMA+0x44>
 8001cf0:	2302      	movs	r3, #2
 8001cf2:	e05e      	b.n	8001db2 <HAL_ADC_Start_DMA+0x102>
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	2240      	movs	r2, #64	; 0x40
 8001cf8:	2101      	movs	r1, #1
 8001cfa:	5499      	strb	r1, [r3, r2]

    /* Enable the ADC peripheral */
    /* If low power mode AutoPowerOff is enabled, power-on/off phases are       */
    /* performed automatically by hardware.                                     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	69db      	ldr	r3, [r3, #28]
 8001d00:	2b01      	cmp	r3, #1
 8001d02:	d007      	beq.n	8001d14 <HAL_ADC_Start_DMA+0x64>
    {
      tmp_hal_status = ADC_Enable(hadc);
 8001d04:	2317      	movs	r3, #23
 8001d06:	18fc      	adds	r4, r7, r3
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	0018      	movs	r0, r3
 8001d0c:	f000 fa30 	bl	8002170 <ADC_Enable>
 8001d10:	0003      	movs	r3, r0
 8001d12:	7023      	strb	r3, [r4, #0]
    }
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001d14:	2317      	movs	r3, #23
 8001d16:	18fb      	adds	r3, r7, r3
 8001d18:	781b      	ldrb	r3, [r3, #0]
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d146      	bne.n	8001dac <HAL_ADC_Start_DMA+0xfc>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d22:	4a29      	ldr	r2, [pc, #164]	; (8001dc8 <HAL_ADC_Start_DMA+0x118>)
 8001d24:	4013      	ands	r3, r2
 8001d26:	2280      	movs	r2, #128	; 0x80
 8001d28:	0052      	lsls	r2, r2, #1
 8001d2a:	431a      	orrs	r2, r3
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	645a      	str	r2, [r3, #68]	; 0x44
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	2200      	movs	r2, #0
 8001d34:	649a      	str	r2, [r3, #72]	; 0x48
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	2240      	movs	r2, #64	; 0x40
 8001d3a:	2100      	movs	r1, #0
 8001d3c:	5499      	strb	r1, [r3, r2]

      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001d3e:	68fb      	ldr	r3, [r7, #12]
 8001d40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d42:	4a22      	ldr	r2, [pc, #136]	; (8001dcc <HAL_ADC_Start_DMA+0x11c>)
 8001d44:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d4a:	4a21      	ldr	r2, [pc, #132]	; (8001dd0 <HAL_ADC_Start_DMA+0x120>)
 8001d4c:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001d4e:	68fb      	ldr	r3, [r7, #12]
 8001d50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d52:	4a20      	ldr	r2, [pc, #128]	; (8001dd4 <HAL_ADC_Start_DMA+0x124>)
 8001d54:	631a      	str	r2, [r3, #48]	; 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	221c      	movs	r2, #28
 8001d5c:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC overrun interrupt */
      __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	685a      	ldr	r2, [r3, #4]
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	2110      	movs	r1, #16
 8001d6a:	430a      	orrs	r2, r1
 8001d6c:	605a      	str	r2, [r3, #4]
      
      /* Enable ADC DMA mode */
      hadc->Instance->CFGR1 |= ADC_CFGR1_DMAEN;
 8001d6e:	68fb      	ldr	r3, [r7, #12]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	68da      	ldr	r2, [r3, #12]
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	2101      	movs	r1, #1
 8001d7a:	430a      	orrs	r2, r1
 8001d7c:	60da      	str	r2, [r3, #12]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8001d82:	68fb      	ldr	r3, [r7, #12]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	3340      	adds	r3, #64	; 0x40
 8001d88:	0019      	movs	r1, r3
 8001d8a:	68ba      	ldr	r2, [r7, #8]
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	f000 ff25 	bl	8002bdc <HAL_DMA_Start_IT>
           
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      hadc->Instance->CR |= ADC_CR_ADSTART;
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	689a      	ldr	r2, [r3, #8]
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	2104      	movs	r1, #4
 8001d9e:	430a      	orrs	r2, r1
 8001da0:	609a      	str	r2, [r3, #8]
 8001da2:	e003      	b.n	8001dac <HAL_ADC_Start_DMA+0xfc>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001da4:	2317      	movs	r3, #23
 8001da6:	18fb      	adds	r3, r7, r3
 8001da8:	2202      	movs	r2, #2
 8001daa:	701a      	strb	r2, [r3, #0]
  }
    
  /* Return function status */
  return tmp_hal_status;
 8001dac:	2317      	movs	r3, #23
 8001dae:	18fb      	adds	r3, r7, r3
 8001db0:	781b      	ldrb	r3, [r3, #0]
}
 8001db2:	0018      	movs	r0, r3
 8001db4:	46bd      	mov	sp, r7
 8001db6:	b007      	add	sp, #28
 8001db8:	bd90      	pop	{r4, r7, pc}
 8001dba:	46c0      	nop			; (mov r8, r8)
 8001dbc:	40012400 	.word	0x40012400
 8001dc0:	000004bc 	.word	0x000004bc
 8001dc4:	08006f30 	.word	0x08006f30
 8001dc8:	fffff0fe 	.word	0xfffff0fe
 8001dcc:	08002269 	.word	0x08002269
 8001dd0:	0800231d 	.word	0x0800231d
 8001dd4:	0800233b 	.word	0x0800233b

08001dd8 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001dd8:	b580      	push	{r7, lr}
 8001dda:	b082      	sub	sp, #8
 8001ddc:	af00      	add	r7, sp, #0
 8001dde:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8001de0:	46c0      	nop			; (mov r8, r8)
 8001de2:	46bd      	mov	sp, r7
 8001de4:	b002      	add	sp, #8
 8001de6:	bd80      	pop	{r7, pc}

08001de8 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001de8:	b580      	push	{r7, lr}
 8001dea:	b082      	sub	sp, #8
 8001dec:	af00      	add	r7, sp, #0
 8001dee:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8001df0:	46c0      	nop			; (mov r8, r8)
 8001df2:	46bd      	mov	sp, r7
 8001df4:	b002      	add	sp, #8
 8001df6:	bd80      	pop	{r7, pc}

08001df8 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001df8:	b580      	push	{r7, lr}
 8001dfa:	b084      	sub	sp, #16
 8001dfc:	af00      	add	r7, sp, #0
 8001dfe:	6078      	str	r0, [r7, #4]
 8001e00:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001e02:	230f      	movs	r3, #15
 8001e04:	18fb      	adds	r3, r7, r3
 8001e06:	2200      	movs	r2, #0
 8001e08:	701a      	strb	r2, [r3, #0]
  __IO uint32_t wait_loop_index = 0U;
 8001e0a:	2300      	movs	r3, #0
 8001e0c:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	4abc      	ldr	r2, [pc, #752]	; (8002104 <HAL_ADC_ConfigChannel+0x30c>)
 8001e14:	4293      	cmp	r3, r2
 8001e16:	d005      	beq.n	8001e24 <HAL_ADC_ConfigChannel+0x2c>
 8001e18:	4abb      	ldr	r2, [pc, #748]	; (8002108 <HAL_ADC_ConfigChannel+0x310>)
 8001e1a:	4bbc      	ldr	r3, [pc, #752]	; (800210c <HAL_ADC_ConfigChannel+0x314>)
 8001e1c:	0011      	movs	r1, r2
 8001e1e:	0018      	movs	r0, r3
 8001e20:	f7fe fd97 	bl	8000952 <assert_failed>
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
 8001e24:	683b      	ldr	r3, [r7, #0]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d04d      	beq.n	8001ec8 <HAL_ADC_ConfigChannel+0xd0>
 8001e2c:	683b      	ldr	r3, [r7, #0]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	2b01      	cmp	r3, #1
 8001e32:	d049      	beq.n	8001ec8 <HAL_ADC_ConfigChannel+0xd0>
 8001e34:	683b      	ldr	r3, [r7, #0]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	2b02      	cmp	r3, #2
 8001e3a:	d045      	beq.n	8001ec8 <HAL_ADC_ConfigChannel+0xd0>
 8001e3c:	683b      	ldr	r3, [r7, #0]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	2b03      	cmp	r3, #3
 8001e42:	d041      	beq.n	8001ec8 <HAL_ADC_ConfigChannel+0xd0>
 8001e44:	683b      	ldr	r3, [r7, #0]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	2b04      	cmp	r3, #4
 8001e4a:	d03d      	beq.n	8001ec8 <HAL_ADC_ConfigChannel+0xd0>
 8001e4c:	683b      	ldr	r3, [r7, #0]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	2b05      	cmp	r3, #5
 8001e52:	d039      	beq.n	8001ec8 <HAL_ADC_ConfigChannel+0xd0>
 8001e54:	683b      	ldr	r3, [r7, #0]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	2b06      	cmp	r3, #6
 8001e5a:	d035      	beq.n	8001ec8 <HAL_ADC_ConfigChannel+0xd0>
 8001e5c:	683b      	ldr	r3, [r7, #0]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	2b07      	cmp	r3, #7
 8001e62:	d031      	beq.n	8001ec8 <HAL_ADC_ConfigChannel+0xd0>
 8001e64:	683b      	ldr	r3, [r7, #0]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	2b08      	cmp	r3, #8
 8001e6a:	d02d      	beq.n	8001ec8 <HAL_ADC_ConfigChannel+0xd0>
 8001e6c:	683b      	ldr	r3, [r7, #0]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	2b09      	cmp	r3, #9
 8001e72:	d029      	beq.n	8001ec8 <HAL_ADC_ConfigChannel+0xd0>
 8001e74:	683b      	ldr	r3, [r7, #0]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	2b0a      	cmp	r3, #10
 8001e7a:	d025      	beq.n	8001ec8 <HAL_ADC_ConfigChannel+0xd0>
 8001e7c:	683b      	ldr	r3, [r7, #0]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	2b0b      	cmp	r3, #11
 8001e82:	d021      	beq.n	8001ec8 <HAL_ADC_ConfigChannel+0xd0>
 8001e84:	683b      	ldr	r3, [r7, #0]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	2b0c      	cmp	r3, #12
 8001e8a:	d01d      	beq.n	8001ec8 <HAL_ADC_ConfigChannel+0xd0>
 8001e8c:	683b      	ldr	r3, [r7, #0]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	2b0d      	cmp	r3, #13
 8001e92:	d019      	beq.n	8001ec8 <HAL_ADC_ConfigChannel+0xd0>
 8001e94:	683b      	ldr	r3, [r7, #0]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	2b0e      	cmp	r3, #14
 8001e9a:	d015      	beq.n	8001ec8 <HAL_ADC_ConfigChannel+0xd0>
 8001e9c:	683b      	ldr	r3, [r7, #0]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	2b0f      	cmp	r3, #15
 8001ea2:	d011      	beq.n	8001ec8 <HAL_ADC_ConfigChannel+0xd0>
 8001ea4:	683b      	ldr	r3, [r7, #0]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	2b10      	cmp	r3, #16
 8001eaa:	d00d      	beq.n	8001ec8 <HAL_ADC_ConfigChannel+0xd0>
 8001eac:	683b      	ldr	r3, [r7, #0]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	2b11      	cmp	r3, #17
 8001eb2:	d009      	beq.n	8001ec8 <HAL_ADC_ConfigChannel+0xd0>
 8001eb4:	683b      	ldr	r3, [r7, #0]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	2b12      	cmp	r3, #18
 8001eba:	d005      	beq.n	8001ec8 <HAL_ADC_ConfigChannel+0xd0>
 8001ebc:	4a94      	ldr	r2, [pc, #592]	; (8002110 <HAL_ADC_ConfigChannel+0x318>)
 8001ebe:	4b93      	ldr	r3, [pc, #588]	; (800210c <HAL_ADC_ConfigChannel+0x314>)
 8001ec0:	0011      	movs	r1, r2
 8001ec2:	0018      	movs	r0, r3
 8001ec4:	f7fe fd45 	bl	8000952 <assert_failed>
  assert_param(IS_ADC_RANK(sConfig->Rank));
 8001ec8:	683b      	ldr	r3, [r7, #0]
 8001eca:	685a      	ldr	r2, [r3, #4]
 8001ecc:	2380      	movs	r3, #128	; 0x80
 8001ece:	015b      	lsls	r3, r3, #5
 8001ed0:	429a      	cmp	r2, r3
 8001ed2:	d00a      	beq.n	8001eea <HAL_ADC_ConfigChannel+0xf2>
 8001ed4:	683b      	ldr	r3, [r7, #0]
 8001ed6:	685b      	ldr	r3, [r3, #4]
 8001ed8:	4a8e      	ldr	r2, [pc, #568]	; (8002114 <HAL_ADC_ConfigChannel+0x31c>)
 8001eda:	4293      	cmp	r3, r2
 8001edc:	d005      	beq.n	8001eea <HAL_ADC_ConfigChannel+0xf2>
 8001ede:	4a8e      	ldr	r2, [pc, #568]	; (8002118 <HAL_ADC_ConfigChannel+0x320>)
 8001ee0:	4b8a      	ldr	r3, [pc, #552]	; (800210c <HAL_ADC_ConfigChannel+0x314>)
 8001ee2:	0011      	movs	r1, r2
 8001ee4:	0018      	movs	r0, r3
 8001ee6:	f7fe fd34 	bl	8000952 <assert_failed>
  
  if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001eee:	2380      	movs	r3, #128	; 0x80
 8001ef0:	055b      	lsls	r3, r3, #21
 8001ef2:	429a      	cmp	r2, r3
 8001ef4:	d043      	beq.n	8001f7e <HAL_ADC_ConfigChannel+0x186>
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001efa:	2b01      	cmp	r3, #1
 8001efc:	d03f      	beq.n	8001f7e <HAL_ADC_ConfigChannel+0x186>
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f02:	2b02      	cmp	r3, #2
 8001f04:	d03b      	beq.n	8001f7e <HAL_ADC_ConfigChannel+0x186>
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f0a:	2b03      	cmp	r3, #3
 8001f0c:	d037      	beq.n	8001f7e <HAL_ADC_ConfigChannel+0x186>
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f12:	2b04      	cmp	r3, #4
 8001f14:	d033      	beq.n	8001f7e <HAL_ADC_ConfigChannel+0x186>
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f1a:	2b05      	cmp	r3, #5
 8001f1c:	d02f      	beq.n	8001f7e <HAL_ADC_ConfigChannel+0x186>
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f22:	2b06      	cmp	r3, #6
 8001f24:	d02b      	beq.n	8001f7e <HAL_ADC_ConfigChannel+0x186>
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f2a:	2b07      	cmp	r3, #7
 8001f2c:	d027      	beq.n	8001f7e <HAL_ADC_ConfigChannel+0x186>
  {
    assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
 8001f2e:	683b      	ldr	r3, [r7, #0]
 8001f30:	689a      	ldr	r2, [r3, #8]
 8001f32:	2380      	movs	r3, #128	; 0x80
 8001f34:	055b      	lsls	r3, r3, #21
 8001f36:	429a      	cmp	r2, r3
 8001f38:	d021      	beq.n	8001f7e <HAL_ADC_ConfigChannel+0x186>
 8001f3a:	683b      	ldr	r3, [r7, #0]
 8001f3c:	689b      	ldr	r3, [r3, #8]
 8001f3e:	2b01      	cmp	r3, #1
 8001f40:	d01d      	beq.n	8001f7e <HAL_ADC_ConfigChannel+0x186>
 8001f42:	683b      	ldr	r3, [r7, #0]
 8001f44:	689b      	ldr	r3, [r3, #8]
 8001f46:	2b02      	cmp	r3, #2
 8001f48:	d019      	beq.n	8001f7e <HAL_ADC_ConfigChannel+0x186>
 8001f4a:	683b      	ldr	r3, [r7, #0]
 8001f4c:	689b      	ldr	r3, [r3, #8]
 8001f4e:	2b03      	cmp	r3, #3
 8001f50:	d015      	beq.n	8001f7e <HAL_ADC_ConfigChannel+0x186>
 8001f52:	683b      	ldr	r3, [r7, #0]
 8001f54:	689b      	ldr	r3, [r3, #8]
 8001f56:	2b04      	cmp	r3, #4
 8001f58:	d011      	beq.n	8001f7e <HAL_ADC_ConfigChannel+0x186>
 8001f5a:	683b      	ldr	r3, [r7, #0]
 8001f5c:	689b      	ldr	r3, [r3, #8]
 8001f5e:	2b05      	cmp	r3, #5
 8001f60:	d00d      	beq.n	8001f7e <HAL_ADC_ConfigChannel+0x186>
 8001f62:	683b      	ldr	r3, [r7, #0]
 8001f64:	689b      	ldr	r3, [r3, #8]
 8001f66:	2b06      	cmp	r3, #6
 8001f68:	d009      	beq.n	8001f7e <HAL_ADC_ConfigChannel+0x186>
 8001f6a:	683b      	ldr	r3, [r7, #0]
 8001f6c:	689b      	ldr	r3, [r3, #8]
 8001f6e:	2b07      	cmp	r3, #7
 8001f70:	d005      	beq.n	8001f7e <HAL_ADC_ConfigChannel+0x186>
 8001f72:	4a6a      	ldr	r2, [pc, #424]	; (800211c <HAL_ADC_ConfigChannel+0x324>)
 8001f74:	4b65      	ldr	r3, [pc, #404]	; (800210c <HAL_ADC_ConfigChannel+0x314>)
 8001f76:	0011      	movs	r1, r2
 8001f78:	0018      	movs	r0, r3
 8001f7a:	f7fe fcea 	bl	8000952 <assert_failed>
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	2240      	movs	r2, #64	; 0x40
 8001f82:	5c9b      	ldrb	r3, [r3, r2]
 8001f84:	2b01      	cmp	r3, #1
 8001f86:	d101      	bne.n	8001f8c <HAL_ADC_ConfigChannel+0x194>
 8001f88:	2302      	movs	r3, #2
 8001f8a:	e0e9      	b.n	8002160 <HAL_ADC_ConfigChannel+0x368>
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	2240      	movs	r2, #64	; 0x40
 8001f90:	2101      	movs	r1, #1
 8001f92:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	689b      	ldr	r3, [r3, #8]
 8001f9a:	2204      	movs	r2, #4
 8001f9c:	4013      	ands	r3, r2
 8001f9e:	d000      	beq.n	8001fa2 <HAL_ADC_ConfigChannel+0x1aa>
 8001fa0:	e0cd      	b.n	800213e <HAL_ADC_ConfigChannel+0x346>
  {
    /* Configure channel: depending on rank setting, add it or remove it from */
    /* ADC conversion sequencer.                                              */
    if (sConfig->Rank != ADC_RANK_NONE)
 8001fa2:	683b      	ldr	r3, [r7, #0]
 8001fa4:	685b      	ldr	r3, [r3, #4]
 8001fa6:	4a5b      	ldr	r2, [pc, #364]	; (8002114 <HAL_ADC_ConfigChannel+0x31c>)
 8001fa8:	4293      	cmp	r3, r2
 8001faa:	d100      	bne.n	8001fae <HAL_ADC_ConfigChannel+0x1b6>
 8001fac:	e083      	b.n	80020b6 <HAL_ADC_ConfigChannel+0x2be>
    {
      /* Regular sequence configuration */
      /* Set the channel selection register from the selected channel */
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8001fb4:	683b      	ldr	r3, [r7, #0]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	2201      	movs	r2, #1
 8001fba:	409a      	lsls	r2, r3
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	430a      	orrs	r2, r1
 8001fc2:	629a      	str	r2, [r3, #40]	; 0x28
      /* Channel sampling time configuration */
      /* Management of parameters "SamplingTimeCommon" and "SamplingTime"     */
      /* (obsolete): sampling time set in this function with                  */
      /* parameter "SamplingTime" (obsolete) only if not already set into     */
      /* ADC initialization structure with parameter "SamplingTimeCommon".    */
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001fc8:	2380      	movs	r3, #128	; 0x80
 8001fca:	055b      	lsls	r3, r3, #21
 8001fcc:	429a      	cmp	r2, r3
 8001fce:	d037      	beq.n	8002040 <HAL_ADC_ConfigChannel+0x248>
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001fd4:	2b01      	cmp	r3, #1
 8001fd6:	d033      	beq.n	8002040 <HAL_ADC_ConfigChannel+0x248>
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001fdc:	2b02      	cmp	r3, #2
 8001fde:	d02f      	beq.n	8002040 <HAL_ADC_ConfigChannel+0x248>
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001fe4:	2b03      	cmp	r3, #3
 8001fe6:	d02b      	beq.n	8002040 <HAL_ADC_ConfigChannel+0x248>
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001fec:	2b04      	cmp	r3, #4
 8001fee:	d027      	beq.n	8002040 <HAL_ADC_ConfigChannel+0x248>
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ff4:	2b05      	cmp	r3, #5
 8001ff6:	d023      	beq.n	8002040 <HAL_ADC_ConfigChannel+0x248>
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ffc:	2b06      	cmp	r3, #6
 8001ffe:	d01f      	beq.n	8002040 <HAL_ADC_ConfigChannel+0x248>
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002004:	2b07      	cmp	r3, #7
 8002006:	d01b      	beq.n	8002040 <HAL_ADC_ConfigChannel+0x248>
      {
        /* Modify sampling time if needed (not needed in case of reoccurrence */
        /* for several channels programmed consecutively into the sequencer)  */
        if (sConfig->SamplingTime != ADC_GET_SAMPLINGTIME(hadc))
 8002008:	683b      	ldr	r3, [r7, #0]
 800200a:	689a      	ldr	r2, [r3, #8]
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	695b      	ldr	r3, [r3, #20]
 8002012:	2107      	movs	r1, #7
 8002014:	400b      	ands	r3, r1
 8002016:	429a      	cmp	r2, r3
 8002018:	d012      	beq.n	8002040 <HAL_ADC_ConfigChannel+0x248>
        {
          /* Channel sampling time configuration */
          /* Clear the old sample time */
          hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	695a      	ldr	r2, [r3, #20]
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	2107      	movs	r1, #7
 8002026:	438a      	bics	r2, r1
 8002028:	615a      	str	r2, [r3, #20]
          
          /* Set the new sample time */
          hadc->Instance->SMPR |= ADC_SMPR_SET(sConfig->SamplingTime);
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	6959      	ldr	r1, [r3, #20]
 8002030:	683b      	ldr	r3, [r7, #0]
 8002032:	689b      	ldr	r3, [r3, #8]
 8002034:	2207      	movs	r2, #7
 8002036:	401a      	ands	r2, r3
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	430a      	orrs	r2, r1
 800203e:	615a      	str	r2, [r3, #20]
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002040:	683b      	ldr	r3, [r7, #0]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	2b10      	cmp	r3, #16
 8002046:	d008      	beq.n	800205a <HAL_ADC_ConfigChannel+0x262>
 8002048:	683b      	ldr	r3, [r7, #0]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	2b11      	cmp	r3, #17
 800204e:	d004      	beq.n	800205a <HAL_ADC_ConfigChannel+0x262>
 8002050:	683b      	ldr	r3, [r7, #0]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	2b12      	cmp	r3, #18
 8002056:	d000      	beq.n	800205a <HAL_ADC_ConfigChannel+0x262>
 8002058:	e07b      	b.n	8002152 <HAL_ADC_ConfigChannel+0x35a>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path. */
        /* If Channel_17 is selected, enable VREFINT measurement path. */
        /* If Channel_18 is selected, enable VBAT measurement path. */
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 800205a:	4b31      	ldr	r3, [pc, #196]	; (8002120 <HAL_ADC_ConfigChannel+0x328>)
 800205c:	6819      	ldr	r1, [r3, #0]
 800205e:	683b      	ldr	r3, [r7, #0]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	2b10      	cmp	r3, #16
 8002064:	d009      	beq.n	800207a <HAL_ADC_ConfigChannel+0x282>
 8002066:	683b      	ldr	r3, [r7, #0]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	2b11      	cmp	r3, #17
 800206c:	d102      	bne.n	8002074 <HAL_ADC_ConfigChannel+0x27c>
 800206e:	2380      	movs	r3, #128	; 0x80
 8002070:	03db      	lsls	r3, r3, #15
 8002072:	e004      	b.n	800207e <HAL_ADC_ConfigChannel+0x286>
 8002074:	2380      	movs	r3, #128	; 0x80
 8002076:	045b      	lsls	r3, r3, #17
 8002078:	e001      	b.n	800207e <HAL_ADC_ConfigChannel+0x286>
 800207a:	2380      	movs	r3, #128	; 0x80
 800207c:	041b      	lsls	r3, r3, #16
 800207e:	4a28      	ldr	r2, [pc, #160]	; (8002120 <HAL_ADC_ConfigChannel+0x328>)
 8002080:	430b      	orrs	r3, r1
 8002082:	6013      	str	r3, [r2, #0]
        
        /* If Temp. sensor is selected, wait for stabilization delay */
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002084:	683b      	ldr	r3, [r7, #0]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	2b10      	cmp	r3, #16
 800208a:	d162      	bne.n	8002152 <HAL_ADC_ConfigChannel+0x35a>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800208c:	4b25      	ldr	r3, [pc, #148]	; (8002124 <HAL_ADC_ConfigChannel+0x32c>)
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	4925      	ldr	r1, [pc, #148]	; (8002128 <HAL_ADC_ConfigChannel+0x330>)
 8002092:	0018      	movs	r0, r3
 8002094:	f7fe f838 	bl	8000108 <__udivsi3>
 8002098:	0003      	movs	r3, r0
 800209a:	001a      	movs	r2, r3
 800209c:	0013      	movs	r3, r2
 800209e:	009b      	lsls	r3, r3, #2
 80020a0:	189b      	adds	r3, r3, r2
 80020a2:	005b      	lsls	r3, r3, #1
 80020a4:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80020a6:	e002      	b.n	80020ae <HAL_ADC_ConfigChannel+0x2b6>
          {
            wait_loop_index--;
 80020a8:	68bb      	ldr	r3, [r7, #8]
 80020aa:	3b01      	subs	r3, #1
 80020ac:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80020ae:	68bb      	ldr	r3, [r7, #8]
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d1f9      	bne.n	80020a8 <HAL_ADC_ConfigChannel+0x2b0>
 80020b4:	e04d      	b.n	8002152 <HAL_ADC_ConfigChannel+0x35a>
    }
    else
    {
      /* Regular sequence configuration */
      /* Reset the channel selection register from the selected channel */
      hadc->Instance->CHSELR &= ~ADC_CHSELR_CHANNEL(sConfig->Channel);
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80020bc:	683b      	ldr	r3, [r7, #0]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	2101      	movs	r1, #1
 80020c2:	4099      	lsls	r1, r3
 80020c4:	000b      	movs	r3, r1
 80020c6:	43d9      	mvns	r1, r3
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	400a      	ands	r2, r1
 80020ce:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
      /* internal measurement paths disable: If internal channel selected,    */
      /* disable dedicated internal buffers and path.                         */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80020d0:	683b      	ldr	r3, [r7, #0]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	2b10      	cmp	r3, #16
 80020d6:	d007      	beq.n	80020e8 <HAL_ADC_ConfigChannel+0x2f0>
 80020d8:	683b      	ldr	r3, [r7, #0]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	2b11      	cmp	r3, #17
 80020de:	d003      	beq.n	80020e8 <HAL_ADC_ConfigChannel+0x2f0>
 80020e0:	683b      	ldr	r3, [r7, #0]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	2b12      	cmp	r3, #18
 80020e6:	d134      	bne.n	8002152 <HAL_ADC_ConfigChannel+0x35a>
      {
        /* If Channel_16 is selected, disable Temp. sensor measurement path. */
        /* If Channel_17 is selected, disable VREFINT measurement path. */
        /* If Channel_18 is selected, disable VBAT measurement path. */
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 80020e8:	4b0d      	ldr	r3, [pc, #52]	; (8002120 <HAL_ADC_ConfigChannel+0x328>)
 80020ea:	6819      	ldr	r1, [r3, #0]
 80020ec:	683b      	ldr	r3, [r7, #0]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	2b10      	cmp	r3, #16
 80020f2:	d01f      	beq.n	8002134 <HAL_ADC_ConfigChannel+0x33c>
 80020f4:	683b      	ldr	r3, [r7, #0]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	2b11      	cmp	r3, #17
 80020fa:	d101      	bne.n	8002100 <HAL_ADC_ConfigChannel+0x308>
 80020fc:	4b0b      	ldr	r3, [pc, #44]	; (800212c <HAL_ADC_ConfigChannel+0x334>)
 80020fe:	e01a      	b.n	8002136 <HAL_ADC_ConfigChannel+0x33e>
 8002100:	4b0b      	ldr	r3, [pc, #44]	; (8002130 <HAL_ADC_ConfigChannel+0x338>)
 8002102:	e018      	b.n	8002136 <HAL_ADC_ConfigChannel+0x33e>
 8002104:	40012400 	.word	0x40012400
 8002108:	00000651 	.word	0x00000651
 800210c:	08006f30 	.word	0x08006f30
 8002110:	00000652 	.word	0x00000652
 8002114:	00001001 	.word	0x00001001
 8002118:	00000653 	.word	0x00000653
 800211c:	00000657 	.word	0x00000657
 8002120:	40012708 	.word	0x40012708
 8002124:	20000000 	.word	0x20000000
 8002128:	000f4240 	.word	0x000f4240
 800212c:	ffbfffff 	.word	0xffbfffff
 8002130:	feffffff 	.word	0xfeffffff
 8002134:	4b0c      	ldr	r3, [pc, #48]	; (8002168 <HAL_ADC_ConfigChannel+0x370>)
 8002136:	4a0d      	ldr	r2, [pc, #52]	; (800216c <HAL_ADC_ConfigChannel+0x374>)
 8002138:	400b      	ands	r3, r1
 800213a:	6013      	str	r3, [r2, #0]
 800213c:	e009      	b.n	8002152 <HAL_ADC_ConfigChannel+0x35a>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002142:	2220      	movs	r2, #32
 8002144:	431a      	orrs	r2, r3
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	645a      	str	r2, [r3, #68]	; 0x44
    
    tmp_hal_status = HAL_ERROR;
 800214a:	230f      	movs	r3, #15
 800214c:	18fb      	adds	r3, r7, r3
 800214e:	2201      	movs	r2, #1
 8002150:	701a      	strb	r2, [r3, #0]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	2240      	movs	r2, #64	; 0x40
 8002156:	2100      	movs	r1, #0
 8002158:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 800215a:	230f      	movs	r3, #15
 800215c:	18fb      	adds	r3, r7, r3
 800215e:	781b      	ldrb	r3, [r3, #0]
}
 8002160:	0018      	movs	r0, r3
 8002162:	46bd      	mov	sp, r7
 8002164:	b004      	add	sp, #16
 8002166:	bd80      	pop	{r7, pc}
 8002168:	ff7fffff 	.word	0xff7fffff
 800216c:	40012708 	.word	0x40012708

08002170 <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8002170:	b580      	push	{r7, lr}
 8002172:	b084      	sub	sp, #16
 8002174:	af00      	add	r7, sp, #0
 8002176:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002178:	2300      	movs	r3, #0
 800217a:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 800217c:	2300      	movs	r3, #0
 800217e:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	689b      	ldr	r3, [r3, #8]
 8002186:	2203      	movs	r2, #3
 8002188:	4013      	ands	r3, r2
 800218a:	2b01      	cmp	r3, #1
 800218c:	d112      	bne.n	80021b4 <ADC_Enable+0x44>
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	2201      	movs	r2, #1
 8002196:	4013      	ands	r3, r2
 8002198:	2b01      	cmp	r3, #1
 800219a:	d009      	beq.n	80021b0 <ADC_Enable+0x40>
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	68da      	ldr	r2, [r3, #12]
 80021a2:	2380      	movs	r3, #128	; 0x80
 80021a4:	021b      	lsls	r3, r3, #8
 80021a6:	401a      	ands	r2, r3
 80021a8:	2380      	movs	r3, #128	; 0x80
 80021aa:	021b      	lsls	r3, r3, #8
 80021ac:	429a      	cmp	r2, r3
 80021ae:	d101      	bne.n	80021b4 <ADC_Enable+0x44>
 80021b0:	2301      	movs	r3, #1
 80021b2:	e000      	b.n	80021b6 <ADC_Enable+0x46>
 80021b4:	2300      	movs	r3, #0
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d14b      	bne.n	8002252 <ADC_Enable+0xe2>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	689b      	ldr	r3, [r3, #8]
 80021c0:	4a26      	ldr	r2, [pc, #152]	; (800225c <ADC_Enable+0xec>)
 80021c2:	4013      	ands	r3, r2
 80021c4:	d00d      	beq.n	80021e2 <ADC_Enable+0x72>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021ca:	2210      	movs	r2, #16
 80021cc:	431a      	orrs	r2, r3
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	645a      	str	r2, [r3, #68]	; 0x44
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80021d6:	2201      	movs	r2, #1
 80021d8:	431a      	orrs	r2, r3
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	649a      	str	r2, [r3, #72]	; 0x48
      
      return HAL_ERROR;
 80021de:	2301      	movs	r3, #1
 80021e0:	e038      	b.n	8002254 <ADC_Enable+0xe4>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	689a      	ldr	r2, [r3, #8]
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	2101      	movs	r1, #1
 80021ee:	430a      	orrs	r2, r1
 80021f0:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80021f2:	4b1b      	ldr	r3, [pc, #108]	; (8002260 <ADC_Enable+0xf0>)
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	491b      	ldr	r1, [pc, #108]	; (8002264 <ADC_Enable+0xf4>)
 80021f8:	0018      	movs	r0, r3
 80021fa:	f7fd ff85 	bl	8000108 <__udivsi3>
 80021fe:	0003      	movs	r3, r0
 8002200:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002202:	e002      	b.n	800220a <ADC_Enable+0x9a>
    {
      wait_loop_index--;
 8002204:	68bb      	ldr	r3, [r7, #8]
 8002206:	3b01      	subs	r3, #1
 8002208:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 800220a:	68bb      	ldr	r3, [r7, #8]
 800220c:	2b00      	cmp	r3, #0
 800220e:	d1f9      	bne.n	8002204 <ADC_Enable+0x94>
    }

    /* Get tick count */
    tickstart = HAL_GetTick();
 8002210:	f7ff fadc 	bl	80017cc <HAL_GetTick>
 8002214:	0003      	movs	r3, r0
 8002216:	60fb      	str	r3, [r7, #12]
    
    /* Wait for ADC effectively enabled */
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8002218:	e014      	b.n	8002244 <ADC_Enable+0xd4>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800221a:	f7ff fad7 	bl	80017cc <HAL_GetTick>
 800221e:	0002      	movs	r2, r0
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	1ad3      	subs	r3, r2, r3
 8002224:	2b02      	cmp	r3, #2
 8002226:	d90d      	bls.n	8002244 <ADC_Enable+0xd4>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800222c:	2210      	movs	r2, #16
 800222e:	431a      	orrs	r2, r3
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	645a      	str	r2, [r3, #68]	; 0x44
      
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002238:	2201      	movs	r2, #1
 800223a:	431a      	orrs	r2, r3
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	649a      	str	r2, [r3, #72]	; 0x48
      
        return HAL_ERROR;
 8002240:	2301      	movs	r3, #1
 8002242:	e007      	b.n	8002254 <ADC_Enable+0xe4>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	2201      	movs	r2, #1
 800224c:	4013      	ands	r3, r2
 800224e:	2b01      	cmp	r3, #1
 8002250:	d1e3      	bne.n	800221a <ADC_Enable+0xaa>
    }   
    
  }
   
  /* Return HAL status */
  return HAL_OK;
 8002252:	2300      	movs	r3, #0
}
 8002254:	0018      	movs	r0, r3
 8002256:	46bd      	mov	sp, r7
 8002258:	b004      	add	sp, #16
 800225a:	bd80      	pop	{r7, pc}
 800225c:	80000017 	.word	0x80000017
 8002260:	20000000 	.word	0x20000000
 8002264:	000f4240 	.word	0x000f4240

08002268 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8002268:	b580      	push	{r7, lr}
 800226a:	b084      	sub	sp, #16
 800226c:	af00      	add	r7, sp, #0
 800226e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002274:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800227a:	2250      	movs	r2, #80	; 0x50
 800227c:	4013      	ands	r3, r2
 800227e:	d140      	bne.n	8002302 <ADC_DMAConvCplt+0x9a>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002284:	2280      	movs	r2, #128	; 0x80
 8002286:	0092      	lsls	r2, r2, #2
 8002288:	431a      	orrs	r2, r3
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	68da      	ldr	r2, [r3, #12]
 8002294:	23c0      	movs	r3, #192	; 0xc0
 8002296:	011b      	lsls	r3, r3, #4
 8002298:	4013      	ands	r3, r2
 800229a:	d12d      	bne.n	80022f8 <ADC_DMAConvCplt+0x90>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	6a1b      	ldr	r3, [r3, #32]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d129      	bne.n	80022f8 <ADC_DMAConvCplt+0x90>
    {
      /* If End of Sequence is reached, disable interrupts */
      if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	2208      	movs	r2, #8
 80022ac:	4013      	ands	r3, r2
 80022ae:	2b08      	cmp	r3, #8
 80022b0:	d122      	bne.n	80022f8 <ADC_DMAConvCplt+0x90>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	689b      	ldr	r3, [r3, #8]
 80022b8:	2204      	movs	r2, #4
 80022ba:	4013      	ands	r3, r2
 80022bc:	d110      	bne.n	80022e0 <ADC_DMAConvCplt+0x78>
        {
          /* Disable ADC end of single conversion interrupt on group regular */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	685a      	ldr	r2, [r3, #4]
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	210c      	movs	r1, #12
 80022ca:	438a      	bics	r2, r1
 80022cc:	605a      	str	r2, [r3, #4]
          
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022d2:	4a11      	ldr	r2, [pc, #68]	; (8002318 <ADC_DMAConvCplt+0xb0>)
 80022d4:	4013      	ands	r3, r2
 80022d6:	2201      	movs	r2, #1
 80022d8:	431a      	orrs	r2, r3
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	645a      	str	r2, [r3, #68]	; 0x44
 80022de:	e00b      	b.n	80022f8 <ADC_DMAConvCplt+0x90>
                            HAL_ADC_STATE_READY);
        }
        else
        {
          /* Change ADC state to error state */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022e4:	2220      	movs	r2, #32
 80022e6:	431a      	orrs	r2, r3
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	645a      	str	r2, [r3, #68]	; 0x44
          
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80022f0:	2201      	movs	r2, #1
 80022f2:	431a      	orrs	r2, r3
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	649a      	str	r2, [r3, #72]	; 0x48
        }
      }
    }

    /* Conversion complete callback */
    HAL_ADC_ConvCpltCallback(hadc); 
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	0018      	movs	r0, r3
 80022fc:	f7fe ff90 	bl	8001220 <HAL_ADC_ConvCpltCallback>
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }

}
 8002300:	e005      	b.n	800230e <ADC_DMAConvCplt+0xa6>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002306:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002308:	687a      	ldr	r2, [r7, #4]
 800230a:	0010      	movs	r0, r2
 800230c:	4798      	blx	r3
}
 800230e:	46c0      	nop			; (mov r8, r8)
 8002310:	46bd      	mov	sp, r7
 8002312:	b004      	add	sp, #16
 8002314:	bd80      	pop	{r7, pc}
 8002316:	46c0      	nop			; (mov r8, r8)
 8002318:	fffffefe 	.word	0xfffffefe

0800231c <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 800231c:	b580      	push	{r7, lr}
 800231e:	b084      	sub	sp, #16
 8002320:	af00      	add	r7, sp, #0
 8002322:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002328:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
  HAL_ADC_ConvHalfCpltCallback(hadc); 
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	0018      	movs	r0, r3
 800232e:	f7ff fd53 	bl	8001dd8 <HAL_ADC_ConvHalfCpltCallback>
}
 8002332:	46c0      	nop			; (mov r8, r8)
 8002334:	46bd      	mov	sp, r7
 8002336:	b004      	add	sp, #16
 8002338:	bd80      	pop	{r7, pc}

0800233a <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 800233a:	b580      	push	{r7, lr}
 800233c:	b084      	sub	sp, #16
 800233e:	af00      	add	r7, sp, #0
 8002340:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002346:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800234c:	2240      	movs	r2, #64	; 0x40
 800234e:	431a      	orrs	r2, r3
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	645a      	str	r2, [r3, #68]	; 0x44
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002358:	2204      	movs	r2, #4
 800235a:	431a      	orrs	r2, r3
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	649a      	str	r2, [r3, #72]	; 0x48
  
  /* Error callback */
  HAL_ADC_ErrorCallback(hadc); 
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	0018      	movs	r0, r3
 8002364:	f7ff fd40 	bl	8001de8 <HAL_ADC_ErrorCallback>
}
 8002368:	46c0      	nop			; (mov r8, r8)
 800236a:	46bd      	mov	sp, r7
 800236c:	b004      	add	sp, #16
 800236e:	bd80      	pop	{r7, pc}

08002370 <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002370:	b580      	push	{r7, lr}
 8002372:	b082      	sub	sp, #8
 8002374:	af00      	add	r7, sp, #0
 8002376:	0002      	movs	r2, r0
 8002378:	1dfb      	adds	r3, r7, #7
 800237a:	701a      	strb	r2, [r3, #0]
  NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 800237c:	1dfb      	adds	r3, r7, #7
 800237e:	781b      	ldrb	r3, [r3, #0]
 8002380:	001a      	movs	r2, r3
 8002382:	231f      	movs	r3, #31
 8002384:	401a      	ands	r2, r3
 8002386:	4b04      	ldr	r3, [pc, #16]	; (8002398 <NVIC_EnableIRQ+0x28>)
 8002388:	2101      	movs	r1, #1
 800238a:	4091      	lsls	r1, r2
 800238c:	000a      	movs	r2, r1
 800238e:	601a      	str	r2, [r3, #0]
}
 8002390:	46c0      	nop			; (mov r8, r8)
 8002392:	46bd      	mov	sp, r7
 8002394:	b002      	add	sp, #8
 8002396:	bd80      	pop	{r7, pc}
 8002398:	e000e100 	.word	0xe000e100

0800239c <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800239c:	b590      	push	{r4, r7, lr}
 800239e:	b083      	sub	sp, #12
 80023a0:	af00      	add	r7, sp, #0
 80023a2:	0002      	movs	r2, r0
 80023a4:	6039      	str	r1, [r7, #0]
 80023a6:	1dfb      	adds	r3, r7, #7
 80023a8:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) < 0)
 80023aa:	1dfb      	adds	r3, r7, #7
 80023ac:	781b      	ldrb	r3, [r3, #0]
 80023ae:	2b7f      	cmp	r3, #127	; 0x7f
 80023b0:	d932      	bls.n	8002418 <NVIC_SetPriority+0x7c>
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80023b2:	4a2f      	ldr	r2, [pc, #188]	; (8002470 <NVIC_SetPriority+0xd4>)
 80023b4:	1dfb      	adds	r3, r7, #7
 80023b6:	781b      	ldrb	r3, [r3, #0]
 80023b8:	0019      	movs	r1, r3
 80023ba:	230f      	movs	r3, #15
 80023bc:	400b      	ands	r3, r1
 80023be:	3b08      	subs	r3, #8
 80023c0:	089b      	lsrs	r3, r3, #2
 80023c2:	3306      	adds	r3, #6
 80023c4:	009b      	lsls	r3, r3, #2
 80023c6:	18d3      	adds	r3, r2, r3
 80023c8:	3304      	adds	r3, #4
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	1dfa      	adds	r2, r7, #7
 80023ce:	7812      	ldrb	r2, [r2, #0]
 80023d0:	0011      	movs	r1, r2
 80023d2:	2203      	movs	r2, #3
 80023d4:	400a      	ands	r2, r1
 80023d6:	00d2      	lsls	r2, r2, #3
 80023d8:	21ff      	movs	r1, #255	; 0xff
 80023da:	4091      	lsls	r1, r2
 80023dc:	000a      	movs	r2, r1
 80023de:	43d2      	mvns	r2, r2
 80023e0:	401a      	ands	r2, r3
 80023e2:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80023e4:	683b      	ldr	r3, [r7, #0]
 80023e6:	019b      	lsls	r3, r3, #6
 80023e8:	22ff      	movs	r2, #255	; 0xff
 80023ea:	401a      	ands	r2, r3
 80023ec:	1dfb      	adds	r3, r7, #7
 80023ee:	781b      	ldrb	r3, [r3, #0]
 80023f0:	0018      	movs	r0, r3
 80023f2:	2303      	movs	r3, #3
 80023f4:	4003      	ands	r3, r0
 80023f6:	00db      	lsls	r3, r3, #3
 80023f8:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80023fa:	481d      	ldr	r0, [pc, #116]	; (8002470 <NVIC_SetPriority+0xd4>)
 80023fc:	1dfb      	adds	r3, r7, #7
 80023fe:	781b      	ldrb	r3, [r3, #0]
 8002400:	001c      	movs	r4, r3
 8002402:	230f      	movs	r3, #15
 8002404:	4023      	ands	r3, r4
 8002406:	3b08      	subs	r3, #8
 8002408:	089b      	lsrs	r3, r3, #2
 800240a:	430a      	orrs	r2, r1
 800240c:	3306      	adds	r3, #6
 800240e:	009b      	lsls	r3, r3, #2
 8002410:	18c3      	adds	r3, r0, r3
 8002412:	3304      	adds	r3, #4
 8002414:	601a      	str	r2, [r3, #0]
  else
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8002416:	e027      	b.n	8002468 <NVIC_SetPriority+0xcc>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002418:	4a16      	ldr	r2, [pc, #88]	; (8002474 <NVIC_SetPriority+0xd8>)
 800241a:	1dfb      	adds	r3, r7, #7
 800241c:	781b      	ldrb	r3, [r3, #0]
 800241e:	b25b      	sxtb	r3, r3
 8002420:	089b      	lsrs	r3, r3, #2
 8002422:	33c0      	adds	r3, #192	; 0xc0
 8002424:	009b      	lsls	r3, r3, #2
 8002426:	589b      	ldr	r3, [r3, r2]
 8002428:	1dfa      	adds	r2, r7, #7
 800242a:	7812      	ldrb	r2, [r2, #0]
 800242c:	0011      	movs	r1, r2
 800242e:	2203      	movs	r2, #3
 8002430:	400a      	ands	r2, r1
 8002432:	00d2      	lsls	r2, r2, #3
 8002434:	21ff      	movs	r1, #255	; 0xff
 8002436:	4091      	lsls	r1, r2
 8002438:	000a      	movs	r2, r1
 800243a:	43d2      	mvns	r2, r2
 800243c:	401a      	ands	r2, r3
 800243e:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002440:	683b      	ldr	r3, [r7, #0]
 8002442:	019b      	lsls	r3, r3, #6
 8002444:	22ff      	movs	r2, #255	; 0xff
 8002446:	401a      	ands	r2, r3
 8002448:	1dfb      	adds	r3, r7, #7
 800244a:	781b      	ldrb	r3, [r3, #0]
 800244c:	0018      	movs	r0, r3
 800244e:	2303      	movs	r3, #3
 8002450:	4003      	ands	r3, r0
 8002452:	00db      	lsls	r3, r3, #3
 8002454:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002456:	4807      	ldr	r0, [pc, #28]	; (8002474 <NVIC_SetPriority+0xd8>)
 8002458:	1dfb      	adds	r3, r7, #7
 800245a:	781b      	ldrb	r3, [r3, #0]
 800245c:	b25b      	sxtb	r3, r3
 800245e:	089b      	lsrs	r3, r3, #2
 8002460:	430a      	orrs	r2, r1
 8002462:	33c0      	adds	r3, #192	; 0xc0
 8002464:	009b      	lsls	r3, r3, #2
 8002466:	501a      	str	r2, [r3, r0]
}
 8002468:	46c0      	nop			; (mov r8, r8)
 800246a:	46bd      	mov	sp, r7
 800246c:	b003      	add	sp, #12
 800246e:	bd90      	pop	{r4, r7, pc}
 8002470:	e000ed00 	.word	0xe000ed00
 8002474:	e000e100 	.word	0xe000e100

08002478 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002478:	b580      	push	{r7, lr}
 800247a:	b082      	sub	sp, #8
 800247c:	af00      	add	r7, sp, #0
 800247e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	3b01      	subs	r3, #1
 8002484:	4a0c      	ldr	r2, [pc, #48]	; (80024b8 <SysTick_Config+0x40>)
 8002486:	4293      	cmp	r3, r2
 8002488:	d901      	bls.n	800248e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800248a:	2301      	movs	r3, #1
 800248c:	e010      	b.n	80024b0 <SysTick_Config+0x38>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800248e:	4b0b      	ldr	r3, [pc, #44]	; (80024bc <SysTick_Config+0x44>)
 8002490:	687a      	ldr	r2, [r7, #4]
 8002492:	3a01      	subs	r2, #1
 8002494:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002496:	2301      	movs	r3, #1
 8002498:	425b      	negs	r3, r3
 800249a:	2103      	movs	r1, #3
 800249c:	0018      	movs	r0, r3
 800249e:	f7ff ff7d 	bl	800239c <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80024a2:	4b06      	ldr	r3, [pc, #24]	; (80024bc <SysTick_Config+0x44>)
 80024a4:	2200      	movs	r2, #0
 80024a6:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80024a8:	4b04      	ldr	r3, [pc, #16]	; (80024bc <SysTick_Config+0x44>)
 80024aa:	2207      	movs	r2, #7
 80024ac:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80024ae:	2300      	movs	r3, #0
}
 80024b0:	0018      	movs	r0, r3
 80024b2:	46bd      	mov	sp, r7
 80024b4:	b002      	add	sp, #8
 80024b6:	bd80      	pop	{r7, pc}
 80024b8:	00ffffff 	.word	0x00ffffff
 80024bc:	e000e010 	.word	0xe000e010

080024c0 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80024c0:	b580      	push	{r7, lr}
 80024c2:	b084      	sub	sp, #16
 80024c4:	af00      	add	r7, sp, #0
 80024c6:	60b9      	str	r1, [r7, #8]
 80024c8:	607a      	str	r2, [r7, #4]
 80024ca:	230f      	movs	r3, #15
 80024cc:	18fb      	adds	r3, r7, r3
 80024ce:	1c02      	adds	r2, r0, #0
 80024d0:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 80024d2:	68bb      	ldr	r3, [r7, #8]
 80024d4:	2b03      	cmp	r3, #3
 80024d6:	d904      	bls.n	80024e2 <HAL_NVIC_SetPriority+0x22>
 80024d8:	4b08      	ldr	r3, [pc, #32]	; (80024fc <HAL_NVIC_SetPriority+0x3c>)
 80024da:	219b      	movs	r1, #155	; 0x9b
 80024dc:	0018      	movs	r0, r3
 80024de:	f7fe fa38 	bl	8000952 <assert_failed>
  NVIC_SetPriority(IRQn,PreemptPriority);
 80024e2:	68ba      	ldr	r2, [r7, #8]
 80024e4:	230f      	movs	r3, #15
 80024e6:	18fb      	adds	r3, r7, r3
 80024e8:	781b      	ldrb	r3, [r3, #0]
 80024ea:	b25b      	sxtb	r3, r3
 80024ec:	0011      	movs	r1, r2
 80024ee:	0018      	movs	r0, r3
 80024f0:	f7ff ff54 	bl	800239c <NVIC_SetPriority>
}
 80024f4:	46c0      	nop			; (mov r8, r8)
 80024f6:	46bd      	mov	sp, r7
 80024f8:	b004      	add	sp, #16
 80024fa:	bd80      	pop	{r7, pc}
 80024fc:	08006f68 	.word	0x08006f68

08002500 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002500:	b580      	push	{r7, lr}
 8002502:	b082      	sub	sp, #8
 8002504:	af00      	add	r7, sp, #0
 8002506:	0002      	movs	r2, r0
 8002508:	1dfb      	adds	r3, r7, #7
 800250a:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 800250c:	1dfb      	adds	r3, r7, #7
 800250e:	781b      	ldrb	r3, [r3, #0]
 8002510:	2b7f      	cmp	r3, #127	; 0x7f
 8002512:	d904      	bls.n	800251e <HAL_NVIC_EnableIRQ+0x1e>
 8002514:	4b07      	ldr	r3, [pc, #28]	; (8002534 <HAL_NVIC_EnableIRQ+0x34>)
 8002516:	21ab      	movs	r1, #171	; 0xab
 8002518:	0018      	movs	r0, r3
 800251a:	f7fe fa1a 	bl	8000952 <assert_failed>
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800251e:	1dfb      	adds	r3, r7, #7
 8002520:	781b      	ldrb	r3, [r3, #0]
 8002522:	b25b      	sxtb	r3, r3
 8002524:	0018      	movs	r0, r3
 8002526:	f7ff ff23 	bl	8002370 <NVIC_EnableIRQ>
}
 800252a:	46c0      	nop			; (mov r8, r8)
 800252c:	46bd      	mov	sp, r7
 800252e:	b002      	add	sp, #8
 8002530:	bd80      	pop	{r7, pc}
 8002532:	46c0      	nop			; (mov r8, r8)
 8002534:	08006f68 	.word	0x08006f68

08002538 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002538:	b580      	push	{r7, lr}
 800253a:	b082      	sub	sp, #8
 800253c:	af00      	add	r7, sp, #0
 800253e:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	0018      	movs	r0, r3
 8002544:	f7ff ff98 	bl	8002478 <SysTick_Config>
 8002548:	0003      	movs	r3, r0
}
 800254a:	0018      	movs	r0, r3
 800254c:	46bd      	mov	sp, r7
 800254e:	b002      	add	sp, #8
 8002550:	bd80      	pop	{r7, pc}
	...

08002554 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and initialize the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8002554:	b580      	push	{r7, lr}
 8002556:	b082      	sub	sp, #8
 8002558:	af00      	add	r7, sp, #0
 800255a:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if(hcrc == NULL)
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	2b00      	cmp	r3, #0
 8002560:	d101      	bne.n	8002566 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8002562:	2301      	movs	r3, #1
 8002564:	e08b      	b.n	800267e <HAL_CRC_Init+0x12a>
  }
  
  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	4a47      	ldr	r2, [pc, #284]	; (8002688 <HAL_CRC_Init+0x134>)
 800256c:	4293      	cmp	r3, r2
 800256e:	d004      	beq.n	800257a <HAL_CRC_Init+0x26>
 8002570:	4b46      	ldr	r3, [pc, #280]	; (800268c <HAL_CRC_Init+0x138>)
 8002572:	2180      	movs	r1, #128	; 0x80
 8002574:	0018      	movs	r0, r3
 8002576:	f7fe f9ec 	bl	8000952 <assert_failed>

  if(hcrc->State == HAL_CRC_STATE_RESET)
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	7f5b      	ldrb	r3, [r3, #29]
 800257e:	b2db      	uxtb	r3, r3
 8002580:	2b00      	cmp	r3, #0
 8002582:	d106      	bne.n	8002592 <HAL_CRC_Init+0x3e>
  {   
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	2200      	movs	r2, #0
 8002588:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	0018      	movs	r0, r3
 800258e:	f7fd ff6d 	bl	800046c <HAL_CRC_MspInit>
  }
  
  hcrc->State = HAL_CRC_STATE_BUSY; 
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	2202      	movs	r2, #2
 8002596:	775a      	strb	r2, [r3, #29]
  /* Extended initialization: if programmable polynomial feature is 
     applicable to device, set default or non-default generating 
     polynomial according to hcrc->Init parameters.
     If feature is non-applicable to device in use, HAL_CRCEx_Init straight 
     away reports HAL_OK. */
  if (HAL_CRCEx_Init(hcrc) != HAL_OK)
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	0018      	movs	r0, r3
 800259c:	f000 f878 	bl	8002690 <HAL_CRCEx_Init>
 80025a0:	1e03      	subs	r3, r0, #0
 80025a2:	d001      	beq.n	80025a8 <HAL_CRC_Init+0x54>
  {
    return HAL_ERROR;
 80025a4:	2301      	movs	r3, #1
 80025a6:	e06a      	b.n	800267e <HAL_CRC_Init+0x12a>
  }
  
  /* check whether or not non-default CRC initial value has been 
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	795b      	ldrb	r3, [r3, #5]
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d008      	beq.n	80025c2 <HAL_CRC_Init+0x6e>
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	795b      	ldrb	r3, [r3, #5]
 80025b4:	2b01      	cmp	r3, #1
 80025b6:	d004      	beq.n	80025c2 <HAL_CRC_Init+0x6e>
 80025b8:	4b34      	ldr	r3, [pc, #208]	; (800268c <HAL_CRC_Init+0x138>)
 80025ba:	2199      	movs	r1, #153	; 0x99
 80025bc:	0018      	movs	r0, r3
 80025be:	f7fe f9c8 	bl	8000952 <assert_failed>
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	795b      	ldrb	r3, [r3, #5]
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d105      	bne.n	80025d6 <HAL_CRC_Init+0x82>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);  
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	2201      	movs	r2, #1
 80025d0:	4252      	negs	r2, r2
 80025d2:	611a      	str	r2, [r3, #16]
 80025d4:	e004      	b.n	80025e0 <HAL_CRC_Init+0x8c>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	687a      	ldr	r2, [r7, #4]
 80025dc:	6912      	ldr	r2, [r2, #16]
 80025de:	611a      	str	r2, [r3, #16]
  }
  

  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode)); 
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	695b      	ldr	r3, [r3, #20]
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d010      	beq.n	800260a <HAL_CRC_Init+0xb6>
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	695b      	ldr	r3, [r3, #20]
 80025ec:	2b20      	cmp	r3, #32
 80025ee:	d00c      	beq.n	800260a <HAL_CRC_Init+0xb6>
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	695b      	ldr	r3, [r3, #20]
 80025f4:	2b40      	cmp	r3, #64	; 0x40
 80025f6:	d008      	beq.n	800260a <HAL_CRC_Init+0xb6>
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	695b      	ldr	r3, [r3, #20]
 80025fc:	2b60      	cmp	r3, #96	; 0x60
 80025fe:	d004      	beq.n	800260a <HAL_CRC_Init+0xb6>
 8002600:	4b22      	ldr	r3, [pc, #136]	; (800268c <HAL_CRC_Init+0x138>)
 8002602:	21a5      	movs	r1, #165	; 0xa5
 8002604:	0018      	movs	r0, r3
 8002606:	f7fe f9a4 	bl	8000952 <assert_failed>
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode); 
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	689b      	ldr	r3, [r3, #8]
 8002610:	2260      	movs	r2, #96	; 0x60
 8002612:	4393      	bics	r3, r2
 8002614:	0019      	movs	r1, r3
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	695a      	ldr	r2, [r3, #20]
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	430a      	orrs	r2, r1
 8002620:	609a      	str	r2, [r3, #8]
  
  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode)); 
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	699b      	ldr	r3, [r3, #24]
 8002626:	2b00      	cmp	r3, #0
 8002628:	d008      	beq.n	800263c <HAL_CRC_Init+0xe8>
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	699b      	ldr	r3, [r3, #24]
 800262e:	2b80      	cmp	r3, #128	; 0x80
 8002630:	d004      	beq.n	800263c <HAL_CRC_Init+0xe8>
 8002632:	4b16      	ldr	r3, [pc, #88]	; (800268c <HAL_CRC_Init+0x138>)
 8002634:	21a9      	movs	r1, #169	; 0xa9
 8002636:	0018      	movs	r0, r3
 8002638:	f7fe f98b 	bl	8000952 <assert_failed>
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);  
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	689b      	ldr	r3, [r3, #8]
 8002642:	2280      	movs	r2, #128	; 0x80
 8002644:	4393      	bics	r3, r2
 8002646:	0019      	movs	r1, r3
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	699a      	ldr	r2, [r3, #24]
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	430a      	orrs	r2, r1
 8002652:	609a      	str	r2, [r3, #8]
  
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	6a1b      	ldr	r3, [r3, #32]
 8002658:	2b01      	cmp	r3, #1
 800265a:	d00c      	beq.n	8002676 <HAL_CRC_Init+0x122>
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	6a1b      	ldr	r3, [r3, #32]
 8002660:	2b02      	cmp	r3, #2
 8002662:	d008      	beq.n	8002676 <HAL_CRC_Init+0x122>
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	6a1b      	ldr	r3, [r3, #32]
 8002668:	2b03      	cmp	r3, #3
 800266a:	d004      	beq.n	8002676 <HAL_CRC_Init+0x122>
 800266c:	4b07      	ldr	r3, [pc, #28]	; (800268c <HAL_CRC_Init+0x138>)
 800266e:	21ae      	movs	r1, #174	; 0xae
 8002670:	0018      	movs	r0, r3
 8002672:	f7fe f96e 	bl	8000952 <assert_failed>

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	2201      	movs	r2, #1
 800267a:	775a      	strb	r2, [r3, #29]
  
  /* Return function status */
  return HAL_OK;
 800267c:	2300      	movs	r3, #0
}
 800267e:	0018      	movs	r0, r3
 8002680:	46bd      	mov	sp, r7
 8002682:	b002      	add	sp, #8
 8002684:	bd80      	pop	{r7, pc}
 8002686:	46c0      	nop			; (mov r8, r8)
 8002688:	40023000 	.word	0x40023000
 800268c:	08006fa4 	.word	0x08006fa4

08002690 <HAL_CRCEx_Init>:
  * @brief  Extended initialization to set generating polynomial
  * @param  hcrc CRC handle             
  * @retval HAL status
  */             
HAL_StatusTypeDef HAL_CRCEx_Init(CRC_HandleTypeDef *hcrc)
{
 8002690:	b580      	push	{r7, lr}
 8002692:	b082      	sub	sp, #8
 8002694:	af00      	add	r7, sp, #0
 8002696:	6078      	str	r0, [r7, #4]
      return HAL_ERROR;
    }
  }
#endif /* defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F091xC) || defined (STM32F098xx) */    

   return HAL_OK;
 8002698:	2300      	movs	r3, #0
}
 800269a:	0018      	movs	r0, r3
 800269c:	46bd      	mov	sp, r7
 800269e:	b002      	add	sp, #8
 80026a0:	bd80      	pop	{r7, pc}
	...

080026a4 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef* hdac)
{ 
 80026a4:	b580      	push	{r7, lr}
 80026a6:	b082      	sub	sp, #8
 80026a8:	af00      	add	r7, sp, #0
 80026aa:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if(hdac == NULL)
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d101      	bne.n	80026b6 <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 80026b2:	2301      	movs	r3, #1
 80026b4:	e021      	b.n	80026fa <HAL_DAC_Init+0x56>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	4a12      	ldr	r2, [pc, #72]	; (8002704 <HAL_DAC_Init+0x60>)
 80026bc:	4293      	cmp	r3, r2
 80026be:	d006      	beq.n	80026ce <HAL_DAC_Init+0x2a>
 80026c0:	2387      	movs	r3, #135	; 0x87
 80026c2:	005a      	lsls	r2, r3, #1
 80026c4:	4b10      	ldr	r3, [pc, #64]	; (8002708 <HAL_DAC_Init+0x64>)
 80026c6:	0011      	movs	r1, r2
 80026c8:	0018      	movs	r0, r3
 80026ca:	f7fe f942 	bl	8000952 <assert_failed>
  
  if(hdac->State == HAL_DAC_STATE_RESET)
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	791b      	ldrb	r3, [r3, #4]
 80026d2:	b2db      	uxtb	r3, r3
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d106      	bne.n	80026e6 <HAL_DAC_Init+0x42>
  {  
    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	2200      	movs	r2, #0
 80026dc:	715a      	strb	r2, [r3, #5]

    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	0018      	movs	r0, r3
 80026e2:	f7fd ff0f 	bl	8000504 <HAL_DAC_MspInit>
  }
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	2202      	movs	r2, #2
 80026ea:	711a      	strb	r2, [r3, #4]
  
  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	2200      	movs	r2, #0
 80026f0:	611a      	str	r2, [r3, #16]
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	2201      	movs	r2, #1
 80026f6:	711a      	strb	r2, [r3, #4]
  
  /* Return function status */
  return HAL_OK;
 80026f8:	2300      	movs	r3, #0
}
 80026fa:	0018      	movs	r0, r3
 80026fc:	46bd      	mov	sp, r7
 80026fe:	b002      	add	sp, #8
 8002700:	bd80      	pop	{r7, pc}
 8002702:	46c0      	nop			; (mov r8, r8)
 8002704:	40007400 	.word	0x40007400
 8002708:	08006fdc 	.word	0x08006fdc

0800270c <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef* hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{  
 800270c:	b580      	push	{r7, lr}
 800270e:	b086      	sub	sp, #24
 8002710:	af00      	add	r7, sp, #0
 8002712:	60f8      	str	r0, [r7, #12]
 8002714:	60b9      	str	r1, [r7, #8]
 8002716:	607a      	str	r2, [r7, #4]
 8002718:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0;
 800271a:	2300      	movs	r3, #0
 800271c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
 800271e:	68bb      	ldr	r3, [r7, #8]
 8002720:	2b00      	cmp	r3, #0
 8002722:	d005      	beq.n	8002730 <HAL_DAC_SetValue+0x24>
 8002724:	4a1c      	ldr	r2, [pc, #112]	; (8002798 <HAL_DAC_SetValue+0x8c>)
 8002726:	4b1d      	ldr	r3, [pc, #116]	; (800279c <HAL_DAC_SetValue+0x90>)
 8002728:	0011      	movs	r1, r2
 800272a:	0018      	movs	r0, r3
 800272c:	f7fe f911 	bl	8000952 <assert_failed>
  assert_param(IS_DAC_ALIGN(Alignment));
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	2b00      	cmp	r3, #0
 8002734:	d00b      	beq.n	800274e <HAL_DAC_SetValue+0x42>
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	2b04      	cmp	r3, #4
 800273a:	d008      	beq.n	800274e <HAL_DAC_SetValue+0x42>
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	2b08      	cmp	r3, #8
 8002740:	d005      	beq.n	800274e <HAL_DAC_SetValue+0x42>
 8002742:	4a17      	ldr	r2, [pc, #92]	; (80027a0 <HAL_DAC_SetValue+0x94>)
 8002744:	4b15      	ldr	r3, [pc, #84]	; (800279c <HAL_DAC_SetValue+0x90>)
 8002746:	0011      	movs	r1, r2
 8002748:	0018      	movs	r0, r3
 800274a:	f7fe f902 	bl	8000952 <assert_failed>
  assert_param(IS_DAC_DATA(Data));
 800274e:	683b      	ldr	r3, [r7, #0]
 8002750:	4a14      	ldr	r2, [pc, #80]	; (80027a4 <HAL_DAC_SetValue+0x98>)
 8002752:	4293      	cmp	r3, r2
 8002754:	d906      	bls.n	8002764 <HAL_DAC_SetValue+0x58>
 8002756:	238e      	movs	r3, #142	; 0x8e
 8002758:	009a      	lsls	r2, r3, #2
 800275a:	4b10      	ldr	r3, [pc, #64]	; (800279c <HAL_DAC_SetValue+0x90>)
 800275c:	0011      	movs	r1, r2
 800275e:	0018      	movs	r0, r3
 8002760:	f7fe f8f7 	bl	8000952 <assert_failed>
  
  tmp = (uint32_t)hdac->Instance; 
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	617b      	str	r3, [r7, #20]
  if(Channel == DAC_CHANNEL_1)
 800276a:	68bb      	ldr	r3, [r7, #8]
 800276c:	2b00      	cmp	r3, #0
 800276e:	d105      	bne.n	800277c <HAL_DAC_SetValue+0x70>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 8002770:	697a      	ldr	r2, [r7, #20]
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	18d3      	adds	r3, r2, r3
 8002776:	3308      	adds	r3, #8
 8002778:	617b      	str	r3, [r7, #20]
 800277a:	e004      	b.n	8002786 <HAL_DAC_SetValue+0x7a>
  }
  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 800277c:	697a      	ldr	r2, [r7, #20]
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	18d3      	adds	r3, r2, r3
 8002782:	3314      	adds	r3, #20
 8002784:	617b      	str	r3, [r7, #20]
  }

  /* Set the DAC channel1 selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8002786:	697b      	ldr	r3, [r7, #20]
 8002788:	683a      	ldr	r2, [r7, #0]
 800278a:	601a      	str	r2, [r3, #0]
  
  /* Return function status */
  return HAL_OK;
 800278c:	2300      	movs	r3, #0
}
 800278e:	0018      	movs	r0, r3
 8002790:	46bd      	mov	sp, r7
 8002792:	b006      	add	sp, #24
 8002794:	bd80      	pop	{r7, pc}
 8002796:	46c0      	nop			; (mov r8, r8)
 8002798:	00000236 	.word	0x00000236
 800279c:	08006fdc 	.word	0x08006fdc
 80027a0:	00000237 	.word	0x00000237
 80027a4:	0000fff0 	.word	0x0000fff0

080027a8 <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 80027a8:	b580      	push	{r7, lr}
 80027aa:	b082      	sub	sp, #8
 80027ac:	af00      	add	r7, sp, #0
 80027ae:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh1 could be implemented in the user file
   */
}
 80027b0:	46c0      	nop			; (mov r8, r8)
 80027b2:	46bd      	mov	sp, r7
 80027b4:	b002      	add	sp, #8
 80027b6:	bd80      	pop	{r7, pc}

080027b8 <HAL_DAC_ConfigChannel>:
  *          This parameter can be one of the following values:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef* hdac, DAC_ChannelConfTypeDef* sConfig, uint32_t Channel)
{
 80027b8:	b580      	push	{r7, lr}
 80027ba:	b086      	sub	sp, #24
 80027bc:	af00      	add	r7, sp, #0
 80027be:	60f8      	str	r0, [r7, #12]
 80027c0:	60b9      	str	r1, [r7, #8]
 80027c2:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1 = 0U, tmpreg2 = 0U;
 80027c4:	2300      	movs	r3, #0
 80027c6:	617b      	str	r3, [r7, #20]
 80027c8:	2300      	movs	r3, #0
 80027ca:	613b      	str	r3, [r7, #16]

  /* Check the DAC parameters */
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
 80027cc:	68bb      	ldr	r3, [r7, #8]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d01c      	beq.n	800280e <HAL_DAC_ConfigChannel+0x56>
 80027d4:	68bb      	ldr	r3, [r7, #8]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	2b24      	cmp	r3, #36	; 0x24
 80027da:	d018      	beq.n	800280e <HAL_DAC_ConfigChannel+0x56>
 80027dc:	68bb      	ldr	r3, [r7, #8]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	2b0c      	cmp	r3, #12
 80027e2:	d014      	beq.n	800280e <HAL_DAC_ConfigChannel+0x56>
 80027e4:	68bb      	ldr	r3, [r7, #8]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	2b04      	cmp	r3, #4
 80027ea:	d010      	beq.n	800280e <HAL_DAC_ConfigChannel+0x56>
 80027ec:	68bb      	ldr	r3, [r7, #8]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	2b1c      	cmp	r3, #28
 80027f2:	d00c      	beq.n	800280e <HAL_DAC_ConfigChannel+0x56>
 80027f4:	68bb      	ldr	r3, [r7, #8]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	2b34      	cmp	r3, #52	; 0x34
 80027fa:	d008      	beq.n	800280e <HAL_DAC_ConfigChannel+0x56>
 80027fc:	68bb      	ldr	r3, [r7, #8]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	2b3c      	cmp	r3, #60	; 0x3c
 8002802:	d004      	beq.n	800280e <HAL_DAC_ConfigChannel+0x56>
 8002804:	4b37      	ldr	r3, [pc, #220]	; (80028e4 <HAL_DAC_ConfigChannel+0x12c>)
 8002806:	21b9      	movs	r1, #185	; 0xb9
 8002808:	0018      	movs	r0, r3
 800280a:	f7fe f8a2 	bl	8000952 <assert_failed>
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
 800280e:	68bb      	ldr	r3, [r7, #8]
 8002810:	685b      	ldr	r3, [r3, #4]
 8002812:	2b00      	cmp	r3, #0
 8002814:	d008      	beq.n	8002828 <HAL_DAC_ConfigChannel+0x70>
 8002816:	68bb      	ldr	r3, [r7, #8]
 8002818:	685b      	ldr	r3, [r3, #4]
 800281a:	2b02      	cmp	r3, #2
 800281c:	d004      	beq.n	8002828 <HAL_DAC_ConfigChannel+0x70>
 800281e:	4b31      	ldr	r3, [pc, #196]	; (80028e4 <HAL_DAC_ConfigChannel+0x12c>)
 8002820:	21ba      	movs	r1, #186	; 0xba
 8002822:	0018      	movs	r0, r3
 8002824:	f7fe f895 	bl	8000952 <assert_failed>
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
 8002828:	68bb      	ldr	r3, [r7, #8]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	2b00      	cmp	r3, #0
 800282e:	d01c      	beq.n	800286a <HAL_DAC_ConfigChannel+0xb2>
 8002830:	68bb      	ldr	r3, [r7, #8]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	2b24      	cmp	r3, #36	; 0x24
 8002836:	d018      	beq.n	800286a <HAL_DAC_ConfigChannel+0xb2>
 8002838:	68bb      	ldr	r3, [r7, #8]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	2b0c      	cmp	r3, #12
 800283e:	d014      	beq.n	800286a <HAL_DAC_ConfigChannel+0xb2>
 8002840:	68bb      	ldr	r3, [r7, #8]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	2b04      	cmp	r3, #4
 8002846:	d010      	beq.n	800286a <HAL_DAC_ConfigChannel+0xb2>
 8002848:	68bb      	ldr	r3, [r7, #8]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	2b1c      	cmp	r3, #28
 800284e:	d00c      	beq.n	800286a <HAL_DAC_ConfigChannel+0xb2>
 8002850:	68bb      	ldr	r3, [r7, #8]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	2b34      	cmp	r3, #52	; 0x34
 8002856:	d008      	beq.n	800286a <HAL_DAC_ConfigChannel+0xb2>
 8002858:	68bb      	ldr	r3, [r7, #8]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	2b3c      	cmp	r3, #60	; 0x3c
 800285e:	d004      	beq.n	800286a <HAL_DAC_ConfigChannel+0xb2>
 8002860:	4b20      	ldr	r3, [pc, #128]	; (80028e4 <HAL_DAC_ConfigChannel+0x12c>)
 8002862:	21bb      	movs	r1, #187	; 0xbb
 8002864:	0018      	movs	r0, r3
 8002866:	f7fe f874 	bl	8000952 <assert_failed>
  assert_param(IS_DAC_CHANNEL(Channel));
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	2b00      	cmp	r3, #0
 800286e:	d004      	beq.n	800287a <HAL_DAC_ConfigChannel+0xc2>
 8002870:	4b1c      	ldr	r3, [pc, #112]	; (80028e4 <HAL_DAC_ConfigChannel+0x12c>)
 8002872:	21bc      	movs	r1, #188	; 0xbc
 8002874:	0018      	movs	r0, r3
 8002876:	f7fe f86c 	bl	8000952 <assert_failed>
  
  /* Process locked */
  __HAL_LOCK(hdac);
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	795b      	ldrb	r3, [r3, #5]
 800287e:	2b01      	cmp	r3, #1
 8002880:	d101      	bne.n	8002886 <HAL_DAC_ConfigChannel+0xce>
 8002882:	2302      	movs	r3, #2
 8002884:	e029      	b.n	80028da <HAL_DAC_ConfigChannel+0x122>
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	2201      	movs	r2, #1
 800288a:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	2202      	movs	r2, #2
 8002890:	711a      	strb	r2, [r3, #4]
  
  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << Channel); 
 800289a:	223e      	movs	r2, #62	; 0x3e
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	409a      	lsls	r2, r3
 80028a0:	0013      	movs	r3, r2
 80028a2:	43da      	mvns	r2, r3
 80028a4:	697b      	ldr	r3, [r7, #20]
 80028a6:	4013      	ands	r3, r2
 80028a8:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */   
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 80028aa:	68bb      	ldr	r3, [r7, #8]
 80028ac:	681a      	ldr	r2, [r3, #0]
 80028ae:	68bb      	ldr	r3, [r7, #8]
 80028b0:	685b      	ldr	r3, [r3, #4]
 80028b2:	4313      	orrs	r3, r2
 80028b4:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << Channel;
 80028b6:	693a      	ldr	r2, [r7, #16]
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	409a      	lsls	r2, r3
 80028bc:	0013      	movs	r3, r2
 80028be:	697a      	ldr	r2, [r7, #20]
 80028c0:	4313      	orrs	r3, r2
 80028c2:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	697a      	ldr	r2, [r7, #20]
 80028ca:	601a      	str	r2, [r3, #0]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	2201      	movs	r2, #1
 80028d0:	711a      	strb	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	2200      	movs	r2, #0
 80028d6:	715a      	strb	r2, [r3, #5]
  
  /* Return function status */
  return HAL_OK;
 80028d8:	2300      	movs	r3, #0
}
 80028da:	0018      	movs	r0, r3
 80028dc:	46bd      	mov	sp, r7
 80028de:	b006      	add	sp, #24
 80028e0:	bd80      	pop	{r7, pc}
 80028e2:	46c0      	nop			; (mov r8, r8)
 80028e4:	08007014 	.word	0x08007014

080028e8 <HAL_DAC_Start>:
       /* STM32F091xC  STM32F098xx */

#if defined (STM32F051x8) || defined (STM32F058xx)

HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef* hdac, uint32_t Channel)
{
 80028e8:	b580      	push	{r7, lr}
 80028ea:	b082      	sub	sp, #8
 80028ec:	af00      	add	r7, sp, #0
 80028ee:	6078      	str	r0, [r7, #4]
 80028f0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
 80028f2:	683b      	ldr	r3, [r7, #0]
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d006      	beq.n	8002906 <HAL_DAC_Start+0x1e>
 80028f8:	23f0      	movs	r3, #240	; 0xf0
 80028fa:	005a      	lsls	r2, r3, #1
 80028fc:	4b1b      	ldr	r3, [pc, #108]	; (800296c <HAL_DAC_Start+0x84>)
 80028fe:	0011      	movs	r1, r2
 8002900:	0018      	movs	r0, r3
 8002902:	f7fe f826 	bl	8000952 <assert_failed>
  
  /* Process locked */
  __HAL_LOCK(hdac);
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	795b      	ldrb	r3, [r3, #5]
 800290a:	2b01      	cmp	r3, #1
 800290c:	d101      	bne.n	8002912 <HAL_DAC_Start+0x2a>
 800290e:	2302      	movs	r3, #2
 8002910:	e028      	b.n	8002964 <HAL_DAC_Start+0x7c>
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	2201      	movs	r2, #1
 8002916:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	2202      	movs	r2, #2
 800291c:	711a      	strb	r2, [r3, #4]
  
  /* Enable the Peripharal */
  __HAL_DAC_ENABLE(hdac, Channel);
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	6819      	ldr	r1, [r3, #0]
 8002924:	2201      	movs	r2, #1
 8002926:	683b      	ldr	r3, [r7, #0]
 8002928:	409a      	lsls	r2, r3
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	430a      	orrs	r2, r1
 8002930:	601a      	str	r2, [r3, #0]
  
  if(Channel == DAC_CHANNEL_1)
 8002932:	683b      	ldr	r3, [r7, #0]
 8002934:	2b00      	cmp	r3, #0
 8002936:	d10e      	bne.n	8002956 <HAL_DAC_Start+0x6e>
  {
    /* Check if software trigger enabled */
    if((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == (DAC_CR_TEN1 | DAC_CR_TSEL1))
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	223c      	movs	r2, #60	; 0x3c
 8002940:	4013      	ands	r3, r2
 8002942:	2b3c      	cmp	r3, #60	; 0x3c
 8002944:	d107      	bne.n	8002956 <HAL_DAC_Start+0x6e>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	685a      	ldr	r2, [r3, #4]
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	2101      	movs	r1, #1
 8002952:	430a      	orrs	r2, r1
 8002954:	605a      	str	r2, [r3, #4]
    }
  }
 
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	2201      	movs	r2, #1
 800295a:	711a      	strb	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	2200      	movs	r2, #0
 8002960:	715a      	strb	r2, [r3, #5]
    
  /* Return function status */
  return HAL_OK;
 8002962:	2300      	movs	r3, #0
}
 8002964:	0018      	movs	r0, r3
 8002966:	46bd      	mov	sp, r7
 8002968:	b002      	add	sp, #8
 800296a:	bd80      	pop	{r7, pc}
 800296c:	08007014 	.word	0x08007014

08002970 <HAL_DAC_IRQHandler>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
void HAL_DAC_IRQHandler(DAC_HandleTypeDef* hdac)
{
 8002970:	b580      	push	{r7, lr}
 8002972:	b082      	sub	sp, #8
 8002974:	af00      	add	r7, sp, #0
 8002976:	6078      	str	r0, [r7, #4]
  if(__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR1))
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	681a      	ldr	r2, [r3, #0]
 800297e:	2380      	movs	r3, #128	; 0x80
 8002980:	019b      	lsls	r3, r3, #6
 8002982:	401a      	ands	r2, r3
 8002984:	2380      	movs	r3, #128	; 0x80
 8002986:	019b      	lsls	r3, r3, #6
 8002988:	429a      	cmp	r2, r3
 800298a:	d123      	bne.n	80029d4 <HAL_DAC_IRQHandler+0x64>
  { 
  /* Check Overrun flag */
  if(__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR1))
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002992:	2380      	movs	r3, #128	; 0x80
 8002994:	019b      	lsls	r3, r3, #6
 8002996:	401a      	ands	r2, r3
 8002998:	2380      	movs	r3, #128	; 0x80
 800299a:	019b      	lsls	r3, r3, #6
 800299c:	429a      	cmp	r2, r3
 800299e:	d119      	bne.n	80029d4 <HAL_DAC_IRQHandler+0x64>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	2204      	movs	r2, #4
 80029a4:	711a      	strb	r2, [r3, #4]
    
      /* Set DAC error code to chanel1 DMA underrun error */
      hdac->ErrorCode |= HAL_DAC_ERROR_DMAUNDERRUNCH1;
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	691b      	ldr	r3, [r3, #16]
 80029aa:	2201      	movs	r2, #1
 80029ac:	431a      	orrs	r2, r3
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	611a      	str	r2, [r3, #16]
    
      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac,DAC_FLAG_DMAUDR1);
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	2280      	movs	r2, #128	; 0x80
 80029b8:	0192      	lsls	r2, r2, #6
 80029ba:	635a      	str	r2, [r3, #52]	; 0x34
    
      /* Disable the selected DAC channel1 DMA request */
      hdac->Instance->CR &= ~DAC_CR_DMAEN1;
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	681a      	ldr	r2, [r3, #0]
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	4905      	ldr	r1, [pc, #20]	; (80029dc <HAL_DAC_IRQHandler+0x6c>)
 80029c8:	400a      	ands	r2, r1
 80029ca:	601a      	str	r2, [r3, #0]
    
      /* Error callback */ 
      HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	0018      	movs	r0, r3
 80029d0:	f7ff feea 	bl	80027a8 <HAL_DAC_DMAUnderrunCallbackCh1>
    }
  }
}
 80029d4:	46c0      	nop			; (mov r8, r8)
 80029d6:	46bd      	mov	sp, r7
 80029d8:	b002      	add	sp, #8
 80029da:	bd80      	pop	{r7, pc}
 80029dc:	ffffefff 	.word	0xffffefff

080029e0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 80029e0:	b580      	push	{r7, lr}
 80029e2:	b084      	sub	sp, #16
 80029e4:	af00      	add	r7, sp, #0
 80029e6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80029e8:	2300      	movs	r3, #0
 80029ea:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d101      	bne.n	80029f6 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 80029f2:	2301      	movs	r3, #1
 80029f4:	e0df      	b.n	8002bb6 <HAL_DMA_Init+0x1d6>
  }
  
  /* Check the parameters */
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	4a71      	ldr	r2, [pc, #452]	; (8002bc0 <HAL_DMA_Init+0x1e0>)
 80029fc:	4293      	cmp	r3, r2
 80029fe:	d018      	beq.n	8002a32 <HAL_DMA_Init+0x52>
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	4a6f      	ldr	r2, [pc, #444]	; (8002bc4 <HAL_DMA_Init+0x1e4>)
 8002a06:	4293      	cmp	r3, r2
 8002a08:	d013      	beq.n	8002a32 <HAL_DMA_Init+0x52>
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	4a6e      	ldr	r2, [pc, #440]	; (8002bc8 <HAL_DMA_Init+0x1e8>)
 8002a10:	4293      	cmp	r3, r2
 8002a12:	d00e      	beq.n	8002a32 <HAL_DMA_Init+0x52>
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	4a6c      	ldr	r2, [pc, #432]	; (8002bcc <HAL_DMA_Init+0x1ec>)
 8002a1a:	4293      	cmp	r3, r2
 8002a1c:	d009      	beq.n	8002a32 <HAL_DMA_Init+0x52>
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	4a6b      	ldr	r2, [pc, #428]	; (8002bd0 <HAL_DMA_Init+0x1f0>)
 8002a24:	4293      	cmp	r3, r2
 8002a26:	d004      	beq.n	8002a32 <HAL_DMA_Init+0x52>
 8002a28:	4b6a      	ldr	r3, [pc, #424]	; (8002bd4 <HAL_DMA_Init+0x1f4>)
 8002a2a:	21a5      	movs	r1, #165	; 0xa5
 8002a2c:	0018      	movs	r0, r3
 8002a2e:	f7fd ff90 	bl	8000952 <assert_failed>
  assert_param(IS_DMA_DIRECTION(hdma->Init.Direction));
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	685b      	ldr	r3, [r3, #4]
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d00e      	beq.n	8002a58 <HAL_DMA_Init+0x78>
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	685b      	ldr	r3, [r3, #4]
 8002a3e:	2b10      	cmp	r3, #16
 8002a40:	d00a      	beq.n	8002a58 <HAL_DMA_Init+0x78>
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	685a      	ldr	r2, [r3, #4]
 8002a46:	2380      	movs	r3, #128	; 0x80
 8002a48:	01db      	lsls	r3, r3, #7
 8002a4a:	429a      	cmp	r2, r3
 8002a4c:	d004      	beq.n	8002a58 <HAL_DMA_Init+0x78>
 8002a4e:	4b61      	ldr	r3, [pc, #388]	; (8002bd4 <HAL_DMA_Init+0x1f4>)
 8002a50:	21a6      	movs	r1, #166	; 0xa6
 8002a52:	0018      	movs	r0, r3
 8002a54:	f7fd ff7d 	bl	8000952 <assert_failed>
  assert_param(IS_DMA_PERIPHERAL_INC_STATE(hdma->Init.PeriphInc));
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	689b      	ldr	r3, [r3, #8]
 8002a5c:	2b40      	cmp	r3, #64	; 0x40
 8002a5e:	d008      	beq.n	8002a72 <HAL_DMA_Init+0x92>
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	689b      	ldr	r3, [r3, #8]
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d004      	beq.n	8002a72 <HAL_DMA_Init+0x92>
 8002a68:	4b5a      	ldr	r3, [pc, #360]	; (8002bd4 <HAL_DMA_Init+0x1f4>)
 8002a6a:	21a7      	movs	r1, #167	; 0xa7
 8002a6c:	0018      	movs	r0, r3
 8002a6e:	f7fd ff70 	bl	8000952 <assert_failed>
  assert_param(IS_DMA_MEMORY_INC_STATE(hdma->Init.MemInc));
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	68db      	ldr	r3, [r3, #12]
 8002a76:	2b80      	cmp	r3, #128	; 0x80
 8002a78:	d008      	beq.n	8002a8c <HAL_DMA_Init+0xac>
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	68db      	ldr	r3, [r3, #12]
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d004      	beq.n	8002a8c <HAL_DMA_Init+0xac>
 8002a82:	4b54      	ldr	r3, [pc, #336]	; (8002bd4 <HAL_DMA_Init+0x1f4>)
 8002a84:	21a8      	movs	r1, #168	; 0xa8
 8002a86:	0018      	movs	r0, r3
 8002a88:	f7fd ff63 	bl	8000952 <assert_failed>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	691b      	ldr	r3, [r3, #16]
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d010      	beq.n	8002ab6 <HAL_DMA_Init+0xd6>
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	691a      	ldr	r2, [r3, #16]
 8002a98:	2380      	movs	r3, #128	; 0x80
 8002a9a:	005b      	lsls	r3, r3, #1
 8002a9c:	429a      	cmp	r2, r3
 8002a9e:	d00a      	beq.n	8002ab6 <HAL_DMA_Init+0xd6>
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	691a      	ldr	r2, [r3, #16]
 8002aa4:	2380      	movs	r3, #128	; 0x80
 8002aa6:	009b      	lsls	r3, r3, #2
 8002aa8:	429a      	cmp	r2, r3
 8002aaa:	d004      	beq.n	8002ab6 <HAL_DMA_Init+0xd6>
 8002aac:	4b49      	ldr	r3, [pc, #292]	; (8002bd4 <HAL_DMA_Init+0x1f4>)
 8002aae:	21a9      	movs	r1, #169	; 0xa9
 8002ab0:	0018      	movs	r0, r3
 8002ab2:	f7fd ff4e 	bl	8000952 <assert_failed>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	695b      	ldr	r3, [r3, #20]
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d010      	beq.n	8002ae0 <HAL_DMA_Init+0x100>
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	695a      	ldr	r2, [r3, #20]
 8002ac2:	2380      	movs	r3, #128	; 0x80
 8002ac4:	00db      	lsls	r3, r3, #3
 8002ac6:	429a      	cmp	r2, r3
 8002ac8:	d00a      	beq.n	8002ae0 <HAL_DMA_Init+0x100>
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	695a      	ldr	r2, [r3, #20]
 8002ace:	2380      	movs	r3, #128	; 0x80
 8002ad0:	011b      	lsls	r3, r3, #4
 8002ad2:	429a      	cmp	r2, r3
 8002ad4:	d004      	beq.n	8002ae0 <HAL_DMA_Init+0x100>
 8002ad6:	4b3f      	ldr	r3, [pc, #252]	; (8002bd4 <HAL_DMA_Init+0x1f4>)
 8002ad8:	21aa      	movs	r1, #170	; 0xaa
 8002ada:	0018      	movs	r0, r3
 8002adc:	f7fd ff39 	bl	8000952 <assert_failed>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	699b      	ldr	r3, [r3, #24]
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d008      	beq.n	8002afa <HAL_DMA_Init+0x11a>
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	699b      	ldr	r3, [r3, #24]
 8002aec:	2b20      	cmp	r3, #32
 8002aee:	d004      	beq.n	8002afa <HAL_DMA_Init+0x11a>
 8002af0:	4b38      	ldr	r3, [pc, #224]	; (8002bd4 <HAL_DMA_Init+0x1f4>)
 8002af2:	21ab      	movs	r1, #171	; 0xab
 8002af4:	0018      	movs	r0, r3
 8002af6:	f7fd ff2c 	bl	8000952 <assert_failed>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	69db      	ldr	r3, [r3, #28]
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d016      	beq.n	8002b30 <HAL_DMA_Init+0x150>
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	69da      	ldr	r2, [r3, #28]
 8002b06:	2380      	movs	r3, #128	; 0x80
 8002b08:	015b      	lsls	r3, r3, #5
 8002b0a:	429a      	cmp	r2, r3
 8002b0c:	d010      	beq.n	8002b30 <HAL_DMA_Init+0x150>
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	69da      	ldr	r2, [r3, #28]
 8002b12:	2380      	movs	r3, #128	; 0x80
 8002b14:	019b      	lsls	r3, r3, #6
 8002b16:	429a      	cmp	r2, r3
 8002b18:	d00a      	beq.n	8002b30 <HAL_DMA_Init+0x150>
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	69da      	ldr	r2, [r3, #28]
 8002b1e:	23c0      	movs	r3, #192	; 0xc0
 8002b20:	019b      	lsls	r3, r3, #6
 8002b22:	429a      	cmp	r2, r3
 8002b24:	d004      	beq.n	8002b30 <HAL_DMA_Init+0x150>
 8002b26:	4b2b      	ldr	r3, [pc, #172]	; (8002bd4 <HAL_DMA_Init+0x1f4>)
 8002b28:	21ac      	movs	r1, #172	; 0xac
 8002b2a:	0018      	movs	r0, r3
 8002b2c:	f7fd ff11 	bl	8000952 <assert_failed>
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	2221      	movs	r2, #33	; 0x21
 8002b34:	2102      	movs	r1, #2
 8002b36:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	4a25      	ldr	r2, [pc, #148]	; (8002bd8 <HAL_DMA_Init+0x1f8>)
 8002b44:	4013      	ands	r3, r2
 8002b46:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8002b50:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	68db      	ldr	r3, [r3, #12]
 8002b56:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002b5c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	695b      	ldr	r3, [r3, #20]
 8002b62:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002b68:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	69db      	ldr	r3, [r3, #28]
 8002b6e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002b70:	68fa      	ldr	r2, [r7, #12]
 8002b72:	4313      	orrs	r3, r2
 8002b74:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	68fa      	ldr	r2, [r7, #12]
 8002b7c:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	0018      	movs	r0, r3
 8002b82:	f000 f971 	bl	8002e68 <DMA_CalcBaseAndBitshift>
  
  /* Clean callbacks */
  hdma->XferCpltCallback = NULL;
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	2200      	movs	r2, #0
 8002b8a:	629a      	str	r2, [r3, #40]	; 0x28
  hdma->XferHalfCpltCallback = NULL;
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	2200      	movs	r2, #0
 8002b90:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma->XferErrorCallback = NULL;
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	2200      	movs	r2, #0
 8002b96:	631a      	str	r2, [r3, #48]	; 0x30
  hdma->XferAbortCallback = NULL;
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	2200      	movs	r2, #0
 8002b9c:	635a      	str	r2, [r3, #52]	; 0x34
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	2200      	movs	r2, #0
 8002ba2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	2221      	movs	r2, #33	; 0x21
 8002ba8:	2101      	movs	r1, #1
 8002baa:	5499      	strb	r1, [r3, r2]
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	2220      	movs	r2, #32
 8002bb0:	2100      	movs	r1, #0
 8002bb2:	5499      	strb	r1, [r3, r2]
  
  return HAL_OK;
 8002bb4:	2300      	movs	r3, #0
}  
 8002bb6:	0018      	movs	r0, r3
 8002bb8:	46bd      	mov	sp, r7
 8002bba:	b004      	add	sp, #16
 8002bbc:	bd80      	pop	{r7, pc}
 8002bbe:	46c0      	nop			; (mov r8, r8)
 8002bc0:	40020008 	.word	0x40020008
 8002bc4:	4002001c 	.word	0x4002001c
 8002bc8:	40020030 	.word	0x40020030
 8002bcc:	40020044 	.word	0x40020044
 8002bd0:	40020058 	.word	0x40020058
 8002bd4:	08007050 	.word	0x08007050
 8002bd8:	ffffc00f 	.word	0xffffc00f

08002bdc <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002bdc:	b580      	push	{r7, lr}
 8002bde:	b086      	sub	sp, #24
 8002be0:	af00      	add	r7, sp, #0
 8002be2:	60f8      	str	r0, [r7, #12]
 8002be4:	60b9      	str	r1, [r7, #8]
 8002be6:	607a      	str	r2, [r7, #4]
 8002be8:	603b      	str	r3, [r7, #0]
	HAL_StatusTypeDef status = HAL_OK;
 8002bea:	2317      	movs	r3, #23
 8002bec:	18fb      	adds	r3, r7, r3
 8002bee:	2200      	movs	r2, #0
 8002bf0:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 8002bf2:	683b      	ldr	r3, [r7, #0]
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d003      	beq.n	8002c00 <HAL_DMA_Start_IT+0x24>
 8002bf8:	683b      	ldr	r3, [r7, #0]
 8002bfa:	4a32      	ldr	r2, [pc, #200]	; (8002cc4 <HAL_DMA_Start_IT+0xe8>)
 8002bfc:	4293      	cmp	r3, r2
 8002bfe:	d906      	bls.n	8002c0e <HAL_DMA_Start_IT+0x32>
 8002c00:	23af      	movs	r3, #175	; 0xaf
 8002c02:	005a      	lsls	r2, r3, #1
 8002c04:	4b30      	ldr	r3, [pc, #192]	; (8002cc8 <HAL_DMA_Start_IT+0xec>)
 8002c06:	0011      	movs	r1, r2
 8002c08:	0018      	movs	r0, r3
 8002c0a:	f7fd fea2 	bl	8000952 <assert_failed>
  
  /* Process locked */
  __HAL_LOCK(hdma);
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	2220      	movs	r2, #32
 8002c12:	5c9b      	ldrb	r3, [r3, r2]
 8002c14:	2b01      	cmp	r3, #1
 8002c16:	d101      	bne.n	8002c1c <HAL_DMA_Start_IT+0x40>
 8002c18:	2302      	movs	r3, #2
 8002c1a:	e04f      	b.n	8002cbc <HAL_DMA_Start_IT+0xe0>
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	2220      	movs	r2, #32
 8002c20:	2101      	movs	r1, #1
 8002c22:	5499      	strb	r1, [r3, r2]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	2221      	movs	r2, #33	; 0x21
 8002c28:	5c9b      	ldrb	r3, [r3, r2]
 8002c2a:	b2db      	uxtb	r3, r3
 8002c2c:	2b01      	cmp	r3, #1
 8002c2e:	d13a      	bne.n	8002ca6 <HAL_DMA_Start_IT+0xca>
  {
  	/* Change DMA peripheral state */  
  	hdma->State = HAL_DMA_STATE_BUSY;
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	2221      	movs	r2, #33	; 0x21
 8002c34:	2102      	movs	r1, #2
 8002c36:	5499      	strb	r1, [r3, r2]
  	
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	2200      	movs	r2, #0
 8002c3c:	639a      	str	r2, [r3, #56]	; 0x38
  	
  	/* Disable the peripheral */
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	681a      	ldr	r2, [r3, #0]
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	2101      	movs	r1, #1
 8002c4a:	438a      	bics	r2, r1
 8002c4c:	601a      	str	r2, [r3, #0]
  	
  	/* Configure the source, destination address and the data length */  
  	DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002c4e:	683b      	ldr	r3, [r7, #0]
 8002c50:	687a      	ldr	r2, [r7, #4]
 8002c52:	68b9      	ldr	r1, [r7, #8]
 8002c54:	68f8      	ldr	r0, [r7, #12]
 8002c56:	f000 f8db 	bl	8002e10 <DMA_SetConfig>
  	
  	/* Enable the transfer complete, & transfer error interrupts */
  	/* Half transfer interrupt is optional: enable it only if associated callback is available */
    if(NULL != hdma->XferHalfCpltCallback )
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d008      	beq.n	8002c74 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	681a      	ldr	r2, [r3, #0]
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	210e      	movs	r1, #14
 8002c6e:	430a      	orrs	r2, r1
 8002c70:	601a      	str	r2, [r3, #0]
 8002c72:	e00f      	b.n	8002c94 <HAL_DMA_Start_IT+0xb8>
    }
  	else
  	{
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	681a      	ldr	r2, [r3, #0]
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	210a      	movs	r1, #10
 8002c80:	430a      	orrs	r2, r1
 8002c82:	601a      	str	r2, [r3, #0]
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	681a      	ldr	r2, [r3, #0]
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	2104      	movs	r1, #4
 8002c90:	438a      	bics	r2, r1
 8002c92:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Enable the Peripheral */
  	hdma->Instance->CCR |= DMA_CCR_EN;
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	681a      	ldr	r2, [r3, #0]
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	2101      	movs	r1, #1
 8002ca0:	430a      	orrs	r2, r1
 8002ca2:	601a      	str	r2, [r3, #0]
 8002ca4:	e007      	b.n	8002cb6 <HAL_DMA_Start_IT+0xda>
  }
  else
  {
  	/* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	2220      	movs	r2, #32
 8002caa:	2100      	movs	r1, #0
 8002cac:	5499      	strb	r1, [r3, r2]
  
    /* Remain BUSY */
    status = HAL_BUSY;
 8002cae:	2317      	movs	r3, #23
 8002cb0:	18fb      	adds	r3, r7, r3
 8002cb2:	2202      	movs	r2, #2
 8002cb4:	701a      	strb	r2, [r3, #0]
  }     
  
  return status;    
 8002cb6:	2317      	movs	r3, #23
 8002cb8:	18fb      	adds	r3, r7, r3
 8002cba:	781b      	ldrb	r3, [r3, #0]
} 
 8002cbc:	0018      	movs	r0, r3
 8002cbe:	46bd      	mov	sp, r7
 8002cc0:	b006      	add	sp, #24
 8002cc2:	bd80      	pop	{r7, pc}
 8002cc4:	0000ffff 	.word	0x0000ffff
 8002cc8:	08007050 	.word	0x08007050

08002ccc <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002ccc:	b580      	push	{r7, lr}
 8002cce:	b084      	sub	sp, #16
 8002cd0:	af00      	add	r7, sp, #0
 8002cd2:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ce8:	2204      	movs	r2, #4
 8002cea:	409a      	lsls	r2, r3
 8002cec:	0013      	movs	r3, r2
 8002cee:	68fa      	ldr	r2, [r7, #12]
 8002cf0:	4013      	ands	r3, r2
 8002cf2:	d024      	beq.n	8002d3e <HAL_DMA_IRQHandler+0x72>
 8002cf4:	68bb      	ldr	r3, [r7, #8]
 8002cf6:	2204      	movs	r2, #4
 8002cf8:	4013      	ands	r3, r2
 8002cfa:	d020      	beq.n	8002d3e <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	2220      	movs	r2, #32
 8002d04:	4013      	ands	r3, r2
 8002d06:	d107      	bne.n	8002d18 <HAL_DMA_IRQHandler+0x4c>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	681a      	ldr	r2, [r3, #0]
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	2104      	movs	r1, #4
 8002d14:	438a      	bics	r2, r1
 8002d16:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d20:	2104      	movs	r1, #4
 8002d22:	4091      	lsls	r1, r2
 8002d24:	000a      	movs	r2, r1
 8002d26:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d100      	bne.n	8002d32 <HAL_DMA_IRQHandler+0x66>
 8002d30:	e06a      	b.n	8002e08 <HAL_DMA_IRQHandler+0x13c>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d36:	687a      	ldr	r2, [r7, #4]
 8002d38:	0010      	movs	r0, r2
 8002d3a:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 8002d3c:	e064      	b.n	8002e08 <HAL_DMA_IRQHandler+0x13c>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d42:	2202      	movs	r2, #2
 8002d44:	409a      	lsls	r2, r3
 8002d46:	0013      	movs	r3, r2
 8002d48:	68fa      	ldr	r2, [r7, #12]
 8002d4a:	4013      	ands	r3, r2
 8002d4c:	d02b      	beq.n	8002da6 <HAL_DMA_IRQHandler+0xda>
 8002d4e:	68bb      	ldr	r3, [r7, #8]
 8002d50:	2202      	movs	r2, #2
 8002d52:	4013      	ands	r3, r2
 8002d54:	d027      	beq.n	8002da6 <HAL_DMA_IRQHandler+0xda>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	2220      	movs	r2, #32
 8002d5e:	4013      	ands	r3, r2
 8002d60:	d10b      	bne.n	8002d7a <HAL_DMA_IRQHandler+0xae>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	681a      	ldr	r2, [r3, #0]
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	210a      	movs	r1, #10
 8002d6e:	438a      	bics	r2, r1
 8002d70:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	2221      	movs	r2, #33	; 0x21
 8002d76:	2101      	movs	r1, #1
 8002d78:	5499      	strb	r1, [r3, r2]
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d82:	2102      	movs	r1, #2
 8002d84:	4091      	lsls	r1, r2
 8002d86:	000a      	movs	r2, r1
 8002d88:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	2220      	movs	r2, #32
 8002d8e:	2100      	movs	r1, #0
 8002d90:	5499      	strb	r1, [r3, r2]
  	
  	if(hdma->XferCpltCallback != NULL)
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d036      	beq.n	8002e08 <HAL_DMA_IRQHandler+0x13c>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d9e:	687a      	ldr	r2, [r7, #4]
 8002da0:	0010      	movs	r0, r2
 8002da2:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 8002da4:	e030      	b.n	8002e08 <HAL_DMA_IRQHandler+0x13c>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002daa:	2208      	movs	r2, #8
 8002dac:	409a      	lsls	r2, r3
 8002dae:	0013      	movs	r3, r2
 8002db0:	68fa      	ldr	r2, [r7, #12]
 8002db2:	4013      	ands	r3, r2
 8002db4:	d028      	beq.n	8002e08 <HAL_DMA_IRQHandler+0x13c>
 8002db6:	68bb      	ldr	r3, [r7, #8]
 8002db8:	2208      	movs	r2, #8
 8002dba:	4013      	ands	r3, r2
 8002dbc:	d024      	beq.n	8002e08 <HAL_DMA_IRQHandler+0x13c>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	681a      	ldr	r2, [r3, #0]
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	210e      	movs	r1, #14
 8002dca:	438a      	bics	r2, r1
 8002dcc:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002dd6:	2101      	movs	r1, #1
 8002dd8:	4091      	lsls	r1, r2
 8002dda:	000a      	movs	r2, r1
 8002ddc:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	2201      	movs	r2, #1
 8002de2:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	2221      	movs	r2, #33	; 0x21
 8002de8:	2101      	movs	r1, #1
 8002dea:	5499      	strb	r1, [r3, r2]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	2220      	movs	r2, #32
 8002df0:	2100      	movs	r1, #0
 8002df2:	5499      	strb	r1, [r3, r2]
    
    if(hdma->XferErrorCallback != NULL)
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d005      	beq.n	8002e08 <HAL_DMA_IRQHandler+0x13c>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e00:	687a      	ldr	r2, [r7, #4]
 8002e02:	0010      	movs	r0, r2
 8002e04:	4798      	blx	r3
    }
   }
}  
 8002e06:	e7ff      	b.n	8002e08 <HAL_DMA_IRQHandler+0x13c>
 8002e08:	46c0      	nop			; (mov r8, r8)
 8002e0a:	46bd      	mov	sp, r7
 8002e0c:	b004      	add	sp, #16
 8002e0e:	bd80      	pop	{r7, pc}

08002e10 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002e10:	b580      	push	{r7, lr}
 8002e12:	b084      	sub	sp, #16
 8002e14:	af00      	add	r7, sp, #0
 8002e16:	60f8      	str	r0, [r7, #12]
 8002e18:	60b9      	str	r1, [r7, #8]
 8002e1a:	607a      	str	r2, [r7, #4]
 8002e1c:	603b      	str	r3, [r7, #0]
	/* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e26:	2101      	movs	r1, #1
 8002e28:	4091      	lsls	r1, r2
 8002e2a:	000a      	movs	r2, r1
 8002e2c:	605a      	str	r2, [r3, #4]
  
  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	683a      	ldr	r2, [r7, #0]
 8002e34:	605a      	str	r2, [r3, #4]
  
  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	685b      	ldr	r3, [r3, #4]
 8002e3a:	2b10      	cmp	r3, #16
 8002e3c:	d108      	bne.n	8002e50 <DMA_SetConfig+0x40>
  {   
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	687a      	ldr	r2, [r7, #4]
 8002e44:	609a      	str	r2, [r3, #8]
    
    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	68ba      	ldr	r2, [r7, #8]
 8002e4c:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;
    
    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002e4e:	e007      	b.n	8002e60 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	68ba      	ldr	r2, [r7, #8]
 8002e56:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	687a      	ldr	r2, [r7, #4]
 8002e5e:	60da      	str	r2, [r3, #12]
}
 8002e60:	46c0      	nop			; (mov r8, r8)
 8002e62:	46bd      	mov	sp, r7
 8002e64:	b004      	add	sp, #16
 8002e66:	bd80      	pop	{r7, pc}

08002e68 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002e68:	b580      	push	{r7, lr}
 8002e6a:	b082      	sub	sp, #8
 8002e6c:	af00      	add	r7, sp, #0
 8002e6e:	6078      	str	r0, [r7, #4]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	4a08      	ldr	r2, [pc, #32]	; (8002e98 <DMA_CalcBaseAndBitshift+0x30>)
 8002e76:	4694      	mov	ip, r2
 8002e78:	4463      	add	r3, ip
 8002e7a:	2114      	movs	r1, #20
 8002e7c:	0018      	movs	r0, r3
 8002e7e:	f7fd f943 	bl	8000108 <__udivsi3>
 8002e82:	0003      	movs	r3, r0
 8002e84:	009a      	lsls	r2, r3, #2
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	4a03      	ldr	r2, [pc, #12]	; (8002e9c <DMA_CalcBaseAndBitshift+0x34>)
 8002e8e:	63da      	str	r2, [r3, #60]	; 0x3c
#endif
}
 8002e90:	46c0      	nop			; (mov r8, r8)
 8002e92:	46bd      	mov	sp, r7
 8002e94:	b002      	add	sp, #8
 8002e96:	bd80      	pop	{r7, pc}
 8002e98:	bffdfff8 	.word	0xbffdfff8
 8002e9c:	40020000 	.word	0x40020000

08002ea0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
 8002ea0:	b580      	push	{r7, lr}
 8002ea2:	b086      	sub	sp, #24
 8002ea4:	af00      	add	r7, sp, #0
 8002ea6:	6078      	str	r0, [r7, #4]
 8002ea8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002eaa:	2300      	movs	r3, #0
 8002eac:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002eae:	2300      	movs	r3, #0
 8002eb0:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 8002eb2:	2300      	movs	r3, #0
 8002eb4:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 8002eb6:	687a      	ldr	r2, [r7, #4]
 8002eb8:	2390      	movs	r3, #144	; 0x90
 8002eba:	05db      	lsls	r3, r3, #23
 8002ebc:	429a      	cmp	r2, r3
 8002ebe:	d014      	beq.n	8002eea <HAL_GPIO_Init+0x4a>
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	4ac2      	ldr	r2, [pc, #776]	; (80031cc <HAL_GPIO_Init+0x32c>)
 8002ec4:	4293      	cmp	r3, r2
 8002ec6:	d010      	beq.n	8002eea <HAL_GPIO_Init+0x4a>
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	4ac1      	ldr	r2, [pc, #772]	; (80031d0 <HAL_GPIO_Init+0x330>)
 8002ecc:	4293      	cmp	r3, r2
 8002ece:	d00c      	beq.n	8002eea <HAL_GPIO_Init+0x4a>
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	4ac0      	ldr	r2, [pc, #768]	; (80031d4 <HAL_GPIO_Init+0x334>)
 8002ed4:	4293      	cmp	r3, r2
 8002ed6:	d008      	beq.n	8002eea <HAL_GPIO_Init+0x4a>
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	4abf      	ldr	r2, [pc, #764]	; (80031d8 <HAL_GPIO_Init+0x338>)
 8002edc:	4293      	cmp	r3, r2
 8002ede:	d004      	beq.n	8002eea <HAL_GPIO_Init+0x4a>
 8002ee0:	4bbe      	ldr	r3, [pc, #760]	; (80031dc <HAL_GPIO_Init+0x33c>)
 8002ee2:	21c1      	movs	r1, #193	; 0xc1
 8002ee4:	0018      	movs	r0, r3
 8002ee6:	f7fd fd34 	bl	8000952 <assert_failed>
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
 8002eea:	683b      	ldr	r3, [r7, #0]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	041b      	lsls	r3, r3, #16
 8002ef0:	0c1b      	lsrs	r3, r3, #16
 8002ef2:	d004      	beq.n	8002efe <HAL_GPIO_Init+0x5e>
 8002ef4:	683b      	ldr	r3, [r7, #0]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	0c1b      	lsrs	r3, r3, #16
 8002efa:	041b      	lsls	r3, r3, #16
 8002efc:	d004      	beq.n	8002f08 <HAL_GPIO_Init+0x68>
 8002efe:	4bb7      	ldr	r3, [pc, #732]	; (80031dc <HAL_GPIO_Init+0x33c>)
 8002f00:	21c2      	movs	r1, #194	; 0xc2
 8002f02:	0018      	movs	r0, r3
 8002f04:	f7fd fd25 	bl	8000952 <assert_failed>
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
 8002f08:	683b      	ldr	r3, [r7, #0]
 8002f0a:	685b      	ldr	r3, [r3, #4]
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d036      	beq.n	8002f7e <HAL_GPIO_Init+0xde>
 8002f10:	683b      	ldr	r3, [r7, #0]
 8002f12:	685b      	ldr	r3, [r3, #4]
 8002f14:	2b01      	cmp	r3, #1
 8002f16:	d032      	beq.n	8002f7e <HAL_GPIO_Init+0xde>
 8002f18:	683b      	ldr	r3, [r7, #0]
 8002f1a:	685b      	ldr	r3, [r3, #4]
 8002f1c:	2b11      	cmp	r3, #17
 8002f1e:	d02e      	beq.n	8002f7e <HAL_GPIO_Init+0xde>
 8002f20:	683b      	ldr	r3, [r7, #0]
 8002f22:	685b      	ldr	r3, [r3, #4]
 8002f24:	2b02      	cmp	r3, #2
 8002f26:	d02a      	beq.n	8002f7e <HAL_GPIO_Init+0xde>
 8002f28:	683b      	ldr	r3, [r7, #0]
 8002f2a:	685b      	ldr	r3, [r3, #4]
 8002f2c:	2b12      	cmp	r3, #18
 8002f2e:	d026      	beq.n	8002f7e <HAL_GPIO_Init+0xde>
 8002f30:	683b      	ldr	r3, [r7, #0]
 8002f32:	685b      	ldr	r3, [r3, #4]
 8002f34:	4aaa      	ldr	r2, [pc, #680]	; (80031e0 <HAL_GPIO_Init+0x340>)
 8002f36:	4293      	cmp	r3, r2
 8002f38:	d021      	beq.n	8002f7e <HAL_GPIO_Init+0xde>
 8002f3a:	683b      	ldr	r3, [r7, #0]
 8002f3c:	685b      	ldr	r3, [r3, #4]
 8002f3e:	4aa9      	ldr	r2, [pc, #676]	; (80031e4 <HAL_GPIO_Init+0x344>)
 8002f40:	4293      	cmp	r3, r2
 8002f42:	d01c      	beq.n	8002f7e <HAL_GPIO_Init+0xde>
 8002f44:	683b      	ldr	r3, [r7, #0]
 8002f46:	685b      	ldr	r3, [r3, #4]
 8002f48:	4aa7      	ldr	r2, [pc, #668]	; (80031e8 <HAL_GPIO_Init+0x348>)
 8002f4a:	4293      	cmp	r3, r2
 8002f4c:	d017      	beq.n	8002f7e <HAL_GPIO_Init+0xde>
 8002f4e:	683b      	ldr	r3, [r7, #0]
 8002f50:	685b      	ldr	r3, [r3, #4]
 8002f52:	4aa6      	ldr	r2, [pc, #664]	; (80031ec <HAL_GPIO_Init+0x34c>)
 8002f54:	4293      	cmp	r3, r2
 8002f56:	d012      	beq.n	8002f7e <HAL_GPIO_Init+0xde>
 8002f58:	683b      	ldr	r3, [r7, #0]
 8002f5a:	685b      	ldr	r3, [r3, #4]
 8002f5c:	4aa4      	ldr	r2, [pc, #656]	; (80031f0 <HAL_GPIO_Init+0x350>)
 8002f5e:	4293      	cmp	r3, r2
 8002f60:	d00d      	beq.n	8002f7e <HAL_GPIO_Init+0xde>
 8002f62:	683b      	ldr	r3, [r7, #0]
 8002f64:	685b      	ldr	r3, [r3, #4]
 8002f66:	4aa3      	ldr	r2, [pc, #652]	; (80031f4 <HAL_GPIO_Init+0x354>)
 8002f68:	4293      	cmp	r3, r2
 8002f6a:	d008      	beq.n	8002f7e <HAL_GPIO_Init+0xde>
 8002f6c:	683b      	ldr	r3, [r7, #0]
 8002f6e:	685b      	ldr	r3, [r3, #4]
 8002f70:	2b03      	cmp	r3, #3
 8002f72:	d004      	beq.n	8002f7e <HAL_GPIO_Init+0xde>
 8002f74:	4b99      	ldr	r3, [pc, #612]	; (80031dc <HAL_GPIO_Init+0x33c>)
 8002f76:	21c3      	movs	r1, #195	; 0xc3
 8002f78:	0018      	movs	r0, r3
 8002f7a:	f7fd fcea 	bl	8000952 <assert_failed>
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull)); 
 8002f7e:	683b      	ldr	r3, [r7, #0]
 8002f80:	689b      	ldr	r3, [r3, #8]
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d100      	bne.n	8002f88 <HAL_GPIO_Init+0xe8>
 8002f86:	e1a2      	b.n	80032ce <HAL_GPIO_Init+0x42e>
 8002f88:	683b      	ldr	r3, [r7, #0]
 8002f8a:	689b      	ldr	r3, [r3, #8]
 8002f8c:	2b01      	cmp	r3, #1
 8002f8e:	d100      	bne.n	8002f92 <HAL_GPIO_Init+0xf2>
 8002f90:	e19d      	b.n	80032ce <HAL_GPIO_Init+0x42e>
 8002f92:	683b      	ldr	r3, [r7, #0]
 8002f94:	689b      	ldr	r3, [r3, #8]
 8002f96:	2b02      	cmp	r3, #2
 8002f98:	d100      	bne.n	8002f9c <HAL_GPIO_Init+0xfc>
 8002f9a:	e198      	b.n	80032ce <HAL_GPIO_Init+0x42e>
 8002f9c:	4b8f      	ldr	r3, [pc, #572]	; (80031dc <HAL_GPIO_Init+0x33c>)
 8002f9e:	21c4      	movs	r1, #196	; 0xc4
 8002fa0:	0018      	movs	r0, r3
 8002fa2:	f7fd fcd6 	bl	8000952 <assert_failed>

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != RESET)
 8002fa6:	e192      	b.n	80032ce <HAL_GPIO_Init+0x42e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8002fa8:	683b      	ldr	r3, [r7, #0]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	2101      	movs	r1, #1
 8002fae:	697a      	ldr	r2, [r7, #20]
 8002fb0:	4091      	lsls	r1, r2
 8002fb2:	000a      	movs	r2, r1
 8002fb4:	4013      	ands	r3, r2
 8002fb6:	60fb      	str	r3, [r7, #12]
    
    if(iocurrent)
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d100      	bne.n	8002fc0 <HAL_GPIO_Init+0x120>
 8002fbe:	e183      	b.n	80032c8 <HAL_GPIO_Init+0x428>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD)) 
 8002fc0:	683b      	ldr	r3, [r7, #0]
 8002fc2:	685b      	ldr	r3, [r3, #4]
 8002fc4:	2b02      	cmp	r3, #2
 8002fc6:	d003      	beq.n	8002fd0 <HAL_GPIO_Init+0x130>
 8002fc8:	683b      	ldr	r3, [r7, #0]
 8002fca:	685b      	ldr	r3, [r3, #4]
 8002fcc:	2b12      	cmp	r3, #18
 8002fce:	d13a      	bne.n	8003046 <HAL_GPIO_Init+0x1a6>
      {
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
 8002fd0:	687a      	ldr	r2, [r7, #4]
 8002fd2:	2390      	movs	r3, #144	; 0x90
 8002fd4:	05db      	lsls	r3, r3, #23
 8002fd6:	429a      	cmp	r2, r3
 8002fd8:	d008      	beq.n	8002fec <HAL_GPIO_Init+0x14c>
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	4a7b      	ldr	r2, [pc, #492]	; (80031cc <HAL_GPIO_Init+0x32c>)
 8002fde:	4293      	cmp	r3, r2
 8002fe0:	d004      	beq.n	8002fec <HAL_GPIO_Init+0x14c>
 8002fe2:	4b7e      	ldr	r3, [pc, #504]	; (80031dc <HAL_GPIO_Init+0x33c>)
 8002fe4:	21d3      	movs	r1, #211	; 0xd3
 8002fe6:	0018      	movs	r0, r3
 8002fe8:	f7fd fcb3 	bl	8000952 <assert_failed>
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
 8002fec:	683b      	ldr	r3, [r7, #0]
 8002fee:	691b      	ldr	r3, [r3, #16]
 8002ff0:	2b07      	cmp	r3, #7
 8002ff2:	d904      	bls.n	8002ffe <HAL_GPIO_Init+0x15e>
 8002ff4:	4b79      	ldr	r3, [pc, #484]	; (80031dc <HAL_GPIO_Init+0x33c>)
 8002ff6:	21d4      	movs	r1, #212	; 0xd4
 8002ff8:	0018      	movs	r0, r3
 8002ffa:	f7fd fcaa 	bl	8000952 <assert_failed>
        
        /* Configure Alternate function mapped with the current IO */ 
        temp = GPIOx->AFR[position >> 3];
 8002ffe:	697b      	ldr	r3, [r7, #20]
 8003000:	08da      	lsrs	r2, r3, #3
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	3208      	adds	r2, #8
 8003006:	0092      	lsls	r2, r2, #2
 8003008:	58d3      	ldr	r3, [r2, r3]
 800300a:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;      
 800300c:	697b      	ldr	r3, [r7, #20]
 800300e:	2207      	movs	r2, #7
 8003010:	4013      	ands	r3, r2
 8003012:	009b      	lsls	r3, r3, #2
 8003014:	220f      	movs	r2, #15
 8003016:	409a      	lsls	r2, r3
 8003018:	0013      	movs	r3, r2
 800301a:	43da      	mvns	r2, r3
 800301c:	693b      	ldr	r3, [r7, #16]
 800301e:	4013      	ands	r3, r2
 8003020:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));       
 8003022:	683b      	ldr	r3, [r7, #0]
 8003024:	691a      	ldr	r2, [r3, #16]
 8003026:	697b      	ldr	r3, [r7, #20]
 8003028:	2107      	movs	r1, #7
 800302a:	400b      	ands	r3, r1
 800302c:	009b      	lsls	r3, r3, #2
 800302e:	409a      	lsls	r2, r3
 8003030:	0013      	movs	r3, r2
 8003032:	693a      	ldr	r2, [r7, #16]
 8003034:	4313      	orrs	r3, r2
 8003036:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8003038:	697b      	ldr	r3, [r7, #20]
 800303a:	08da      	lsrs	r2, r3, #3
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	3208      	adds	r2, #8
 8003040:	0092      	lsls	r2, r2, #2
 8003042:	6939      	ldr	r1, [r7, #16]
 8003044:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2U));   
 800304c:	697b      	ldr	r3, [r7, #20]
 800304e:	005b      	lsls	r3, r3, #1
 8003050:	2203      	movs	r2, #3
 8003052:	409a      	lsls	r2, r3
 8003054:	0013      	movs	r3, r2
 8003056:	43da      	mvns	r2, r3
 8003058:	693b      	ldr	r3, [r7, #16]
 800305a:	4013      	ands	r3, r2
 800305c:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800305e:	683b      	ldr	r3, [r7, #0]
 8003060:	685b      	ldr	r3, [r3, #4]
 8003062:	2203      	movs	r2, #3
 8003064:	401a      	ands	r2, r3
 8003066:	697b      	ldr	r3, [r7, #20]
 8003068:	005b      	lsls	r3, r3, #1
 800306a:	409a      	lsls	r2, r3
 800306c:	0013      	movs	r3, r2
 800306e:	693a      	ldr	r2, [r7, #16]
 8003070:	4313      	orrs	r3, r2
 8003072:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	693a      	ldr	r2, [r7, #16]
 8003078:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800307a:	683b      	ldr	r3, [r7, #0]
 800307c:	685b      	ldr	r3, [r3, #4]
 800307e:	2b01      	cmp	r3, #1
 8003080:	d00b      	beq.n	800309a <HAL_GPIO_Init+0x1fa>
 8003082:	683b      	ldr	r3, [r7, #0]
 8003084:	685b      	ldr	r3, [r3, #4]
 8003086:	2b02      	cmp	r3, #2
 8003088:	d007      	beq.n	800309a <HAL_GPIO_Init+0x1fa>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800308a:	683b      	ldr	r3, [r7, #0]
 800308c:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800308e:	2b11      	cmp	r3, #17
 8003090:	d003      	beq.n	800309a <HAL_GPIO_Init+0x1fa>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003092:	683b      	ldr	r3, [r7, #0]
 8003094:	685b      	ldr	r3, [r3, #4]
 8003096:	2b12      	cmp	r3, #18
 8003098:	d141      	bne.n	800311e <HAL_GPIO_Init+0x27e>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 800309a:	683b      	ldr	r3, [r7, #0]
 800309c:	68db      	ldr	r3, [r3, #12]
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d00c      	beq.n	80030bc <HAL_GPIO_Init+0x21c>
 80030a2:	683b      	ldr	r3, [r7, #0]
 80030a4:	68db      	ldr	r3, [r3, #12]
 80030a6:	2b01      	cmp	r3, #1
 80030a8:	d008      	beq.n	80030bc <HAL_GPIO_Init+0x21c>
 80030aa:	683b      	ldr	r3, [r7, #0]
 80030ac:	68db      	ldr	r3, [r3, #12]
 80030ae:	2b03      	cmp	r3, #3
 80030b0:	d004      	beq.n	80030bc <HAL_GPIO_Init+0x21c>
 80030b2:	4b4a      	ldr	r3, [pc, #296]	; (80031dc <HAL_GPIO_Init+0x33c>)
 80030b4:	21e8      	movs	r1, #232	; 0xe8
 80030b6:	0018      	movs	r0, r3
 80030b8:	f7fd fc4b 	bl	8000952 <assert_failed>
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	689b      	ldr	r3, [r3, #8]
 80030c0:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80030c2:	697b      	ldr	r3, [r7, #20]
 80030c4:	005b      	lsls	r3, r3, #1
 80030c6:	2203      	movs	r2, #3
 80030c8:	409a      	lsls	r2, r3
 80030ca:	0013      	movs	r3, r2
 80030cc:	43da      	mvns	r2, r3
 80030ce:	693b      	ldr	r3, [r7, #16]
 80030d0:	4013      	ands	r3, r2
 80030d2:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, GPIO_Init->Speed << (position * 2U));
 80030d4:	683b      	ldr	r3, [r7, #0]
 80030d6:	68da      	ldr	r2, [r3, #12]
 80030d8:	697b      	ldr	r3, [r7, #20]
 80030da:	005b      	lsls	r3, r3, #1
 80030dc:	409a      	lsls	r2, r3
 80030de:	0013      	movs	r3, r2
 80030e0:	693a      	ldr	r2, [r7, #16]
 80030e2:	4313      	orrs	r3, r2
 80030e4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	693a      	ldr	r2, [r7, #16]
 80030ea:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	685b      	ldr	r3, [r3, #4]
 80030f0:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 80030f2:	2201      	movs	r2, #1
 80030f4:	697b      	ldr	r3, [r7, #20]
 80030f6:	409a      	lsls	r2, r3
 80030f8:	0013      	movs	r3, r2
 80030fa:	43da      	mvns	r2, r3
 80030fc:	693b      	ldr	r3, [r7, #16]
 80030fe:	4013      	ands	r3, r2
 8003100:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, ((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8003102:	683b      	ldr	r3, [r7, #0]
 8003104:	685b      	ldr	r3, [r3, #4]
 8003106:	091b      	lsrs	r3, r3, #4
 8003108:	2201      	movs	r2, #1
 800310a:	401a      	ands	r2, r3
 800310c:	697b      	ldr	r3, [r7, #20]
 800310e:	409a      	lsls	r2, r3
 8003110:	0013      	movs	r3, r2
 8003112:	693a      	ldr	r2, [r7, #16]
 8003114:	4313      	orrs	r3, r2
 8003116:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	693a      	ldr	r2, [r7, #16]
 800311c:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	68db      	ldr	r3, [r3, #12]
 8003122:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003124:	697b      	ldr	r3, [r7, #20]
 8003126:	005b      	lsls	r3, r3, #1
 8003128:	2203      	movs	r2, #3
 800312a:	409a      	lsls	r2, r3
 800312c:	0013      	movs	r3, r2
 800312e:	43da      	mvns	r2, r3
 8003130:	693b      	ldr	r3, [r7, #16]
 8003132:	4013      	ands	r3, r2
 8003134:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Pull) << (position * 2U));
 8003136:	683b      	ldr	r3, [r7, #0]
 8003138:	689a      	ldr	r2, [r3, #8]
 800313a:	697b      	ldr	r3, [r7, #20]
 800313c:	005b      	lsls	r3, r3, #1
 800313e:	409a      	lsls	r2, r3
 8003140:	0013      	movs	r3, r2
 8003142:	693a      	ldr	r2, [r7, #16]
 8003144:	4313      	orrs	r3, r2
 8003146:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	693a      	ldr	r2, [r7, #16]
 800314c:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 800314e:	683b      	ldr	r3, [r7, #0]
 8003150:	685a      	ldr	r2, [r3, #4]
 8003152:	2380      	movs	r3, #128	; 0x80
 8003154:	055b      	lsls	r3, r3, #21
 8003156:	4013      	ands	r3, r2
 8003158:	d100      	bne.n	800315c <HAL_GPIO_Init+0x2bc>
 800315a:	e0b5      	b.n	80032c8 <HAL_GPIO_Init+0x428>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800315c:	4b26      	ldr	r3, [pc, #152]	; (80031f8 <HAL_GPIO_Init+0x358>)
 800315e:	699a      	ldr	r2, [r3, #24]
 8003160:	4b25      	ldr	r3, [pc, #148]	; (80031f8 <HAL_GPIO_Init+0x358>)
 8003162:	2101      	movs	r1, #1
 8003164:	430a      	orrs	r2, r1
 8003166:	619a      	str	r2, [r3, #24]
 8003168:	4b23      	ldr	r3, [pc, #140]	; (80031f8 <HAL_GPIO_Init+0x358>)
 800316a:	699b      	ldr	r3, [r3, #24]
 800316c:	2201      	movs	r2, #1
 800316e:	4013      	ands	r3, r2
 8003170:	60bb      	str	r3, [r7, #8]
 8003172:	68bb      	ldr	r3, [r7, #8]
  
        temp = SYSCFG->EXTICR[position >> 2];
 8003174:	4a21      	ldr	r2, [pc, #132]	; (80031fc <HAL_GPIO_Init+0x35c>)
 8003176:	697b      	ldr	r3, [r7, #20]
 8003178:	089b      	lsrs	r3, r3, #2
 800317a:	3302      	adds	r3, #2
 800317c:	009b      	lsls	r3, r3, #2
 800317e:	589b      	ldr	r3, [r3, r2]
 8003180:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8003182:	697b      	ldr	r3, [r7, #20]
 8003184:	2203      	movs	r2, #3
 8003186:	4013      	ands	r3, r2
 8003188:	009b      	lsls	r3, r3, #2
 800318a:	220f      	movs	r2, #15
 800318c:	409a      	lsls	r2, r3
 800318e:	0013      	movs	r3, r2
 8003190:	43da      	mvns	r2, r3
 8003192:	693b      	ldr	r3, [r7, #16]
 8003194:	4013      	ands	r3, r2
 8003196:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003198:	687a      	ldr	r2, [r7, #4]
 800319a:	2390      	movs	r3, #144	; 0x90
 800319c:	05db      	lsls	r3, r3, #23
 800319e:	429a      	cmp	r2, r3
 80031a0:	d02e      	beq.n	8003200 <HAL_GPIO_Init+0x360>
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	4a09      	ldr	r2, [pc, #36]	; (80031cc <HAL_GPIO_Init+0x32c>)
 80031a6:	4293      	cmp	r3, r2
 80031a8:	d00d      	beq.n	80031c6 <HAL_GPIO_Init+0x326>
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	4a08      	ldr	r2, [pc, #32]	; (80031d0 <HAL_GPIO_Init+0x330>)
 80031ae:	4293      	cmp	r3, r2
 80031b0:	d007      	beq.n	80031c2 <HAL_GPIO_Init+0x322>
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	4a07      	ldr	r2, [pc, #28]	; (80031d4 <HAL_GPIO_Init+0x334>)
 80031b6:	4293      	cmp	r3, r2
 80031b8:	d101      	bne.n	80031be <HAL_GPIO_Init+0x31e>
 80031ba:	2303      	movs	r3, #3
 80031bc:	e021      	b.n	8003202 <HAL_GPIO_Init+0x362>
 80031be:	2305      	movs	r3, #5
 80031c0:	e01f      	b.n	8003202 <HAL_GPIO_Init+0x362>
 80031c2:	2302      	movs	r3, #2
 80031c4:	e01d      	b.n	8003202 <HAL_GPIO_Init+0x362>
 80031c6:	2301      	movs	r3, #1
 80031c8:	e01b      	b.n	8003202 <HAL_GPIO_Init+0x362>
 80031ca:	46c0      	nop			; (mov r8, r8)
 80031cc:	48000400 	.word	0x48000400
 80031d0:	48000800 	.word	0x48000800
 80031d4:	48000c00 	.word	0x48000c00
 80031d8:	48001400 	.word	0x48001400
 80031dc:	08007088 	.word	0x08007088
 80031e0:	10110000 	.word	0x10110000
 80031e4:	10210000 	.word	0x10210000
 80031e8:	10310000 	.word	0x10310000
 80031ec:	10120000 	.word	0x10120000
 80031f0:	10220000 	.word	0x10220000
 80031f4:	10320000 	.word	0x10320000
 80031f8:	40021000 	.word	0x40021000
 80031fc:	40010000 	.word	0x40010000
 8003200:	2300      	movs	r3, #0
 8003202:	697a      	ldr	r2, [r7, #20]
 8003204:	2103      	movs	r1, #3
 8003206:	400a      	ands	r2, r1
 8003208:	0092      	lsls	r2, r2, #2
 800320a:	4093      	lsls	r3, r2
 800320c:	693a      	ldr	r2, [r7, #16]
 800320e:	4313      	orrs	r3, r2
 8003210:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2] = temp;
 8003212:	4934      	ldr	r1, [pc, #208]	; (80032e4 <HAL_GPIO_Init+0x444>)
 8003214:	697b      	ldr	r3, [r7, #20]
 8003216:	089b      	lsrs	r3, r3, #2
 8003218:	3302      	adds	r3, #2
 800321a:	009b      	lsls	r3, r3, #2
 800321c:	693a      	ldr	r2, [r7, #16]
 800321e:	505a      	str	r2, [r3, r1]
                  
        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003220:	4b31      	ldr	r3, [pc, #196]	; (80032e8 <HAL_GPIO_Init+0x448>)
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	43da      	mvns	r2, r3
 800322a:	693b      	ldr	r3, [r7, #16]
 800322c:	4013      	ands	r3, r2
 800322e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003230:	683b      	ldr	r3, [r7, #0]
 8003232:	685a      	ldr	r2, [r3, #4]
 8003234:	2380      	movs	r3, #128	; 0x80
 8003236:	025b      	lsls	r3, r3, #9
 8003238:	4013      	ands	r3, r2
 800323a:	d003      	beq.n	8003244 <HAL_GPIO_Init+0x3a4>
        {
          SET_BIT(temp, iocurrent); 
 800323c:	693a      	ldr	r2, [r7, #16]
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	4313      	orrs	r3, r2
 8003242:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8003244:	4b28      	ldr	r3, [pc, #160]	; (80032e8 <HAL_GPIO_Init+0x448>)
 8003246:	693a      	ldr	r2, [r7, #16]
 8003248:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 800324a:	4b27      	ldr	r3, [pc, #156]	; (80032e8 <HAL_GPIO_Init+0x448>)
 800324c:	685b      	ldr	r3, [r3, #4]
 800324e:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);      
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	43da      	mvns	r2, r3
 8003254:	693b      	ldr	r3, [r7, #16]
 8003256:	4013      	ands	r3, r2
 8003258:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800325a:	683b      	ldr	r3, [r7, #0]
 800325c:	685a      	ldr	r2, [r3, #4]
 800325e:	2380      	movs	r3, #128	; 0x80
 8003260:	029b      	lsls	r3, r3, #10
 8003262:	4013      	ands	r3, r2
 8003264:	d003      	beq.n	800326e <HAL_GPIO_Init+0x3ce>
        { 
          SET_BIT(temp, iocurrent); 
 8003266:	693a      	ldr	r2, [r7, #16]
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	4313      	orrs	r3, r2
 800326c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800326e:	4b1e      	ldr	r3, [pc, #120]	; (80032e8 <HAL_GPIO_Init+0x448>)
 8003270:	693a      	ldr	r2, [r7, #16]
 8003272:	605a      	str	r2, [r3, #4]
  
        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003274:	4b1c      	ldr	r3, [pc, #112]	; (80032e8 <HAL_GPIO_Init+0x448>)
 8003276:	689b      	ldr	r3, [r3, #8]
 8003278:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	43da      	mvns	r2, r3
 800327e:	693b      	ldr	r3, [r7, #16]
 8003280:	4013      	ands	r3, r2
 8003282:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003284:	683b      	ldr	r3, [r7, #0]
 8003286:	685a      	ldr	r2, [r3, #4]
 8003288:	2380      	movs	r3, #128	; 0x80
 800328a:	035b      	lsls	r3, r3, #13
 800328c:	4013      	ands	r3, r2
 800328e:	d003      	beq.n	8003298 <HAL_GPIO_Init+0x3f8>
        {
          SET_BIT(temp, iocurrent); 
 8003290:	693a      	ldr	r2, [r7, #16]
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	4313      	orrs	r3, r2
 8003296:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8003298:	4b13      	ldr	r3, [pc, #76]	; (80032e8 <HAL_GPIO_Init+0x448>)
 800329a:	693a      	ldr	r2, [r7, #16]
 800329c:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 800329e:	4b12      	ldr	r3, [pc, #72]	; (80032e8 <HAL_GPIO_Init+0x448>)
 80032a0:	68db      	ldr	r3, [r3, #12]
 80032a2:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	43da      	mvns	r2, r3
 80032a8:	693b      	ldr	r3, [r7, #16]
 80032aa:	4013      	ands	r3, r2
 80032ac:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80032ae:	683b      	ldr	r3, [r7, #0]
 80032b0:	685a      	ldr	r2, [r3, #4]
 80032b2:	2380      	movs	r3, #128	; 0x80
 80032b4:	039b      	lsls	r3, r3, #14
 80032b6:	4013      	ands	r3, r2
 80032b8:	d003      	beq.n	80032c2 <HAL_GPIO_Init+0x422>
        {
          SET_BIT(temp, iocurrent); 
 80032ba:	693a      	ldr	r2, [r7, #16]
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	4313      	orrs	r3, r2
 80032c0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80032c2:	4b09      	ldr	r3, [pc, #36]	; (80032e8 <HAL_GPIO_Init+0x448>)
 80032c4:	693a      	ldr	r2, [r7, #16]
 80032c6:	60da      	str	r2, [r3, #12]
      }
    }
    
    position++;
 80032c8:	697b      	ldr	r3, [r7, #20]
 80032ca:	3301      	adds	r3, #1
 80032cc:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != RESET)
 80032ce:	683b      	ldr	r3, [r7, #0]
 80032d0:	681a      	ldr	r2, [r3, #0]
 80032d2:	697b      	ldr	r3, [r7, #20]
 80032d4:	40da      	lsrs	r2, r3
 80032d6:	1e13      	subs	r3, r2, #0
 80032d8:	d000      	beq.n	80032dc <HAL_GPIO_Init+0x43c>
 80032da:	e665      	b.n	8002fa8 <HAL_GPIO_Init+0x108>
  } 
}
 80032dc:	46c0      	nop			; (mov r8, r8)
 80032de:	46bd      	mov	sp, r7
 80032e0:	b006      	add	sp, #24
 80032e2:	bd80      	pop	{r7, pc}
 80032e4:	40010000 	.word	0x40010000
 80032e8:	40010400 	.word	0x40010400

080032ec <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80032ec:	b580      	push	{r7, lr}
 80032ee:	b084      	sub	sp, #16
 80032f0:	af00      	add	r7, sp, #0
 80032f2:	6078      	str	r0, [r7, #4]
 80032f4:	000a      	movs	r2, r1
 80032f6:	1cbb      	adds	r3, r7, #2
 80032f8:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 80032fa:	1cbb      	adds	r3, r7, #2
 80032fc:	881b      	ldrh	r3, [r3, #0]
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d004      	beq.n	800330c <HAL_GPIO_ReadPin+0x20>
 8003302:	1cbb      	adds	r3, r7, #2
 8003304:	881b      	ldrh	r3, [r3, #0]
 8003306:	0c1b      	lsrs	r3, r3, #16
 8003308:	041b      	lsls	r3, r3, #16
 800330a:	d007      	beq.n	800331c <HAL_GPIO_ReadPin+0x30>
 800330c:	238e      	movs	r3, #142	; 0x8e
 800330e:	33ff      	adds	r3, #255	; 0xff
 8003310:	001a      	movs	r2, r3
 8003312:	4b0d      	ldr	r3, [pc, #52]	; (8003348 <HAL_GPIO_ReadPin+0x5c>)
 8003314:	0011      	movs	r1, r2
 8003316:	0018      	movs	r0, r3
 8003318:	f7fd fb1b 	bl	8000952 <assert_failed>

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	691b      	ldr	r3, [r3, #16]
 8003320:	1cba      	adds	r2, r7, #2
 8003322:	8812      	ldrh	r2, [r2, #0]
 8003324:	4013      	ands	r3, r2
 8003326:	d004      	beq.n	8003332 <HAL_GPIO_ReadPin+0x46>
  {
    bitstatus = GPIO_PIN_SET;
 8003328:	230f      	movs	r3, #15
 800332a:	18fb      	adds	r3, r7, r3
 800332c:	2201      	movs	r2, #1
 800332e:	701a      	strb	r2, [r3, #0]
 8003330:	e003      	b.n	800333a <HAL_GPIO_ReadPin+0x4e>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003332:	230f      	movs	r3, #15
 8003334:	18fb      	adds	r3, r7, r3
 8003336:	2200      	movs	r2, #0
 8003338:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 800333a:	230f      	movs	r3, #15
 800333c:	18fb      	adds	r3, r7, r3
 800333e:	781b      	ldrb	r3, [r3, #0]
  }
 8003340:	0018      	movs	r0, r3
 8003342:	46bd      	mov	sp, r7
 8003344:	b004      	add	sp, #16
 8003346:	bd80      	pop	{r7, pc}
 8003348:	08007088 	.word	0x08007088

0800334c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800334c:	b580      	push	{r7, lr}
 800334e:	b082      	sub	sp, #8
 8003350:	af00      	add	r7, sp, #0
 8003352:	6078      	str	r0, [r7, #4]
 8003354:	0008      	movs	r0, r1
 8003356:	0011      	movs	r1, r2
 8003358:	1cbb      	adds	r3, r7, #2
 800335a:	1c02      	adds	r2, r0, #0
 800335c:	801a      	strh	r2, [r3, #0]
 800335e:	1c7b      	adds	r3, r7, #1
 8003360:	1c0a      	adds	r2, r1, #0
 8003362:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 8003364:	1cbb      	adds	r3, r7, #2
 8003366:	881b      	ldrh	r3, [r3, #0]
 8003368:	2b00      	cmp	r3, #0
 800336a:	d004      	beq.n	8003376 <HAL_GPIO_WritePin+0x2a>
 800336c:	1cbb      	adds	r3, r7, #2
 800336e:	881b      	ldrh	r3, [r3, #0]
 8003370:	0c1b      	lsrs	r3, r3, #16
 8003372:	041b      	lsls	r3, r3, #16
 8003374:	d006      	beq.n	8003384 <HAL_GPIO_WritePin+0x38>
 8003376:	23d6      	movs	r3, #214	; 0xd6
 8003378:	005a      	lsls	r2, r3, #1
 800337a:	4b13      	ldr	r3, [pc, #76]	; (80033c8 <HAL_GPIO_WritePin+0x7c>)
 800337c:	0011      	movs	r1, r2
 800337e:	0018      	movs	r0, r3
 8003380:	f7fd fae7 	bl	8000952 <assert_failed>
  assert_param(IS_GPIO_PIN_ACTION(PinState));
 8003384:	1c7b      	adds	r3, r7, #1
 8003386:	781b      	ldrb	r3, [r3, #0]
 8003388:	2b00      	cmp	r3, #0
 800338a:	d00b      	beq.n	80033a4 <HAL_GPIO_WritePin+0x58>
 800338c:	1c7b      	adds	r3, r7, #1
 800338e:	781b      	ldrb	r3, [r3, #0]
 8003390:	2b01      	cmp	r3, #1
 8003392:	d007      	beq.n	80033a4 <HAL_GPIO_WritePin+0x58>
 8003394:	23ae      	movs	r3, #174	; 0xae
 8003396:	33ff      	adds	r3, #255	; 0xff
 8003398:	001a      	movs	r2, r3
 800339a:	4b0b      	ldr	r3, [pc, #44]	; (80033c8 <HAL_GPIO_WritePin+0x7c>)
 800339c:	0011      	movs	r1, r2
 800339e:	0018      	movs	r0, r3
 80033a0:	f7fd fad7 	bl	8000952 <assert_failed>

  if (PinState != GPIO_PIN_RESET)
 80033a4:	1c7b      	adds	r3, r7, #1
 80033a6:	781b      	ldrb	r3, [r3, #0]
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d004      	beq.n	80033b6 <HAL_GPIO_WritePin+0x6a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80033ac:	1cbb      	adds	r3, r7, #2
 80033ae:	881a      	ldrh	r2, [r3, #0]
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80033b4:	e003      	b.n	80033be <HAL_GPIO_WritePin+0x72>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80033b6:	1cbb      	adds	r3, r7, #2
 80033b8:	881a      	ldrh	r2, [r3, #0]
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	629a      	str	r2, [r3, #40]	; 0x28
}
 80033be:	46c0      	nop			; (mov r8, r8)
 80033c0:	46bd      	mov	sp, r7
 80033c2:	b002      	add	sp, #8
 80033c4:	bd80      	pop	{r7, pc}
 80033c6:	46c0      	nop			; (mov r8, r8)
 80033c8:	08007088 	.word	0x08007088

080033cc <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F0 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80033cc:	b580      	push	{r7, lr}
 80033ce:	b082      	sub	sp, #8
 80033d0:	af00      	add	r7, sp, #0
 80033d2:	6078      	str	r0, [r7, #4]
 80033d4:	000a      	movs	r2, r1
 80033d6:	1cbb      	adds	r3, r7, #2
 80033d8:	801a      	strh	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 80033da:	1cbb      	adds	r3, r7, #2
 80033dc:	881b      	ldrh	r3, [r3, #0]
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d004      	beq.n	80033ec <HAL_GPIO_TogglePin+0x20>
 80033e2:	1cbb      	adds	r3, r7, #2
 80033e4:	881b      	ldrh	r3, [r3, #0]
 80033e6:	0c1b      	lsrs	r3, r3, #16
 80033e8:	041b      	lsls	r3, r3, #16
 80033ea:	d006      	beq.n	80033fa <HAL_GPIO_TogglePin+0x2e>
 80033ec:	23e1      	movs	r3, #225	; 0xe1
 80033ee:	005a      	lsls	r2, r3, #1
 80033f0:	4b07      	ldr	r3, [pc, #28]	; (8003410 <HAL_GPIO_TogglePin+0x44>)
 80033f2:	0011      	movs	r1, r2
 80033f4:	0018      	movs	r0, r3
 80033f6:	f7fd faac 	bl	8000952 <assert_failed>

  GPIOx->ODR ^= GPIO_Pin;
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	695a      	ldr	r2, [r3, #20]
 80033fe:	1cbb      	adds	r3, r7, #2
 8003400:	881b      	ldrh	r3, [r3, #0]
 8003402:	405a      	eors	r2, r3
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	615a      	str	r2, [r3, #20]
}
 8003408:	46c0      	nop			; (mov r8, r8)
 800340a:	46bd      	mov	sp, r7
 800340c:	b002      	add	sp, #8
 800340e:	bd80      	pop	{r7, pc}
 8003410:	08007088 	.word	0x08007088

08003414 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003414:	b580      	push	{r7, lr}
 8003416:	b082      	sub	sp, #8
 8003418:	af00      	add	r7, sp, #0
 800341a:	0002      	movs	r2, r0
 800341c:	1dbb      	adds	r3, r7, #6
 800341e:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET) 
 8003420:	4b09      	ldr	r3, [pc, #36]	; (8003448 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8003422:	695b      	ldr	r3, [r3, #20]
 8003424:	1dba      	adds	r2, r7, #6
 8003426:	8812      	ldrh	r2, [r2, #0]
 8003428:	4013      	ands	r3, r2
 800342a:	d008      	beq.n	800343e <HAL_GPIO_EXTI_IRQHandler+0x2a>
  { 
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800342c:	4b06      	ldr	r3, [pc, #24]	; (8003448 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 800342e:	1dba      	adds	r2, r7, #6
 8003430:	8812      	ldrh	r2, [r2, #0]
 8003432:	615a      	str	r2, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003434:	1dbb      	adds	r3, r7, #6
 8003436:	881b      	ldrh	r3, [r3, #0]
 8003438:	0018      	movs	r0, r3
 800343a:	f7fd fa65 	bl	8000908 <HAL_GPIO_EXTI_Callback>
  }
}
 800343e:	46c0      	nop			; (mov r8, r8)
 8003440:	46bd      	mov	sp, r7
 8003442:	b002      	add	sp, #8
 8003444:	bd80      	pop	{r7, pc}
 8003446:	46c0      	nop			; (mov r8, r8)
 8003448:	40010400 	.word	0x40010400

0800344c <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 800344c:	b580      	push	{r7, lr}
 800344e:	b084      	sub	sp, #16
 8003450:	af00      	add	r7, sp, #0
 8003452:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if(hiwdg == NULL)
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	2b00      	cmp	r3, #0
 8003458:	d101      	bne.n	800345e <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
 800345a:	2301      	movs	r3, #1
 800345c:	e075      	b.n	800354a <HAL_IWDG_Init+0xfe>
  }

  /* Check the parameters */
  assert_param(IS_IWDG_ALL_INSTANCE(hiwdg->Instance));
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	4a3c      	ldr	r2, [pc, #240]	; (8003554 <HAL_IWDG_Init+0x108>)
 8003464:	4293      	cmp	r3, r2
 8003466:	d004      	beq.n	8003472 <HAL_IWDG_Init+0x26>
 8003468:	4b3b      	ldr	r3, [pc, #236]	; (8003558 <HAL_IWDG_Init+0x10c>)
 800346a:	21b5      	movs	r1, #181	; 0xb5
 800346c:	0018      	movs	r0, r3
 800346e:	f7fd fa70 	bl	8000952 <assert_failed>
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	685b      	ldr	r3, [r3, #4]
 8003476:	2b00      	cmp	r3, #0
 8003478:	d01c      	beq.n	80034b4 <HAL_IWDG_Init+0x68>
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	685b      	ldr	r3, [r3, #4]
 800347e:	2b01      	cmp	r3, #1
 8003480:	d018      	beq.n	80034b4 <HAL_IWDG_Init+0x68>
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	685b      	ldr	r3, [r3, #4]
 8003486:	2b02      	cmp	r3, #2
 8003488:	d014      	beq.n	80034b4 <HAL_IWDG_Init+0x68>
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	685b      	ldr	r3, [r3, #4]
 800348e:	2b03      	cmp	r3, #3
 8003490:	d010      	beq.n	80034b4 <HAL_IWDG_Init+0x68>
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	685b      	ldr	r3, [r3, #4]
 8003496:	2b04      	cmp	r3, #4
 8003498:	d00c      	beq.n	80034b4 <HAL_IWDG_Init+0x68>
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	685b      	ldr	r3, [r3, #4]
 800349e:	2b05      	cmp	r3, #5
 80034a0:	d008      	beq.n	80034b4 <HAL_IWDG_Init+0x68>
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	685b      	ldr	r3, [r3, #4]
 80034a6:	2b06      	cmp	r3, #6
 80034a8:	d004      	beq.n	80034b4 <HAL_IWDG_Init+0x68>
 80034aa:	4b2b      	ldr	r3, [pc, #172]	; (8003558 <HAL_IWDG_Init+0x10c>)
 80034ac:	21b6      	movs	r1, #182	; 0xb6
 80034ae:	0018      	movs	r0, r3
 80034b0:	f7fd fa4f 	bl	8000952 <assert_failed>
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	689b      	ldr	r3, [r3, #8]
 80034b8:	4a28      	ldr	r2, [pc, #160]	; (800355c <HAL_IWDG_Init+0x110>)
 80034ba:	4293      	cmp	r3, r2
 80034bc:	d904      	bls.n	80034c8 <HAL_IWDG_Init+0x7c>
 80034be:	4b26      	ldr	r3, [pc, #152]	; (8003558 <HAL_IWDG_Init+0x10c>)
 80034c0:	21b7      	movs	r1, #183	; 0xb7
 80034c2:	0018      	movs	r0, r3
 80034c4:	f7fd fa45 	bl	8000952 <assert_failed>
  assert_param(IS_IWDG_WINDOW(hiwdg->Init.Window));
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	68db      	ldr	r3, [r3, #12]
 80034cc:	4a23      	ldr	r2, [pc, #140]	; (800355c <HAL_IWDG_Init+0x110>)
 80034ce:	4293      	cmp	r3, r2
 80034d0:	d904      	bls.n	80034dc <HAL_IWDG_Init+0x90>
 80034d2:	4b21      	ldr	r3, [pc, #132]	; (8003558 <HAL_IWDG_Init+0x10c>)
 80034d4:	21b8      	movs	r1, #184	; 0xb8
 80034d6:	0018      	movs	r0, r3
 80034d8:	f7fd fa3b 	bl	8000952 <assert_failed>

  /* Enable IWDG. LSI is turned on automaticaly */
  __HAL_IWDG_START(hiwdg);
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	4a1f      	ldr	r2, [pc, #124]	; (8003560 <HAL_IWDG_Init+0x114>)
 80034e2:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR, IWDG_RLR and IWDG_WINR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	4a1e      	ldr	r2, [pc, #120]	; (8003564 <HAL_IWDG_Init+0x118>)
 80034ea:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	687a      	ldr	r2, [r7, #4]
 80034f2:	6852      	ldr	r2, [r2, #4]
 80034f4:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	687a      	ldr	r2, [r7, #4]
 80034fc:	6892      	ldr	r2, [r2, #8]
 80034fe:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 8003500:	f7fe f964 	bl	80017cc <HAL_GetTick>
 8003504:	0003      	movs	r3, r0
 8003506:	60fb      	str	r3, [r7, #12]

   /* Wait for register to be updated */
  while(hiwdg->Instance->SR != RESET)
 8003508:	e008      	b.n	800351c <HAL_IWDG_Init+0xd0>
  {
    if((HAL_GetTick() - tickstart ) > HAL_IWDG_DEFAULT_TIMEOUT)
 800350a:	f7fe f95f 	bl	80017cc <HAL_GetTick>
 800350e:	0002      	movs	r2, r0
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	1ad3      	subs	r3, r2, r3
 8003514:	2b27      	cmp	r3, #39	; 0x27
 8003516:	d901      	bls.n	800351c <HAL_IWDG_Init+0xd0>
    {
      return HAL_TIMEOUT;
 8003518:	2303      	movs	r3, #3
 800351a:	e016      	b.n	800354a <HAL_IWDG_Init+0xfe>
  while(hiwdg->Instance->SR != RESET)
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	68db      	ldr	r3, [r3, #12]
 8003522:	2b00      	cmp	r3, #0
 8003524:	d1f1      	bne.n	800350a <HAL_IWDG_Init+0xbe>
    }
  }

  /* If window parameter is different than current value, modify window 
  register */
  if(hiwdg->Instance->WINR != hiwdg->Init.Window)
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	691a      	ldr	r2, [r3, #16]
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	68db      	ldr	r3, [r3, #12]
 8003530:	429a      	cmp	r2, r3
 8003532:	d005      	beq.n	8003540 <HAL_IWDG_Init+0xf4>
  {
    /* Write to IWDG WINR the IWDG_Window value to compare with. In any case,
    even if window feature is disabled, Watchdog will be reloaded by writing 
    windows register */
    hiwdg->Instance->WINR = hiwdg->Init.Window;
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	687a      	ldr	r2, [r7, #4]
 800353a:	68d2      	ldr	r2, [r2, #12]
 800353c:	611a      	str	r2, [r3, #16]
 800353e:	e003      	b.n	8003548 <HAL_IWDG_Init+0xfc>
  }
  else
  {
    /* Reload IWDG counter with value defined in the reload register */
    __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	4a08      	ldr	r2, [pc, #32]	; (8003568 <HAL_IWDG_Init+0x11c>)
 8003546:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003548:	2300      	movs	r3, #0
}
 800354a:	0018      	movs	r0, r3
 800354c:	46bd      	mov	sp, r7
 800354e:	b004      	add	sp, #16
 8003550:	bd80      	pop	{r7, pc}
 8003552:	46c0      	nop			; (mov r8, r8)
 8003554:	40003000 	.word	0x40003000
 8003558:	080070c4 	.word	0x080070c4
 800355c:	00000fff 	.word	0x00000fff
 8003560:	0000cccc 	.word	0x0000cccc
 8003564:	00005555 	.word	0x00005555
 8003568:	0000aaaa 	.word	0x0000aaaa

0800356c <HAL_IWDG_Refresh>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
 800356c:	b580      	push	{r7, lr}
 800356e:	b082      	sub	sp, #8
 8003570:	af00      	add	r7, sp, #0
 8003572:	6078      	str	r0, [r7, #4]
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	4a03      	ldr	r2, [pc, #12]	; (8003588 <HAL_IWDG_Refresh+0x1c>)
 800357a:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800357c:	2300      	movs	r3, #0
}
 800357e:	0018      	movs	r0, r3
 8003580:	46bd      	mov	sp, r7
 8003582:	b002      	add	sp, #8
 8003584:	bd80      	pop	{r7, pc}
 8003586:	46c0      	nop			; (mov r8, r8)
 8003588:	0000aaaa 	.word	0x0000aaaa

0800358c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800358c:	b580      	push	{r7, lr}
 800358e:	b086      	sub	sp, #24
 8003590:	af00      	add	r7, sp, #0
 8003592:	6078      	str	r0, [r7, #4]
   uint32_t tickstart = 0U;
 8003594:	2300      	movs	r3, #0
 8003596:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	2b00      	cmp	r3, #0
 800359c:	d106      	bne.n	80035ac <HAL_RCC_OscConfig+0x20>
 800359e:	2389      	movs	r3, #137	; 0x89
 80035a0:	005a      	lsls	r2, r3, #1
 80035a2:	4bc6      	ldr	r3, [pc, #792]	; (80038bc <HAL_RCC_OscConfig+0x330>)
 80035a4:	0011      	movs	r1, r2
 80035a6:	0018      	movs	r0, r3
 80035a8:	f7fd f9d3 	bl	8000952 <assert_failed>
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d020      	beq.n	80035f6 <HAL_RCC_OscConfig+0x6a>
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	2201      	movs	r2, #1
 80035ba:	4013      	ands	r3, r2
 80035bc:	d11b      	bne.n	80035f6 <HAL_RCC_OscConfig+0x6a>
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	2202      	movs	r2, #2
 80035c4:	4013      	ands	r3, r2
 80035c6:	d116      	bne.n	80035f6 <HAL_RCC_OscConfig+0x6a>
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	2208      	movs	r2, #8
 80035ce:	4013      	ands	r3, r2
 80035d0:	d111      	bne.n	80035f6 <HAL_RCC_OscConfig+0x6a>
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	2204      	movs	r2, #4
 80035d8:	4013      	ands	r3, r2
 80035da:	d10c      	bne.n	80035f6 <HAL_RCC_OscConfig+0x6a>
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	2210      	movs	r2, #16
 80035e2:	4013      	ands	r3, r2
 80035e4:	d107      	bne.n	80035f6 <HAL_RCC_OscConfig+0x6a>
 80035e6:	2314      	movs	r3, #20
 80035e8:	33ff      	adds	r3, #255	; 0xff
 80035ea:	001a      	movs	r2, r3
 80035ec:	4bb3      	ldr	r3, [pc, #716]	; (80038bc <HAL_RCC_OscConfig+0x330>)
 80035ee:	0011      	movs	r1, r2
 80035f0:	0018      	movs	r0, r3
 80035f2:	f7fd f9ae 	bl	8000952 <assert_failed>

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	2201      	movs	r2, #1
 80035fc:	4013      	ands	r3, r2
 80035fe:	d100      	bne.n	8003602 <HAL_RCC_OscConfig+0x76>
 8003600:	e0a4      	b.n	800374c <HAL_RCC_OscConfig+0x1c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	685b      	ldr	r3, [r3, #4]
 8003606:	2b00      	cmp	r3, #0
 8003608:	d00f      	beq.n	800362a <HAL_RCC_OscConfig+0x9e>
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	685b      	ldr	r3, [r3, #4]
 800360e:	2b01      	cmp	r3, #1
 8003610:	d00b      	beq.n	800362a <HAL_RCC_OscConfig+0x9e>
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	685b      	ldr	r3, [r3, #4]
 8003616:	2b05      	cmp	r3, #5
 8003618:	d007      	beq.n	800362a <HAL_RCC_OscConfig+0x9e>
 800361a:	231a      	movs	r3, #26
 800361c:	33ff      	adds	r3, #255	; 0xff
 800361e:	001a      	movs	r2, r3
 8003620:	4ba6      	ldr	r3, [pc, #664]	; (80038bc <HAL_RCC_OscConfig+0x330>)
 8003622:	0011      	movs	r1, r2
 8003624:	0018      	movs	r0, r3
 8003626:	f7fd f994 	bl	8000952 <assert_failed>

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800362a:	4ba5      	ldr	r3, [pc, #660]	; (80038c0 <HAL_RCC_OscConfig+0x334>)
 800362c:	685b      	ldr	r3, [r3, #4]
 800362e:	220c      	movs	r2, #12
 8003630:	4013      	ands	r3, r2
 8003632:	2b04      	cmp	r3, #4
 8003634:	d00e      	beq.n	8003654 <HAL_RCC_OscConfig+0xc8>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003636:	4ba2      	ldr	r3, [pc, #648]	; (80038c0 <HAL_RCC_OscConfig+0x334>)
 8003638:	685b      	ldr	r3, [r3, #4]
 800363a:	220c      	movs	r2, #12
 800363c:	4013      	ands	r3, r2
 800363e:	2b08      	cmp	r3, #8
 8003640:	d117      	bne.n	8003672 <HAL_RCC_OscConfig+0xe6>
 8003642:	4b9f      	ldr	r3, [pc, #636]	; (80038c0 <HAL_RCC_OscConfig+0x334>)
 8003644:	685a      	ldr	r2, [r3, #4]
 8003646:	2380      	movs	r3, #128	; 0x80
 8003648:	025b      	lsls	r3, r3, #9
 800364a:	401a      	ands	r2, r3
 800364c:	2380      	movs	r3, #128	; 0x80
 800364e:	025b      	lsls	r3, r3, #9
 8003650:	429a      	cmp	r2, r3
 8003652:	d10e      	bne.n	8003672 <HAL_RCC_OscConfig+0xe6>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003654:	4b9a      	ldr	r3, [pc, #616]	; (80038c0 <HAL_RCC_OscConfig+0x334>)
 8003656:	681a      	ldr	r2, [r3, #0]
 8003658:	2380      	movs	r3, #128	; 0x80
 800365a:	029b      	lsls	r3, r3, #10
 800365c:	4013      	ands	r3, r2
 800365e:	d100      	bne.n	8003662 <HAL_RCC_OscConfig+0xd6>
 8003660:	e073      	b.n	800374a <HAL_RCC_OscConfig+0x1be>
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	685b      	ldr	r3, [r3, #4]
 8003666:	2b00      	cmp	r3, #0
 8003668:	d000      	beq.n	800366c <HAL_RCC_OscConfig+0xe0>
 800366a:	e06e      	b.n	800374a <HAL_RCC_OscConfig+0x1be>
      {
        return HAL_ERROR;
 800366c:	2301      	movs	r3, #1
 800366e:	f000 fbe9 	bl	8003e44 <HAL_RCC_OscConfig+0x8b8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	685b      	ldr	r3, [r3, #4]
 8003676:	2b01      	cmp	r3, #1
 8003678:	d107      	bne.n	800368a <HAL_RCC_OscConfig+0xfe>
 800367a:	4b91      	ldr	r3, [pc, #580]	; (80038c0 <HAL_RCC_OscConfig+0x334>)
 800367c:	681a      	ldr	r2, [r3, #0]
 800367e:	4b90      	ldr	r3, [pc, #576]	; (80038c0 <HAL_RCC_OscConfig+0x334>)
 8003680:	2180      	movs	r1, #128	; 0x80
 8003682:	0249      	lsls	r1, r1, #9
 8003684:	430a      	orrs	r2, r1
 8003686:	601a      	str	r2, [r3, #0]
 8003688:	e02f      	b.n	80036ea <HAL_RCC_OscConfig+0x15e>
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	685b      	ldr	r3, [r3, #4]
 800368e:	2b00      	cmp	r3, #0
 8003690:	d10c      	bne.n	80036ac <HAL_RCC_OscConfig+0x120>
 8003692:	4b8b      	ldr	r3, [pc, #556]	; (80038c0 <HAL_RCC_OscConfig+0x334>)
 8003694:	681a      	ldr	r2, [r3, #0]
 8003696:	4b8a      	ldr	r3, [pc, #552]	; (80038c0 <HAL_RCC_OscConfig+0x334>)
 8003698:	498a      	ldr	r1, [pc, #552]	; (80038c4 <HAL_RCC_OscConfig+0x338>)
 800369a:	400a      	ands	r2, r1
 800369c:	601a      	str	r2, [r3, #0]
 800369e:	4b88      	ldr	r3, [pc, #544]	; (80038c0 <HAL_RCC_OscConfig+0x334>)
 80036a0:	681a      	ldr	r2, [r3, #0]
 80036a2:	4b87      	ldr	r3, [pc, #540]	; (80038c0 <HAL_RCC_OscConfig+0x334>)
 80036a4:	4988      	ldr	r1, [pc, #544]	; (80038c8 <HAL_RCC_OscConfig+0x33c>)
 80036a6:	400a      	ands	r2, r1
 80036a8:	601a      	str	r2, [r3, #0]
 80036aa:	e01e      	b.n	80036ea <HAL_RCC_OscConfig+0x15e>
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	685b      	ldr	r3, [r3, #4]
 80036b0:	2b05      	cmp	r3, #5
 80036b2:	d10e      	bne.n	80036d2 <HAL_RCC_OscConfig+0x146>
 80036b4:	4b82      	ldr	r3, [pc, #520]	; (80038c0 <HAL_RCC_OscConfig+0x334>)
 80036b6:	681a      	ldr	r2, [r3, #0]
 80036b8:	4b81      	ldr	r3, [pc, #516]	; (80038c0 <HAL_RCC_OscConfig+0x334>)
 80036ba:	2180      	movs	r1, #128	; 0x80
 80036bc:	02c9      	lsls	r1, r1, #11
 80036be:	430a      	orrs	r2, r1
 80036c0:	601a      	str	r2, [r3, #0]
 80036c2:	4b7f      	ldr	r3, [pc, #508]	; (80038c0 <HAL_RCC_OscConfig+0x334>)
 80036c4:	681a      	ldr	r2, [r3, #0]
 80036c6:	4b7e      	ldr	r3, [pc, #504]	; (80038c0 <HAL_RCC_OscConfig+0x334>)
 80036c8:	2180      	movs	r1, #128	; 0x80
 80036ca:	0249      	lsls	r1, r1, #9
 80036cc:	430a      	orrs	r2, r1
 80036ce:	601a      	str	r2, [r3, #0]
 80036d0:	e00b      	b.n	80036ea <HAL_RCC_OscConfig+0x15e>
 80036d2:	4b7b      	ldr	r3, [pc, #492]	; (80038c0 <HAL_RCC_OscConfig+0x334>)
 80036d4:	681a      	ldr	r2, [r3, #0]
 80036d6:	4b7a      	ldr	r3, [pc, #488]	; (80038c0 <HAL_RCC_OscConfig+0x334>)
 80036d8:	497a      	ldr	r1, [pc, #488]	; (80038c4 <HAL_RCC_OscConfig+0x338>)
 80036da:	400a      	ands	r2, r1
 80036dc:	601a      	str	r2, [r3, #0]
 80036de:	4b78      	ldr	r3, [pc, #480]	; (80038c0 <HAL_RCC_OscConfig+0x334>)
 80036e0:	681a      	ldr	r2, [r3, #0]
 80036e2:	4b77      	ldr	r3, [pc, #476]	; (80038c0 <HAL_RCC_OscConfig+0x334>)
 80036e4:	4978      	ldr	r1, [pc, #480]	; (80038c8 <HAL_RCC_OscConfig+0x33c>)
 80036e6:	400a      	ands	r2, r1
 80036e8:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	685b      	ldr	r3, [r3, #4]
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d015      	beq.n	800371e <HAL_RCC_OscConfig+0x192>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036f2:	f7fe f86b 	bl	80017cc <HAL_GetTick>
 80036f6:	0003      	movs	r3, r0
 80036f8:	613b      	str	r3, [r7, #16]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80036fa:	e009      	b.n	8003710 <HAL_RCC_OscConfig+0x184>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80036fc:	f7fe f866 	bl	80017cc <HAL_GetTick>
 8003700:	0002      	movs	r2, r0
 8003702:	693b      	ldr	r3, [r7, #16]
 8003704:	1ad3      	subs	r3, r2, r3
 8003706:	2b64      	cmp	r3, #100	; 0x64
 8003708:	d902      	bls.n	8003710 <HAL_RCC_OscConfig+0x184>
          {
            return HAL_TIMEOUT;
 800370a:	2303      	movs	r3, #3
 800370c:	f000 fb9a 	bl	8003e44 <HAL_RCC_OscConfig+0x8b8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003710:	4b6b      	ldr	r3, [pc, #428]	; (80038c0 <HAL_RCC_OscConfig+0x334>)
 8003712:	681a      	ldr	r2, [r3, #0]
 8003714:	2380      	movs	r3, #128	; 0x80
 8003716:	029b      	lsls	r3, r3, #10
 8003718:	4013      	ands	r3, r2
 800371a:	d0ef      	beq.n	80036fc <HAL_RCC_OscConfig+0x170>
 800371c:	e016      	b.n	800374c <HAL_RCC_OscConfig+0x1c0>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800371e:	f7fe f855 	bl	80017cc <HAL_GetTick>
 8003722:	0003      	movs	r3, r0
 8003724:	613b      	str	r3, [r7, #16]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003726:	e009      	b.n	800373c <HAL_RCC_OscConfig+0x1b0>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003728:	f7fe f850 	bl	80017cc <HAL_GetTick>
 800372c:	0002      	movs	r2, r0
 800372e:	693b      	ldr	r3, [r7, #16]
 8003730:	1ad3      	subs	r3, r2, r3
 8003732:	2b64      	cmp	r3, #100	; 0x64
 8003734:	d902      	bls.n	800373c <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 8003736:	2303      	movs	r3, #3
 8003738:	f000 fb84 	bl	8003e44 <HAL_RCC_OscConfig+0x8b8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800373c:	4b60      	ldr	r3, [pc, #384]	; (80038c0 <HAL_RCC_OscConfig+0x334>)
 800373e:	681a      	ldr	r2, [r3, #0]
 8003740:	2380      	movs	r3, #128	; 0x80
 8003742:	029b      	lsls	r3, r3, #10
 8003744:	4013      	ands	r3, r2
 8003746:	d1ef      	bne.n	8003728 <HAL_RCC_OscConfig+0x19c>
 8003748:	e000      	b.n	800374c <HAL_RCC_OscConfig+0x1c0>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800374a:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	2202      	movs	r2, #2
 8003752:	4013      	ands	r3, r2
 8003754:	d100      	bne.n	8003758 <HAL_RCC_OscConfig+0x1cc>
 8003756:	e085      	b.n	8003864 <HAL_RCC_OscConfig+0x2d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	68db      	ldr	r3, [r3, #12]
 800375c:	2b00      	cmp	r3, #0
 800375e:	d00b      	beq.n	8003778 <HAL_RCC_OscConfig+0x1ec>
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	68db      	ldr	r3, [r3, #12]
 8003764:	2b01      	cmp	r3, #1
 8003766:	d007      	beq.n	8003778 <HAL_RCC_OscConfig+0x1ec>
 8003768:	234e      	movs	r3, #78	; 0x4e
 800376a:	33ff      	adds	r3, #255	; 0xff
 800376c:	001a      	movs	r2, r3
 800376e:	4b53      	ldr	r3, [pc, #332]	; (80038bc <HAL_RCC_OscConfig+0x330>)
 8003770:	0011      	movs	r1, r2
 8003772:	0018      	movs	r0, r3
 8003774:	f7fd f8ed 	bl	8000952 <assert_failed>
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	691b      	ldr	r3, [r3, #16]
 800377c:	2b1f      	cmp	r3, #31
 800377e:	d906      	bls.n	800378e <HAL_RCC_OscConfig+0x202>
 8003780:	23a7      	movs	r3, #167	; 0xa7
 8003782:	005a      	lsls	r2, r3, #1
 8003784:	4b4d      	ldr	r3, [pc, #308]	; (80038bc <HAL_RCC_OscConfig+0x330>)
 8003786:	0011      	movs	r1, r2
 8003788:	0018      	movs	r0, r3
 800378a:	f7fd f8e2 	bl	8000952 <assert_failed>
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800378e:	4b4c      	ldr	r3, [pc, #304]	; (80038c0 <HAL_RCC_OscConfig+0x334>)
 8003790:	685b      	ldr	r3, [r3, #4]
 8003792:	220c      	movs	r2, #12
 8003794:	4013      	ands	r3, r2
 8003796:	d00b      	beq.n	80037b0 <HAL_RCC_OscConfig+0x224>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8003798:	4b49      	ldr	r3, [pc, #292]	; (80038c0 <HAL_RCC_OscConfig+0x334>)
 800379a:	685b      	ldr	r3, [r3, #4]
 800379c:	220c      	movs	r2, #12
 800379e:	4013      	ands	r3, r2
 80037a0:	2b08      	cmp	r3, #8
 80037a2:	d11d      	bne.n	80037e0 <HAL_RCC_OscConfig+0x254>
 80037a4:	4b46      	ldr	r3, [pc, #280]	; (80038c0 <HAL_RCC_OscConfig+0x334>)
 80037a6:	685a      	ldr	r2, [r3, #4]
 80037a8:	2380      	movs	r3, #128	; 0x80
 80037aa:	025b      	lsls	r3, r3, #9
 80037ac:	4013      	ands	r3, r2
 80037ae:	d117      	bne.n	80037e0 <HAL_RCC_OscConfig+0x254>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80037b0:	4b43      	ldr	r3, [pc, #268]	; (80038c0 <HAL_RCC_OscConfig+0x334>)
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	2202      	movs	r2, #2
 80037b6:	4013      	ands	r3, r2
 80037b8:	d006      	beq.n	80037c8 <HAL_RCC_OscConfig+0x23c>
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	68db      	ldr	r3, [r3, #12]
 80037be:	2b01      	cmp	r3, #1
 80037c0:	d002      	beq.n	80037c8 <HAL_RCC_OscConfig+0x23c>
      {
        return HAL_ERROR;
 80037c2:	2301      	movs	r3, #1
 80037c4:	f000 fb3e 	bl	8003e44 <HAL_RCC_OscConfig+0x8b8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80037c8:	4b3d      	ldr	r3, [pc, #244]	; (80038c0 <HAL_RCC_OscConfig+0x334>)
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	22f8      	movs	r2, #248	; 0xf8
 80037ce:	4393      	bics	r3, r2
 80037d0:	0019      	movs	r1, r3
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	691b      	ldr	r3, [r3, #16]
 80037d6:	00da      	lsls	r2, r3, #3
 80037d8:	4b39      	ldr	r3, [pc, #228]	; (80038c0 <HAL_RCC_OscConfig+0x334>)
 80037da:	430a      	orrs	r2, r1
 80037dc:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80037de:	e041      	b.n	8003864 <HAL_RCC_OscConfig+0x2d8>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	68db      	ldr	r3, [r3, #12]
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d024      	beq.n	8003832 <HAL_RCC_OscConfig+0x2a6>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80037e8:	4b35      	ldr	r3, [pc, #212]	; (80038c0 <HAL_RCC_OscConfig+0x334>)
 80037ea:	681a      	ldr	r2, [r3, #0]
 80037ec:	4b34      	ldr	r3, [pc, #208]	; (80038c0 <HAL_RCC_OscConfig+0x334>)
 80037ee:	2101      	movs	r1, #1
 80037f0:	430a      	orrs	r2, r1
 80037f2:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037f4:	f7fd ffea 	bl	80017cc <HAL_GetTick>
 80037f8:	0003      	movs	r3, r0
 80037fa:	613b      	str	r3, [r7, #16]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80037fc:	e008      	b.n	8003810 <HAL_RCC_OscConfig+0x284>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80037fe:	f7fd ffe5 	bl	80017cc <HAL_GetTick>
 8003802:	0002      	movs	r2, r0
 8003804:	693b      	ldr	r3, [r7, #16]
 8003806:	1ad3      	subs	r3, r2, r3
 8003808:	2b02      	cmp	r3, #2
 800380a:	d901      	bls.n	8003810 <HAL_RCC_OscConfig+0x284>
          {
            return HAL_TIMEOUT;
 800380c:	2303      	movs	r3, #3
 800380e:	e319      	b.n	8003e44 <HAL_RCC_OscConfig+0x8b8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003810:	4b2b      	ldr	r3, [pc, #172]	; (80038c0 <HAL_RCC_OscConfig+0x334>)
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	2202      	movs	r2, #2
 8003816:	4013      	ands	r3, r2
 8003818:	d0f1      	beq.n	80037fe <HAL_RCC_OscConfig+0x272>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800381a:	4b29      	ldr	r3, [pc, #164]	; (80038c0 <HAL_RCC_OscConfig+0x334>)
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	22f8      	movs	r2, #248	; 0xf8
 8003820:	4393      	bics	r3, r2
 8003822:	0019      	movs	r1, r3
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	691b      	ldr	r3, [r3, #16]
 8003828:	00da      	lsls	r2, r3, #3
 800382a:	4b25      	ldr	r3, [pc, #148]	; (80038c0 <HAL_RCC_OscConfig+0x334>)
 800382c:	430a      	orrs	r2, r1
 800382e:	601a      	str	r2, [r3, #0]
 8003830:	e018      	b.n	8003864 <HAL_RCC_OscConfig+0x2d8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003832:	4b23      	ldr	r3, [pc, #140]	; (80038c0 <HAL_RCC_OscConfig+0x334>)
 8003834:	681a      	ldr	r2, [r3, #0]
 8003836:	4b22      	ldr	r3, [pc, #136]	; (80038c0 <HAL_RCC_OscConfig+0x334>)
 8003838:	2101      	movs	r1, #1
 800383a:	438a      	bics	r2, r1
 800383c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800383e:	f7fd ffc5 	bl	80017cc <HAL_GetTick>
 8003842:	0003      	movs	r3, r0
 8003844:	613b      	str	r3, [r7, #16]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003846:	e008      	b.n	800385a <HAL_RCC_OscConfig+0x2ce>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003848:	f7fd ffc0 	bl	80017cc <HAL_GetTick>
 800384c:	0002      	movs	r2, r0
 800384e:	693b      	ldr	r3, [r7, #16]
 8003850:	1ad3      	subs	r3, r2, r3
 8003852:	2b02      	cmp	r3, #2
 8003854:	d901      	bls.n	800385a <HAL_RCC_OscConfig+0x2ce>
          {
            return HAL_TIMEOUT;
 8003856:	2303      	movs	r3, #3
 8003858:	e2f4      	b.n	8003e44 <HAL_RCC_OscConfig+0x8b8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800385a:	4b19      	ldr	r3, [pc, #100]	; (80038c0 <HAL_RCC_OscConfig+0x334>)
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	2202      	movs	r2, #2
 8003860:	4013      	ands	r3, r2
 8003862:	d1f1      	bne.n	8003848 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	2208      	movs	r2, #8
 800386a:	4013      	ands	r3, r2
 800386c:	d04d      	beq.n	800390a <HAL_RCC_OscConfig+0x37e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	69db      	ldr	r3, [r3, #28]
 8003872:	2b00      	cmp	r3, #0
 8003874:	d00a      	beq.n	800388c <HAL_RCC_OscConfig+0x300>
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	69db      	ldr	r3, [r3, #28]
 800387a:	2b01      	cmp	r3, #1
 800387c:	d006      	beq.n	800388c <HAL_RCC_OscConfig+0x300>
 800387e:	23c7      	movs	r3, #199	; 0xc7
 8003880:	005a      	lsls	r2, r3, #1
 8003882:	4b0e      	ldr	r3, [pc, #56]	; (80038bc <HAL_RCC_OscConfig+0x330>)
 8003884:	0011      	movs	r1, r2
 8003886:	0018      	movs	r0, r3
 8003888:	f7fd f863 	bl	8000952 <assert_failed>
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	69db      	ldr	r3, [r3, #28]
 8003890:	2b00      	cmp	r3, #0
 8003892:	d021      	beq.n	80038d8 <HAL_RCC_OscConfig+0x34c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003894:	4b0a      	ldr	r3, [pc, #40]	; (80038c0 <HAL_RCC_OscConfig+0x334>)
 8003896:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003898:	4b09      	ldr	r3, [pc, #36]	; (80038c0 <HAL_RCC_OscConfig+0x334>)
 800389a:	2101      	movs	r1, #1
 800389c:	430a      	orrs	r2, r1
 800389e:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80038a0:	f7fd ff94 	bl	80017cc <HAL_GetTick>
 80038a4:	0003      	movs	r3, r0
 80038a6:	613b      	str	r3, [r7, #16]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80038a8:	e010      	b.n	80038cc <HAL_RCC_OscConfig+0x340>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80038aa:	f7fd ff8f 	bl	80017cc <HAL_GetTick>
 80038ae:	0002      	movs	r2, r0
 80038b0:	693b      	ldr	r3, [r7, #16]
 80038b2:	1ad3      	subs	r3, r2, r3
 80038b4:	2b02      	cmp	r3, #2
 80038b6:	d909      	bls.n	80038cc <HAL_RCC_OscConfig+0x340>
        {
          return HAL_TIMEOUT;
 80038b8:	2303      	movs	r3, #3
 80038ba:	e2c3      	b.n	8003e44 <HAL_RCC_OscConfig+0x8b8>
 80038bc:	08007100 	.word	0x08007100
 80038c0:	40021000 	.word	0x40021000
 80038c4:	fffeffff 	.word	0xfffeffff
 80038c8:	fffbffff 	.word	0xfffbffff
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80038cc:	4bb3      	ldr	r3, [pc, #716]	; (8003b9c <HAL_RCC_OscConfig+0x610>)
 80038ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038d0:	2202      	movs	r2, #2
 80038d2:	4013      	ands	r3, r2
 80038d4:	d0e9      	beq.n	80038aa <HAL_RCC_OscConfig+0x31e>
 80038d6:	e018      	b.n	800390a <HAL_RCC_OscConfig+0x37e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80038d8:	4bb0      	ldr	r3, [pc, #704]	; (8003b9c <HAL_RCC_OscConfig+0x610>)
 80038da:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80038dc:	4baf      	ldr	r3, [pc, #700]	; (8003b9c <HAL_RCC_OscConfig+0x610>)
 80038de:	2101      	movs	r1, #1
 80038e0:	438a      	bics	r2, r1
 80038e2:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80038e4:	f7fd ff72 	bl	80017cc <HAL_GetTick>
 80038e8:	0003      	movs	r3, r0
 80038ea:	613b      	str	r3, [r7, #16]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80038ec:	e008      	b.n	8003900 <HAL_RCC_OscConfig+0x374>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80038ee:	f7fd ff6d 	bl	80017cc <HAL_GetTick>
 80038f2:	0002      	movs	r2, r0
 80038f4:	693b      	ldr	r3, [r7, #16]
 80038f6:	1ad3      	subs	r3, r2, r3
 80038f8:	2b02      	cmp	r3, #2
 80038fa:	d901      	bls.n	8003900 <HAL_RCC_OscConfig+0x374>
        {
          return HAL_TIMEOUT;
 80038fc:	2303      	movs	r3, #3
 80038fe:	e2a1      	b.n	8003e44 <HAL_RCC_OscConfig+0x8b8>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003900:	4ba6      	ldr	r3, [pc, #664]	; (8003b9c <HAL_RCC_OscConfig+0x610>)
 8003902:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003904:	2202      	movs	r2, #2
 8003906:	4013      	ands	r3, r2
 8003908:	d1f1      	bne.n	80038ee <HAL_RCC_OscConfig+0x362>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	2204      	movs	r2, #4
 8003910:	4013      	ands	r3, r2
 8003912:	d100      	bne.n	8003916 <HAL_RCC_OscConfig+0x38a>
 8003914:	e0c0      	b.n	8003a98 <HAL_RCC_OscConfig+0x50c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003916:	2317      	movs	r3, #23
 8003918:	18fb      	adds	r3, r7, r3
 800391a:	2200      	movs	r2, #0
 800391c:	701a      	strb	r2, [r3, #0]
    
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	689b      	ldr	r3, [r3, #8]
 8003922:	2b00      	cmp	r3, #0
 8003924:	d00e      	beq.n	8003944 <HAL_RCC_OscConfig+0x3b8>
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	689b      	ldr	r3, [r3, #8]
 800392a:	2b01      	cmp	r3, #1
 800392c:	d00a      	beq.n	8003944 <HAL_RCC_OscConfig+0x3b8>
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	689b      	ldr	r3, [r3, #8]
 8003932:	2b05      	cmp	r3, #5
 8003934:	d006      	beq.n	8003944 <HAL_RCC_OscConfig+0x3b8>
 8003936:	23dd      	movs	r3, #221	; 0xdd
 8003938:	005a      	lsls	r2, r3, #1
 800393a:	4b99      	ldr	r3, [pc, #612]	; (8003ba0 <HAL_RCC_OscConfig+0x614>)
 800393c:	0011      	movs	r1, r2
 800393e:	0018      	movs	r0, r3
 8003940:	f7fd f807 	bl	8000952 <assert_failed>

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003944:	4b95      	ldr	r3, [pc, #596]	; (8003b9c <HAL_RCC_OscConfig+0x610>)
 8003946:	69da      	ldr	r2, [r3, #28]
 8003948:	2380      	movs	r3, #128	; 0x80
 800394a:	055b      	lsls	r3, r3, #21
 800394c:	4013      	ands	r3, r2
 800394e:	d111      	bne.n	8003974 <HAL_RCC_OscConfig+0x3e8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003950:	4b92      	ldr	r3, [pc, #584]	; (8003b9c <HAL_RCC_OscConfig+0x610>)
 8003952:	69da      	ldr	r2, [r3, #28]
 8003954:	4b91      	ldr	r3, [pc, #580]	; (8003b9c <HAL_RCC_OscConfig+0x610>)
 8003956:	2180      	movs	r1, #128	; 0x80
 8003958:	0549      	lsls	r1, r1, #21
 800395a:	430a      	orrs	r2, r1
 800395c:	61da      	str	r2, [r3, #28]
 800395e:	4b8f      	ldr	r3, [pc, #572]	; (8003b9c <HAL_RCC_OscConfig+0x610>)
 8003960:	69da      	ldr	r2, [r3, #28]
 8003962:	2380      	movs	r3, #128	; 0x80
 8003964:	055b      	lsls	r3, r3, #21
 8003966:	4013      	ands	r3, r2
 8003968:	60fb      	str	r3, [r7, #12]
 800396a:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800396c:	2317      	movs	r3, #23
 800396e:	18fb      	adds	r3, r7, r3
 8003970:	2201      	movs	r2, #1
 8003972:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003974:	4b8b      	ldr	r3, [pc, #556]	; (8003ba4 <HAL_RCC_OscConfig+0x618>)
 8003976:	681a      	ldr	r2, [r3, #0]
 8003978:	2380      	movs	r3, #128	; 0x80
 800397a:	005b      	lsls	r3, r3, #1
 800397c:	4013      	ands	r3, r2
 800397e:	d11a      	bne.n	80039b6 <HAL_RCC_OscConfig+0x42a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003980:	4b88      	ldr	r3, [pc, #544]	; (8003ba4 <HAL_RCC_OscConfig+0x618>)
 8003982:	681a      	ldr	r2, [r3, #0]
 8003984:	4b87      	ldr	r3, [pc, #540]	; (8003ba4 <HAL_RCC_OscConfig+0x618>)
 8003986:	2180      	movs	r1, #128	; 0x80
 8003988:	0049      	lsls	r1, r1, #1
 800398a:	430a      	orrs	r2, r1
 800398c:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800398e:	f7fd ff1d 	bl	80017cc <HAL_GetTick>
 8003992:	0003      	movs	r3, r0
 8003994:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003996:	e008      	b.n	80039aa <HAL_RCC_OscConfig+0x41e>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003998:	f7fd ff18 	bl	80017cc <HAL_GetTick>
 800399c:	0002      	movs	r2, r0
 800399e:	693b      	ldr	r3, [r7, #16]
 80039a0:	1ad3      	subs	r3, r2, r3
 80039a2:	2b64      	cmp	r3, #100	; 0x64
 80039a4:	d901      	bls.n	80039aa <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 80039a6:	2303      	movs	r3, #3
 80039a8:	e24c      	b.n	8003e44 <HAL_RCC_OscConfig+0x8b8>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80039aa:	4b7e      	ldr	r3, [pc, #504]	; (8003ba4 <HAL_RCC_OscConfig+0x618>)
 80039ac:	681a      	ldr	r2, [r3, #0]
 80039ae:	2380      	movs	r3, #128	; 0x80
 80039b0:	005b      	lsls	r3, r3, #1
 80039b2:	4013      	ands	r3, r2
 80039b4:	d0f0      	beq.n	8003998 <HAL_RCC_OscConfig+0x40c>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	689b      	ldr	r3, [r3, #8]
 80039ba:	2b01      	cmp	r3, #1
 80039bc:	d106      	bne.n	80039cc <HAL_RCC_OscConfig+0x440>
 80039be:	4b77      	ldr	r3, [pc, #476]	; (8003b9c <HAL_RCC_OscConfig+0x610>)
 80039c0:	6a1a      	ldr	r2, [r3, #32]
 80039c2:	4b76      	ldr	r3, [pc, #472]	; (8003b9c <HAL_RCC_OscConfig+0x610>)
 80039c4:	2101      	movs	r1, #1
 80039c6:	430a      	orrs	r2, r1
 80039c8:	621a      	str	r2, [r3, #32]
 80039ca:	e02d      	b.n	8003a28 <HAL_RCC_OscConfig+0x49c>
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	689b      	ldr	r3, [r3, #8]
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d10c      	bne.n	80039ee <HAL_RCC_OscConfig+0x462>
 80039d4:	4b71      	ldr	r3, [pc, #452]	; (8003b9c <HAL_RCC_OscConfig+0x610>)
 80039d6:	6a1a      	ldr	r2, [r3, #32]
 80039d8:	4b70      	ldr	r3, [pc, #448]	; (8003b9c <HAL_RCC_OscConfig+0x610>)
 80039da:	2101      	movs	r1, #1
 80039dc:	438a      	bics	r2, r1
 80039de:	621a      	str	r2, [r3, #32]
 80039e0:	4b6e      	ldr	r3, [pc, #440]	; (8003b9c <HAL_RCC_OscConfig+0x610>)
 80039e2:	6a1a      	ldr	r2, [r3, #32]
 80039e4:	4b6d      	ldr	r3, [pc, #436]	; (8003b9c <HAL_RCC_OscConfig+0x610>)
 80039e6:	2104      	movs	r1, #4
 80039e8:	438a      	bics	r2, r1
 80039ea:	621a      	str	r2, [r3, #32]
 80039ec:	e01c      	b.n	8003a28 <HAL_RCC_OscConfig+0x49c>
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	689b      	ldr	r3, [r3, #8]
 80039f2:	2b05      	cmp	r3, #5
 80039f4:	d10c      	bne.n	8003a10 <HAL_RCC_OscConfig+0x484>
 80039f6:	4b69      	ldr	r3, [pc, #420]	; (8003b9c <HAL_RCC_OscConfig+0x610>)
 80039f8:	6a1a      	ldr	r2, [r3, #32]
 80039fa:	4b68      	ldr	r3, [pc, #416]	; (8003b9c <HAL_RCC_OscConfig+0x610>)
 80039fc:	2104      	movs	r1, #4
 80039fe:	430a      	orrs	r2, r1
 8003a00:	621a      	str	r2, [r3, #32]
 8003a02:	4b66      	ldr	r3, [pc, #408]	; (8003b9c <HAL_RCC_OscConfig+0x610>)
 8003a04:	6a1a      	ldr	r2, [r3, #32]
 8003a06:	4b65      	ldr	r3, [pc, #404]	; (8003b9c <HAL_RCC_OscConfig+0x610>)
 8003a08:	2101      	movs	r1, #1
 8003a0a:	430a      	orrs	r2, r1
 8003a0c:	621a      	str	r2, [r3, #32]
 8003a0e:	e00b      	b.n	8003a28 <HAL_RCC_OscConfig+0x49c>
 8003a10:	4b62      	ldr	r3, [pc, #392]	; (8003b9c <HAL_RCC_OscConfig+0x610>)
 8003a12:	6a1a      	ldr	r2, [r3, #32]
 8003a14:	4b61      	ldr	r3, [pc, #388]	; (8003b9c <HAL_RCC_OscConfig+0x610>)
 8003a16:	2101      	movs	r1, #1
 8003a18:	438a      	bics	r2, r1
 8003a1a:	621a      	str	r2, [r3, #32]
 8003a1c:	4b5f      	ldr	r3, [pc, #380]	; (8003b9c <HAL_RCC_OscConfig+0x610>)
 8003a1e:	6a1a      	ldr	r2, [r3, #32]
 8003a20:	4b5e      	ldr	r3, [pc, #376]	; (8003b9c <HAL_RCC_OscConfig+0x610>)
 8003a22:	2104      	movs	r1, #4
 8003a24:	438a      	bics	r2, r1
 8003a26:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	689b      	ldr	r3, [r3, #8]
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d014      	beq.n	8003a5a <HAL_RCC_OscConfig+0x4ce>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003a30:	f7fd fecc 	bl	80017cc <HAL_GetTick>
 8003a34:	0003      	movs	r3, r0
 8003a36:	613b      	str	r3, [r7, #16]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a38:	e009      	b.n	8003a4e <HAL_RCC_OscConfig+0x4c2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003a3a:	f7fd fec7 	bl	80017cc <HAL_GetTick>
 8003a3e:	0002      	movs	r2, r0
 8003a40:	693b      	ldr	r3, [r7, #16]
 8003a42:	1ad3      	subs	r3, r2, r3
 8003a44:	4a58      	ldr	r2, [pc, #352]	; (8003ba8 <HAL_RCC_OscConfig+0x61c>)
 8003a46:	4293      	cmp	r3, r2
 8003a48:	d901      	bls.n	8003a4e <HAL_RCC_OscConfig+0x4c2>
        {
          return HAL_TIMEOUT;
 8003a4a:	2303      	movs	r3, #3
 8003a4c:	e1fa      	b.n	8003e44 <HAL_RCC_OscConfig+0x8b8>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a4e:	4b53      	ldr	r3, [pc, #332]	; (8003b9c <HAL_RCC_OscConfig+0x610>)
 8003a50:	6a1b      	ldr	r3, [r3, #32]
 8003a52:	2202      	movs	r2, #2
 8003a54:	4013      	ands	r3, r2
 8003a56:	d0f0      	beq.n	8003a3a <HAL_RCC_OscConfig+0x4ae>
 8003a58:	e013      	b.n	8003a82 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003a5a:	f7fd feb7 	bl	80017cc <HAL_GetTick>
 8003a5e:	0003      	movs	r3, r0
 8003a60:	613b      	str	r3, [r7, #16]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003a62:	e009      	b.n	8003a78 <HAL_RCC_OscConfig+0x4ec>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003a64:	f7fd feb2 	bl	80017cc <HAL_GetTick>
 8003a68:	0002      	movs	r2, r0
 8003a6a:	693b      	ldr	r3, [r7, #16]
 8003a6c:	1ad3      	subs	r3, r2, r3
 8003a6e:	4a4e      	ldr	r2, [pc, #312]	; (8003ba8 <HAL_RCC_OscConfig+0x61c>)
 8003a70:	4293      	cmp	r3, r2
 8003a72:	d901      	bls.n	8003a78 <HAL_RCC_OscConfig+0x4ec>
        {
          return HAL_TIMEOUT;
 8003a74:	2303      	movs	r3, #3
 8003a76:	e1e5      	b.n	8003e44 <HAL_RCC_OscConfig+0x8b8>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003a78:	4b48      	ldr	r3, [pc, #288]	; (8003b9c <HAL_RCC_OscConfig+0x610>)
 8003a7a:	6a1b      	ldr	r3, [r3, #32]
 8003a7c:	2202      	movs	r2, #2
 8003a7e:	4013      	ands	r3, r2
 8003a80:	d1f0      	bne.n	8003a64 <HAL_RCC_OscConfig+0x4d8>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003a82:	2317      	movs	r3, #23
 8003a84:	18fb      	adds	r3, r7, r3
 8003a86:	781b      	ldrb	r3, [r3, #0]
 8003a88:	2b01      	cmp	r3, #1
 8003a8a:	d105      	bne.n	8003a98 <HAL_RCC_OscConfig+0x50c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003a8c:	4b43      	ldr	r3, [pc, #268]	; (8003b9c <HAL_RCC_OscConfig+0x610>)
 8003a8e:	69da      	ldr	r2, [r3, #28]
 8003a90:	4b42      	ldr	r3, [pc, #264]	; (8003b9c <HAL_RCC_OscConfig+0x610>)
 8003a92:	4946      	ldr	r1, [pc, #280]	; (8003bac <HAL_RCC_OscConfig+0x620>)
 8003a94:	400a      	ands	r2, r1
 8003a96:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	2210      	movs	r2, #16
 8003a9e:	4013      	ands	r3, r2
 8003aa0:	d100      	bne.n	8003aa4 <HAL_RCC_OscConfig+0x518>
 8003aa2:	e08c      	b.n	8003bbe <HAL_RCC_OscConfig+0x632>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	695b      	ldr	r3, [r3, #20]
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d00e      	beq.n	8003aca <HAL_RCC_OscConfig+0x53e>
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	695b      	ldr	r3, [r3, #20]
 8003ab0:	2b01      	cmp	r3, #1
 8003ab2:	d00a      	beq.n	8003aca <HAL_RCC_OscConfig+0x53e>
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	695b      	ldr	r3, [r3, #20]
 8003ab8:	3305      	adds	r3, #5
 8003aba:	d006      	beq.n	8003aca <HAL_RCC_OscConfig+0x53e>
 8003abc:	2380      	movs	r3, #128	; 0x80
 8003abe:	009a      	lsls	r2, r3, #2
 8003ac0:	4b37      	ldr	r3, [pc, #220]	; (8003ba0 <HAL_RCC_OscConfig+0x614>)
 8003ac2:	0011      	movs	r1, r2
 8003ac4:	0018      	movs	r0, r3
 8003ac6:	f7fc ff44 	bl	8000952 <assert_failed>
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	699b      	ldr	r3, [r3, #24]
 8003ace:	2b1f      	cmp	r3, #31
 8003ad0:	d905      	bls.n	8003ade <HAL_RCC_OscConfig+0x552>
 8003ad2:	4a37      	ldr	r2, [pc, #220]	; (8003bb0 <HAL_RCC_OscConfig+0x624>)
 8003ad4:	4b32      	ldr	r3, [pc, #200]	; (8003ba0 <HAL_RCC_OscConfig+0x614>)
 8003ad6:	0011      	movs	r1, r2
 8003ad8:	0018      	movs	r0, r3
 8003ada:	f7fc ff3a 	bl	8000952 <assert_failed>

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	695b      	ldr	r3, [r3, #20]
 8003ae2:	2b01      	cmp	r3, #1
 8003ae4:	d12a      	bne.n	8003b3c <HAL_RCC_OscConfig+0x5b0>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8003ae6:	4b2d      	ldr	r3, [pc, #180]	; (8003b9c <HAL_RCC_OscConfig+0x610>)
 8003ae8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003aea:	4b2c      	ldr	r3, [pc, #176]	; (8003b9c <HAL_RCC_OscConfig+0x610>)
 8003aec:	2104      	movs	r1, #4
 8003aee:	430a      	orrs	r2, r1
 8003af0:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8003af2:	4b2a      	ldr	r3, [pc, #168]	; (8003b9c <HAL_RCC_OscConfig+0x610>)
 8003af4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003af6:	4b29      	ldr	r3, [pc, #164]	; (8003b9c <HAL_RCC_OscConfig+0x610>)
 8003af8:	2101      	movs	r1, #1
 8003afa:	430a      	orrs	r2, r1
 8003afc:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003afe:	f7fd fe65 	bl	80017cc <HAL_GetTick>
 8003b02:	0003      	movs	r3, r0
 8003b04:	613b      	str	r3, [r7, #16]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8003b06:	e008      	b.n	8003b1a <HAL_RCC_OscConfig+0x58e>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8003b08:	f7fd fe60 	bl	80017cc <HAL_GetTick>
 8003b0c:	0002      	movs	r2, r0
 8003b0e:	693b      	ldr	r3, [r7, #16]
 8003b10:	1ad3      	subs	r3, r2, r3
 8003b12:	2b02      	cmp	r3, #2
 8003b14:	d901      	bls.n	8003b1a <HAL_RCC_OscConfig+0x58e>
        {
          return HAL_TIMEOUT;
 8003b16:	2303      	movs	r3, #3
 8003b18:	e194      	b.n	8003e44 <HAL_RCC_OscConfig+0x8b8>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8003b1a:	4b20      	ldr	r3, [pc, #128]	; (8003b9c <HAL_RCC_OscConfig+0x610>)
 8003b1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b1e:	2202      	movs	r2, #2
 8003b20:	4013      	ands	r3, r2
 8003b22:	d0f1      	beq.n	8003b08 <HAL_RCC_OscConfig+0x57c>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8003b24:	4b1d      	ldr	r3, [pc, #116]	; (8003b9c <HAL_RCC_OscConfig+0x610>)
 8003b26:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b28:	22f8      	movs	r2, #248	; 0xf8
 8003b2a:	4393      	bics	r3, r2
 8003b2c:	0019      	movs	r1, r3
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	699b      	ldr	r3, [r3, #24]
 8003b32:	00da      	lsls	r2, r3, #3
 8003b34:	4b19      	ldr	r3, [pc, #100]	; (8003b9c <HAL_RCC_OscConfig+0x610>)
 8003b36:	430a      	orrs	r2, r1
 8003b38:	635a      	str	r2, [r3, #52]	; 0x34
 8003b3a:	e040      	b.n	8003bbe <HAL_RCC_OscConfig+0x632>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	695b      	ldr	r3, [r3, #20]
 8003b40:	3305      	adds	r3, #5
 8003b42:	d111      	bne.n	8003b68 <HAL_RCC_OscConfig+0x5dc>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8003b44:	4b15      	ldr	r3, [pc, #84]	; (8003b9c <HAL_RCC_OscConfig+0x610>)
 8003b46:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003b48:	4b14      	ldr	r3, [pc, #80]	; (8003b9c <HAL_RCC_OscConfig+0x610>)
 8003b4a:	2104      	movs	r1, #4
 8003b4c:	438a      	bics	r2, r1
 8003b4e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8003b50:	4b12      	ldr	r3, [pc, #72]	; (8003b9c <HAL_RCC_OscConfig+0x610>)
 8003b52:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b54:	22f8      	movs	r2, #248	; 0xf8
 8003b56:	4393      	bics	r3, r2
 8003b58:	0019      	movs	r1, r3
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	699b      	ldr	r3, [r3, #24]
 8003b5e:	00da      	lsls	r2, r3, #3
 8003b60:	4b0e      	ldr	r3, [pc, #56]	; (8003b9c <HAL_RCC_OscConfig+0x610>)
 8003b62:	430a      	orrs	r2, r1
 8003b64:	635a      	str	r2, [r3, #52]	; 0x34
 8003b66:	e02a      	b.n	8003bbe <HAL_RCC_OscConfig+0x632>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8003b68:	4b0c      	ldr	r3, [pc, #48]	; (8003b9c <HAL_RCC_OscConfig+0x610>)
 8003b6a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003b6c:	4b0b      	ldr	r3, [pc, #44]	; (8003b9c <HAL_RCC_OscConfig+0x610>)
 8003b6e:	2104      	movs	r1, #4
 8003b70:	430a      	orrs	r2, r1
 8003b72:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8003b74:	4b09      	ldr	r3, [pc, #36]	; (8003b9c <HAL_RCC_OscConfig+0x610>)
 8003b76:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003b78:	4b08      	ldr	r3, [pc, #32]	; (8003b9c <HAL_RCC_OscConfig+0x610>)
 8003b7a:	2101      	movs	r1, #1
 8003b7c:	438a      	bics	r2, r1
 8003b7e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003b80:	f7fd fe24 	bl	80017cc <HAL_GetTick>
 8003b84:	0003      	movs	r3, r0
 8003b86:	613b      	str	r3, [r7, #16]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8003b88:	e014      	b.n	8003bb4 <HAL_RCC_OscConfig+0x628>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8003b8a:	f7fd fe1f 	bl	80017cc <HAL_GetTick>
 8003b8e:	0002      	movs	r2, r0
 8003b90:	693b      	ldr	r3, [r7, #16]
 8003b92:	1ad3      	subs	r3, r2, r3
 8003b94:	2b02      	cmp	r3, #2
 8003b96:	d90d      	bls.n	8003bb4 <HAL_RCC_OscConfig+0x628>
        {
          return HAL_TIMEOUT;
 8003b98:	2303      	movs	r3, #3
 8003b9a:	e153      	b.n	8003e44 <HAL_RCC_OscConfig+0x8b8>
 8003b9c:	40021000 	.word	0x40021000
 8003ba0:	08007100 	.word	0x08007100
 8003ba4:	40007000 	.word	0x40007000
 8003ba8:	00001388 	.word	0x00001388
 8003bac:	efffffff 	.word	0xefffffff
 8003bb0:	00000201 	.word	0x00000201
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8003bb4:	4ba5      	ldr	r3, [pc, #660]	; (8003e4c <HAL_RCC_OscConfig+0x8c0>)
 8003bb6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003bb8:	2202      	movs	r2, #2
 8003bba:	4013      	ands	r3, r2
 8003bbc:	d1e5      	bne.n	8003b8a <HAL_RCC_OscConfig+0x5fe>
  }
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	6a1b      	ldr	r3, [r3, #32]
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d00e      	beq.n	8003be4 <HAL_RCC_OscConfig+0x658>
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	6a1b      	ldr	r3, [r3, #32]
 8003bca:	2b01      	cmp	r3, #1
 8003bcc:	d00a      	beq.n	8003be4 <HAL_RCC_OscConfig+0x658>
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	6a1b      	ldr	r3, [r3, #32]
 8003bd2:	2b02      	cmp	r3, #2
 8003bd4:	d006      	beq.n	8003be4 <HAL_RCC_OscConfig+0x658>
 8003bd6:	239d      	movs	r3, #157	; 0x9d
 8003bd8:	009a      	lsls	r2, r3, #2
 8003bda:	4b9d      	ldr	r3, [pc, #628]	; (8003e50 <HAL_RCC_OscConfig+0x8c4>)
 8003bdc:	0011      	movs	r1, r2
 8003bde:	0018      	movs	r0, r3
 8003be0:	f7fc feb7 	bl	8000952 <assert_failed>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	6a1b      	ldr	r3, [r3, #32]
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d100      	bne.n	8003bee <HAL_RCC_OscConfig+0x662>
 8003bec:	e129      	b.n	8003e42 <HAL_RCC_OscConfig+0x8b6>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003bee:	4b97      	ldr	r3, [pc, #604]	; (8003e4c <HAL_RCC_OscConfig+0x8c0>)
 8003bf0:	685b      	ldr	r3, [r3, #4]
 8003bf2:	220c      	movs	r2, #12
 8003bf4:	4013      	ands	r3, r2
 8003bf6:	2b08      	cmp	r3, #8
 8003bf8:	d100      	bne.n	8003bfc <HAL_RCC_OscConfig+0x670>
 8003bfa:	e120      	b.n	8003e3e <HAL_RCC_OscConfig+0x8b2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	6a1b      	ldr	r3, [r3, #32]
 8003c00:	2b02      	cmp	r3, #2
 8003c02:	d000      	beq.n	8003c06 <HAL_RCC_OscConfig+0x67a>
 8003c04:	e100      	b.n	8003e08 <HAL_RCC_OscConfig+0x87c>
      {
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d00b      	beq.n	8003c26 <HAL_RCC_OscConfig+0x69a>
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003c12:	2380      	movs	r3, #128	; 0x80
 8003c14:	025b      	lsls	r3, r3, #9
 8003c16:	429a      	cmp	r2, r3
 8003c18:	d005      	beq.n	8003c26 <HAL_RCC_OscConfig+0x69a>
 8003c1a:	4a8e      	ldr	r2, [pc, #568]	; (8003e54 <HAL_RCC_OscConfig+0x8c8>)
 8003c1c:	4b8c      	ldr	r3, [pc, #560]	; (8003e50 <HAL_RCC_OscConfig+0x8c4>)
 8003c1e:	0011      	movs	r1, r2
 8003c20:	0018      	movs	r0, r3
 8003c22:	f7fc fe96 	bl	8000952 <assert_failed>
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d059      	beq.n	8003ce2 <HAL_RCC_OscConfig+0x756>
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003c32:	2380      	movs	r3, #128	; 0x80
 8003c34:	02db      	lsls	r3, r3, #11
 8003c36:	429a      	cmp	r2, r3
 8003c38:	d053      	beq.n	8003ce2 <HAL_RCC_OscConfig+0x756>
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003c3e:	2380      	movs	r3, #128	; 0x80
 8003c40:	031b      	lsls	r3, r3, #12
 8003c42:	429a      	cmp	r2, r3
 8003c44:	d04d      	beq.n	8003ce2 <HAL_RCC_OscConfig+0x756>
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003c4a:	23c0      	movs	r3, #192	; 0xc0
 8003c4c:	031b      	lsls	r3, r3, #12
 8003c4e:	429a      	cmp	r2, r3
 8003c50:	d047      	beq.n	8003ce2 <HAL_RCC_OscConfig+0x756>
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003c56:	2380      	movs	r3, #128	; 0x80
 8003c58:	035b      	lsls	r3, r3, #13
 8003c5a:	429a      	cmp	r2, r3
 8003c5c:	d041      	beq.n	8003ce2 <HAL_RCC_OscConfig+0x756>
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003c62:	23a0      	movs	r3, #160	; 0xa0
 8003c64:	035b      	lsls	r3, r3, #13
 8003c66:	429a      	cmp	r2, r3
 8003c68:	d03b      	beq.n	8003ce2 <HAL_RCC_OscConfig+0x756>
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003c6e:	23c0      	movs	r3, #192	; 0xc0
 8003c70:	035b      	lsls	r3, r3, #13
 8003c72:	429a      	cmp	r2, r3
 8003c74:	d035      	beq.n	8003ce2 <HAL_RCC_OscConfig+0x756>
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003c7a:	23e0      	movs	r3, #224	; 0xe0
 8003c7c:	035b      	lsls	r3, r3, #13
 8003c7e:	429a      	cmp	r2, r3
 8003c80:	d02f      	beq.n	8003ce2 <HAL_RCC_OscConfig+0x756>
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003c86:	2380      	movs	r3, #128	; 0x80
 8003c88:	039b      	lsls	r3, r3, #14
 8003c8a:	429a      	cmp	r2, r3
 8003c8c:	d029      	beq.n	8003ce2 <HAL_RCC_OscConfig+0x756>
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003c92:	2390      	movs	r3, #144	; 0x90
 8003c94:	039b      	lsls	r3, r3, #14
 8003c96:	429a      	cmp	r2, r3
 8003c98:	d023      	beq.n	8003ce2 <HAL_RCC_OscConfig+0x756>
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003c9e:	23a0      	movs	r3, #160	; 0xa0
 8003ca0:	039b      	lsls	r3, r3, #14
 8003ca2:	429a      	cmp	r2, r3
 8003ca4:	d01d      	beq.n	8003ce2 <HAL_RCC_OscConfig+0x756>
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003caa:	23b0      	movs	r3, #176	; 0xb0
 8003cac:	039b      	lsls	r3, r3, #14
 8003cae:	429a      	cmp	r2, r3
 8003cb0:	d017      	beq.n	8003ce2 <HAL_RCC_OscConfig+0x756>
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003cb6:	23c0      	movs	r3, #192	; 0xc0
 8003cb8:	039b      	lsls	r3, r3, #14
 8003cba:	429a      	cmp	r2, r3
 8003cbc:	d011      	beq.n	8003ce2 <HAL_RCC_OscConfig+0x756>
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003cc2:	23d0      	movs	r3, #208	; 0xd0
 8003cc4:	039b      	lsls	r3, r3, #14
 8003cc6:	429a      	cmp	r2, r3
 8003cc8:	d00b      	beq.n	8003ce2 <HAL_RCC_OscConfig+0x756>
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003cce:	23e0      	movs	r3, #224	; 0xe0
 8003cd0:	039b      	lsls	r3, r3, #14
 8003cd2:	429a      	cmp	r2, r3
 8003cd4:	d005      	beq.n	8003ce2 <HAL_RCC_OscConfig+0x756>
 8003cd6:	4a60      	ldr	r2, [pc, #384]	; (8003e58 <HAL_RCC_OscConfig+0x8cc>)
 8003cd8:	4b5d      	ldr	r3, [pc, #372]	; (8003e50 <HAL_RCC_OscConfig+0x8c4>)
 8003cda:	0011      	movs	r1, r2
 8003cdc:	0018      	movs	r0, r3
 8003cde:	f7fc fe38 	bl	8000952 <assert_failed>
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d041      	beq.n	8003d6e <HAL_RCC_OscConfig+0x7e2>
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cee:	2b01      	cmp	r3, #1
 8003cf0:	d03d      	beq.n	8003d6e <HAL_RCC_OscConfig+0x7e2>
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cf6:	2b02      	cmp	r3, #2
 8003cf8:	d039      	beq.n	8003d6e <HAL_RCC_OscConfig+0x7e2>
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cfe:	2b03      	cmp	r3, #3
 8003d00:	d035      	beq.n	8003d6e <HAL_RCC_OscConfig+0x7e2>
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d06:	2b04      	cmp	r3, #4
 8003d08:	d031      	beq.n	8003d6e <HAL_RCC_OscConfig+0x7e2>
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d0e:	2b05      	cmp	r3, #5
 8003d10:	d02d      	beq.n	8003d6e <HAL_RCC_OscConfig+0x7e2>
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d16:	2b06      	cmp	r3, #6
 8003d18:	d029      	beq.n	8003d6e <HAL_RCC_OscConfig+0x7e2>
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d1e:	2b07      	cmp	r3, #7
 8003d20:	d025      	beq.n	8003d6e <HAL_RCC_OscConfig+0x7e2>
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d26:	2b08      	cmp	r3, #8
 8003d28:	d021      	beq.n	8003d6e <HAL_RCC_OscConfig+0x7e2>
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d2e:	2b09      	cmp	r3, #9
 8003d30:	d01d      	beq.n	8003d6e <HAL_RCC_OscConfig+0x7e2>
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d36:	2b0a      	cmp	r3, #10
 8003d38:	d019      	beq.n	8003d6e <HAL_RCC_OscConfig+0x7e2>
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d3e:	2b0b      	cmp	r3, #11
 8003d40:	d015      	beq.n	8003d6e <HAL_RCC_OscConfig+0x7e2>
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d46:	2b0c      	cmp	r3, #12
 8003d48:	d011      	beq.n	8003d6e <HAL_RCC_OscConfig+0x7e2>
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d4e:	2b0d      	cmp	r3, #13
 8003d50:	d00d      	beq.n	8003d6e <HAL_RCC_OscConfig+0x7e2>
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d56:	2b0e      	cmp	r3, #14
 8003d58:	d009      	beq.n	8003d6e <HAL_RCC_OscConfig+0x7e2>
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d5e:	2b0f      	cmp	r3, #15
 8003d60:	d005      	beq.n	8003d6e <HAL_RCC_OscConfig+0x7e2>
 8003d62:	4a3e      	ldr	r2, [pc, #248]	; (8003e5c <HAL_RCC_OscConfig+0x8d0>)
 8003d64:	4b3a      	ldr	r3, [pc, #232]	; (8003e50 <HAL_RCC_OscConfig+0x8c4>)
 8003d66:	0011      	movs	r1, r2
 8003d68:	0018      	movs	r0, r3
 8003d6a:	f7fc fdf2 	bl	8000952 <assert_failed>
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003d6e:	4b37      	ldr	r3, [pc, #220]	; (8003e4c <HAL_RCC_OscConfig+0x8c0>)
 8003d70:	681a      	ldr	r2, [r3, #0]
 8003d72:	4b36      	ldr	r3, [pc, #216]	; (8003e4c <HAL_RCC_OscConfig+0x8c0>)
 8003d74:	493a      	ldr	r1, [pc, #232]	; (8003e60 <HAL_RCC_OscConfig+0x8d4>)
 8003d76:	400a      	ands	r2, r1
 8003d78:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d7a:	f7fd fd27 	bl	80017cc <HAL_GetTick>
 8003d7e:	0003      	movs	r3, r0
 8003d80:	613b      	str	r3, [r7, #16]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003d82:	e008      	b.n	8003d96 <HAL_RCC_OscConfig+0x80a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003d84:	f7fd fd22 	bl	80017cc <HAL_GetTick>
 8003d88:	0002      	movs	r2, r0
 8003d8a:	693b      	ldr	r3, [r7, #16]
 8003d8c:	1ad3      	subs	r3, r2, r3
 8003d8e:	2b02      	cmp	r3, #2
 8003d90:	d901      	bls.n	8003d96 <HAL_RCC_OscConfig+0x80a>
          {
            return HAL_TIMEOUT;
 8003d92:	2303      	movs	r3, #3
 8003d94:	e056      	b.n	8003e44 <HAL_RCC_OscConfig+0x8b8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003d96:	4b2d      	ldr	r3, [pc, #180]	; (8003e4c <HAL_RCC_OscConfig+0x8c0>)
 8003d98:	681a      	ldr	r2, [r3, #0]
 8003d9a:	2380      	movs	r3, #128	; 0x80
 8003d9c:	049b      	lsls	r3, r3, #18
 8003d9e:	4013      	ands	r3, r2
 8003da0:	d1f0      	bne.n	8003d84 <HAL_RCC_OscConfig+0x7f8>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003da2:	4b2a      	ldr	r3, [pc, #168]	; (8003e4c <HAL_RCC_OscConfig+0x8c0>)
 8003da4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003da6:	220f      	movs	r2, #15
 8003da8:	4393      	bics	r3, r2
 8003daa:	0019      	movs	r1, r3
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003db0:	4b26      	ldr	r3, [pc, #152]	; (8003e4c <HAL_RCC_OscConfig+0x8c0>)
 8003db2:	430a      	orrs	r2, r1
 8003db4:	62da      	str	r2, [r3, #44]	; 0x2c
 8003db6:	4b25      	ldr	r3, [pc, #148]	; (8003e4c <HAL_RCC_OscConfig+0x8c0>)
 8003db8:	685b      	ldr	r3, [r3, #4]
 8003dba:	4a2a      	ldr	r2, [pc, #168]	; (8003e64 <HAL_RCC_OscConfig+0x8d8>)
 8003dbc:	4013      	ands	r3, r2
 8003dbe:	0019      	movs	r1, r3
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dc8:	431a      	orrs	r2, r3
 8003dca:	4b20      	ldr	r3, [pc, #128]	; (8003e4c <HAL_RCC_OscConfig+0x8c0>)
 8003dcc:	430a      	orrs	r2, r1
 8003dce:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003dd0:	4b1e      	ldr	r3, [pc, #120]	; (8003e4c <HAL_RCC_OscConfig+0x8c0>)
 8003dd2:	681a      	ldr	r2, [r3, #0]
 8003dd4:	4b1d      	ldr	r3, [pc, #116]	; (8003e4c <HAL_RCC_OscConfig+0x8c0>)
 8003dd6:	2180      	movs	r1, #128	; 0x80
 8003dd8:	0449      	lsls	r1, r1, #17
 8003dda:	430a      	orrs	r2, r1
 8003ddc:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003dde:	f7fd fcf5 	bl	80017cc <HAL_GetTick>
 8003de2:	0003      	movs	r3, r0
 8003de4:	613b      	str	r3, [r7, #16]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003de6:	e008      	b.n	8003dfa <HAL_RCC_OscConfig+0x86e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003de8:	f7fd fcf0 	bl	80017cc <HAL_GetTick>
 8003dec:	0002      	movs	r2, r0
 8003dee:	693b      	ldr	r3, [r7, #16]
 8003df0:	1ad3      	subs	r3, r2, r3
 8003df2:	2b02      	cmp	r3, #2
 8003df4:	d901      	bls.n	8003dfa <HAL_RCC_OscConfig+0x86e>
          {
            return HAL_TIMEOUT;
 8003df6:	2303      	movs	r3, #3
 8003df8:	e024      	b.n	8003e44 <HAL_RCC_OscConfig+0x8b8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003dfa:	4b14      	ldr	r3, [pc, #80]	; (8003e4c <HAL_RCC_OscConfig+0x8c0>)
 8003dfc:	681a      	ldr	r2, [r3, #0]
 8003dfe:	2380      	movs	r3, #128	; 0x80
 8003e00:	049b      	lsls	r3, r3, #18
 8003e02:	4013      	ands	r3, r2
 8003e04:	d0f0      	beq.n	8003de8 <HAL_RCC_OscConfig+0x85c>
 8003e06:	e01c      	b.n	8003e42 <HAL_RCC_OscConfig+0x8b6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003e08:	4b10      	ldr	r3, [pc, #64]	; (8003e4c <HAL_RCC_OscConfig+0x8c0>)
 8003e0a:	681a      	ldr	r2, [r3, #0]
 8003e0c:	4b0f      	ldr	r3, [pc, #60]	; (8003e4c <HAL_RCC_OscConfig+0x8c0>)
 8003e0e:	4914      	ldr	r1, [pc, #80]	; (8003e60 <HAL_RCC_OscConfig+0x8d4>)
 8003e10:	400a      	ands	r2, r1
 8003e12:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e14:	f7fd fcda 	bl	80017cc <HAL_GetTick>
 8003e18:	0003      	movs	r3, r0
 8003e1a:	613b      	str	r3, [r7, #16]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003e1c:	e008      	b.n	8003e30 <HAL_RCC_OscConfig+0x8a4>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003e1e:	f7fd fcd5 	bl	80017cc <HAL_GetTick>
 8003e22:	0002      	movs	r2, r0
 8003e24:	693b      	ldr	r3, [r7, #16]
 8003e26:	1ad3      	subs	r3, r2, r3
 8003e28:	2b02      	cmp	r3, #2
 8003e2a:	d901      	bls.n	8003e30 <HAL_RCC_OscConfig+0x8a4>
          {
            return HAL_TIMEOUT;
 8003e2c:	2303      	movs	r3, #3
 8003e2e:	e009      	b.n	8003e44 <HAL_RCC_OscConfig+0x8b8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003e30:	4b06      	ldr	r3, [pc, #24]	; (8003e4c <HAL_RCC_OscConfig+0x8c0>)
 8003e32:	681a      	ldr	r2, [r3, #0]
 8003e34:	2380      	movs	r3, #128	; 0x80
 8003e36:	049b      	lsls	r3, r3, #18
 8003e38:	4013      	ands	r3, r2
 8003e3a:	d1f0      	bne.n	8003e1e <HAL_RCC_OscConfig+0x892>
 8003e3c:	e001      	b.n	8003e42 <HAL_RCC_OscConfig+0x8b6>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8003e3e:	2301      	movs	r3, #1
 8003e40:	e000      	b.n	8003e44 <HAL_RCC_OscConfig+0x8b8>
    }
  }
  
  return HAL_OK;
 8003e42:	2300      	movs	r3, #0
}
 8003e44:	0018      	movs	r0, r3
 8003e46:	46bd      	mov	sp, r7
 8003e48:	b006      	add	sp, #24
 8003e4a:	bd80      	pop	{r7, pc}
 8003e4c:	40021000 	.word	0x40021000
 8003e50:	08007100 	.word	0x08007100
 8003e54:	0000027d 	.word	0x0000027d
 8003e58:	0000027e 	.word	0x0000027e
 8003e5c:	0000027f 	.word	0x0000027f
 8003e60:	feffffff 	.word	0xfeffffff
 8003e64:	ffc2ffff 	.word	0xffc2ffff

08003e68 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003e68:	b580      	push	{r7, lr}
 8003e6a:	b084      	sub	sp, #16
 8003e6c:	af00      	add	r7, sp, #0
 8003e6e:	6078      	str	r0, [r7, #4]
 8003e70:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8003e72:	2300      	movs	r3, #0
 8003e74:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d105      	bne.n	8003e88 <HAL_RCC_ClockConfig+0x20>
 8003e7c:	4aac      	ldr	r2, [pc, #688]	; (8004130 <HAL_RCC_ClockConfig+0x2c8>)
 8003e7e:	4bad      	ldr	r3, [pc, #692]	; (8004134 <HAL_RCC_ClockConfig+0x2cc>)
 8003e80:	0011      	movs	r1, r2
 8003e82:	0018      	movs	r0, r3
 8003e84:	f7fc fd65 	bl	8000952 <assert_failed>
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	2201      	movs	r2, #1
 8003e8e:	4013      	ands	r3, r2
 8003e90:	d10f      	bne.n	8003eb2 <HAL_RCC_ClockConfig+0x4a>
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	2202      	movs	r2, #2
 8003e98:	4013      	ands	r3, r2
 8003e9a:	d10a      	bne.n	8003eb2 <HAL_RCC_ClockConfig+0x4a>
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	2204      	movs	r2, #4
 8003ea2:	4013      	ands	r3, r2
 8003ea4:	d105      	bne.n	8003eb2 <HAL_RCC_ClockConfig+0x4a>
 8003ea6:	4aa4      	ldr	r2, [pc, #656]	; (8004138 <HAL_RCC_ClockConfig+0x2d0>)
 8003ea8:	4ba2      	ldr	r3, [pc, #648]	; (8004134 <HAL_RCC_ClockConfig+0x2cc>)
 8003eaa:	0011      	movs	r1, r2
 8003eac:	0018      	movs	r0, r3
 8003eae:	f7fc fd50 	bl	8000952 <assert_failed>
  assert_param(IS_FLASH_LATENCY(FLatency));
 8003eb2:	683b      	ldr	r3, [r7, #0]
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d009      	beq.n	8003ecc <HAL_RCC_ClockConfig+0x64>
 8003eb8:	683b      	ldr	r3, [r7, #0]
 8003eba:	2b01      	cmp	r3, #1
 8003ebc:	d006      	beq.n	8003ecc <HAL_RCC_ClockConfig+0x64>
 8003ebe:	23b7      	movs	r3, #183	; 0xb7
 8003ec0:	009a      	lsls	r2, r3, #2
 8003ec2:	4b9c      	ldr	r3, [pc, #624]	; (8004134 <HAL_RCC_ClockConfig+0x2cc>)
 8003ec4:	0011      	movs	r1, r2
 8003ec6:	0018      	movs	r0, r3
 8003ec8:	f7fc fd43 	bl	8000952 <assert_failed>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8003ecc:	4b9b      	ldr	r3, [pc, #620]	; (800413c <HAL_RCC_ClockConfig+0x2d4>)
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	2201      	movs	r2, #1
 8003ed2:	4013      	ands	r3, r2
 8003ed4:	683a      	ldr	r2, [r7, #0]
 8003ed6:	429a      	cmp	r2, r3
 8003ed8:	d911      	bls.n	8003efe <HAL_RCC_ClockConfig+0x96>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003eda:	4b98      	ldr	r3, [pc, #608]	; (800413c <HAL_RCC_ClockConfig+0x2d4>)
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	2201      	movs	r2, #1
 8003ee0:	4393      	bics	r3, r2
 8003ee2:	0019      	movs	r1, r3
 8003ee4:	4b95      	ldr	r3, [pc, #596]	; (800413c <HAL_RCC_ClockConfig+0x2d4>)
 8003ee6:	683a      	ldr	r2, [r7, #0]
 8003ee8:	430a      	orrs	r2, r1
 8003eea:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8003eec:	4b93      	ldr	r3, [pc, #588]	; (800413c <HAL_RCC_ClockConfig+0x2d4>)
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	2201      	movs	r2, #1
 8003ef2:	4013      	ands	r3, r2
 8003ef4:	683a      	ldr	r2, [r7, #0]
 8003ef6:	429a      	cmp	r2, r3
 8003ef8:	d001      	beq.n	8003efe <HAL_RCC_ClockConfig+0x96>
    {
      return HAL_ERROR;
 8003efa:	2301      	movs	r3, #1
 8003efc:	e114      	b.n	8004128 <HAL_RCC_ClockConfig+0x2c0>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	2202      	movs	r2, #2
 8003f04:	4013      	ands	r3, r2
 8003f06:	d033      	beq.n	8003f70 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	689b      	ldr	r3, [r3, #8]
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d025      	beq.n	8003f5c <HAL_RCC_ClockConfig+0xf4>
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	689b      	ldr	r3, [r3, #8]
 8003f14:	2b80      	cmp	r3, #128	; 0x80
 8003f16:	d021      	beq.n	8003f5c <HAL_RCC_ClockConfig+0xf4>
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	689b      	ldr	r3, [r3, #8]
 8003f1c:	2b90      	cmp	r3, #144	; 0x90
 8003f1e:	d01d      	beq.n	8003f5c <HAL_RCC_ClockConfig+0xf4>
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	689b      	ldr	r3, [r3, #8]
 8003f24:	2ba0      	cmp	r3, #160	; 0xa0
 8003f26:	d019      	beq.n	8003f5c <HAL_RCC_ClockConfig+0xf4>
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	689b      	ldr	r3, [r3, #8]
 8003f2c:	2bb0      	cmp	r3, #176	; 0xb0
 8003f2e:	d015      	beq.n	8003f5c <HAL_RCC_ClockConfig+0xf4>
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	689b      	ldr	r3, [r3, #8]
 8003f34:	2bc0      	cmp	r3, #192	; 0xc0
 8003f36:	d011      	beq.n	8003f5c <HAL_RCC_ClockConfig+0xf4>
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	689b      	ldr	r3, [r3, #8]
 8003f3c:	2bd0      	cmp	r3, #208	; 0xd0
 8003f3e:	d00d      	beq.n	8003f5c <HAL_RCC_ClockConfig+0xf4>
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	689b      	ldr	r3, [r3, #8]
 8003f44:	2be0      	cmp	r3, #224	; 0xe0
 8003f46:	d009      	beq.n	8003f5c <HAL_RCC_ClockConfig+0xf4>
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	689b      	ldr	r3, [r3, #8]
 8003f4c:	2bf0      	cmp	r3, #240	; 0xf0
 8003f4e:	d005      	beq.n	8003f5c <HAL_RCC_ClockConfig+0xf4>
 8003f50:	4a7b      	ldr	r2, [pc, #492]	; (8004140 <HAL_RCC_ClockConfig+0x2d8>)
 8003f52:	4b78      	ldr	r3, [pc, #480]	; (8004134 <HAL_RCC_ClockConfig+0x2cc>)
 8003f54:	0011      	movs	r1, r2
 8003f56:	0018      	movs	r0, r3
 8003f58:	f7fc fcfb 	bl	8000952 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003f5c:	4b79      	ldr	r3, [pc, #484]	; (8004144 <HAL_RCC_ClockConfig+0x2dc>)
 8003f5e:	685b      	ldr	r3, [r3, #4]
 8003f60:	22f0      	movs	r2, #240	; 0xf0
 8003f62:	4393      	bics	r3, r2
 8003f64:	0019      	movs	r1, r3
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	689a      	ldr	r2, [r3, #8]
 8003f6a:	4b76      	ldr	r3, [pc, #472]	; (8004144 <HAL_RCC_ClockConfig+0x2dc>)
 8003f6c:	430a      	orrs	r2, r1
 8003f6e:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	2201      	movs	r2, #1
 8003f76:	4013      	ands	r3, r2
 8003f78:	d100      	bne.n	8003f7c <HAL_RCC_ClockConfig+0x114>
 8003f7a:	e079      	b.n	8004070 <HAL_RCC_ClockConfig+0x208>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	685b      	ldr	r3, [r3, #4]
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d00d      	beq.n	8003fa0 <HAL_RCC_ClockConfig+0x138>
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	685b      	ldr	r3, [r3, #4]
 8003f88:	2b01      	cmp	r3, #1
 8003f8a:	d009      	beq.n	8003fa0 <HAL_RCC_ClockConfig+0x138>
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	685b      	ldr	r3, [r3, #4]
 8003f90:	2b02      	cmp	r3, #2
 8003f92:	d005      	beq.n	8003fa0 <HAL_RCC_ClockConfig+0x138>
 8003f94:	4a6c      	ldr	r2, [pc, #432]	; (8004148 <HAL_RCC_ClockConfig+0x2e0>)
 8003f96:	4b67      	ldr	r3, [pc, #412]	; (8004134 <HAL_RCC_ClockConfig+0x2cc>)
 8003f98:	0011      	movs	r1, r2
 8003f9a:	0018      	movs	r0, r3
 8003f9c:	f7fc fcd9 	bl	8000952 <assert_failed>
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	685b      	ldr	r3, [r3, #4]
 8003fa4:	2b01      	cmp	r3, #1
 8003fa6:	d107      	bne.n	8003fb8 <HAL_RCC_ClockConfig+0x150>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003fa8:	4b66      	ldr	r3, [pc, #408]	; (8004144 <HAL_RCC_ClockConfig+0x2dc>)
 8003faa:	681a      	ldr	r2, [r3, #0]
 8003fac:	2380      	movs	r3, #128	; 0x80
 8003fae:	029b      	lsls	r3, r3, #10
 8003fb0:	4013      	ands	r3, r2
 8003fb2:	d114      	bne.n	8003fde <HAL_RCC_ClockConfig+0x176>
      {
        return HAL_ERROR;
 8003fb4:	2301      	movs	r3, #1
 8003fb6:	e0b7      	b.n	8004128 <HAL_RCC_ClockConfig+0x2c0>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	685b      	ldr	r3, [r3, #4]
 8003fbc:	2b02      	cmp	r3, #2
 8003fbe:	d107      	bne.n	8003fd0 <HAL_RCC_ClockConfig+0x168>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003fc0:	4b60      	ldr	r3, [pc, #384]	; (8004144 <HAL_RCC_ClockConfig+0x2dc>)
 8003fc2:	681a      	ldr	r2, [r3, #0]
 8003fc4:	2380      	movs	r3, #128	; 0x80
 8003fc6:	049b      	lsls	r3, r3, #18
 8003fc8:	4013      	ands	r3, r2
 8003fca:	d108      	bne.n	8003fde <HAL_RCC_ClockConfig+0x176>
      {
        return HAL_ERROR;
 8003fcc:	2301      	movs	r3, #1
 8003fce:	e0ab      	b.n	8004128 <HAL_RCC_ClockConfig+0x2c0>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003fd0:	4b5c      	ldr	r3, [pc, #368]	; (8004144 <HAL_RCC_ClockConfig+0x2dc>)
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	2202      	movs	r2, #2
 8003fd6:	4013      	ands	r3, r2
 8003fd8:	d101      	bne.n	8003fde <HAL_RCC_ClockConfig+0x176>
      {
        return HAL_ERROR;
 8003fda:	2301      	movs	r3, #1
 8003fdc:	e0a4      	b.n	8004128 <HAL_RCC_ClockConfig+0x2c0>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003fde:	4b59      	ldr	r3, [pc, #356]	; (8004144 <HAL_RCC_ClockConfig+0x2dc>)
 8003fe0:	685b      	ldr	r3, [r3, #4]
 8003fe2:	2203      	movs	r2, #3
 8003fe4:	4393      	bics	r3, r2
 8003fe6:	0019      	movs	r1, r3
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	685a      	ldr	r2, [r3, #4]
 8003fec:	4b55      	ldr	r3, [pc, #340]	; (8004144 <HAL_RCC_ClockConfig+0x2dc>)
 8003fee:	430a      	orrs	r2, r1
 8003ff0:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003ff2:	f7fd fbeb 	bl	80017cc <HAL_GetTick>
 8003ff6:	0003      	movs	r3, r0
 8003ff8:	60fb      	str	r3, [r7, #12]
    
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	685b      	ldr	r3, [r3, #4]
 8003ffe:	2b01      	cmp	r3, #1
 8004000:	d111      	bne.n	8004026 <HAL_RCC_ClockConfig+0x1be>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8004002:	e009      	b.n	8004018 <HAL_RCC_ClockConfig+0x1b0>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004004:	f7fd fbe2 	bl	80017cc <HAL_GetTick>
 8004008:	0002      	movs	r2, r0
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	1ad3      	subs	r3, r2, r3
 800400e:	4a4f      	ldr	r2, [pc, #316]	; (800414c <HAL_RCC_ClockConfig+0x2e4>)
 8004010:	4293      	cmp	r3, r2
 8004012:	d901      	bls.n	8004018 <HAL_RCC_ClockConfig+0x1b0>
        {
          return HAL_TIMEOUT;
 8004014:	2303      	movs	r3, #3
 8004016:	e087      	b.n	8004128 <HAL_RCC_ClockConfig+0x2c0>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8004018:	4b4a      	ldr	r3, [pc, #296]	; (8004144 <HAL_RCC_ClockConfig+0x2dc>)
 800401a:	685b      	ldr	r3, [r3, #4]
 800401c:	220c      	movs	r2, #12
 800401e:	4013      	ands	r3, r2
 8004020:	2b04      	cmp	r3, #4
 8004022:	d1ef      	bne.n	8004004 <HAL_RCC_ClockConfig+0x19c>
 8004024:	e024      	b.n	8004070 <HAL_RCC_ClockConfig+0x208>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	685b      	ldr	r3, [r3, #4]
 800402a:	2b02      	cmp	r3, #2
 800402c:	d11b      	bne.n	8004066 <HAL_RCC_ClockConfig+0x1fe>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800402e:	e009      	b.n	8004044 <HAL_RCC_ClockConfig+0x1dc>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004030:	f7fd fbcc 	bl	80017cc <HAL_GetTick>
 8004034:	0002      	movs	r2, r0
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	1ad3      	subs	r3, r2, r3
 800403a:	4a44      	ldr	r2, [pc, #272]	; (800414c <HAL_RCC_ClockConfig+0x2e4>)
 800403c:	4293      	cmp	r3, r2
 800403e:	d901      	bls.n	8004044 <HAL_RCC_ClockConfig+0x1dc>
        {
          return HAL_TIMEOUT;
 8004040:	2303      	movs	r3, #3
 8004042:	e071      	b.n	8004128 <HAL_RCC_ClockConfig+0x2c0>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004044:	4b3f      	ldr	r3, [pc, #252]	; (8004144 <HAL_RCC_ClockConfig+0x2dc>)
 8004046:	685b      	ldr	r3, [r3, #4]
 8004048:	220c      	movs	r2, #12
 800404a:	4013      	ands	r3, r2
 800404c:	2b08      	cmp	r3, #8
 800404e:	d1ef      	bne.n	8004030 <HAL_RCC_ClockConfig+0x1c8>
 8004050:	e00e      	b.n	8004070 <HAL_RCC_ClockConfig+0x208>
#endif /* RCC_CFGR_SWS_HSI48 */
    else
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004052:	f7fd fbbb 	bl	80017cc <HAL_GetTick>
 8004056:	0002      	movs	r2, r0
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	1ad3      	subs	r3, r2, r3
 800405c:	4a3b      	ldr	r2, [pc, #236]	; (800414c <HAL_RCC_ClockConfig+0x2e4>)
 800405e:	4293      	cmp	r3, r2
 8004060:	d901      	bls.n	8004066 <HAL_RCC_ClockConfig+0x1fe>
        {
          return HAL_TIMEOUT;
 8004062:	2303      	movs	r3, #3
 8004064:	e060      	b.n	8004128 <HAL_RCC_ClockConfig+0x2c0>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8004066:	4b37      	ldr	r3, [pc, #220]	; (8004144 <HAL_RCC_ClockConfig+0x2dc>)
 8004068:	685b      	ldr	r3, [r3, #4]
 800406a:	220c      	movs	r2, #12
 800406c:	4013      	ands	r3, r2
 800406e:	d1f0      	bne.n	8004052 <HAL_RCC_ClockConfig+0x1ea>
        }
      }
    }      
  }    
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 8004070:	4b32      	ldr	r3, [pc, #200]	; (800413c <HAL_RCC_ClockConfig+0x2d4>)
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	2201      	movs	r2, #1
 8004076:	4013      	ands	r3, r2
 8004078:	683a      	ldr	r2, [r7, #0]
 800407a:	429a      	cmp	r2, r3
 800407c:	d211      	bcs.n	80040a2 <HAL_RCC_ClockConfig+0x23a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800407e:	4b2f      	ldr	r3, [pc, #188]	; (800413c <HAL_RCC_ClockConfig+0x2d4>)
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	2201      	movs	r2, #1
 8004084:	4393      	bics	r3, r2
 8004086:	0019      	movs	r1, r3
 8004088:	4b2c      	ldr	r3, [pc, #176]	; (800413c <HAL_RCC_ClockConfig+0x2d4>)
 800408a:	683a      	ldr	r2, [r7, #0]
 800408c:	430a      	orrs	r2, r1
 800408e:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8004090:	4b2a      	ldr	r3, [pc, #168]	; (800413c <HAL_RCC_ClockConfig+0x2d4>)
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	2201      	movs	r2, #1
 8004096:	4013      	ands	r3, r2
 8004098:	683a      	ldr	r2, [r7, #0]
 800409a:	429a      	cmp	r2, r3
 800409c:	d001      	beq.n	80040a2 <HAL_RCC_ClockConfig+0x23a>
    {
      return HAL_ERROR;
 800409e:	2301      	movs	r3, #1
 80040a0:	e042      	b.n	8004128 <HAL_RCC_ClockConfig+0x2c0>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	2204      	movs	r2, #4
 80040a8:	4013      	ands	r3, r2
 80040aa:	d02b      	beq.n	8004104 <HAL_RCC_ClockConfig+0x29c>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	68db      	ldr	r3, [r3, #12]
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d01d      	beq.n	80040f0 <HAL_RCC_ClockConfig+0x288>
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	68da      	ldr	r2, [r3, #12]
 80040b8:	2380      	movs	r3, #128	; 0x80
 80040ba:	00db      	lsls	r3, r3, #3
 80040bc:	429a      	cmp	r2, r3
 80040be:	d017      	beq.n	80040f0 <HAL_RCC_ClockConfig+0x288>
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	68da      	ldr	r2, [r3, #12]
 80040c4:	23a0      	movs	r3, #160	; 0xa0
 80040c6:	00db      	lsls	r3, r3, #3
 80040c8:	429a      	cmp	r2, r3
 80040ca:	d011      	beq.n	80040f0 <HAL_RCC_ClockConfig+0x288>
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	68da      	ldr	r2, [r3, #12]
 80040d0:	23c0      	movs	r3, #192	; 0xc0
 80040d2:	00db      	lsls	r3, r3, #3
 80040d4:	429a      	cmp	r2, r3
 80040d6:	d00b      	beq.n	80040f0 <HAL_RCC_ClockConfig+0x288>
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	68da      	ldr	r2, [r3, #12]
 80040dc:	23e0      	movs	r3, #224	; 0xe0
 80040de:	00db      	lsls	r3, r3, #3
 80040e0:	429a      	cmp	r2, r3
 80040e2:	d005      	beq.n	80040f0 <HAL_RCC_ClockConfig+0x288>
 80040e4:	4a1a      	ldr	r2, [pc, #104]	; (8004150 <HAL_RCC_ClockConfig+0x2e8>)
 80040e6:	4b13      	ldr	r3, [pc, #76]	; (8004134 <HAL_RCC_ClockConfig+0x2cc>)
 80040e8:	0011      	movs	r1, r2
 80040ea:	0018      	movs	r0, r3
 80040ec:	f7fc fc31 	bl	8000952 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80040f0:	4b14      	ldr	r3, [pc, #80]	; (8004144 <HAL_RCC_ClockConfig+0x2dc>)
 80040f2:	685b      	ldr	r3, [r3, #4]
 80040f4:	4a17      	ldr	r2, [pc, #92]	; (8004154 <HAL_RCC_ClockConfig+0x2ec>)
 80040f6:	4013      	ands	r3, r2
 80040f8:	0019      	movs	r1, r3
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	68da      	ldr	r2, [r3, #12]
 80040fe:	4b11      	ldr	r3, [pc, #68]	; (8004144 <HAL_RCC_ClockConfig+0x2dc>)
 8004100:	430a      	orrs	r2, r1
 8004102:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8004104:	f000 f82c 	bl	8004160 <HAL_RCC_GetSysClockFreq>
 8004108:	0001      	movs	r1, r0
 800410a:	4b0e      	ldr	r3, [pc, #56]	; (8004144 <HAL_RCC_ClockConfig+0x2dc>)
 800410c:	685b      	ldr	r3, [r3, #4]
 800410e:	091b      	lsrs	r3, r3, #4
 8004110:	220f      	movs	r2, #15
 8004112:	4013      	ands	r3, r2
 8004114:	4a10      	ldr	r2, [pc, #64]	; (8004158 <HAL_RCC_ClockConfig+0x2f0>)
 8004116:	5cd3      	ldrb	r3, [r2, r3]
 8004118:	000a      	movs	r2, r1
 800411a:	40da      	lsrs	r2, r3
 800411c:	4b0f      	ldr	r3, [pc, #60]	; (800415c <HAL_RCC_ClockConfig+0x2f4>)
 800411e:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8004120:	2000      	movs	r0, #0
 8004122:	f7fd fb2b 	bl	800177c <HAL_InitTick>
  
  return HAL_OK;
 8004126:	2300      	movs	r3, #0
}
 8004128:	0018      	movs	r0, r3
 800412a:	46bd      	mov	sp, r7
 800412c:	b004      	add	sp, #16
 800412e:	bd80      	pop	{r7, pc}
 8004130:	000002da 	.word	0x000002da
 8004134:	08007100 	.word	0x08007100
 8004138:	000002db 	.word	0x000002db
 800413c:	40022000 	.word	0x40022000
 8004140:	000002f3 	.word	0x000002f3
 8004144:	40021000 	.word	0x40021000
 8004148:	000002fa 	.word	0x000002fa
 800414c:	00001388 	.word	0x00001388
 8004150:	00000363 	.word	0x00000363
 8004154:	fffff8ff 	.word	0xfffff8ff
 8004158:	08007208 	.word	0x08007208
 800415c:	20000000 	.word	0x20000000

08004160 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004160:	b590      	push	{r4, r7, lr}
 8004162:	b08f      	sub	sp, #60	; 0x3c
 8004164:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8004166:	2314      	movs	r3, #20
 8004168:	18fb      	adds	r3, r7, r3
 800416a:	4a2b      	ldr	r2, [pc, #172]	; (8004218 <HAL_RCC_GetSysClockFreq+0xb8>)
 800416c:	ca13      	ldmia	r2!, {r0, r1, r4}
 800416e:	c313      	stmia	r3!, {r0, r1, r4}
 8004170:	6812      	ldr	r2, [r2, #0]
 8004172:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8004174:	1d3b      	adds	r3, r7, #4
 8004176:	4a29      	ldr	r2, [pc, #164]	; (800421c <HAL_RCC_GetSysClockFreq+0xbc>)
 8004178:	ca13      	ldmia	r2!, {r0, r1, r4}
 800417a:	c313      	stmia	r3!, {r0, r1, r4}
 800417c:	6812      	ldr	r2, [r2, #0]
 800417e:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004180:	2300      	movs	r3, #0
 8004182:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004184:	2300      	movs	r3, #0
 8004186:	62bb      	str	r3, [r7, #40]	; 0x28
 8004188:	2300      	movs	r3, #0
 800418a:	637b      	str	r3, [r7, #52]	; 0x34
 800418c:	2300      	movs	r3, #0
 800418e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 8004190:	2300      	movs	r3, #0
 8004192:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 8004194:	4b22      	ldr	r3, [pc, #136]	; (8004220 <HAL_RCC_GetSysClockFreq+0xc0>)
 8004196:	685b      	ldr	r3, [r3, #4]
 8004198:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800419a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800419c:	220c      	movs	r2, #12
 800419e:	4013      	ands	r3, r2
 80041a0:	2b04      	cmp	r3, #4
 80041a2:	d002      	beq.n	80041aa <HAL_RCC_GetSysClockFreq+0x4a>
 80041a4:	2b08      	cmp	r3, #8
 80041a6:	d003      	beq.n	80041b0 <HAL_RCC_GetSysClockFreq+0x50>
 80041a8:	e02d      	b.n	8004206 <HAL_RCC_GetSysClockFreq+0xa6>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80041aa:	4b1e      	ldr	r3, [pc, #120]	; (8004224 <HAL_RCC_GetSysClockFreq+0xc4>)
 80041ac:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80041ae:	e02d      	b.n	800420c <HAL_RCC_GetSysClockFreq+0xac>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 80041b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80041b2:	0c9b      	lsrs	r3, r3, #18
 80041b4:	220f      	movs	r2, #15
 80041b6:	4013      	ands	r3, r2
 80041b8:	2214      	movs	r2, #20
 80041ba:	18ba      	adds	r2, r7, r2
 80041bc:	5cd3      	ldrb	r3, [r2, r3]
 80041be:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 80041c0:	4b17      	ldr	r3, [pc, #92]	; (8004220 <HAL_RCC_GetSysClockFreq+0xc0>)
 80041c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041c4:	220f      	movs	r2, #15
 80041c6:	4013      	ands	r3, r2
 80041c8:	1d3a      	adds	r2, r7, #4
 80041ca:	5cd3      	ldrb	r3, [r2, r3]
 80041cc:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80041ce:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80041d0:	2380      	movs	r3, #128	; 0x80
 80041d2:	025b      	lsls	r3, r3, #9
 80041d4:	4013      	ands	r3, r2
 80041d6:	d009      	beq.n	80041ec <HAL_RCC_GetSysClockFreq+0x8c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (HSE_VALUE / prediv) * pllmul;
 80041d8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80041da:	4812      	ldr	r0, [pc, #72]	; (8004224 <HAL_RCC_GetSysClockFreq+0xc4>)
 80041dc:	f7fb ff94 	bl	8000108 <__udivsi3>
 80041e0:	0003      	movs	r3, r0
 80041e2:	001a      	movs	r2, r3
 80041e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041e6:	4353      	muls	r3, r2
 80041e8:	637b      	str	r3, [r7, #52]	; 0x34
 80041ea:	e009      	b.n	8004200 <HAL_RCC_GetSysClockFreq+0xa0>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (HSI_VALUE / prediv) * pllmul;
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1U) * pllmul);
 80041ec:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80041ee:	000a      	movs	r2, r1
 80041f0:	0152      	lsls	r2, r2, #5
 80041f2:	1a52      	subs	r2, r2, r1
 80041f4:	0193      	lsls	r3, r2, #6
 80041f6:	1a9b      	subs	r3, r3, r2
 80041f8:	00db      	lsls	r3, r3, #3
 80041fa:	185b      	adds	r3, r3, r1
 80041fc:	021b      	lsls	r3, r3, #8
 80041fe:	637b      	str	r3, [r7, #52]	; 0x34
#endif
      }
      sysclockfreq = pllclk;
 8004200:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004202:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8004204:	e002      	b.n	800420c <HAL_RCC_GetSysClockFreq+0xac>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004206:	4b07      	ldr	r3, [pc, #28]	; (8004224 <HAL_RCC_GetSysClockFreq+0xc4>)
 8004208:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800420a:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 800420c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 800420e:	0018      	movs	r0, r3
 8004210:	46bd      	mov	sp, r7
 8004212:	b00f      	add	sp, #60	; 0x3c
 8004214:	bd90      	pop	{r4, r7, pc}
 8004216:	46c0      	nop			; (mov r8, r8)
 8004218:	08007138 	.word	0x08007138
 800421c:	08007148 	.word	0x08007148
 8004220:	40021000 	.word	0x40021000
 8004224:	007a1200 	.word	0x007a1200

08004228 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004228:	b580      	push	{r7, lr}
 800422a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800422c:	4b02      	ldr	r3, [pc, #8]	; (8004238 <HAL_RCC_GetHCLKFreq+0x10>)
 800422e:	681b      	ldr	r3, [r3, #0]
}
 8004230:	0018      	movs	r0, r3
 8004232:	46bd      	mov	sp, r7
 8004234:	bd80      	pop	{r7, pc}
 8004236:	46c0      	nop			; (mov r8, r8)
 8004238:	20000000 	.word	0x20000000

0800423c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800423c:	b580      	push	{r7, lr}
 800423e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8004240:	f7ff fff2 	bl	8004228 <HAL_RCC_GetHCLKFreq>
 8004244:	0001      	movs	r1, r0
 8004246:	4b06      	ldr	r3, [pc, #24]	; (8004260 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004248:	685b      	ldr	r3, [r3, #4]
 800424a:	0a1b      	lsrs	r3, r3, #8
 800424c:	2207      	movs	r2, #7
 800424e:	4013      	ands	r3, r2
 8004250:	4a04      	ldr	r2, [pc, #16]	; (8004264 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004252:	5cd3      	ldrb	r3, [r2, r3]
 8004254:	40d9      	lsrs	r1, r3
 8004256:	000b      	movs	r3, r1
}    
 8004258:	0018      	movs	r0, r3
 800425a:	46bd      	mov	sp, r7
 800425c:	bd80      	pop	{r7, pc}
 800425e:	46c0      	nop			; (mov r8, r8)
 8004260:	40021000 	.word	0x40021000
 8004264:	08007218 	.word	0x08007218

08004268 <HAL_TIM_Base_Init>:
  *         parameters in the TIM_HandleTypeDef and create the associated handle.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004268:	b580      	push	{r7, lr}
 800426a:	b082      	sub	sp, #8
 800426c:	af00      	add	r7, sp, #0
 800426e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if(htim == NULL)
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	2b00      	cmp	r3, #0
 8004274:	d101      	bne.n	800427a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004276:	2301      	movs	r3, #1
 8004278:	e087      	b.n	800438a <HAL_TIM_Base_Init+0x122>
  }

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	4a45      	ldr	r2, [pc, #276]	; (8004394 <HAL_TIM_Base_Init+0x12c>)
 8004280:	4293      	cmp	r3, r2
 8004282:	d028      	beq.n	80042d6 <HAL_TIM_Base_Init+0x6e>
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681a      	ldr	r2, [r3, #0]
 8004288:	2380      	movs	r3, #128	; 0x80
 800428a:	05db      	lsls	r3, r3, #23
 800428c:	429a      	cmp	r2, r3
 800428e:	d022      	beq.n	80042d6 <HAL_TIM_Base_Init+0x6e>
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	4a40      	ldr	r2, [pc, #256]	; (8004398 <HAL_TIM_Base_Init+0x130>)
 8004296:	4293      	cmp	r3, r2
 8004298:	d01d      	beq.n	80042d6 <HAL_TIM_Base_Init+0x6e>
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	4a3f      	ldr	r2, [pc, #252]	; (800439c <HAL_TIM_Base_Init+0x134>)
 80042a0:	4293      	cmp	r3, r2
 80042a2:	d018      	beq.n	80042d6 <HAL_TIM_Base_Init+0x6e>
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	4a3d      	ldr	r2, [pc, #244]	; (80043a0 <HAL_TIM_Base_Init+0x138>)
 80042aa:	4293      	cmp	r3, r2
 80042ac:	d013      	beq.n	80042d6 <HAL_TIM_Base_Init+0x6e>
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	4a3c      	ldr	r2, [pc, #240]	; (80043a4 <HAL_TIM_Base_Init+0x13c>)
 80042b4:	4293      	cmp	r3, r2
 80042b6:	d00e      	beq.n	80042d6 <HAL_TIM_Base_Init+0x6e>
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	4a3a      	ldr	r2, [pc, #232]	; (80043a8 <HAL_TIM_Base_Init+0x140>)
 80042be:	4293      	cmp	r3, r2
 80042c0:	d009      	beq.n	80042d6 <HAL_TIM_Base_Init+0x6e>
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	4a39      	ldr	r2, [pc, #228]	; (80043ac <HAL_TIM_Base_Init+0x144>)
 80042c8:	4293      	cmp	r3, r2
 80042ca:	d004      	beq.n	80042d6 <HAL_TIM_Base_Init+0x6e>
 80042cc:	4b38      	ldr	r3, [pc, #224]	; (80043b0 <HAL_TIM_Base_Init+0x148>)
 80042ce:	21d4      	movs	r1, #212	; 0xd4
 80042d0:	0018      	movs	r0, r3
 80042d2:	f7fc fb3e 	bl	8000952 <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	689b      	ldr	r3, [r3, #8]
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d014      	beq.n	8004308 <HAL_TIM_Base_Init+0xa0>
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	689b      	ldr	r3, [r3, #8]
 80042e2:	2b10      	cmp	r3, #16
 80042e4:	d010      	beq.n	8004308 <HAL_TIM_Base_Init+0xa0>
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	689b      	ldr	r3, [r3, #8]
 80042ea:	2b20      	cmp	r3, #32
 80042ec:	d00c      	beq.n	8004308 <HAL_TIM_Base_Init+0xa0>
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	689b      	ldr	r3, [r3, #8]
 80042f2:	2b40      	cmp	r3, #64	; 0x40
 80042f4:	d008      	beq.n	8004308 <HAL_TIM_Base_Init+0xa0>
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	689b      	ldr	r3, [r3, #8]
 80042fa:	2b60      	cmp	r3, #96	; 0x60
 80042fc:	d004      	beq.n	8004308 <HAL_TIM_Base_Init+0xa0>
 80042fe:	4b2c      	ldr	r3, [pc, #176]	; (80043b0 <HAL_TIM_Base_Init+0x148>)
 8004300:	21d5      	movs	r1, #213	; 0xd5
 8004302:	0018      	movs	r0, r3
 8004304:	f7fc fb25 	bl	8000952 <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	691b      	ldr	r3, [r3, #16]
 800430c:	2b00      	cmp	r3, #0
 800430e:	d010      	beq.n	8004332 <HAL_TIM_Base_Init+0xca>
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	691a      	ldr	r2, [r3, #16]
 8004314:	2380      	movs	r3, #128	; 0x80
 8004316:	005b      	lsls	r3, r3, #1
 8004318:	429a      	cmp	r2, r3
 800431a:	d00a      	beq.n	8004332 <HAL_TIM_Base_Init+0xca>
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	691a      	ldr	r2, [r3, #16]
 8004320:	2380      	movs	r3, #128	; 0x80
 8004322:	009b      	lsls	r3, r3, #2
 8004324:	429a      	cmp	r2, r3
 8004326:	d004      	beq.n	8004332 <HAL_TIM_Base_Init+0xca>
 8004328:	4b21      	ldr	r3, [pc, #132]	; (80043b0 <HAL_TIM_Base_Init+0x148>)
 800432a:	21d6      	movs	r1, #214	; 0xd6
 800432c:	0018      	movs	r0, r3
 800432e:	f7fc fb10 	bl	8000952 <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	699b      	ldr	r3, [r3, #24]
 8004336:	2b00      	cmp	r3, #0
 8004338:	d008      	beq.n	800434c <HAL_TIM_Base_Init+0xe4>
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	699b      	ldr	r3, [r3, #24]
 800433e:	2b80      	cmp	r3, #128	; 0x80
 8004340:	d004      	beq.n	800434c <HAL_TIM_Base_Init+0xe4>
 8004342:	4b1b      	ldr	r3, [pc, #108]	; (80043b0 <HAL_TIM_Base_Init+0x148>)
 8004344:	21d7      	movs	r1, #215	; 0xd7
 8004346:	0018      	movs	r0, r3
 8004348:	f7fc fb03 	bl	8000952 <assert_failed>

  if(htim->State == HAL_TIM_STATE_RESET)
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	223d      	movs	r2, #61	; 0x3d
 8004350:	5c9b      	ldrb	r3, [r3, r2]
 8004352:	b2db      	uxtb	r3, r3
 8004354:	2b00      	cmp	r3, #0
 8004356:	d107      	bne.n	8004368 <HAL_TIM_Base_Init+0x100>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	223c      	movs	r2, #60	; 0x3c
 800435c:	2100      	movs	r1, #0
 800435e:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	0018      	movs	r0, r3
 8004364:	f7fc fd2c 	bl	8000dc0 <HAL_TIM_Base_MspInit>
  }

  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	223d      	movs	r2, #61	; 0x3d
 800436c:	2102      	movs	r1, #2
 800436e:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681a      	ldr	r2, [r3, #0]
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	3304      	adds	r3, #4
 8004378:	0019      	movs	r1, r3
 800437a:	0010      	movs	r0, r2
 800437c:	f001 f996 	bl	80056ac <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	223d      	movs	r2, #61	; 0x3d
 8004384:	2101      	movs	r1, #1
 8004386:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004388:	2300      	movs	r3, #0
}
 800438a:	0018      	movs	r0, r3
 800438c:	46bd      	mov	sp, r7
 800438e:	b002      	add	sp, #8
 8004390:	bd80      	pop	{r7, pc}
 8004392:	46c0      	nop			; (mov r8, r8)
 8004394:	40012c00 	.word	0x40012c00
 8004398:	40000400 	.word	0x40000400
 800439c:	40001000 	.word	0x40001000
 80043a0:	40002000 	.word	0x40002000
 80043a4:	40014000 	.word	0x40014000
 80043a8:	40014400 	.word	0x40014400
 80043ac:	40014800 	.word	0x40014800
 80043b0:	08007158 	.word	0x08007158

080043b4 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM handle
  * @retval HAL status
*/
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80043b4:	b580      	push	{r7, lr}
 80043b6:	b082      	sub	sp, #8
 80043b8:	af00      	add	r7, sp, #0
 80043ba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	4a21      	ldr	r2, [pc, #132]	; (8004448 <HAL_TIM_Base_Start+0x94>)
 80043c2:	4293      	cmp	r3, r2
 80043c4:	d02a      	beq.n	800441c <HAL_TIM_Base_Start+0x68>
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681a      	ldr	r2, [r3, #0]
 80043ca:	2380      	movs	r3, #128	; 0x80
 80043cc:	05db      	lsls	r3, r3, #23
 80043ce:	429a      	cmp	r2, r3
 80043d0:	d024      	beq.n	800441c <HAL_TIM_Base_Start+0x68>
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	4a1d      	ldr	r2, [pc, #116]	; (800444c <HAL_TIM_Base_Start+0x98>)
 80043d8:	4293      	cmp	r3, r2
 80043da:	d01f      	beq.n	800441c <HAL_TIM_Base_Start+0x68>
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	4a1b      	ldr	r2, [pc, #108]	; (8004450 <HAL_TIM_Base_Start+0x9c>)
 80043e2:	4293      	cmp	r3, r2
 80043e4:	d01a      	beq.n	800441c <HAL_TIM_Base_Start+0x68>
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	4a1a      	ldr	r2, [pc, #104]	; (8004454 <HAL_TIM_Base_Start+0xa0>)
 80043ec:	4293      	cmp	r3, r2
 80043ee:	d015      	beq.n	800441c <HAL_TIM_Base_Start+0x68>
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	4a18      	ldr	r2, [pc, #96]	; (8004458 <HAL_TIM_Base_Start+0xa4>)
 80043f6:	4293      	cmp	r3, r2
 80043f8:	d010      	beq.n	800441c <HAL_TIM_Base_Start+0x68>
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	4a17      	ldr	r2, [pc, #92]	; (800445c <HAL_TIM_Base_Start+0xa8>)
 8004400:	4293      	cmp	r3, r2
 8004402:	d00b      	beq.n	800441c <HAL_TIM_Base_Start+0x68>
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	4a15      	ldr	r2, [pc, #84]	; (8004460 <HAL_TIM_Base_Start+0xac>)
 800440a:	4293      	cmp	r3, r2
 800440c:	d006      	beq.n	800441c <HAL_TIM_Base_Start+0x68>
 800440e:	2398      	movs	r3, #152	; 0x98
 8004410:	005a      	lsls	r2, r3, #1
 8004412:	4b14      	ldr	r3, [pc, #80]	; (8004464 <HAL_TIM_Base_Start+0xb0>)
 8004414:	0011      	movs	r1, r2
 8004416:	0018      	movs	r0, r3
 8004418:	f7fc fa9b 	bl	8000952 <assert_failed>

  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	223d      	movs	r2, #61	; 0x3d
 8004420:	2102      	movs	r1, #2
 8004422:	5499      	strb	r1, [r3, r2]

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	681a      	ldr	r2, [r3, #0]
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	2101      	movs	r1, #1
 8004430:	430a      	orrs	r2, r1
 8004432:	601a      	str	r2, [r3, #0]

  /* Change the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	223d      	movs	r2, #61	; 0x3d
 8004438:	2101      	movs	r1, #1
 800443a:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 800443c:	2300      	movs	r3, #0
}
 800443e:	0018      	movs	r0, r3
 8004440:	46bd      	mov	sp, r7
 8004442:	b002      	add	sp, #8
 8004444:	bd80      	pop	{r7, pc}
 8004446:	46c0      	nop			; (mov r8, r8)
 8004448:	40012c00 	.word	0x40012c00
 800444c:	40000400 	.word	0x40000400
 8004450:	40001000 	.word	0x40001000
 8004454:	40002000 	.word	0x40002000
 8004458:	40014000 	.word	0x40014000
 800445c:	40014400 	.word	0x40014400
 8004460:	40014800 	.word	0x40014800
 8004464:	08007158 	.word	0x08007158

08004468 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM handle
  * @retval HAL status
*/
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 8004468:	b580      	push	{r7, lr}
 800446a:	b082      	sub	sp, #8
 800446c:	af00      	add	r7, sp, #0
 800446e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	4a27      	ldr	r2, [pc, #156]	; (8004514 <HAL_TIM_Base_Stop+0xac>)
 8004476:	4293      	cmp	r3, r2
 8004478:	d02b      	beq.n	80044d2 <HAL_TIM_Base_Stop+0x6a>
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681a      	ldr	r2, [r3, #0]
 800447e:	2380      	movs	r3, #128	; 0x80
 8004480:	05db      	lsls	r3, r3, #23
 8004482:	429a      	cmp	r2, r3
 8004484:	d025      	beq.n	80044d2 <HAL_TIM_Base_Stop+0x6a>
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	4a23      	ldr	r2, [pc, #140]	; (8004518 <HAL_TIM_Base_Stop+0xb0>)
 800448c:	4293      	cmp	r3, r2
 800448e:	d020      	beq.n	80044d2 <HAL_TIM_Base_Stop+0x6a>
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	4a21      	ldr	r2, [pc, #132]	; (800451c <HAL_TIM_Base_Stop+0xb4>)
 8004496:	4293      	cmp	r3, r2
 8004498:	d01b      	beq.n	80044d2 <HAL_TIM_Base_Stop+0x6a>
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	4a20      	ldr	r2, [pc, #128]	; (8004520 <HAL_TIM_Base_Stop+0xb8>)
 80044a0:	4293      	cmp	r3, r2
 80044a2:	d016      	beq.n	80044d2 <HAL_TIM_Base_Stop+0x6a>
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	4a1e      	ldr	r2, [pc, #120]	; (8004524 <HAL_TIM_Base_Stop+0xbc>)
 80044aa:	4293      	cmp	r3, r2
 80044ac:	d011      	beq.n	80044d2 <HAL_TIM_Base_Stop+0x6a>
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	4a1d      	ldr	r2, [pc, #116]	; (8004528 <HAL_TIM_Base_Stop+0xc0>)
 80044b4:	4293      	cmp	r3, r2
 80044b6:	d00c      	beq.n	80044d2 <HAL_TIM_Base_Stop+0x6a>
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	4a1b      	ldr	r2, [pc, #108]	; (800452c <HAL_TIM_Base_Stop+0xc4>)
 80044be:	4293      	cmp	r3, r2
 80044c0:	d007      	beq.n	80044d2 <HAL_TIM_Base_Stop+0x6a>
 80044c2:	2348      	movs	r3, #72	; 0x48
 80044c4:	33ff      	adds	r3, #255	; 0xff
 80044c6:	001a      	movs	r2, r3
 80044c8:	4b19      	ldr	r3, [pc, #100]	; (8004530 <HAL_TIM_Base_Stop+0xc8>)
 80044ca:	0011      	movs	r1, r2
 80044cc:	0018      	movs	r0, r3
 80044ce:	f7fc fa40 	bl	8000952 <assert_failed>

  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	223d      	movs	r2, #61	; 0x3d
 80044d6:	2102      	movs	r1, #2
 80044d8:	5499      	strb	r1, [r3, r2]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	6a1b      	ldr	r3, [r3, #32]
 80044e0:	4a14      	ldr	r2, [pc, #80]	; (8004534 <HAL_TIM_Base_Stop+0xcc>)
 80044e2:	4013      	ands	r3, r2
 80044e4:	d10d      	bne.n	8004502 <HAL_TIM_Base_Stop+0x9a>
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	6a1b      	ldr	r3, [r3, #32]
 80044ec:	4a12      	ldr	r2, [pc, #72]	; (8004538 <HAL_TIM_Base_Stop+0xd0>)
 80044ee:	4013      	ands	r3, r2
 80044f0:	d107      	bne.n	8004502 <HAL_TIM_Base_Stop+0x9a>
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	681a      	ldr	r2, [r3, #0]
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	2101      	movs	r1, #1
 80044fe:	438a      	bics	r2, r1
 8004500:	601a      	str	r2, [r3, #0]

  /* Change the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	223d      	movs	r2, #61	; 0x3d
 8004506:	2101      	movs	r1, #1
 8004508:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 800450a:	2300      	movs	r3, #0
}
 800450c:	0018      	movs	r0, r3
 800450e:	46bd      	mov	sp, r7
 8004510:	b002      	add	sp, #8
 8004512:	bd80      	pop	{r7, pc}
 8004514:	40012c00 	.word	0x40012c00
 8004518:	40000400 	.word	0x40000400
 800451c:	40001000 	.word	0x40001000
 8004520:	40002000 	.word	0x40002000
 8004524:	40014000 	.word	0x40014000
 8004528:	40014400 	.word	0x40014400
 800452c:	40014800 	.word	0x40014800
 8004530:	08007158 	.word	0x08007158
 8004534:	00001111 	.word	0x00001111
 8004538:	00000444 	.word	0x00000444

0800453c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM handle
  * @retval HAL status
*/
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800453c:	b580      	push	{r7, lr}
 800453e:	b082      	sub	sp, #8
 8004540:	af00      	add	r7, sp, #0
 8004542:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	4a21      	ldr	r2, [pc, #132]	; (80045d0 <HAL_TIM_Base_Start_IT+0x94>)
 800454a:	4293      	cmp	r3, r2
 800454c:	d02a      	beq.n	80045a4 <HAL_TIM_Base_Start_IT+0x68>
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681a      	ldr	r2, [r3, #0]
 8004552:	2380      	movs	r3, #128	; 0x80
 8004554:	05db      	lsls	r3, r3, #23
 8004556:	429a      	cmp	r2, r3
 8004558:	d024      	beq.n	80045a4 <HAL_TIM_Base_Start_IT+0x68>
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	4a1d      	ldr	r2, [pc, #116]	; (80045d4 <HAL_TIM_Base_Start_IT+0x98>)
 8004560:	4293      	cmp	r3, r2
 8004562:	d01f      	beq.n	80045a4 <HAL_TIM_Base_Start_IT+0x68>
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	4a1b      	ldr	r2, [pc, #108]	; (80045d8 <HAL_TIM_Base_Start_IT+0x9c>)
 800456a:	4293      	cmp	r3, r2
 800456c:	d01a      	beq.n	80045a4 <HAL_TIM_Base_Start_IT+0x68>
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	4a1a      	ldr	r2, [pc, #104]	; (80045dc <HAL_TIM_Base_Start_IT+0xa0>)
 8004574:	4293      	cmp	r3, r2
 8004576:	d015      	beq.n	80045a4 <HAL_TIM_Base_Start_IT+0x68>
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	4a18      	ldr	r2, [pc, #96]	; (80045e0 <HAL_TIM_Base_Start_IT+0xa4>)
 800457e:	4293      	cmp	r3, r2
 8004580:	d010      	beq.n	80045a4 <HAL_TIM_Base_Start_IT+0x68>
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	4a17      	ldr	r2, [pc, #92]	; (80045e4 <HAL_TIM_Base_Start_IT+0xa8>)
 8004588:	4293      	cmp	r3, r2
 800458a:	d00b      	beq.n	80045a4 <HAL_TIM_Base_Start_IT+0x68>
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	4a15      	ldr	r2, [pc, #84]	; (80045e8 <HAL_TIM_Base_Start_IT+0xac>)
 8004592:	4293      	cmp	r3, r2
 8004594:	d006      	beq.n	80045a4 <HAL_TIM_Base_Start_IT+0x68>
 8004596:	23af      	movs	r3, #175	; 0xaf
 8004598:	005a      	lsls	r2, r3, #1
 800459a:	4b14      	ldr	r3, [pc, #80]	; (80045ec <HAL_TIM_Base_Start_IT+0xb0>)
 800459c:	0011      	movs	r1, r2
 800459e:	0018      	movs	r0, r3
 80045a0:	f7fc f9d7 	bl	8000952 <assert_failed>

   /* Enable the TIM Update interrupt */
   __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	68da      	ldr	r2, [r3, #12]
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	2101      	movs	r1, #1
 80045b0:	430a      	orrs	r2, r1
 80045b2:	60da      	str	r2, [r3, #12]

   /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	681a      	ldr	r2, [r3, #0]
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	2101      	movs	r1, #1
 80045c0:	430a      	orrs	r2, r1
 80045c2:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80045c4:	2300      	movs	r3, #0
}
 80045c6:	0018      	movs	r0, r3
 80045c8:	46bd      	mov	sp, r7
 80045ca:	b002      	add	sp, #8
 80045cc:	bd80      	pop	{r7, pc}
 80045ce:	46c0      	nop			; (mov r8, r8)
 80045d0:	40012c00 	.word	0x40012c00
 80045d4:	40000400 	.word	0x40000400
 80045d8:	40001000 	.word	0x40001000
 80045dc:	40002000 	.word	0x40002000
 80045e0:	40014000 	.word	0x40014000
 80045e4:	40014400 	.word	0x40014400
 80045e8:	40014800 	.word	0x40014800
 80045ec:	08007158 	.word	0x08007158

080045f0 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM handle
  * @retval HAL status
*/
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 80045f0:	b580      	push	{r7, lr}
 80045f2:	b082      	sub	sp, #8
 80045f4:	af00      	add	r7, sp, #0
 80045f6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	4a27      	ldr	r2, [pc, #156]	; (800469c <HAL_TIM_Base_Stop_IT+0xac>)
 80045fe:	4293      	cmp	r3, r2
 8004600:	d02a      	beq.n	8004658 <HAL_TIM_Base_Stop_IT+0x68>
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681a      	ldr	r2, [r3, #0]
 8004606:	2380      	movs	r3, #128	; 0x80
 8004608:	05db      	lsls	r3, r3, #23
 800460a:	429a      	cmp	r2, r3
 800460c:	d024      	beq.n	8004658 <HAL_TIM_Base_Stop_IT+0x68>
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	4a23      	ldr	r2, [pc, #140]	; (80046a0 <HAL_TIM_Base_Stop_IT+0xb0>)
 8004614:	4293      	cmp	r3, r2
 8004616:	d01f      	beq.n	8004658 <HAL_TIM_Base_Stop_IT+0x68>
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	4a21      	ldr	r2, [pc, #132]	; (80046a4 <HAL_TIM_Base_Stop_IT+0xb4>)
 800461e:	4293      	cmp	r3, r2
 8004620:	d01a      	beq.n	8004658 <HAL_TIM_Base_Stop_IT+0x68>
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	4a20      	ldr	r2, [pc, #128]	; (80046a8 <HAL_TIM_Base_Stop_IT+0xb8>)
 8004628:	4293      	cmp	r3, r2
 800462a:	d015      	beq.n	8004658 <HAL_TIM_Base_Stop_IT+0x68>
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	4a1e      	ldr	r2, [pc, #120]	; (80046ac <HAL_TIM_Base_Stop_IT+0xbc>)
 8004632:	4293      	cmp	r3, r2
 8004634:	d010      	beq.n	8004658 <HAL_TIM_Base_Stop_IT+0x68>
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	4a1d      	ldr	r2, [pc, #116]	; (80046b0 <HAL_TIM_Base_Stop_IT+0xc0>)
 800463c:	4293      	cmp	r3, r2
 800463e:	d00b      	beq.n	8004658 <HAL_TIM_Base_Stop_IT+0x68>
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	4a1b      	ldr	r2, [pc, #108]	; (80046b4 <HAL_TIM_Base_Stop_IT+0xc4>)
 8004646:	4293      	cmp	r3, r2
 8004648:	d006      	beq.n	8004658 <HAL_TIM_Base_Stop_IT+0x68>
 800464a:	23b9      	movs	r3, #185	; 0xb9
 800464c:	005a      	lsls	r2, r3, #1
 800464e:	4b1a      	ldr	r3, [pc, #104]	; (80046b8 <HAL_TIM_Base_Stop_IT+0xc8>)
 8004650:	0011      	movs	r1, r2
 8004652:	0018      	movs	r0, r3
 8004654:	f7fc f97d 	bl	8000952 <assert_failed>
  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	68da      	ldr	r2, [r3, #12]
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	2101      	movs	r1, #1
 8004664:	438a      	bics	r2, r1
 8004666:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	6a1b      	ldr	r3, [r3, #32]
 800466e:	4a13      	ldr	r2, [pc, #76]	; (80046bc <HAL_TIM_Base_Stop_IT+0xcc>)
 8004670:	4013      	ands	r3, r2
 8004672:	d10d      	bne.n	8004690 <HAL_TIM_Base_Stop_IT+0xa0>
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	6a1b      	ldr	r3, [r3, #32]
 800467a:	4a11      	ldr	r2, [pc, #68]	; (80046c0 <HAL_TIM_Base_Stop_IT+0xd0>)
 800467c:	4013      	ands	r3, r2
 800467e:	d107      	bne.n	8004690 <HAL_TIM_Base_Stop_IT+0xa0>
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	681a      	ldr	r2, [r3, #0]
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	2101      	movs	r1, #1
 800468c:	438a      	bics	r2, r1
 800468e:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8004690:	2300      	movs	r3, #0
}
 8004692:	0018      	movs	r0, r3
 8004694:	46bd      	mov	sp, r7
 8004696:	b002      	add	sp, #8
 8004698:	bd80      	pop	{r7, pc}
 800469a:	46c0      	nop			; (mov r8, r8)
 800469c:	40012c00 	.word	0x40012c00
 80046a0:	40000400 	.word	0x40000400
 80046a4:	40001000 	.word	0x40001000
 80046a8:	40002000 	.word	0x40002000
 80046ac:	40014000 	.word	0x40014000
 80046b0:	40014400 	.word	0x40014400
 80046b4:	40014800 	.word	0x40014800
 80046b8:	08007158 	.word	0x08007158
 80046bc:	00001111 	.word	0x00001111
 80046c0:	00000444 	.word	0x00000444

080046c4 <HAL_TIM_OC_Init>:
  *         parameters in the TIM_HandleTypeDef and create the associated handle.
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef* htim)
{
 80046c4:	b580      	push	{r7, lr}
 80046c6:	b082      	sub	sp, #8
 80046c8:	af00      	add	r7, sp, #0
 80046ca:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if(htim == NULL)
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d101      	bne.n	80046d6 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 80046d2:	2301      	movs	r3, #1
 80046d4:	e091      	b.n	80047fa <HAL_TIM_OC_Init+0x136>
  }

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	4a4a      	ldr	r2, [pc, #296]	; (8004804 <HAL_TIM_OC_Init+0x140>)
 80046dc:	4293      	cmp	r3, r2
 80046de:	d02a      	beq.n	8004736 <HAL_TIM_OC_Init+0x72>
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681a      	ldr	r2, [r3, #0]
 80046e4:	2380      	movs	r3, #128	; 0x80
 80046e6:	05db      	lsls	r3, r3, #23
 80046e8:	429a      	cmp	r2, r3
 80046ea:	d024      	beq.n	8004736 <HAL_TIM_OC_Init+0x72>
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	4a45      	ldr	r2, [pc, #276]	; (8004808 <HAL_TIM_OC_Init+0x144>)
 80046f2:	4293      	cmp	r3, r2
 80046f4:	d01f      	beq.n	8004736 <HAL_TIM_OC_Init+0x72>
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	4a44      	ldr	r2, [pc, #272]	; (800480c <HAL_TIM_OC_Init+0x148>)
 80046fc:	4293      	cmp	r3, r2
 80046fe:	d01a      	beq.n	8004736 <HAL_TIM_OC_Init+0x72>
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	4a42      	ldr	r2, [pc, #264]	; (8004810 <HAL_TIM_OC_Init+0x14c>)
 8004706:	4293      	cmp	r3, r2
 8004708:	d015      	beq.n	8004736 <HAL_TIM_OC_Init+0x72>
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	4a41      	ldr	r2, [pc, #260]	; (8004814 <HAL_TIM_OC_Init+0x150>)
 8004710:	4293      	cmp	r3, r2
 8004712:	d010      	beq.n	8004736 <HAL_TIM_OC_Init+0x72>
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	4a3f      	ldr	r2, [pc, #252]	; (8004818 <HAL_TIM_OC_Init+0x154>)
 800471a:	4293      	cmp	r3, r2
 800471c:	d00b      	beq.n	8004736 <HAL_TIM_OC_Init+0x72>
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	4a3e      	ldr	r2, [pc, #248]	; (800481c <HAL_TIM_OC_Init+0x158>)
 8004724:	4293      	cmp	r3, r2
 8004726:	d006      	beq.n	8004736 <HAL_TIM_OC_Init+0x72>
 8004728:	23f5      	movs	r3, #245	; 0xf5
 800472a:	005a      	lsls	r2, r3, #1
 800472c:	4b3c      	ldr	r3, [pc, #240]	; (8004820 <HAL_TIM_OC_Init+0x15c>)
 800472e:	0011      	movs	r1, r2
 8004730:	0018      	movs	r0, r3
 8004732:	f7fc f90e 	bl	8000952 <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	689b      	ldr	r3, [r3, #8]
 800473a:	2b00      	cmp	r3, #0
 800473c:	d017      	beq.n	800476e <HAL_TIM_OC_Init+0xaa>
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	689b      	ldr	r3, [r3, #8]
 8004742:	2b10      	cmp	r3, #16
 8004744:	d013      	beq.n	800476e <HAL_TIM_OC_Init+0xaa>
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	689b      	ldr	r3, [r3, #8]
 800474a:	2b20      	cmp	r3, #32
 800474c:	d00f      	beq.n	800476e <HAL_TIM_OC_Init+0xaa>
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	689b      	ldr	r3, [r3, #8]
 8004752:	2b40      	cmp	r3, #64	; 0x40
 8004754:	d00b      	beq.n	800476e <HAL_TIM_OC_Init+0xaa>
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	689b      	ldr	r3, [r3, #8]
 800475a:	2b60      	cmp	r3, #96	; 0x60
 800475c:	d007      	beq.n	800476e <HAL_TIM_OC_Init+0xaa>
 800475e:	23ec      	movs	r3, #236	; 0xec
 8004760:	33ff      	adds	r3, #255	; 0xff
 8004762:	001a      	movs	r2, r3
 8004764:	4b2e      	ldr	r3, [pc, #184]	; (8004820 <HAL_TIM_OC_Init+0x15c>)
 8004766:	0011      	movs	r1, r2
 8004768:	0018      	movs	r0, r3
 800476a:	f7fc f8f2 	bl	8000952 <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	691b      	ldr	r3, [r3, #16]
 8004772:	2b00      	cmp	r3, #0
 8004774:	d012      	beq.n	800479c <HAL_TIM_OC_Init+0xd8>
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	691a      	ldr	r2, [r3, #16]
 800477a:	2380      	movs	r3, #128	; 0x80
 800477c:	005b      	lsls	r3, r3, #1
 800477e:	429a      	cmp	r2, r3
 8004780:	d00c      	beq.n	800479c <HAL_TIM_OC_Init+0xd8>
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	691a      	ldr	r2, [r3, #16]
 8004786:	2380      	movs	r3, #128	; 0x80
 8004788:	009b      	lsls	r3, r3, #2
 800478a:	429a      	cmp	r2, r3
 800478c:	d006      	beq.n	800479c <HAL_TIM_OC_Init+0xd8>
 800478e:	23f6      	movs	r3, #246	; 0xf6
 8004790:	005a      	lsls	r2, r3, #1
 8004792:	4b23      	ldr	r3, [pc, #140]	; (8004820 <HAL_TIM_OC_Init+0x15c>)
 8004794:	0011      	movs	r1, r2
 8004796:	0018      	movs	r0, r3
 8004798:	f7fc f8db 	bl	8000952 <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	699b      	ldr	r3, [r3, #24]
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d00b      	beq.n	80047bc <HAL_TIM_OC_Init+0xf8>
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	699b      	ldr	r3, [r3, #24]
 80047a8:	2b80      	cmp	r3, #128	; 0x80
 80047aa:	d007      	beq.n	80047bc <HAL_TIM_OC_Init+0xf8>
 80047ac:	23ee      	movs	r3, #238	; 0xee
 80047ae:	33ff      	adds	r3, #255	; 0xff
 80047b0:	001a      	movs	r2, r3
 80047b2:	4b1b      	ldr	r3, [pc, #108]	; (8004820 <HAL_TIM_OC_Init+0x15c>)
 80047b4:	0011      	movs	r1, r2
 80047b6:	0018      	movs	r0, r3
 80047b8:	f7fc f8cb 	bl	8000952 <assert_failed>

  if(htim->State == HAL_TIM_STATE_RESET)
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	223d      	movs	r2, #61	; 0x3d
 80047c0:	5c9b      	ldrb	r3, [r3, r2]
 80047c2:	b2db      	uxtb	r3, r3
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d107      	bne.n	80047d8 <HAL_TIM_OC_Init+0x114>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	223c      	movs	r2, #60	; 0x3c
 80047cc:	2100      	movs	r1, #0
 80047ce:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	0018      	movs	r0, r3
 80047d4:	f000 f826 	bl	8004824 <HAL_TIM_OC_MspInit>
  }

  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	223d      	movs	r2, #61	; 0x3d
 80047dc:	2102      	movs	r1, #2
 80047de:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681a      	ldr	r2, [r3, #0]
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	3304      	adds	r3, #4
 80047e8:	0019      	movs	r1, r3
 80047ea:	0010      	movs	r0, r2
 80047ec:	f000 ff5e 	bl	80056ac <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	223d      	movs	r2, #61	; 0x3d
 80047f4:	2101      	movs	r1, #1
 80047f6:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80047f8:	2300      	movs	r3, #0
}
 80047fa:	0018      	movs	r0, r3
 80047fc:	46bd      	mov	sp, r7
 80047fe:	b002      	add	sp, #8
 8004800:	bd80      	pop	{r7, pc}
 8004802:	46c0      	nop			; (mov r8, r8)
 8004804:	40012c00 	.word	0x40012c00
 8004808:	40000400 	.word	0x40000400
 800480c:	40001000 	.word	0x40001000
 8004810:	40002000 	.word	0x40002000
 8004814:	40014000 	.word	0x40014000
 8004818:	40014400 	.word	0x40014400
 800481c:	40014800 	.word	0x40014800
 8004820:	08007158 	.word	0x08007158

08004824 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8004824:	b580      	push	{r7, lr}
 8004826:	b082      	sub	sp, #8
 8004828:	af00      	add	r7, sp, #0
 800482a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 800482c:	46c0      	nop			; (mov r8, r8)
 800482e:	46bd      	mov	sp, r7
 8004830:	b002      	add	sp, #8
 8004832:	bd80      	pop	{r7, pc}

08004834 <HAL_TIM_OC_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected 
  * @retval HAL status
*/
HAL_StatusTypeDef HAL_TIM_OC_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004834:	b580      	push	{r7, lr}
 8004836:	b082      	sub	sp, #8
 8004838:	af00      	add	r7, sp, #0
 800483a:	6078      	str	r0, [r7, #4]
 800483c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	4a49      	ldr	r2, [pc, #292]	; (8004968 <HAL_TIM_OC_Start+0x134>)
 8004844:	4293      	cmp	r3, r2
 8004846:	d10c      	bne.n	8004862 <HAL_TIM_OC_Start+0x2e>
 8004848:	683b      	ldr	r3, [r7, #0]
 800484a:	2b00      	cmp	r3, #0
 800484c:	d100      	bne.n	8004850 <HAL_TIM_OC_Start+0x1c>
 800484e:	e054      	b.n	80048fa <HAL_TIM_OC_Start+0xc6>
 8004850:	683b      	ldr	r3, [r7, #0]
 8004852:	2b04      	cmp	r3, #4
 8004854:	d051      	beq.n	80048fa <HAL_TIM_OC_Start+0xc6>
 8004856:	683b      	ldr	r3, [r7, #0]
 8004858:	2b08      	cmp	r3, #8
 800485a:	d04e      	beq.n	80048fa <HAL_TIM_OC_Start+0xc6>
 800485c:	683b      	ldr	r3, [r7, #0]
 800485e:	2b0c      	cmp	r3, #12
 8004860:	d04b      	beq.n	80048fa <HAL_TIM_OC_Start+0xc6>
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681a      	ldr	r2, [r3, #0]
 8004866:	2380      	movs	r3, #128	; 0x80
 8004868:	05db      	lsls	r3, r3, #23
 800486a:	429a      	cmp	r2, r3
 800486c:	d10b      	bne.n	8004886 <HAL_TIM_OC_Start+0x52>
 800486e:	683b      	ldr	r3, [r7, #0]
 8004870:	2b00      	cmp	r3, #0
 8004872:	d042      	beq.n	80048fa <HAL_TIM_OC_Start+0xc6>
 8004874:	683b      	ldr	r3, [r7, #0]
 8004876:	2b04      	cmp	r3, #4
 8004878:	d03f      	beq.n	80048fa <HAL_TIM_OC_Start+0xc6>
 800487a:	683b      	ldr	r3, [r7, #0]
 800487c:	2b08      	cmp	r3, #8
 800487e:	d03c      	beq.n	80048fa <HAL_TIM_OC_Start+0xc6>
 8004880:	683b      	ldr	r3, [r7, #0]
 8004882:	2b0c      	cmp	r3, #12
 8004884:	d039      	beq.n	80048fa <HAL_TIM_OC_Start+0xc6>
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	4a38      	ldr	r2, [pc, #224]	; (800496c <HAL_TIM_OC_Start+0x138>)
 800488c:	4293      	cmp	r3, r2
 800488e:	d10b      	bne.n	80048a8 <HAL_TIM_OC_Start+0x74>
 8004890:	683b      	ldr	r3, [r7, #0]
 8004892:	2b00      	cmp	r3, #0
 8004894:	d031      	beq.n	80048fa <HAL_TIM_OC_Start+0xc6>
 8004896:	683b      	ldr	r3, [r7, #0]
 8004898:	2b04      	cmp	r3, #4
 800489a:	d02e      	beq.n	80048fa <HAL_TIM_OC_Start+0xc6>
 800489c:	683b      	ldr	r3, [r7, #0]
 800489e:	2b08      	cmp	r3, #8
 80048a0:	d02b      	beq.n	80048fa <HAL_TIM_OC_Start+0xc6>
 80048a2:	683b      	ldr	r3, [r7, #0]
 80048a4:	2b0c      	cmp	r3, #12
 80048a6:	d028      	beq.n	80048fa <HAL_TIM_OC_Start+0xc6>
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	4a30      	ldr	r2, [pc, #192]	; (8004970 <HAL_TIM_OC_Start+0x13c>)
 80048ae:	4293      	cmp	r3, r2
 80048b0:	d102      	bne.n	80048b8 <HAL_TIM_OC_Start+0x84>
 80048b2:	683b      	ldr	r3, [r7, #0]
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d020      	beq.n	80048fa <HAL_TIM_OC_Start+0xc6>
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	4a2d      	ldr	r2, [pc, #180]	; (8004974 <HAL_TIM_OC_Start+0x140>)
 80048be:	4293      	cmp	r3, r2
 80048c0:	d105      	bne.n	80048ce <HAL_TIM_OC_Start+0x9a>
 80048c2:	683b      	ldr	r3, [r7, #0]
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d018      	beq.n	80048fa <HAL_TIM_OC_Start+0xc6>
 80048c8:	683b      	ldr	r3, [r7, #0]
 80048ca:	2b04      	cmp	r3, #4
 80048cc:	d015      	beq.n	80048fa <HAL_TIM_OC_Start+0xc6>
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	4a29      	ldr	r2, [pc, #164]	; (8004978 <HAL_TIM_OC_Start+0x144>)
 80048d4:	4293      	cmp	r3, r2
 80048d6:	d102      	bne.n	80048de <HAL_TIM_OC_Start+0xaa>
 80048d8:	683b      	ldr	r3, [r7, #0]
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d00d      	beq.n	80048fa <HAL_TIM_OC_Start+0xc6>
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	4a26      	ldr	r2, [pc, #152]	; (800497c <HAL_TIM_OC_Start+0x148>)
 80048e4:	4293      	cmp	r3, r2
 80048e6:	d102      	bne.n	80048ee <HAL_TIM_OC_Start+0xba>
 80048e8:	683b      	ldr	r3, [r7, #0]
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d005      	beq.n	80048fa <HAL_TIM_OC_Start+0xc6>
 80048ee:	4a24      	ldr	r2, [pc, #144]	; (8004980 <HAL_TIM_OC_Start+0x14c>)
 80048f0:	4b24      	ldr	r3, [pc, #144]	; (8004984 <HAL_TIM_OC_Start+0x150>)
 80048f2:	0011      	movs	r1, r2
 80048f4:	0018      	movs	r0, r3
 80048f6:	f7fc f82c 	bl	8000952 <assert_failed>

  /* Enable the Output compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	6839      	ldr	r1, [r7, #0]
 8004900:	2201      	movs	r2, #1
 8004902:	0018      	movs	r0, r3
 8004904:	f001 fac8 	bl	8005e98 <TIM_CCxChannelCmd>

  if(IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	4a16      	ldr	r2, [pc, #88]	; (8004968 <HAL_TIM_OC_Start+0x134>)
 800490e:	4293      	cmp	r3, r2
 8004910:	d00e      	beq.n	8004930 <HAL_TIM_OC_Start+0xfc>
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	4a17      	ldr	r2, [pc, #92]	; (8004974 <HAL_TIM_OC_Start+0x140>)
 8004918:	4293      	cmp	r3, r2
 800491a:	d009      	beq.n	8004930 <HAL_TIM_OC_Start+0xfc>
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	4a15      	ldr	r2, [pc, #84]	; (8004978 <HAL_TIM_OC_Start+0x144>)
 8004922:	4293      	cmp	r3, r2
 8004924:	d004      	beq.n	8004930 <HAL_TIM_OC_Start+0xfc>
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	4a14      	ldr	r2, [pc, #80]	; (800497c <HAL_TIM_OC_Start+0x148>)
 800492c:	4293      	cmp	r3, r2
 800492e:	d101      	bne.n	8004934 <HAL_TIM_OC_Start+0x100>
 8004930:	2301      	movs	r3, #1
 8004932:	e000      	b.n	8004936 <HAL_TIM_OC_Start+0x102>
 8004934:	2300      	movs	r3, #0
 8004936:	2b00      	cmp	r3, #0
 8004938:	d008      	beq.n	800494c <HAL_TIM_OC_Start+0x118>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	2180      	movs	r1, #128	; 0x80
 8004946:	0209      	lsls	r1, r1, #8
 8004948:	430a      	orrs	r2, r1
 800494a:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	681a      	ldr	r2, [r3, #0]
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	2101      	movs	r1, #1
 8004958:	430a      	orrs	r2, r1
 800495a:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800495c:	2300      	movs	r3, #0
}
 800495e:	0018      	movs	r0, r3
 8004960:	46bd      	mov	sp, r7
 8004962:	b002      	add	sp, #8
 8004964:	bd80      	pop	{r7, pc}
 8004966:	46c0      	nop			; (mov r8, r8)
 8004968:	40012c00 	.word	0x40012c00
 800496c:	40000400 	.word	0x40000400
 8004970:	40002000 	.word	0x40002000
 8004974:	40014000 	.word	0x40014000
 8004978:	40014400 	.word	0x40014400
 800497c:	40014800 	.word	0x40014800
 8004980:	0000024b 	.word	0x0000024b
 8004984:	08007158 	.word	0x08007158

08004988 <HAL_TIM_OC_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
*/
HAL_StatusTypeDef HAL_TIM_OC_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004988:	b580      	push	{r7, lr}
 800498a:	b082      	sub	sp, #8
 800498c:	af00      	add	r7, sp, #0
 800498e:	6078      	str	r0, [r7, #4]
 8004990:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	4a54      	ldr	r2, [pc, #336]	; (8004ae8 <HAL_TIM_OC_Stop+0x160>)
 8004998:	4293      	cmp	r3, r2
 800499a:	d10c      	bne.n	80049b6 <HAL_TIM_OC_Stop+0x2e>
 800499c:	683b      	ldr	r3, [r7, #0]
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d100      	bne.n	80049a4 <HAL_TIM_OC_Stop+0x1c>
 80049a2:	e054      	b.n	8004a4e <HAL_TIM_OC_Stop+0xc6>
 80049a4:	683b      	ldr	r3, [r7, #0]
 80049a6:	2b04      	cmp	r3, #4
 80049a8:	d051      	beq.n	8004a4e <HAL_TIM_OC_Stop+0xc6>
 80049aa:	683b      	ldr	r3, [r7, #0]
 80049ac:	2b08      	cmp	r3, #8
 80049ae:	d04e      	beq.n	8004a4e <HAL_TIM_OC_Stop+0xc6>
 80049b0:	683b      	ldr	r3, [r7, #0]
 80049b2:	2b0c      	cmp	r3, #12
 80049b4:	d04b      	beq.n	8004a4e <HAL_TIM_OC_Stop+0xc6>
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	681a      	ldr	r2, [r3, #0]
 80049ba:	2380      	movs	r3, #128	; 0x80
 80049bc:	05db      	lsls	r3, r3, #23
 80049be:	429a      	cmp	r2, r3
 80049c0:	d10b      	bne.n	80049da <HAL_TIM_OC_Stop+0x52>
 80049c2:	683b      	ldr	r3, [r7, #0]
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d042      	beq.n	8004a4e <HAL_TIM_OC_Stop+0xc6>
 80049c8:	683b      	ldr	r3, [r7, #0]
 80049ca:	2b04      	cmp	r3, #4
 80049cc:	d03f      	beq.n	8004a4e <HAL_TIM_OC_Stop+0xc6>
 80049ce:	683b      	ldr	r3, [r7, #0]
 80049d0:	2b08      	cmp	r3, #8
 80049d2:	d03c      	beq.n	8004a4e <HAL_TIM_OC_Stop+0xc6>
 80049d4:	683b      	ldr	r3, [r7, #0]
 80049d6:	2b0c      	cmp	r3, #12
 80049d8:	d039      	beq.n	8004a4e <HAL_TIM_OC_Stop+0xc6>
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	4a43      	ldr	r2, [pc, #268]	; (8004aec <HAL_TIM_OC_Stop+0x164>)
 80049e0:	4293      	cmp	r3, r2
 80049e2:	d10b      	bne.n	80049fc <HAL_TIM_OC_Stop+0x74>
 80049e4:	683b      	ldr	r3, [r7, #0]
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d031      	beq.n	8004a4e <HAL_TIM_OC_Stop+0xc6>
 80049ea:	683b      	ldr	r3, [r7, #0]
 80049ec:	2b04      	cmp	r3, #4
 80049ee:	d02e      	beq.n	8004a4e <HAL_TIM_OC_Stop+0xc6>
 80049f0:	683b      	ldr	r3, [r7, #0]
 80049f2:	2b08      	cmp	r3, #8
 80049f4:	d02b      	beq.n	8004a4e <HAL_TIM_OC_Stop+0xc6>
 80049f6:	683b      	ldr	r3, [r7, #0]
 80049f8:	2b0c      	cmp	r3, #12
 80049fa:	d028      	beq.n	8004a4e <HAL_TIM_OC_Stop+0xc6>
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	4a3b      	ldr	r2, [pc, #236]	; (8004af0 <HAL_TIM_OC_Stop+0x168>)
 8004a02:	4293      	cmp	r3, r2
 8004a04:	d102      	bne.n	8004a0c <HAL_TIM_OC_Stop+0x84>
 8004a06:	683b      	ldr	r3, [r7, #0]
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d020      	beq.n	8004a4e <HAL_TIM_OC_Stop+0xc6>
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	4a38      	ldr	r2, [pc, #224]	; (8004af4 <HAL_TIM_OC_Stop+0x16c>)
 8004a12:	4293      	cmp	r3, r2
 8004a14:	d105      	bne.n	8004a22 <HAL_TIM_OC_Stop+0x9a>
 8004a16:	683b      	ldr	r3, [r7, #0]
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d018      	beq.n	8004a4e <HAL_TIM_OC_Stop+0xc6>
 8004a1c:	683b      	ldr	r3, [r7, #0]
 8004a1e:	2b04      	cmp	r3, #4
 8004a20:	d015      	beq.n	8004a4e <HAL_TIM_OC_Stop+0xc6>
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	4a34      	ldr	r2, [pc, #208]	; (8004af8 <HAL_TIM_OC_Stop+0x170>)
 8004a28:	4293      	cmp	r3, r2
 8004a2a:	d102      	bne.n	8004a32 <HAL_TIM_OC_Stop+0xaa>
 8004a2c:	683b      	ldr	r3, [r7, #0]
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d00d      	beq.n	8004a4e <HAL_TIM_OC_Stop+0xc6>
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	4a31      	ldr	r2, [pc, #196]	; (8004afc <HAL_TIM_OC_Stop+0x174>)
 8004a38:	4293      	cmp	r3, r2
 8004a3a:	d102      	bne.n	8004a42 <HAL_TIM_OC_Stop+0xba>
 8004a3c:	683b      	ldr	r3, [r7, #0]
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d005      	beq.n	8004a4e <HAL_TIM_OC_Stop+0xc6>
 8004a42:	4a2f      	ldr	r2, [pc, #188]	; (8004b00 <HAL_TIM_OC_Stop+0x178>)
 8004a44:	4b2f      	ldr	r3, [pc, #188]	; (8004b04 <HAL_TIM_OC_Stop+0x17c>)
 8004a46:	0011      	movs	r1, r2
 8004a48:	0018      	movs	r0, r3
 8004a4a:	f7fb ff82 	bl	8000952 <assert_failed>

  /* Disable the Output compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	6839      	ldr	r1, [r7, #0]
 8004a54:	2200      	movs	r2, #0
 8004a56:	0018      	movs	r0, r3
 8004a58:	f001 fa1e 	bl	8005e98 <TIM_CCxChannelCmd>

  if(IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	4a21      	ldr	r2, [pc, #132]	; (8004ae8 <HAL_TIM_OC_Stop+0x160>)
 8004a62:	4293      	cmp	r3, r2
 8004a64:	d00e      	beq.n	8004a84 <HAL_TIM_OC_Stop+0xfc>
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	4a22      	ldr	r2, [pc, #136]	; (8004af4 <HAL_TIM_OC_Stop+0x16c>)
 8004a6c:	4293      	cmp	r3, r2
 8004a6e:	d009      	beq.n	8004a84 <HAL_TIM_OC_Stop+0xfc>
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	4a20      	ldr	r2, [pc, #128]	; (8004af8 <HAL_TIM_OC_Stop+0x170>)
 8004a76:	4293      	cmp	r3, r2
 8004a78:	d004      	beq.n	8004a84 <HAL_TIM_OC_Stop+0xfc>
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	4a1f      	ldr	r2, [pc, #124]	; (8004afc <HAL_TIM_OC_Stop+0x174>)
 8004a80:	4293      	cmp	r3, r2
 8004a82:	d101      	bne.n	8004a88 <HAL_TIM_OC_Stop+0x100>
 8004a84:	2301      	movs	r3, #1
 8004a86:	e000      	b.n	8004a8a <HAL_TIM_OC_Stop+0x102>
 8004a88:	2300      	movs	r3, #0
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d013      	beq.n	8004ab6 <HAL_TIM_OC_Stop+0x12e>
  {
    /* Disable the Main Ouput */
    __HAL_TIM_MOE_DISABLE(htim);
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	6a1b      	ldr	r3, [r3, #32]
 8004a94:	4a1c      	ldr	r2, [pc, #112]	; (8004b08 <HAL_TIM_OC_Stop+0x180>)
 8004a96:	4013      	ands	r3, r2
 8004a98:	d10d      	bne.n	8004ab6 <HAL_TIM_OC_Stop+0x12e>
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	6a1b      	ldr	r3, [r3, #32]
 8004aa0:	4a1a      	ldr	r2, [pc, #104]	; (8004b0c <HAL_TIM_OC_Stop+0x184>)
 8004aa2:	4013      	ands	r3, r2
 8004aa4:	d107      	bne.n	8004ab6 <HAL_TIM_OC_Stop+0x12e>
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	4917      	ldr	r1, [pc, #92]	; (8004b10 <HAL_TIM_OC_Stop+0x188>)
 8004ab2:	400a      	ands	r2, r1
 8004ab4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	6a1b      	ldr	r3, [r3, #32]
 8004abc:	4a12      	ldr	r2, [pc, #72]	; (8004b08 <HAL_TIM_OC_Stop+0x180>)
 8004abe:	4013      	ands	r3, r2
 8004ac0:	d10d      	bne.n	8004ade <HAL_TIM_OC_Stop+0x156>
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	6a1b      	ldr	r3, [r3, #32]
 8004ac8:	4a10      	ldr	r2, [pc, #64]	; (8004b0c <HAL_TIM_OC_Stop+0x184>)
 8004aca:	4013      	ands	r3, r2
 8004acc:	d107      	bne.n	8004ade <HAL_TIM_OC_Stop+0x156>
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	681a      	ldr	r2, [r3, #0]
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	2101      	movs	r1, #1
 8004ada:	438a      	bics	r2, r1
 8004adc:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8004ade:	2300      	movs	r3, #0
}
 8004ae0:	0018      	movs	r0, r3
 8004ae2:	46bd      	mov	sp, r7
 8004ae4:	b002      	add	sp, #8
 8004ae6:	bd80      	pop	{r7, pc}
 8004ae8:	40012c00 	.word	0x40012c00
 8004aec:	40000400 	.word	0x40000400
 8004af0:	40002000 	.word	0x40002000
 8004af4:	40014000 	.word	0x40014000
 8004af8:	40014400 	.word	0x40014400
 8004afc:	40014800 	.word	0x40014800
 8004b00:	0000026b 	.word	0x0000026b
 8004b04:	08007158 	.word	0x08007158
 8004b08:	00001111 	.word	0x00001111
 8004b0c:	00000444 	.word	0x00000444
 8004b10:	ffff7fff 	.word	0xffff7fff

08004b14 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004b14:	b580      	push	{r7, lr}
 8004b16:	b082      	sub	sp, #8
 8004b18:	af00      	add	r7, sp, #0
 8004b1a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	691b      	ldr	r3, [r3, #16]
 8004b22:	2202      	movs	r2, #2
 8004b24:	4013      	ands	r3, r2
 8004b26:	2b02      	cmp	r3, #2
 8004b28:	d124      	bne.n	8004b74 <HAL_TIM_IRQHandler+0x60>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	68db      	ldr	r3, [r3, #12]
 8004b30:	2202      	movs	r2, #2
 8004b32:	4013      	ands	r3, r2
 8004b34:	2b02      	cmp	r3, #2
 8004b36:	d11d      	bne.n	8004b74 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	2203      	movs	r2, #3
 8004b3e:	4252      	negs	r2, r2
 8004b40:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	2201      	movs	r2, #1
 8004b46:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	699b      	ldr	r3, [r3, #24]
 8004b4e:	2203      	movs	r2, #3
 8004b50:	4013      	ands	r3, r2
 8004b52:	d004      	beq.n	8004b5e <HAL_TIM_IRQHandler+0x4a>
        {
          HAL_TIM_IC_CaptureCallback(htim);
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	0018      	movs	r0, r3
 8004b58:	f000 fd90 	bl	800567c <HAL_TIM_IC_CaptureCallback>
 8004b5c:	e007      	b.n	8004b6e <HAL_TIM_IRQHandler+0x5a>
        }
        /* Output compare event */
        else
        {
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	0018      	movs	r0, r3
 8004b62:	f000 fd83 	bl	800566c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	0018      	movs	r0, r3
 8004b6a:	f000 fd8f 	bl	800568c <HAL_TIM_PWM_PulseFinishedCallback>
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	2200      	movs	r2, #0
 8004b72:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	691b      	ldr	r3, [r3, #16]
 8004b7a:	2204      	movs	r2, #4
 8004b7c:	4013      	ands	r3, r2
 8004b7e:	2b04      	cmp	r3, #4
 8004b80:	d125      	bne.n	8004bce <HAL_TIM_IRQHandler+0xba>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	68db      	ldr	r3, [r3, #12]
 8004b88:	2204      	movs	r2, #4
 8004b8a:	4013      	ands	r3, r2
 8004b8c:	2b04      	cmp	r3, #4
 8004b8e:	d11e      	bne.n	8004bce <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	2205      	movs	r2, #5
 8004b96:	4252      	negs	r2, r2
 8004b98:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	2202      	movs	r2, #2
 8004b9e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	699a      	ldr	r2, [r3, #24]
 8004ba6:	23c0      	movs	r3, #192	; 0xc0
 8004ba8:	009b      	lsls	r3, r3, #2
 8004baa:	4013      	ands	r3, r2
 8004bac:	d004      	beq.n	8004bb8 <HAL_TIM_IRQHandler+0xa4>
      {
        HAL_TIM_IC_CaptureCallback(htim);
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	0018      	movs	r0, r3
 8004bb2:	f000 fd63 	bl	800567c <HAL_TIM_IC_CaptureCallback>
 8004bb6:	e007      	b.n	8004bc8 <HAL_TIM_IRQHandler+0xb4>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	0018      	movs	r0, r3
 8004bbc:	f000 fd56 	bl	800566c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	0018      	movs	r0, r3
 8004bc4:	f000 fd62 	bl	800568c <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	2200      	movs	r2, #0
 8004bcc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	691b      	ldr	r3, [r3, #16]
 8004bd4:	2208      	movs	r2, #8
 8004bd6:	4013      	ands	r3, r2
 8004bd8:	2b08      	cmp	r3, #8
 8004bda:	d124      	bne.n	8004c26 <HAL_TIM_IRQHandler+0x112>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	68db      	ldr	r3, [r3, #12]
 8004be2:	2208      	movs	r2, #8
 8004be4:	4013      	ands	r3, r2
 8004be6:	2b08      	cmp	r3, #8
 8004be8:	d11d      	bne.n	8004c26 <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	2209      	movs	r2, #9
 8004bf0:	4252      	negs	r2, r2
 8004bf2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	2204      	movs	r2, #4
 8004bf8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	69db      	ldr	r3, [r3, #28]
 8004c00:	2203      	movs	r2, #3
 8004c02:	4013      	ands	r3, r2
 8004c04:	d004      	beq.n	8004c10 <HAL_TIM_IRQHandler+0xfc>
      {
        HAL_TIM_IC_CaptureCallback(htim);
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	0018      	movs	r0, r3
 8004c0a:	f000 fd37 	bl	800567c <HAL_TIM_IC_CaptureCallback>
 8004c0e:	e007      	b.n	8004c20 <HAL_TIM_IRQHandler+0x10c>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	0018      	movs	r0, r3
 8004c14:	f000 fd2a 	bl	800566c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	0018      	movs	r0, r3
 8004c1c:	f000 fd36 	bl	800568c <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	2200      	movs	r2, #0
 8004c24:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	691b      	ldr	r3, [r3, #16]
 8004c2c:	2210      	movs	r2, #16
 8004c2e:	4013      	ands	r3, r2
 8004c30:	2b10      	cmp	r3, #16
 8004c32:	d125      	bne.n	8004c80 <HAL_TIM_IRQHandler+0x16c>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	68db      	ldr	r3, [r3, #12]
 8004c3a:	2210      	movs	r2, #16
 8004c3c:	4013      	ands	r3, r2
 8004c3e:	2b10      	cmp	r3, #16
 8004c40:	d11e      	bne.n	8004c80 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	2211      	movs	r2, #17
 8004c48:	4252      	negs	r2, r2
 8004c4a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	2208      	movs	r2, #8
 8004c50:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	69da      	ldr	r2, [r3, #28]
 8004c58:	23c0      	movs	r3, #192	; 0xc0
 8004c5a:	009b      	lsls	r3, r3, #2
 8004c5c:	4013      	ands	r3, r2
 8004c5e:	d004      	beq.n	8004c6a <HAL_TIM_IRQHandler+0x156>
      {
        HAL_TIM_IC_CaptureCallback(htim);
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	0018      	movs	r0, r3
 8004c64:	f000 fd0a 	bl	800567c <HAL_TIM_IC_CaptureCallback>
 8004c68:	e007      	b.n	8004c7a <HAL_TIM_IRQHandler+0x166>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	0018      	movs	r0, r3
 8004c6e:	f000 fcfd 	bl	800566c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	0018      	movs	r0, r3
 8004c76:	f000 fd09 	bl	800568c <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	2200      	movs	r2, #0
 8004c7e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	691b      	ldr	r3, [r3, #16]
 8004c86:	2201      	movs	r2, #1
 8004c88:	4013      	ands	r3, r2
 8004c8a:	2b01      	cmp	r3, #1
 8004c8c:	d10f      	bne.n	8004cae <HAL_TIM_IRQHandler+0x19a>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) !=RESET)
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	68db      	ldr	r3, [r3, #12]
 8004c94:	2201      	movs	r2, #1
 8004c96:	4013      	ands	r3, r2
 8004c98:	2b01      	cmp	r3, #1
 8004c9a:	d108      	bne.n	8004cae <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	2202      	movs	r2, #2
 8004ca2:	4252      	negs	r2, r2
 8004ca4:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	0018      	movs	r0, r3
 8004caa:	f000 fcd7 	bl	800565c <HAL_TIM_PeriodElapsedCallback>
    }
  }
  /* TIM Break input event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	691b      	ldr	r3, [r3, #16]
 8004cb4:	2280      	movs	r2, #128	; 0x80
 8004cb6:	4013      	ands	r3, r2
 8004cb8:	2b80      	cmp	r3, #128	; 0x80
 8004cba:	d10f      	bne.n	8004cdc <HAL_TIM_IRQHandler+0x1c8>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	68db      	ldr	r3, [r3, #12]
 8004cc2:	2280      	movs	r2, #128	; 0x80
 8004cc4:	4013      	ands	r3, r2
 8004cc6:	2b80      	cmp	r3, #128	; 0x80
 8004cc8:	d108      	bne.n	8004cdc <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	2281      	movs	r2, #129	; 0x81
 8004cd0:	4252      	negs	r2, r2
 8004cd2:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	0018      	movs	r0, r3
 8004cd8:	f001 fbe4 	bl	80064a4 <HAL_TIMEx_BreakCallback>
    }
  }
  /* TIM Trigger detection event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	691b      	ldr	r3, [r3, #16]
 8004ce2:	2240      	movs	r2, #64	; 0x40
 8004ce4:	4013      	ands	r3, r2
 8004ce6:	2b40      	cmp	r3, #64	; 0x40
 8004ce8:	d10f      	bne.n	8004d0a <HAL_TIM_IRQHandler+0x1f6>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) !=RESET)
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	68db      	ldr	r3, [r3, #12]
 8004cf0:	2240      	movs	r2, #64	; 0x40
 8004cf2:	4013      	ands	r3, r2
 8004cf4:	2b40      	cmp	r3, #64	; 0x40
 8004cf6:	d108      	bne.n	8004d0a <HAL_TIM_IRQHandler+0x1f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	2241      	movs	r2, #65	; 0x41
 8004cfe:	4252      	negs	r2, r2
 8004d00:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	0018      	movs	r0, r3
 8004d06:	f000 fcc9 	bl	800569c <HAL_TIM_TriggerCallback>
    }
  }
  /* TIM commutation event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	691b      	ldr	r3, [r3, #16]
 8004d10:	2220      	movs	r2, #32
 8004d12:	4013      	ands	r3, r2
 8004d14:	2b20      	cmp	r3, #32
 8004d16:	d10f      	bne.n	8004d38 <HAL_TIM_IRQHandler+0x224>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	68db      	ldr	r3, [r3, #12]
 8004d1e:	2220      	movs	r2, #32
 8004d20:	4013      	ands	r3, r2
 8004d22:	2b20      	cmp	r3, #32
 8004d24:	d108      	bne.n	8004d38 <HAL_TIM_IRQHandler+0x224>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	2221      	movs	r2, #33	; 0x21
 8004d2c:	4252      	negs	r2, r2
 8004d2e:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutationCallback(htim);
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	0018      	movs	r0, r3
 8004d34:	f001 fbae 	bl	8006494 <HAL_TIMEx_CommutationCallback>
    }
  }
}
 8004d38:	46c0      	nop			; (mov r8, r8)
 8004d3a:	46bd      	mov	sp, r7
 8004d3c:	b002      	add	sp, #8
 8004d3e:	bd80      	pop	{r7, pc}

08004d40 <HAL_TIM_OC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_OC_InitTypeDef* sConfig, uint32_t Channel)
{
 8004d40:	b580      	push	{r7, lr}
 8004d42:	b084      	sub	sp, #16
 8004d44:	af00      	add	r7, sp, #0
 8004d46:	60f8      	str	r0, [r7, #12]
 8004d48:	60b9      	str	r1, [r7, #8]
 8004d4a:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_CHANNELS(Channel));
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d011      	beq.n	8004d76 <HAL_TIM_OC_ConfigChannel+0x36>
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	2b04      	cmp	r3, #4
 8004d56:	d00e      	beq.n	8004d76 <HAL_TIM_OC_ConfigChannel+0x36>
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	2b08      	cmp	r3, #8
 8004d5c:	d00b      	beq.n	8004d76 <HAL_TIM_OC_ConfigChannel+0x36>
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	2b0c      	cmp	r3, #12
 8004d62:	d008      	beq.n	8004d76 <HAL_TIM_OC_ConfigChannel+0x36>
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	2b18      	cmp	r3, #24
 8004d68:	d005      	beq.n	8004d76 <HAL_TIM_OC_ConfigChannel+0x36>
 8004d6a:	4a76      	ldr	r2, [pc, #472]	; (8004f44 <HAL_TIM_OC_ConfigChannel+0x204>)
 8004d6c:	4b76      	ldr	r3, [pc, #472]	; (8004f48 <HAL_TIM_OC_ConfigChannel+0x208>)
 8004d6e:	0011      	movs	r1, r2
 8004d70:	0018      	movs	r0, r3
 8004d72:	f7fb fdee 	bl	8000952 <assert_failed>
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
 8004d76:	68bb      	ldr	r3, [r7, #8]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d019      	beq.n	8004db2 <HAL_TIM_OC_ConfigChannel+0x72>
 8004d7e:	68bb      	ldr	r3, [r7, #8]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	2b10      	cmp	r3, #16
 8004d84:	d015      	beq.n	8004db2 <HAL_TIM_OC_ConfigChannel+0x72>
 8004d86:	68bb      	ldr	r3, [r7, #8]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	2b20      	cmp	r3, #32
 8004d8c:	d011      	beq.n	8004db2 <HAL_TIM_OC_ConfigChannel+0x72>
 8004d8e:	68bb      	ldr	r3, [r7, #8]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	2b30      	cmp	r3, #48	; 0x30
 8004d94:	d00d      	beq.n	8004db2 <HAL_TIM_OC_ConfigChannel+0x72>
 8004d96:	68bb      	ldr	r3, [r7, #8]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	2b50      	cmp	r3, #80	; 0x50
 8004d9c:	d009      	beq.n	8004db2 <HAL_TIM_OC_ConfigChannel+0x72>
 8004d9e:	68bb      	ldr	r3, [r7, #8]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	2b40      	cmp	r3, #64	; 0x40
 8004da4:	d005      	beq.n	8004db2 <HAL_TIM_OC_ConfigChannel+0x72>
 8004da6:	4a69      	ldr	r2, [pc, #420]	; (8004f4c <HAL_TIM_OC_ConfigChannel+0x20c>)
 8004da8:	4b67      	ldr	r3, [pc, #412]	; (8004f48 <HAL_TIM_OC_ConfigChannel+0x208>)
 8004daa:	0011      	movs	r1, r2
 8004dac:	0018      	movs	r0, r3
 8004dae:	f7fb fdd0 	bl	8000952 <assert_failed>
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
 8004db2:	68bb      	ldr	r3, [r7, #8]
 8004db4:	689b      	ldr	r3, [r3, #8]
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d009      	beq.n	8004dce <HAL_TIM_OC_ConfigChannel+0x8e>
 8004dba:	68bb      	ldr	r3, [r7, #8]
 8004dbc:	689b      	ldr	r3, [r3, #8]
 8004dbe:	2b02      	cmp	r3, #2
 8004dc0:	d005      	beq.n	8004dce <HAL_TIM_OC_ConfigChannel+0x8e>
 8004dc2:	4a63      	ldr	r2, [pc, #396]	; (8004f50 <HAL_TIM_OC_ConfigChannel+0x210>)
 8004dc4:	4b60      	ldr	r3, [pc, #384]	; (8004f48 <HAL_TIM_OC_ConfigChannel+0x208>)
 8004dc6:	0011      	movs	r1, r2
 8004dc8:	0018      	movs	r0, r3
 8004dca:	f7fb fdc2 	bl	8000952 <assert_failed>

  /* Check input state */
  __HAL_LOCK(htim);
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	223c      	movs	r2, #60	; 0x3c
 8004dd2:	5c9b      	ldrb	r3, [r3, r2]
 8004dd4:	2b01      	cmp	r3, #1
 8004dd6:	d101      	bne.n	8004ddc <HAL_TIM_OC_ConfigChannel+0x9c>
 8004dd8:	2302      	movs	r3, #2
 8004dda:	e0ae      	b.n	8004f3a <HAL_TIM_OC_ConfigChannel+0x1fa>
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	223c      	movs	r2, #60	; 0x3c
 8004de0:	2101      	movs	r1, #1
 8004de2:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	223d      	movs	r2, #61	; 0x3d
 8004de8:	2102      	movs	r1, #2
 8004dea:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	2b04      	cmp	r3, #4
 8004df0:	d03b      	beq.n	8004e6a <HAL_TIM_OC_ConfigChannel+0x12a>
 8004df2:	d802      	bhi.n	8004dfa <HAL_TIM_OC_ConfigChannel+0xba>
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d006      	beq.n	8004e06 <HAL_TIM_OC_ConfigChannel+0xc6>
       TIM_OC4_SetConfig(htim->Instance, sConfig);
    }
    break;

    default:
    break;
 8004df8:	e096      	b.n	8004f28 <HAL_TIM_OC_ConfigChannel+0x1e8>
  switch (Channel)
 8004dfa:	2b08      	cmp	r3, #8
 8004dfc:	d058      	beq.n	8004eb0 <HAL_TIM_OC_ConfigChannel+0x170>
 8004dfe:	2b0c      	cmp	r3, #12
 8004e00:	d100      	bne.n	8004e04 <HAL_TIM_OC_ConfigChannel+0xc4>
 8004e02:	e073      	b.n	8004eec <HAL_TIM_OC_ConfigChannel+0x1ac>
    break;
 8004e04:	e090      	b.n	8004f28 <HAL_TIM_OC_ConfigChannel+0x1e8>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	4a52      	ldr	r2, [pc, #328]	; (8004f54 <HAL_TIM_OC_ConfigChannel+0x214>)
 8004e0c:	4293      	cmp	r3, r2
 8004e0e:	d024      	beq.n	8004e5a <HAL_TIM_OC_ConfigChannel+0x11a>
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	681a      	ldr	r2, [r3, #0]
 8004e14:	2380      	movs	r3, #128	; 0x80
 8004e16:	05db      	lsls	r3, r3, #23
 8004e18:	429a      	cmp	r2, r3
 8004e1a:	d01e      	beq.n	8004e5a <HAL_TIM_OC_ConfigChannel+0x11a>
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	4a4d      	ldr	r2, [pc, #308]	; (8004f58 <HAL_TIM_OC_ConfigChannel+0x218>)
 8004e22:	4293      	cmp	r3, r2
 8004e24:	d019      	beq.n	8004e5a <HAL_TIM_OC_ConfigChannel+0x11a>
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	4a4c      	ldr	r2, [pc, #304]	; (8004f5c <HAL_TIM_OC_ConfigChannel+0x21c>)
 8004e2c:	4293      	cmp	r3, r2
 8004e2e:	d014      	beq.n	8004e5a <HAL_TIM_OC_ConfigChannel+0x11a>
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	4a4a      	ldr	r2, [pc, #296]	; (8004f60 <HAL_TIM_OC_ConfigChannel+0x220>)
 8004e36:	4293      	cmp	r3, r2
 8004e38:	d00f      	beq.n	8004e5a <HAL_TIM_OC_ConfigChannel+0x11a>
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	4a49      	ldr	r2, [pc, #292]	; (8004f64 <HAL_TIM_OC_ConfigChannel+0x224>)
 8004e40:	4293      	cmp	r3, r2
 8004e42:	d00a      	beq.n	8004e5a <HAL_TIM_OC_ConfigChannel+0x11a>
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	4a47      	ldr	r2, [pc, #284]	; (8004f68 <HAL_TIM_OC_ConfigChannel+0x228>)
 8004e4a:	4293      	cmp	r3, r2
 8004e4c:	d005      	beq.n	8004e5a <HAL_TIM_OC_ConfigChannel+0x11a>
 8004e4e:	4a47      	ldr	r2, [pc, #284]	; (8004f6c <HAL_TIM_OC_ConfigChannel+0x22c>)
 8004e50:	4b3d      	ldr	r3, [pc, #244]	; (8004f48 <HAL_TIM_OC_ConfigChannel+0x208>)
 8004e52:	0011      	movs	r1, r2
 8004e54:	0018      	movs	r0, r3
 8004e56:	f7fb fd7c 	bl	8000952 <assert_failed>
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	68ba      	ldr	r2, [r7, #8]
 8004e60:	0011      	movs	r1, r2
 8004e62:	0018      	movs	r0, r3
 8004e64:	f000 fca4 	bl	80057b0 <TIM_OC1_SetConfig>
    break;
 8004e68:	e05e      	b.n	8004f28 <HAL_TIM_OC_ConfigChannel+0x1e8>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	4a39      	ldr	r2, [pc, #228]	; (8004f54 <HAL_TIM_OC_ConfigChannel+0x214>)
 8004e70:	4293      	cmp	r3, r2
 8004e72:	d015      	beq.n	8004ea0 <HAL_TIM_OC_ConfigChannel+0x160>
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	681a      	ldr	r2, [r3, #0]
 8004e78:	2380      	movs	r3, #128	; 0x80
 8004e7a:	05db      	lsls	r3, r3, #23
 8004e7c:	429a      	cmp	r2, r3
 8004e7e:	d00f      	beq.n	8004ea0 <HAL_TIM_OC_ConfigChannel+0x160>
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	4a34      	ldr	r2, [pc, #208]	; (8004f58 <HAL_TIM_OC_ConfigChannel+0x218>)
 8004e86:	4293      	cmp	r3, r2
 8004e88:	d00a      	beq.n	8004ea0 <HAL_TIM_OC_ConfigChannel+0x160>
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	4a34      	ldr	r2, [pc, #208]	; (8004f60 <HAL_TIM_OC_ConfigChannel+0x220>)
 8004e90:	4293      	cmp	r3, r2
 8004e92:	d005      	beq.n	8004ea0 <HAL_TIM_OC_ConfigChannel+0x160>
 8004e94:	4a36      	ldr	r2, [pc, #216]	; (8004f70 <HAL_TIM_OC_ConfigChannel+0x230>)
 8004e96:	4b2c      	ldr	r3, [pc, #176]	; (8004f48 <HAL_TIM_OC_ConfigChannel+0x208>)
 8004e98:	0011      	movs	r1, r2
 8004e9a:	0018      	movs	r0, r3
 8004e9c:	f7fb fd59 	bl	8000952 <assert_failed>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	68ba      	ldr	r2, [r7, #8]
 8004ea6:	0011      	movs	r1, r2
 8004ea8:	0018      	movs	r0, r3
 8004eaa:	f000 fd45 	bl	8005938 <TIM_OC2_SetConfig>
    break;
 8004eae:	e03b      	b.n	8004f28 <HAL_TIM_OC_ConfigChannel+0x1e8>
       assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	4a27      	ldr	r2, [pc, #156]	; (8004f54 <HAL_TIM_OC_ConfigChannel+0x214>)
 8004eb6:	4293      	cmp	r3, r2
 8004eb8:	d010      	beq.n	8004edc <HAL_TIM_OC_ConfigChannel+0x19c>
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	681a      	ldr	r2, [r3, #0]
 8004ebe:	2380      	movs	r3, #128	; 0x80
 8004ec0:	05db      	lsls	r3, r3, #23
 8004ec2:	429a      	cmp	r2, r3
 8004ec4:	d00a      	beq.n	8004edc <HAL_TIM_OC_ConfigChannel+0x19c>
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	4a23      	ldr	r2, [pc, #140]	; (8004f58 <HAL_TIM_OC_ConfigChannel+0x218>)
 8004ecc:	4293      	cmp	r3, r2
 8004ece:	d005      	beq.n	8004edc <HAL_TIM_OC_ConfigChannel+0x19c>
 8004ed0:	4a28      	ldr	r2, [pc, #160]	; (8004f74 <HAL_TIM_OC_ConfigChannel+0x234>)
 8004ed2:	4b1d      	ldr	r3, [pc, #116]	; (8004f48 <HAL_TIM_OC_ConfigChannel+0x208>)
 8004ed4:	0011      	movs	r1, r2
 8004ed6:	0018      	movs	r0, r3
 8004ed8:	f7fb fd3b 	bl	8000952 <assert_failed>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	68ba      	ldr	r2, [r7, #8]
 8004ee2:	0011      	movs	r1, r2
 8004ee4:	0018      	movs	r0, r3
 8004ee6:	f000 fde7 	bl	8005ab8 <TIM_OC3_SetConfig>
    break;
 8004eea:	e01d      	b.n	8004f28 <HAL_TIM_OC_ConfigChannel+0x1e8>
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	4a18      	ldr	r2, [pc, #96]	; (8004f54 <HAL_TIM_OC_ConfigChannel+0x214>)
 8004ef2:	4293      	cmp	r3, r2
 8004ef4:	d010      	beq.n	8004f18 <HAL_TIM_OC_ConfigChannel+0x1d8>
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	681a      	ldr	r2, [r3, #0]
 8004efa:	2380      	movs	r3, #128	; 0x80
 8004efc:	05db      	lsls	r3, r3, #23
 8004efe:	429a      	cmp	r2, r3
 8004f00:	d00a      	beq.n	8004f18 <HAL_TIM_OC_ConfigChannel+0x1d8>
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	4a14      	ldr	r2, [pc, #80]	; (8004f58 <HAL_TIM_OC_ConfigChannel+0x218>)
 8004f08:	4293      	cmp	r3, r2
 8004f0a:	d005      	beq.n	8004f18 <HAL_TIM_OC_ConfigChannel+0x1d8>
 8004f0c:	4a1a      	ldr	r2, [pc, #104]	; (8004f78 <HAL_TIM_OC_ConfigChannel+0x238>)
 8004f0e:	4b0e      	ldr	r3, [pc, #56]	; (8004f48 <HAL_TIM_OC_ConfigChannel+0x208>)
 8004f10:	0011      	movs	r1, r2
 8004f12:	0018      	movs	r0, r3
 8004f14:	f7fb fd1d 	bl	8000952 <assert_failed>
       TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	68ba      	ldr	r2, [r7, #8]
 8004f1e:	0011      	movs	r1, r2
 8004f20:	0018      	movs	r0, r3
 8004f22:	f000 fe8b 	bl	8005c3c <TIM_OC4_SetConfig>
    break;
 8004f26:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	223d      	movs	r2, #61	; 0x3d
 8004f2c:	2101      	movs	r1, #1
 8004f2e:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	223c      	movs	r2, #60	; 0x3c
 8004f34:	2100      	movs	r1, #0
 8004f36:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004f38:	2300      	movs	r3, #0
}
 8004f3a:	0018      	movs	r0, r3
 8004f3c:	46bd      	mov	sp, r7
 8004f3e:	b004      	add	sp, #16
 8004f40:	bd80      	pop	{r7, pc}
 8004f42:	46c0      	nop			; (mov r8, r8)
 8004f44:	00000b77 	.word	0x00000b77
 8004f48:	08007158 	.word	0x08007158
 8004f4c:	00000b78 	.word	0x00000b78
 8004f50:	00000b79 	.word	0x00000b79
 8004f54:	40012c00 	.word	0x40012c00
 8004f58:	40000400 	.word	0x40000400
 8004f5c:	40002000 	.word	0x40002000
 8004f60:	40014000 	.word	0x40014000
 8004f64:	40014400 	.word	0x40014400
 8004f68:	40014800 	.word	0x40014800
 8004f6c:	00000b84 	.word	0x00000b84
 8004f70:	00000b8c 	.word	0x00000b8c
 8004f74:	00000b94 	.word	0x00000b94
 8004f78:	00000b9c 	.word	0x00000b9c

08004f7c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */ 
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef * sClockSourceConfig)
{
 8004f7c:	b580      	push	{r7, lr}
 8004f7e:	b084      	sub	sp, #16
 8004f80:	af00      	add	r7, sp, #0
 8004f82:	6078      	str	r0, [r7, #4]
 8004f84:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr = 0U;
 8004f86:	2300      	movs	r3, #0
 8004f88:	60fb      	str	r3, [r7, #12]

  /* Process Locked */
  __HAL_LOCK(htim);
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	223c      	movs	r2, #60	; 0x3c
 8004f8e:	5c9b      	ldrb	r3, [r3, r2]
 8004f90:	2b01      	cmp	r3, #1
 8004f92:	d102      	bne.n	8004f9a <HAL_TIM_ConfigClockSource+0x1e>
 8004f94:	2302      	movs	r3, #2
 8004f96:	f000 fb52 	bl	800563e <HAL_TIM_ConfigClockSource+0x6c2>
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	223c      	movs	r2, #60	; 0x3c
 8004f9e:	2101      	movs	r1, #1
 8004fa0:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	223d      	movs	r2, #61	; 0x3d
 8004fa6:	2102      	movs	r1, #2
 8004fa8:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));
 8004faa:	683b      	ldr	r3, [r7, #0]
 8004fac:	681a      	ldr	r2, [r3, #0]
 8004fae:	2380      	movs	r3, #128	; 0x80
 8004fb0:	015b      	lsls	r3, r3, #5
 8004fb2:	429a      	cmp	r2, r3
 8004fb4:	d02b      	beq.n	800500e <HAL_TIM_ConfigClockSource+0x92>
 8004fb6:	683b      	ldr	r3, [r7, #0]
 8004fb8:	681a      	ldr	r2, [r3, #0]
 8004fba:	2380      	movs	r3, #128	; 0x80
 8004fbc:	019b      	lsls	r3, r3, #6
 8004fbe:	429a      	cmp	r2, r3
 8004fc0:	d025      	beq.n	800500e <HAL_TIM_ConfigClockSource+0x92>
 8004fc2:	683b      	ldr	r3, [r7, #0]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d021      	beq.n	800500e <HAL_TIM_ConfigClockSource+0x92>
 8004fca:	683b      	ldr	r3, [r7, #0]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	2b10      	cmp	r3, #16
 8004fd0:	d01d      	beq.n	800500e <HAL_TIM_ConfigClockSource+0x92>
 8004fd2:	683b      	ldr	r3, [r7, #0]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	2b20      	cmp	r3, #32
 8004fd8:	d019      	beq.n	800500e <HAL_TIM_ConfigClockSource+0x92>
 8004fda:	683b      	ldr	r3, [r7, #0]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	2b30      	cmp	r3, #48	; 0x30
 8004fe0:	d015      	beq.n	800500e <HAL_TIM_ConfigClockSource+0x92>
 8004fe2:	683b      	ldr	r3, [r7, #0]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	2b40      	cmp	r3, #64	; 0x40
 8004fe8:	d011      	beq.n	800500e <HAL_TIM_ConfigClockSource+0x92>
 8004fea:	683b      	ldr	r3, [r7, #0]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	2b50      	cmp	r3, #80	; 0x50
 8004ff0:	d00d      	beq.n	800500e <HAL_TIM_ConfigClockSource+0x92>
 8004ff2:	683b      	ldr	r3, [r7, #0]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	2b60      	cmp	r3, #96	; 0x60
 8004ff8:	d009      	beq.n	800500e <HAL_TIM_ConfigClockSource+0x92>
 8004ffa:	683b      	ldr	r3, [r7, #0]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	2b70      	cmp	r3, #112	; 0x70
 8005000:	d005      	beq.n	800500e <HAL_TIM_ConfigClockSource+0x92>
 8005002:	4aab      	ldr	r2, [pc, #684]	; (80052b0 <HAL_TIM_ConfigClockSource+0x334>)
 8005004:	4bab      	ldr	r3, [pc, #684]	; (80052b4 <HAL_TIM_ConfigClockSource+0x338>)
 8005006:	0011      	movs	r1, r2
 8005008:	0018      	movs	r0, r3
 800500a:	f7fb fca2 	bl	8000952 <assert_failed>

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	689b      	ldr	r3, [r3, #8]
 8005014:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	2277      	movs	r2, #119	; 0x77
 800501a:	4393      	bics	r3, r2
 800501c:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	4aa5      	ldr	r2, [pc, #660]	; (80052b8 <HAL_TIM_ConfigClockSource+0x33c>)
 8005022:	4013      	ands	r3, r2
 8005024:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	68fa      	ldr	r2, [r7, #12]
 800502c:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800502e:	683b      	ldr	r3, [r7, #0]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	2b40      	cmp	r3, #64	; 0x40
 8005034:	d100      	bne.n	8005038 <HAL_TIM_ConfigClockSource+0xbc>
 8005036:	e202      	b.n	800543e <HAL_TIM_ConfigClockSource+0x4c2>
 8005038:	d80e      	bhi.n	8005058 <HAL_TIM_ConfigClockSource+0xdc>
 800503a:	2b10      	cmp	r3, #16
 800503c:	d100      	bne.n	8005040 <HAL_TIM_ConfigClockSource+0xc4>
 800503e:	e271      	b.n	8005524 <HAL_TIM_ConfigClockSource+0x5a8>
 8005040:	d803      	bhi.n	800504a <HAL_TIM_ConfigClockSource+0xce>
 8005042:	2b00      	cmp	r3, #0
 8005044:	d100      	bne.n	8005048 <HAL_TIM_ConfigClockSource+0xcc>
 8005046:	e24b      	b.n	80054e0 <HAL_TIM_ConfigClockSource+0x564>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR3);
    }
    break;

  default:
    break;
 8005048:	e2f0      	b.n	800562c <HAL_TIM_ConfigClockSource+0x6b0>
  switch (sClockSourceConfig->ClockSource)
 800504a:	2b20      	cmp	r3, #32
 800504c:	d100      	bne.n	8005050 <HAL_TIM_ConfigClockSource+0xd4>
 800504e:	e28b      	b.n	8005568 <HAL_TIM_ConfigClockSource+0x5ec>
 8005050:	2b30      	cmp	r3, #48	; 0x30
 8005052:	d100      	bne.n	8005056 <HAL_TIM_ConfigClockSource+0xda>
 8005054:	e2c8      	b.n	80055e8 <HAL_TIM_ConfigClockSource+0x66c>
    break;
 8005056:	e2e9      	b.n	800562c <HAL_TIM_ConfigClockSource+0x6b0>
  switch (sClockSourceConfig->ClockSource)
 8005058:	2b70      	cmp	r3, #112	; 0x70
 800505a:	d049      	beq.n	80050f0 <HAL_TIM_ConfigClockSource+0x174>
 800505c:	d806      	bhi.n	800506c <HAL_TIM_ConfigClockSource+0xf0>
 800505e:	2b50      	cmp	r3, #80	; 0x50
 8005060:	d100      	bne.n	8005064 <HAL_TIM_ConfigClockSource+0xe8>
 8005062:	e149      	b.n	80052f8 <HAL_TIM_ConfigClockSource+0x37c>
 8005064:	2b60      	cmp	r3, #96	; 0x60
 8005066:	d100      	bne.n	800506a <HAL_TIM_ConfigClockSource+0xee>
 8005068:	e198      	b.n	800539c <HAL_TIM_ConfigClockSource+0x420>
    break;
 800506a:	e2df      	b.n	800562c <HAL_TIM_ConfigClockSource+0x6b0>
  switch (sClockSourceConfig->ClockSource)
 800506c:	2280      	movs	r2, #128	; 0x80
 800506e:	0152      	lsls	r2, r2, #5
 8005070:	4293      	cmp	r3, r2
 8005072:	d005      	beq.n	8005080 <HAL_TIM_ConfigClockSource+0x104>
 8005074:	2280      	movs	r2, #128	; 0x80
 8005076:	0192      	lsls	r2, r2, #6
 8005078:	4293      	cmp	r3, r2
 800507a:	d100      	bne.n	800507e <HAL_TIM_ConfigClockSource+0x102>
 800507c:	e0ab      	b.n	80051d6 <HAL_TIM_ConfigClockSource+0x25a>
    break;
 800507e:	e2d5      	b.n	800562c <HAL_TIM_ConfigClockSource+0x6b0>
      assert_param(IS_TIM_INSTANCE(htim->Instance));
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	4a8d      	ldr	r2, [pc, #564]	; (80052bc <HAL_TIM_ConfigClockSource+0x340>)
 8005086:	4293      	cmp	r3, r2
 8005088:	d029      	beq.n	80050de <HAL_TIM_ConfigClockSource+0x162>
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	681a      	ldr	r2, [r3, #0]
 800508e:	2380      	movs	r3, #128	; 0x80
 8005090:	05db      	lsls	r3, r3, #23
 8005092:	429a      	cmp	r2, r3
 8005094:	d023      	beq.n	80050de <HAL_TIM_ConfigClockSource+0x162>
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	4a89      	ldr	r2, [pc, #548]	; (80052c0 <HAL_TIM_ConfigClockSource+0x344>)
 800509c:	4293      	cmp	r3, r2
 800509e:	d01e      	beq.n	80050de <HAL_TIM_ConfigClockSource+0x162>
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	4a87      	ldr	r2, [pc, #540]	; (80052c4 <HAL_TIM_ConfigClockSource+0x348>)
 80050a6:	4293      	cmp	r3, r2
 80050a8:	d019      	beq.n	80050de <HAL_TIM_ConfigClockSource+0x162>
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	4a86      	ldr	r2, [pc, #536]	; (80052c8 <HAL_TIM_ConfigClockSource+0x34c>)
 80050b0:	4293      	cmp	r3, r2
 80050b2:	d014      	beq.n	80050de <HAL_TIM_ConfigClockSource+0x162>
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	4a84      	ldr	r2, [pc, #528]	; (80052cc <HAL_TIM_ConfigClockSource+0x350>)
 80050ba:	4293      	cmp	r3, r2
 80050bc:	d00f      	beq.n	80050de <HAL_TIM_ConfigClockSource+0x162>
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	4a83      	ldr	r2, [pc, #524]	; (80052d0 <HAL_TIM_ConfigClockSource+0x354>)
 80050c4:	4293      	cmp	r3, r2
 80050c6:	d00a      	beq.n	80050de <HAL_TIM_ConfigClockSource+0x162>
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	4a81      	ldr	r2, [pc, #516]	; (80052d4 <HAL_TIM_ConfigClockSource+0x358>)
 80050ce:	4293      	cmp	r3, r2
 80050d0:	d005      	beq.n	80050de <HAL_TIM_ConfigClockSource+0x162>
 80050d2:	4a81      	ldr	r2, [pc, #516]	; (80052d8 <HAL_TIM_ConfigClockSource+0x35c>)
 80050d4:	4b77      	ldr	r3, [pc, #476]	; (80052b4 <HAL_TIM_ConfigClockSource+0x338>)
 80050d6:	0011      	movs	r1, r2
 80050d8:	0018      	movs	r0, r3
 80050da:	f7fb fc3a 	bl	8000952 <assert_failed>
      htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	689a      	ldr	r2, [r3, #8]
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	2107      	movs	r1, #7
 80050ea:	438a      	bics	r2, r1
 80050ec:	609a      	str	r2, [r3, #8]
    break;
 80050ee:	e29d      	b.n	800562c <HAL_TIM_ConfigClockSource+0x6b0>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	4a71      	ldr	r2, [pc, #452]	; (80052bc <HAL_TIM_ConfigClockSource+0x340>)
 80050f6:	4293      	cmp	r3, r2
 80050f8:	d010      	beq.n	800511c <HAL_TIM_ConfigClockSource+0x1a0>
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	681a      	ldr	r2, [r3, #0]
 80050fe:	2380      	movs	r3, #128	; 0x80
 8005100:	05db      	lsls	r3, r3, #23
 8005102:	429a      	cmp	r2, r3
 8005104:	d00a      	beq.n	800511c <HAL_TIM_ConfigClockSource+0x1a0>
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	4a6d      	ldr	r2, [pc, #436]	; (80052c0 <HAL_TIM_ConfigClockSource+0x344>)
 800510c:	4293      	cmp	r3, r2
 800510e:	d005      	beq.n	800511c <HAL_TIM_ConfigClockSource+0x1a0>
 8005110:	4a72      	ldr	r2, [pc, #456]	; (80052dc <HAL_TIM_ConfigClockSource+0x360>)
 8005112:	4b68      	ldr	r3, [pc, #416]	; (80052b4 <HAL_TIM_ConfigClockSource+0x338>)
 8005114:	0011      	movs	r1, r2
 8005116:	0018      	movs	r0, r3
 8005118:	f7fb fc1b 	bl	8000952 <assert_failed>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
 800511c:	683b      	ldr	r3, [r7, #0]
 800511e:	689b      	ldr	r3, [r3, #8]
 8005120:	2b00      	cmp	r3, #0
 8005122:	d017      	beq.n	8005154 <HAL_TIM_ConfigClockSource+0x1d8>
 8005124:	683b      	ldr	r3, [r7, #0]
 8005126:	689a      	ldr	r2, [r3, #8]
 8005128:	2380      	movs	r3, #128	; 0x80
 800512a:	015b      	lsls	r3, r3, #5
 800512c:	429a      	cmp	r2, r3
 800512e:	d011      	beq.n	8005154 <HAL_TIM_ConfigClockSource+0x1d8>
 8005130:	683b      	ldr	r3, [r7, #0]
 8005132:	689a      	ldr	r2, [r3, #8]
 8005134:	2380      	movs	r3, #128	; 0x80
 8005136:	019b      	lsls	r3, r3, #6
 8005138:	429a      	cmp	r2, r3
 800513a:	d00b      	beq.n	8005154 <HAL_TIM_ConfigClockSource+0x1d8>
 800513c:	683b      	ldr	r3, [r7, #0]
 800513e:	689a      	ldr	r2, [r3, #8]
 8005140:	23c0      	movs	r3, #192	; 0xc0
 8005142:	019b      	lsls	r3, r3, #6
 8005144:	429a      	cmp	r2, r3
 8005146:	d005      	beq.n	8005154 <HAL_TIM_ConfigClockSource+0x1d8>
 8005148:	4a65      	ldr	r2, [pc, #404]	; (80052e0 <HAL_TIM_ConfigClockSource+0x364>)
 800514a:	4b5a      	ldr	r3, [pc, #360]	; (80052b4 <HAL_TIM_ConfigClockSource+0x338>)
 800514c:	0011      	movs	r1, r2
 800514e:	0018      	movs	r0, r3
 8005150:	f7fb fbff 	bl	8000952 <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 8005154:	683b      	ldr	r3, [r7, #0]
 8005156:	685a      	ldr	r2, [r3, #4]
 8005158:	2380      	movs	r3, #128	; 0x80
 800515a:	021b      	lsls	r3, r3, #8
 800515c:	429a      	cmp	r2, r3
 800515e:	d015      	beq.n	800518c <HAL_TIM_ConfigClockSource+0x210>
 8005160:	683b      	ldr	r3, [r7, #0]
 8005162:	685b      	ldr	r3, [r3, #4]
 8005164:	2b00      	cmp	r3, #0
 8005166:	d011      	beq.n	800518c <HAL_TIM_ConfigClockSource+0x210>
 8005168:	683b      	ldr	r3, [r7, #0]
 800516a:	685b      	ldr	r3, [r3, #4]
 800516c:	2b00      	cmp	r3, #0
 800516e:	d00d      	beq.n	800518c <HAL_TIM_ConfigClockSource+0x210>
 8005170:	683b      	ldr	r3, [r7, #0]
 8005172:	685b      	ldr	r3, [r3, #4]
 8005174:	2b02      	cmp	r3, #2
 8005176:	d009      	beq.n	800518c <HAL_TIM_ConfigClockSource+0x210>
 8005178:	683b      	ldr	r3, [r7, #0]
 800517a:	685b      	ldr	r3, [r3, #4]
 800517c:	2b0a      	cmp	r3, #10
 800517e:	d005      	beq.n	800518c <HAL_TIM_ConfigClockSource+0x210>
 8005180:	4a58      	ldr	r2, [pc, #352]	; (80052e4 <HAL_TIM_ConfigClockSource+0x368>)
 8005182:	4b4c      	ldr	r3, [pc, #304]	; (80052b4 <HAL_TIM_ConfigClockSource+0x338>)
 8005184:	0011      	movs	r1, r2
 8005186:	0018      	movs	r0, r3
 8005188:	f7fb fbe3 	bl	8000952 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 800518c:	683b      	ldr	r3, [r7, #0]
 800518e:	68db      	ldr	r3, [r3, #12]
 8005190:	2b0f      	cmp	r3, #15
 8005192:	d905      	bls.n	80051a0 <HAL_TIM_ConfigClockSource+0x224>
 8005194:	4a54      	ldr	r2, [pc, #336]	; (80052e8 <HAL_TIM_ConfigClockSource+0x36c>)
 8005196:	4b47      	ldr	r3, [pc, #284]	; (80052b4 <HAL_TIM_ConfigClockSource+0x338>)
 8005198:	0011      	movs	r1, r2
 800519a:	0018      	movs	r0, r3
 800519c:	f7fb fbd9 	bl	8000952 <assert_failed>
      TIM_ETR_SetConfig(htim->Instance,
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	6818      	ldr	r0, [r3, #0]
 80051a4:	683b      	ldr	r3, [r7, #0]
 80051a6:	6899      	ldr	r1, [r3, #8]
 80051a8:	683b      	ldr	r3, [r7, #0]
 80051aa:	685a      	ldr	r2, [r3, #4]
 80051ac:	683b      	ldr	r3, [r7, #0]
 80051ae:	68db      	ldr	r3, [r3, #12]
 80051b0:	f000 fe50 	bl	8005e54 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	689b      	ldr	r3, [r3, #8]
 80051ba:	60fb      	str	r3, [r7, #12]
      tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	2277      	movs	r2, #119	; 0x77
 80051c0:	4393      	bics	r3, r2
 80051c2:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	2277      	movs	r2, #119	; 0x77
 80051c8:	4313      	orrs	r3, r2
 80051ca:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	68fa      	ldr	r2, [r7, #12]
 80051d2:	609a      	str	r2, [r3, #8]
    break;
 80051d4:	e22a      	b.n	800562c <HAL_TIM_ConfigClockSource+0x6b0>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE2_INSTANCE(htim->Instance));
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	4a38      	ldr	r2, [pc, #224]	; (80052bc <HAL_TIM_ConfigClockSource+0x340>)
 80051dc:	4293      	cmp	r3, r2
 80051de:	d010      	beq.n	8005202 <HAL_TIM_ConfigClockSource+0x286>
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	681a      	ldr	r2, [r3, #0]
 80051e4:	2380      	movs	r3, #128	; 0x80
 80051e6:	05db      	lsls	r3, r3, #23
 80051e8:	429a      	cmp	r2, r3
 80051ea:	d00a      	beq.n	8005202 <HAL_TIM_ConfigClockSource+0x286>
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	4a33      	ldr	r2, [pc, #204]	; (80052c0 <HAL_TIM_ConfigClockSource+0x344>)
 80051f2:	4293      	cmp	r3, r2
 80051f4:	d005      	beq.n	8005202 <HAL_TIM_ConfigClockSource+0x286>
 80051f6:	4a3d      	ldr	r2, [pc, #244]	; (80052ec <HAL_TIM_ConfigClockSource+0x370>)
 80051f8:	4b2e      	ldr	r3, [pc, #184]	; (80052b4 <HAL_TIM_ConfigClockSource+0x338>)
 80051fa:	0011      	movs	r1, r2
 80051fc:	0018      	movs	r0, r3
 80051fe:	f7fb fba8 	bl	8000952 <assert_failed>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
 8005202:	683b      	ldr	r3, [r7, #0]
 8005204:	689b      	ldr	r3, [r3, #8]
 8005206:	2b00      	cmp	r3, #0
 8005208:	d017      	beq.n	800523a <HAL_TIM_ConfigClockSource+0x2be>
 800520a:	683b      	ldr	r3, [r7, #0]
 800520c:	689a      	ldr	r2, [r3, #8]
 800520e:	2380      	movs	r3, #128	; 0x80
 8005210:	015b      	lsls	r3, r3, #5
 8005212:	429a      	cmp	r2, r3
 8005214:	d011      	beq.n	800523a <HAL_TIM_ConfigClockSource+0x2be>
 8005216:	683b      	ldr	r3, [r7, #0]
 8005218:	689a      	ldr	r2, [r3, #8]
 800521a:	2380      	movs	r3, #128	; 0x80
 800521c:	019b      	lsls	r3, r3, #6
 800521e:	429a      	cmp	r2, r3
 8005220:	d00b      	beq.n	800523a <HAL_TIM_ConfigClockSource+0x2be>
 8005222:	683b      	ldr	r3, [r7, #0]
 8005224:	689a      	ldr	r2, [r3, #8]
 8005226:	23c0      	movs	r3, #192	; 0xc0
 8005228:	019b      	lsls	r3, r3, #6
 800522a:	429a      	cmp	r2, r3
 800522c:	d005      	beq.n	800523a <HAL_TIM_ConfigClockSource+0x2be>
 800522e:	4a30      	ldr	r2, [pc, #192]	; (80052f0 <HAL_TIM_ConfigClockSource+0x374>)
 8005230:	4b20      	ldr	r3, [pc, #128]	; (80052b4 <HAL_TIM_ConfigClockSource+0x338>)
 8005232:	0011      	movs	r1, r2
 8005234:	0018      	movs	r0, r3
 8005236:	f7fb fb8c 	bl	8000952 <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 800523a:	683b      	ldr	r3, [r7, #0]
 800523c:	685a      	ldr	r2, [r3, #4]
 800523e:	2380      	movs	r3, #128	; 0x80
 8005240:	021b      	lsls	r3, r3, #8
 8005242:	429a      	cmp	r2, r3
 8005244:	d016      	beq.n	8005274 <HAL_TIM_ConfigClockSource+0x2f8>
 8005246:	683b      	ldr	r3, [r7, #0]
 8005248:	685b      	ldr	r3, [r3, #4]
 800524a:	2b00      	cmp	r3, #0
 800524c:	d012      	beq.n	8005274 <HAL_TIM_ConfigClockSource+0x2f8>
 800524e:	683b      	ldr	r3, [r7, #0]
 8005250:	685b      	ldr	r3, [r3, #4]
 8005252:	2b00      	cmp	r3, #0
 8005254:	d00e      	beq.n	8005274 <HAL_TIM_ConfigClockSource+0x2f8>
 8005256:	683b      	ldr	r3, [r7, #0]
 8005258:	685b      	ldr	r3, [r3, #4]
 800525a:	2b02      	cmp	r3, #2
 800525c:	d00a      	beq.n	8005274 <HAL_TIM_ConfigClockSource+0x2f8>
 800525e:	683b      	ldr	r3, [r7, #0]
 8005260:	685b      	ldr	r3, [r3, #4]
 8005262:	2b0a      	cmp	r3, #10
 8005264:	d006      	beq.n	8005274 <HAL_TIM_ConfigClockSource+0x2f8>
 8005266:	23ff      	movs	r3, #255	; 0xff
 8005268:	011a      	lsls	r2, r3, #4
 800526a:	4b12      	ldr	r3, [pc, #72]	; (80052b4 <HAL_TIM_ConfigClockSource+0x338>)
 800526c:	0011      	movs	r1, r2
 800526e:	0018      	movs	r0, r3
 8005270:	f7fb fb6f 	bl	8000952 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8005274:	683b      	ldr	r3, [r7, #0]
 8005276:	68db      	ldr	r3, [r3, #12]
 8005278:	2b0f      	cmp	r3, #15
 800527a:	d905      	bls.n	8005288 <HAL_TIM_ConfigClockSource+0x30c>
 800527c:	4a1d      	ldr	r2, [pc, #116]	; (80052f4 <HAL_TIM_ConfigClockSource+0x378>)
 800527e:	4b0d      	ldr	r3, [pc, #52]	; (80052b4 <HAL_TIM_ConfigClockSource+0x338>)
 8005280:	0011      	movs	r1, r2
 8005282:	0018      	movs	r0, r3
 8005284:	f7fb fb65 	bl	8000952 <assert_failed>
      TIM_ETR_SetConfig(htim->Instance,
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	6818      	ldr	r0, [r3, #0]
 800528c:	683b      	ldr	r3, [r7, #0]
 800528e:	6899      	ldr	r1, [r3, #8]
 8005290:	683b      	ldr	r3, [r7, #0]
 8005292:	685a      	ldr	r2, [r3, #4]
 8005294:	683b      	ldr	r3, [r7, #0]
 8005296:	68db      	ldr	r3, [r3, #12]
 8005298:	f000 fddc 	bl	8005e54 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	689a      	ldr	r2, [r3, #8]
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	2180      	movs	r1, #128	; 0x80
 80052a8:	01c9      	lsls	r1, r1, #7
 80052aa:	430a      	orrs	r2, r1
 80052ac:	609a      	str	r2, [r3, #8]
    break;
 80052ae:	e1bd      	b.n	800562c <HAL_TIM_ConfigClockSource+0x6b0>
 80052b0:	00000fbd 	.word	0x00000fbd
 80052b4:	08007158 	.word	0x08007158
 80052b8:	ffff00ff 	.word	0xffff00ff
 80052bc:	40012c00 	.word	0x40012c00
 80052c0:	40000400 	.word	0x40000400
 80052c4:	40001000 	.word	0x40001000
 80052c8:	40002000 	.word	0x40002000
 80052cc:	40014000 	.word	0x40014000
 80052d0:	40014400 	.word	0x40014400
 80052d4:	40014800 	.word	0x40014800
 80052d8:	00000fc9 	.word	0x00000fc9
 80052dc:	00000fd2 	.word	0x00000fd2
 80052e0:	00000fd5 	.word	0x00000fd5
 80052e4:	00000fd6 	.word	0x00000fd6
 80052e8:	00000fd7 	.word	0x00000fd7
 80052ec:	00000fec 	.word	0x00000fec
 80052f0:	00000fef 	.word	0x00000fef
 80052f4:	00000ff1 	.word	0x00000ff1
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	4aab      	ldr	r2, [pc, #684]	; (80055ac <HAL_TIM_ConfigClockSource+0x630>)
 80052fe:	4293      	cmp	r3, r2
 8005300:	d016      	beq.n	8005330 <HAL_TIM_ConfigClockSource+0x3b4>
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	681a      	ldr	r2, [r3, #0]
 8005306:	2380      	movs	r3, #128	; 0x80
 8005308:	05db      	lsls	r3, r3, #23
 800530a:	429a      	cmp	r2, r3
 800530c:	d010      	beq.n	8005330 <HAL_TIM_ConfigClockSource+0x3b4>
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	4aa7      	ldr	r2, [pc, #668]	; (80055b0 <HAL_TIM_ConfigClockSource+0x634>)
 8005314:	4293      	cmp	r3, r2
 8005316:	d00b      	beq.n	8005330 <HAL_TIM_ConfigClockSource+0x3b4>
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	4aa5      	ldr	r2, [pc, #660]	; (80055b4 <HAL_TIM_ConfigClockSource+0x638>)
 800531e:	4293      	cmp	r3, r2
 8005320:	d006      	beq.n	8005330 <HAL_TIM_ConfigClockSource+0x3b4>
 8005322:	2380      	movs	r3, #128	; 0x80
 8005324:	015a      	lsls	r2, r3, #5
 8005326:	4ba4      	ldr	r3, [pc, #656]	; (80055b8 <HAL_TIM_ConfigClockSource+0x63c>)
 8005328:	0011      	movs	r1, r2
 800532a:	0018      	movs	r0, r3
 800532c:	f7fb fb11 	bl	8000952 <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 8005330:	683b      	ldr	r3, [r7, #0]
 8005332:	685a      	ldr	r2, [r3, #4]
 8005334:	2380      	movs	r3, #128	; 0x80
 8005336:	021b      	lsls	r3, r3, #8
 8005338:	429a      	cmp	r2, r3
 800533a:	d015      	beq.n	8005368 <HAL_TIM_ConfigClockSource+0x3ec>
 800533c:	683b      	ldr	r3, [r7, #0]
 800533e:	685b      	ldr	r3, [r3, #4]
 8005340:	2b00      	cmp	r3, #0
 8005342:	d011      	beq.n	8005368 <HAL_TIM_ConfigClockSource+0x3ec>
 8005344:	683b      	ldr	r3, [r7, #0]
 8005346:	685b      	ldr	r3, [r3, #4]
 8005348:	2b00      	cmp	r3, #0
 800534a:	d00d      	beq.n	8005368 <HAL_TIM_ConfigClockSource+0x3ec>
 800534c:	683b      	ldr	r3, [r7, #0]
 800534e:	685b      	ldr	r3, [r3, #4]
 8005350:	2b02      	cmp	r3, #2
 8005352:	d009      	beq.n	8005368 <HAL_TIM_ConfigClockSource+0x3ec>
 8005354:	683b      	ldr	r3, [r7, #0]
 8005356:	685b      	ldr	r3, [r3, #4]
 8005358:	2b0a      	cmp	r3, #10
 800535a:	d005      	beq.n	8005368 <HAL_TIM_ConfigClockSource+0x3ec>
 800535c:	4a97      	ldr	r2, [pc, #604]	; (80055bc <HAL_TIM_ConfigClockSource+0x640>)
 800535e:	4b96      	ldr	r3, [pc, #600]	; (80055b8 <HAL_TIM_ConfigClockSource+0x63c>)
 8005360:	0011      	movs	r1, r2
 8005362:	0018      	movs	r0, r3
 8005364:	f7fb faf5 	bl	8000952 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8005368:	683b      	ldr	r3, [r7, #0]
 800536a:	68db      	ldr	r3, [r3, #12]
 800536c:	2b0f      	cmp	r3, #15
 800536e:	d905      	bls.n	800537c <HAL_TIM_ConfigClockSource+0x400>
 8005370:	4a93      	ldr	r2, [pc, #588]	; (80055c0 <HAL_TIM_ConfigClockSource+0x644>)
 8005372:	4b91      	ldr	r3, [pc, #580]	; (80055b8 <HAL_TIM_ConfigClockSource+0x63c>)
 8005374:	0011      	movs	r1, r2
 8005376:	0018      	movs	r0, r3
 8005378:	f7fb faeb 	bl	8000952 <assert_failed>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	6818      	ldr	r0, [r3, #0]
 8005380:	683b      	ldr	r3, [r7, #0]
 8005382:	6859      	ldr	r1, [r3, #4]
 8005384:	683b      	ldr	r3, [r7, #0]
 8005386:	68db      	ldr	r3, [r3, #12]
 8005388:	001a      	movs	r2, r3
 800538a:	f000 fcdb 	bl	8005d44 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	2150      	movs	r1, #80	; 0x50
 8005394:	0018      	movs	r0, r3
 8005396:	f000 fd3d 	bl	8005e14 <TIM_ITRx_SetConfig>
    break;
 800539a:	e147      	b.n	800562c <HAL_TIM_ConfigClockSource+0x6b0>
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	4a82      	ldr	r2, [pc, #520]	; (80055ac <HAL_TIM_ConfigClockSource+0x630>)
 80053a2:	4293      	cmp	r3, r2
 80053a4:	d015      	beq.n	80053d2 <HAL_TIM_ConfigClockSource+0x456>
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	681a      	ldr	r2, [r3, #0]
 80053aa:	2380      	movs	r3, #128	; 0x80
 80053ac:	05db      	lsls	r3, r3, #23
 80053ae:	429a      	cmp	r2, r3
 80053b0:	d00f      	beq.n	80053d2 <HAL_TIM_ConfigClockSource+0x456>
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	4a7e      	ldr	r2, [pc, #504]	; (80055b0 <HAL_TIM_ConfigClockSource+0x634>)
 80053b8:	4293      	cmp	r3, r2
 80053ba:	d00a      	beq.n	80053d2 <HAL_TIM_ConfigClockSource+0x456>
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	4a7c      	ldr	r2, [pc, #496]	; (80055b4 <HAL_TIM_ConfigClockSource+0x638>)
 80053c2:	4293      	cmp	r3, r2
 80053c4:	d005      	beq.n	80053d2 <HAL_TIM_ConfigClockSource+0x456>
 80053c6:	4a7f      	ldr	r2, [pc, #508]	; (80055c4 <HAL_TIM_ConfigClockSource+0x648>)
 80053c8:	4b7b      	ldr	r3, [pc, #492]	; (80055b8 <HAL_TIM_ConfigClockSource+0x63c>)
 80053ca:	0011      	movs	r1, r2
 80053cc:	0018      	movs	r0, r3
 80053ce:	f7fb fac0 	bl	8000952 <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 80053d2:	683b      	ldr	r3, [r7, #0]
 80053d4:	685a      	ldr	r2, [r3, #4]
 80053d6:	2380      	movs	r3, #128	; 0x80
 80053d8:	021b      	lsls	r3, r3, #8
 80053da:	429a      	cmp	r2, r3
 80053dc:	d015      	beq.n	800540a <HAL_TIM_ConfigClockSource+0x48e>
 80053de:	683b      	ldr	r3, [r7, #0]
 80053e0:	685b      	ldr	r3, [r3, #4]
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d011      	beq.n	800540a <HAL_TIM_ConfigClockSource+0x48e>
 80053e6:	683b      	ldr	r3, [r7, #0]
 80053e8:	685b      	ldr	r3, [r3, #4]
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d00d      	beq.n	800540a <HAL_TIM_ConfigClockSource+0x48e>
 80053ee:	683b      	ldr	r3, [r7, #0]
 80053f0:	685b      	ldr	r3, [r3, #4]
 80053f2:	2b02      	cmp	r3, #2
 80053f4:	d009      	beq.n	800540a <HAL_TIM_ConfigClockSource+0x48e>
 80053f6:	683b      	ldr	r3, [r7, #0]
 80053f8:	685b      	ldr	r3, [r3, #4]
 80053fa:	2b0a      	cmp	r3, #10
 80053fc:	d005      	beq.n	800540a <HAL_TIM_ConfigClockSource+0x48e>
 80053fe:	4a72      	ldr	r2, [pc, #456]	; (80055c8 <HAL_TIM_ConfigClockSource+0x64c>)
 8005400:	4b6d      	ldr	r3, [pc, #436]	; (80055b8 <HAL_TIM_ConfigClockSource+0x63c>)
 8005402:	0011      	movs	r1, r2
 8005404:	0018      	movs	r0, r3
 8005406:	f7fb faa4 	bl	8000952 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 800540a:	683b      	ldr	r3, [r7, #0]
 800540c:	68db      	ldr	r3, [r3, #12]
 800540e:	2b0f      	cmp	r3, #15
 8005410:	d905      	bls.n	800541e <HAL_TIM_ConfigClockSource+0x4a2>
 8005412:	4a6e      	ldr	r2, [pc, #440]	; (80055cc <HAL_TIM_ConfigClockSource+0x650>)
 8005414:	4b68      	ldr	r3, [pc, #416]	; (80055b8 <HAL_TIM_ConfigClockSource+0x63c>)
 8005416:	0011      	movs	r1, r2
 8005418:	0018      	movs	r0, r3
 800541a:	f7fb fa9a 	bl	8000952 <assert_failed>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	6818      	ldr	r0, [r3, #0]
 8005422:	683b      	ldr	r3, [r7, #0]
 8005424:	6859      	ldr	r1, [r3, #4]
 8005426:	683b      	ldr	r3, [r7, #0]
 8005428:	68db      	ldr	r3, [r3, #12]
 800542a:	001a      	movs	r2, r3
 800542c:	f000 fcbc 	bl	8005da8 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	2160      	movs	r1, #96	; 0x60
 8005436:	0018      	movs	r0, r3
 8005438:	f000 fcec 	bl	8005e14 <TIM_ITRx_SetConfig>
    break;
 800543c:	e0f6      	b.n	800562c <HAL_TIM_ConfigClockSource+0x6b0>
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	4a5a      	ldr	r2, [pc, #360]	; (80055ac <HAL_TIM_ConfigClockSource+0x630>)
 8005444:	4293      	cmp	r3, r2
 8005446:	d015      	beq.n	8005474 <HAL_TIM_ConfigClockSource+0x4f8>
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	681a      	ldr	r2, [r3, #0]
 800544c:	2380      	movs	r3, #128	; 0x80
 800544e:	05db      	lsls	r3, r3, #23
 8005450:	429a      	cmp	r2, r3
 8005452:	d00f      	beq.n	8005474 <HAL_TIM_ConfigClockSource+0x4f8>
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	4a55      	ldr	r2, [pc, #340]	; (80055b0 <HAL_TIM_ConfigClockSource+0x634>)
 800545a:	4293      	cmp	r3, r2
 800545c:	d00a      	beq.n	8005474 <HAL_TIM_ConfigClockSource+0x4f8>
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	4a54      	ldr	r2, [pc, #336]	; (80055b4 <HAL_TIM_ConfigClockSource+0x638>)
 8005464:	4293      	cmp	r3, r2
 8005466:	d005      	beq.n	8005474 <HAL_TIM_ConfigClockSource+0x4f8>
 8005468:	4a59      	ldr	r2, [pc, #356]	; (80055d0 <HAL_TIM_ConfigClockSource+0x654>)
 800546a:	4b53      	ldr	r3, [pc, #332]	; (80055b8 <HAL_TIM_ConfigClockSource+0x63c>)
 800546c:	0011      	movs	r1, r2
 800546e:	0018      	movs	r0, r3
 8005470:	f7fb fa6f 	bl	8000952 <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 8005474:	683b      	ldr	r3, [r7, #0]
 8005476:	685a      	ldr	r2, [r3, #4]
 8005478:	2380      	movs	r3, #128	; 0x80
 800547a:	021b      	lsls	r3, r3, #8
 800547c:	429a      	cmp	r2, r3
 800547e:	d015      	beq.n	80054ac <HAL_TIM_ConfigClockSource+0x530>
 8005480:	683b      	ldr	r3, [r7, #0]
 8005482:	685b      	ldr	r3, [r3, #4]
 8005484:	2b00      	cmp	r3, #0
 8005486:	d011      	beq.n	80054ac <HAL_TIM_ConfigClockSource+0x530>
 8005488:	683b      	ldr	r3, [r7, #0]
 800548a:	685b      	ldr	r3, [r3, #4]
 800548c:	2b00      	cmp	r3, #0
 800548e:	d00d      	beq.n	80054ac <HAL_TIM_ConfigClockSource+0x530>
 8005490:	683b      	ldr	r3, [r7, #0]
 8005492:	685b      	ldr	r3, [r3, #4]
 8005494:	2b02      	cmp	r3, #2
 8005496:	d009      	beq.n	80054ac <HAL_TIM_ConfigClockSource+0x530>
 8005498:	683b      	ldr	r3, [r7, #0]
 800549a:	685b      	ldr	r3, [r3, #4]
 800549c:	2b0a      	cmp	r3, #10
 800549e:	d005      	beq.n	80054ac <HAL_TIM_ConfigClockSource+0x530>
 80054a0:	4a4c      	ldr	r2, [pc, #304]	; (80055d4 <HAL_TIM_ConfigClockSource+0x658>)
 80054a2:	4b45      	ldr	r3, [pc, #276]	; (80055b8 <HAL_TIM_ConfigClockSource+0x63c>)
 80054a4:	0011      	movs	r1, r2
 80054a6:	0018      	movs	r0, r3
 80054a8:	f7fb fa53 	bl	8000952 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 80054ac:	683b      	ldr	r3, [r7, #0]
 80054ae:	68db      	ldr	r3, [r3, #12]
 80054b0:	2b0f      	cmp	r3, #15
 80054b2:	d905      	bls.n	80054c0 <HAL_TIM_ConfigClockSource+0x544>
 80054b4:	4a48      	ldr	r2, [pc, #288]	; (80055d8 <HAL_TIM_ConfigClockSource+0x65c>)
 80054b6:	4b40      	ldr	r3, [pc, #256]	; (80055b8 <HAL_TIM_ConfigClockSource+0x63c>)
 80054b8:	0011      	movs	r1, r2
 80054ba:	0018      	movs	r0, r3
 80054bc:	f7fb fa49 	bl	8000952 <assert_failed>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	6818      	ldr	r0, [r3, #0]
 80054c4:	683b      	ldr	r3, [r7, #0]
 80054c6:	6859      	ldr	r1, [r3, #4]
 80054c8:	683b      	ldr	r3, [r7, #0]
 80054ca:	68db      	ldr	r3, [r3, #12]
 80054cc:	001a      	movs	r2, r3
 80054ce:	f000 fc39 	bl	8005d44 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	2140      	movs	r1, #64	; 0x40
 80054d8:	0018      	movs	r0, r3
 80054da:	f000 fc9b 	bl	8005e14 <TIM_ITRx_SetConfig>
    break;
 80054de:	e0a5      	b.n	800562c <HAL_TIM_ConfigClockSource+0x6b0>
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	4a31      	ldr	r2, [pc, #196]	; (80055ac <HAL_TIM_ConfigClockSource+0x630>)
 80054e6:	4293      	cmp	r3, r2
 80054e8:	d015      	beq.n	8005516 <HAL_TIM_ConfigClockSource+0x59a>
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	681a      	ldr	r2, [r3, #0]
 80054ee:	2380      	movs	r3, #128	; 0x80
 80054f0:	05db      	lsls	r3, r3, #23
 80054f2:	429a      	cmp	r2, r3
 80054f4:	d00f      	beq.n	8005516 <HAL_TIM_ConfigClockSource+0x59a>
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	4a2d      	ldr	r2, [pc, #180]	; (80055b0 <HAL_TIM_ConfigClockSource+0x634>)
 80054fc:	4293      	cmp	r3, r2
 80054fe:	d00a      	beq.n	8005516 <HAL_TIM_ConfigClockSource+0x59a>
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	4a2b      	ldr	r2, [pc, #172]	; (80055b4 <HAL_TIM_ConfigClockSource+0x638>)
 8005506:	4293      	cmp	r3, r2
 8005508:	d005      	beq.n	8005516 <HAL_TIM_ConfigClockSource+0x59a>
 800550a:	4a34      	ldr	r2, [pc, #208]	; (80055dc <HAL_TIM_ConfigClockSource+0x660>)
 800550c:	4b2a      	ldr	r3, [pc, #168]	; (80055b8 <HAL_TIM_ConfigClockSource+0x63c>)
 800550e:	0011      	movs	r1, r2
 8005510:	0018      	movs	r0, r3
 8005512:	f7fb fa1e 	bl	8000952 <assert_failed>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR0);
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	2100      	movs	r1, #0
 800551c:	0018      	movs	r0, r3
 800551e:	f000 fc79 	bl	8005e14 <TIM_ITRx_SetConfig>
    break;
 8005522:	e083      	b.n	800562c <HAL_TIM_ConfigClockSource+0x6b0>
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	4a20      	ldr	r2, [pc, #128]	; (80055ac <HAL_TIM_ConfigClockSource+0x630>)
 800552a:	4293      	cmp	r3, r2
 800552c:	d015      	beq.n	800555a <HAL_TIM_ConfigClockSource+0x5de>
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	681a      	ldr	r2, [r3, #0]
 8005532:	2380      	movs	r3, #128	; 0x80
 8005534:	05db      	lsls	r3, r3, #23
 8005536:	429a      	cmp	r2, r3
 8005538:	d00f      	beq.n	800555a <HAL_TIM_ConfigClockSource+0x5de>
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	4a1c      	ldr	r2, [pc, #112]	; (80055b0 <HAL_TIM_ConfigClockSource+0x634>)
 8005540:	4293      	cmp	r3, r2
 8005542:	d00a      	beq.n	800555a <HAL_TIM_ConfigClockSource+0x5de>
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	4a1a      	ldr	r2, [pc, #104]	; (80055b4 <HAL_TIM_ConfigClockSource+0x638>)
 800554a:	4293      	cmp	r3, r2
 800554c:	d005      	beq.n	800555a <HAL_TIM_ConfigClockSource+0x5de>
 800554e:	4a24      	ldr	r2, [pc, #144]	; (80055e0 <HAL_TIM_ConfigClockSource+0x664>)
 8005550:	4b19      	ldr	r3, [pc, #100]	; (80055b8 <HAL_TIM_ConfigClockSource+0x63c>)
 8005552:	0011      	movs	r1, r2
 8005554:	0018      	movs	r0, r3
 8005556:	f7fb f9fc 	bl	8000952 <assert_failed>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR1);
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	2110      	movs	r1, #16
 8005560:	0018      	movs	r0, r3
 8005562:	f000 fc57 	bl	8005e14 <TIM_ITRx_SetConfig>
    break;
 8005566:	e061      	b.n	800562c <HAL_TIM_ConfigClockSource+0x6b0>
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	4a0f      	ldr	r2, [pc, #60]	; (80055ac <HAL_TIM_ConfigClockSource+0x630>)
 800556e:	4293      	cmp	r3, r2
 8005570:	d015      	beq.n	800559e <HAL_TIM_ConfigClockSource+0x622>
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	681a      	ldr	r2, [r3, #0]
 8005576:	2380      	movs	r3, #128	; 0x80
 8005578:	05db      	lsls	r3, r3, #23
 800557a:	429a      	cmp	r2, r3
 800557c:	d00f      	beq.n	800559e <HAL_TIM_ConfigClockSource+0x622>
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	4a0b      	ldr	r2, [pc, #44]	; (80055b0 <HAL_TIM_ConfigClockSource+0x634>)
 8005584:	4293      	cmp	r3, r2
 8005586:	d00a      	beq.n	800559e <HAL_TIM_ConfigClockSource+0x622>
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	4a09      	ldr	r2, [pc, #36]	; (80055b4 <HAL_TIM_ConfigClockSource+0x638>)
 800558e:	4293      	cmp	r3, r2
 8005590:	d005      	beq.n	800559e <HAL_TIM_ConfigClockSource+0x622>
 8005592:	4a14      	ldr	r2, [pc, #80]	; (80055e4 <HAL_TIM_ConfigClockSource+0x668>)
 8005594:	4b08      	ldr	r3, [pc, #32]	; (80055b8 <HAL_TIM_ConfigClockSource+0x63c>)
 8005596:	0011      	movs	r1, r2
 8005598:	0018      	movs	r0, r3
 800559a:	f7fb f9da 	bl	8000952 <assert_failed>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR2);
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	2120      	movs	r1, #32
 80055a4:	0018      	movs	r0, r3
 80055a6:	f000 fc35 	bl	8005e14 <TIM_ITRx_SetConfig>
    break;
 80055aa:	e03f      	b.n	800562c <HAL_TIM_ConfigClockSource+0x6b0>
 80055ac:	40012c00 	.word	0x40012c00
 80055b0:	40000400 	.word	0x40000400
 80055b4:	40014000 	.word	0x40014000
 80055b8:	08007158 	.word	0x08007158
 80055bc:	00001003 	.word	0x00001003
 80055c0:	00001004 	.word	0x00001004
 80055c4:	0000100f 	.word	0x0000100f
 80055c8:	00001012 	.word	0x00001012
 80055cc:	00001013 	.word	0x00001013
 80055d0:	0000101e 	.word	0x0000101e
 80055d4:	00001021 	.word	0x00001021
 80055d8:	00001022 	.word	0x00001022
 80055dc:	0000102d 	.word	0x0000102d
 80055e0:	00001035 	.word	0x00001035
 80055e4:	0000103d 	.word	0x0000103d
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	4a16      	ldr	r2, [pc, #88]	; (8005648 <HAL_TIM_ConfigClockSource+0x6cc>)
 80055ee:	4293      	cmp	r3, r2
 80055f0:	d015      	beq.n	800561e <HAL_TIM_ConfigClockSource+0x6a2>
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	681a      	ldr	r2, [r3, #0]
 80055f6:	2380      	movs	r3, #128	; 0x80
 80055f8:	05db      	lsls	r3, r3, #23
 80055fa:	429a      	cmp	r2, r3
 80055fc:	d00f      	beq.n	800561e <HAL_TIM_ConfigClockSource+0x6a2>
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	4a12      	ldr	r2, [pc, #72]	; (800564c <HAL_TIM_ConfigClockSource+0x6d0>)
 8005604:	4293      	cmp	r3, r2
 8005606:	d00a      	beq.n	800561e <HAL_TIM_ConfigClockSource+0x6a2>
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	4a10      	ldr	r2, [pc, #64]	; (8005650 <HAL_TIM_ConfigClockSource+0x6d4>)
 800560e:	4293      	cmp	r3, r2
 8005610:	d005      	beq.n	800561e <HAL_TIM_ConfigClockSource+0x6a2>
 8005612:	4a10      	ldr	r2, [pc, #64]	; (8005654 <HAL_TIM_ConfigClockSource+0x6d8>)
 8005614:	4b10      	ldr	r3, [pc, #64]	; (8005658 <HAL_TIM_ConfigClockSource+0x6dc>)
 8005616:	0011      	movs	r1, r2
 8005618:	0018      	movs	r0, r3
 800561a:	f7fb f99a 	bl	8000952 <assert_failed>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR3);
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	2130      	movs	r1, #48	; 0x30
 8005624:	0018      	movs	r0, r3
 8005626:	f000 fbf5 	bl	8005e14 <TIM_ITRx_SetConfig>
    break;
 800562a:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	223d      	movs	r2, #61	; 0x3d
 8005630:	2101      	movs	r1, #1
 8005632:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	223c      	movs	r2, #60	; 0x3c
 8005638:	2100      	movs	r1, #0
 800563a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800563c:	2300      	movs	r3, #0
}
 800563e:	0018      	movs	r0, r3
 8005640:	46bd      	mov	sp, r7
 8005642:	b004      	add	sp, #16
 8005644:	bd80      	pop	{r7, pc}
 8005646:	46c0      	nop			; (mov r8, r8)
 8005648:	40012c00 	.word	0x40012c00
 800564c:	40000400 	.word	0x40000400
 8005650:	40014000 	.word	0x40014000
 8005654:	00001045 	.word	0x00001045
 8005658:	08007158 	.word	0x08007158

0800565c <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non blocking mode 
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800565c:	b580      	push	{r7, lr}
 800565e:	b082      	sub	sp, #8
 8005660:	af00      	add	r7, sp, #0
 8005662:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the __HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */

}
 8005664:	46c0      	nop			; (mov r8, r8)
 8005666:	46bd      	mov	sp, r7
 8005668:	b002      	add	sp, #8
 800566a:	bd80      	pop	{r7, pc}

0800566c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non blocking mode 
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800566c:	b580      	push	{r7, lr}
 800566e:	b082      	sub	sp, #8
 8005670:	af00      	add	r7, sp, #0
 8005672:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the __HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005674:	46c0      	nop			; (mov r8, r8)
 8005676:	46bd      	mov	sp, r7
 8005678:	b002      	add	sp, #8
 800567a:	bd80      	pop	{r7, pc}

0800567c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non blocking mode 
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800567c:	b580      	push	{r7, lr}
 800567e:	b082      	sub	sp, #8
 8005680:	af00      	add	r7, sp, #0
 8005682:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the __HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005684:	46c0      	nop			; (mov r8, r8)
 8005686:	46bd      	mov	sp, r7
 8005688:	b002      	add	sp, #8
 800568a:	bd80      	pop	{r7, pc}

0800568c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non blocking mode 
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800568c:	b580      	push	{r7, lr}
 800568e:	b082      	sub	sp, #8
 8005690:	af00      	add	r7, sp, #0
 8005692:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the __HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005694:	46c0      	nop			; (mov r8, r8)
 8005696:	46bd      	mov	sp, r7
 8005698:	b002      	add	sp, #8
 800569a:	bd80      	pop	{r7, pc}

0800569c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non blocking mode 
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800569c:	b580      	push	{r7, lr}
 800569e:	b082      	sub	sp, #8
 80056a0:	af00      	add	r7, sp, #0
 80056a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80056a4:	46c0      	nop			; (mov r8, r8)
 80056a6:	46bd      	mov	sp, r7
 80056a8:	b002      	add	sp, #8
 80056aa:	bd80      	pop	{r7, pc}

080056ac <TIM_Base_SetConfig>:
  * @param  TIMx TIM periheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80056ac:	b580      	push	{r7, lr}
 80056ae:	b084      	sub	sp, #16
 80056b0:	af00      	add	r7, sp, #0
 80056b2:	6078      	str	r0, [r7, #4]
 80056b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1 = 0U;
 80056b6:	2300      	movs	r3, #0
 80056b8:	60fb      	str	r3, [r7, #12]
  tmpcr1 = TIMx->CR1;
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	4a34      	ldr	r2, [pc, #208]	; (8005794 <TIM_Base_SetConfig+0xe8>)
 80056c4:	4293      	cmp	r3, r2
 80056c6:	d008      	beq.n	80056da <TIM_Base_SetConfig+0x2e>
 80056c8:	687a      	ldr	r2, [r7, #4]
 80056ca:	2380      	movs	r3, #128	; 0x80
 80056cc:	05db      	lsls	r3, r3, #23
 80056ce:	429a      	cmp	r2, r3
 80056d0:	d003      	beq.n	80056da <TIM_Base_SetConfig+0x2e>
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	4a30      	ldr	r2, [pc, #192]	; (8005798 <TIM_Base_SetConfig+0xec>)
 80056d6:	4293      	cmp	r3, r2
 80056d8:	d108      	bne.n	80056ec <TIM_Base_SetConfig+0x40>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	2270      	movs	r2, #112	; 0x70
 80056de:	4393      	bics	r3, r2
 80056e0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80056e2:	683b      	ldr	r3, [r7, #0]
 80056e4:	685b      	ldr	r3, [r3, #4]
 80056e6:	68fa      	ldr	r2, [r7, #12]
 80056e8:	4313      	orrs	r3, r2
 80056ea:	60fb      	str	r3, [r7, #12]
  }

  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	4a29      	ldr	r2, [pc, #164]	; (8005794 <TIM_Base_SetConfig+0xe8>)
 80056f0:	4293      	cmp	r3, r2
 80056f2:	d018      	beq.n	8005726 <TIM_Base_SetConfig+0x7a>
 80056f4:	687a      	ldr	r2, [r7, #4]
 80056f6:	2380      	movs	r3, #128	; 0x80
 80056f8:	05db      	lsls	r3, r3, #23
 80056fa:	429a      	cmp	r2, r3
 80056fc:	d013      	beq.n	8005726 <TIM_Base_SetConfig+0x7a>
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	4a25      	ldr	r2, [pc, #148]	; (8005798 <TIM_Base_SetConfig+0xec>)
 8005702:	4293      	cmp	r3, r2
 8005704:	d00f      	beq.n	8005726 <TIM_Base_SetConfig+0x7a>
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	4a24      	ldr	r2, [pc, #144]	; (800579c <TIM_Base_SetConfig+0xf0>)
 800570a:	4293      	cmp	r3, r2
 800570c:	d00b      	beq.n	8005726 <TIM_Base_SetConfig+0x7a>
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	4a23      	ldr	r2, [pc, #140]	; (80057a0 <TIM_Base_SetConfig+0xf4>)
 8005712:	4293      	cmp	r3, r2
 8005714:	d007      	beq.n	8005726 <TIM_Base_SetConfig+0x7a>
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	4a22      	ldr	r2, [pc, #136]	; (80057a4 <TIM_Base_SetConfig+0xf8>)
 800571a:	4293      	cmp	r3, r2
 800571c:	d003      	beq.n	8005726 <TIM_Base_SetConfig+0x7a>
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	4a21      	ldr	r2, [pc, #132]	; (80057a8 <TIM_Base_SetConfig+0xfc>)
 8005722:	4293      	cmp	r3, r2
 8005724:	d108      	bne.n	8005738 <TIM_Base_SetConfig+0x8c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	4a20      	ldr	r2, [pc, #128]	; (80057ac <TIM_Base_SetConfig+0x100>)
 800572a:	4013      	ands	r3, r2
 800572c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800572e:	683b      	ldr	r3, [r7, #0]
 8005730:	68db      	ldr	r3, [r3, #12]
 8005732:	68fa      	ldr	r2, [r7, #12]
 8005734:	4313      	orrs	r3, r2
 8005736:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	2280      	movs	r2, #128	; 0x80
 800573c:	4393      	bics	r3, r2
 800573e:	001a      	movs	r2, r3
 8005740:	683b      	ldr	r3, [r7, #0]
 8005742:	695b      	ldr	r3, [r3, #20]
 8005744:	4313      	orrs	r3, r2
 8005746:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	68fa      	ldr	r2, [r7, #12]
 800574c:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800574e:	683b      	ldr	r3, [r7, #0]
 8005750:	689a      	ldr	r2, [r3, #8]
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8005756:	683b      	ldr	r3, [r7, #0]
 8005758:	681a      	ldr	r2, [r3, #0]
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	4a0c      	ldr	r2, [pc, #48]	; (8005794 <TIM_Base_SetConfig+0xe8>)
 8005762:	4293      	cmp	r3, r2
 8005764:	d00b      	beq.n	800577e <TIM_Base_SetConfig+0xd2>
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	4a0d      	ldr	r2, [pc, #52]	; (80057a0 <TIM_Base_SetConfig+0xf4>)
 800576a:	4293      	cmp	r3, r2
 800576c:	d007      	beq.n	800577e <TIM_Base_SetConfig+0xd2>
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	4a0c      	ldr	r2, [pc, #48]	; (80057a4 <TIM_Base_SetConfig+0xf8>)
 8005772:	4293      	cmp	r3, r2
 8005774:	d003      	beq.n	800577e <TIM_Base_SetConfig+0xd2>
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	4a0b      	ldr	r2, [pc, #44]	; (80057a8 <TIM_Base_SetConfig+0xfc>)
 800577a:	4293      	cmp	r3, r2
 800577c:	d103      	bne.n	8005786 <TIM_Base_SetConfig+0xda>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800577e:	683b      	ldr	r3, [r7, #0]
 8005780:	691a      	ldr	r2, [r3, #16]
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediatly */
  TIMx->EGR = TIM_EGR_UG;
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	2201      	movs	r2, #1
 800578a:	615a      	str	r2, [r3, #20]
}
 800578c:	46c0      	nop			; (mov r8, r8)
 800578e:	46bd      	mov	sp, r7
 8005790:	b004      	add	sp, #16
 8005792:	bd80      	pop	{r7, pc}
 8005794:	40012c00 	.word	0x40012c00
 8005798:	40000400 	.word	0x40000400
 800579c:	40002000 	.word	0x40002000
 80057a0:	40014000 	.word	0x40014000
 80057a4:	40014400 	.word	0x40014400
 80057a8:	40014800 	.word	0x40014800
 80057ac:	fffffcff 	.word	0xfffffcff

080057b0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80057b0:	b580      	push	{r7, lr}
 80057b2:	b086      	sub	sp, #24
 80057b4:	af00      	add	r7, sp, #0
 80057b6:	6078      	str	r0, [r7, #4]
 80057b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx = 0U;
 80057ba:	2300      	movs	r3, #0
 80057bc:	60fb      	str	r3, [r7, #12]
  uint32_t tmpccer = 0U;
 80057be:	2300      	movs	r3, #0
 80057c0:	617b      	str	r3, [r7, #20]
  uint32_t tmpcr2 = 0U;
 80057c2:	2300      	movs	r3, #0
 80057c4:	613b      	str	r3, [r7, #16]

   /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	6a1b      	ldr	r3, [r3, #32]
 80057ca:	2201      	movs	r2, #1
 80057cc:	4393      	bics	r3, r2
 80057ce:	001a      	movs	r2, r3
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	6a1b      	ldr	r3, [r3, #32]
 80057d8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	685b      	ldr	r3, [r3, #4]
 80057de:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	699b      	ldr	r3, [r3, #24]
 80057e4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	2270      	movs	r2, #112	; 0x70
 80057ea:	4393      	bics	r3, r2
 80057ec:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	2203      	movs	r2, #3
 80057f2:	4393      	bics	r3, r2
 80057f4:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80057f6:	683b      	ldr	r3, [r7, #0]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	68fa      	ldr	r2, [r7, #12]
 80057fc:	4313      	orrs	r3, r2
 80057fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005800:	697b      	ldr	r3, [r7, #20]
 8005802:	2202      	movs	r2, #2
 8005804:	4393      	bics	r3, r2
 8005806:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005808:	683b      	ldr	r3, [r7, #0]
 800580a:	689b      	ldr	r3, [r3, #8]
 800580c:	697a      	ldr	r2, [r7, #20]
 800580e:	4313      	orrs	r3, r2
 8005810:	617b      	str	r3, [r7, #20]

  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	4a3e      	ldr	r2, [pc, #248]	; (8005910 <TIM_OC1_SetConfig+0x160>)
 8005816:	4293      	cmp	r3, r2
 8005818:	d00b      	beq.n	8005832 <TIM_OC1_SetConfig+0x82>
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	4a3d      	ldr	r2, [pc, #244]	; (8005914 <TIM_OC1_SetConfig+0x164>)
 800581e:	4293      	cmp	r3, r2
 8005820:	d007      	beq.n	8005832 <TIM_OC1_SetConfig+0x82>
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	4a3c      	ldr	r2, [pc, #240]	; (8005918 <TIM_OC1_SetConfig+0x168>)
 8005826:	4293      	cmp	r3, r2
 8005828:	d003      	beq.n	8005832 <TIM_OC1_SetConfig+0x82>
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	4a3b      	ldr	r2, [pc, #236]	; (800591c <TIM_OC1_SetConfig+0x16c>)
 800582e:	4293      	cmp	r3, r2
 8005830:	d11a      	bne.n	8005868 <TIM_OC1_SetConfig+0xb8>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 8005832:	683b      	ldr	r3, [r7, #0]
 8005834:	68db      	ldr	r3, [r3, #12]
 8005836:	2b00      	cmp	r3, #0
 8005838:	d009      	beq.n	800584e <TIM_OC1_SetConfig+0x9e>
 800583a:	683b      	ldr	r3, [r7, #0]
 800583c:	68db      	ldr	r3, [r3, #12]
 800583e:	2b08      	cmp	r3, #8
 8005840:	d005      	beq.n	800584e <TIM_OC1_SetConfig+0x9e>
 8005842:	4a37      	ldr	r2, [pc, #220]	; (8005920 <TIM_OC1_SetConfig+0x170>)
 8005844:	4b37      	ldr	r3, [pc, #220]	; (8005924 <TIM_OC1_SetConfig+0x174>)
 8005846:	0011      	movs	r1, r2
 8005848:	0018      	movs	r0, r3
 800584a:	f7fb f882 	bl	8000952 <assert_failed>

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800584e:	697b      	ldr	r3, [r7, #20]
 8005850:	2208      	movs	r2, #8
 8005852:	4393      	bics	r3, r2
 8005854:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005856:	683b      	ldr	r3, [r7, #0]
 8005858:	68db      	ldr	r3, [r3, #12]
 800585a:	697a      	ldr	r2, [r7, #20]
 800585c:	4313      	orrs	r3, r2
 800585e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005860:	697b      	ldr	r3, [r7, #20]
 8005862:	2204      	movs	r2, #4
 8005864:	4393      	bics	r3, r2
 8005866:	617b      	str	r3, [r7, #20]
  }

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	4a29      	ldr	r2, [pc, #164]	; (8005910 <TIM_OC1_SetConfig+0x160>)
 800586c:	4293      	cmp	r3, r2
 800586e:	d00b      	beq.n	8005888 <TIM_OC1_SetConfig+0xd8>
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	4a28      	ldr	r2, [pc, #160]	; (8005914 <TIM_OC1_SetConfig+0x164>)
 8005874:	4293      	cmp	r3, r2
 8005876:	d007      	beq.n	8005888 <TIM_OC1_SetConfig+0xd8>
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	4a27      	ldr	r2, [pc, #156]	; (8005918 <TIM_OC1_SetConfig+0x168>)
 800587c:	4293      	cmp	r3, r2
 800587e:	d003      	beq.n	8005888 <TIM_OC1_SetConfig+0xd8>
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	4a26      	ldr	r2, [pc, #152]	; (800591c <TIM_OC1_SetConfig+0x16c>)
 8005884:	4293      	cmp	r3, r2
 8005886:	d131      	bne.n	80058ec <TIM_OC1_SetConfig+0x13c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 8005888:	683b      	ldr	r3, [r7, #0]
 800588a:	699a      	ldr	r2, [r3, #24]
 800588c:	2380      	movs	r3, #128	; 0x80
 800588e:	009b      	lsls	r3, r3, #2
 8005890:	429a      	cmp	r2, r3
 8005892:	d009      	beq.n	80058a8 <TIM_OC1_SetConfig+0xf8>
 8005894:	683b      	ldr	r3, [r7, #0]
 8005896:	699b      	ldr	r3, [r3, #24]
 8005898:	2b00      	cmp	r3, #0
 800589a:	d005      	beq.n	80058a8 <TIM_OC1_SetConfig+0xf8>
 800589c:	4a22      	ldr	r2, [pc, #136]	; (8005928 <TIM_OC1_SetConfig+0x178>)
 800589e:	4b21      	ldr	r3, [pc, #132]	; (8005924 <TIM_OC1_SetConfig+0x174>)
 80058a0:	0011      	movs	r1, r2
 80058a2:	0018      	movs	r0, r3
 80058a4:	f7fb f855 	bl	8000952 <assert_failed>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 80058a8:	683b      	ldr	r3, [r7, #0]
 80058aa:	695a      	ldr	r2, [r3, #20]
 80058ac:	2380      	movs	r3, #128	; 0x80
 80058ae:	005b      	lsls	r3, r3, #1
 80058b0:	429a      	cmp	r2, r3
 80058b2:	d009      	beq.n	80058c8 <TIM_OC1_SetConfig+0x118>
 80058b4:	683b      	ldr	r3, [r7, #0]
 80058b6:	695b      	ldr	r3, [r3, #20]
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	d005      	beq.n	80058c8 <TIM_OC1_SetConfig+0x118>
 80058bc:	4a1b      	ldr	r2, [pc, #108]	; (800592c <TIM_OC1_SetConfig+0x17c>)
 80058be:	4b19      	ldr	r3, [pc, #100]	; (8005924 <TIM_OC1_SetConfig+0x174>)
 80058c0:	0011      	movs	r1, r2
 80058c2:	0018      	movs	r0, r3
 80058c4:	f7fb f845 	bl	8000952 <assert_failed>

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80058c8:	693b      	ldr	r3, [r7, #16]
 80058ca:	4a19      	ldr	r2, [pc, #100]	; (8005930 <TIM_OC1_SetConfig+0x180>)
 80058cc:	4013      	ands	r3, r2
 80058ce:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80058d0:	693b      	ldr	r3, [r7, #16]
 80058d2:	4a18      	ldr	r2, [pc, #96]	; (8005934 <TIM_OC1_SetConfig+0x184>)
 80058d4:	4013      	ands	r3, r2
 80058d6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80058d8:	683b      	ldr	r3, [r7, #0]
 80058da:	695b      	ldr	r3, [r3, #20]
 80058dc:	693a      	ldr	r2, [r7, #16]
 80058de:	4313      	orrs	r3, r2
 80058e0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80058e2:	683b      	ldr	r3, [r7, #0]
 80058e4:	699b      	ldr	r3, [r3, #24]
 80058e6:	693a      	ldr	r2, [r7, #16]
 80058e8:	4313      	orrs	r3, r2
 80058ea:	613b      	str	r3, [r7, #16]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	693a      	ldr	r2, [r7, #16]
 80058f0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	68fa      	ldr	r2, [r7, #12]
 80058f6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80058f8:	683b      	ldr	r3, [r7, #0]
 80058fa:	685a      	ldr	r2, [r3, #4]
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	697a      	ldr	r2, [r7, #20]
 8005904:	621a      	str	r2, [r3, #32]
}
 8005906:	46c0      	nop			; (mov r8, r8)
 8005908:	46bd      	mov	sp, r7
 800590a:	b006      	add	sp, #24
 800590c:	bd80      	pop	{r7, pc}
 800590e:	46c0      	nop			; (mov r8, r8)
 8005910:	40012c00 	.word	0x40012c00
 8005914:	40014000 	.word	0x40014000
 8005918:	40014400 	.word	0x40014400
 800591c:	40014800 	.word	0x40014800
 8005920:	00001290 	.word	0x00001290
 8005924:	08007158 	.word	0x08007158
 8005928:	0000129d 	.word	0x0000129d
 800592c:	0000129e 	.word	0x0000129e
 8005930:	fffffeff 	.word	0xfffffeff
 8005934:	fffffdff 	.word	0xfffffdff

08005938 <TIM_OC2_SetConfig>:
  * @param  TIMx  to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005938:	b580      	push	{r7, lr}
 800593a:	b086      	sub	sp, #24
 800593c:	af00      	add	r7, sp, #0
 800593e:	6078      	str	r0, [r7, #4]
 8005940:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx = 0U;
 8005942:	2300      	movs	r3, #0
 8005944:	60fb      	str	r3, [r7, #12]
  uint32_t tmpccer = 0U;
 8005946:	2300      	movs	r3, #0
 8005948:	617b      	str	r3, [r7, #20]
  uint32_t tmpcr2 = 0U;
 800594a:	2300      	movs	r3, #0
 800594c:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	6a1b      	ldr	r3, [r3, #32]
 8005952:	2210      	movs	r2, #16
 8005954:	4393      	bics	r3, r2
 8005956:	001a      	movs	r2, r3
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	6a1b      	ldr	r3, [r3, #32]
 8005960:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	685b      	ldr	r3, [r3, #4]
 8005966:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	699b      	ldr	r3, [r3, #24]
 800596c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	4a45      	ldr	r2, [pc, #276]	; (8005a88 <TIM_OC2_SetConfig+0x150>)
 8005972:	4013      	ands	r3, r2
 8005974:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	4a44      	ldr	r2, [pc, #272]	; (8005a8c <TIM_OC2_SetConfig+0x154>)
 800597a:	4013      	ands	r3, r2
 800597c:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800597e:	683b      	ldr	r3, [r7, #0]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	021b      	lsls	r3, r3, #8
 8005984:	68fa      	ldr	r2, [r7, #12]
 8005986:	4313      	orrs	r3, r2
 8005988:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800598a:	697b      	ldr	r3, [r7, #20]
 800598c:	2220      	movs	r2, #32
 800598e:	4393      	bics	r3, r2
 8005990:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005992:	683b      	ldr	r3, [r7, #0]
 8005994:	689b      	ldr	r3, [r3, #8]
 8005996:	011b      	lsls	r3, r3, #4
 8005998:	697a      	ldr	r2, [r7, #20]
 800599a:	4313      	orrs	r3, r2
 800599c:	617b      	str	r3, [r7, #20]

  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	4a3b      	ldr	r2, [pc, #236]	; (8005a90 <TIM_OC2_SetConfig+0x158>)
 80059a2:	4293      	cmp	r3, r2
 80059a4:	d11b      	bne.n	80059de <TIM_OC2_SetConfig+0xa6>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 80059a6:	683b      	ldr	r3, [r7, #0]
 80059a8:	68db      	ldr	r3, [r3, #12]
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	d009      	beq.n	80059c2 <TIM_OC2_SetConfig+0x8a>
 80059ae:	683b      	ldr	r3, [r7, #0]
 80059b0:	68db      	ldr	r3, [r3, #12]
 80059b2:	2b08      	cmp	r3, #8
 80059b4:	d005      	beq.n	80059c2 <TIM_OC2_SetConfig+0x8a>
 80059b6:	4a37      	ldr	r2, [pc, #220]	; (8005a94 <TIM_OC2_SetConfig+0x15c>)
 80059b8:	4b37      	ldr	r3, [pc, #220]	; (8005a98 <TIM_OC2_SetConfig+0x160>)
 80059ba:	0011      	movs	r1, r2
 80059bc:	0018      	movs	r0, r3
 80059be:	f7fa ffc8 	bl	8000952 <assert_failed>

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80059c2:	697b      	ldr	r3, [r7, #20]
 80059c4:	2280      	movs	r2, #128	; 0x80
 80059c6:	4393      	bics	r3, r2
 80059c8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80059ca:	683b      	ldr	r3, [r7, #0]
 80059cc:	68db      	ldr	r3, [r3, #12]
 80059ce:	011b      	lsls	r3, r3, #4
 80059d0:	697a      	ldr	r2, [r7, #20]
 80059d2:	4313      	orrs	r3, r2
 80059d4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80059d6:	697b      	ldr	r3, [r7, #20]
 80059d8:	2240      	movs	r2, #64	; 0x40
 80059da:	4393      	bics	r3, r2
 80059dc:	617b      	str	r3, [r7, #20]

  }

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	4a2b      	ldr	r2, [pc, #172]	; (8005a90 <TIM_OC2_SetConfig+0x158>)
 80059e2:	4293      	cmp	r3, r2
 80059e4:	d00b      	beq.n	80059fe <TIM_OC2_SetConfig+0xc6>
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	4a2c      	ldr	r2, [pc, #176]	; (8005a9c <TIM_OC2_SetConfig+0x164>)
 80059ea:	4293      	cmp	r3, r2
 80059ec:	d007      	beq.n	80059fe <TIM_OC2_SetConfig+0xc6>
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	4a2b      	ldr	r2, [pc, #172]	; (8005aa0 <TIM_OC2_SetConfig+0x168>)
 80059f2:	4293      	cmp	r3, r2
 80059f4:	d003      	beq.n	80059fe <TIM_OC2_SetConfig+0xc6>
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	4a2a      	ldr	r2, [pc, #168]	; (8005aa4 <TIM_OC2_SetConfig+0x16c>)
 80059fa:	4293      	cmp	r3, r2
 80059fc:	d133      	bne.n	8005a66 <TIM_OC2_SetConfig+0x12e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 80059fe:	683b      	ldr	r3, [r7, #0]
 8005a00:	699a      	ldr	r2, [r3, #24]
 8005a02:	2380      	movs	r3, #128	; 0x80
 8005a04:	009b      	lsls	r3, r3, #2
 8005a06:	429a      	cmp	r2, r3
 8005a08:	d009      	beq.n	8005a1e <TIM_OC2_SetConfig+0xe6>
 8005a0a:	683b      	ldr	r3, [r7, #0]
 8005a0c:	699b      	ldr	r3, [r3, #24]
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d005      	beq.n	8005a1e <TIM_OC2_SetConfig+0xe6>
 8005a12:	4a25      	ldr	r2, [pc, #148]	; (8005aa8 <TIM_OC2_SetConfig+0x170>)
 8005a14:	4b20      	ldr	r3, [pc, #128]	; (8005a98 <TIM_OC2_SetConfig+0x160>)
 8005a16:	0011      	movs	r1, r2
 8005a18:	0018      	movs	r0, r3
 8005a1a:	f7fa ff9a 	bl	8000952 <assert_failed>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 8005a1e:	683b      	ldr	r3, [r7, #0]
 8005a20:	695a      	ldr	r2, [r3, #20]
 8005a22:	2380      	movs	r3, #128	; 0x80
 8005a24:	005b      	lsls	r3, r3, #1
 8005a26:	429a      	cmp	r2, r3
 8005a28:	d009      	beq.n	8005a3e <TIM_OC2_SetConfig+0x106>
 8005a2a:	683b      	ldr	r3, [r7, #0]
 8005a2c:	695b      	ldr	r3, [r3, #20]
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d005      	beq.n	8005a3e <TIM_OC2_SetConfig+0x106>
 8005a32:	4a1e      	ldr	r2, [pc, #120]	; (8005aac <TIM_OC2_SetConfig+0x174>)
 8005a34:	4b18      	ldr	r3, [pc, #96]	; (8005a98 <TIM_OC2_SetConfig+0x160>)
 8005a36:	0011      	movs	r1, r2
 8005a38:	0018      	movs	r0, r3
 8005a3a:	f7fa ff8a 	bl	8000952 <assert_failed>

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005a3e:	693b      	ldr	r3, [r7, #16]
 8005a40:	4a1b      	ldr	r2, [pc, #108]	; (8005ab0 <TIM_OC2_SetConfig+0x178>)
 8005a42:	4013      	ands	r3, r2
 8005a44:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005a46:	693b      	ldr	r3, [r7, #16]
 8005a48:	4a1a      	ldr	r2, [pc, #104]	; (8005ab4 <TIM_OC2_SetConfig+0x17c>)
 8005a4a:	4013      	ands	r3, r2
 8005a4c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005a4e:	683b      	ldr	r3, [r7, #0]
 8005a50:	695b      	ldr	r3, [r3, #20]
 8005a52:	009b      	lsls	r3, r3, #2
 8005a54:	693a      	ldr	r2, [r7, #16]
 8005a56:	4313      	orrs	r3, r2
 8005a58:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005a5a:	683b      	ldr	r3, [r7, #0]
 8005a5c:	699b      	ldr	r3, [r3, #24]
 8005a5e:	009b      	lsls	r3, r3, #2
 8005a60:	693a      	ldr	r2, [r7, #16]
 8005a62:	4313      	orrs	r3, r2
 8005a64:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	693a      	ldr	r2, [r7, #16]
 8005a6a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	68fa      	ldr	r2, [r7, #12]
 8005a70:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005a72:	683b      	ldr	r3, [r7, #0]
 8005a74:	685a      	ldr	r2, [r3, #4]
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	697a      	ldr	r2, [r7, #20]
 8005a7e:	621a      	str	r2, [r3, #32]
}
 8005a80:	46c0      	nop			; (mov r8, r8)
 8005a82:	46bd      	mov	sp, r7
 8005a84:	b006      	add	sp, #24
 8005a86:	bd80      	pop	{r7, pc}
 8005a88:	ffff8fff 	.word	0xffff8fff
 8005a8c:	fffffcff 	.word	0xfffffcff
 8005a90:	40012c00 	.word	0x40012c00
 8005a94:	000012da 	.word	0x000012da
 8005a98:	08007158 	.word	0x08007158
 8005a9c:	40014000 	.word	0x40014000
 8005aa0:	40014400 	.word	0x40014400
 8005aa4:	40014800 	.word	0x40014800
 8005aa8:	000012e8 	.word	0x000012e8
 8005aac:	000012e9 	.word	0x000012e9
 8005ab0:	fffffbff 	.word	0xfffffbff
 8005ab4:	fffff7ff 	.word	0xfffff7ff

08005ab8 <TIM_OC3_SetConfig>:
  * @param  TIMx  to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005ab8:	b580      	push	{r7, lr}
 8005aba:	b086      	sub	sp, #24
 8005abc:	af00      	add	r7, sp, #0
 8005abe:	6078      	str	r0, [r7, #4]
 8005ac0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx = 0U;
 8005ac2:	2300      	movs	r3, #0
 8005ac4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpccer = 0U;
 8005ac6:	2300      	movs	r3, #0
 8005ac8:	617b      	str	r3, [r7, #20]
  uint32_t tmpcr2 = 0U;
 8005aca:	2300      	movs	r3, #0
 8005acc:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	6a1b      	ldr	r3, [r3, #32]
 8005ad2:	4a4c      	ldr	r2, [pc, #304]	; (8005c04 <TIM_OC3_SetConfig+0x14c>)
 8005ad4:	401a      	ands	r2, r3
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	6a1b      	ldr	r3, [r3, #32]
 8005ade:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	685b      	ldr	r3, [r3, #4]
 8005ae4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	69db      	ldr	r3, [r3, #28]
 8005aea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	2270      	movs	r2, #112	; 0x70
 8005af0:	4393      	bics	r3, r2
 8005af2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	2203      	movs	r2, #3
 8005af8:	4393      	bics	r3, r2
 8005afa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005afc:	683b      	ldr	r3, [r7, #0]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	68fa      	ldr	r2, [r7, #12]
 8005b02:	4313      	orrs	r3, r2
 8005b04:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005b06:	697b      	ldr	r3, [r7, #20]
 8005b08:	4a3f      	ldr	r2, [pc, #252]	; (8005c08 <TIM_OC3_SetConfig+0x150>)
 8005b0a:	4013      	ands	r3, r2
 8005b0c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005b0e:	683b      	ldr	r3, [r7, #0]
 8005b10:	689b      	ldr	r3, [r3, #8]
 8005b12:	021b      	lsls	r3, r3, #8
 8005b14:	697a      	ldr	r2, [r7, #20]
 8005b16:	4313      	orrs	r3, r2
 8005b18:	617b      	str	r3, [r7, #20]

  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	4a3b      	ldr	r2, [pc, #236]	; (8005c0c <TIM_OC3_SetConfig+0x154>)
 8005b1e:	4293      	cmp	r3, r2
 8005b20:	d11b      	bne.n	8005b5a <TIM_OC3_SetConfig+0xa2>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 8005b22:	683b      	ldr	r3, [r7, #0]
 8005b24:	68db      	ldr	r3, [r3, #12]
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d009      	beq.n	8005b3e <TIM_OC3_SetConfig+0x86>
 8005b2a:	683b      	ldr	r3, [r7, #0]
 8005b2c:	68db      	ldr	r3, [r3, #12]
 8005b2e:	2b08      	cmp	r3, #8
 8005b30:	d005      	beq.n	8005b3e <TIM_OC3_SetConfig+0x86>
 8005b32:	4a37      	ldr	r2, [pc, #220]	; (8005c10 <TIM_OC3_SetConfig+0x158>)
 8005b34:	4b37      	ldr	r3, [pc, #220]	; (8005c14 <TIM_OC3_SetConfig+0x15c>)
 8005b36:	0011      	movs	r1, r2
 8005b38:	0018      	movs	r0, r3
 8005b3a:	f7fa ff0a 	bl	8000952 <assert_failed>

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005b3e:	697b      	ldr	r3, [r7, #20]
 8005b40:	4a35      	ldr	r2, [pc, #212]	; (8005c18 <TIM_OC3_SetConfig+0x160>)
 8005b42:	4013      	ands	r3, r2
 8005b44:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005b46:	683b      	ldr	r3, [r7, #0]
 8005b48:	68db      	ldr	r3, [r3, #12]
 8005b4a:	021b      	lsls	r3, r3, #8
 8005b4c:	697a      	ldr	r2, [r7, #20]
 8005b4e:	4313      	orrs	r3, r2
 8005b50:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005b52:	697b      	ldr	r3, [r7, #20]
 8005b54:	4a31      	ldr	r2, [pc, #196]	; (8005c1c <TIM_OC3_SetConfig+0x164>)
 8005b56:	4013      	ands	r3, r2
 8005b58:	617b      	str	r3, [r7, #20]
  }

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	4a2b      	ldr	r2, [pc, #172]	; (8005c0c <TIM_OC3_SetConfig+0x154>)
 8005b5e:	4293      	cmp	r3, r2
 8005b60:	d00b      	beq.n	8005b7a <TIM_OC3_SetConfig+0xc2>
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	4a2e      	ldr	r2, [pc, #184]	; (8005c20 <TIM_OC3_SetConfig+0x168>)
 8005b66:	4293      	cmp	r3, r2
 8005b68:	d007      	beq.n	8005b7a <TIM_OC3_SetConfig+0xc2>
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	4a2d      	ldr	r2, [pc, #180]	; (8005c24 <TIM_OC3_SetConfig+0x16c>)
 8005b6e:	4293      	cmp	r3, r2
 8005b70:	d003      	beq.n	8005b7a <TIM_OC3_SetConfig+0xc2>
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	4a2c      	ldr	r2, [pc, #176]	; (8005c28 <TIM_OC3_SetConfig+0x170>)
 8005b76:	4293      	cmp	r3, r2
 8005b78:	d133      	bne.n	8005be2 <TIM_OC3_SetConfig+0x12a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 8005b7a:	683b      	ldr	r3, [r7, #0]
 8005b7c:	699a      	ldr	r2, [r3, #24]
 8005b7e:	2380      	movs	r3, #128	; 0x80
 8005b80:	009b      	lsls	r3, r3, #2
 8005b82:	429a      	cmp	r2, r3
 8005b84:	d009      	beq.n	8005b9a <TIM_OC3_SetConfig+0xe2>
 8005b86:	683b      	ldr	r3, [r7, #0]
 8005b88:	699b      	ldr	r3, [r3, #24]
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d005      	beq.n	8005b9a <TIM_OC3_SetConfig+0xe2>
 8005b8e:	4a27      	ldr	r2, [pc, #156]	; (8005c2c <TIM_OC3_SetConfig+0x174>)
 8005b90:	4b20      	ldr	r3, [pc, #128]	; (8005c14 <TIM_OC3_SetConfig+0x15c>)
 8005b92:	0011      	movs	r1, r2
 8005b94:	0018      	movs	r0, r3
 8005b96:	f7fa fedc 	bl	8000952 <assert_failed>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 8005b9a:	683b      	ldr	r3, [r7, #0]
 8005b9c:	695a      	ldr	r2, [r3, #20]
 8005b9e:	2380      	movs	r3, #128	; 0x80
 8005ba0:	005b      	lsls	r3, r3, #1
 8005ba2:	429a      	cmp	r2, r3
 8005ba4:	d009      	beq.n	8005bba <TIM_OC3_SetConfig+0x102>
 8005ba6:	683b      	ldr	r3, [r7, #0]
 8005ba8:	695b      	ldr	r3, [r3, #20]
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	d005      	beq.n	8005bba <TIM_OC3_SetConfig+0x102>
 8005bae:	4a20      	ldr	r2, [pc, #128]	; (8005c30 <TIM_OC3_SetConfig+0x178>)
 8005bb0:	4b18      	ldr	r3, [pc, #96]	; (8005c14 <TIM_OC3_SetConfig+0x15c>)
 8005bb2:	0011      	movs	r1, r2
 8005bb4:	0018      	movs	r0, r3
 8005bb6:	f7fa fecc 	bl	8000952 <assert_failed>

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005bba:	693b      	ldr	r3, [r7, #16]
 8005bbc:	4a1d      	ldr	r2, [pc, #116]	; (8005c34 <TIM_OC3_SetConfig+0x17c>)
 8005bbe:	4013      	ands	r3, r2
 8005bc0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005bc2:	693b      	ldr	r3, [r7, #16]
 8005bc4:	4a1c      	ldr	r2, [pc, #112]	; (8005c38 <TIM_OC3_SetConfig+0x180>)
 8005bc6:	4013      	ands	r3, r2
 8005bc8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005bca:	683b      	ldr	r3, [r7, #0]
 8005bcc:	695b      	ldr	r3, [r3, #20]
 8005bce:	011b      	lsls	r3, r3, #4
 8005bd0:	693a      	ldr	r2, [r7, #16]
 8005bd2:	4313      	orrs	r3, r2
 8005bd4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005bd6:	683b      	ldr	r3, [r7, #0]
 8005bd8:	699b      	ldr	r3, [r3, #24]
 8005bda:	011b      	lsls	r3, r3, #4
 8005bdc:	693a      	ldr	r2, [r7, #16]
 8005bde:	4313      	orrs	r3, r2
 8005be0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	693a      	ldr	r2, [r7, #16]
 8005be6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	68fa      	ldr	r2, [r7, #12]
 8005bec:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005bee:	683b      	ldr	r3, [r7, #0]
 8005bf0:	685a      	ldr	r2, [r3, #4]
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	697a      	ldr	r2, [r7, #20]
 8005bfa:	621a      	str	r2, [r3, #32]
}
 8005bfc:	46c0      	nop			; (mov r8, r8)
 8005bfe:	46bd      	mov	sp, r7
 8005c00:	b006      	add	sp, #24
 8005c02:	bd80      	pop	{r7, pc}
 8005c04:	fffffeff 	.word	0xfffffeff
 8005c08:	fffffdff 	.word	0xfffffdff
 8005c0c:	40012c00 	.word	0x40012c00
 8005c10:	00001325 	.word	0x00001325
 8005c14:	08007158 	.word	0x08007158
 8005c18:	fffff7ff 	.word	0xfffff7ff
 8005c1c:	fffffbff 	.word	0xfffffbff
 8005c20:	40014000 	.word	0x40014000
 8005c24:	40014400 	.word	0x40014400
 8005c28:	40014800 	.word	0x40014800
 8005c2c:	00001332 	.word	0x00001332
 8005c30:	00001333 	.word	0x00001333
 8005c34:	ffffefff 	.word	0xffffefff
 8005c38:	ffffdfff 	.word	0xffffdfff

08005c3c <TIM_OC4_SetConfig>:
  * @param  TIMx  to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005c3c:	b580      	push	{r7, lr}
 8005c3e:	b086      	sub	sp, #24
 8005c40:	af00      	add	r7, sp, #0
 8005c42:	6078      	str	r0, [r7, #4]
 8005c44:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx = 0U;
 8005c46:	2300      	movs	r3, #0
 8005c48:	613b      	str	r3, [r7, #16]
  uint32_t tmpccer = 0U;
 8005c4a:	2300      	movs	r3, #0
 8005c4c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpcr2 = 0U;
 8005c4e:	2300      	movs	r3, #0
 8005c50:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	6a1b      	ldr	r3, [r3, #32]
 8005c56:	4a30      	ldr	r2, [pc, #192]	; (8005d18 <TIM_OC4_SetConfig+0xdc>)
 8005c58:	401a      	ands	r2, r3
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	6a1b      	ldr	r3, [r3, #32]
 8005c62:	60fb      	str	r3, [r7, #12]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	685b      	ldr	r3, [r3, #4]
 8005c68:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	69db      	ldr	r3, [r3, #28]
 8005c6e:	613b      	str	r3, [r7, #16]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005c70:	693b      	ldr	r3, [r7, #16]
 8005c72:	4a2a      	ldr	r2, [pc, #168]	; (8005d1c <TIM_OC4_SetConfig+0xe0>)
 8005c74:	4013      	ands	r3, r2
 8005c76:	613b      	str	r3, [r7, #16]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005c78:	693b      	ldr	r3, [r7, #16]
 8005c7a:	4a29      	ldr	r2, [pc, #164]	; (8005d20 <TIM_OC4_SetConfig+0xe4>)
 8005c7c:	4013      	ands	r3, r2
 8005c7e:	613b      	str	r3, [r7, #16]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005c80:	683b      	ldr	r3, [r7, #0]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	021b      	lsls	r3, r3, #8
 8005c86:	693a      	ldr	r2, [r7, #16]
 8005c88:	4313      	orrs	r3, r2
 8005c8a:	613b      	str	r3, [r7, #16]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	4a25      	ldr	r2, [pc, #148]	; (8005d24 <TIM_OC4_SetConfig+0xe8>)
 8005c90:	4013      	ands	r3, r2
 8005c92:	60fb      	str	r3, [r7, #12]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005c94:	683b      	ldr	r3, [r7, #0]
 8005c96:	689b      	ldr	r3, [r3, #8]
 8005c98:	031b      	lsls	r3, r3, #12
 8005c9a:	68fa      	ldr	r2, [r7, #12]
 8005c9c:	4313      	orrs	r3, r2
 8005c9e:	60fb      	str	r3, [r7, #12]

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	4a21      	ldr	r2, [pc, #132]	; (8005d28 <TIM_OC4_SetConfig+0xec>)
 8005ca4:	4293      	cmp	r3, r2
 8005ca6:	d00b      	beq.n	8005cc0 <TIM_OC4_SetConfig+0x84>
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	4a20      	ldr	r2, [pc, #128]	; (8005d2c <TIM_OC4_SetConfig+0xf0>)
 8005cac:	4293      	cmp	r3, r2
 8005cae:	d007      	beq.n	8005cc0 <TIM_OC4_SetConfig+0x84>
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	4a1f      	ldr	r2, [pc, #124]	; (8005d30 <TIM_OC4_SetConfig+0xf4>)
 8005cb4:	4293      	cmp	r3, r2
 8005cb6:	d003      	beq.n	8005cc0 <TIM_OC4_SetConfig+0x84>
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	4a1e      	ldr	r2, [pc, #120]	; (8005d34 <TIM_OC4_SetConfig+0xf8>)
 8005cbc:	4293      	cmp	r3, r2
 8005cbe:	d119      	bne.n	8005cf4 <TIM_OC4_SetConfig+0xb8>
  {
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 8005cc0:	683b      	ldr	r3, [r7, #0]
 8005cc2:	695a      	ldr	r2, [r3, #20]
 8005cc4:	2380      	movs	r3, #128	; 0x80
 8005cc6:	005b      	lsls	r3, r3, #1
 8005cc8:	429a      	cmp	r2, r3
 8005cca:	d009      	beq.n	8005ce0 <TIM_OC4_SetConfig+0xa4>
 8005ccc:	683b      	ldr	r3, [r7, #0]
 8005cce:	695b      	ldr	r3, [r3, #20]
 8005cd0:	2b00      	cmp	r3, #0
 8005cd2:	d005      	beq.n	8005ce0 <TIM_OC4_SetConfig+0xa4>
 8005cd4:	4a18      	ldr	r2, [pc, #96]	; (8005d38 <TIM_OC4_SetConfig+0xfc>)
 8005cd6:	4b19      	ldr	r3, [pc, #100]	; (8005d3c <TIM_OC4_SetConfig+0x100>)
 8005cd8:	0011      	movs	r1, r2
 8005cda:	0018      	movs	r0, r3
 8005cdc:	f7fa fe39 	bl	8000952 <assert_failed>

   /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005ce0:	697b      	ldr	r3, [r7, #20]
 8005ce2:	4a17      	ldr	r2, [pc, #92]	; (8005d40 <TIM_OC4_SetConfig+0x104>)
 8005ce4:	4013      	ands	r3, r2
 8005ce6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005ce8:	683b      	ldr	r3, [r7, #0]
 8005cea:	695b      	ldr	r3, [r3, #20]
 8005cec:	019b      	lsls	r3, r3, #6
 8005cee:	697a      	ldr	r2, [r7, #20]
 8005cf0:	4313      	orrs	r3, r2
 8005cf2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	697a      	ldr	r2, [r7, #20]
 8005cf8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	693a      	ldr	r2, [r7, #16]
 8005cfe:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005d00:	683b      	ldr	r3, [r7, #0]
 8005d02:	685a      	ldr	r2, [r3, #4]
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	68fa      	ldr	r2, [r7, #12]
 8005d0c:	621a      	str	r2, [r3, #32]
}
 8005d0e:	46c0      	nop			; (mov r8, r8)
 8005d10:	46bd      	mov	sp, r7
 8005d12:	b006      	add	sp, #24
 8005d14:	bd80      	pop	{r7, pc}
 8005d16:	46c0      	nop			; (mov r8, r8)
 8005d18:	ffffefff 	.word	0xffffefff
 8005d1c:	ffff8fff 	.word	0xffff8fff
 8005d20:	fffffcff 	.word	0xfffffcff
 8005d24:	ffffdfff 	.word	0xffffdfff
 8005d28:	40012c00 	.word	0x40012c00
 8005d2c:	40014000 	.word	0x40014000
 8005d30:	40014400 	.word	0x40014400
 8005d34:	40014800 	.word	0x40014800
 8005d38:	00001370 	.word	0x00001370
 8005d3c:	08007158 	.word	0x08007158
 8005d40:	ffffbfff 	.word	0xffffbfff

08005d44 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005d44:	b580      	push	{r7, lr}
 8005d46:	b086      	sub	sp, #24
 8005d48:	af00      	add	r7, sp, #0
 8005d4a:	60f8      	str	r0, [r7, #12]
 8005d4c:	60b9      	str	r1, [r7, #8]
 8005d4e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1 = 0U;
 8005d50:	2300      	movs	r3, #0
 8005d52:	617b      	str	r3, [r7, #20]
  uint32_t tmpccer = 0U;
 8005d54:	2300      	movs	r3, #0
 8005d56:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	6a1b      	ldr	r3, [r3, #32]
 8005d5c:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	6a1b      	ldr	r3, [r3, #32]
 8005d62:	2201      	movs	r2, #1
 8005d64:	4393      	bics	r3, r2
 8005d66:	001a      	movs	r2, r3
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	699b      	ldr	r3, [r3, #24]
 8005d70:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005d72:	697b      	ldr	r3, [r7, #20]
 8005d74:	22f0      	movs	r2, #240	; 0xf0
 8005d76:	4393      	bics	r3, r2
 8005d78:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	011b      	lsls	r3, r3, #4
 8005d7e:	697a      	ldr	r2, [r7, #20]
 8005d80:	4313      	orrs	r3, r2
 8005d82:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005d84:	693b      	ldr	r3, [r7, #16]
 8005d86:	220a      	movs	r2, #10
 8005d88:	4393      	bics	r3, r2
 8005d8a:	613b      	str	r3, [r7, #16]
  tmpccer |= TIM_ICPolarity;
 8005d8c:	693a      	ldr	r2, [r7, #16]
 8005d8e:	68bb      	ldr	r3, [r7, #8]
 8005d90:	4313      	orrs	r3, r2
 8005d92:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	697a      	ldr	r2, [r7, #20]
 8005d98:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	693a      	ldr	r2, [r7, #16]
 8005d9e:	621a      	str	r2, [r3, #32]
}
 8005da0:	46c0      	nop			; (mov r8, r8)
 8005da2:	46bd      	mov	sp, r7
 8005da4:	b006      	add	sp, #24
 8005da6:	bd80      	pop	{r7, pc}

08005da8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005da8:	b580      	push	{r7, lr}
 8005daa:	b086      	sub	sp, #24
 8005dac:	af00      	add	r7, sp, #0
 8005dae:	60f8      	str	r0, [r7, #12]
 8005db0:	60b9      	str	r1, [r7, #8]
 8005db2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1 = 0U;
 8005db4:	2300      	movs	r3, #0
 8005db6:	617b      	str	r3, [r7, #20]
  uint32_t tmpccer = 0U;
 8005db8:	2300      	movs	r3, #0
 8005dba:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	6a1b      	ldr	r3, [r3, #32]
 8005dc0:	2210      	movs	r2, #16
 8005dc2:	4393      	bics	r3, r2
 8005dc4:	001a      	movs	r2, r3
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	699b      	ldr	r3, [r3, #24]
 8005dce:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	6a1b      	ldr	r3, [r3, #32]
 8005dd4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005dd6:	697b      	ldr	r3, [r7, #20]
 8005dd8:	4a0d      	ldr	r2, [pc, #52]	; (8005e10 <TIM_TI2_ConfigInputStage+0x68>)
 8005dda:	4013      	ands	r3, r2
 8005ddc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	031b      	lsls	r3, r3, #12
 8005de2:	697a      	ldr	r2, [r7, #20]
 8005de4:	4313      	orrs	r3, r2
 8005de6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005de8:	693b      	ldr	r3, [r7, #16]
 8005dea:	22a0      	movs	r2, #160	; 0xa0
 8005dec:	4393      	bics	r3, r2
 8005dee:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005df0:	68bb      	ldr	r3, [r7, #8]
 8005df2:	011b      	lsls	r3, r3, #4
 8005df4:	693a      	ldr	r2, [r7, #16]
 8005df6:	4313      	orrs	r3, r2
 8005df8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	697a      	ldr	r2, [r7, #20]
 8005dfe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	693a      	ldr	r2, [r7, #16]
 8005e04:	621a      	str	r2, [r3, #32]
}
 8005e06:	46c0      	nop			; (mov r8, r8)
 8005e08:	46bd      	mov	sp, r7
 8005e0a:	b006      	add	sp, #24
 8005e0c:	bd80      	pop	{r7, pc}
 8005e0e:	46c0      	nop			; (mov r8, r8)
 8005e10:	ffff0fff 	.word	0xffff0fff

08005e14 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2 : Filtered Timer Input 2
  *            @arg TIM_TS_ETRF : External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint16_t InputTriggerSource)
{
 8005e14:	b580      	push	{r7, lr}
 8005e16:	b084      	sub	sp, #16
 8005e18:	af00      	add	r7, sp, #0
 8005e1a:	6078      	str	r0, [r7, #4]
 8005e1c:	000a      	movs	r2, r1
 8005e1e:	1cbb      	adds	r3, r7, #2
 8005e20:	801a      	strh	r2, [r3, #0]
  uint32_t tmpsmcr = 0U;
 8005e22:	2300      	movs	r3, #0
 8005e24:	60fb      	str	r3, [r7, #12]

   /* Get the TIMx SMCR register value */
   tmpsmcr = TIMx->SMCR;
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	689b      	ldr	r3, [r3, #8]
 8005e2a:	60fb      	str	r3, [r7, #12]
   /* Reset the TS Bits */
   tmpsmcr &= ~TIM_SMCR_TS;
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	2270      	movs	r2, #112	; 0x70
 8005e30:	4393      	bics	r3, r2
 8005e32:	60fb      	str	r3, [r7, #12]
   /* Set the Input Trigger source and the slave mode*/
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8005e34:	1cbb      	adds	r3, r7, #2
 8005e36:	881b      	ldrh	r3, [r3, #0]
 8005e38:	2207      	movs	r2, #7
 8005e3a:	4313      	orrs	r3, r2
 8005e3c:	b29b      	uxth	r3, r3
 8005e3e:	001a      	movs	r2, r3
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	4313      	orrs	r3, r2
 8005e44:	60fb      	str	r3, [r7, #12]
   /* Write to TIMx SMCR */
   TIMx->SMCR = tmpsmcr;
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	68fa      	ldr	r2, [r7, #12]
 8005e4a:	609a      	str	r2, [r3, #8]
}
 8005e4c:	46c0      	nop			; (mov r8, r8)
 8005e4e:	46bd      	mov	sp, r7
 8005e50:	b004      	add	sp, #16
 8005e52:	bd80      	pop	{r7, pc}

08005e54 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef* TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005e54:	b580      	push	{r7, lr}
 8005e56:	b086      	sub	sp, #24
 8005e58:	af00      	add	r7, sp, #0
 8005e5a:	60f8      	str	r0, [r7, #12]
 8005e5c:	60b9      	str	r1, [r7, #8]
 8005e5e:	607a      	str	r2, [r7, #4]
 8005e60:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr = 0U;
 8005e62:	2300      	movs	r3, #0
 8005e64:	617b      	str	r3, [r7, #20]

  tmpsmcr = TIMx->SMCR;
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	689b      	ldr	r3, [r3, #8]
 8005e6a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005e6c:	697b      	ldr	r3, [r7, #20]
 8005e6e:	4a09      	ldr	r2, [pc, #36]	; (8005e94 <TIM_ETR_SetConfig+0x40>)
 8005e70:	4013      	ands	r3, r2
 8005e72:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005e74:	683b      	ldr	r3, [r7, #0]
 8005e76:	021a      	lsls	r2, r3, #8
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	431a      	orrs	r2, r3
 8005e7c:	68bb      	ldr	r3, [r7, #8]
 8005e7e:	4313      	orrs	r3, r2
 8005e80:	697a      	ldr	r2, [r7, #20]
 8005e82:	4313      	orrs	r3, r2
 8005e84:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	697a      	ldr	r2, [r7, #20]
 8005e8a:	609a      	str	r2, [r3, #8]
}
 8005e8c:	46c0      	nop			; (mov r8, r8)
 8005e8e:	46bd      	mov	sp, r7
 8005e90:	b006      	add	sp, #24
 8005e92:	bd80      	pop	{r7, pc}
 8005e94:	ffff00ff 	.word	0xffff00ff

08005e98 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_Disable.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef* TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005e98:	b580      	push	{r7, lr}
 8005e9a:	b086      	sub	sp, #24
 8005e9c:	af00      	add	r7, sp, #0
 8005e9e:	60f8      	str	r0, [r7, #12]
 8005ea0:	60b9      	str	r1, [r7, #8]
 8005ea2:	607a      	str	r2, [r7, #4]
  uint32_t tmp = 0U;
 8005ea4:	2300      	movs	r3, #0
 8005ea6:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	4a28      	ldr	r2, [pc, #160]	; (8005f4c <TIM_CCxChannelCmd+0xb4>)
 8005eac:	4293      	cmp	r3, r2
 8005eae:	d01e      	beq.n	8005eee <TIM_CCxChannelCmd+0x56>
 8005eb0:	68fa      	ldr	r2, [r7, #12]
 8005eb2:	2380      	movs	r3, #128	; 0x80
 8005eb4:	05db      	lsls	r3, r3, #23
 8005eb6:	429a      	cmp	r2, r3
 8005eb8:	d019      	beq.n	8005eee <TIM_CCxChannelCmd+0x56>
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	4a24      	ldr	r2, [pc, #144]	; (8005f50 <TIM_CCxChannelCmd+0xb8>)
 8005ebe:	4293      	cmp	r3, r2
 8005ec0:	d015      	beq.n	8005eee <TIM_CCxChannelCmd+0x56>
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	4a23      	ldr	r2, [pc, #140]	; (8005f54 <TIM_CCxChannelCmd+0xbc>)
 8005ec6:	4293      	cmp	r3, r2
 8005ec8:	d011      	beq.n	8005eee <TIM_CCxChannelCmd+0x56>
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	4a22      	ldr	r2, [pc, #136]	; (8005f58 <TIM_CCxChannelCmd+0xc0>)
 8005ece:	4293      	cmp	r3, r2
 8005ed0:	d00d      	beq.n	8005eee <TIM_CCxChannelCmd+0x56>
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	4a21      	ldr	r2, [pc, #132]	; (8005f5c <TIM_CCxChannelCmd+0xc4>)
 8005ed6:	4293      	cmp	r3, r2
 8005ed8:	d009      	beq.n	8005eee <TIM_CCxChannelCmd+0x56>
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	4a20      	ldr	r2, [pc, #128]	; (8005f60 <TIM_CCxChannelCmd+0xc8>)
 8005ede:	4293      	cmp	r3, r2
 8005ee0:	d005      	beq.n	8005eee <TIM_CCxChannelCmd+0x56>
 8005ee2:	4a20      	ldr	r2, [pc, #128]	; (8005f64 <TIM_CCxChannelCmd+0xcc>)
 8005ee4:	4b20      	ldr	r3, [pc, #128]	; (8005f68 <TIM_CCxChannelCmd+0xd0>)
 8005ee6:	0011      	movs	r1, r2
 8005ee8:	0018      	movs	r0, r3
 8005eea:	f7fa fd32 	bl	8000952 <assert_failed>
  assert_param(IS_TIM_CHANNELS(Channel));
 8005eee:	68bb      	ldr	r3, [r7, #8]
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	d011      	beq.n	8005f18 <TIM_CCxChannelCmd+0x80>
 8005ef4:	68bb      	ldr	r3, [r7, #8]
 8005ef6:	2b04      	cmp	r3, #4
 8005ef8:	d00e      	beq.n	8005f18 <TIM_CCxChannelCmd+0x80>
 8005efa:	68bb      	ldr	r3, [r7, #8]
 8005efc:	2b08      	cmp	r3, #8
 8005efe:	d00b      	beq.n	8005f18 <TIM_CCxChannelCmd+0x80>
 8005f00:	68bb      	ldr	r3, [r7, #8]
 8005f02:	2b0c      	cmp	r3, #12
 8005f04:	d008      	beq.n	8005f18 <TIM_CCxChannelCmd+0x80>
 8005f06:	68bb      	ldr	r3, [r7, #8]
 8005f08:	2b18      	cmp	r3, #24
 8005f0a:	d005      	beq.n	8005f18 <TIM_CCxChannelCmd+0x80>
 8005f0c:	4a17      	ldr	r2, [pc, #92]	; (8005f6c <TIM_CCxChannelCmd+0xd4>)
 8005f0e:	4b16      	ldr	r3, [pc, #88]	; (8005f68 <TIM_CCxChannelCmd+0xd0>)
 8005f10:	0011      	movs	r1, r2
 8005f12:	0018      	movs	r0, r3
 8005f14:	f7fa fd1d 	bl	8000952 <assert_failed>

  tmp = TIM_CCER_CC1E << Channel;
 8005f18:	2201      	movs	r2, #1
 8005f1a:	68bb      	ldr	r3, [r7, #8]
 8005f1c:	409a      	lsls	r2, r3
 8005f1e:	0013      	movs	r3, r2
 8005f20:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	6a1b      	ldr	r3, [r3, #32]
 8005f26:	697a      	ldr	r2, [r7, #20]
 8005f28:	43d2      	mvns	r2, r2
 8005f2a:	401a      	ands	r2, r3
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |=  (uint32_t)(ChannelState << Channel);
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	6a1a      	ldr	r2, [r3, #32]
 8005f34:	6879      	ldr	r1, [r7, #4]
 8005f36:	68bb      	ldr	r3, [r7, #8]
 8005f38:	4099      	lsls	r1, r3
 8005f3a:	000b      	movs	r3, r1
 8005f3c:	431a      	orrs	r2, r3
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	621a      	str	r2, [r3, #32]
}
 8005f42:	46c0      	nop			; (mov r8, r8)
 8005f44:	46bd      	mov	sp, r7
 8005f46:	b006      	add	sp, #24
 8005f48:	bd80      	pop	{r7, pc}
 8005f4a:	46c0      	nop			; (mov r8, r8)
 8005f4c:	40012c00 	.word	0x40012c00
 8005f50:	40000400 	.word	0x40000400
 8005f54:	40002000 	.word	0x40002000
 8005f58:	40014000 	.word	0x40014000
 8005f5c:	40014400 	.word	0x40014400
 8005f60:	40014800 	.word	0x40014800
 8005f64:	0000155e 	.word	0x0000155e
 8005f68:	08007158 	.word	0x08007158
 8005f6c:	0000155f 	.word	0x0000155f

08005f70 <HAL_TIMEx_OCN_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_OCN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005f70:	b580      	push	{r7, lr}
 8005f72:	b082      	sub	sp, #8
 8005f74:	af00      	add	r7, sp, #0
 8005f76:	6078      	str	r0, [r7, #4]
 8005f78:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	4a24      	ldr	r2, [pc, #144]	; (8006010 <HAL_TIMEx_OCN_Start+0xa0>)
 8005f80:	4293      	cmp	r3, r2
 8005f82:	d108      	bne.n	8005f96 <HAL_TIMEx_OCN_Start+0x26>
 8005f84:	683b      	ldr	r3, [r7, #0]
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	d024      	beq.n	8005fd4 <HAL_TIMEx_OCN_Start+0x64>
 8005f8a:	683b      	ldr	r3, [r7, #0]
 8005f8c:	2b04      	cmp	r3, #4
 8005f8e:	d021      	beq.n	8005fd4 <HAL_TIMEx_OCN_Start+0x64>
 8005f90:	683b      	ldr	r3, [r7, #0]
 8005f92:	2b08      	cmp	r3, #8
 8005f94:	d01e      	beq.n	8005fd4 <HAL_TIMEx_OCN_Start+0x64>
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	4a1e      	ldr	r2, [pc, #120]	; (8006014 <HAL_TIMEx_OCN_Start+0xa4>)
 8005f9c:	4293      	cmp	r3, r2
 8005f9e:	d102      	bne.n	8005fa6 <HAL_TIMEx_OCN_Start+0x36>
 8005fa0:	683b      	ldr	r3, [r7, #0]
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	d016      	beq.n	8005fd4 <HAL_TIMEx_OCN_Start+0x64>
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	4a1b      	ldr	r2, [pc, #108]	; (8006018 <HAL_TIMEx_OCN_Start+0xa8>)
 8005fac:	4293      	cmp	r3, r2
 8005fae:	d102      	bne.n	8005fb6 <HAL_TIMEx_OCN_Start+0x46>
 8005fb0:	683b      	ldr	r3, [r7, #0]
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	d00e      	beq.n	8005fd4 <HAL_TIMEx_OCN_Start+0x64>
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	4a18      	ldr	r2, [pc, #96]	; (800601c <HAL_TIMEx_OCN_Start+0xac>)
 8005fbc:	4293      	cmp	r3, r2
 8005fbe:	d102      	bne.n	8005fc6 <HAL_TIMEx_OCN_Start+0x56>
 8005fc0:	683b      	ldr	r3, [r7, #0]
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	d006      	beq.n	8005fd4 <HAL_TIMEx_OCN_Start+0x64>
 8005fc6:	23f6      	movs	r3, #246	; 0xf6
 8005fc8:	005a      	lsls	r2, r3, #1
 8005fca:	4b15      	ldr	r3, [pc, #84]	; (8006020 <HAL_TIMEx_OCN_Start+0xb0>)
 8005fcc:	0011      	movs	r1, r2
 8005fce:	0018      	movs	r0, r3
 8005fd0:	f7fa fcbf 	bl	8000952 <assert_failed>

     /* Enable the Capture compare channel N */
     TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	6839      	ldr	r1, [r7, #0]
 8005fda:	2204      	movs	r2, #4
 8005fdc:	0018      	movs	r0, r3
 8005fde:	f000 fa69 	bl	80064b4 <TIM_CCxNChannelCmd>

  /* Enable the Main Ouput */
    __HAL_TIM_MOE_ENABLE(htim);
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	2180      	movs	r1, #128	; 0x80
 8005fee:	0209      	lsls	r1, r1, #8
 8005ff0:	430a      	orrs	r2, r1
 8005ff2:	645a      	str	r2, [r3, #68]	; 0x44

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	681a      	ldr	r2, [r3, #0]
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	2101      	movs	r1, #1
 8006000:	430a      	orrs	r2, r1
 8006002:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8006004:	2300      	movs	r3, #0
}
 8006006:	0018      	movs	r0, r3
 8006008:	46bd      	mov	sp, r7
 800600a:	b002      	add	sp, #8
 800600c:	bd80      	pop	{r7, pc}
 800600e:	46c0      	nop			; (mov r8, r8)
 8006010:	40012c00 	.word	0x40012c00
 8006014:	40014000 	.word	0x40014000
 8006018:	40014400 	.word	0x40014400
 800601c:	40014800 	.word	0x40014800
 8006020:	08007190 	.word	0x08007190

08006024 <HAL_TIMEx_OCN_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_OCN_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006024:	b580      	push	{r7, lr}
 8006026:	b082      	sub	sp, #8
 8006028:	af00      	add	r7, sp, #0
 800602a:	6078      	str	r0, [r7, #4]
 800602c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	4a2f      	ldr	r2, [pc, #188]	; (80060f0 <HAL_TIMEx_OCN_Stop+0xcc>)
 8006034:	4293      	cmp	r3, r2
 8006036:	d108      	bne.n	800604a <HAL_TIMEx_OCN_Stop+0x26>
 8006038:	683b      	ldr	r3, [r7, #0]
 800603a:	2b00      	cmp	r3, #0
 800603c:	d023      	beq.n	8006086 <HAL_TIMEx_OCN_Stop+0x62>
 800603e:	683b      	ldr	r3, [r7, #0]
 8006040:	2b04      	cmp	r3, #4
 8006042:	d020      	beq.n	8006086 <HAL_TIMEx_OCN_Stop+0x62>
 8006044:	683b      	ldr	r3, [r7, #0]
 8006046:	2b08      	cmp	r3, #8
 8006048:	d01d      	beq.n	8006086 <HAL_TIMEx_OCN_Stop+0x62>
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	4a29      	ldr	r2, [pc, #164]	; (80060f4 <HAL_TIMEx_OCN_Stop+0xd0>)
 8006050:	4293      	cmp	r3, r2
 8006052:	d102      	bne.n	800605a <HAL_TIMEx_OCN_Stop+0x36>
 8006054:	683b      	ldr	r3, [r7, #0]
 8006056:	2b00      	cmp	r3, #0
 8006058:	d015      	beq.n	8006086 <HAL_TIMEx_OCN_Stop+0x62>
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	4a26      	ldr	r2, [pc, #152]	; (80060f8 <HAL_TIMEx_OCN_Stop+0xd4>)
 8006060:	4293      	cmp	r3, r2
 8006062:	d102      	bne.n	800606a <HAL_TIMEx_OCN_Stop+0x46>
 8006064:	683b      	ldr	r3, [r7, #0]
 8006066:	2b00      	cmp	r3, #0
 8006068:	d00d      	beq.n	8006086 <HAL_TIMEx_OCN_Stop+0x62>
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	4a23      	ldr	r2, [pc, #140]	; (80060fc <HAL_TIMEx_OCN_Stop+0xd8>)
 8006070:	4293      	cmp	r3, r2
 8006072:	d102      	bne.n	800607a <HAL_TIMEx_OCN_Stop+0x56>
 8006074:	683b      	ldr	r3, [r7, #0]
 8006076:	2b00      	cmp	r3, #0
 8006078:	d005      	beq.n	8006086 <HAL_TIMEx_OCN_Stop+0x62>
 800607a:	4a21      	ldr	r2, [pc, #132]	; (8006100 <HAL_TIMEx_OCN_Stop+0xdc>)
 800607c:	4b21      	ldr	r3, [pc, #132]	; (8006104 <HAL_TIMEx_OCN_Stop+0xe0>)
 800607e:	0011      	movs	r1, r2
 8006080:	0018      	movs	r0, r3
 8006082:	f7fa fc66 	bl	8000952 <assert_failed>

    /* Disable the Capture compare channel N */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_DISABLE);
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	6839      	ldr	r1, [r7, #0]
 800608c:	2200      	movs	r2, #0
 800608e:	0018      	movs	r0, r3
 8006090:	f000 fa10 	bl	80064b4 <TIM_CCxNChannelCmd>

  /* Disable the Main Ouput */
    __HAL_TIM_MOE_DISABLE(htim);
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	6a1b      	ldr	r3, [r3, #32]
 800609a:	4a1b      	ldr	r2, [pc, #108]	; (8006108 <HAL_TIMEx_OCN_Stop+0xe4>)
 800609c:	4013      	ands	r3, r2
 800609e:	d10d      	bne.n	80060bc <HAL_TIMEx_OCN_Stop+0x98>
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	6a1b      	ldr	r3, [r3, #32]
 80060a6:	4a19      	ldr	r2, [pc, #100]	; (800610c <HAL_TIMEx_OCN_Stop+0xe8>)
 80060a8:	4013      	ands	r3, r2
 80060aa:	d107      	bne.n	80060bc <HAL_TIMEx_OCN_Stop+0x98>
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	4916      	ldr	r1, [pc, #88]	; (8006110 <HAL_TIMEx_OCN_Stop+0xec>)
 80060b8:	400a      	ands	r2, r1
 80060ba:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	6a1b      	ldr	r3, [r3, #32]
 80060c2:	4a11      	ldr	r2, [pc, #68]	; (8006108 <HAL_TIMEx_OCN_Stop+0xe4>)
 80060c4:	4013      	ands	r3, r2
 80060c6:	d10d      	bne.n	80060e4 <HAL_TIMEx_OCN_Stop+0xc0>
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	6a1b      	ldr	r3, [r3, #32]
 80060ce:	4a0f      	ldr	r2, [pc, #60]	; (800610c <HAL_TIMEx_OCN_Stop+0xe8>)
 80060d0:	4013      	ands	r3, r2
 80060d2:	d107      	bne.n	80060e4 <HAL_TIMEx_OCN_Stop+0xc0>
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	681a      	ldr	r2, [r3, #0]
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	2101      	movs	r1, #1
 80060e0:	438a      	bics	r2, r1
 80060e2:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80060e4:	2300      	movs	r3, #0
}
 80060e6:	0018      	movs	r0, r3
 80060e8:	46bd      	mov	sp, r7
 80060ea:	b002      	add	sp, #8
 80060ec:	bd80      	pop	{r7, pc}
 80060ee:	46c0      	nop			; (mov r8, r8)
 80060f0:	40012c00 	.word	0x40012c00
 80060f4:	40014000 	.word	0x40014000
 80060f8:	40014400 	.word	0x40014400
 80060fc:	40014800 	.word	0x40014800
 8006100:	0000020a 	.word	0x0000020a
 8006104:	08007190 	.word	0x08007190
 8006108:	00001111 	.word	0x00001111
 800610c:	00000444 	.word	0x00000444
 8006110:	ffff7fff 	.word	0xffff7fff

08006114 <HAL_TIMEx_MasterConfigSynchronization>:
  *         contains the selected trigger output (TRGO) and the Master/Slave 
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim, TIM_MasterConfigTypeDef * sMasterConfig)
{
 8006114:	b580      	push	{r7, lr}
 8006116:	b082      	sub	sp, #8
 8006118:	af00      	add	r7, sp, #0
 800611a:	6078      	str	r0, [r7, #4]
 800611c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	4a48      	ldr	r2, [pc, #288]	; (8006244 <HAL_TIMEx_MasterConfigSynchronization+0x130>)
 8006124:	4293      	cmp	r3, r2
 8006126:	d01a      	beq.n	800615e <HAL_TIMEx_MasterConfigSynchronization+0x4a>
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	681a      	ldr	r2, [r3, #0]
 800612c:	2380      	movs	r3, #128	; 0x80
 800612e:	05db      	lsls	r3, r3, #23
 8006130:	429a      	cmp	r2, r3
 8006132:	d014      	beq.n	800615e <HAL_TIMEx_MasterConfigSynchronization+0x4a>
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	4a43      	ldr	r2, [pc, #268]	; (8006248 <HAL_TIMEx_MasterConfigSynchronization+0x134>)
 800613a:	4293      	cmp	r3, r2
 800613c:	d00f      	beq.n	800615e <HAL_TIMEx_MasterConfigSynchronization+0x4a>
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	4a42      	ldr	r2, [pc, #264]	; (800624c <HAL_TIMEx_MasterConfigSynchronization+0x138>)
 8006144:	4293      	cmp	r3, r2
 8006146:	d00a      	beq.n	800615e <HAL_TIMEx_MasterConfigSynchronization+0x4a>
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	4a40      	ldr	r2, [pc, #256]	; (8006250 <HAL_TIMEx_MasterConfigSynchronization+0x13c>)
 800614e:	4293      	cmp	r3, r2
 8006150:	d005      	beq.n	800615e <HAL_TIMEx_MasterConfigSynchronization+0x4a>
 8006152:	4a40      	ldr	r2, [pc, #256]	; (8006254 <HAL_TIMEx_MasterConfigSynchronization+0x140>)
 8006154:	4b40      	ldr	r3, [pc, #256]	; (8006258 <HAL_TIMEx_MasterConfigSynchronization+0x144>)
 8006156:	0011      	movs	r1, r2
 8006158:	0018      	movs	r0, r3
 800615a:	f7fa fbfa 	bl	8000952 <assert_failed>
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
 800615e:	683b      	ldr	r3, [r7, #0]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	2b00      	cmp	r3, #0
 8006164:	d021      	beq.n	80061aa <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8006166:	683b      	ldr	r3, [r7, #0]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	2b10      	cmp	r3, #16
 800616c:	d01d      	beq.n	80061aa <HAL_TIMEx_MasterConfigSynchronization+0x96>
 800616e:	683b      	ldr	r3, [r7, #0]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	2b20      	cmp	r3, #32
 8006174:	d019      	beq.n	80061aa <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8006176:	683b      	ldr	r3, [r7, #0]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	2b30      	cmp	r3, #48	; 0x30
 800617c:	d015      	beq.n	80061aa <HAL_TIMEx_MasterConfigSynchronization+0x96>
 800617e:	683b      	ldr	r3, [r7, #0]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	2b40      	cmp	r3, #64	; 0x40
 8006184:	d011      	beq.n	80061aa <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8006186:	683b      	ldr	r3, [r7, #0]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	2b50      	cmp	r3, #80	; 0x50
 800618c:	d00d      	beq.n	80061aa <HAL_TIMEx_MasterConfigSynchronization+0x96>
 800618e:	683b      	ldr	r3, [r7, #0]
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	2b60      	cmp	r3, #96	; 0x60
 8006194:	d009      	beq.n	80061aa <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8006196:	683b      	ldr	r3, [r7, #0]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	2b70      	cmp	r3, #112	; 0x70
 800619c:	d005      	beq.n	80061aa <HAL_TIMEx_MasterConfigSynchronization+0x96>
 800619e:	4a2f      	ldr	r2, [pc, #188]	; (800625c <HAL_TIMEx_MasterConfigSynchronization+0x148>)
 80061a0:	4b2d      	ldr	r3, [pc, #180]	; (8006258 <HAL_TIMEx_MasterConfigSynchronization+0x144>)
 80061a2:	0011      	movs	r1, r2
 80061a4:	0018      	movs	r0, r3
 80061a6:	f7fa fbd4 	bl	8000952 <assert_failed>
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
 80061aa:	683b      	ldr	r3, [r7, #0]
 80061ac:	685b      	ldr	r3, [r3, #4]
 80061ae:	2b80      	cmp	r3, #128	; 0x80
 80061b0:	d009      	beq.n	80061c6 <HAL_TIMEx_MasterConfigSynchronization+0xb2>
 80061b2:	683b      	ldr	r3, [r7, #0]
 80061b4:	685b      	ldr	r3, [r3, #4]
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	d005      	beq.n	80061c6 <HAL_TIMEx_MasterConfigSynchronization+0xb2>
 80061ba:	4a29      	ldr	r2, [pc, #164]	; (8006260 <HAL_TIMEx_MasterConfigSynchronization+0x14c>)
 80061bc:	4b26      	ldr	r3, [pc, #152]	; (8006258 <HAL_TIMEx_MasterConfigSynchronization+0x144>)
 80061be:	0011      	movs	r1, r2
 80061c0:	0018      	movs	r0, r3
 80061c2:	f7fa fbc6 	bl	8000952 <assert_failed>

  __HAL_LOCK(htim);
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	223c      	movs	r2, #60	; 0x3c
 80061ca:	5c9b      	ldrb	r3, [r3, r2]
 80061cc:	2b01      	cmp	r3, #1
 80061ce:	d101      	bne.n	80061d4 <HAL_TIMEx_MasterConfigSynchronization+0xc0>
 80061d0:	2302      	movs	r3, #2
 80061d2:	e032      	b.n	800623a <HAL_TIMEx_MasterConfigSynchronization+0x126>
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	223c      	movs	r2, #60	; 0x3c
 80061d8:	2101      	movs	r1, #1
 80061da:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	223d      	movs	r2, #61	; 0x3d
 80061e0:	2102      	movs	r1, #2
 80061e2:	5499      	strb	r1, [r3, r2]

  /* Reset the MMS Bits */
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	685a      	ldr	r2, [r3, #4]
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	2170      	movs	r1, #112	; 0x70
 80061f0:	438a      	bics	r2, r1
 80061f2:	605a      	str	r2, [r3, #4]
  /* Select the TRGO source */
  htim->Instance->CR2 |=  sMasterConfig->MasterOutputTrigger;
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	6859      	ldr	r1, [r3, #4]
 80061fa:	683b      	ldr	r3, [r7, #0]
 80061fc:	681a      	ldr	r2, [r3, #0]
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	430a      	orrs	r2, r1
 8006204:	605a      	str	r2, [r3, #4]

  /* Reset the MSM Bit */
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	689a      	ldr	r2, [r3, #8]
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	2180      	movs	r1, #128	; 0x80
 8006212:	438a      	bics	r2, r1
 8006214:	609a      	str	r2, [r3, #8]
  /* Set or Reset the MSM Bit */
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	6899      	ldr	r1, [r3, #8]
 800621c:	683b      	ldr	r3, [r7, #0]
 800621e:	685a      	ldr	r2, [r3, #4]
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	430a      	orrs	r2, r1
 8006226:	609a      	str	r2, [r3, #8]

  htim->State = HAL_TIM_STATE_READY;
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	223d      	movs	r2, #61	; 0x3d
 800622c:	2101      	movs	r1, #1
 800622e:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	223c      	movs	r2, #60	; 0x3c
 8006234:	2100      	movs	r1, #0
 8006236:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006238:	2300      	movs	r3, #0
}
 800623a:	0018      	movs	r0, r3
 800623c:	46bd      	mov	sp, r7
 800623e:	b002      	add	sp, #8
 8006240:	bd80      	pop	{r7, pc}
 8006242:	46c0      	nop			; (mov r8, r8)
 8006244:	40012c00 	.word	0x40012c00
 8006248:	40000400 	.word	0x40000400
 800624c:	40001000 	.word	0x40001000
 8006250:	40014000 	.word	0x40014000
 8006254:	00000649 	.word	0x00000649
 8006258:	08007190 	.word	0x08007190
 800625c:	0000064a 	.word	0x0000064a
 8006260:	0000064b 	.word	0x0000064b

08006264 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         contains the BDTR Register configuration  information for the TIM peripheral.
  * @retval HAL status
  */    
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8006264:	b580      	push	{r7, lr}
 8006266:	b084      	sub	sp, #16
 8006268:	af00      	add	r7, sp, #0
 800626a:	6078      	str	r0, [r7, #4]
 800626c:	6039      	str	r1, [r7, #0]
  uint32_t tmpbdtr = 0;
 800626e:	2300      	movs	r3, #0
 8006270:	60fb      	str	r3, [r7, #12]
   
  /* Check the parameters */
  assert_param(IS_TIM_BREAK_INSTANCE(htim->Instance));
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	4a74      	ldr	r2, [pc, #464]	; (8006448 <HAL_TIMEx_ConfigBreakDeadTime+0x1e4>)
 8006278:	4293      	cmp	r3, r2
 800627a:	d015      	beq.n	80062a8 <HAL_TIMEx_ConfigBreakDeadTime+0x44>
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	4a72      	ldr	r2, [pc, #456]	; (800644c <HAL_TIMEx_ConfigBreakDeadTime+0x1e8>)
 8006282:	4293      	cmp	r3, r2
 8006284:	d010      	beq.n	80062a8 <HAL_TIMEx_ConfigBreakDeadTime+0x44>
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	4a71      	ldr	r2, [pc, #452]	; (8006450 <HAL_TIMEx_ConfigBreakDeadTime+0x1ec>)
 800628c:	4293      	cmp	r3, r2
 800628e:	d00b      	beq.n	80062a8 <HAL_TIMEx_ConfigBreakDeadTime+0x44>
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	4a6f      	ldr	r2, [pc, #444]	; (8006454 <HAL_TIMEx_ConfigBreakDeadTime+0x1f0>)
 8006296:	4293      	cmp	r3, r2
 8006298:	d006      	beq.n	80062a8 <HAL_TIMEx_ConfigBreakDeadTime+0x44>
 800629a:	23ce      	movs	r3, #206	; 0xce
 800629c:	00da      	lsls	r2, r3, #3
 800629e:	4b6e      	ldr	r3, [pc, #440]	; (8006458 <HAL_TIMEx_ConfigBreakDeadTime+0x1f4>)
 80062a0:	0011      	movs	r1, r2
 80062a2:	0018      	movs	r0, r3
 80062a4:	f7fa fb55 	bl	8000952 <assert_failed>
  assert_param(IS_TIM_OSSR_STATE(sBreakDeadTimeConfig->OffStateRunMode));
 80062a8:	683b      	ldr	r3, [r7, #0]
 80062aa:	681a      	ldr	r2, [r3, #0]
 80062ac:	2380      	movs	r3, #128	; 0x80
 80062ae:	011b      	lsls	r3, r3, #4
 80062b0:	429a      	cmp	r2, r3
 80062b2:	d009      	beq.n	80062c8 <HAL_TIMEx_ConfigBreakDeadTime+0x64>
 80062b4:	683b      	ldr	r3, [r7, #0]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	2b00      	cmp	r3, #0
 80062ba:	d005      	beq.n	80062c8 <HAL_TIMEx_ConfigBreakDeadTime+0x64>
 80062bc:	4a67      	ldr	r2, [pc, #412]	; (800645c <HAL_TIMEx_ConfigBreakDeadTime+0x1f8>)
 80062be:	4b66      	ldr	r3, [pc, #408]	; (8006458 <HAL_TIMEx_ConfigBreakDeadTime+0x1f4>)
 80062c0:	0011      	movs	r1, r2
 80062c2:	0018      	movs	r0, r3
 80062c4:	f7fa fb45 	bl	8000952 <assert_failed>
  assert_param(IS_TIM_OSSI_STATE(sBreakDeadTimeConfig->OffStateIDLEMode));
 80062c8:	683b      	ldr	r3, [r7, #0]
 80062ca:	685a      	ldr	r2, [r3, #4]
 80062cc:	2380      	movs	r3, #128	; 0x80
 80062ce:	00db      	lsls	r3, r3, #3
 80062d0:	429a      	cmp	r2, r3
 80062d2:	d009      	beq.n	80062e8 <HAL_TIMEx_ConfigBreakDeadTime+0x84>
 80062d4:	683b      	ldr	r3, [r7, #0]
 80062d6:	685b      	ldr	r3, [r3, #4]
 80062d8:	2b00      	cmp	r3, #0
 80062da:	d005      	beq.n	80062e8 <HAL_TIMEx_ConfigBreakDeadTime+0x84>
 80062dc:	4a60      	ldr	r2, [pc, #384]	; (8006460 <HAL_TIMEx_ConfigBreakDeadTime+0x1fc>)
 80062de:	4b5e      	ldr	r3, [pc, #376]	; (8006458 <HAL_TIMEx_ConfigBreakDeadTime+0x1f4>)
 80062e0:	0011      	movs	r1, r2
 80062e2:	0018      	movs	r0, r3
 80062e4:	f7fa fb35 	bl	8000952 <assert_failed>
  assert_param(IS_TIM_LOCK_LEVEL(sBreakDeadTimeConfig->LockLevel));
 80062e8:	683b      	ldr	r3, [r7, #0]
 80062ea:	689b      	ldr	r3, [r3, #8]
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	d017      	beq.n	8006320 <HAL_TIMEx_ConfigBreakDeadTime+0xbc>
 80062f0:	683b      	ldr	r3, [r7, #0]
 80062f2:	689a      	ldr	r2, [r3, #8]
 80062f4:	2380      	movs	r3, #128	; 0x80
 80062f6:	005b      	lsls	r3, r3, #1
 80062f8:	429a      	cmp	r2, r3
 80062fa:	d011      	beq.n	8006320 <HAL_TIMEx_ConfigBreakDeadTime+0xbc>
 80062fc:	683b      	ldr	r3, [r7, #0]
 80062fe:	689a      	ldr	r2, [r3, #8]
 8006300:	2380      	movs	r3, #128	; 0x80
 8006302:	009b      	lsls	r3, r3, #2
 8006304:	429a      	cmp	r2, r3
 8006306:	d00b      	beq.n	8006320 <HAL_TIMEx_ConfigBreakDeadTime+0xbc>
 8006308:	683b      	ldr	r3, [r7, #0]
 800630a:	689a      	ldr	r2, [r3, #8]
 800630c:	23c0      	movs	r3, #192	; 0xc0
 800630e:	009b      	lsls	r3, r3, #2
 8006310:	429a      	cmp	r2, r3
 8006312:	d005      	beq.n	8006320 <HAL_TIMEx_ConfigBreakDeadTime+0xbc>
 8006314:	4a53      	ldr	r2, [pc, #332]	; (8006464 <HAL_TIMEx_ConfigBreakDeadTime+0x200>)
 8006316:	4b50      	ldr	r3, [pc, #320]	; (8006458 <HAL_TIMEx_ConfigBreakDeadTime+0x1f4>)
 8006318:	0011      	movs	r1, r2
 800631a:	0018      	movs	r0, r3
 800631c:	f7fa fb19 	bl	8000952 <assert_failed>
  assert_param(IS_TIM_DEADTIME(sBreakDeadTimeConfig->DeadTime));
 8006320:	683b      	ldr	r3, [r7, #0]
 8006322:	68db      	ldr	r3, [r3, #12]
 8006324:	2bff      	cmp	r3, #255	; 0xff
 8006326:	d905      	bls.n	8006334 <HAL_TIMEx_ConfigBreakDeadTime+0xd0>
 8006328:	4a4f      	ldr	r2, [pc, #316]	; (8006468 <HAL_TIMEx_ConfigBreakDeadTime+0x204>)
 800632a:	4b4b      	ldr	r3, [pc, #300]	; (8006458 <HAL_TIMEx_ConfigBreakDeadTime+0x1f4>)
 800632c:	0011      	movs	r1, r2
 800632e:	0018      	movs	r0, r3
 8006330:	f7fa fb0f 	bl	8000952 <assert_failed>
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
 8006334:	683b      	ldr	r3, [r7, #0]
 8006336:	691a      	ldr	r2, [r3, #16]
 8006338:	2380      	movs	r3, #128	; 0x80
 800633a:	015b      	lsls	r3, r3, #5
 800633c:	429a      	cmp	r2, r3
 800633e:	d009      	beq.n	8006354 <HAL_TIMEx_ConfigBreakDeadTime+0xf0>
 8006340:	683b      	ldr	r3, [r7, #0]
 8006342:	691b      	ldr	r3, [r3, #16]
 8006344:	2b00      	cmp	r3, #0
 8006346:	d005      	beq.n	8006354 <HAL_TIMEx_ConfigBreakDeadTime+0xf0>
 8006348:	4a48      	ldr	r2, [pc, #288]	; (800646c <HAL_TIMEx_ConfigBreakDeadTime+0x208>)
 800634a:	4b43      	ldr	r3, [pc, #268]	; (8006458 <HAL_TIMEx_ConfigBreakDeadTime+0x1f4>)
 800634c:	0011      	movs	r1, r2
 800634e:	0018      	movs	r0, r3
 8006350:	f7fa faff 	bl	8000952 <assert_failed>
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
 8006354:	683b      	ldr	r3, [r7, #0]
 8006356:	695b      	ldr	r3, [r3, #20]
 8006358:	2b00      	cmp	r3, #0
 800635a:	d00b      	beq.n	8006374 <HAL_TIMEx_ConfigBreakDeadTime+0x110>
 800635c:	683b      	ldr	r3, [r7, #0]
 800635e:	695a      	ldr	r2, [r3, #20]
 8006360:	2380      	movs	r3, #128	; 0x80
 8006362:	019b      	lsls	r3, r3, #6
 8006364:	429a      	cmp	r2, r3
 8006366:	d005      	beq.n	8006374 <HAL_TIMEx_ConfigBreakDeadTime+0x110>
 8006368:	4a41      	ldr	r2, [pc, #260]	; (8006470 <HAL_TIMEx_ConfigBreakDeadTime+0x20c>)
 800636a:	4b3b      	ldr	r3, [pc, #236]	; (8006458 <HAL_TIMEx_ConfigBreakDeadTime+0x1f4>)
 800636c:	0011      	movs	r1, r2
 800636e:	0018      	movs	r0, r3
 8006370:	f7fa faef 	bl	8000952 <assert_failed>
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
 8006374:	683b      	ldr	r3, [r7, #0]
 8006376:	699a      	ldr	r2, [r3, #24]
 8006378:	2380      	movs	r3, #128	; 0x80
 800637a:	01db      	lsls	r3, r3, #7
 800637c:	429a      	cmp	r2, r3
 800637e:	d009      	beq.n	8006394 <HAL_TIMEx_ConfigBreakDeadTime+0x130>
 8006380:	683b      	ldr	r3, [r7, #0]
 8006382:	699b      	ldr	r3, [r3, #24]
 8006384:	2b00      	cmp	r3, #0
 8006386:	d005      	beq.n	8006394 <HAL_TIMEx_ConfigBreakDeadTime+0x130>
 8006388:	4a3a      	ldr	r2, [pc, #232]	; (8006474 <HAL_TIMEx_ConfigBreakDeadTime+0x210>)
 800638a:	4b33      	ldr	r3, [pc, #204]	; (8006458 <HAL_TIMEx_ConfigBreakDeadTime+0x1f4>)
 800638c:	0011      	movs	r1, r2
 800638e:	0018      	movs	r0, r3
 8006390:	f7fa fadf 	bl	8000952 <assert_failed>

  /* Process Locked */
  __HAL_LOCK(htim);
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	223c      	movs	r2, #60	; 0x3c
 8006398:	5c9b      	ldrb	r3, [r3, r2]
 800639a:	2b01      	cmp	r3, #1
 800639c:	d101      	bne.n	80063a2 <HAL_TIMEx_ConfigBreakDeadTime+0x13e>
 800639e:	2302      	movs	r3, #2
 80063a0:	e04d      	b.n	800643e <HAL_TIMEx_ConfigBreakDeadTime+0x1da>
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	223c      	movs	r2, #60	; 0x3c
 80063a6:	2101      	movs	r1, #1
 80063a8:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	223d      	movs	r2, #61	; 0x3d
 80063ae:	2102      	movs	r1, #2
 80063b0:	5499      	strb	r1, [r3, r2]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */
  
  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	22ff      	movs	r2, #255	; 0xff
 80063b6:	4393      	bics	r3, r2
 80063b8:	001a      	movs	r2, r3
 80063ba:	683b      	ldr	r3, [r7, #0]
 80063bc:	68db      	ldr	r3, [r3, #12]
 80063be:	4313      	orrs	r3, r2
 80063c0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	4a2c      	ldr	r2, [pc, #176]	; (8006478 <HAL_TIMEx_ConfigBreakDeadTime+0x214>)
 80063c6:	401a      	ands	r2, r3
 80063c8:	683b      	ldr	r3, [r7, #0]
 80063ca:	689b      	ldr	r3, [r3, #8]
 80063cc:	4313      	orrs	r3, r2
 80063ce:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	4a2a      	ldr	r2, [pc, #168]	; (800647c <HAL_TIMEx_ConfigBreakDeadTime+0x218>)
 80063d4:	401a      	ands	r2, r3
 80063d6:	683b      	ldr	r3, [r7, #0]
 80063d8:	685b      	ldr	r3, [r3, #4]
 80063da:	4313      	orrs	r3, r2
 80063dc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	4a27      	ldr	r2, [pc, #156]	; (8006480 <HAL_TIMEx_ConfigBreakDeadTime+0x21c>)
 80063e2:	401a      	ands	r2, r3
 80063e4:	683b      	ldr	r3, [r7, #0]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	4313      	orrs	r3, r2
 80063ea:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	4a25      	ldr	r2, [pc, #148]	; (8006484 <HAL_TIMEx_ConfigBreakDeadTime+0x220>)
 80063f0:	401a      	ands	r2, r3
 80063f2:	683b      	ldr	r3, [r7, #0]
 80063f4:	691b      	ldr	r3, [r3, #16]
 80063f6:	4313      	orrs	r3, r2
 80063f8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	4a22      	ldr	r2, [pc, #136]	; (8006488 <HAL_TIMEx_ConfigBreakDeadTime+0x224>)
 80063fe:	401a      	ands	r2, r3
 8006400:	683b      	ldr	r3, [r7, #0]
 8006402:	695b      	ldr	r3, [r3, #20]
 8006404:	4313      	orrs	r3, r2
 8006406:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	4a20      	ldr	r2, [pc, #128]	; (800648c <HAL_TIMEx_ConfigBreakDeadTime+0x228>)
 800640c:	401a      	ands	r2, r3
 800640e:	683b      	ldr	r3, [r7, #0]
 8006410:	699b      	ldr	r3, [r3, #24]
 8006412:	4313      	orrs	r3, r2
 8006414:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_MOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	4a1d      	ldr	r2, [pc, #116]	; (8006490 <HAL_TIMEx_ConfigBreakDeadTime+0x22c>)
 800641a:	401a      	ands	r2, r3
 800641c:	683b      	ldr	r3, [r7, #0]
 800641e:	699b      	ldr	r3, [r3, #24]
 8006420:	4313      	orrs	r3, r2
 8006422:	60fb      	str	r3, [r7, #12]
  
  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	68fa      	ldr	r2, [r7, #12]
 800642a:	645a      	str	r2, [r3, #68]	; 0x44
  
  htim->State = HAL_TIM_STATE_READY;
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	223d      	movs	r2, #61	; 0x3d
 8006430:	2101      	movs	r1, #1
 8006432:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	223c      	movs	r2, #60	; 0x3c
 8006438:	2100      	movs	r1, #0
 800643a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800643c:	2300      	movs	r3, #0
}
 800643e:	0018      	movs	r0, r3
 8006440:	46bd      	mov	sp, r7
 8006442:	b004      	add	sp, #16
 8006444:	bd80      	pop	{r7, pc}
 8006446:	46c0      	nop			; (mov r8, r8)
 8006448:	40012c00 	.word	0x40012c00
 800644c:	40014000 	.word	0x40014000
 8006450:	40014400 	.word	0x40014400
 8006454:	40014800 	.word	0x40014800
 8006458:	08007190 	.word	0x08007190
 800645c:	00000671 	.word	0x00000671
 8006460:	00000672 	.word	0x00000672
 8006464:	00000673 	.word	0x00000673
 8006468:	00000674 	.word	0x00000674
 800646c:	00000675 	.word	0x00000675
 8006470:	00000676 	.word	0x00000676
 8006474:	00000677 	.word	0x00000677
 8006478:	fffffcff 	.word	0xfffffcff
 800647c:	fffffbff 	.word	0xfffffbff
 8006480:	fffff7ff 	.word	0xfffff7ff
 8006484:	ffffefff 	.word	0xffffefff
 8006488:	ffffdfff 	.word	0xffffdfff
 800648c:	ffffbfff 	.word	0xffffbfff
 8006490:	ffff7fff 	.word	0xffff7fff

08006494 <HAL_TIMEx_CommutationCallback>:
  * @brief  Hall commutation changed callback in non blocking mode 
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutationCallback(TIM_HandleTypeDef *htim)
{
 8006494:	b580      	push	{r7, lr}
 8006496:	b082      	sub	sp, #8
 8006498:	af00      	add	r7, sp, #0
 800649a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutationCallback could be implemented in the user file
   */
}
 800649c:	46c0      	nop			; (mov r8, r8)
 800649e:	46bd      	mov	sp, r7
 80064a0:	b002      	add	sp, #8
 80064a2:	bd80      	pop	{r7, pc}

080064a4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non blocking mode 
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80064a4:	b580      	push	{r7, lr}
 80064a6:	b082      	sub	sp, #8
 80064a8:	af00      	add	r7, sp, #0
 80064aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80064ac:	46c0      	nop			; (mov r8, r8)
 80064ae:	46bd      	mov	sp, r7
 80064b0:	b002      	add	sp, #8
 80064b2:	bd80      	pop	{r7, pc}

080064b4 <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef* TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 80064b4:	b580      	push	{r7, lr}
 80064b6:	b086      	sub	sp, #24
 80064b8:	af00      	add	r7, sp, #0
 80064ba:	60f8      	str	r0, [r7, #12]
 80064bc:	60b9      	str	r1, [r7, #8]
 80064be:	607a      	str	r2, [r7, #4]
  uint32_t tmp = 0U;
 80064c0:	2300      	movs	r3, #0
 80064c2:	617b      	str	r3, [r7, #20]

  tmp = TIM_CCER_CC1NE << Channel;
 80064c4:	2204      	movs	r2, #4
 80064c6:	68bb      	ldr	r3, [r7, #8]
 80064c8:	409a      	lsls	r2, r3
 80064ca:	0013      	movs	r3, r2
 80064cc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 80064ce:	68fb      	ldr	r3, [r7, #12]
 80064d0:	6a1b      	ldr	r3, [r3, #32]
 80064d2:	697a      	ldr	r2, [r7, #20]
 80064d4:	43d2      	mvns	r2, r2
 80064d6:	401a      	ands	r2, r3
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |=  (uint32_t)(ChannelNState << Channel);
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	6a1a      	ldr	r2, [r3, #32]
 80064e0:	6879      	ldr	r1, [r7, #4]
 80064e2:	68bb      	ldr	r3, [r7, #8]
 80064e4:	4099      	lsls	r1, r3
 80064e6:	000b      	movs	r3, r1
 80064e8:	431a      	orrs	r2, r3
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	621a      	str	r2, [r3, #32]
}
 80064ee:	46c0      	nop			; (mov r8, r8)
 80064f0:	46bd      	mov	sp, r7
 80064f2:	b006      	add	sp, #24
 80064f4:	bd80      	pop	{r7, pc}
	...

080064f8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80064f8:	b580      	push	{r7, lr}
 80064fa:	b082      	sub	sp, #8
 80064fc:	af00      	add	r7, sp, #0
 80064fe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if(huart == NULL)
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	2b00      	cmp	r3, #0
 8006504:	d101      	bne.n	800650a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006506:	2301      	movs	r3, #1
 8006508:	e06f      	b.n	80065ea <HAL_UART_Init+0xf2>
  }

  if(huart->Init.HwFlowCtl != UART_HWCONTROL_NONE)
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	699b      	ldr	r3, [r3, #24]
 800650e:	2b00      	cmp	r3, #0
 8006510:	d011      	beq.n	8006536 <HAL_UART_Init+0x3e>
  {
    /* Check the parameters */
    assert_param(IS_UART_HWFLOW_INSTANCE(huart->Instance));
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	4a37      	ldr	r2, [pc, #220]	; (80065f4 <HAL_UART_Init+0xfc>)
 8006518:	4293      	cmp	r3, r2
 800651a:	d01e      	beq.n	800655a <HAL_UART_Init+0x62>
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	4a35      	ldr	r2, [pc, #212]	; (80065f8 <HAL_UART_Init+0x100>)
 8006522:	4293      	cmp	r3, r2
 8006524:	d019      	beq.n	800655a <HAL_UART_Init+0x62>
 8006526:	2397      	movs	r3, #151	; 0x97
 8006528:	005a      	lsls	r2, r3, #1
 800652a:	4b34      	ldr	r3, [pc, #208]	; (80065fc <HAL_UART_Init+0x104>)
 800652c:	0011      	movs	r1, r2
 800652e:	0018      	movs	r0, r3
 8006530:	f7fa fa0f 	bl	8000952 <assert_failed>
 8006534:	e011      	b.n	800655a <HAL_UART_Init+0x62>
  }
  else
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	4a2e      	ldr	r2, [pc, #184]	; (80065f4 <HAL_UART_Init+0xfc>)
 800653c:	4293      	cmp	r3, r2
 800653e:	d00c      	beq.n	800655a <HAL_UART_Init+0x62>
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	4a2c      	ldr	r2, [pc, #176]	; (80065f8 <HAL_UART_Init+0x100>)
 8006546:	4293      	cmp	r3, r2
 8006548:	d007      	beq.n	800655a <HAL_UART_Init+0x62>
 800654a:	2334      	movs	r3, #52	; 0x34
 800654c:	33ff      	adds	r3, #255	; 0xff
 800654e:	001a      	movs	r2, r3
 8006550:	4b2a      	ldr	r3, [pc, #168]	; (80065fc <HAL_UART_Init+0x104>)
 8006552:	0011      	movs	r1, r2
 8006554:	0018      	movs	r0, r3
 8006556:	f7fa f9fc 	bl	8000952 <assert_failed>
  }

  if(huart->gState == HAL_UART_STATE_RESET)
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	2269      	movs	r2, #105	; 0x69
 800655e:	5c9b      	ldrb	r3, [r3, r2]
 8006560:	b2db      	uxtb	r3, r3
 8006562:	2b00      	cmp	r3, #0
 8006564:	d107      	bne.n	8006576 <HAL_UART_Init+0x7e>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	2268      	movs	r2, #104	; 0x68
 800656a:	2100      	movs	r1, #0
 800656c:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	0018      	movs	r0, r3
 8006572:	f7fa fd07 	bl	8000f84 <HAL_UART_MspInit>
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	2269      	movs	r2, #105	; 0x69
 800657a:	2124      	movs	r1, #36	; 0x24
 800657c:	5499      	strb	r1, [r3, r2]

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	681a      	ldr	r2, [r3, #0]
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	2101      	movs	r1, #1
 800658a:	438a      	bics	r2, r1
 800658c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	0018      	movs	r0, r3
 8006592:	f000 f837 	bl	8006604 <UART_SetConfig>
 8006596:	0003      	movs	r3, r0
 8006598:	2b01      	cmp	r3, #1
 800659a:	d101      	bne.n	80065a0 <HAL_UART_Init+0xa8>
  {
    return HAL_ERROR;
 800659c:	2301      	movs	r3, #1
 800659e:	e024      	b.n	80065ea <HAL_UART_Init+0xf2>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065a4:	2b00      	cmp	r3, #0
 80065a6:	d003      	beq.n	80065b0 <HAL_UART_Init+0xb8>
  {
    UART_AdvFeatureConfig(huart);
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	0018      	movs	r0, r3
 80065ac:	f000 fa4c 	bl	8006a48 <UART_AdvFeatureConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register. */
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	685a      	ldr	r2, [r3, #4]
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	4911      	ldr	r1, [pc, #68]	; (8006600 <HAL_UART_Init+0x108>)
 80065bc:	400a      	ands	r2, r1
 80065be:	605a      	str	r2, [r3, #4]
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
#endif
#if defined (USART_CR3_SCEN)
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	689a      	ldr	r2, [r3, #8]
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	212a      	movs	r1, #42	; 0x2a
 80065cc:	438a      	bics	r2, r1
 80065ce:	609a      	str	r2, [r3, #8]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
#endif
#endif

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	681a      	ldr	r2, [r3, #0]
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	2101      	movs	r1, #1
 80065dc:	430a      	orrs	r2, r1
 80065de:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	0018      	movs	r0, r3
 80065e4:	f000 fba4 	bl	8006d30 <UART_CheckIdleState>
 80065e8:	0003      	movs	r3, r0
}
 80065ea:	0018      	movs	r0, r3
 80065ec:	46bd      	mov	sp, r7
 80065ee:	b002      	add	sp, #8
 80065f0:	bd80      	pop	{r7, pc}
 80065f2:	46c0      	nop			; (mov r8, r8)
 80065f4:	40013800 	.word	0x40013800
 80065f8:	40004400 	.word	0x40004400
 80065fc:	080071cc 	.word	0x080071cc
 8006600:	ffffb7ff 	.word	0xffffb7ff

08006604 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006604:	b590      	push	{r4, r7, lr}
 8006606:	b087      	sub	sp, #28
 8006608:	af00      	add	r7, sp, #0
 800660a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg                     = 0x00000000U;
 800660c:	2300      	movs	r3, #0
 800660e:	60fb      	str	r3, [r7, #12]
  UART_ClockSourceTypeDef clocksource = UART_CLOCKSOURCE_UNDEFINED;
 8006610:	2317      	movs	r3, #23
 8006612:	18fb      	adds	r3, r7, r3
 8006614:	2210      	movs	r2, #16
 8006616:	701a      	strb	r2, [r3, #0]
  uint16_t brrtemp                    = 0x0000U;
 8006618:	230a      	movs	r3, #10
 800661a:	18fb      	adds	r3, r7, r3
 800661c:	2200      	movs	r2, #0
 800661e:	801a      	strh	r2, [r3, #0]
  uint16_t usartdiv                   = 0x0000U;
 8006620:	2314      	movs	r3, #20
 8006622:	18fb      	adds	r3, r7, r3
 8006624:	2200      	movs	r2, #0
 8006626:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef ret               = HAL_OK;
 8006628:	2313      	movs	r3, #19
 800662a:	18fb      	adds	r3, r7, r3
 800662c:	2200      	movs	r2, #0
 800662e:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	685b      	ldr	r3, [r3, #4]
 8006634:	4ac7      	ldr	r2, [pc, #796]	; (8006954 <UART_SetConfig+0x350>)
 8006636:	4293      	cmp	r3, r2
 8006638:	d905      	bls.n	8006646 <UART_SetConfig+0x42>
 800663a:	4ac7      	ldr	r2, [pc, #796]	; (8006958 <UART_SetConfig+0x354>)
 800663c:	4bc7      	ldr	r3, [pc, #796]	; (800695c <UART_SetConfig+0x358>)
 800663e:	0011      	movs	r1, r2
 8006640:	0018      	movs	r0, r3
 8006642:	f7fa f986 	bl	8000952 <assert_failed>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	689b      	ldr	r3, [r3, #8]
 800664a:	2b00      	cmp	r3, #0
 800664c:	d00b      	beq.n	8006666 <UART_SetConfig+0x62>
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	689a      	ldr	r2, [r3, #8]
 8006652:	2380      	movs	r3, #128	; 0x80
 8006654:	015b      	lsls	r3, r3, #5
 8006656:	429a      	cmp	r2, r3
 8006658:	d005      	beq.n	8006666 <UART_SetConfig+0x62>
 800665a:	4ac1      	ldr	r2, [pc, #772]	; (8006960 <UART_SetConfig+0x35c>)
 800665c:	4bbf      	ldr	r3, [pc, #764]	; (800695c <UART_SetConfig+0x358>)
 800665e:	0011      	movs	r1, r2
 8006660:	0018      	movs	r0, r3
 8006662:	f7fa f976 	bl	8000952 <assert_failed>
  assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	68da      	ldr	r2, [r3, #12]
 800666a:	2380      	movs	r3, #128	; 0x80
 800666c:	015b      	lsls	r3, r3, #5
 800666e:	429a      	cmp	r2, r3
 8006670:	d015      	beq.n	800669e <UART_SetConfig+0x9a>
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	68db      	ldr	r3, [r3, #12]
 8006676:	2b00      	cmp	r3, #0
 8006678:	d011      	beq.n	800669e <UART_SetConfig+0x9a>
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	68da      	ldr	r2, [r3, #12]
 800667e:	23c0      	movs	r3, #192	; 0xc0
 8006680:	019b      	lsls	r3, r3, #6
 8006682:	429a      	cmp	r2, r3
 8006684:	d00b      	beq.n	800669e <UART_SetConfig+0x9a>
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	68da      	ldr	r2, [r3, #12]
 800668a:	2380      	movs	r3, #128	; 0x80
 800668c:	019b      	lsls	r3, r3, #6
 800668e:	429a      	cmp	r2, r3
 8006690:	d005      	beq.n	800669e <UART_SetConfig+0x9a>
 8006692:	4ab4      	ldr	r2, [pc, #720]	; (8006964 <UART_SetConfig+0x360>)
 8006694:	4bb1      	ldr	r3, [pc, #708]	; (800695c <UART_SetConfig+0x358>)
 8006696:	0011      	movs	r1, r2
 8006698:	0018      	movs	r0, r3
 800669a:	f7fa f95a 	bl	8000952 <assert_failed>
  assert_param(IS_UART_PARITY(huart->Init.Parity));
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	691b      	ldr	r3, [r3, #16]
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	d011      	beq.n	80066ca <UART_SetConfig+0xc6>
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	691a      	ldr	r2, [r3, #16]
 80066aa:	2380      	movs	r3, #128	; 0x80
 80066ac:	00db      	lsls	r3, r3, #3
 80066ae:	429a      	cmp	r2, r3
 80066b0:	d00b      	beq.n	80066ca <UART_SetConfig+0xc6>
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	691a      	ldr	r2, [r3, #16]
 80066b6:	23c0      	movs	r3, #192	; 0xc0
 80066b8:	00db      	lsls	r3, r3, #3
 80066ba:	429a      	cmp	r2, r3
 80066bc:	d005      	beq.n	80066ca <UART_SetConfig+0xc6>
 80066be:	4aaa      	ldr	r2, [pc, #680]	; (8006968 <UART_SetConfig+0x364>)
 80066c0:	4ba6      	ldr	r3, [pc, #664]	; (800695c <UART_SetConfig+0x358>)
 80066c2:	0011      	movs	r1, r2
 80066c4:	0018      	movs	r0, r3
 80066c6:	f7fa f944 	bl	8000952 <assert_failed>
  assert_param(IS_UART_MODE(huart->Init.Mode));
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	695b      	ldr	r3, [r3, #20]
 80066ce:	220c      	movs	r2, #12
 80066d0:	4393      	bics	r3, r2
 80066d2:	d103      	bne.n	80066dc <UART_SetConfig+0xd8>
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	695b      	ldr	r3, [r3, #20]
 80066d8:	2b00      	cmp	r3, #0
 80066da:	d105      	bne.n	80066e8 <UART_SetConfig+0xe4>
 80066dc:	4aa3      	ldr	r2, [pc, #652]	; (800696c <UART_SetConfig+0x368>)
 80066de:	4b9f      	ldr	r3, [pc, #636]	; (800695c <UART_SetConfig+0x358>)
 80066e0:	0011      	movs	r1, r2
 80066e2:	0018      	movs	r0, r3
 80066e4:	f7fa f935 	bl	8000952 <assert_failed>
  assert_param(IS_UART_HARDWARE_FLOW_CONTROL(huart->Init.HwFlowCtl));
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	699b      	ldr	r3, [r3, #24]
 80066ec:	2b00      	cmp	r3, #0
 80066ee:	d017      	beq.n	8006720 <UART_SetConfig+0x11c>
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	699a      	ldr	r2, [r3, #24]
 80066f4:	2380      	movs	r3, #128	; 0x80
 80066f6:	005b      	lsls	r3, r3, #1
 80066f8:	429a      	cmp	r2, r3
 80066fa:	d011      	beq.n	8006720 <UART_SetConfig+0x11c>
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	699a      	ldr	r2, [r3, #24]
 8006700:	2380      	movs	r3, #128	; 0x80
 8006702:	009b      	lsls	r3, r3, #2
 8006704:	429a      	cmp	r2, r3
 8006706:	d00b      	beq.n	8006720 <UART_SetConfig+0x11c>
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	699a      	ldr	r2, [r3, #24]
 800670c:	23c0      	movs	r3, #192	; 0xc0
 800670e:	009b      	lsls	r3, r3, #2
 8006710:	429a      	cmp	r2, r3
 8006712:	d005      	beq.n	8006720 <UART_SetConfig+0x11c>
 8006714:	4a96      	ldr	r2, [pc, #600]	; (8006970 <UART_SetConfig+0x36c>)
 8006716:	4b91      	ldr	r3, [pc, #580]	; (800695c <UART_SetConfig+0x358>)
 8006718:	0011      	movs	r1, r2
 800671a:	0018      	movs	r0, r3
 800671c:	f7fa f919 	bl	8000952 <assert_failed>
  assert_param(IS_UART_ONE_BIT_SAMPLE(huart->Init.OneBitSampling));
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	6a1b      	ldr	r3, [r3, #32]
 8006724:	2b00      	cmp	r3, #0
 8006726:	d00b      	beq.n	8006740 <UART_SetConfig+0x13c>
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	6a1a      	ldr	r2, [r3, #32]
 800672c:	2380      	movs	r3, #128	; 0x80
 800672e:	011b      	lsls	r3, r3, #4
 8006730:	429a      	cmp	r2, r3
 8006732:	d005      	beq.n	8006740 <UART_SetConfig+0x13c>
 8006734:	4a8f      	ldr	r2, [pc, #572]	; (8006974 <UART_SetConfig+0x370>)
 8006736:	4b89      	ldr	r3, [pc, #548]	; (800695c <UART_SetConfig+0x358>)
 8006738:	0011      	movs	r1, r2
 800673a:	0018      	movs	r0, r3
 800673c:	f7fa f909 	bl	8000952 <assert_failed>
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	69db      	ldr	r3, [r3, #28]
 8006744:	2b00      	cmp	r3, #0
 8006746:	d00b      	beq.n	8006760 <UART_SetConfig+0x15c>
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	69da      	ldr	r2, [r3, #28]
 800674c:	2380      	movs	r3, #128	; 0x80
 800674e:	021b      	lsls	r3, r3, #8
 8006750:	429a      	cmp	r2, r3
 8006752:	d005      	beq.n	8006760 <UART_SetConfig+0x15c>
 8006754:	4a88      	ldr	r2, [pc, #544]	; (8006978 <UART_SetConfig+0x374>)
 8006756:	4b81      	ldr	r3, [pc, #516]	; (800695c <UART_SetConfig+0x358>)
 8006758:	0011      	movs	r1, r2
 800675a:	0018      	movs	r0, r3
 800675c:	f7fa f8f9 	bl	8000952 <assert_failed>
   *  the UART Word Length, Parity, Mode and oversampling:
   *  set the M bits according to huart->Init.WordLength value
   *  set PCE and PS bits according to huart->Init.Parity value
   *  set TE and RE bits according to huart->Init.Mode value
   *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	689a      	ldr	r2, [r3, #8]
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	691b      	ldr	r3, [r3, #16]
 8006768:	431a      	orrs	r2, r3
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	695b      	ldr	r3, [r3, #20]
 800676e:	431a      	orrs	r2, r3
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	69db      	ldr	r3, [r3, #28]
 8006774:	4313      	orrs	r3, r2
 8006776:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	4a7f      	ldr	r2, [pc, #508]	; (800697c <UART_SetConfig+0x378>)
 8006780:	4013      	ands	r3, r2
 8006782:	0019      	movs	r1, r3
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	68fa      	ldr	r2, [r7, #12]
 800678a:	430a      	orrs	r2, r1
 800678c:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
   * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	685b      	ldr	r3, [r3, #4]
 8006794:	4a7a      	ldr	r2, [pc, #488]	; (8006980 <UART_SetConfig+0x37c>)
 8006796:	4013      	ands	r3, r2
 8006798:	0019      	movs	r1, r3
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	68da      	ldr	r2, [r3, #12]
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	430a      	orrs	r2, r1
 80067a4:	605a      	str	r2, [r3, #4]
  /* Configure
   * - UART HardWare Flow Control: set CTSE and RTSE bits according
   *   to huart->Init.HwFlowCtl value
   * - one-bit sampling method versus three samples' majority rule according
   *   to huart->Init.OneBitSampling */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	699a      	ldr	r2, [r3, #24]
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	6a1b      	ldr	r3, [r3, #32]
 80067ae:	4313      	orrs	r3, r2
 80067b0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	689b      	ldr	r3, [r3, #8]
 80067b8:	4a72      	ldr	r2, [pc, #456]	; (8006984 <UART_SetConfig+0x380>)
 80067ba:	4013      	ands	r3, r2
 80067bc:	0019      	movs	r1, r3
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	68fa      	ldr	r2, [r7, #12]
 80067c4:	430a      	orrs	r2, r1
 80067c6:	609a      	str	r2, [r3, #8]

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	4a6e      	ldr	r2, [pc, #440]	; (8006988 <UART_SetConfig+0x384>)
 80067ce:	4293      	cmp	r3, r2
 80067d0:	d125      	bne.n	800681e <UART_SetConfig+0x21a>
 80067d2:	4b6e      	ldr	r3, [pc, #440]	; (800698c <UART_SetConfig+0x388>)
 80067d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80067d6:	2203      	movs	r2, #3
 80067d8:	4013      	ands	r3, r2
 80067da:	2b01      	cmp	r3, #1
 80067dc:	d00f      	beq.n	80067fe <UART_SetConfig+0x1fa>
 80067de:	d304      	bcc.n	80067ea <UART_SetConfig+0x1e6>
 80067e0:	2b02      	cmp	r3, #2
 80067e2:	d011      	beq.n	8006808 <UART_SetConfig+0x204>
 80067e4:	2b03      	cmp	r3, #3
 80067e6:	d005      	beq.n	80067f4 <UART_SetConfig+0x1f0>
 80067e8:	e013      	b.n	8006812 <UART_SetConfig+0x20e>
 80067ea:	2317      	movs	r3, #23
 80067ec:	18fb      	adds	r3, r7, r3
 80067ee:	2200      	movs	r2, #0
 80067f0:	701a      	strb	r2, [r3, #0]
 80067f2:	e022      	b.n	800683a <UART_SetConfig+0x236>
 80067f4:	2317      	movs	r3, #23
 80067f6:	18fb      	adds	r3, r7, r3
 80067f8:	2202      	movs	r2, #2
 80067fa:	701a      	strb	r2, [r3, #0]
 80067fc:	e01d      	b.n	800683a <UART_SetConfig+0x236>
 80067fe:	2317      	movs	r3, #23
 8006800:	18fb      	adds	r3, r7, r3
 8006802:	2204      	movs	r2, #4
 8006804:	701a      	strb	r2, [r3, #0]
 8006806:	e018      	b.n	800683a <UART_SetConfig+0x236>
 8006808:	2317      	movs	r3, #23
 800680a:	18fb      	adds	r3, r7, r3
 800680c:	2208      	movs	r2, #8
 800680e:	701a      	strb	r2, [r3, #0]
 8006810:	e013      	b.n	800683a <UART_SetConfig+0x236>
 8006812:	2317      	movs	r3, #23
 8006814:	18fb      	adds	r3, r7, r3
 8006816:	2210      	movs	r2, #16
 8006818:	701a      	strb	r2, [r3, #0]
 800681a:	46c0      	nop			; (mov r8, r8)
 800681c:	e00d      	b.n	800683a <UART_SetConfig+0x236>
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	4a5b      	ldr	r2, [pc, #364]	; (8006990 <UART_SetConfig+0x38c>)
 8006824:	4293      	cmp	r3, r2
 8006826:	d104      	bne.n	8006832 <UART_SetConfig+0x22e>
 8006828:	2317      	movs	r3, #23
 800682a:	18fb      	adds	r3, r7, r3
 800682c:	2200      	movs	r2, #0
 800682e:	701a      	strb	r2, [r3, #0]
 8006830:	e003      	b.n	800683a <UART_SetConfig+0x236>
 8006832:	2317      	movs	r3, #23
 8006834:	18fb      	adds	r3, r7, r3
 8006836:	2210      	movs	r2, #16
 8006838:	701a      	strb	r2, [r3, #0]
  
  /* Check UART Over Sampling to set Baud Rate Register */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	69da      	ldr	r2, [r3, #28]
 800683e:	2380      	movs	r3, #128	; 0x80
 8006840:	021b      	lsls	r3, r3, #8
 8006842:	429a      	cmp	r2, r3
 8006844:	d000      	beq.n	8006848 <UART_SetConfig+0x244>
 8006846:	e077      	b.n	8006938 <UART_SetConfig+0x334>
  {
    switch (clocksource)
 8006848:	2317      	movs	r3, #23
 800684a:	18fb      	adds	r3, r7, r3
 800684c:	781b      	ldrb	r3, [r3, #0]
 800684e:	2b02      	cmp	r3, #2
 8006850:	d01c      	beq.n	800688c <UART_SetConfig+0x288>
 8006852:	dc02      	bgt.n	800685a <UART_SetConfig+0x256>
 8006854:	2b00      	cmp	r3, #0
 8006856:	d005      	beq.n	8006864 <UART_SetConfig+0x260>
 8006858:	e04f      	b.n	80068fa <UART_SetConfig+0x2f6>
 800685a:	2b04      	cmp	r3, #4
 800685c:	d027      	beq.n	80068ae <UART_SetConfig+0x2aa>
 800685e:	2b08      	cmp	r3, #8
 8006860:	d039      	beq.n	80068d6 <UART_SetConfig+0x2d2>
 8006862:	e04a      	b.n	80068fa <UART_SetConfig+0x2f6>
    {
      case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8006864:	f7fd fcea 	bl	800423c <HAL_RCC_GetPCLK1Freq>
 8006868:	0003      	movs	r3, r0
 800686a:	005a      	lsls	r2, r3, #1
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	685b      	ldr	r3, [r3, #4]
 8006870:	085b      	lsrs	r3, r3, #1
 8006872:	18d2      	adds	r2, r2, r3
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	685b      	ldr	r3, [r3, #4]
 8006878:	0019      	movs	r1, r3
 800687a:	0010      	movs	r0, r2
 800687c:	f7f9 fc44 	bl	8000108 <__udivsi3>
 8006880:	0003      	movs	r3, r0
 8006882:	001a      	movs	r2, r3
 8006884:	2314      	movs	r3, #20
 8006886:	18fb      	adds	r3, r7, r3
 8006888:	801a      	strh	r2, [r3, #0]
        break;
 800688a:	e03b      	b.n	8006904 <UART_SetConfig+0x300>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	685b      	ldr	r3, [r3, #4]
 8006890:	085b      	lsrs	r3, r3, #1
 8006892:	4a40      	ldr	r2, [pc, #256]	; (8006994 <UART_SetConfig+0x390>)
 8006894:	189a      	adds	r2, r3, r2
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	685b      	ldr	r3, [r3, #4]
 800689a:	0019      	movs	r1, r3
 800689c:	0010      	movs	r0, r2
 800689e:	f7f9 fc33 	bl	8000108 <__udivsi3>
 80068a2:	0003      	movs	r3, r0
 80068a4:	001a      	movs	r2, r3
 80068a6:	2314      	movs	r3, #20
 80068a8:	18fb      	adds	r3, r7, r3
 80068aa:	801a      	strh	r2, [r3, #0]
        break;
 80068ac:	e02a      	b.n	8006904 <UART_SetConfig+0x300>
      case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 80068ae:	f7fd fc57 	bl	8004160 <HAL_RCC_GetSysClockFreq>
 80068b2:	0003      	movs	r3, r0
 80068b4:	005a      	lsls	r2, r3, #1
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	685b      	ldr	r3, [r3, #4]
 80068ba:	085b      	lsrs	r3, r3, #1
 80068bc:	18d2      	adds	r2, r2, r3
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	685b      	ldr	r3, [r3, #4]
 80068c2:	0019      	movs	r1, r3
 80068c4:	0010      	movs	r0, r2
 80068c6:	f7f9 fc1f 	bl	8000108 <__udivsi3>
 80068ca:	0003      	movs	r3, r0
 80068cc:	001a      	movs	r2, r3
 80068ce:	2314      	movs	r3, #20
 80068d0:	18fb      	adds	r3, r7, r3
 80068d2:	801a      	strh	r2, [r3, #0]
        break;
 80068d4:	e016      	b.n	8006904 <UART_SetConfig+0x300>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	685b      	ldr	r3, [r3, #4]
 80068da:	085b      	lsrs	r3, r3, #1
 80068dc:	2280      	movs	r2, #128	; 0x80
 80068de:	0252      	lsls	r2, r2, #9
 80068e0:	189a      	adds	r2, r3, r2
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	685b      	ldr	r3, [r3, #4]
 80068e6:	0019      	movs	r1, r3
 80068e8:	0010      	movs	r0, r2
 80068ea:	f7f9 fc0d 	bl	8000108 <__udivsi3>
 80068ee:	0003      	movs	r3, r0
 80068f0:	001a      	movs	r2, r3
 80068f2:	2314      	movs	r3, #20
 80068f4:	18fb      	adds	r3, r7, r3
 80068f6:	801a      	strh	r2, [r3, #0]
        break;
 80068f8:	e004      	b.n	8006904 <UART_SetConfig+0x300>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 80068fa:	2313      	movs	r3, #19
 80068fc:	18fb      	adds	r3, r7, r3
 80068fe:	2201      	movs	r2, #1
 8006900:	701a      	strb	r2, [r3, #0]
        break;
 8006902:	46c0      	nop			; (mov r8, r8)
    }

    brrtemp = usartdiv & 0xFFF0U;
 8006904:	200a      	movs	r0, #10
 8006906:	183b      	adds	r3, r7, r0
 8006908:	2414      	movs	r4, #20
 800690a:	193a      	adds	r2, r7, r4
 800690c:	8812      	ldrh	r2, [r2, #0]
 800690e:	210f      	movs	r1, #15
 8006910:	438a      	bics	r2, r1
 8006912:	801a      	strh	r2, [r3, #0]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006914:	193b      	adds	r3, r7, r4
 8006916:	881b      	ldrh	r3, [r3, #0]
 8006918:	105b      	asrs	r3, r3, #1
 800691a:	b29b      	uxth	r3, r3
 800691c:	2207      	movs	r2, #7
 800691e:	4013      	ands	r3, r2
 8006920:	b299      	uxth	r1, r3
 8006922:	183b      	adds	r3, r7, r0
 8006924:	183a      	adds	r2, r7, r0
 8006926:	8812      	ldrh	r2, [r2, #0]
 8006928:	430a      	orrs	r2, r1
 800692a:	801a      	strh	r2, [r3, #0]
    huart->Instance->BRR = brrtemp;
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	183a      	adds	r2, r7, r0
 8006932:	8812      	ldrh	r2, [r2, #0]
 8006934:	60da      	str	r2, [r3, #12]
 8006936:	e07d      	b.n	8006a34 <UART_SetConfig+0x430>
  }
  else
  {
    switch (clocksource)
 8006938:	2317      	movs	r3, #23
 800693a:	18fb      	adds	r3, r7, r3
 800693c:	781b      	ldrb	r3, [r3, #0]
 800693e:	2b02      	cmp	r3, #2
 8006940:	d03d      	beq.n	80069be <UART_SetConfig+0x3ba>
 8006942:	dc02      	bgt.n	800694a <UART_SetConfig+0x346>
 8006944:	2b00      	cmp	r3, #0
 8006946:	d027      	beq.n	8006998 <UART_SetConfig+0x394>
 8006948:	e06f      	b.n	8006a2a <UART_SetConfig+0x426>
 800694a:	2b04      	cmp	r3, #4
 800694c:	d048      	beq.n	80069e0 <UART_SetConfig+0x3dc>
 800694e:	2b08      	cmp	r3, #8
 8006950:	d059      	beq.n	8006a06 <UART_SetConfig+0x402>
 8006952:	e06a      	b.n	8006a2a <UART_SetConfig+0x426>
 8006954:	005b8d80 	.word	0x005b8d80
 8006958:	00000846 	.word	0x00000846
 800695c:	080071cc 	.word	0x080071cc
 8006960:	00000847 	.word	0x00000847
 8006964:	00000848 	.word	0x00000848
 8006968:	00000849 	.word	0x00000849
 800696c:	0000084a 	.word	0x0000084a
 8006970:	0000084b 	.word	0x0000084b
 8006974:	0000084c 	.word	0x0000084c
 8006978:	0000084d 	.word	0x0000084d
 800697c:	ffff69f3 	.word	0xffff69f3
 8006980:	ffffcfff 	.word	0xffffcfff
 8006984:	fffff4ff 	.word	0xfffff4ff
 8006988:	40013800 	.word	0x40013800
 800698c:	40021000 	.word	0x40021000
 8006990:	40004400 	.word	0x40004400
 8006994:	00f42400 	.word	0x00f42400
    {
      case UART_CLOCKSOURCE_PCLK1:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8006998:	f7fd fc50 	bl	800423c <HAL_RCC_GetPCLK1Freq>
 800699c:	0002      	movs	r2, r0
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	685b      	ldr	r3, [r3, #4]
 80069a2:	085b      	lsrs	r3, r3, #1
 80069a4:	18d2      	adds	r2, r2, r3
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	685b      	ldr	r3, [r3, #4]
 80069aa:	0019      	movs	r1, r3
 80069ac:	0010      	movs	r0, r2
 80069ae:	f7f9 fbab 	bl	8000108 <__udivsi3>
 80069b2:	0003      	movs	r3, r0
 80069b4:	b29a      	uxth	r2, r3
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	60da      	str	r2, [r3, #12]
        break;
 80069bc:	e03a      	b.n	8006a34 <UART_SetConfig+0x430>
      case UART_CLOCKSOURCE_HSI:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	685b      	ldr	r3, [r3, #4]
 80069c2:	085b      	lsrs	r3, r3, #1
 80069c4:	4a1f      	ldr	r2, [pc, #124]	; (8006a44 <UART_SetConfig+0x440>)
 80069c6:	189a      	adds	r2, r3, r2
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	685b      	ldr	r3, [r3, #4]
 80069cc:	0019      	movs	r1, r3
 80069ce:	0010      	movs	r0, r2
 80069d0:	f7f9 fb9a 	bl	8000108 <__udivsi3>
 80069d4:	0003      	movs	r3, r0
 80069d6:	b29a      	uxth	r2, r3
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	60da      	str	r2, [r3, #12]
        break;
 80069de:	e029      	b.n	8006a34 <UART_SetConfig+0x430>
      case UART_CLOCKSOURCE_SYSCLK:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 80069e0:	f7fd fbbe 	bl	8004160 <HAL_RCC_GetSysClockFreq>
 80069e4:	0002      	movs	r2, r0
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	685b      	ldr	r3, [r3, #4]
 80069ea:	085b      	lsrs	r3, r3, #1
 80069ec:	18d2      	adds	r2, r2, r3
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	685b      	ldr	r3, [r3, #4]
 80069f2:	0019      	movs	r1, r3
 80069f4:	0010      	movs	r0, r2
 80069f6:	f7f9 fb87 	bl	8000108 <__udivsi3>
 80069fa:	0003      	movs	r3, r0
 80069fc:	b29a      	uxth	r2, r3
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	60da      	str	r2, [r3, #12]
        break;
 8006a04:	e016      	b.n	8006a34 <UART_SetConfig+0x430>
      case UART_CLOCKSOURCE_LSE:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	685b      	ldr	r3, [r3, #4]
 8006a0a:	085b      	lsrs	r3, r3, #1
 8006a0c:	2280      	movs	r2, #128	; 0x80
 8006a0e:	0212      	lsls	r2, r2, #8
 8006a10:	189a      	adds	r2, r3, r2
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	685b      	ldr	r3, [r3, #4]
 8006a16:	0019      	movs	r1, r3
 8006a18:	0010      	movs	r0, r2
 8006a1a:	f7f9 fb75 	bl	8000108 <__udivsi3>
 8006a1e:	0003      	movs	r3, r0
 8006a20:	b29a      	uxth	r2, r3
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	60da      	str	r2, [r3, #12]
        break;
 8006a28:	e004      	b.n	8006a34 <UART_SetConfig+0x430>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8006a2a:	2313      	movs	r3, #19
 8006a2c:	18fb      	adds	r3, r7, r3
 8006a2e:	2201      	movs	r2, #1
 8006a30:	701a      	strb	r2, [r3, #0]
        break;
 8006a32:	46c0      	nop			; (mov r8, r8)
    }
  }

  return ret;
 8006a34:	2313      	movs	r3, #19
 8006a36:	18fb      	adds	r3, r7, r3
 8006a38:	781b      	ldrb	r3, [r3, #0]

}
 8006a3a:	0018      	movs	r0, r3
 8006a3c:	46bd      	mov	sp, r7
 8006a3e:	b007      	add	sp, #28
 8006a40:	bd90      	pop	{r4, r7, pc}
 8006a42:	46c0      	nop			; (mov r8, r8)
 8006a44:	007a1200 	.word	0x007a1200

08006a48 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006a48:	b580      	push	{r7, lr}
 8006a4a:	b082      	sub	sp, #8
 8006a4c:	af00      	add	r7, sp, #0
 8006a4e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a54:	2bff      	cmp	r3, #255	; 0xff
 8006a56:	d905      	bls.n	8006a64 <UART_AdvFeatureConfig+0x1c>
 8006a58:	4a9f      	ldr	r2, [pc, #636]	; (8006cd8 <UART_AdvFeatureConfig+0x290>)
 8006a5a:	4ba0      	ldr	r3, [pc, #640]	; (8006cdc <UART_AdvFeatureConfig+0x294>)
 8006a5c:	0011      	movs	r1, r2
 8006a5e:	0018      	movs	r0, r3
 8006a60:	f7f9 ff77 	bl	8000952 <assert_failed>

  /* if required, configure TX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a68:	2201      	movs	r2, #1
 8006a6a:	4013      	ands	r3, r2
 8006a6c:	d01b      	beq.n	8006aa6 <UART_AdvFeatureConfig+0x5e>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a72:	2b00      	cmp	r3, #0
 8006a74:	d00b      	beq.n	8006a8e <UART_AdvFeatureConfig+0x46>
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006a7a:	2380      	movs	r3, #128	; 0x80
 8006a7c:	029b      	lsls	r3, r3, #10
 8006a7e:	429a      	cmp	r2, r3
 8006a80:	d005      	beq.n	8006a8e <UART_AdvFeatureConfig+0x46>
 8006a82:	4a97      	ldr	r2, [pc, #604]	; (8006ce0 <UART_AdvFeatureConfig+0x298>)
 8006a84:	4b95      	ldr	r3, [pc, #596]	; (8006cdc <UART_AdvFeatureConfig+0x294>)
 8006a86:	0011      	movs	r1, r2
 8006a88:	0018      	movs	r0, r3
 8006a8a:	f7f9 ff62 	bl	8000952 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	685b      	ldr	r3, [r3, #4]
 8006a94:	4a93      	ldr	r2, [pc, #588]	; (8006ce4 <UART_AdvFeatureConfig+0x29c>)
 8006a96:	4013      	ands	r3, r2
 8006a98:	0019      	movs	r1, r3
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	430a      	orrs	r2, r1
 8006aa4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006aaa:	2202      	movs	r2, #2
 8006aac:	4013      	ands	r3, r2
 8006aae:	d01b      	beq.n	8006ae8 <UART_AdvFeatureConfig+0xa0>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ab4:	2b00      	cmp	r3, #0
 8006ab6:	d00b      	beq.n	8006ad0 <UART_AdvFeatureConfig+0x88>
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006abc:	2380      	movs	r3, #128	; 0x80
 8006abe:	025b      	lsls	r3, r3, #9
 8006ac0:	429a      	cmp	r2, r3
 8006ac2:	d005      	beq.n	8006ad0 <UART_AdvFeatureConfig+0x88>
 8006ac4:	4a88      	ldr	r2, [pc, #544]	; (8006ce8 <UART_AdvFeatureConfig+0x2a0>)
 8006ac6:	4b85      	ldr	r3, [pc, #532]	; (8006cdc <UART_AdvFeatureConfig+0x294>)
 8006ac8:	0011      	movs	r1, r2
 8006aca:	0018      	movs	r0, r3
 8006acc:	f7f9 ff41 	bl	8000952 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	685b      	ldr	r3, [r3, #4]
 8006ad6:	4a85      	ldr	r2, [pc, #532]	; (8006cec <UART_AdvFeatureConfig+0x2a4>)
 8006ad8:	4013      	ands	r3, r2
 8006ada:	0019      	movs	r1, r3
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	430a      	orrs	r2, r1
 8006ae6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006aec:	2204      	movs	r2, #4
 8006aee:	4013      	ands	r3, r2
 8006af0:	d01b      	beq.n	8006b2a <UART_AdvFeatureConfig+0xe2>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006af6:	2b00      	cmp	r3, #0
 8006af8:	d00b      	beq.n	8006b12 <UART_AdvFeatureConfig+0xca>
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006afe:	2380      	movs	r3, #128	; 0x80
 8006b00:	02db      	lsls	r3, r3, #11
 8006b02:	429a      	cmp	r2, r3
 8006b04:	d005      	beq.n	8006b12 <UART_AdvFeatureConfig+0xca>
 8006b06:	4a7a      	ldr	r2, [pc, #488]	; (8006cf0 <UART_AdvFeatureConfig+0x2a8>)
 8006b08:	4b74      	ldr	r3, [pc, #464]	; (8006cdc <UART_AdvFeatureConfig+0x294>)
 8006b0a:	0011      	movs	r1, r2
 8006b0c:	0018      	movs	r0, r3
 8006b0e:	f7f9 ff20 	bl	8000952 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	685b      	ldr	r3, [r3, #4]
 8006b18:	4a76      	ldr	r2, [pc, #472]	; (8006cf4 <UART_AdvFeatureConfig+0x2ac>)
 8006b1a:	4013      	ands	r3, r2
 8006b1c:	0019      	movs	r1, r3
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	430a      	orrs	r2, r1
 8006b28:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b2e:	2208      	movs	r2, #8
 8006b30:	4013      	ands	r3, r2
 8006b32:	d01b      	beq.n	8006b6c <UART_AdvFeatureConfig+0x124>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006b38:	2b00      	cmp	r3, #0
 8006b3a:	d00b      	beq.n	8006b54 <UART_AdvFeatureConfig+0x10c>
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006b40:	2380      	movs	r3, #128	; 0x80
 8006b42:	021b      	lsls	r3, r3, #8
 8006b44:	429a      	cmp	r2, r3
 8006b46:	d005      	beq.n	8006b54 <UART_AdvFeatureConfig+0x10c>
 8006b48:	4a6b      	ldr	r2, [pc, #428]	; (8006cf8 <UART_AdvFeatureConfig+0x2b0>)
 8006b4a:	4b64      	ldr	r3, [pc, #400]	; (8006cdc <UART_AdvFeatureConfig+0x294>)
 8006b4c:	0011      	movs	r1, r2
 8006b4e:	0018      	movs	r0, r3
 8006b50:	f7f9 feff 	bl	8000952 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	685b      	ldr	r3, [r3, #4]
 8006b5a:	4a68      	ldr	r2, [pc, #416]	; (8006cfc <UART_AdvFeatureConfig+0x2b4>)
 8006b5c:	4013      	ands	r3, r2
 8006b5e:	0019      	movs	r1, r3
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	430a      	orrs	r2, r1
 8006b6a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b70:	2210      	movs	r2, #16
 8006b72:	4013      	ands	r3, r2
 8006b74:	d01b      	beq.n	8006bae <UART_AdvFeatureConfig+0x166>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b7a:	2b00      	cmp	r3, #0
 8006b7c:	d00b      	beq.n	8006b96 <UART_AdvFeatureConfig+0x14e>
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006b82:	2380      	movs	r3, #128	; 0x80
 8006b84:	015b      	lsls	r3, r3, #5
 8006b86:	429a      	cmp	r2, r3
 8006b88:	d005      	beq.n	8006b96 <UART_AdvFeatureConfig+0x14e>
 8006b8a:	4a5d      	ldr	r2, [pc, #372]	; (8006d00 <UART_AdvFeatureConfig+0x2b8>)
 8006b8c:	4b53      	ldr	r3, [pc, #332]	; (8006cdc <UART_AdvFeatureConfig+0x294>)
 8006b8e:	0011      	movs	r1, r2
 8006b90:	0018      	movs	r0, r3
 8006b92:	f7f9 fede 	bl	8000952 <assert_failed>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	689b      	ldr	r3, [r3, #8]
 8006b9c:	4a59      	ldr	r2, [pc, #356]	; (8006d04 <UART_AdvFeatureConfig+0x2bc>)
 8006b9e:	4013      	ands	r3, r2
 8006ba0:	0019      	movs	r1, r3
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	430a      	orrs	r2, r1
 8006bac:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bb2:	2220      	movs	r2, #32
 8006bb4:	4013      	ands	r3, r2
 8006bb6:	d01b      	beq.n	8006bf0 <UART_AdvFeatureConfig+0x1a8>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006bbc:	2b00      	cmp	r3, #0
 8006bbe:	d00b      	beq.n	8006bd8 <UART_AdvFeatureConfig+0x190>
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006bc4:	2380      	movs	r3, #128	; 0x80
 8006bc6:	019b      	lsls	r3, r3, #6
 8006bc8:	429a      	cmp	r2, r3
 8006bca:	d005      	beq.n	8006bd8 <UART_AdvFeatureConfig+0x190>
 8006bcc:	4a4e      	ldr	r2, [pc, #312]	; (8006d08 <UART_AdvFeatureConfig+0x2c0>)
 8006bce:	4b43      	ldr	r3, [pc, #268]	; (8006cdc <UART_AdvFeatureConfig+0x294>)
 8006bd0:	0011      	movs	r1, r2
 8006bd2:	0018      	movs	r0, r3
 8006bd4:	f7f9 febd 	bl	8000952 <assert_failed>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	689b      	ldr	r3, [r3, #8]
 8006bde:	4a4b      	ldr	r2, [pc, #300]	; (8006d0c <UART_AdvFeatureConfig+0x2c4>)
 8006be0:	4013      	ands	r3, r2
 8006be2:	0019      	movs	r1, r3
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	430a      	orrs	r2, r1
 8006bee:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bf4:	2240      	movs	r2, #64	; 0x40
 8006bf6:	4013      	ands	r3, r2
 8006bf8:	d048      	beq.n	8006c8c <UART_AdvFeatureConfig+0x244>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	4a44      	ldr	r2, [pc, #272]	; (8006d10 <UART_AdvFeatureConfig+0x2c8>)
 8006c00:	4293      	cmp	r3, r2
 8006c02:	d005      	beq.n	8006c10 <UART_AdvFeatureConfig+0x1c8>
 8006c04:	4a43      	ldr	r2, [pc, #268]	; (8006d14 <UART_AdvFeatureConfig+0x2cc>)
 8006c06:	4b35      	ldr	r3, [pc, #212]	; (8006cdc <UART_AdvFeatureConfig+0x294>)
 8006c08:	0011      	movs	r1, r2
 8006c0a:	0018      	movs	r0, r3
 8006c0c:	f7f9 fea1 	bl	8000952 <assert_failed>
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c14:	2b00      	cmp	r3, #0
 8006c16:	d00b      	beq.n	8006c30 <UART_AdvFeatureConfig+0x1e8>
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006c1c:	2380      	movs	r3, #128	; 0x80
 8006c1e:	035b      	lsls	r3, r3, #13
 8006c20:	429a      	cmp	r2, r3
 8006c22:	d005      	beq.n	8006c30 <UART_AdvFeatureConfig+0x1e8>
 8006c24:	4a3c      	ldr	r2, [pc, #240]	; (8006d18 <UART_AdvFeatureConfig+0x2d0>)
 8006c26:	4b2d      	ldr	r3, [pc, #180]	; (8006cdc <UART_AdvFeatureConfig+0x294>)
 8006c28:	0011      	movs	r1, r2
 8006c2a:	0018      	movs	r0, r3
 8006c2c:	f7f9 fe91 	bl	8000952 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	685b      	ldr	r3, [r3, #4]
 8006c36:	4a39      	ldr	r2, [pc, #228]	; (8006d1c <UART_AdvFeatureConfig+0x2d4>)
 8006c38:	4013      	ands	r3, r2
 8006c3a:	0019      	movs	r1, r3
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	430a      	orrs	r2, r1
 8006c46:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006c4c:	2380      	movs	r3, #128	; 0x80
 8006c4e:	035b      	lsls	r3, r3, #13
 8006c50:	429a      	cmp	r2, r3
 8006c52:	d11b      	bne.n	8006c8c <UART_AdvFeatureConfig+0x244>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006c58:	2b00      	cmp	r3, #0
 8006c5a:	d00b      	beq.n	8006c74 <UART_AdvFeatureConfig+0x22c>
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006c60:	2380      	movs	r3, #128	; 0x80
 8006c62:	039b      	lsls	r3, r3, #14
 8006c64:	429a      	cmp	r2, r3
 8006c66:	d005      	beq.n	8006c74 <UART_AdvFeatureConfig+0x22c>
 8006c68:	4a2d      	ldr	r2, [pc, #180]	; (8006d20 <UART_AdvFeatureConfig+0x2d8>)
 8006c6a:	4b1c      	ldr	r3, [pc, #112]	; (8006cdc <UART_AdvFeatureConfig+0x294>)
 8006c6c:	0011      	movs	r1, r2
 8006c6e:	0018      	movs	r0, r3
 8006c70:	f7f9 fe6f 	bl	8000952 <assert_failed>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	685b      	ldr	r3, [r3, #4]
 8006c7a:	4a2a      	ldr	r2, [pc, #168]	; (8006d24 <UART_AdvFeatureConfig+0x2dc>)
 8006c7c:	4013      	ands	r3, r2
 8006c7e:	0019      	movs	r1, r3
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	430a      	orrs	r2, r1
 8006c8a:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c90:	2280      	movs	r2, #128	; 0x80
 8006c92:	4013      	ands	r3, r2
 8006c94:	d01b      	beq.n	8006cce <UART_AdvFeatureConfig+0x286>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006c9a:	2b00      	cmp	r3, #0
 8006c9c:	d00b      	beq.n	8006cb6 <UART_AdvFeatureConfig+0x26e>
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006ca2:	2380      	movs	r3, #128	; 0x80
 8006ca4:	031b      	lsls	r3, r3, #12
 8006ca6:	429a      	cmp	r2, r3
 8006ca8:	d005      	beq.n	8006cb6 <UART_AdvFeatureConfig+0x26e>
 8006caa:	4a1f      	ldr	r2, [pc, #124]	; (8006d28 <UART_AdvFeatureConfig+0x2e0>)
 8006cac:	4b0b      	ldr	r3, [pc, #44]	; (8006cdc <UART_AdvFeatureConfig+0x294>)
 8006cae:	0011      	movs	r1, r2
 8006cb0:	0018      	movs	r0, r3
 8006cb2:	f7f9 fe4e 	bl	8000952 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	685b      	ldr	r3, [r3, #4]
 8006cbc:	4a1b      	ldr	r2, [pc, #108]	; (8006d2c <UART_AdvFeatureConfig+0x2e4>)
 8006cbe:	4013      	ands	r3, r2
 8006cc0:	0019      	movs	r1, r3
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	430a      	orrs	r2, r1
 8006ccc:	605a      	str	r2, [r3, #4]
  }
}
 8006cce:	46c0      	nop			; (mov r8, r8)
 8006cd0:	46bd      	mov	sp, r7
 8006cd2:	b002      	add	sp, #8
 8006cd4:	bd80      	pop	{r7, pc}
 8006cd6:	46c0      	nop			; (mov r8, r8)
 8006cd8:	000008a9 	.word	0x000008a9
 8006cdc:	080071cc 	.word	0x080071cc
 8006ce0:	000008ae 	.word	0x000008ae
 8006ce4:	fffdffff 	.word	0xfffdffff
 8006ce8:	000008b5 	.word	0x000008b5
 8006cec:	fffeffff 	.word	0xfffeffff
 8006cf0:	000008bc 	.word	0x000008bc
 8006cf4:	fffbffff 	.word	0xfffbffff
 8006cf8:	000008c3 	.word	0x000008c3
 8006cfc:	ffff7fff 	.word	0xffff7fff
 8006d00:	000008ca 	.word	0x000008ca
 8006d04:	ffffefff 	.word	0xffffefff
 8006d08:	000008d1 	.word	0x000008d1
 8006d0c:	ffffdfff 	.word	0xffffdfff
 8006d10:	40013800 	.word	0x40013800
 8006d14:	000008d8 	.word	0x000008d8
 8006d18:	000008d9 	.word	0x000008d9
 8006d1c:	ffefffff 	.word	0xffefffff
 8006d20:	000008de 	.word	0x000008de
 8006d24:	ff9fffff 	.word	0xff9fffff
 8006d28:	000008e6 	.word	0x000008e6
 8006d2c:	fff7ffff 	.word	0xfff7ffff

08006d30 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006d30:	b580      	push	{r7, lr}
 8006d32:	b086      	sub	sp, #24
 8006d34:	af02      	add	r7, sp, #8
 8006d36:	6078      	str	r0, [r7, #4]
#if !defined(STM32F030x6) && !defined(STM32F030x8)&& !defined(STM32F070xB)&& !defined(STM32F070x6)&& !defined(STM32F030xC)
  uint32_t tickstart = 0U;
 8006d38:	2300      	movs	r3, #0
 8006d3a:	60fb      	str	r3, [r7, #12]
#endif /* !defined(STM32F030x6) && !defined(STM32F030x8)&& !defined(STM32F070xB)&& !defined(STM32F070x6)&& !defined(STM32F030xC) */

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	2200      	movs	r2, #0
 8006d40:	66da      	str	r2, [r3, #108]	; 0x6c

#if !defined(STM32F030x6) && !defined(STM32F030x8)&& !defined(STM32F070xB)&& !defined(STM32F070x6)&& !defined(STM32F030xC)
  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8006d42:	f7fa fd43 	bl	80017cc <HAL_GetTick>
 8006d46:	0003      	movs	r3, r0
 8006d48:	60fb      	str	r3, [r7, #12]

  /* TEACK and REACK bits in ISR are checked only when available (not available on all F0 devices).
     Bits are defined for some specific devices, and are available only for UART instances supporting WakeUp from Stop Mode feature. 
  */
  if (IS_UART_WAKEUP_FROMSTOP_INSTANCE(huart->Instance))
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	4a1f      	ldr	r2, [pc, #124]	; (8006dcc <UART_CheckIdleState+0x9c>)
 8006d50:	4293      	cmp	r3, r2
 8006d52:	d129      	bne.n	8006da8 <UART_CheckIdleState+0x78>
  {
    /* Check if the Transmitter is enabled */
    if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	2208      	movs	r2, #8
 8006d5c:	4013      	ands	r3, r2
 8006d5e:	2b08      	cmp	r3, #8
 8006d60:	d10d      	bne.n	8006d7e <UART_CheckIdleState+0x4e>
    {
      /* Wait until TEACK flag is set */
      if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006d62:	68fa      	ldr	r2, [r7, #12]
 8006d64:	2380      	movs	r3, #128	; 0x80
 8006d66:	0399      	lsls	r1, r3, #14
 8006d68:	6878      	ldr	r0, [r7, #4]
 8006d6a:	4b19      	ldr	r3, [pc, #100]	; (8006dd0 <UART_CheckIdleState+0xa0>)
 8006d6c:	9300      	str	r3, [sp, #0]
 8006d6e:	0013      	movs	r3, r2
 8006d70:	2200      	movs	r2, #0
 8006d72:	f000 f82f 	bl	8006dd4 <UART_WaitOnFlagUntilTimeout>
 8006d76:	1e03      	subs	r3, r0, #0
 8006d78:	d001      	beq.n	8006d7e <UART_CheckIdleState+0x4e>
      {
        /* Timeout occurred */
        return HAL_TIMEOUT;
 8006d7a:	2303      	movs	r3, #3
 8006d7c:	e021      	b.n	8006dc2 <UART_CheckIdleState+0x92>
      }
    }

    /* Check if the Receiver is enabled */
    if((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	2204      	movs	r2, #4
 8006d86:	4013      	ands	r3, r2
 8006d88:	2b04      	cmp	r3, #4
 8006d8a:	d10d      	bne.n	8006da8 <UART_CheckIdleState+0x78>
    {
      /* Wait until REACK flag is set */
      if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006d8c:	68fa      	ldr	r2, [r7, #12]
 8006d8e:	2380      	movs	r3, #128	; 0x80
 8006d90:	03d9      	lsls	r1, r3, #15
 8006d92:	6878      	ldr	r0, [r7, #4]
 8006d94:	4b0e      	ldr	r3, [pc, #56]	; (8006dd0 <UART_CheckIdleState+0xa0>)
 8006d96:	9300      	str	r3, [sp, #0]
 8006d98:	0013      	movs	r3, r2
 8006d9a:	2200      	movs	r2, #0
 8006d9c:	f000 f81a 	bl	8006dd4 <UART_WaitOnFlagUntilTimeout>
 8006da0:	1e03      	subs	r3, r0, #0
 8006da2:	d001      	beq.n	8006da8 <UART_CheckIdleState+0x78>
      {
        /* Timeout occurred */
        return HAL_TIMEOUT;
 8006da4:	2303      	movs	r3, #3
 8006da6:	e00c      	b.n	8006dc2 <UART_CheckIdleState+0x92>
    }
  }
#endif /* !defined(STM32F030x6) && !defined(STM32F030x8)&& !defined(STM32F070xB)&& !defined(STM32F070x6)&& !defined(STM32F030xC) */

  /* Initialize the UART State */
  huart->gState  = HAL_UART_STATE_READY;
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	2269      	movs	r2, #105	; 0x69
 8006dac:	2120      	movs	r1, #32
 8006dae:	5499      	strb	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	226a      	movs	r2, #106	; 0x6a
 8006db4:	2120      	movs	r1, #32
 8006db6:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	2268      	movs	r2, #104	; 0x68
 8006dbc:	2100      	movs	r1, #0
 8006dbe:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006dc0:	2300      	movs	r3, #0
}
 8006dc2:	0018      	movs	r0, r3
 8006dc4:	46bd      	mov	sp, r7
 8006dc6:	b004      	add	sp, #16
 8006dc8:	bd80      	pop	{r7, pc}
 8006dca:	46c0      	nop			; (mov r8, r8)
 8006dcc:	40013800 	.word	0x40013800
 8006dd0:	01ffffff 	.word	0x01ffffff

08006dd4 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8006dd4:	b580      	push	{r7, lr}
 8006dd6:	b084      	sub	sp, #16
 8006dd8:	af00      	add	r7, sp, #0
 8006dda:	60f8      	str	r0, [r7, #12]
 8006ddc:	60b9      	str	r1, [r7, #8]
 8006dde:	603b      	str	r3, [r7, #0]
 8006de0:	1dfb      	adds	r3, r7, #7
 8006de2:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006de4:	e02b      	b.n	8006e3e <UART_WaitOnFlagUntilTimeout+0x6a>
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 8006de6:	69bb      	ldr	r3, [r7, #24]
 8006de8:	3301      	adds	r3, #1
 8006dea:	d028      	beq.n	8006e3e <UART_WaitOnFlagUntilTimeout+0x6a>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8006dec:	69bb      	ldr	r3, [r7, #24]
 8006dee:	2b00      	cmp	r3, #0
 8006df0:	d007      	beq.n	8006e02 <UART_WaitOnFlagUntilTimeout+0x2e>
 8006df2:	f7fa fceb 	bl	80017cc <HAL_GetTick>
 8006df6:	0002      	movs	r2, r0
 8006df8:	683b      	ldr	r3, [r7, #0]
 8006dfa:	1ad3      	subs	r3, r2, r3
 8006dfc:	69ba      	ldr	r2, [r7, #24]
 8006dfe:	429a      	cmp	r2, r3
 8006e00:	d21d      	bcs.n	8006e3e <UART_WaitOnFlagUntilTimeout+0x6a>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006e02:	68fb      	ldr	r3, [r7, #12]
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	681a      	ldr	r2, [r3, #0]
 8006e08:	68fb      	ldr	r3, [r7, #12]
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	4916      	ldr	r1, [pc, #88]	; (8006e68 <UART_WaitOnFlagUntilTimeout+0x94>)
 8006e0e:	400a      	ands	r2, r1
 8006e10:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006e12:	68fb      	ldr	r3, [r7, #12]
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	689a      	ldr	r2, [r3, #8]
 8006e18:	68fb      	ldr	r3, [r7, #12]
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	2101      	movs	r1, #1
 8006e1e:	438a      	bics	r2, r1
 8006e20:	609a      	str	r2, [r3, #8]

        huart->gState  = HAL_UART_STATE_READY;
 8006e22:	68fb      	ldr	r3, [r7, #12]
 8006e24:	2269      	movs	r2, #105	; 0x69
 8006e26:	2120      	movs	r1, #32
 8006e28:	5499      	strb	r1, [r3, r2]
        huart->RxState = HAL_UART_STATE_READY;
 8006e2a:	68fb      	ldr	r3, [r7, #12]
 8006e2c:	226a      	movs	r2, #106	; 0x6a
 8006e2e:	2120      	movs	r1, #32
 8006e30:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8006e32:	68fb      	ldr	r3, [r7, #12]
 8006e34:	2268      	movs	r2, #104	; 0x68
 8006e36:	2100      	movs	r1, #0
 8006e38:	5499      	strb	r1, [r3, r2]
        return HAL_TIMEOUT;
 8006e3a:	2303      	movs	r3, #3
 8006e3c:	e00f      	b.n	8006e5e <UART_WaitOnFlagUntilTimeout+0x8a>
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006e3e:	68fb      	ldr	r3, [r7, #12]
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	69db      	ldr	r3, [r3, #28]
 8006e44:	68ba      	ldr	r2, [r7, #8]
 8006e46:	4013      	ands	r3, r2
 8006e48:	68ba      	ldr	r2, [r7, #8]
 8006e4a:	1ad3      	subs	r3, r2, r3
 8006e4c:	425a      	negs	r2, r3
 8006e4e:	4153      	adcs	r3, r2
 8006e50:	b2db      	uxtb	r3, r3
 8006e52:	001a      	movs	r2, r3
 8006e54:	1dfb      	adds	r3, r7, #7
 8006e56:	781b      	ldrb	r3, [r3, #0]
 8006e58:	429a      	cmp	r2, r3
 8006e5a:	d0c4      	beq.n	8006de6 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006e5c:	2300      	movs	r3, #0
}
 8006e5e:	0018      	movs	r0, r3
 8006e60:	46bd      	mov	sp, r7
 8006e62:	b004      	add	sp, #16
 8006e64:	bd80      	pop	{r7, pc}
 8006e66:	46c0      	nop			; (mov r8, r8)
 8006e68:	fffffe5f 	.word	0xfffffe5f

08006e6c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8006e6c:	480d      	ldr	r0, [pc, #52]	; (8006ea4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8006e6e:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8006e70:	480d      	ldr	r0, [pc, #52]	; (8006ea8 <LoopForever+0x6>)
  ldr r1, =_edata
 8006e72:	490e      	ldr	r1, [pc, #56]	; (8006eac <LoopForever+0xa>)
  ldr r2, =_sidata
 8006e74:	4a0e      	ldr	r2, [pc, #56]	; (8006eb0 <LoopForever+0xe>)
  movs r3, #0
 8006e76:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8006e78:	e002      	b.n	8006e80 <LoopCopyDataInit>

08006e7a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8006e7a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8006e7c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8006e7e:	3304      	adds	r3, #4

08006e80 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8006e80:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8006e82:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8006e84:	d3f9      	bcc.n	8006e7a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8006e86:	4a0b      	ldr	r2, [pc, #44]	; (8006eb4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8006e88:	4c0b      	ldr	r4, [pc, #44]	; (8006eb8 <LoopForever+0x16>)
  movs r3, #0
 8006e8a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8006e8c:	e001      	b.n	8006e92 <LoopFillZerobss>

08006e8e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8006e8e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8006e90:	3204      	adds	r2, #4

08006e92 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8006e92:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8006e94:	d3fb      	bcc.n	8006e8e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8006e96:	f7f9 fe43 	bl	8000b20 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8006e9a:	f000 f811 	bl	8006ec0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8006e9e:	f7f9 fcad 	bl	80007fc <main>

08006ea2 <LoopForever>:

LoopForever:
    b LoopForever
 8006ea2:	e7fe      	b.n	8006ea2 <LoopForever>
  ldr   r0, =_estack
 8006ea4:	20001fff 	.word	0x20001fff
  ldr r0, =_sdata
 8006ea8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8006eac:	200003d0 	.word	0x200003d0
  ldr r2, =_sidata
 8006eb0:	08007228 	.word	0x08007228
  ldr r2, =_sbss
 8006eb4:	200003d0 	.word	0x200003d0
  ldr r4, =_ebss
 8006eb8:	20000678 	.word	0x20000678

08006ebc <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8006ebc:	e7fe      	b.n	8006ebc <ADC1_COMP_IRQHandler>
	...

08006ec0 <__libc_init_array>:
 8006ec0:	b570      	push	{r4, r5, r6, lr}
 8006ec2:	2600      	movs	r6, #0
 8006ec4:	4d0c      	ldr	r5, [pc, #48]	; (8006ef8 <__libc_init_array+0x38>)
 8006ec6:	4c0d      	ldr	r4, [pc, #52]	; (8006efc <__libc_init_array+0x3c>)
 8006ec8:	1b64      	subs	r4, r4, r5
 8006eca:	10a4      	asrs	r4, r4, #2
 8006ecc:	42a6      	cmp	r6, r4
 8006ece:	d109      	bne.n	8006ee4 <__libc_init_array+0x24>
 8006ed0:	2600      	movs	r6, #0
 8006ed2:	f000 f821 	bl	8006f18 <_init>
 8006ed6:	4d0a      	ldr	r5, [pc, #40]	; (8006f00 <__libc_init_array+0x40>)
 8006ed8:	4c0a      	ldr	r4, [pc, #40]	; (8006f04 <__libc_init_array+0x44>)
 8006eda:	1b64      	subs	r4, r4, r5
 8006edc:	10a4      	asrs	r4, r4, #2
 8006ede:	42a6      	cmp	r6, r4
 8006ee0:	d105      	bne.n	8006eee <__libc_init_array+0x2e>
 8006ee2:	bd70      	pop	{r4, r5, r6, pc}
 8006ee4:	00b3      	lsls	r3, r6, #2
 8006ee6:	58eb      	ldr	r3, [r5, r3]
 8006ee8:	4798      	blx	r3
 8006eea:	3601      	adds	r6, #1
 8006eec:	e7ee      	b.n	8006ecc <__libc_init_array+0xc>
 8006eee:	00b3      	lsls	r3, r6, #2
 8006ef0:	58eb      	ldr	r3, [r5, r3]
 8006ef2:	4798      	blx	r3
 8006ef4:	3601      	adds	r6, #1
 8006ef6:	e7f2      	b.n	8006ede <__libc_init_array+0x1e>
 8006ef8:	08007220 	.word	0x08007220
 8006efc:	08007220 	.word	0x08007220
 8006f00:	08007220 	.word	0x08007220
 8006f04:	08007224 	.word	0x08007224

08006f08 <memset>:
 8006f08:	0003      	movs	r3, r0
 8006f0a:	1812      	adds	r2, r2, r0
 8006f0c:	4293      	cmp	r3, r2
 8006f0e:	d100      	bne.n	8006f12 <memset+0xa>
 8006f10:	4770      	bx	lr
 8006f12:	7019      	strb	r1, [r3, #0]
 8006f14:	3301      	adds	r3, #1
 8006f16:	e7f9      	b.n	8006f0c <memset+0x4>

08006f18 <_init>:
 8006f18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006f1a:	46c0      	nop			; (mov r8, r8)
 8006f1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006f1e:	bc08      	pop	{r3}
 8006f20:	469e      	mov	lr, r3
 8006f22:	4770      	bx	lr

08006f24 <_fini>:
 8006f24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006f26:	46c0      	nop			; (mov r8, r8)
 8006f28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006f2a:	bc08      	pop	{r3}
 8006f2c:	469e      	mov	lr, r3
 8006f2e:	4770      	bx	lr
