
uniDi.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006834  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002f0  080068f4  080068f4  000168f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006be4  08006be4  000203c8  2**0
                  CONTENTS
  4 .ARM          00000000  08006be4  08006be4  000203c8  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006be4  08006be4  000203c8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006be4  08006be4  00016be4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006be8  08006be8  00016be8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000003c8  20000000  08006bec  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000280  200003c8  08006fb4  000203c8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000648  08006fb4  00020648  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  000203c8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001eca0  00000000  00000000  000203f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003ff7  00000000  00000000  0003f090  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000fa0  00000000  00000000  00043088  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000db8  00000000  00000000  00044028  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001429e  00000000  00000000  00044de0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00016e9f  00000000  00000000  0005907e  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0005b53a  00000000  00000000  0006ff1d  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000cb457  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003410  00000000  00000000  000cb4d4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	200003c8 	.word	0x200003c8
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080068dc 	.word	0x080068dc

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	200003cc 	.word	0x200003cc
 8000104:	080068dc 	.word	0x080068dc

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <MX_ADC_Init>:
ADC_HandleTypeDef hadc;
DMA_HandleTypeDef hdma_adc;

/* ADC init function */
void MX_ADC_Init(void)
{
 8000220:	b580      	push	{r7, lr}
 8000222:	b084      	sub	sp, #16
 8000224:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 8000226:	1d3b      	adds	r3, r7, #4
 8000228:	0018      	movs	r0, r3
 800022a:	230c      	movs	r3, #12
 800022c:	001a      	movs	r2, r3
 800022e:	2100      	movs	r1, #0
 8000230:	f006 fb4c 	bl	80068cc <memset>

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc.Instance = ADC1;
 8000234:	4b3f      	ldr	r3, [pc, #252]	; (8000334 <MX_ADC_Init+0x114>)
 8000236:	4a40      	ldr	r2, [pc, #256]	; (8000338 <MX_ADC_Init+0x118>)
 8000238:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800023a:	4b3e      	ldr	r3, [pc, #248]	; (8000334 <MX_ADC_Init+0x114>)
 800023c:	2200      	movs	r2, #0
 800023e:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8000240:	4b3c      	ldr	r3, [pc, #240]	; (8000334 <MX_ADC_Init+0x114>)
 8000242:	2200      	movs	r2, #0
 8000244:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000246:	4b3b      	ldr	r3, [pc, #236]	; (8000334 <MX_ADC_Init+0x114>)
 8000248:	2200      	movs	r2, #0
 800024a:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 800024c:	4b39      	ldr	r3, [pc, #228]	; (8000334 <MX_ADC_Init+0x114>)
 800024e:	2201      	movs	r2, #1
 8000250:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000252:	4b38      	ldr	r3, [pc, #224]	; (8000334 <MX_ADC_Init+0x114>)
 8000254:	2204      	movs	r2, #4
 8000256:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = DISABLE;
 8000258:	4b36      	ldr	r3, [pc, #216]	; (8000334 <MX_ADC_Init+0x114>)
 800025a:	2200      	movs	r2, #0
 800025c:	619a      	str	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 800025e:	4b35      	ldr	r3, [pc, #212]	; (8000334 <MX_ADC_Init+0x114>)
 8000260:	2200      	movs	r2, #0
 8000262:	61da      	str	r2, [r3, #28]
  hadc.Init.ContinuousConvMode = ENABLE;
 8000264:	4b33      	ldr	r3, [pc, #204]	; (8000334 <MX_ADC_Init+0x114>)
 8000266:	2201      	movs	r2, #1
 8000268:	621a      	str	r2, [r3, #32]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 800026a:	4b32      	ldr	r3, [pc, #200]	; (8000334 <MX_ADC_Init+0x114>)
 800026c:	2200      	movs	r2, #0
 800026e:	625a      	str	r2, [r3, #36]	; 0x24
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000270:	4b30      	ldr	r3, [pc, #192]	; (8000334 <MX_ADC_Init+0x114>)
 8000272:	22c2      	movs	r2, #194	; 0xc2
 8000274:	32ff      	adds	r2, #255	; 0xff
 8000276:	629a      	str	r2, [r3, #40]	; 0x28
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000278:	4b2e      	ldr	r3, [pc, #184]	; (8000334 <MX_ADC_Init+0x114>)
 800027a:	2200      	movs	r2, #0
 800027c:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc.Init.DMAContinuousRequests = ENABLE;
 800027e:	4b2d      	ldr	r3, [pc, #180]	; (8000334 <MX_ADC_Init+0x114>)
 8000280:	2201      	movs	r2, #1
 8000282:	631a      	str	r2, [r3, #48]	; 0x30
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000284:	4b2b      	ldr	r3, [pc, #172]	; (8000334 <MX_ADC_Init+0x114>)
 8000286:	2201      	movs	r2, #1
 8000288:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 800028a:	4b2a      	ldr	r3, [pc, #168]	; (8000334 <MX_ADC_Init+0x114>)
 800028c:	0018      	movs	r0, r3
 800028e:	f001 f9ef 	bl	8001670 <HAL_ADC_Init>
 8000292:	1e03      	subs	r3, r0, #0
 8000294:	d001      	beq.n	800029a <MX_ADC_Init+0x7a>
  {
    Error_Handler();
 8000296:	f000 fb65 	bl	8000964 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted. 
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800029a:	1d3b      	adds	r3, r7, #4
 800029c:	2201      	movs	r2, #1
 800029e:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 80002a0:	1d3b      	adds	r3, r7, #4
 80002a2:	2280      	movs	r2, #128	; 0x80
 80002a4:	0152      	lsls	r2, r2, #5
 80002a6:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 80002a8:	1d3b      	adds	r3, r7, #4
 80002aa:	2207      	movs	r2, #7
 80002ac:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80002ae:	1d3a      	adds	r2, r7, #4
 80002b0:	4b20      	ldr	r3, [pc, #128]	; (8000334 <MX_ADC_Init+0x114>)
 80002b2:	0011      	movs	r1, r2
 80002b4:	0018      	movs	r0, r3
 80002b6:	f001 fc25 	bl	8001b04 <HAL_ADC_ConfigChannel>
 80002ba:	1e03      	subs	r3, r0, #0
 80002bc:	d001      	beq.n	80002c2 <MX_ADC_Init+0xa2>
  {
    Error_Handler();
 80002be:	f000 fb51 	bl	8000964 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted. 
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80002c2:	1d3b      	adds	r3, r7, #4
 80002c4:	2203      	movs	r2, #3
 80002c6:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80002c8:	1d3a      	adds	r2, r7, #4
 80002ca:	4b1a      	ldr	r3, [pc, #104]	; (8000334 <MX_ADC_Init+0x114>)
 80002cc:	0011      	movs	r1, r2
 80002ce:	0018      	movs	r0, r3
 80002d0:	f001 fc18 	bl	8001b04 <HAL_ADC_ConfigChannel>
 80002d4:	1e03      	subs	r3, r0, #0
 80002d6:	d001      	beq.n	80002dc <MX_ADC_Init+0xbc>
  {
    Error_Handler();
 80002d8:	f000 fb44 	bl	8000964 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted. 
  */
  sConfig.Channel = ADC_CHANNEL_5;
 80002dc:	1d3b      	adds	r3, r7, #4
 80002de:	2205      	movs	r2, #5
 80002e0:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80002e2:	1d3a      	adds	r2, r7, #4
 80002e4:	4b13      	ldr	r3, [pc, #76]	; (8000334 <MX_ADC_Init+0x114>)
 80002e6:	0011      	movs	r1, r2
 80002e8:	0018      	movs	r0, r3
 80002ea:	f001 fc0b 	bl	8001b04 <HAL_ADC_ConfigChannel>
 80002ee:	1e03      	subs	r3, r0, #0
 80002f0:	d001      	beq.n	80002f6 <MX_ADC_Init+0xd6>
  {
    Error_Handler();
 80002f2:	f000 fb37 	bl	8000964 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted. 
  */
  sConfig.Channel = ADC_CHANNEL_6;
 80002f6:	1d3b      	adds	r3, r7, #4
 80002f8:	2206      	movs	r2, #6
 80002fa:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80002fc:	1d3a      	adds	r2, r7, #4
 80002fe:	4b0d      	ldr	r3, [pc, #52]	; (8000334 <MX_ADC_Init+0x114>)
 8000300:	0011      	movs	r1, r2
 8000302:	0018      	movs	r0, r3
 8000304:	f001 fbfe 	bl	8001b04 <HAL_ADC_ConfigChannel>
 8000308:	1e03      	subs	r3, r0, #0
 800030a:	d001      	beq.n	8000310 <MX_ADC_Init+0xf0>
  {
    Error_Handler();
 800030c:	f000 fb2a 	bl	8000964 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted. 
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8000310:	1d3b      	adds	r3, r7, #4
 8000312:	2207      	movs	r2, #7
 8000314:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000316:	1d3a      	adds	r2, r7, #4
 8000318:	4b06      	ldr	r3, [pc, #24]	; (8000334 <MX_ADC_Init+0x114>)
 800031a:	0011      	movs	r1, r2
 800031c:	0018      	movs	r0, r3
 800031e:	f001 fbf1 	bl	8001b04 <HAL_ADC_ConfigChannel>
 8000322:	1e03      	subs	r3, r0, #0
 8000324:	d001      	beq.n	800032a <MX_ADC_Init+0x10a>
  {
    Error_Handler();
 8000326:	f000 fb1d 	bl	8000964 <Error_Handler>
  }

}
 800032a:	46c0      	nop			; (mov r8, r8)
 800032c:	46bd      	mov	sp, r7
 800032e:	b004      	add	sp, #16
 8000330:	bd80      	pop	{r7, pc}
 8000332:	46c0      	nop			; (mov r8, r8)
 8000334:	20000438 	.word	0x20000438
 8000338:	40012400 	.word	0x40012400

0800033c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 800033c:	b580      	push	{r7, lr}
 800033e:	b08a      	sub	sp, #40	; 0x28
 8000340:	af00      	add	r7, sp, #0
 8000342:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000344:	2314      	movs	r3, #20
 8000346:	18fb      	adds	r3, r7, r3
 8000348:	0018      	movs	r0, r3
 800034a:	2314      	movs	r3, #20
 800034c:	001a      	movs	r2, r3
 800034e:	2100      	movs	r1, #0
 8000350:	f006 fabc 	bl	80068cc <memset>
  if(adcHandle->Instance==ADC1)
 8000354:	687b      	ldr	r3, [r7, #4]
 8000356:	681b      	ldr	r3, [r3, #0]
 8000358:	4a2e      	ldr	r2, [pc, #184]	; (8000414 <HAL_ADC_MspInit+0xd8>)
 800035a:	4293      	cmp	r3, r2
 800035c:	d155      	bne.n	800040a <HAL_ADC_MspInit+0xce>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800035e:	4b2e      	ldr	r3, [pc, #184]	; (8000418 <HAL_ADC_MspInit+0xdc>)
 8000360:	699a      	ldr	r2, [r3, #24]
 8000362:	4b2d      	ldr	r3, [pc, #180]	; (8000418 <HAL_ADC_MspInit+0xdc>)
 8000364:	2180      	movs	r1, #128	; 0x80
 8000366:	0089      	lsls	r1, r1, #2
 8000368:	430a      	orrs	r2, r1
 800036a:	619a      	str	r2, [r3, #24]
 800036c:	4b2a      	ldr	r3, [pc, #168]	; (8000418 <HAL_ADC_MspInit+0xdc>)
 800036e:	699a      	ldr	r2, [r3, #24]
 8000370:	2380      	movs	r3, #128	; 0x80
 8000372:	009b      	lsls	r3, r3, #2
 8000374:	4013      	ands	r3, r2
 8000376:	613b      	str	r3, [r7, #16]
 8000378:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800037a:	4b27      	ldr	r3, [pc, #156]	; (8000418 <HAL_ADC_MspInit+0xdc>)
 800037c:	695a      	ldr	r2, [r3, #20]
 800037e:	4b26      	ldr	r3, [pc, #152]	; (8000418 <HAL_ADC_MspInit+0xdc>)
 8000380:	2180      	movs	r1, #128	; 0x80
 8000382:	0289      	lsls	r1, r1, #10
 8000384:	430a      	orrs	r2, r1
 8000386:	615a      	str	r2, [r3, #20]
 8000388:	4b23      	ldr	r3, [pc, #140]	; (8000418 <HAL_ADC_MspInit+0xdc>)
 800038a:	695a      	ldr	r2, [r3, #20]
 800038c:	2380      	movs	r3, #128	; 0x80
 800038e:	029b      	lsls	r3, r3, #10
 8000390:	4013      	ands	r3, r2
 8000392:	60fb      	str	r3, [r7, #12]
 8000394:	68fb      	ldr	r3, [r7, #12]
    PA3     ------> ADC_IN3
    PA6     ------> ADC_IN6
    PA1     ------> ADC_IN1
    PA7     ------> ADC_IN7 
    */
    GPIO_InitStruct.Pin = POLKA_Pin|OC_I_Pin|KLAPAN_Pin|OC_V_Pin 
 8000396:	2114      	movs	r1, #20
 8000398:	187b      	adds	r3, r7, r1
 800039a:	22ea      	movs	r2, #234	; 0xea
 800039c:	601a      	str	r2, [r3, #0]
                          |ZERO_WIEN_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800039e:	187b      	adds	r3, r7, r1
 80003a0:	2203      	movs	r2, #3
 80003a2:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003a4:	187b      	adds	r3, r7, r1
 80003a6:	2200      	movs	r2, #0
 80003a8:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80003aa:	187a      	adds	r2, r7, r1
 80003ac:	2390      	movs	r3, #144	; 0x90
 80003ae:	05db      	lsls	r3, r3, #23
 80003b0:	0011      	movs	r1, r2
 80003b2:	0018      	movs	r0, r3
 80003b4:	f002 fa56 	bl	8002864 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC Init */
    hdma_adc.Instance = DMA1_Channel1;
 80003b8:	4b18      	ldr	r3, [pc, #96]	; (800041c <HAL_ADC_MspInit+0xe0>)
 80003ba:	4a19      	ldr	r2, [pc, #100]	; (8000420 <HAL_ADC_MspInit+0xe4>)
 80003bc:	601a      	str	r2, [r3, #0]
    hdma_adc.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80003be:	4b17      	ldr	r3, [pc, #92]	; (800041c <HAL_ADC_MspInit+0xe0>)
 80003c0:	2200      	movs	r2, #0
 80003c2:	605a      	str	r2, [r3, #4]
    hdma_adc.Init.PeriphInc = DMA_PINC_DISABLE;
 80003c4:	4b15      	ldr	r3, [pc, #84]	; (800041c <HAL_ADC_MspInit+0xe0>)
 80003c6:	2200      	movs	r2, #0
 80003c8:	609a      	str	r2, [r3, #8]
    hdma_adc.Init.MemInc = DMA_MINC_ENABLE;
 80003ca:	4b14      	ldr	r3, [pc, #80]	; (800041c <HAL_ADC_MspInit+0xe0>)
 80003cc:	2280      	movs	r2, #128	; 0x80
 80003ce:	60da      	str	r2, [r3, #12]
    hdma_adc.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80003d0:	4b12      	ldr	r3, [pc, #72]	; (800041c <HAL_ADC_MspInit+0xe0>)
 80003d2:	2280      	movs	r2, #128	; 0x80
 80003d4:	0052      	lsls	r2, r2, #1
 80003d6:	611a      	str	r2, [r3, #16]
    hdma_adc.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80003d8:	4b10      	ldr	r3, [pc, #64]	; (800041c <HAL_ADC_MspInit+0xe0>)
 80003da:	2280      	movs	r2, #128	; 0x80
 80003dc:	00d2      	lsls	r2, r2, #3
 80003de:	615a      	str	r2, [r3, #20]
    hdma_adc.Init.Mode = DMA_NORMAL;
 80003e0:	4b0e      	ldr	r3, [pc, #56]	; (800041c <HAL_ADC_MspInit+0xe0>)
 80003e2:	2200      	movs	r2, #0
 80003e4:	619a      	str	r2, [r3, #24]
    hdma_adc.Init.Priority = DMA_PRIORITY_HIGH;
 80003e6:	4b0d      	ldr	r3, [pc, #52]	; (800041c <HAL_ADC_MspInit+0xe0>)
 80003e8:	2280      	movs	r2, #128	; 0x80
 80003ea:	0192      	lsls	r2, r2, #6
 80003ec:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc) != HAL_OK)
 80003ee:	4b0b      	ldr	r3, [pc, #44]	; (800041c <HAL_ADC_MspInit+0xe0>)
 80003f0:	0018      	movs	r0, r3
 80003f2:	f002 f87b 	bl	80024ec <HAL_DMA_Init>
 80003f6:	1e03      	subs	r3, r0, #0
 80003f8:	d001      	beq.n	80003fe <HAL_ADC_MspInit+0xc2>
    {
      Error_Handler();
 80003fa:	f000 fab3 	bl	8000964 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc);
 80003fe:	687b      	ldr	r3, [r7, #4]
 8000400:	4a06      	ldr	r2, [pc, #24]	; (800041c <HAL_ADC_MspInit+0xe0>)
 8000402:	63da      	str	r2, [r3, #60]	; 0x3c
 8000404:	4b05      	ldr	r3, [pc, #20]	; (800041c <HAL_ADC_MspInit+0xe0>)
 8000406:	687a      	ldr	r2, [r7, #4]
 8000408:	625a      	str	r2, [r3, #36]	; 0x24

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 800040a:	46c0      	nop			; (mov r8, r8)
 800040c:	46bd      	mov	sp, r7
 800040e:	b00a      	add	sp, #40	; 0x28
 8000410:	bd80      	pop	{r7, pc}
 8000412:	46c0      	nop			; (mov r8, r8)
 8000414:	40012400 	.word	0x40012400
 8000418:	40021000 	.word	0x40021000
 800041c:	200003f4 	.word	0x200003f4
 8000420:	40020008 	.word	0x40020008

08000424 <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 8000424:	b580      	push	{r7, lr}
 8000426:	af00      	add	r7, sp, #0

  hcrc.Instance = CRC;
 8000428:	4b0e      	ldr	r3, [pc, #56]	; (8000464 <MX_CRC_Init+0x40>)
 800042a:	4a0f      	ldr	r2, [pc, #60]	; (8000468 <MX_CRC_Init+0x44>)
 800042c:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 800042e:	4b0d      	ldr	r3, [pc, #52]	; (8000464 <MX_CRC_Init+0x40>)
 8000430:	2200      	movs	r2, #0
 8000432:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 8000434:	4b0b      	ldr	r3, [pc, #44]	; (8000464 <MX_CRC_Init+0x40>)
 8000436:	2200      	movs	r2, #0
 8000438:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 800043a:	4b0a      	ldr	r3, [pc, #40]	; (8000464 <MX_CRC_Init+0x40>)
 800043c:	2200      	movs	r2, #0
 800043e:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8000440:	4b08      	ldr	r3, [pc, #32]	; (8000464 <MX_CRC_Init+0x40>)
 8000442:	2200      	movs	r2, #0
 8000444:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8000446:	4b07      	ldr	r3, [pc, #28]	; (8000464 <MX_CRC_Init+0x40>)
 8000448:	2201      	movs	r2, #1
 800044a:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 800044c:	4b05      	ldr	r3, [pc, #20]	; (8000464 <MX_CRC_Init+0x40>)
 800044e:	0018      	movs	r0, r3
 8000450:	f001 fe06 	bl	8002060 <HAL_CRC_Init>
 8000454:	1e03      	subs	r3, r0, #0
 8000456:	d001      	beq.n	800045c <MX_CRC_Init+0x38>
  {
    Error_Handler();
 8000458:	f000 fa84 	bl	8000964 <Error_Handler>
  }

}
 800045c:	46c0      	nop			; (mov r8, r8)
 800045e:	46bd      	mov	sp, r7
 8000460:	bd80      	pop	{r7, pc}
 8000462:	46c0      	nop			; (mov r8, r8)
 8000464:	20000484 	.word	0x20000484
 8000468:	40023000 	.word	0x40023000

0800046c <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{
 800046c:	b580      	push	{r7, lr}
 800046e:	b084      	sub	sp, #16
 8000470:	af00      	add	r7, sp, #0
 8000472:	6078      	str	r0, [r7, #4]

  if(crcHandle->Instance==CRC)
 8000474:	687b      	ldr	r3, [r7, #4]
 8000476:	681b      	ldr	r3, [r3, #0]
 8000478:	4a09      	ldr	r2, [pc, #36]	; (80004a0 <HAL_CRC_MspInit+0x34>)
 800047a:	4293      	cmp	r3, r2
 800047c:	d10b      	bne.n	8000496 <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 800047e:	4b09      	ldr	r3, [pc, #36]	; (80004a4 <HAL_CRC_MspInit+0x38>)
 8000480:	695a      	ldr	r2, [r3, #20]
 8000482:	4b08      	ldr	r3, [pc, #32]	; (80004a4 <HAL_CRC_MspInit+0x38>)
 8000484:	2140      	movs	r1, #64	; 0x40
 8000486:	430a      	orrs	r2, r1
 8000488:	615a      	str	r2, [r3, #20]
 800048a:	4b06      	ldr	r3, [pc, #24]	; (80004a4 <HAL_CRC_MspInit+0x38>)
 800048c:	695b      	ldr	r3, [r3, #20]
 800048e:	2240      	movs	r2, #64	; 0x40
 8000490:	4013      	ands	r3, r2
 8000492:	60fb      	str	r3, [r7, #12]
 8000494:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 8000496:	46c0      	nop			; (mov r8, r8)
 8000498:	46bd      	mov	sp, r7
 800049a:	b004      	add	sp, #16
 800049c:	bd80      	pop	{r7, pc}
 800049e:	46c0      	nop			; (mov r8, r8)
 80004a0:	40023000 	.word	0x40023000
 80004a4:	40021000 	.word	0x40021000

080004a8 <MX_DAC1_Init>:

DAC_HandleTypeDef hdac1;

/* DAC1 init function */
void MX_DAC1_Init(void)
{
 80004a8:	b580      	push	{r7, lr}
 80004aa:	b082      	sub	sp, #8
 80004ac:	af00      	add	r7, sp, #0
  DAC_ChannelConfTypeDef sConfig = {0};
 80004ae:	003b      	movs	r3, r7
 80004b0:	0018      	movs	r0, r3
 80004b2:	2308      	movs	r3, #8
 80004b4:	001a      	movs	r2, r3
 80004b6:	2100      	movs	r1, #0
 80004b8:	f006 fa08 	bl	80068cc <memset>

  /** DAC Initialization 
  */
  hdac1.Instance = DAC;
 80004bc:	4b0f      	ldr	r3, [pc, #60]	; (80004fc <MX_DAC1_Init+0x54>)
 80004be:	4a10      	ldr	r2, [pc, #64]	; (8000500 <MX_DAC1_Init+0x58>)
 80004c0:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 80004c2:	4b0e      	ldr	r3, [pc, #56]	; (80004fc <MX_DAC1_Init+0x54>)
 80004c4:	0018      	movs	r0, r3
 80004c6:	f001 fe73 	bl	80021b0 <HAL_DAC_Init>
 80004ca:	1e03      	subs	r3, r0, #0
 80004cc:	d001      	beq.n	80004d2 <MX_DAC1_Init+0x2a>
  {
    Error_Handler();
 80004ce:	f000 fa49 	bl	8000964 <Error_Handler>
  }
  /** DAC channel OUT1 config 
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_T2_TRGO;
 80004d2:	003b      	movs	r3, r7
 80004d4:	2224      	movs	r2, #36	; 0x24
 80004d6:	601a      	str	r2, [r3, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 80004d8:	003b      	movs	r3, r7
 80004da:	2200      	movs	r2, #0
 80004dc:	605a      	str	r2, [r3, #4]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 80004de:	0039      	movs	r1, r7
 80004e0:	4b06      	ldr	r3, [pc, #24]	; (80004fc <MX_DAC1_Init+0x54>)
 80004e2:	2200      	movs	r2, #0
 80004e4:	0018      	movs	r0, r3
 80004e6:	f001 feed 	bl	80022c4 <HAL_DAC_ConfigChannel>
 80004ea:	1e03      	subs	r3, r0, #0
 80004ec:	d001      	beq.n	80004f2 <MX_DAC1_Init+0x4a>
  {
    Error_Handler();
 80004ee:	f000 fa39 	bl	8000964 <Error_Handler>
  }

}
 80004f2:	46c0      	nop			; (mov r8, r8)
 80004f4:	46bd      	mov	sp, r7
 80004f6:	b002      	add	sp, #8
 80004f8:	bd80      	pop	{r7, pc}
 80004fa:	46c0      	nop			; (mov r8, r8)
 80004fc:	200004a8 	.word	0x200004a8
 8000500:	40007400 	.word	0x40007400

08000504 <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 8000504:	b580      	push	{r7, lr}
 8000506:	b08a      	sub	sp, #40	; 0x28
 8000508:	af00      	add	r7, sp, #0
 800050a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800050c:	2314      	movs	r3, #20
 800050e:	18fb      	adds	r3, r7, r3
 8000510:	0018      	movs	r0, r3
 8000512:	2314      	movs	r3, #20
 8000514:	001a      	movs	r2, r3
 8000516:	2100      	movs	r1, #0
 8000518:	f006 f9d8 	bl	80068cc <memset>
  if(dacHandle->Instance==DAC)
 800051c:	687b      	ldr	r3, [r7, #4]
 800051e:	681b      	ldr	r3, [r3, #0]
 8000520:	4a1d      	ldr	r2, [pc, #116]	; (8000598 <HAL_DAC_MspInit+0x94>)
 8000522:	4293      	cmp	r3, r2
 8000524:	d134      	bne.n	8000590 <HAL_DAC_MspInit+0x8c>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* DAC clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 8000526:	4b1d      	ldr	r3, [pc, #116]	; (800059c <HAL_DAC_MspInit+0x98>)
 8000528:	69da      	ldr	r2, [r3, #28]
 800052a:	4b1c      	ldr	r3, [pc, #112]	; (800059c <HAL_DAC_MspInit+0x98>)
 800052c:	2180      	movs	r1, #128	; 0x80
 800052e:	0589      	lsls	r1, r1, #22
 8000530:	430a      	orrs	r2, r1
 8000532:	61da      	str	r2, [r3, #28]
 8000534:	4b19      	ldr	r3, [pc, #100]	; (800059c <HAL_DAC_MspInit+0x98>)
 8000536:	69da      	ldr	r2, [r3, #28]
 8000538:	2380      	movs	r3, #128	; 0x80
 800053a:	059b      	lsls	r3, r3, #22
 800053c:	4013      	ands	r3, r2
 800053e:	613b      	str	r3, [r7, #16]
 8000540:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000542:	4b16      	ldr	r3, [pc, #88]	; (800059c <HAL_DAC_MspInit+0x98>)
 8000544:	695a      	ldr	r2, [r3, #20]
 8000546:	4b15      	ldr	r3, [pc, #84]	; (800059c <HAL_DAC_MspInit+0x98>)
 8000548:	2180      	movs	r1, #128	; 0x80
 800054a:	0289      	lsls	r1, r1, #10
 800054c:	430a      	orrs	r2, r1
 800054e:	615a      	str	r2, [r3, #20]
 8000550:	4b12      	ldr	r3, [pc, #72]	; (800059c <HAL_DAC_MspInit+0x98>)
 8000552:	695a      	ldr	r2, [r3, #20]
 8000554:	2380      	movs	r3, #128	; 0x80
 8000556:	029b      	lsls	r3, r3, #10
 8000558:	4013      	ands	r3, r2
 800055a:	60fb      	str	r3, [r7, #12]
 800055c:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration    
    PA4     ------> DAC1_OUT1 
    */
    GPIO_InitStruct.Pin = WIEN_Pin;
 800055e:	2114      	movs	r1, #20
 8000560:	187b      	adds	r3, r7, r1
 8000562:	2210      	movs	r2, #16
 8000564:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000566:	187b      	adds	r3, r7, r1
 8000568:	2203      	movs	r2, #3
 800056a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800056c:	187b      	adds	r3, r7, r1
 800056e:	2200      	movs	r2, #0
 8000570:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(WIEN_GPIO_Port, &GPIO_InitStruct);
 8000572:	187a      	adds	r2, r7, r1
 8000574:	2390      	movs	r3, #144	; 0x90
 8000576:	05db      	lsls	r3, r3, #23
 8000578:	0011      	movs	r1, r2
 800057a:	0018      	movs	r0, r3
 800057c:	f002 f972 	bl	8002864 <HAL_GPIO_Init>

    /* DAC interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8000580:	2200      	movs	r2, #0
 8000582:	2100      	movs	r1, #0
 8000584:	2011      	movs	r0, #17
 8000586:	f001 fd21 	bl	8001fcc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800058a:	2011      	movs	r0, #17
 800058c:	f001 fd3e 	bl	800200c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }
}
 8000590:	46c0      	nop			; (mov r8, r8)
 8000592:	46bd      	mov	sp, r7
 8000594:	b00a      	add	sp, #40	; 0x28
 8000596:	bd80      	pop	{r7, pc}
 8000598:	40007400 	.word	0x40007400
 800059c:	40021000 	.word	0x40021000

080005a0 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
void MX_DMA_Init(void) 
{
 80005a0:	b580      	push	{r7, lr}
 80005a2:	b082      	sub	sp, #8
 80005a4:	af00      	add	r7, sp, #0
  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80005a6:	4b10      	ldr	r3, [pc, #64]	; (80005e8 <MX_DMA_Init+0x48>)
 80005a8:	695a      	ldr	r2, [r3, #20]
 80005aa:	4b0f      	ldr	r3, [pc, #60]	; (80005e8 <MX_DMA_Init+0x48>)
 80005ac:	2101      	movs	r1, #1
 80005ae:	430a      	orrs	r2, r1
 80005b0:	615a      	str	r2, [r3, #20]
 80005b2:	4b0d      	ldr	r3, [pc, #52]	; (80005e8 <MX_DMA_Init+0x48>)
 80005b4:	695b      	ldr	r3, [r3, #20]
 80005b6:	2201      	movs	r2, #1
 80005b8:	4013      	ands	r3, r2
 80005ba:	607b      	str	r3, [r7, #4]
 80005bc:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80005be:	2200      	movs	r2, #0
 80005c0:	2100      	movs	r1, #0
 80005c2:	2009      	movs	r0, #9
 80005c4:	f001 fd02 	bl	8001fcc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80005c8:	2009      	movs	r0, #9
 80005ca:	f001 fd1f 	bl	800200c <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_5_IRQn, 0, 0);
 80005ce:	2200      	movs	r2, #0
 80005d0:	2100      	movs	r1, #0
 80005d2:	200b      	movs	r0, #11
 80005d4:	f001 fcfa 	bl	8001fcc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_5_IRQn);
 80005d8:	200b      	movs	r0, #11
 80005da:	f001 fd17 	bl	800200c <HAL_NVIC_EnableIRQ>

}
 80005de:	46c0      	nop			; (mov r8, r8)
 80005e0:	46bd      	mov	sp, r7
 80005e2:	b002      	add	sp, #8
 80005e4:	bd80      	pop	{r7, pc}
 80005e6:	46c0      	nop			; (mov r8, r8)
 80005e8:	40021000 	.word	0x40021000

080005ec <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through 
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 80005ec:	b590      	push	{r4, r7, lr}
 80005ee:	b08b      	sub	sp, #44	; 0x2c
 80005f0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005f2:	2414      	movs	r4, #20
 80005f4:	193b      	adds	r3, r7, r4
 80005f6:	0018      	movs	r0, r3
 80005f8:	2314      	movs	r3, #20
 80005fa:	001a      	movs	r2, r3
 80005fc:	2100      	movs	r1, #0
 80005fe:	f006 f965 	bl	80068cc <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000602:	4b66      	ldr	r3, [pc, #408]	; (800079c <MX_GPIO_Init+0x1b0>)
 8000604:	695a      	ldr	r2, [r3, #20]
 8000606:	4b65      	ldr	r3, [pc, #404]	; (800079c <MX_GPIO_Init+0x1b0>)
 8000608:	2180      	movs	r1, #128	; 0x80
 800060a:	0309      	lsls	r1, r1, #12
 800060c:	430a      	orrs	r2, r1
 800060e:	615a      	str	r2, [r3, #20]
 8000610:	4b62      	ldr	r3, [pc, #392]	; (800079c <MX_GPIO_Init+0x1b0>)
 8000612:	695a      	ldr	r2, [r3, #20]
 8000614:	2380      	movs	r3, #128	; 0x80
 8000616:	031b      	lsls	r3, r3, #12
 8000618:	4013      	ands	r3, r2
 800061a:	613b      	str	r3, [r7, #16]
 800061c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800061e:	4b5f      	ldr	r3, [pc, #380]	; (800079c <MX_GPIO_Init+0x1b0>)
 8000620:	695a      	ldr	r2, [r3, #20]
 8000622:	4b5e      	ldr	r3, [pc, #376]	; (800079c <MX_GPIO_Init+0x1b0>)
 8000624:	2180      	movs	r1, #128	; 0x80
 8000626:	02c9      	lsls	r1, r1, #11
 8000628:	430a      	orrs	r2, r1
 800062a:	615a      	str	r2, [r3, #20]
 800062c:	4b5b      	ldr	r3, [pc, #364]	; (800079c <MX_GPIO_Init+0x1b0>)
 800062e:	695a      	ldr	r2, [r3, #20]
 8000630:	2380      	movs	r3, #128	; 0x80
 8000632:	02db      	lsls	r3, r3, #11
 8000634:	4013      	ands	r3, r2
 8000636:	60fb      	str	r3, [r7, #12]
 8000638:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800063a:	4b58      	ldr	r3, [pc, #352]	; (800079c <MX_GPIO_Init+0x1b0>)
 800063c:	695a      	ldr	r2, [r3, #20]
 800063e:	4b57      	ldr	r3, [pc, #348]	; (800079c <MX_GPIO_Init+0x1b0>)
 8000640:	2180      	movs	r1, #128	; 0x80
 8000642:	0289      	lsls	r1, r1, #10
 8000644:	430a      	orrs	r2, r1
 8000646:	615a      	str	r2, [r3, #20]
 8000648:	4b54      	ldr	r3, [pc, #336]	; (800079c <MX_GPIO_Init+0x1b0>)
 800064a:	695a      	ldr	r2, [r3, #20]
 800064c:	2380      	movs	r3, #128	; 0x80
 800064e:	029b      	lsls	r3, r3, #10
 8000650:	4013      	ands	r3, r2
 8000652:	60bb      	str	r3, [r7, #8]
 8000654:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000656:	4b51      	ldr	r3, [pc, #324]	; (800079c <MX_GPIO_Init+0x1b0>)
 8000658:	695a      	ldr	r2, [r3, #20]
 800065a:	4b50      	ldr	r3, [pc, #320]	; (800079c <MX_GPIO_Init+0x1b0>)
 800065c:	2180      	movs	r1, #128	; 0x80
 800065e:	0349      	lsls	r1, r1, #13
 8000660:	430a      	orrs	r2, r1
 8000662:	615a      	str	r2, [r3, #20]
 8000664:	4b4d      	ldr	r3, [pc, #308]	; (800079c <MX_GPIO_Init+0x1b0>)
 8000666:	695a      	ldr	r2, [r3, #20]
 8000668:	2380      	movs	r3, #128	; 0x80
 800066a:	035b      	lsls	r3, r3, #13
 800066c:	4013      	ands	r3, r2
 800066e:	607b      	str	r3, [r7, #4]
 8000670:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000672:	4b4a      	ldr	r3, [pc, #296]	; (800079c <MX_GPIO_Init+0x1b0>)
 8000674:	695a      	ldr	r2, [r3, #20]
 8000676:	4b49      	ldr	r3, [pc, #292]	; (800079c <MX_GPIO_Init+0x1b0>)
 8000678:	2180      	movs	r1, #128	; 0x80
 800067a:	03c9      	lsls	r1, r1, #15
 800067c:	430a      	orrs	r2, r1
 800067e:	615a      	str	r2, [r3, #20]
 8000680:	4b46      	ldr	r3, [pc, #280]	; (800079c <MX_GPIO_Init+0x1b0>)
 8000682:	695a      	ldr	r2, [r3, #20]
 8000684:	2380      	movs	r3, #128	; 0x80
 8000686:	03db      	lsls	r3, r3, #15
 8000688:	4013      	ands	r3, r2
 800068a:	603b      	str	r3, [r7, #0]
 800068c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, POLKA_LED_Pin|BOARD_LED_Pin, GPIO_PIN_RESET);
 800068e:	23c0      	movs	r3, #192	; 0xc0
 8000690:	009b      	lsls	r3, r3, #2
 8000692:	4843      	ldr	r0, [pc, #268]	; (80007a0 <MX_GPIO_Init+0x1b4>)
 8000694:	2200      	movs	r2, #0
 8000696:	0019      	movs	r1, r3
 8000698:	f002 fb3a 	bl	8002d10 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC11 PC10 PC12 
                           PC1 PC0 PC7 PC2 
                           PC6 PC3 PC4 PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_11|GPIO_PIN_10|GPIO_PIN_12 
 800069c:	193b      	adds	r3, r7, r4
 800069e:	4a41      	ldr	r2, [pc, #260]	; (80007a4 <MX_GPIO_Init+0x1b8>)
 80006a0:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_7|GPIO_PIN_2 
                          |GPIO_PIN_6|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80006a2:	193b      	adds	r3, r7, r4
 80006a4:	2203      	movs	r2, #3
 80006a6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006a8:	193b      	adds	r3, r7, r4
 80006aa:	2200      	movs	r2, #0
 80006ac:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80006ae:	193b      	adds	r3, r7, r4
 80006b0:	4a3b      	ldr	r2, [pc, #236]	; (80007a0 <MX_GPIO_Init+0x1b4>)
 80006b2:	0019      	movs	r1, r3
 80006b4:	0010      	movs	r0, r2
 80006b6:	f002 f8d5 	bl	8002864 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB9 PB4 PB3 PB8 
                           PB7 PB5 PB6 PB0 
                           PB14 PB1 PB2 PB10 
                           PB13 PB11 PB12 */
  GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_4|GPIO_PIN_3|GPIO_PIN_8 
 80006ba:	193b      	adds	r3, r7, r4
 80006bc:	4a3a      	ldr	r2, [pc, #232]	; (80007a8 <MX_GPIO_Init+0x1bc>)
 80006be:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_7|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_0 
                          |GPIO_PIN_14|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10 
                          |GPIO_PIN_13|GPIO_PIN_11|GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80006c0:	193b      	adds	r3, r7, r4
 80006c2:	2203      	movs	r2, #3
 80006c4:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006c6:	193b      	adds	r3, r7, r4
 80006c8:	2200      	movs	r2, #0
 80006ca:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006cc:	193b      	adds	r3, r7, r4
 80006ce:	4a37      	ldr	r2, [pc, #220]	; (80007ac <MX_GPIO_Init+0x1c0>)
 80006d0:	0019      	movs	r1, r3
 80006d2:	0010      	movs	r0, r2
 80006d4:	f002 f8c6 	bl	8002864 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 80006d8:	193b      	adds	r3, r7, r4
 80006da:	2204      	movs	r2, #4
 80006dc:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80006de:	193b      	adds	r3, r7, r4
 80006e0:	2203      	movs	r2, #3
 80006e2:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006e4:	193b      	adds	r3, r7, r4
 80006e6:	2200      	movs	r2, #0
 80006e8:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80006ea:	193b      	adds	r3, r7, r4
 80006ec:	4a30      	ldr	r2, [pc, #192]	; (80007b0 <MX_GPIO_Init+0x1c4>)
 80006ee:	0019      	movs	r1, r3
 80006f0:	0010      	movs	r0, r2
 80006f2:	f002 f8b7 	bl	8002864 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA12 PA9 PA11 PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_9|GPIO_PIN_11|GPIO_PIN_8;
 80006f6:	193b      	adds	r3, r7, r4
 80006f8:	22d8      	movs	r2, #216	; 0xd8
 80006fa:	0152      	lsls	r2, r2, #5
 80006fc:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80006fe:	193b      	adds	r3, r7, r4
 8000700:	2203      	movs	r2, #3
 8000702:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000704:	193b      	adds	r3, r7, r4
 8000706:	2200      	movs	r2, #0
 8000708:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800070a:	193a      	adds	r2, r7, r4
 800070c:	2390      	movs	r3, #144	; 0x90
 800070e:	05db      	lsls	r3, r3, #23
 8000710:	0011      	movs	r1, r2
 8000712:	0018      	movs	r0, r3
 8000714:	f002 f8a6 	bl	8002864 <HAL_GPIO_Init>

  /*Configure GPIO pins : PF4 PF5 PF6 PF7 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000718:	193b      	adds	r3, r7, r4
 800071a:	22f0      	movs	r2, #240	; 0xf0
 800071c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800071e:	193b      	adds	r3, r7, r4
 8000720:	2203      	movs	r2, #3
 8000722:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000724:	193b      	adds	r3, r7, r4
 8000726:	2200      	movs	r2, #0
 8000728:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800072a:	193b      	adds	r3, r7, r4
 800072c:	4a21      	ldr	r2, [pc, #132]	; (80007b4 <MX_GPIO_Init+0x1c8>)
 800072e:	0019      	movs	r1, r3
 8000730:	0010      	movs	r0, r2
 8000732:	f002 f897 	bl	8002864 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = POLKA_LED_Pin|BOARD_LED_Pin;
 8000736:	0021      	movs	r1, r4
 8000738:	187b      	adds	r3, r7, r1
 800073a:	22c0      	movs	r2, #192	; 0xc0
 800073c:	0092      	lsls	r2, r2, #2
 800073e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000740:	187b      	adds	r3, r7, r1
 8000742:	2201      	movs	r2, #1
 8000744:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000746:	187b      	adds	r3, r7, r1
 8000748:	2200      	movs	r2, #0
 800074a:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800074c:	187b      	adds	r3, r7, r1
 800074e:	2203      	movs	r2, #3
 8000750:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000752:	000c      	movs	r4, r1
 8000754:	187b      	adds	r3, r7, r1
 8000756:	4a12      	ldr	r2, [pc, #72]	; (80007a0 <MX_GPIO_Init+0x1b4>)
 8000758:	0019      	movs	r1, r3
 800075a:	0010      	movs	r0, r2
 800075c:	f002 f882 	bl	8002864 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BLOCK_PU_Pin;
 8000760:	0021      	movs	r1, r4
 8000762:	187b      	adds	r3, r7, r1
 8000764:	2201      	movs	r2, #1
 8000766:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8000768:	187b      	adds	r3, r7, r1
 800076a:	4a13      	ldr	r2, [pc, #76]	; (80007b8 <MX_GPIO_Init+0x1cc>)
 800076c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800076e:	187b      	adds	r3, r7, r1
 8000770:	2201      	movs	r2, #1
 8000772:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(BLOCK_PU_GPIO_Port, &GPIO_InitStruct);
 8000774:	187a      	adds	r2, r7, r1
 8000776:	2390      	movs	r3, #144	; 0x90
 8000778:	05db      	lsls	r3, r3, #23
 800077a:	0011      	movs	r1, r2
 800077c:	0018      	movs	r0, r3
 800077e:	f002 f871 	bl	8002864 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_1_IRQn, 0, 0);
 8000782:	2200      	movs	r2, #0
 8000784:	2100      	movs	r1, #0
 8000786:	2005      	movs	r0, #5
 8000788:	f001 fc20 	bl	8001fcc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_1_IRQn);
 800078c:	2005      	movs	r0, #5
 800078e:	f001 fc3d 	bl	800200c <HAL_NVIC_EnableIRQ>

}
 8000792:	46c0      	nop			; (mov r8, r8)
 8000794:	46bd      	mov	sp, r7
 8000796:	b00b      	add	sp, #44	; 0x2c
 8000798:	bd90      	pop	{r4, r7, pc}
 800079a:	46c0      	nop			; (mov r8, r8)
 800079c:	40021000 	.word	0x40021000
 80007a0:	48000800 	.word	0x48000800
 80007a4:	00003cff 	.word	0x00003cff
 80007a8:	00007fff 	.word	0x00007fff
 80007ac:	48000400 	.word	0x48000400
 80007b0:	48000c00 	.word	0x48000c00
 80007b4:	48001400 	.word	0x48001400
 80007b8:	10310000 	.word	0x10310000

080007bc <MX_IWDG_Init>:

IWDG_HandleTypeDef hiwdg;

/* IWDG init function */
void MX_IWDG_Init(void)
{
 80007bc:	b580      	push	{r7, lr}
 80007be:	af00      	add	r7, sp, #0

  hiwdg.Instance = IWDG;
 80007c0:	4b0b      	ldr	r3, [pc, #44]	; (80007f0 <MX_IWDG_Init+0x34>)
 80007c2:	4a0c      	ldr	r2, [pc, #48]	; (80007f4 <MX_IWDG_Init+0x38>)
 80007c4:	601a      	str	r2, [r3, #0]
  hiwdg.Init.Prescaler = IWDG_PRESCALER_4;
 80007c6:	4b0a      	ldr	r3, [pc, #40]	; (80007f0 <MX_IWDG_Init+0x34>)
 80007c8:	2200      	movs	r2, #0
 80007ca:	605a      	str	r2, [r3, #4]
  hiwdg.Init.Window = 4095;
 80007cc:	4b08      	ldr	r3, [pc, #32]	; (80007f0 <MX_IWDG_Init+0x34>)
 80007ce:	4a0a      	ldr	r2, [pc, #40]	; (80007f8 <MX_IWDG_Init+0x3c>)
 80007d0:	60da      	str	r2, [r3, #12]
  hiwdg.Init.Reload = 4095;
 80007d2:	4b07      	ldr	r3, [pc, #28]	; (80007f0 <MX_IWDG_Init+0x34>)
 80007d4:	4a08      	ldr	r2, [pc, #32]	; (80007f8 <MX_IWDG_Init+0x3c>)
 80007d6:	609a      	str	r2, [r3, #8]
  if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 80007d8:	4b05      	ldr	r3, [pc, #20]	; (80007f0 <MX_IWDG_Init+0x34>)
 80007da:	0018      	movs	r0, r3
 80007dc:	f002 fb18 	bl	8002e10 <HAL_IWDG_Init>
 80007e0:	1e03      	subs	r3, r0, #0
 80007e2:	d001      	beq.n	80007e8 <MX_IWDG_Init+0x2c>
  {
    Error_Handler();
 80007e4:	f000 f8be 	bl	8000964 <Error_Handler>
  }

}
 80007e8:	46c0      	nop			; (mov r8, r8)
 80007ea:	46bd      	mov	sp, r7
 80007ec:	bd80      	pop	{r7, pc}
 80007ee:	46c0      	nop			; (mov r8, r8)
 80007f0:	200004bc 	.word	0x200004bc
 80007f4:	40003000 	.word	0x40003000
 80007f8:	00000fff 	.word	0x00000fff

080007fc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007fc:	b580      	push	{r7, lr}
 80007fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

	// Enable Debug
	EnableDebugMode();
 8000800:	f000 fd54 	bl	80012ac <EnableDebugMode>
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000804:	f000 fed0 	bl	80015a8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000808:	f000 f83a 	bl	8000880 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800080c:	f7ff feee 	bl	80005ec <MX_GPIO_Init>
  MX_DMA_Init();
 8000810:	f7ff fec6 	bl	80005a0 <MX_DMA_Init>
  MX_ADC_Init();
 8000814:	f7ff fd04 	bl	8000220 <MX_ADC_Init>
  MX_CRC_Init();
 8000818:	f7ff fe04 	bl	8000424 <MX_CRC_Init>
  MX_DAC1_Init();
 800081c:	f7ff fe44 	bl	80004a8 <MX_DAC1_Init>
  MX_IWDG_Init();
 8000820:	f7ff ffcc 	bl	80007bc <MX_IWDG_Init>
  MX_TIM1_Init();
 8000824:	f000 f99e 	bl	8000b64 <MX_TIM1_Init>
  MX_TIM2_Init();
 8000828:	f000 fa56 	bl	8000cd8 <MX_TIM2_Init>
  MX_USART2_UART_Init();
 800082c:	f000 fb5a 	bl	8000ee4 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  	// Reset All to Default
    DigiTOS_IWDG_Init(DigiTOS_IWDG_Timeout_16s);// WatchDog
 8000830:	200c      	movs	r0, #12
 8000832:	f000 fdeb 	bl	800140c <DigiTOS_IWDG_Init>

    BlinkLEDs(10,100);
 8000836:	2164      	movs	r1, #100	; 0x64
 8000838:	200a      	movs	r0, #10
 800083a:	f000 fcab 	bl	8001194 <BlinkLEDs>

    UseSoftStart=1;
 800083e:	4b0d      	ldr	r3, [pc, #52]	; (8000874 <main+0x78>)
 8000840:	2201      	movs	r2, #1
 8000842:	601a      	str	r2, [r3, #0]
    HAL_GPIO_EXTI_Callback(BLOCK_PU_Pin); // Get State of Block Pin
 8000844:	2001      	movs	r0, #1
 8000846:	f000 f86d 	bl	8000924 <HAL_GPIO_EXTI_Callback>

    //PWM_50Hz_ON();
    //PWM_50Hz_OFF();

    DAC_SINUS_INIT();
 800084a:	f000 fd99 	bl	8001380 <DAC_SINUS_INIT>

    Set50Hz();
 800084e:	f000 fc1d 	bl	800108c <Set50Hz>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  if (BlockGenerator==1) {
 8000852:	4b09      	ldr	r3, [pc, #36]	; (8000878 <main+0x7c>)
 8000854:	681b      	ldr	r3, [r3, #0]
 8000856:	2b01      	cmp	r3, #1
 8000858:	d106      	bne.n	8000868 <main+0x6c>
		  HAL_GPIO_WritePin(BOARD_LED_GPIO_Port, BOARD_LED_Pin,GPIO_PIN_SET); // LED Off
 800085a:	2380      	movs	r3, #128	; 0x80
 800085c:	005b      	lsls	r3, r3, #1
 800085e:	4807      	ldr	r0, [pc, #28]	; (800087c <main+0x80>)
 8000860:	2201      	movs	r2, #1
 8000862:	0019      	movs	r1, r3
 8000864:	f002 fa54 	bl	8002d10 <HAL_GPIO_WritePin>
	  }

	  Check50Hz(); // Check if need to start\stop generator
 8000868:	f000 fcc6 	bl	80011f8 <Check50Hz>

	  ResetWDG(); // Reset WatchDog
 800086c:	f000 fdc2 	bl	80013f4 <ResetWDG>
	  if (BlockGenerator==1) {
 8000870:	e7ef      	b.n	8000852 <main+0x56>
 8000872:	46c0      	nop			; (mov r8, r8)
 8000874:	200003e4 	.word	0x200003e4
 8000878:	20000004 	.word	0x20000004
 800087c:	48000800 	.word	0x48000800

08000880 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000880:	b590      	push	{r4, r7, lr}
 8000882:	b091      	sub	sp, #68	; 0x44
 8000884:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000886:	2410      	movs	r4, #16
 8000888:	193b      	adds	r3, r7, r4
 800088a:	0018      	movs	r0, r3
 800088c:	2330      	movs	r3, #48	; 0x30
 800088e:	001a      	movs	r2, r3
 8000890:	2100      	movs	r1, #0
 8000892:	f006 f81b 	bl	80068cc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000896:	003b      	movs	r3, r7
 8000898:	0018      	movs	r0, r3
 800089a:	2310      	movs	r3, #16
 800089c:	001a      	movs	r2, r3
 800089e:	2100      	movs	r1, #0
 80008a0:	f006 f814 	bl	80068cc <memset>

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI14|RCC_OSCILLATORTYPE_LSI
 80008a4:	0021      	movs	r1, r4
 80008a6:	187b      	adds	r3, r7, r1
 80008a8:	2219      	movs	r2, #25
 80008aa:	601a      	str	r2, [r3, #0]
                              |RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80008ac:	187b      	adds	r3, r7, r1
 80008ae:	2201      	movs	r2, #1
 80008b0:	605a      	str	r2, [r3, #4]
  RCC_OscInitStruct.HSI14State = RCC_HSI14_ON;
 80008b2:	187b      	adds	r3, r7, r1
 80008b4:	2201      	movs	r2, #1
 80008b6:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.HSI14CalibrationValue = 16;
 80008b8:	187b      	adds	r3, r7, r1
 80008ba:	2210      	movs	r2, #16
 80008bc:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80008be:	187b      	adds	r3, r7, r1
 80008c0:	2201      	movs	r2, #1
 80008c2:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80008c4:	187b      	adds	r3, r7, r1
 80008c6:	2202      	movs	r2, #2
 80008c8:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80008ca:	187b      	adds	r3, r7, r1
 80008cc:	2280      	movs	r2, #128	; 0x80
 80008ce:	0252      	lsls	r2, r2, #9
 80008d0:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 80008d2:	187b      	adds	r3, r7, r1
 80008d4:	2280      	movs	r2, #128	; 0x80
 80008d6:	0352      	lsls	r2, r2, #13
 80008d8:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 80008da:	187b      	adds	r3, r7, r1
 80008dc:	2200      	movs	r2, #0
 80008de:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008e0:	187b      	adds	r3, r7, r1
 80008e2:	0018      	movs	r0, r3
 80008e4:	f002 fb34 	bl	8002f50 <HAL_RCC_OscConfig>
 80008e8:	1e03      	subs	r3, r0, #0
 80008ea:	d001      	beq.n	80008f0 <SystemClock_Config+0x70>
  {
    Error_Handler();
 80008ec:	f000 f83a 	bl	8000964 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008f0:	003b      	movs	r3, r7
 80008f2:	2207      	movs	r2, #7
 80008f4:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80008f6:	003b      	movs	r3, r7
 80008f8:	2202      	movs	r2, #2
 80008fa:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008fc:	003b      	movs	r3, r7
 80008fe:	2200      	movs	r2, #0
 8000900:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000902:	003b      	movs	r3, r7
 8000904:	2200      	movs	r2, #0
 8000906:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000908:	003b      	movs	r3, r7
 800090a:	2101      	movs	r1, #1
 800090c:	0018      	movs	r0, r3
 800090e:	f002 ff8d 	bl	800382c <HAL_RCC_ClockConfig>
 8000912:	1e03      	subs	r3, r0, #0
 8000914:	d001      	beq.n	800091a <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000916:	f000 f825 	bl	8000964 <Error_Handler>
  }
}
 800091a:	46c0      	nop			; (mov r8, r8)
 800091c:	46bd      	mov	sp, r7
 800091e:	b011      	add	sp, #68	; 0x44
 8000920:	bd90      	pop	{r4, r7, pc}
	...

08000924 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000924:	b580      	push	{r7, lr}
 8000926:	b082      	sub	sp, #8
 8000928:	af00      	add	r7, sp, #0
 800092a:	0002      	movs	r2, r0
 800092c:	1dbb      	adds	r3, r7, #6
 800092e:	801a      	strh	r2, [r3, #0]
  if(GPIO_Pin==BLOCK_PU_Pin) {
 8000930:	1dbb      	adds	r3, r7, #6
 8000932:	881b      	ldrh	r3, [r3, #0]
 8000934:	2b01      	cmp	r3, #1
 8000936:	d10e      	bne.n	8000956 <HAL_GPIO_EXTI_Callback+0x32>
	  	  	  if (HAL_GPIO_ReadPin(BLOCK_PU_GPIO_Port, BLOCK_PU_Pin)==GPIO_PIN_RESET) {
 8000938:	2390      	movs	r3, #144	; 0x90
 800093a:	05db      	lsls	r3, r3, #23
 800093c:	2101      	movs	r1, #1
 800093e:	0018      	movs	r0, r3
 8000940:	f002 f9b6 	bl	8002cb0 <HAL_GPIO_ReadPin>
 8000944:	1e03      	subs	r3, r0, #0
 8000946:	d103      	bne.n	8000950 <HAL_GPIO_EXTI_Callback+0x2c>
	  			  BlockGenerator=0; // Unblock Generator
 8000948:	4b05      	ldr	r3, [pc, #20]	; (8000960 <HAL_GPIO_EXTI_Callback+0x3c>)
 800094a:	2200      	movs	r2, #0
 800094c:	601a      	str	r2, [r3, #0]
	  		  } else {
	  			  BlockGenerator=1; //Block Generator
	  		  }
  }
}
 800094e:	e002      	b.n	8000956 <HAL_GPIO_EXTI_Callback+0x32>
	  			  BlockGenerator=1; //Block Generator
 8000950:	4b03      	ldr	r3, [pc, #12]	; (8000960 <HAL_GPIO_EXTI_Callback+0x3c>)
 8000952:	2201      	movs	r2, #1
 8000954:	601a      	str	r2, [r3, #0]
}
 8000956:	46c0      	nop			; (mov r8, r8)
 8000958:	46bd      	mov	sp, r7
 800095a:	b002      	add	sp, #8
 800095c:	bd80      	pop	{r7, pc}
 800095e:	46c0      	nop			; (mov r8, r8)
 8000960:	20000004 	.word	0x20000004

08000964 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000964:	b580      	push	{r7, lr}
 8000966:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000968:	46c0      	nop			; (mov r8, r8)
 800096a:	46bd      	mov	sp, r7
 800096c:	bd80      	pop	{r7, pc}

0800096e <assert_failed>:
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(char *file, uint32_t line)
{ 
 800096e:	b580      	push	{r7, lr}
 8000970:	b082      	sub	sp, #8
 8000972:	af00      	add	r7, sp, #0
 8000974:	6078      	str	r0, [r7, #4]
 8000976:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     tex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
 8000978:	46c0      	nop			; (mov r8, r8)
 800097a:	46bd      	mov	sp, r7
 800097c:	b002      	add	sp, #8
 800097e:	bd80      	pop	{r7, pc}

08000980 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000980:	b580      	push	{r7, lr}
 8000982:	b082      	sub	sp, #8
 8000984:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000986:	4b0f      	ldr	r3, [pc, #60]	; (80009c4 <HAL_MspInit+0x44>)
 8000988:	699a      	ldr	r2, [r3, #24]
 800098a:	4b0e      	ldr	r3, [pc, #56]	; (80009c4 <HAL_MspInit+0x44>)
 800098c:	2101      	movs	r1, #1
 800098e:	430a      	orrs	r2, r1
 8000990:	619a      	str	r2, [r3, #24]
 8000992:	4b0c      	ldr	r3, [pc, #48]	; (80009c4 <HAL_MspInit+0x44>)
 8000994:	699b      	ldr	r3, [r3, #24]
 8000996:	2201      	movs	r2, #1
 8000998:	4013      	ands	r3, r2
 800099a:	607b      	str	r3, [r7, #4]
 800099c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800099e:	4b09      	ldr	r3, [pc, #36]	; (80009c4 <HAL_MspInit+0x44>)
 80009a0:	69da      	ldr	r2, [r3, #28]
 80009a2:	4b08      	ldr	r3, [pc, #32]	; (80009c4 <HAL_MspInit+0x44>)
 80009a4:	2180      	movs	r1, #128	; 0x80
 80009a6:	0549      	lsls	r1, r1, #21
 80009a8:	430a      	orrs	r2, r1
 80009aa:	61da      	str	r2, [r3, #28]
 80009ac:	4b05      	ldr	r3, [pc, #20]	; (80009c4 <HAL_MspInit+0x44>)
 80009ae:	69da      	ldr	r2, [r3, #28]
 80009b0:	2380      	movs	r3, #128	; 0x80
 80009b2:	055b      	lsls	r3, r3, #21
 80009b4:	4013      	ands	r3, r2
 80009b6:	603b      	str	r3, [r7, #0]
 80009b8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009ba:	46c0      	nop			; (mov r8, r8)
 80009bc:	46bd      	mov	sp, r7
 80009be:	b002      	add	sp, #8
 80009c0:	bd80      	pop	{r7, pc}
 80009c2:	46c0      	nop			; (mov r8, r8)
 80009c4:	40021000 	.word	0x40021000

080009c8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009c8:	b580      	push	{r7, lr}
 80009ca:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80009cc:	46c0      	nop			; (mov r8, r8)
 80009ce:	46bd      	mov	sp, r7
 80009d0:	bd80      	pop	{r7, pc}

080009d2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009d2:	b580      	push	{r7, lr}
 80009d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009d6:	e7fe      	b.n	80009d6 <HardFault_Handler+0x4>

080009d8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80009d8:	b580      	push	{r7, lr}
 80009da:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80009dc:	46c0      	nop			; (mov r8, r8)
 80009de:	46bd      	mov	sp, r7
 80009e0:	bd80      	pop	{r7, pc}

080009e2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80009e2:	b580      	push	{r7, lr}
 80009e4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80009e6:	46c0      	nop			; (mov r8, r8)
 80009e8:	46bd      	mov	sp, r7
 80009ea:	bd80      	pop	{r7, pc}

080009ec <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80009ec:	b580      	push	{r7, lr}
 80009ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80009f0:	f000 fe0a 	bl	8001608 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80009f4:	46c0      	nop			; (mov r8, r8)
 80009f6:	46bd      	mov	sp, r7
 80009f8:	bd80      	pop	{r7, pc}

080009fa <EXTI0_1_IRQHandler>:

/**
  * @brief This function handles EXTI line 0 and 1 interrupts.
  */
void EXTI0_1_IRQHandler(void)
{
 80009fa:	b580      	push	{r7, lr}
 80009fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_1_IRQn 0 */

  /* USER CODE END EXTI0_1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BLOCK_PU_Pin);
 80009fe:	2001      	movs	r0, #1
 8000a00:	f002 f9ea 	bl	8002dd8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_1_IRQn 1 */

  /* USER CODE END EXTI0_1_IRQn 1 */
}
 8000a04:	46c0      	nop			; (mov r8, r8)
 8000a06:	46bd      	mov	sp, r7
 8000a08:	bd80      	pop	{r7, pc}
	...

08000a0c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc);
 8000a10:	4b03      	ldr	r3, [pc, #12]	; (8000a20 <DMA1_Channel1_IRQHandler+0x14>)
 8000a12:	0018      	movs	r0, r3
 8000a14:	f001 fe68 	bl	80026e8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8000a18:	46c0      	nop			; (mov r8, r8)
 8000a1a:	46bd      	mov	sp, r7
 8000a1c:	bd80      	pop	{r7, pc}
 8000a1e:	46c0      	nop			; (mov r8, r8)
 8000a20:	200003f4 	.word	0x200003f4

08000a24 <DMA1_Channel4_5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 4 and 5 interrupts.
  */
void DMA1_Channel4_5_IRQHandler(void)
{
 8000a24:	b580      	push	{r7, lr}
 8000a26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_5_IRQn 0 */

  /* USER CODE END DMA1_Channel4_5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8000a28:	4b05      	ldr	r3, [pc, #20]	; (8000a40 <DMA1_Channel4_5_IRQHandler+0x1c>)
 8000a2a:	0018      	movs	r0, r3
 8000a2c:	f001 fe5c 	bl	80026e8 <HAL_DMA_IRQHandler>
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8000a30:	4b04      	ldr	r3, [pc, #16]	; (8000a44 <DMA1_Channel4_5_IRQHandler+0x20>)
 8000a32:	0018      	movs	r0, r3
 8000a34:	f001 fe58 	bl	80026e8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_5_IRQn 1 */

  /* USER CODE END DMA1_Channel4_5_IRQn 1 */
}
 8000a38:	46c0      	nop			; (mov r8, r8)
 8000a3a:	46bd      	mov	sp, r7
 8000a3c:	bd80      	pop	{r7, pc}
 8000a3e:	46c0      	nop			; (mov r8, r8)
 8000a40:	20000590 	.word	0x20000590
 8000a44:	2000054c 	.word	0x2000054c

08000a48 <TIM1_BRK_UP_TRG_COM_IRQHandler>:

/**
  * @brief This function handles TIM1 break, update, trigger and commutation interrupts.
  */
void TIM1_BRK_UP_TRG_COM_IRQHandler(void)
{
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_UP_TRG_COM_IRQn 0 */

  /* USER CODE END TIM1_BRK_UP_TRG_COM_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000a4c:	4b03      	ldr	r3, [pc, #12]	; (8000a5c <TIM1_BRK_UP_TRG_COM_IRQHandler+0x14>)
 8000a4e:	0018      	movs	r0, r3
 8000a50:	f003 fd42 	bl	80044d8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_UP_TRG_COM_IRQn 1 */

  /* USER CODE END TIM1_BRK_UP_TRG_COM_IRQn 1 */
}
 8000a54:	46c0      	nop			; (mov r8, r8)
 8000a56:	46bd      	mov	sp, r7
 8000a58:	bd80      	pop	{r7, pc}
 8000a5a:	46c0      	nop			; (mov r8, r8)
 8000a5c:	200004cc 	.word	0x200004cc

08000a60 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8000a60:	b580      	push	{r7, lr}
 8000a62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000a64:	4b03      	ldr	r3, [pc, #12]	; (8000a74 <TIM1_CC_IRQHandler+0x14>)
 8000a66:	0018      	movs	r0, r3
 8000a68:	f003 fd36 	bl	80044d8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8000a6c:	46c0      	nop			; (mov r8, r8)
 8000a6e:	46bd      	mov	sp, r7
 8000a70:	bd80      	pop	{r7, pc}
 8000a72:	46c0      	nop			; (mov r8, r8)
 8000a74:	200004cc 	.word	0x200004cc

08000a78 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000a7c:	4b0d      	ldr	r3, [pc, #52]	; (8000ab4 <TIM2_IRQHandler+0x3c>)
 8000a7e:	0018      	movs	r0, r3
 8000a80:	f003 fd2a 	bl	80044d8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */


  	if (BlockGenerator==1) {
 8000a84:	4b0c      	ldr	r3, [pc, #48]	; (8000ab8 <TIM2_IRQHandler+0x40>)
 8000a86:	681b      	ldr	r3, [r3, #0]
 8000a88:	2b01      	cmp	r3, #1
 8000a8a:	d102      	bne.n	8000a92 <TIM2_IRQHandler+0x1a>
  	 Set_DAC_SINUS_ZERO();
 8000a8c:	f000 fc6a 	bl	8001364 <Set_DAC_SINUS_ZERO>
  	 return;
 8000a90:	e00e      	b.n	8000ab0 <TIM2_IRQHandler+0x38>
    }

  	HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1,DAC_ALIGN_12B_R,GetSinus());
 8000a92:	f000 fc41 	bl	8001318 <GetSinus>
 8000a96:	0003      	movs	r3, r0
 8000a98:	4808      	ldr	r0, [pc, #32]	; (8000abc <TIM2_IRQHandler+0x44>)
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	2100      	movs	r1, #0
 8000a9e:	f001 fbbb 	bl	8002218 <HAL_DAC_SetValue>

  	sin_step++;
 8000aa2:	4b07      	ldr	r3, [pc, #28]	; (8000ac0 <TIM2_IRQHandler+0x48>)
 8000aa4:	881b      	ldrh	r3, [r3, #0]
 8000aa6:	b29b      	uxth	r3, r3
 8000aa8:	3301      	adds	r3, #1
 8000aaa:	b29a      	uxth	r2, r3
 8000aac:	4b04      	ldr	r3, [pc, #16]	; (8000ac0 <TIM2_IRQHandler+0x48>)
 8000aae:	801a      	strh	r2, [r3, #0]

  /* USER CODE END TIM2_IRQn 1 */
}
 8000ab0:	46bd      	mov	sp, r7
 8000ab2:	bd80      	pop	{r7, pc}
 8000ab4:	2000050c 	.word	0x2000050c
 8000ab8:	20000004 	.word	0x20000004
 8000abc:	200004a8 	.word	0x200004a8
 8000ac0:	200003f0 	.word	0x200003f0

08000ac4 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global and DAC underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_DAC_IRQHandler(&hdac1);
 8000ac8:	4b03      	ldr	r3, [pc, #12]	; (8000ad8 <TIM6_DAC_IRQHandler+0x14>)
 8000aca:	0018      	movs	r0, r3
 8000acc:	f001 fcd6 	bl	800247c <HAL_DAC_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000ad0:	46c0      	nop			; (mov r8, r8)
 8000ad2:	46bd      	mov	sp, r7
 8000ad4:	bd80      	pop	{r7, pc}
 8000ad6:	46c0      	nop			; (mov r8, r8)
 8000ad8:	200004a8 	.word	0x200004a8

08000adc <SystemInit>:
  *         Initialize the default HSI clock source, vector table location and the PLL configuration is reset.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000adc:	b580      	push	{r7, lr}
 8000ade:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001U;
 8000ae0:	4b1a      	ldr	r3, [pc, #104]	; (8000b4c <SystemInit+0x70>)
 8000ae2:	681a      	ldr	r2, [r3, #0]
 8000ae4:	4b19      	ldr	r3, [pc, #100]	; (8000b4c <SystemInit+0x70>)
 8000ae6:	2101      	movs	r1, #1
 8000ae8:	430a      	orrs	r2, r1
 8000aea:	601a      	str	r2, [r3, #0]

#if defined (STM32F051x8) || defined (STM32F058x8)
  /* Reset SW[1:0], HPRE[3:0], PPRE[2:0], ADCPRE and MCOSEL[2:0] bits */
  RCC->CFGR &= (uint32_t)0xF8FFB80CU;
 8000aec:	4b17      	ldr	r3, [pc, #92]	; (8000b4c <SystemInit+0x70>)
 8000aee:	685a      	ldr	r2, [r3, #4]
 8000af0:	4b16      	ldr	r3, [pc, #88]	; (8000b4c <SystemInit+0x70>)
 8000af2:	4917      	ldr	r1, [pc, #92]	; (8000b50 <SystemInit+0x74>)
 8000af4:	400a      	ands	r2, r1
 8000af6:	605a      	str	r2, [r3, #4]
  /* Reset SW[1:0], HPRE[3:0], PPRE[2:0], ADCPRE, MCOSEL[2:0], MCOPRE[2:0] and PLLNODIV bits */
  RCC->CFGR &= (uint32_t)0x08FFB80CU;
#endif /* STM32F051x8 or STM32F058x8 */
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFFU;
 8000af8:	4b14      	ldr	r3, [pc, #80]	; (8000b4c <SystemInit+0x70>)
 8000afa:	681a      	ldr	r2, [r3, #0]
 8000afc:	4b13      	ldr	r3, [pc, #76]	; (8000b4c <SystemInit+0x70>)
 8000afe:	4915      	ldr	r1, [pc, #84]	; (8000b54 <SystemInit+0x78>)
 8000b00:	400a      	ands	r2, r1
 8000b02:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFFU;
 8000b04:	4b11      	ldr	r3, [pc, #68]	; (8000b4c <SystemInit+0x70>)
 8000b06:	681a      	ldr	r2, [r3, #0]
 8000b08:	4b10      	ldr	r3, [pc, #64]	; (8000b4c <SystemInit+0x70>)
 8000b0a:	4913      	ldr	r1, [pc, #76]	; (8000b58 <SystemInit+0x7c>)
 8000b0c:	400a      	ands	r2, r1
 8000b0e:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE and PLLMUL[3:0] bits */
  RCC->CFGR &= (uint32_t)0xFFC0FFFFU;
 8000b10:	4b0e      	ldr	r3, [pc, #56]	; (8000b4c <SystemInit+0x70>)
 8000b12:	685a      	ldr	r2, [r3, #4]
 8000b14:	4b0d      	ldr	r3, [pc, #52]	; (8000b4c <SystemInit+0x70>)
 8000b16:	4911      	ldr	r1, [pc, #68]	; (8000b5c <SystemInit+0x80>)
 8000b18:	400a      	ands	r2, r1
 8000b1a:	605a      	str	r2, [r3, #4]

  /* Reset PREDIV[3:0] bits */
  RCC->CFGR2 &= (uint32_t)0xFFFFFFF0U;
 8000b1c:	4b0b      	ldr	r3, [pc, #44]	; (8000b4c <SystemInit+0x70>)
 8000b1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000b20:	4b0a      	ldr	r3, [pc, #40]	; (8000b4c <SystemInit+0x70>)
 8000b22:	210f      	movs	r1, #15
 8000b24:	438a      	bics	r2, r1
 8000b26:	62da      	str	r2, [r3, #44]	; 0x2c
#elif defined (STM32F030x6) || defined (STM32F030x8) || defined (STM32F031x6) || defined (STM32F038xx) || defined (STM32F030xC)
  /* Reset USART1SW[1:0], I2C1SW and ADCSW bits */
  RCC->CFGR3 &= (uint32_t)0xFFFFFEECU;
#elif defined (STM32F051x8) || defined (STM32F058xx)
  /* Reset USART1SW[1:0], I2C1SW, CECSW and ADCSW bits */
  RCC->CFGR3 &= (uint32_t)0xFFFFFEACU;
 8000b28:	4b08      	ldr	r3, [pc, #32]	; (8000b4c <SystemInit+0x70>)
 8000b2a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000b2c:	4b07      	ldr	r3, [pc, #28]	; (8000b4c <SystemInit+0x70>)
 8000b2e:	490c      	ldr	r1, [pc, #48]	; (8000b60 <SystemInit+0x84>)
 8000b30:	400a      	ands	r2, r1
 8000b32:	631a      	str	r2, [r3, #48]	; 0x30
#else
 #warning "No target selected"
#endif

  /* Reset HSI14 bit */
  RCC->CR2 &= (uint32_t)0xFFFFFFFEU;
 8000b34:	4b05      	ldr	r3, [pc, #20]	; (8000b4c <SystemInit+0x70>)
 8000b36:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000b38:	4b04      	ldr	r3, [pc, #16]	; (8000b4c <SystemInit+0x70>)
 8000b3a:	2101      	movs	r1, #1
 8000b3c:	438a      	bics	r2, r1
 8000b3e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Disable all interrupts */
  RCC->CIR = 0x00000000U;
 8000b40:	4b02      	ldr	r3, [pc, #8]	; (8000b4c <SystemInit+0x70>)
 8000b42:	2200      	movs	r2, #0
 8000b44:	609a      	str	r2, [r3, #8]

}
 8000b46:	46c0      	nop			; (mov r8, r8)
 8000b48:	46bd      	mov	sp, r7
 8000b4a:	bd80      	pop	{r7, pc}
 8000b4c:	40021000 	.word	0x40021000
 8000b50:	f8ffb80c 	.word	0xf8ffb80c
 8000b54:	fef6ffff 	.word	0xfef6ffff
 8000b58:	fffbffff 	.word	0xfffbffff
 8000b5c:	ffc0ffff 	.word	0xffc0ffff
 8000b60:	fffffeac 	.word	0xfffffeac

08000b64 <MX_TIM1_Init>:
TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim2;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8000b64:	b580      	push	{r7, lr}
 8000b66:	b094      	sub	sp, #80	; 0x50
 8000b68:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000b6a:	2340      	movs	r3, #64	; 0x40
 8000b6c:	18fb      	adds	r3, r7, r3
 8000b6e:	0018      	movs	r0, r3
 8000b70:	2310      	movs	r3, #16
 8000b72:	001a      	movs	r2, r3
 8000b74:	2100      	movs	r1, #0
 8000b76:	f005 fea9 	bl	80068cc <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b7a:	2338      	movs	r3, #56	; 0x38
 8000b7c:	18fb      	adds	r3, r7, r3
 8000b7e:	0018      	movs	r0, r3
 8000b80:	2308      	movs	r3, #8
 8000b82:	001a      	movs	r2, r3
 8000b84:	2100      	movs	r1, #0
 8000b86:	f005 fea1 	bl	80068cc <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000b8a:	231c      	movs	r3, #28
 8000b8c:	18fb      	adds	r3, r7, r3
 8000b8e:	0018      	movs	r0, r3
 8000b90:	231c      	movs	r3, #28
 8000b92:	001a      	movs	r2, r3
 8000b94:	2100      	movs	r1, #0
 8000b96:	f005 fe99 	bl	80068cc <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000b9a:	003b      	movs	r3, r7
 8000b9c:	0018      	movs	r0, r3
 8000b9e:	231c      	movs	r3, #28
 8000ba0:	001a      	movs	r2, r3
 8000ba2:	2100      	movs	r1, #0
 8000ba4:	f005 fe92 	bl	80068cc <memset>

  htim1.Instance = TIM1;
 8000ba8:	4b49      	ldr	r3, [pc, #292]	; (8000cd0 <MX_TIM1_Init+0x16c>)
 8000baa:	4a4a      	ldr	r2, [pc, #296]	; (8000cd4 <MX_TIM1_Init+0x170>)
 8000bac:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 480;
 8000bae:	4b48      	ldr	r3, [pc, #288]	; (8000cd0 <MX_TIM1_Init+0x16c>)
 8000bb0:	22f0      	movs	r2, #240	; 0xf0
 8000bb2:	0052      	lsls	r2, r2, #1
 8000bb4:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000bb6:	4b46      	ldr	r3, [pc, #280]	; (8000cd0 <MX_TIM1_Init+0x16c>)
 8000bb8:	2200      	movs	r2, #0
 8000bba:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000;
 8000bbc:	4b44      	ldr	r3, [pc, #272]	; (8000cd0 <MX_TIM1_Init+0x16c>)
 8000bbe:	22fa      	movs	r2, #250	; 0xfa
 8000bc0:	0092      	lsls	r2, r2, #2
 8000bc2:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000bc4:	4b42      	ldr	r3, [pc, #264]	; (8000cd0 <MX_TIM1_Init+0x16c>)
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000bca:	4b41      	ldr	r3, [pc, #260]	; (8000cd0 <MX_TIM1_Init+0x16c>)
 8000bcc:	2200      	movs	r2, #0
 8000bce:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000bd0:	4b3f      	ldr	r3, [pc, #252]	; (8000cd0 <MX_TIM1_Init+0x16c>)
 8000bd2:	2280      	movs	r2, #128	; 0x80
 8000bd4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000bd6:	4b3e      	ldr	r3, [pc, #248]	; (8000cd0 <MX_TIM1_Init+0x16c>)
 8000bd8:	0018      	movs	r0, r3
 8000bda:	f003 f827 	bl	8003c2c <HAL_TIM_Base_Init>
 8000bde:	1e03      	subs	r3, r0, #0
 8000be0:	d001      	beq.n	8000be6 <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 8000be2:	f7ff febf 	bl	8000964 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000be6:	2140      	movs	r1, #64	; 0x40
 8000be8:	187b      	adds	r3, r7, r1
 8000bea:	2280      	movs	r2, #128	; 0x80
 8000bec:	0152      	lsls	r2, r2, #5
 8000bee:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000bf0:	187a      	adds	r2, r7, r1
 8000bf2:	4b37      	ldr	r3, [pc, #220]	; (8000cd0 <MX_TIM1_Init+0x16c>)
 8000bf4:	0011      	movs	r1, r2
 8000bf6:	0018      	movs	r0, r3
 8000bf8:	f003 fea2 	bl	8004940 <HAL_TIM_ConfigClockSource>
 8000bfc:	1e03      	subs	r3, r0, #0
 8000bfe:	d001      	beq.n	8000c04 <MX_TIM1_Init+0xa0>
  {
    Error_Handler();
 8000c00:	f7ff feb0 	bl	8000964 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim1) != HAL_OK)
 8000c04:	4b32      	ldr	r3, [pc, #200]	; (8000cd0 <MX_TIM1_Init+0x16c>)
 8000c06:	0018      	movs	r0, r3
 8000c08:	f003 fa3e 	bl	8004088 <HAL_TIM_OC_Init>
 8000c0c:	1e03      	subs	r3, r0, #0
 8000c0e:	d001      	beq.n	8000c14 <MX_TIM1_Init+0xb0>
  {
    Error_Handler();
 8000c10:	f7ff fea8 	bl	8000964 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c14:	2138      	movs	r1, #56	; 0x38
 8000c16:	187b      	adds	r3, r7, r1
 8000c18:	2200      	movs	r2, #0
 8000c1a:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c1c:	187b      	adds	r3, r7, r1
 8000c1e:	2200      	movs	r2, #0
 8000c20:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000c22:	187a      	adds	r2, r7, r1
 8000c24:	4b2a      	ldr	r3, [pc, #168]	; (8000cd0 <MX_TIM1_Init+0x16c>)
 8000c26:	0011      	movs	r1, r2
 8000c28:	0018      	movs	r0, r3
 8000c2a:	f004 ff55 	bl	8005ad8 <HAL_TIMEx_MasterConfigSynchronization>
 8000c2e:	1e03      	subs	r3, r0, #0
 8000c30:	d001      	beq.n	8000c36 <MX_TIM1_Init+0xd2>
  {
    Error_Handler();
 8000c32:	f7ff fe97 	bl	8000964 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TOGGLE;
 8000c36:	211c      	movs	r1, #28
 8000c38:	187b      	adds	r3, r7, r1
 8000c3a:	2230      	movs	r2, #48	; 0x30
 8000c3c:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 500;
 8000c3e:	187b      	adds	r3, r7, r1
 8000c40:	22fa      	movs	r2, #250	; 0xfa
 8000c42:	0052      	lsls	r2, r2, #1
 8000c44:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000c46:	187b      	adds	r3, r7, r1
 8000c48:	2200      	movs	r2, #0
 8000c4a:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000c4c:	187b      	adds	r3, r7, r1
 8000c4e:	2200      	movs	r2, #0
 8000c50:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000c52:	187b      	adds	r3, r7, r1
 8000c54:	2200      	movs	r2, #0
 8000c56:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000c58:	187b      	adds	r3, r7, r1
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000c5e:	187b      	adds	r3, r7, r1
 8000c60:	2200      	movs	r2, #0
 8000c62:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000c64:	1879      	adds	r1, r7, r1
 8000c66:	4b1a      	ldr	r3, [pc, #104]	; (8000cd0 <MX_TIM1_Init+0x16c>)
 8000c68:	2208      	movs	r2, #8
 8000c6a:	0018      	movs	r0, r3
 8000c6c:	f003 fd4a 	bl	8004704 <HAL_TIM_OC_ConfigChannel>
 8000c70:	1e03      	subs	r3, r0, #0
 8000c72:	d001      	beq.n	8000c78 <MX_TIM1_Init+0x114>
  {
    Error_Handler();
 8000c74:	f7ff fe76 	bl	8000964 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000c78:	003b      	movs	r3, r7
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000c7e:	003b      	movs	r3, r7
 8000c80:	2200      	movs	r2, #0
 8000c82:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000c84:	003b      	movs	r3, r7
 8000c86:	2200      	movs	r2, #0
 8000c88:	609a      	str	r2, [r3, #8]
  //sBreakDeadTimeConfig.DeadTime = 200;
  sBreakDeadTimeConfig.DeadTime = SetDeadTime();
 8000c8a:	f000 fa0b 	bl	80010a4 <SetDeadTime>
 8000c8e:	0003      	movs	r3, r0
 8000c90:	001a      	movs	r2, r3
 8000c92:	003b      	movs	r3, r7
 8000c94:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000c96:	003b      	movs	r3, r7
 8000c98:	2200      	movs	r2, #0
 8000c9a:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000c9c:	003b      	movs	r3, r7
 8000c9e:	2280      	movs	r2, #128	; 0x80
 8000ca0:	0192      	lsls	r2, r2, #6
 8000ca2:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000ca4:	003b      	movs	r3, r7
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	619a      	str	r2, [r3, #24]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000caa:	003a      	movs	r2, r7
 8000cac:	4b08      	ldr	r3, [pc, #32]	; (8000cd0 <MX_TIM1_Init+0x16c>)
 8000cae:	0011      	movs	r1, r2
 8000cb0:	0018      	movs	r0, r3
 8000cb2:	f004 ffb9 	bl	8005c28 <HAL_TIMEx_ConfigBreakDeadTime>
 8000cb6:	1e03      	subs	r3, r0, #0
 8000cb8:	d001      	beq.n	8000cbe <MX_TIM1_Init+0x15a>
  {
    Error_Handler();
 8000cba:	f7ff fe53 	bl	8000964 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim1);
 8000cbe:	4b04      	ldr	r3, [pc, #16]	; (8000cd0 <MX_TIM1_Init+0x16c>)
 8000cc0:	0018      	movs	r0, r3
 8000cc2:	f000 f8a7 	bl	8000e14 <HAL_TIM_MspPostInit>

}
 8000cc6:	46c0      	nop			; (mov r8, r8)
 8000cc8:	46bd      	mov	sp, r7
 8000cca:	b014      	add	sp, #80	; 0x50
 8000ccc:	bd80      	pop	{r7, pc}
 8000cce:	46c0      	nop			; (mov r8, r8)
 8000cd0:	200004cc 	.word	0x200004cc
 8000cd4:	40012c00 	.word	0x40012c00

08000cd8 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	b086      	sub	sp, #24
 8000cdc:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000cde:	2308      	movs	r3, #8
 8000ce0:	18fb      	adds	r3, r7, r3
 8000ce2:	0018      	movs	r0, r3
 8000ce4:	2310      	movs	r3, #16
 8000ce6:	001a      	movs	r2, r3
 8000ce8:	2100      	movs	r1, #0
 8000cea:	f005 fdef 	bl	80068cc <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000cee:	003b      	movs	r3, r7
 8000cf0:	0018      	movs	r0, r3
 8000cf2:	2308      	movs	r3, #8
 8000cf4:	001a      	movs	r2, r3
 8000cf6:	2100      	movs	r1, #0
 8000cf8:	f005 fde8 	bl	80068cc <memset>

  htim2.Instance = TIM2;
 8000cfc:	4b1f      	ldr	r3, [pc, #124]	; (8000d7c <MX_TIM2_Init+0xa4>)
 8000cfe:	2280      	movs	r2, #128	; 0x80
 8000d00:	05d2      	lsls	r2, r2, #23
 8000d02:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000d04:	4b1d      	ldr	r3, [pc, #116]	; (8000d7c <MX_TIM2_Init+0xa4>)
 8000d06:	2200      	movs	r2, #0
 8000d08:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d0a:	4b1c      	ldr	r3, [pc, #112]	; (8000d7c <MX_TIM2_Init+0xa4>)
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000;
 8000d10:	4b1a      	ldr	r3, [pc, #104]	; (8000d7c <MX_TIM2_Init+0xa4>)
 8000d12:	22fa      	movs	r2, #250	; 0xfa
 8000d14:	0092      	lsls	r2, r2, #2
 8000d16:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d18:	4b18      	ldr	r3, [pc, #96]	; (8000d7c <MX_TIM2_Init+0xa4>)
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000d1e:	4b17      	ldr	r3, [pc, #92]	; (8000d7c <MX_TIM2_Init+0xa4>)
 8000d20:	2280      	movs	r2, #128	; 0x80
 8000d22:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000d24:	4b15      	ldr	r3, [pc, #84]	; (8000d7c <MX_TIM2_Init+0xa4>)
 8000d26:	0018      	movs	r0, r3
 8000d28:	f002 ff80 	bl	8003c2c <HAL_TIM_Base_Init>
 8000d2c:	1e03      	subs	r3, r0, #0
 8000d2e:	d001      	beq.n	8000d34 <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 8000d30:	f7ff fe18 	bl	8000964 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000d34:	2108      	movs	r1, #8
 8000d36:	187b      	adds	r3, r7, r1
 8000d38:	2280      	movs	r2, #128	; 0x80
 8000d3a:	0152      	lsls	r2, r2, #5
 8000d3c:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000d3e:	187a      	adds	r2, r7, r1
 8000d40:	4b0e      	ldr	r3, [pc, #56]	; (8000d7c <MX_TIM2_Init+0xa4>)
 8000d42:	0011      	movs	r1, r2
 8000d44:	0018      	movs	r0, r3
 8000d46:	f003 fdfb 	bl	8004940 <HAL_TIM_ConfigClockSource>
 8000d4a:	1e03      	subs	r3, r0, #0
 8000d4c:	d001      	beq.n	8000d52 <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 8000d4e:	f7ff fe09 	bl	8000964 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000d52:	003b      	movs	r3, r7
 8000d54:	2220      	movs	r2, #32
 8000d56:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d58:	003b      	movs	r3, r7
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000d5e:	003a      	movs	r2, r7
 8000d60:	4b06      	ldr	r3, [pc, #24]	; (8000d7c <MX_TIM2_Init+0xa4>)
 8000d62:	0011      	movs	r1, r2
 8000d64:	0018      	movs	r0, r3
 8000d66:	f004 feb7 	bl	8005ad8 <HAL_TIMEx_MasterConfigSynchronization>
 8000d6a:	1e03      	subs	r3, r0, #0
 8000d6c:	d001      	beq.n	8000d72 <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8000d6e:	f7ff fdf9 	bl	8000964 <Error_Handler>
  }

}
 8000d72:	46c0      	nop			; (mov r8, r8)
 8000d74:	46bd      	mov	sp, r7
 8000d76:	b006      	add	sp, #24
 8000d78:	bd80      	pop	{r7, pc}
 8000d7a:	46c0      	nop			; (mov r8, r8)
 8000d7c:	2000050c 	.word	0x2000050c

08000d80 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000d80:	b580      	push	{r7, lr}
 8000d82:	b084      	sub	sp, #16
 8000d84:	af00      	add	r7, sp, #0
 8000d86:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	681b      	ldr	r3, [r3, #0]
 8000d8c:	4a1f      	ldr	r2, [pc, #124]	; (8000e0c <HAL_TIM_Base_MspInit+0x8c>)
 8000d8e:	4293      	cmp	r3, r2
 8000d90:	d11e      	bne.n	8000dd0 <HAL_TIM_Base_MspInit+0x50>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000d92:	4b1f      	ldr	r3, [pc, #124]	; (8000e10 <HAL_TIM_Base_MspInit+0x90>)
 8000d94:	699a      	ldr	r2, [r3, #24]
 8000d96:	4b1e      	ldr	r3, [pc, #120]	; (8000e10 <HAL_TIM_Base_MspInit+0x90>)
 8000d98:	2180      	movs	r1, #128	; 0x80
 8000d9a:	0109      	lsls	r1, r1, #4
 8000d9c:	430a      	orrs	r2, r1
 8000d9e:	619a      	str	r2, [r3, #24]
 8000da0:	4b1b      	ldr	r3, [pc, #108]	; (8000e10 <HAL_TIM_Base_MspInit+0x90>)
 8000da2:	699a      	ldr	r2, [r3, #24]
 8000da4:	2380      	movs	r3, #128	; 0x80
 8000da6:	011b      	lsls	r3, r3, #4
 8000da8:	4013      	ands	r3, r2
 8000daa:	60fb      	str	r3, [r7, #12]
 8000dac:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_UP_TRG_COM_IRQn, 0, 0);
 8000dae:	2200      	movs	r2, #0
 8000db0:	2100      	movs	r1, #0
 8000db2:	200d      	movs	r0, #13
 8000db4:	f001 f90a 	bl	8001fcc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_UP_TRG_COM_IRQn);
 8000db8:	200d      	movs	r0, #13
 8000dba:	f001 f927 	bl	800200c <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	2100      	movs	r1, #0
 8000dc2:	200e      	movs	r0, #14
 8000dc4:	f001 f902 	bl	8001fcc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8000dc8:	200e      	movs	r0, #14
 8000dca:	f001 f91f 	bl	800200c <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8000dce:	e019      	b.n	8000e04 <HAL_TIM_Base_MspInit+0x84>
  else if(tim_baseHandle->Instance==TIM2)
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	681a      	ldr	r2, [r3, #0]
 8000dd4:	2380      	movs	r3, #128	; 0x80
 8000dd6:	05db      	lsls	r3, r3, #23
 8000dd8:	429a      	cmp	r2, r3
 8000dda:	d113      	bne.n	8000e04 <HAL_TIM_Base_MspInit+0x84>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000ddc:	4b0c      	ldr	r3, [pc, #48]	; (8000e10 <HAL_TIM_Base_MspInit+0x90>)
 8000dde:	69da      	ldr	r2, [r3, #28]
 8000de0:	4b0b      	ldr	r3, [pc, #44]	; (8000e10 <HAL_TIM_Base_MspInit+0x90>)
 8000de2:	2101      	movs	r1, #1
 8000de4:	430a      	orrs	r2, r1
 8000de6:	61da      	str	r2, [r3, #28]
 8000de8:	4b09      	ldr	r3, [pc, #36]	; (8000e10 <HAL_TIM_Base_MspInit+0x90>)
 8000dea:	69db      	ldr	r3, [r3, #28]
 8000dec:	2201      	movs	r2, #1
 8000dee:	4013      	ands	r3, r2
 8000df0:	60bb      	str	r3, [r7, #8]
 8000df2:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000df4:	2200      	movs	r2, #0
 8000df6:	2100      	movs	r1, #0
 8000df8:	200f      	movs	r0, #15
 8000dfa:	f001 f8e7 	bl	8001fcc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000dfe:	200f      	movs	r0, #15
 8000e00:	f001 f904 	bl	800200c <HAL_NVIC_EnableIRQ>
}
 8000e04:	46c0      	nop			; (mov r8, r8)
 8000e06:	46bd      	mov	sp, r7
 8000e08:	b004      	add	sp, #16
 8000e0a:	bd80      	pop	{r7, pc}
 8000e0c:	40012c00 	.word	0x40012c00
 8000e10:	40021000 	.word	0x40021000

08000e14 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8000e14:	b590      	push	{r4, r7, lr}
 8000e16:	b08b      	sub	sp, #44	; 0x2c
 8000e18:	af00      	add	r7, sp, #0
 8000e1a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e1c:	2314      	movs	r3, #20
 8000e1e:	18fb      	adds	r3, r7, r3
 8000e20:	0018      	movs	r0, r3
 8000e22:	2314      	movs	r3, #20
 8000e24:	001a      	movs	r2, r3
 8000e26:	2100      	movs	r1, #0
 8000e28:	f005 fd50 	bl	80068cc <memset>
  if(timHandle->Instance==TIM1)
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	4a29      	ldr	r2, [pc, #164]	; (8000ed8 <HAL_TIM_MspPostInit+0xc4>)
 8000e32:	4293      	cmp	r3, r2
 8000e34:	d14b      	bne.n	8000ece <HAL_TIM_MspPostInit+0xba>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e36:	4b29      	ldr	r3, [pc, #164]	; (8000edc <HAL_TIM_MspPostInit+0xc8>)
 8000e38:	695a      	ldr	r2, [r3, #20]
 8000e3a:	4b28      	ldr	r3, [pc, #160]	; (8000edc <HAL_TIM_MspPostInit+0xc8>)
 8000e3c:	2180      	movs	r1, #128	; 0x80
 8000e3e:	0289      	lsls	r1, r1, #10
 8000e40:	430a      	orrs	r2, r1
 8000e42:	615a      	str	r2, [r3, #20]
 8000e44:	4b25      	ldr	r3, [pc, #148]	; (8000edc <HAL_TIM_MspPostInit+0xc8>)
 8000e46:	695a      	ldr	r2, [r3, #20]
 8000e48:	2380      	movs	r3, #128	; 0x80
 8000e4a:	029b      	lsls	r3, r3, #10
 8000e4c:	4013      	ands	r3, r2
 8000e4e:	613b      	str	r3, [r7, #16]
 8000e50:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e52:	4b22      	ldr	r3, [pc, #136]	; (8000edc <HAL_TIM_MspPostInit+0xc8>)
 8000e54:	695a      	ldr	r2, [r3, #20]
 8000e56:	4b21      	ldr	r3, [pc, #132]	; (8000edc <HAL_TIM_MspPostInit+0xc8>)
 8000e58:	2180      	movs	r1, #128	; 0x80
 8000e5a:	02c9      	lsls	r1, r1, #11
 8000e5c:	430a      	orrs	r2, r1
 8000e5e:	615a      	str	r2, [r3, #20]
 8000e60:	4b1e      	ldr	r3, [pc, #120]	; (8000edc <HAL_TIM_MspPostInit+0xc8>)
 8000e62:	695a      	ldr	r2, [r3, #20]
 8000e64:	2380      	movs	r3, #128	; 0x80
 8000e66:	02db      	lsls	r3, r3, #11
 8000e68:	4013      	ands	r3, r2
 8000e6a:	60fb      	str	r3, [r7, #12]
 8000e6c:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration    
    PA10     ------> TIM1_CH3
    PB15     ------> TIM1_CH3N 
    */
    GPIO_InitStruct.Pin = CH1_Pin;
 8000e6e:	2114      	movs	r1, #20
 8000e70:	187b      	adds	r3, r7, r1
 8000e72:	2280      	movs	r2, #128	; 0x80
 8000e74:	00d2      	lsls	r2, r2, #3
 8000e76:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e78:	187b      	adds	r3, r7, r1
 8000e7a:	2202      	movs	r2, #2
 8000e7c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000e7e:	187b      	adds	r3, r7, r1
 8000e80:	2202      	movs	r2, #2
 8000e82:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000e84:	187b      	adds	r3, r7, r1
 8000e86:	2203      	movs	r2, #3
 8000e88:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8000e8a:	187b      	adds	r3, r7, r1
 8000e8c:	2202      	movs	r2, #2
 8000e8e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(CH1_GPIO_Port, &GPIO_InitStruct);
 8000e90:	000c      	movs	r4, r1
 8000e92:	187a      	adds	r2, r7, r1
 8000e94:	2390      	movs	r3, #144	; 0x90
 8000e96:	05db      	lsls	r3, r3, #23
 8000e98:	0011      	movs	r1, r2
 8000e9a:	0018      	movs	r0, r3
 8000e9c:	f001 fce2 	bl	8002864 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = CH2_Pin;
 8000ea0:	0021      	movs	r1, r4
 8000ea2:	187b      	adds	r3, r7, r1
 8000ea4:	2280      	movs	r2, #128	; 0x80
 8000ea6:	0212      	lsls	r2, r2, #8
 8000ea8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000eaa:	187b      	adds	r3, r7, r1
 8000eac:	2202      	movs	r2, #2
 8000eae:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000eb0:	187b      	adds	r3, r7, r1
 8000eb2:	2202      	movs	r2, #2
 8000eb4:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000eb6:	187b      	adds	r3, r7, r1
 8000eb8:	2203      	movs	r2, #3
 8000eba:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8000ebc:	187b      	adds	r3, r7, r1
 8000ebe:	2202      	movs	r2, #2
 8000ec0:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(CH2_GPIO_Port, &GPIO_InitStruct);
 8000ec2:	187b      	adds	r3, r7, r1
 8000ec4:	4a06      	ldr	r2, [pc, #24]	; (8000ee0 <HAL_TIM_MspPostInit+0xcc>)
 8000ec6:	0019      	movs	r1, r3
 8000ec8:	0010      	movs	r0, r2
 8000eca:	f001 fccb 	bl	8002864 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8000ece:	46c0      	nop			; (mov r8, r8)
 8000ed0:	46bd      	mov	sp, r7
 8000ed2:	b00b      	add	sp, #44	; 0x2c
 8000ed4:	bd90      	pop	{r4, r7, pc}
 8000ed6:	46c0      	nop			; (mov r8, r8)
 8000ed8:	40012c00 	.word	0x40012c00
 8000edc:	40021000 	.word	0x40021000
 8000ee0:	48000400 	.word	0x48000400

08000ee4 <MX_USART2_UART_Init>:
DMA_HandleTypeDef hdma_usart2_tx;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 8000ee8:	4b14      	ldr	r3, [pc, #80]	; (8000f3c <MX_USART2_UART_Init+0x58>)
 8000eea:	4a15      	ldr	r2, [pc, #84]	; (8000f40 <MX_USART2_UART_Init+0x5c>)
 8000eec:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000eee:	4b13      	ldr	r3, [pc, #76]	; (8000f3c <MX_USART2_UART_Init+0x58>)
 8000ef0:	22e1      	movs	r2, #225	; 0xe1
 8000ef2:	0252      	lsls	r2, r2, #9
 8000ef4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000ef6:	4b11      	ldr	r3, [pc, #68]	; (8000f3c <MX_USART2_UART_Init+0x58>)
 8000ef8:	2200      	movs	r2, #0
 8000efa:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000efc:	4b0f      	ldr	r3, [pc, #60]	; (8000f3c <MX_USART2_UART_Init+0x58>)
 8000efe:	2200      	movs	r2, #0
 8000f00:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000f02:	4b0e      	ldr	r3, [pc, #56]	; (8000f3c <MX_USART2_UART_Init+0x58>)
 8000f04:	2200      	movs	r2, #0
 8000f06:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000f08:	4b0c      	ldr	r3, [pc, #48]	; (8000f3c <MX_USART2_UART_Init+0x58>)
 8000f0a:	220c      	movs	r2, #12
 8000f0c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f0e:	4b0b      	ldr	r3, [pc, #44]	; (8000f3c <MX_USART2_UART_Init+0x58>)
 8000f10:	2200      	movs	r2, #0
 8000f12:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f14:	4b09      	ldr	r3, [pc, #36]	; (8000f3c <MX_USART2_UART_Init+0x58>)
 8000f16:	2200      	movs	r2, #0
 8000f18:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000f1a:	4b08      	ldr	r3, [pc, #32]	; (8000f3c <MX_USART2_UART_Init+0x58>)
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000f20:	4b06      	ldr	r3, [pc, #24]	; (8000f3c <MX_USART2_UART_Init+0x58>)
 8000f22:	2200      	movs	r2, #0
 8000f24:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000f26:	4b05      	ldr	r3, [pc, #20]	; (8000f3c <MX_USART2_UART_Init+0x58>)
 8000f28:	0018      	movs	r0, r3
 8000f2a:	f004 ffc7 	bl	8005ebc <HAL_UART_Init>
 8000f2e:	1e03      	subs	r3, r0, #0
 8000f30:	d001      	beq.n	8000f36 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000f32:	f7ff fd17 	bl	8000964 <Error_Handler>
  }

}
 8000f36:	46c0      	nop			; (mov r8, r8)
 8000f38:	46bd      	mov	sp, r7
 8000f3a:	bd80      	pop	{r7, pc}
 8000f3c:	200005d4 	.word	0x200005d4
 8000f40:	40004400 	.word	0x40004400

08000f44 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	b08a      	sub	sp, #40	; 0x28
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f4c:	2314      	movs	r3, #20
 8000f4e:	18fb      	adds	r3, r7, r3
 8000f50:	0018      	movs	r0, r3
 8000f52:	2314      	movs	r3, #20
 8000f54:	001a      	movs	r2, r3
 8000f56:	2100      	movs	r1, #0
 8000f58:	f005 fcb8 	bl	80068cc <memset>
  if(uartHandle->Instance==USART2)
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	4a43      	ldr	r2, [pc, #268]	; (8001070 <HAL_UART_MspInit+0x12c>)
 8000f62:	4293      	cmp	r3, r2
 8000f64:	d000      	beq.n	8000f68 <HAL_UART_MspInit+0x24>
 8000f66:	e07e      	b.n	8001066 <HAL_UART_MspInit+0x122>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000f68:	4b42      	ldr	r3, [pc, #264]	; (8001074 <HAL_UART_MspInit+0x130>)
 8000f6a:	69da      	ldr	r2, [r3, #28]
 8000f6c:	4b41      	ldr	r3, [pc, #260]	; (8001074 <HAL_UART_MspInit+0x130>)
 8000f6e:	2180      	movs	r1, #128	; 0x80
 8000f70:	0289      	lsls	r1, r1, #10
 8000f72:	430a      	orrs	r2, r1
 8000f74:	61da      	str	r2, [r3, #28]
 8000f76:	4b3f      	ldr	r3, [pc, #252]	; (8001074 <HAL_UART_MspInit+0x130>)
 8000f78:	69da      	ldr	r2, [r3, #28]
 8000f7a:	2380      	movs	r3, #128	; 0x80
 8000f7c:	029b      	lsls	r3, r3, #10
 8000f7e:	4013      	ands	r3, r2
 8000f80:	613b      	str	r3, [r7, #16]
 8000f82:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f84:	4b3b      	ldr	r3, [pc, #236]	; (8001074 <HAL_UART_MspInit+0x130>)
 8000f86:	695a      	ldr	r2, [r3, #20]
 8000f88:	4b3a      	ldr	r3, [pc, #232]	; (8001074 <HAL_UART_MspInit+0x130>)
 8000f8a:	2180      	movs	r1, #128	; 0x80
 8000f8c:	0289      	lsls	r1, r1, #10
 8000f8e:	430a      	orrs	r2, r1
 8000f90:	615a      	str	r2, [r3, #20]
 8000f92:	4b38      	ldr	r3, [pc, #224]	; (8001074 <HAL_UART_MspInit+0x130>)
 8000f94:	695a      	ldr	r2, [r3, #20]
 8000f96:	2380      	movs	r3, #128	; 0x80
 8000f98:	029b      	lsls	r3, r3, #10
 8000f9a:	4013      	ands	r3, r2
 8000f9c:	60fb      	str	r3, [r7, #12]
 8000f9e:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration    
    PA15     ------> USART2_RX
    PA2     ------> USART2_TX 
    */
    GPIO_InitStruct.Pin = RX1_Pin|TX1_Pin;
 8000fa0:	2114      	movs	r1, #20
 8000fa2:	187b      	adds	r3, r7, r1
 8000fa4:	4a34      	ldr	r2, [pc, #208]	; (8001078 <HAL_UART_MspInit+0x134>)
 8000fa6:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fa8:	187b      	adds	r3, r7, r1
 8000faa:	2202      	movs	r2, #2
 8000fac:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fae:	187b      	adds	r3, r7, r1
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000fb4:	187b      	adds	r3, r7, r1
 8000fb6:	2203      	movs	r2, #3
 8000fb8:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8000fba:	187b      	adds	r3, r7, r1
 8000fbc:	2201      	movs	r2, #1
 8000fbe:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fc0:	187a      	adds	r2, r7, r1
 8000fc2:	2390      	movs	r3, #144	; 0x90
 8000fc4:	05db      	lsls	r3, r3, #23
 8000fc6:	0011      	movs	r1, r2
 8000fc8:	0018      	movs	r0, r3
 8000fca:	f001 fc4b 	bl	8002864 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Channel5;
 8000fce:	4b2b      	ldr	r3, [pc, #172]	; (800107c <HAL_UART_MspInit+0x138>)
 8000fd0:	4a2b      	ldr	r2, [pc, #172]	; (8001080 <HAL_UART_MspInit+0x13c>)
 8000fd2:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000fd4:	4b29      	ldr	r3, [pc, #164]	; (800107c <HAL_UART_MspInit+0x138>)
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000fda:	4b28      	ldr	r3, [pc, #160]	; (800107c <HAL_UART_MspInit+0x138>)
 8000fdc:	2200      	movs	r2, #0
 8000fde:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000fe0:	4b26      	ldr	r3, [pc, #152]	; (800107c <HAL_UART_MspInit+0x138>)
 8000fe2:	2280      	movs	r2, #128	; 0x80
 8000fe4:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000fe6:	4b25      	ldr	r3, [pc, #148]	; (800107c <HAL_UART_MspInit+0x138>)
 8000fe8:	2200      	movs	r2, #0
 8000fea:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000fec:	4b23      	ldr	r3, [pc, #140]	; (800107c <HAL_UART_MspInit+0x138>)
 8000fee:	2200      	movs	r2, #0
 8000ff0:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 8000ff2:	4b22      	ldr	r3, [pc, #136]	; (800107c <HAL_UART_MspInit+0x138>)
 8000ff4:	2220      	movs	r2, #32
 8000ff6:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000ff8:	4b20      	ldr	r3, [pc, #128]	; (800107c <HAL_UART_MspInit+0x138>)
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8000ffe:	4b1f      	ldr	r3, [pc, #124]	; (800107c <HAL_UART_MspInit+0x138>)
 8001000:	0018      	movs	r0, r3
 8001002:	f001 fa73 	bl	80024ec <HAL_DMA_Init>
 8001006:	1e03      	subs	r3, r0, #0
 8001008:	d001      	beq.n	800100e <HAL_UART_MspInit+0xca>
    {
      Error_Handler();
 800100a:	f7ff fcab 	bl	8000964 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	4a1a      	ldr	r2, [pc, #104]	; (800107c <HAL_UART_MspInit+0x138>)
 8001012:	665a      	str	r2, [r3, #100]	; 0x64
 8001014:	4b19      	ldr	r3, [pc, #100]	; (800107c <HAL_UART_MspInit+0x138>)
 8001016:	687a      	ldr	r2, [r7, #4]
 8001018:	625a      	str	r2, [r3, #36]	; 0x24

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Channel4;
 800101a:	4b1a      	ldr	r3, [pc, #104]	; (8001084 <HAL_UART_MspInit+0x140>)
 800101c:	4a1a      	ldr	r2, [pc, #104]	; (8001088 <HAL_UART_MspInit+0x144>)
 800101e:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001020:	4b18      	ldr	r3, [pc, #96]	; (8001084 <HAL_UART_MspInit+0x140>)
 8001022:	2210      	movs	r2, #16
 8001024:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001026:	4b17      	ldr	r3, [pc, #92]	; (8001084 <HAL_UART_MspInit+0x140>)
 8001028:	2200      	movs	r2, #0
 800102a:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 800102c:	4b15      	ldr	r3, [pc, #84]	; (8001084 <HAL_UART_MspInit+0x140>)
 800102e:	2280      	movs	r2, #128	; 0x80
 8001030:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001032:	4b14      	ldr	r3, [pc, #80]	; (8001084 <HAL_UART_MspInit+0x140>)
 8001034:	2200      	movs	r2, #0
 8001036:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001038:	4b12      	ldr	r3, [pc, #72]	; (8001084 <HAL_UART_MspInit+0x140>)
 800103a:	2200      	movs	r2, #0
 800103c:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.Mode = DMA_CIRCULAR;
 800103e:	4b11      	ldr	r3, [pc, #68]	; (8001084 <HAL_UART_MspInit+0x140>)
 8001040:	2220      	movs	r2, #32
 8001042:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001044:	4b0f      	ldr	r3, [pc, #60]	; (8001084 <HAL_UART_MspInit+0x140>)
 8001046:	2200      	movs	r2, #0
 8001048:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 800104a:	4b0e      	ldr	r3, [pc, #56]	; (8001084 <HAL_UART_MspInit+0x140>)
 800104c:	0018      	movs	r0, r3
 800104e:	f001 fa4d 	bl	80024ec <HAL_DMA_Init>
 8001052:	1e03      	subs	r3, r0, #0
 8001054:	d001      	beq.n	800105a <HAL_UART_MspInit+0x116>
    {
      Error_Handler();
 8001056:	f7ff fc85 	bl	8000964 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	4a09      	ldr	r2, [pc, #36]	; (8001084 <HAL_UART_MspInit+0x140>)
 800105e:	661a      	str	r2, [r3, #96]	; 0x60
 8001060:	4b08      	ldr	r3, [pc, #32]	; (8001084 <HAL_UART_MspInit+0x140>)
 8001062:	687a      	ldr	r2, [r7, #4]
 8001064:	625a      	str	r2, [r3, #36]	; 0x24

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001066:	46c0      	nop			; (mov r8, r8)
 8001068:	46bd      	mov	sp, r7
 800106a:	b00a      	add	sp, #40	; 0x28
 800106c:	bd80      	pop	{r7, pc}
 800106e:	46c0      	nop			; (mov r8, r8)
 8001070:	40004400 	.word	0x40004400
 8001074:	40021000 	.word	0x40021000
 8001078:	00008004 	.word	0x00008004
 800107c:	2000054c 	.word	0x2000054c
 8001080:	40020058 	.word	0x40020058
 8001084:	20000590 	.word	0x20000590
 8001088:	40020044 	.word	0x40020044

0800108c <Set50Hz>:
//#define DeadTime16X 				1 //332,8ns
//#define DeadTime32X 				1 //665,6ns
//#define DeadTime64X 				1 //1331,2ns
//#define DeadTime128X 				1 //2662,4ns

void Set50Hz() {
 800108c:	b580      	push	{r7, lr}
 800108e:	af00      	add	r7, sp, #0
	TIM1->PSC=479-1;
 8001090:	4b03      	ldr	r3, [pc, #12]	; (80010a0 <Set50Hz+0x14>)
 8001092:	22ef      	movs	r2, #239	; 0xef
 8001094:	0052      	lsls	r2, r2, #1
 8001096:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001098:	46c0      	nop			; (mov r8, r8)
 800109a:	46bd      	mov	sp, r7
 800109c:	bd80      	pop	{r7, pc}
 800109e:	46c0      	nop			; (mov r8, r8)
 80010a0:	40012c00 	.word	0x40012c00

080010a4 <SetDeadTime>:

void Set505Hz() {
	TIM1->PSC=475-1;
}

uint32_t SetDeadTime() {
 80010a4:	b580      	push	{r7, lr}
 80010a6:	b082      	sub	sp, #8
 80010a8:	af00      	add	r7, sp, #0
	uint32_t _DeadTime=0;
 80010aa:	2300      	movs	r3, #0
 80010ac:	607b      	str	r3, [r7, #4]

	//_DeadTime  |= TIM_BDTR_DTG_7;//128x //2662,4ns
	_DeadTime  |= TIM_BDTR_DTG_6;//64x //1331,2ns
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	2240      	movs	r2, #64	; 0x40
 80010b2:	4313      	orrs	r3, r2
 80010b4:	607b      	str	r3, [r7, #4]
	_DeadTime  |= TIM_BDTR_DTG_5;//32x //665,6ns
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	2220      	movs	r2, #32
 80010ba:	4313      	orrs	r3, r2
 80010bc:	607b      	str	r3, [r7, #4]
	_DeadTime  |= TIM_BDTR_DTG_4;//16x //332,8ns
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	2210      	movs	r2, #16
 80010c2:	4313      	orrs	r3, r2
 80010c4:	607b      	str	r3, [r7, #4]
	_DeadTime  |= TIM_BDTR_DTG_3;//8x //166,4ns
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	2208      	movs	r2, #8
 80010ca:	4313      	orrs	r3, r2
 80010cc:	607b      	str	r3, [r7, #4]
	_DeadTime  |= TIM_BDTR_DTG_2;//4x //83,2ns
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	2204      	movs	r2, #4
 80010d2:	4313      	orrs	r3, r2
 80010d4:	607b      	str	r3, [r7, #4]
	_DeadTime  |= TIM_BDTR_DTG_1;//2x  //41,6ns
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	2202      	movs	r2, #2
 80010da:	4313      	orrs	r3, r2
 80010dc:	607b      	str	r3, [r7, #4]
	_DeadTime  |= TIM_BDTR_DTG_0;//1x // Dead time base value 1/Fosc=1/48000=20.8ns
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	2201      	movs	r2, #1
 80010e2:	4313      	orrs	r3, r2
 80010e4:	607b      	str	r3, [r7, #4]

	return _DeadTime;
 80010e6:	687b      	ldr	r3, [r7, #4]
}
 80010e8:	0018      	movs	r0, r3
 80010ea:	46bd      	mov	sp, r7
 80010ec:	b002      	add	sp, #8
 80010ee:	bd80      	pop	{r7, pc}

080010f0 <PWM_50Hz_ON>:
    //HAL_TIM_PWM_Stop(&htim1,TIM_CHANNEL_3);
}
*/


void PWM_50Hz_ON(void){
 80010f0:	b580      	push	{r7, lr}
 80010f2:	af00      	add	r7, sp, #0
	//PWM_50Hz_OUTEN(); // OUTPUT ENABLE
	//PWM_50Hz_START(); // start CNT
	HAL_TIM_Base_Start(&htim1);
 80010f4:	4b0b      	ldr	r3, [pc, #44]	; (8001124 <PWM_50Hz_ON+0x34>)
 80010f6:	0018      	movs	r0, r3
 80010f8:	f002 fe3e 	bl	8003d78 <HAL_TIM_Base_Start>
	HAL_TIM_Base_Start_IT(&htim1);
 80010fc:	4b09      	ldr	r3, [pc, #36]	; (8001124 <PWM_50Hz_ON+0x34>)
 80010fe:	0018      	movs	r0, r3
 8001100:	f002 fefe 	bl	8003f00 <HAL_TIM_Base_Start_IT>
	HAL_TIM_OC_Start(&htim1, TIM_CHANNEL_3);
 8001104:	4b07      	ldr	r3, [pc, #28]	; (8001124 <PWM_50Hz_ON+0x34>)
 8001106:	2108      	movs	r1, #8
 8001108:	0018      	movs	r0, r3
 800110a:	f003 f875 	bl	80041f8 <HAL_TIM_OC_Start>
	HAL_TIMEx_OCN_Start(&htim1, TIM_CHANNEL_3);
 800110e:	4b05      	ldr	r3, [pc, #20]	; (8001124 <PWM_50Hz_ON+0x34>)
 8001110:	2108      	movs	r1, #8
 8001112:	0018      	movs	r0, r3
 8001114:	f004 fc0e 	bl	8005934 <HAL_TIMEx_OCN_Start>

	IsGenerator=1;
 8001118:	4b03      	ldr	r3, [pc, #12]	; (8001128 <PWM_50Hz_ON+0x38>)
 800111a:	2201      	movs	r2, #1
 800111c:	601a      	str	r2, [r3, #0]
}
 800111e:	46c0      	nop			; (mov r8, r8)
 8001120:	46bd      	mov	sp, r7
 8001122:	bd80      	pop	{r7, pc}
 8001124:	200004cc 	.word	0x200004cc
 8001128:	200003e8 	.word	0x200003e8

0800112c <PWM_50Hz_OFF>:

void PWM_50Hz_OFF(void){
 800112c:	b580      	push	{r7, lr}
 800112e:	af00      	add	r7, sp, #0
	//PWM_50Hz_OUTDIS(); // OUTPUT ENABLE
	//PWM_50Hz_STOP(); // stop CNT
	HAL_TIM_Base_Stop(&htim1);
 8001130:	4b0b      	ldr	r3, [pc, #44]	; (8001160 <PWM_50Hz_OFF+0x34>)
 8001132:	0018      	movs	r0, r3
 8001134:	f002 fe7a 	bl	8003e2c <HAL_TIM_Base_Stop>
	HAL_TIM_Base_Stop_IT(&htim1);
 8001138:	4b09      	ldr	r3, [pc, #36]	; (8001160 <PWM_50Hz_OFF+0x34>)
 800113a:	0018      	movs	r0, r3
 800113c:	f002 ff3a 	bl	8003fb4 <HAL_TIM_Base_Stop_IT>
	HAL_TIM_OC_Stop(&htim1, TIM_CHANNEL_3);
 8001140:	4b07      	ldr	r3, [pc, #28]	; (8001160 <PWM_50Hz_OFF+0x34>)
 8001142:	2108      	movs	r1, #8
 8001144:	0018      	movs	r0, r3
 8001146:	f003 f901 	bl	800434c <HAL_TIM_OC_Stop>
	HAL_TIMEx_OCN_Stop(&htim1, TIM_CHANNEL_3);
 800114a:	4b05      	ldr	r3, [pc, #20]	; (8001160 <PWM_50Hz_OFF+0x34>)
 800114c:	2108      	movs	r1, #8
 800114e:	0018      	movs	r0, r3
 8001150:	f004 fc4a 	bl	80059e8 <HAL_TIMEx_OCN_Stop>

	IsGenerator=0;
 8001154:	4b03      	ldr	r3, [pc, #12]	; (8001164 <PWM_50Hz_OFF+0x38>)
 8001156:	2200      	movs	r2, #0
 8001158:	601a      	str	r2, [r3, #0]
}
 800115a:	46c0      	nop			; (mov r8, r8)
 800115c:	46bd      	mov	sp, r7
 800115e:	bd80      	pop	{r7, pc}
 8001160:	200004cc 	.word	0x200004cc
 8001164:	200003e8 	.word	0x200003e8

08001168 <Off_LEDs>:
void On_LEDs() {
	HAL_GPIO_WritePin(BOARD_LED_GPIO_Port, BOARD_LED_Pin,GPIO_PIN_SET); // LED On
    HAL_GPIO_WritePin(POLKA_LED_GPIO_Port, POLKA_LED_Pin,GPIO_PIN_SET); // LED On
}

void Off_LEDs() {
 8001168:	b580      	push	{r7, lr}
 800116a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(BOARD_LED_GPIO_Port, BOARD_LED_Pin,GPIO_PIN_RESET); // LED Off
 800116c:	2380      	movs	r3, #128	; 0x80
 800116e:	005b      	lsls	r3, r3, #1
 8001170:	4807      	ldr	r0, [pc, #28]	; (8001190 <Off_LEDs+0x28>)
 8001172:	2200      	movs	r2, #0
 8001174:	0019      	movs	r1, r3
 8001176:	f001 fdcb 	bl	8002d10 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(POLKA_LED_GPIO_Port, POLKA_LED_Pin,GPIO_PIN_RESET); // LED Off
 800117a:	2380      	movs	r3, #128	; 0x80
 800117c:	009b      	lsls	r3, r3, #2
 800117e:	4804      	ldr	r0, [pc, #16]	; (8001190 <Off_LEDs+0x28>)
 8001180:	2200      	movs	r2, #0
 8001182:	0019      	movs	r1, r3
 8001184:	f001 fdc4 	bl	8002d10 <HAL_GPIO_WritePin>
}
 8001188:	46c0      	nop			; (mov r8, r8)
 800118a:	46bd      	mov	sp, r7
 800118c:	bd80      	pop	{r7, pc}
 800118e:	46c0      	nop			; (mov r8, r8)
 8001190:	48000800 	.word	0x48000800

08001194 <BlinkLEDs>:

void BlinkLEDs(uint8_t _cnt, uint8_t _Delay) {
 8001194:	b580      	push	{r7, lr}
 8001196:	b084      	sub	sp, #16
 8001198:	af00      	add	r7, sp, #0
 800119a:	0002      	movs	r2, r0
 800119c:	1dfb      	adds	r3, r7, #7
 800119e:	701a      	strb	r2, [r3, #0]
 80011a0:	1dbb      	adds	r3, r7, #6
 80011a2:	1c0a      	adds	r2, r1, #0
 80011a4:	701a      	strb	r2, [r3, #0]
	uint8_t _i=0;
 80011a6:	230f      	movs	r3, #15
 80011a8:	18fb      	adds	r3, r7, r3
 80011aa:	2200      	movs	r2, #0
 80011ac:	701a      	strb	r2, [r3, #0]
	Off_LEDs();
 80011ae:	f7ff ffdb 	bl	8001168 <Off_LEDs>
	while (_i<_cnt) {
 80011b2:	e012      	b.n	80011da <BlinkLEDs+0x46>
		HAL_GPIO_TogglePin(BOARD_LED_GPIO_Port, BOARD_LED_Pin);
 80011b4:	2380      	movs	r3, #128	; 0x80
 80011b6:	005b      	lsls	r3, r3, #1
 80011b8:	4a0e      	ldr	r2, [pc, #56]	; (80011f4 <BlinkLEDs+0x60>)
 80011ba:	0019      	movs	r1, r3
 80011bc:	0010      	movs	r0, r2
 80011be:	f001 fde7 	bl	8002d90 <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin(POLKA_LED_GPIO_Port, POLKA_LED_Pin);
 80011c2:	2380      	movs	r3, #128	; 0x80
 80011c4:	009b      	lsls	r3, r3, #2
 80011c6:	4a0b      	ldr	r2, [pc, #44]	; (80011f4 <BlinkLEDs+0x60>)
 80011c8:	0019      	movs	r1, r3
 80011ca:	0010      	movs	r0, r2
 80011cc:	f001 fde0 	bl	8002d90 <HAL_GPIO_TogglePin>
		HAL_Delay(_Delay);
 80011d0:	1dbb      	adds	r3, r7, #6
 80011d2:	781b      	ldrb	r3, [r3, #0]
 80011d4:	0018      	movs	r0, r3
 80011d6:	f000 fa2d 	bl	8001634 <HAL_Delay>
	while (_i<_cnt) {
 80011da:	230f      	movs	r3, #15
 80011dc:	18fa      	adds	r2, r7, r3
 80011de:	1dfb      	adds	r3, r7, #7
 80011e0:	7812      	ldrb	r2, [r2, #0]
 80011e2:	781b      	ldrb	r3, [r3, #0]
 80011e4:	429a      	cmp	r2, r3
 80011e6:	d3e5      	bcc.n	80011b4 <BlinkLEDs+0x20>
	}
	Off_LEDs();
 80011e8:	f7ff ffbe 	bl	8001168 <Off_LEDs>
}
 80011ec:	46c0      	nop			; (mov r8, r8)
 80011ee:	46bd      	mov	sp, r7
 80011f0:	b004      	add	sp, #16
 80011f2:	bd80      	pop	{r7, pc}
 80011f4:	48000800 	.word	0x48000800

080011f8 <Check50Hz>:

void Check50Hz() {
 80011f8:	b580      	push	{r7, lr}
 80011fa:	af00      	add	r7, sp, #0
	if((BlockGenerator==0) && (IsGenerator==1)) {
 80011fc:	4b26      	ldr	r3, [pc, #152]	; (8001298 <Check50Hz+0xa0>)
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	2b00      	cmp	r3, #0
 8001202:	d121      	bne.n	8001248 <Check50Hz+0x50>
 8001204:	4b25      	ldr	r3, [pc, #148]	; (800129c <Check50Hz+0xa4>)
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	2b01      	cmp	r3, #1
 800120a:	d11d      	bne.n	8001248 <Check50Hz+0x50>
		if (((TIM1->CNT==1000) || (TIM1->CNT==0)) || ((sin_step>100) && (TIM1->CNT<10))) {
 800120c:	4b24      	ldr	r3, [pc, #144]	; (80012a0 <Check50Hz+0xa8>)
 800120e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001210:	23fa      	movs	r3, #250	; 0xfa
 8001212:	009b      	lsls	r3, r3, #2
 8001214:	429a      	cmp	r2, r3
 8001216:	d00c      	beq.n	8001232 <Check50Hz+0x3a>
 8001218:	4b21      	ldr	r3, [pc, #132]	; (80012a0 <Check50Hz+0xa8>)
 800121a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800121c:	2b00      	cmp	r3, #0
 800121e:	d008      	beq.n	8001232 <Check50Hz+0x3a>
 8001220:	4b20      	ldr	r3, [pc, #128]	; (80012a4 <Check50Hz+0xac>)
 8001222:	881b      	ldrh	r3, [r3, #0]
 8001224:	b29b      	uxth	r3, r3
 8001226:	2b64      	cmp	r3, #100	; 0x64
 8001228:	d90e      	bls.n	8001248 <Check50Hz+0x50>
 800122a:	4b1d      	ldr	r3, [pc, #116]	; (80012a0 <Check50Hz+0xa8>)
 800122c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800122e:	2b09      	cmp	r3, #9
 8001230:	d80a      	bhi.n	8001248 <Check50Hz+0x50>
			sin_step=0;
 8001232:	4b1c      	ldr	r3, [pc, #112]	; (80012a4 <Check50Hz+0xac>)
 8001234:	2200      	movs	r2, #0
 8001236:	801a      	strh	r2, [r3, #0]
			HAL_GPIO_TogglePin(BOARD_LED_GPIO_Port, BOARD_LED_Pin); // All is OK, blink
 8001238:	2380      	movs	r3, #128	; 0x80
 800123a:	005b      	lsls	r3, r3, #1
 800123c:	4a1a      	ldr	r2, [pc, #104]	; (80012a8 <Check50Hz+0xb0>)
 800123e:	0019      	movs	r1, r3
 8001240:	0010      	movs	r0, r2
 8001242:	f001 fda5 	bl	8002d90 <HAL_GPIO_TogglePin>
			return;
 8001246:	e025      	b.n	8001294 <Check50Hz+0x9c>
		}
	}

	if((BlockGenerator==0) && (IsGenerator==0)) {
 8001248:	4b13      	ldr	r3, [pc, #76]	; (8001298 <Check50Hz+0xa0>)
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	2b00      	cmp	r3, #0
 800124e:	d10e      	bne.n	800126e <Check50Hz+0x76>
 8001250:	4b12      	ldr	r3, [pc, #72]	; (800129c <Check50Hz+0xa4>)
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	2b00      	cmp	r3, #0
 8001256:	d10a      	bne.n	800126e <Check50Hz+0x76>
		TIM1->CCR3=0;
 8001258:	4b11      	ldr	r3, [pc, #68]	; (80012a0 <Check50Hz+0xa8>)
 800125a:	2200      	movs	r2, #0
 800125c:	63da      	str	r2, [r3, #60]	; 0x3c
		TIM1->CNT=0;
 800125e:	4b10      	ldr	r3, [pc, #64]	; (80012a0 <Check50Hz+0xa8>)
 8001260:	2200      	movs	r2, #0
 8001262:	625a      	str	r2, [r3, #36]	; 0x24
		PWM_50Hz_ON();
 8001264:	f7ff ff44 	bl	80010f0 <PWM_50Hz_ON>
		DAC_SINUS_ON();
 8001268:	f000 f898 	bl	800139c <DAC_SINUS_ON>
		return;
 800126c:	e012      	b.n	8001294 <Check50Hz+0x9c>
	}

	if((BlockGenerator==1) && (IsGenerator==1)) {
 800126e:	4b0a      	ldr	r3, [pc, #40]	; (8001298 <Check50Hz+0xa0>)
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	2b01      	cmp	r3, #1
 8001274:	d10e      	bne.n	8001294 <Check50Hz+0x9c>
 8001276:	4b09      	ldr	r3, [pc, #36]	; (800129c <Check50Hz+0xa4>)
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	2b01      	cmp	r3, #1
 800127c:	d10a      	bne.n	8001294 <Check50Hz+0x9c>
		TIM1->CCR3=0;
 800127e:	4b08      	ldr	r3, [pc, #32]	; (80012a0 <Check50Hz+0xa8>)
 8001280:	2200      	movs	r2, #0
 8001282:	63da      	str	r2, [r3, #60]	; 0x3c
		TIM1->CNT=0;
 8001284:	4b06      	ldr	r3, [pc, #24]	; (80012a0 <Check50Hz+0xa8>)
 8001286:	2200      	movs	r2, #0
 8001288:	625a      	str	r2, [r3, #36]	; 0x24
		PWM_50Hz_OFF();
 800128a:	f7ff ff4f 	bl	800112c <PWM_50Hz_OFF>
		DAC_SINUS_OFF();
 800128e:	f000 f89b 	bl	80013c8 <DAC_SINUS_OFF>
		return;
 8001292:	46c0      	nop			; (mov r8, r8)
	}
}
 8001294:	46bd      	mov	sp, r7
 8001296:	bd80      	pop	{r7, pc}
 8001298:	20000004 	.word	0x20000004
 800129c:	200003e8 	.word	0x200003e8
 80012a0:	40012c00 	.word	0x40012c00
 80012a4:	200003f0 	.word	0x200003f0
 80012a8:	48000800 	.word	0x48000800

080012ac <EnableDebugMode>:

void EnableDebugMode() {
 80012ac:	b580      	push	{r7, lr}
 80012ae:	b082      	sub	sp, #8
 80012b0:	af00      	add	r7, sp, #0
				__HAL_RCC_DBGMCU_CLK_ENABLE();
 80012b2:	4b17      	ldr	r3, [pc, #92]	; (8001310 <EnableDebugMode+0x64>)
 80012b4:	699a      	ldr	r2, [r3, #24]
 80012b6:	4b16      	ldr	r3, [pc, #88]	; (8001310 <EnableDebugMode+0x64>)
 80012b8:	2180      	movs	r1, #128	; 0x80
 80012ba:	03c9      	lsls	r1, r1, #15
 80012bc:	430a      	orrs	r2, r1
 80012be:	619a      	str	r2, [r3, #24]
 80012c0:	4b13      	ldr	r3, [pc, #76]	; (8001310 <EnableDebugMode+0x64>)
 80012c2:	699a      	ldr	r2, [r3, #24]
 80012c4:	2380      	movs	r3, #128	; 0x80
 80012c6:	03db      	lsls	r3, r3, #15
 80012c8:	4013      	ands	r3, r2
 80012ca:	607b      	str	r3, [r7, #4]
 80012cc:	687b      	ldr	r3, [r7, #4]
			    DBGMCU->APB1FZ |= DBGMCU_APB1_FZ_DBG_WWDG_STOP;
 80012ce:	4b11      	ldr	r3, [pc, #68]	; (8001314 <EnableDebugMode+0x68>)
 80012d0:	689a      	ldr	r2, [r3, #8]
 80012d2:	4b10      	ldr	r3, [pc, #64]	; (8001314 <EnableDebugMode+0x68>)
 80012d4:	2180      	movs	r1, #128	; 0x80
 80012d6:	0109      	lsls	r1, r1, #4
 80012d8:	430a      	orrs	r2, r1
 80012da:	609a      	str	r2, [r3, #8]
			    DBGMCU->APB2FZ = 0xFFFFFFFF;
 80012dc:	4b0d      	ldr	r3, [pc, #52]	; (8001314 <EnableDebugMode+0x68>)
 80012de:	2201      	movs	r2, #1
 80012e0:	4252      	negs	r2, r2
 80012e2:	60da      	str	r2, [r3, #12]
			    DBGMCU->APB1FZ = 0xFFFFFFFF;
 80012e4:	4b0b      	ldr	r3, [pc, #44]	; (8001314 <EnableDebugMode+0x68>)
 80012e6:	2201      	movs	r2, #1
 80012e8:	4252      	negs	r2, r2
 80012ea:	609a      	str	r2, [r3, #8]
			    DBGMCU->CR |=DBGMCU_CR_DBG_STOP;
 80012ec:	4b09      	ldr	r3, [pc, #36]	; (8001314 <EnableDebugMode+0x68>)
 80012ee:	685a      	ldr	r2, [r3, #4]
 80012f0:	4b08      	ldr	r3, [pc, #32]	; (8001314 <EnableDebugMode+0x68>)
 80012f2:	2102      	movs	r1, #2
 80012f4:	430a      	orrs	r2, r1
 80012f6:	605a      	str	r2, [r3, #4]
			    __HAL_DBGMCU_FREEZE_IWDG();
 80012f8:	4b06      	ldr	r3, [pc, #24]	; (8001314 <EnableDebugMode+0x68>)
 80012fa:	689a      	ldr	r2, [r3, #8]
 80012fc:	4b05      	ldr	r3, [pc, #20]	; (8001314 <EnableDebugMode+0x68>)
 80012fe:	2180      	movs	r1, #128	; 0x80
 8001300:	0149      	lsls	r1, r1, #5
 8001302:	430a      	orrs	r2, r1
 8001304:	609a      	str	r2, [r3, #8]
}
 8001306:	46c0      	nop			; (mov r8, r8)
 8001308:	46bd      	mov	sp, r7
 800130a:	b002      	add	sp, #8
 800130c:	bd80      	pop	{r7, pc}
 800130e:	46c0      	nop			; (mov r8, r8)
 8001310:	40021000 	.word	0x40021000
 8001314:	40015800 	.word	0x40015800

08001318 <GetSinus>:
		 1363, 1340, 1316, 1293, 1269, 1246, 1222, 1199, 1175, 1152, 1128, 1104, 1080,
		 1056, 1032, 1009, 985, 960, 936, 912, 888, 864, 840, 815, 791, 767, 742, 718,
		 693, 669, 645, 620, 595, 571, 546, 522, 497, 472, 448, 423, 398, 373, 349, 324,
		 299, 274, 250, 225, 200, 175, 150, 125, 100, 76, 51, 26};

uint16_t GetSinus() {
 8001318:	b580      	push	{r7, lr}
 800131a:	af00      	add	r7, sp, #0
	if ((sin_step>=SinRes) || (sin_step<=SINUS_MARGIN)|| (sin_step>=(SinRes-SINUS_MARGIN))) {
 800131c:	4b0f      	ldr	r3, [pc, #60]	; (800135c <GetSinus+0x44>)
 800131e:	881b      	ldrh	r3, [r3, #0]
 8001320:	b29a      	uxth	r2, r3
 8001322:	23e0      	movs	r3, #224	; 0xe0
 8001324:	33ff      	adds	r3, #255	; 0xff
 8001326:	429a      	cmp	r2, r3
 8001328:	d80b      	bhi.n	8001342 <GetSinus+0x2a>
 800132a:	4b0c      	ldr	r3, [pc, #48]	; (800135c <GetSinus+0x44>)
 800132c:	881b      	ldrh	r3, [r3, #0]
 800132e:	b29b      	uxth	r3, r3
 8001330:	2b0a      	cmp	r3, #10
 8001332:	d906      	bls.n	8001342 <GetSinus+0x2a>
 8001334:	4b09      	ldr	r3, [pc, #36]	; (800135c <GetSinus+0x44>)
 8001336:	881b      	ldrh	r3, [r3, #0]
 8001338:	b29a      	uxth	r2, r3
 800133a:	23d6      	movs	r3, #214	; 0xd6
 800133c:	33ff      	adds	r3, #255	; 0xff
 800133e:	429a      	cmp	r2, r3
 8001340:	d901      	bls.n	8001346 <GetSinus+0x2e>

		return 0;
 8001342:	2300      	movs	r3, #0
 8001344:	e007      	b.n	8001356 <GetSinus+0x3e>
	}

	return sin_data[sin_step];
 8001346:	4b05      	ldr	r3, [pc, #20]	; (800135c <GetSinus+0x44>)
 8001348:	881b      	ldrh	r3, [r3, #0]
 800134a:	b29b      	uxth	r3, r3
 800134c:	001a      	movs	r2, r3
 800134e:	4b04      	ldr	r3, [pc, #16]	; (8001360 <GetSinus+0x48>)
 8001350:	0052      	lsls	r2, r2, #1
 8001352:	5ad3      	ldrh	r3, [r2, r3]
 8001354:	b29b      	uxth	r3, r3
}
 8001356:	0018      	movs	r0, r3
 8001358:	46bd      	mov	sp, r7
 800135a:	bd80      	pop	{r7, pc}
 800135c:	200003f0 	.word	0x200003f0
 8001360:	20000008 	.word	0x20000008

08001364 <Set_DAC_SINUS_ZERO>:

 void Set_DAC_SINUS_ZERO() {
 8001364:	b580      	push	{r7, lr}
 8001366:	af00      	add	r7, sp, #0
	 HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1,DAC_ALIGN_12B_R,0);
 8001368:	4804      	ldr	r0, [pc, #16]	; (800137c <Set_DAC_SINUS_ZERO+0x18>)
 800136a:	2300      	movs	r3, #0
 800136c:	2200      	movs	r2, #0
 800136e:	2100      	movs	r1, #0
 8001370:	f000 ff52 	bl	8002218 <HAL_DAC_SetValue>
 }
 8001374:	46c0      	nop			; (mov r8, r8)
 8001376:	46bd      	mov	sp, r7
 8001378:	bd80      	pop	{r7, pc}
 800137a:	46c0      	nop			; (mov r8, r8)
 800137c:	200004a8 	.word	0x200004a8

08001380 <DAC_SINUS_INIT>:

 void DAC_SINUS_INIT() {
 8001380:	b580      	push	{r7, lr}
 8001382:	af00      	add	r7, sp, #0
	 HAL_DAC_Start(&hdac1, DAC_CHANNEL_1);
 8001384:	4b04      	ldr	r3, [pc, #16]	; (8001398 <DAC_SINUS_INIT+0x18>)
 8001386:	2100      	movs	r1, #0
 8001388:	0018      	movs	r0, r3
 800138a:	f001 f833 	bl	80023f4 <HAL_DAC_Start>
	 Set_DAC_SINUS_ZERO();
 800138e:	f7ff ffe9 	bl	8001364 <Set_DAC_SINUS_ZERO>
 }
 8001392:	46c0      	nop			; (mov r8, r8)
 8001394:	46bd      	mov	sp, r7
 8001396:	bd80      	pop	{r7, pc}
 8001398:	200004a8 	.word	0x200004a8

0800139c <DAC_SINUS_ON>:

void DAC_SINUS_ON() {
 800139c:	b580      	push	{r7, lr}
 800139e:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Start(&htim2);
 80013a0:	4b07      	ldr	r3, [pc, #28]	; (80013c0 <DAC_SINUS_ON+0x24>)
 80013a2:	0018      	movs	r0, r3
 80013a4:	f002 fce8 	bl	8003d78 <HAL_TIM_Base_Start>
	HAL_TIM_Base_Start_IT(&htim2);
 80013a8:	4b05      	ldr	r3, [pc, #20]	; (80013c0 <DAC_SINUS_ON+0x24>)
 80013aa:	0018      	movs	r0, r3
 80013ac:	f002 fda8 	bl	8003f00 <HAL_TIM_Base_Start_IT>
	Set_DAC_SINUS_ZERO();
 80013b0:	f7ff ffd8 	bl	8001364 <Set_DAC_SINUS_ZERO>
	IsSinus=1;
 80013b4:	4b03      	ldr	r3, [pc, #12]	; (80013c4 <DAC_SINUS_ON+0x28>)
 80013b6:	2201      	movs	r2, #1
 80013b8:	601a      	str	r2, [r3, #0]
 }
 80013ba:	46c0      	nop			; (mov r8, r8)
 80013bc:	46bd      	mov	sp, r7
 80013be:	bd80      	pop	{r7, pc}
 80013c0:	2000050c 	.word	0x2000050c
 80013c4:	200003ec 	.word	0x200003ec

080013c8 <DAC_SINUS_OFF>:


void DAC_SINUS_OFF() {
 80013c8:	b580      	push	{r7, lr}
 80013ca:	af00      	add	r7, sp, #0
	Set_DAC_SINUS_ZERO();
 80013cc:	f7ff ffca 	bl	8001364 <Set_DAC_SINUS_ZERO>
	HAL_TIM_Base_Stop(&htim2);
 80013d0:	4b06      	ldr	r3, [pc, #24]	; (80013ec <DAC_SINUS_OFF+0x24>)
 80013d2:	0018      	movs	r0, r3
 80013d4:	f002 fd2a 	bl	8003e2c <HAL_TIM_Base_Stop>
	HAL_TIM_Base_Stop_IT(&htim2);
 80013d8:	4b04      	ldr	r3, [pc, #16]	; (80013ec <DAC_SINUS_OFF+0x24>)
 80013da:	0018      	movs	r0, r3
 80013dc:	f002 fdea 	bl	8003fb4 <HAL_TIM_Base_Stop_IT>
	IsSinus=0;
 80013e0:	4b03      	ldr	r3, [pc, #12]	; (80013f0 <DAC_SINUS_OFF+0x28>)
 80013e2:	2200      	movs	r2, #0
 80013e4:	601a      	str	r2, [r3, #0]
 }
 80013e6:	46c0      	nop			; (mov r8, r8)
 80013e8:	46bd      	mov	sp, r7
 80013ea:	bd80      	pop	{r7, pc}
 80013ec:	2000050c 	.word	0x2000050c
 80013f0:	200003ec 	.word	0x200003ec

080013f4 <ResetWDG>:
#include "digiTOS-IWDG.h"

void ResetWDG() {
 80013f4:	b580      	push	{r7, lr}
 80013f6:	af00      	add	r7, sp, #0
	 HAL_IWDG_Refresh(&hiwdg);
 80013f8:	4b03      	ldr	r3, [pc, #12]	; (8001408 <ResetWDG+0x14>)
 80013fa:	0018      	movs	r0, r3
 80013fc:	f001 fd98 	bl	8002f30 <HAL_IWDG_Refresh>
	 //IWDG->KR = 0x0000AAAAU;
}
 8001400:	46c0      	nop			; (mov r8, r8)
 8001402:	46bd      	mov	sp, r7
 8001404:	bd80      	pop	{r7, pc}
 8001406:	46c0      	nop			; (mov r8, r8)
 8001408:	200004bc 	.word	0x200004bc

0800140c <DigiTOS_IWDG_Init>:

uint8_t DigiTOS_IWDG_Init(DigiTOS_IWDG_Timeout_t timeout) {
 800140c:	b580      	push	{r7, lr}
 800140e:	b084      	sub	sp, #16
 8001410:	af00      	add	r7, sp, #0
 8001412:	0002      	movs	r2, r0
 8001414:	1dfb      	adds	r3, r7, #7
 8001416:	701a      	strb	r2, [r3, #0]
	uint8_t result = 0;
 8001418:	230f      	movs	r3, #15
 800141a:	18fb      	adds	r3, r7, r3
 800141c:	2200      	movs	r2, #0
 800141e:	701a      	strb	r2, [r3, #0]
	uint16_t reload = 0;
 8001420:	230c      	movs	r3, #12
 8001422:	18fb      	adds	r3, r7, r3
 8001424:	2200      	movs	r2, #0
 8001426:	801a      	strh	r2, [r3, #0]
	
	/* Check if the system has resumed from IWDG reset */
#if defined(STM32F4xx)
	if (RCC->CSR & RCC_CSR_WDGRSTF) {
#else
	if (RCC->CSR & RCC_CSR_IWDGRSTF) {	
 8001428:	4b56      	ldr	r3, [pc, #344]	; (8001584 <DigiTOS_IWDG_Init+0x178>)
 800142a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800142c:	2380      	movs	r3, #128	; 0x80
 800142e:	059b      	lsls	r3, r3, #22
 8001430:	4013      	ands	r3, r2
 8001432:	d00a      	beq.n	800144a <DigiTOS_IWDG_Init+0x3e>
#endif
		/* Reset by IWDG */
		result = 1;
 8001434:	230f      	movs	r3, #15
 8001436:	18fb      	adds	r3, r7, r3
 8001438:	2201      	movs	r2, #1
 800143a:	701a      	strb	r2, [r3, #0]
		
		/* Clear reset flags */
		RCC->CSR |= RCC_CSR_RMVF;
 800143c:	4b51      	ldr	r3, [pc, #324]	; (8001584 <DigiTOS_IWDG_Init+0x178>)
 800143e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001440:	4b50      	ldr	r3, [pc, #320]	; (8001584 <DigiTOS_IWDG_Init+0x178>)
 8001442:	2180      	movs	r1, #128	; 0x80
 8001444:	0449      	lsls	r1, r1, #17
 8001446:	430a      	orrs	r2, r1
 8001448:	625a      	str	r2, [r3, #36]	; 0x24
	}

	/* Enable write access to IWDG_PR and IWDG_RLR registers */
	IWDG->KR = 0x5555;
 800144a:	4b4f      	ldr	r3, [pc, #316]	; (8001588 <DigiTOS_IWDG_Init+0x17c>)
 800144c:	4a4f      	ldr	r2, [pc, #316]	; (800158c <DigiTOS_IWDG_Init+0x180>)
 800144e:	601a      	str	r2, [r3, #0]

	/* Set proper clock depending on timeout user select */
	if (timeout >= DigiTOS_IWDG_Timeout_8s) {
 8001450:	1dfb      	adds	r3, r7, #7
 8001452:	781b      	ldrb	r3, [r3, #0]
 8001454:	2b0a      	cmp	r3, #10
 8001456:	d903      	bls.n	8001460 <DigiTOS_IWDG_Init+0x54>
		/* IWDG counter clock: LSI/256 = 128Hz */
		IWDG->PR = 0x07;
 8001458:	4b4b      	ldr	r3, [pc, #300]	; (8001588 <DigiTOS_IWDG_Init+0x17c>)
 800145a:	2207      	movs	r2, #7
 800145c:	605a      	str	r2, [r3, #4]
 800145e:	e002      	b.n	8001466 <DigiTOS_IWDG_Init+0x5a>
	} else {
		/* IWDG counter clock: LSI/32 = 1024Hz */
		IWDG->PR = 0x03;
 8001460:	4b49      	ldr	r3, [pc, #292]	; (8001588 <DigiTOS_IWDG_Init+0x17c>)
 8001462:	2203      	movs	r2, #3
 8001464:	605a      	str	r2, [r3, #4]
	}
	
	/* Set counter reload value */
	if (timeout == DigiTOS_IWDG_Timeout_5ms) {
 8001466:	1dfb      	adds	r3, r7, #7
 8001468:	781b      	ldrb	r3, [r3, #0]
 800146a:	2b00      	cmp	r3, #0
 800146c:	d104      	bne.n	8001478 <DigiTOS_IWDG_Init+0x6c>
		reload = 5; /* 1024 Hz IWDG ticking */
 800146e:	230c      	movs	r3, #12
 8001470:	18fb      	adds	r3, r7, r3
 8001472:	2205      	movs	r2, #5
 8001474:	801a      	strh	r2, [r3, #0]
 8001476:	e073      	b.n	8001560 <DigiTOS_IWDG_Init+0x154>
	} else if (timeout == DigiTOS_IWDG_Timeout_10ms) {
 8001478:	1dfb      	adds	r3, r7, #7
 800147a:	781b      	ldrb	r3, [r3, #0]
 800147c:	2b01      	cmp	r3, #1
 800147e:	d104      	bne.n	800148a <DigiTOS_IWDG_Init+0x7e>
		reload = 10; /* 1024 Hz IWDG ticking */
 8001480:	230c      	movs	r3, #12
 8001482:	18fb      	adds	r3, r7, r3
 8001484:	220a      	movs	r2, #10
 8001486:	801a      	strh	r2, [r3, #0]
 8001488:	e06a      	b.n	8001560 <DigiTOS_IWDG_Init+0x154>
	} else if (timeout == DigiTOS_IWDG_Timeout_15ms) {
 800148a:	1dfb      	adds	r3, r7, #7
 800148c:	781b      	ldrb	r3, [r3, #0]
 800148e:	2b02      	cmp	r3, #2
 8001490:	d104      	bne.n	800149c <DigiTOS_IWDG_Init+0x90>
		reload = 15; /* 1024 Hz IWDG ticking */
 8001492:	230c      	movs	r3, #12
 8001494:	18fb      	adds	r3, r7, r3
 8001496:	220f      	movs	r2, #15
 8001498:	801a      	strh	r2, [r3, #0]
 800149a:	e061      	b.n	8001560 <DigiTOS_IWDG_Init+0x154>
	} else if (timeout == DigiTOS_IWDG_Timeout_30ms) {
 800149c:	1dfb      	adds	r3, r7, #7
 800149e:	781b      	ldrb	r3, [r3, #0]
 80014a0:	2b03      	cmp	r3, #3
 80014a2:	d104      	bne.n	80014ae <DigiTOS_IWDG_Init+0xa2>
		reload = 31; /* 1024 Hz IWDG ticking */
 80014a4:	230c      	movs	r3, #12
 80014a6:	18fb      	adds	r3, r7, r3
 80014a8:	221f      	movs	r2, #31
 80014aa:	801a      	strh	r2, [r3, #0]
 80014ac:	e058      	b.n	8001560 <DigiTOS_IWDG_Init+0x154>
	} else if (timeout == DigiTOS_IWDG_Timeout_60ms) {
 80014ae:	1dfb      	adds	r3, r7, #7
 80014b0:	781b      	ldrb	r3, [r3, #0]
 80014b2:	2b04      	cmp	r3, #4
 80014b4:	d104      	bne.n	80014c0 <DigiTOS_IWDG_Init+0xb4>
		reload = 61; /* 1024 Hz IWDG ticking */
 80014b6:	230c      	movs	r3, #12
 80014b8:	18fb      	adds	r3, r7, r3
 80014ba:	223d      	movs	r2, #61	; 0x3d
 80014bc:	801a      	strh	r2, [r3, #0]
 80014be:	e04f      	b.n	8001560 <DigiTOS_IWDG_Init+0x154>
	} else if (timeout == DigiTOS_IWDG_Timeout_120ms) {
 80014c0:	1dfb      	adds	r3, r7, #7
 80014c2:	781b      	ldrb	r3, [r3, #0]
 80014c4:	2b05      	cmp	r3, #5
 80014c6:	d104      	bne.n	80014d2 <DigiTOS_IWDG_Init+0xc6>
		reload = 123; /* 1024 Hz IWDG ticking */
 80014c8:	230c      	movs	r3, #12
 80014ca:	18fb      	adds	r3, r7, r3
 80014cc:	227b      	movs	r2, #123	; 0x7b
 80014ce:	801a      	strh	r2, [r3, #0]
 80014d0:	e046      	b.n	8001560 <DigiTOS_IWDG_Init+0x154>
	} else if (timeout == DigiTOS_IWDG_Timeout_250ms) {
 80014d2:	1dfb      	adds	r3, r7, #7
 80014d4:	781b      	ldrb	r3, [r3, #0]
 80014d6:	2b06      	cmp	r3, #6
 80014d8:	d104      	bne.n	80014e4 <DigiTOS_IWDG_Init+0xd8>
		reload = 255; /* 1024 Hz IWDG ticking */
 80014da:	230c      	movs	r3, #12
 80014dc:	18fb      	adds	r3, r7, r3
 80014de:	22ff      	movs	r2, #255	; 0xff
 80014e0:	801a      	strh	r2, [r3, #0]
 80014e2:	e03d      	b.n	8001560 <DigiTOS_IWDG_Init+0x154>
	} else if (timeout == DigiTOS_IWDG_Timeout_500ms) {
 80014e4:	1dfb      	adds	r3, r7, #7
 80014e6:	781b      	ldrb	r3, [r3, #0]
 80014e8:	2b07      	cmp	r3, #7
 80014ea:	d104      	bne.n	80014f6 <DigiTOS_IWDG_Init+0xea>
		reload = 511; /* 1024 Hz IWDG ticking */
 80014ec:	230c      	movs	r3, #12
 80014ee:	18fb      	adds	r3, r7, r3
 80014f0:	4a27      	ldr	r2, [pc, #156]	; (8001590 <DigiTOS_IWDG_Init+0x184>)
 80014f2:	801a      	strh	r2, [r3, #0]
 80014f4:	e034      	b.n	8001560 <DigiTOS_IWDG_Init+0x154>
	} else if (timeout == DigiTOS_IWDG_Timeout_1s) {
 80014f6:	1dfb      	adds	r3, r7, #7
 80014f8:	781b      	ldrb	r3, [r3, #0]
 80014fa:	2b08      	cmp	r3, #8
 80014fc:	d104      	bne.n	8001508 <DigiTOS_IWDG_Init+0xfc>
		reload = 1023; /* 1024 Hz IWDG ticking */
 80014fe:	230c      	movs	r3, #12
 8001500:	18fb      	adds	r3, r7, r3
 8001502:	4a24      	ldr	r2, [pc, #144]	; (8001594 <DigiTOS_IWDG_Init+0x188>)
 8001504:	801a      	strh	r2, [r3, #0]
 8001506:	e02b      	b.n	8001560 <DigiTOS_IWDG_Init+0x154>
	} else if (timeout == DigiTOS_IWDG_Timeout_2s) {
 8001508:	1dfb      	adds	r3, r7, #7
 800150a:	781b      	ldrb	r3, [r3, #0]
 800150c:	2b09      	cmp	r3, #9
 800150e:	d104      	bne.n	800151a <DigiTOS_IWDG_Init+0x10e>
		reload = 2047; /* 1024 Hz IWDG ticking */
 8001510:	230c      	movs	r3, #12
 8001512:	18fb      	adds	r3, r7, r3
 8001514:	4a20      	ldr	r2, [pc, #128]	; (8001598 <DigiTOS_IWDG_Init+0x18c>)
 8001516:	801a      	strh	r2, [r3, #0]
 8001518:	e022      	b.n	8001560 <DigiTOS_IWDG_Init+0x154>
	} else if (timeout == DigiTOS_IWDG_Timeout_4s) {
 800151a:	1dfb      	adds	r3, r7, #7
 800151c:	781b      	ldrb	r3, [r3, #0]
 800151e:	2b0a      	cmp	r3, #10
 8001520:	d104      	bne.n	800152c <DigiTOS_IWDG_Init+0x120>
		reload = 4095; /* 1024 Hz IWDG ticking */
 8001522:	230c      	movs	r3, #12
 8001524:	18fb      	adds	r3, r7, r3
 8001526:	4a1d      	ldr	r2, [pc, #116]	; (800159c <DigiTOS_IWDG_Init+0x190>)
 8001528:	801a      	strh	r2, [r3, #0]
 800152a:	e019      	b.n	8001560 <DigiTOS_IWDG_Init+0x154>
	} else if (timeout == DigiTOS_IWDG_Timeout_8s) {
 800152c:	1dfb      	adds	r3, r7, #7
 800152e:	781b      	ldrb	r3, [r3, #0]
 8001530:	2b0b      	cmp	r3, #11
 8001532:	d104      	bne.n	800153e <DigiTOS_IWDG_Init+0x132>
		reload = 1023; /* 128 Hz IWDG ticking */
 8001534:	230c      	movs	r3, #12
 8001536:	18fb      	adds	r3, r7, r3
 8001538:	4a16      	ldr	r2, [pc, #88]	; (8001594 <DigiTOS_IWDG_Init+0x188>)
 800153a:	801a      	strh	r2, [r3, #0]
 800153c:	e010      	b.n	8001560 <DigiTOS_IWDG_Init+0x154>
	} else if (timeout == DigiTOS_IWDG_Timeout_16s) {
 800153e:	1dfb      	adds	r3, r7, #7
 8001540:	781b      	ldrb	r3, [r3, #0]
 8001542:	2b0c      	cmp	r3, #12
 8001544:	d104      	bne.n	8001550 <DigiTOS_IWDG_Init+0x144>
		reload = 2047; /* 128 Hz IWDG ticking */
 8001546:	230c      	movs	r3, #12
 8001548:	18fb      	adds	r3, r7, r3
 800154a:	4a13      	ldr	r2, [pc, #76]	; (8001598 <DigiTOS_IWDG_Init+0x18c>)
 800154c:	801a      	strh	r2, [r3, #0]
 800154e:	e007      	b.n	8001560 <DigiTOS_IWDG_Init+0x154>
	} else if (timeout == DigiTOS_IWDG_Timeout_32s) {
 8001550:	1dfb      	adds	r3, r7, #7
 8001552:	781b      	ldrb	r3, [r3, #0]
 8001554:	2b0d      	cmp	r3, #13
 8001556:	d103      	bne.n	8001560 <DigiTOS_IWDG_Init+0x154>
		reload = 4095; /* 128 Hz IWDG ticking */
 8001558:	230c      	movs	r3, #12
 800155a:	18fb      	adds	r3, r7, r3
 800155c:	4a0f      	ldr	r2, [pc, #60]	; (800159c <DigiTOS_IWDG_Init+0x190>)
 800155e:	801a      	strh	r2, [r3, #0]
	}
	
	/* Set reload */
	IWDG->RLR = reload;
 8001560:	4b09      	ldr	r3, [pc, #36]	; (8001588 <DigiTOS_IWDG_Init+0x17c>)
 8001562:	220c      	movs	r2, #12
 8001564:	18ba      	adds	r2, r7, r2
 8001566:	8812      	ldrh	r2, [r2, #0]
 8001568:	609a      	str	r2, [r3, #8]

	/* Reload IWDG counter */
	IWDG->KR = 0xAAAA;
 800156a:	4b07      	ldr	r3, [pc, #28]	; (8001588 <DigiTOS_IWDG_Init+0x17c>)
 800156c:	4a0c      	ldr	r2, [pc, #48]	; (80015a0 <DigiTOS_IWDG_Init+0x194>)
 800156e:	601a      	str	r2, [r3, #0]

	/* Enable IWDG (the LSI oscillator will be enabled by hardware) */
	IWDG->KR = 0xCCCC;
 8001570:	4b05      	ldr	r3, [pc, #20]	; (8001588 <DigiTOS_IWDG_Init+0x17c>)
 8001572:	4a0c      	ldr	r2, [pc, #48]	; (80015a4 <DigiTOS_IWDG_Init+0x198>)
 8001574:	601a      	str	r2, [r3, #0]
	
	/* Return status */
	return result;
 8001576:	230f      	movs	r3, #15
 8001578:	18fb      	adds	r3, r7, r3
 800157a:	781b      	ldrb	r3, [r3, #0]
}
 800157c:	0018      	movs	r0, r3
 800157e:	46bd      	mov	sp, r7
 8001580:	b004      	add	sp, #16
 8001582:	bd80      	pop	{r7, pc}
 8001584:	40021000 	.word	0x40021000
 8001588:	40003000 	.word	0x40003000
 800158c:	00005555 	.word	0x00005555
 8001590:	000001ff 	.word	0x000001ff
 8001594:	000003ff 	.word	0x000003ff
 8001598:	000007ff 	.word	0x000007ff
 800159c:	00000fff 	.word	0x00000fff
 80015a0:	0000aaaa 	.word	0x0000aaaa
 80015a4:	0000cccc 	.word	0x0000cccc

080015a8 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80015a8:	b580      	push	{r7, lr}
 80015aa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80015ac:	4b07      	ldr	r3, [pc, #28]	; (80015cc <HAL_Init+0x24>)
 80015ae:	681a      	ldr	r2, [r3, #0]
 80015b0:	4b06      	ldr	r3, [pc, #24]	; (80015cc <HAL_Init+0x24>)
 80015b2:	2110      	movs	r1, #16
 80015b4:	430a      	orrs	r2, r1
 80015b6:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 80015b8:	2000      	movs	r0, #0
 80015ba:	f000 f809 	bl	80015d0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80015be:	f7ff f9df 	bl	8000980 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80015c2:	2300      	movs	r3, #0
}
 80015c4:	0018      	movs	r0, r3
 80015c6:	46bd      	mov	sp, r7
 80015c8:	bd80      	pop	{r7, pc}
 80015ca:	46c0      	nop			; (mov r8, r8)
 80015cc:	40022000 	.word	0x40022000

080015d0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80015d0:	b580      	push	{r7, lr}
 80015d2:	b082      	sub	sp, #8
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000U);
 80015d8:	f002 fb08 	bl	8003bec <HAL_RCC_GetHCLKFreq>
 80015dc:	0002      	movs	r2, r0
 80015de:	23fa      	movs	r3, #250	; 0xfa
 80015e0:	0099      	lsls	r1, r3, #2
 80015e2:	0010      	movs	r0, r2
 80015e4:	f7fe fd90 	bl	8000108 <__udivsi3>
 80015e8:	0003      	movs	r3, r0
 80015ea:	0018      	movs	r0, r3
 80015ec:	f000 fd2a 	bl	8002044 <HAL_SYSTICK_Config>

  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority ,0U);
 80015f0:	6879      	ldr	r1, [r7, #4]
 80015f2:	2301      	movs	r3, #1
 80015f4:	425b      	negs	r3, r3
 80015f6:	2200      	movs	r2, #0
 80015f8:	0018      	movs	r0, r3
 80015fa:	f000 fce7 	bl	8001fcc <HAL_NVIC_SetPriority>

   /* Return function status */
  return HAL_OK;
 80015fe:	2300      	movs	r3, #0
}
 8001600:	0018      	movs	r0, r3
 8001602:	46bd      	mov	sp, r7
 8001604:	b002      	add	sp, #8
 8001606:	bd80      	pop	{r7, pc}

08001608 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001608:	b580      	push	{r7, lr}
 800160a:	af00      	add	r7, sp, #0
  uwTick++;
 800160c:	4b03      	ldr	r3, [pc, #12]	; (800161c <HAL_IncTick+0x14>)
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	1c5a      	adds	r2, r3, #1
 8001612:	4b02      	ldr	r3, [pc, #8]	; (800161c <HAL_IncTick+0x14>)
 8001614:	601a      	str	r2, [r3, #0]
}
 8001616:	46c0      	nop			; (mov r8, r8)
 8001618:	46bd      	mov	sp, r7
 800161a:	bd80      	pop	{r7, pc}
 800161c:	20000644 	.word	0x20000644

08001620 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001620:	b580      	push	{r7, lr}
 8001622:	af00      	add	r7, sp, #0
  return uwTick;
 8001624:	4b02      	ldr	r3, [pc, #8]	; (8001630 <HAL_GetTick+0x10>)
 8001626:	681b      	ldr	r3, [r3, #0]
}
 8001628:	0018      	movs	r0, r3
 800162a:	46bd      	mov	sp, r7
 800162c:	bd80      	pop	{r7, pc}
 800162e:	46c0      	nop			; (mov r8, r8)
 8001630:	20000644 	.word	0x20000644

08001634 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(__IO uint32_t Delay)
{
 8001634:	b580      	push	{r7, lr}
 8001636:	b084      	sub	sp, #16
 8001638:	af00      	add	r7, sp, #0
 800163a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800163c:	f7ff fff0 	bl	8001620 <HAL_GetTick>
 8001640:	0003      	movs	r3, r0
 8001642:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	60fb      	str	r3, [r7, #12]
  
  /* Add a period to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001648:	68fb      	ldr	r3, [r7, #12]
 800164a:	3301      	adds	r3, #1
 800164c:	d002      	beq.n	8001654 <HAL_Delay+0x20>
  {
     wait++;
 800164e:	68fb      	ldr	r3, [r7, #12]
 8001650:	3301      	adds	r3, #1
 8001652:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8001654:	46c0      	nop			; (mov r8, r8)
 8001656:	f7ff ffe3 	bl	8001620 <HAL_GetTick>
 800165a:	0002      	movs	r2, r0
 800165c:	68bb      	ldr	r3, [r7, #8]
 800165e:	1ad3      	subs	r3, r2, r3
 8001660:	68fa      	ldr	r2, [r7, #12]
 8001662:	429a      	cmp	r2, r3
 8001664:	d8f7      	bhi.n	8001656 <HAL_Delay+0x22>
  {
  }
}
 8001666:	46c0      	nop			; (mov r8, r8)
 8001668:	46bd      	mov	sp, r7
 800166a:	b004      	add	sp, #16
 800166c:	bd80      	pop	{r7, pc}
	...

08001670 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001670:	b580      	push	{r7, lr}
 8001672:	b084      	sub	sp, #16
 8001674:	af00      	add	r7, sp, #0
 8001676:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001678:	230f      	movs	r3, #15
 800167a:	18fb      	adds	r3, r7, r3
 800167c:	2200      	movs	r2, #0
 800167e:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0U;
 8001680:	2300      	movs	r3, #0
 8001682:	60bb      	str	r3, [r7, #8]

  /* Check ADC handle */
  if(hadc == NULL)
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	2b00      	cmp	r3, #0
 8001688:	d101      	bne.n	800168e <HAL_ADC_Init+0x1e>
  {
    return HAL_ERROR;
 800168a:	2301      	movs	r3, #1
 800168c:	e234      	b.n	8001af8 <HAL_ADC_Init+0x488>
  }
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	4ac4      	ldr	r2, [pc, #784]	; (80019a4 <HAL_ADC_Init+0x334>)
 8001694:	4293      	cmp	r3, r2
 8001696:	d007      	beq.n	80016a8 <HAL_ADC_Init+0x38>
 8001698:	2374      	movs	r3, #116	; 0x74
 800169a:	33ff      	adds	r3, #255	; 0xff
 800169c:	001a      	movs	r2, r3
 800169e:	4bc2      	ldr	r3, [pc, #776]	; (80019a8 <HAL_ADC_Init+0x338>)
 80016a0:	0011      	movs	r1, r2
 80016a2:	0018      	movs	r0, r3
 80016a4:	f7ff f963 	bl	800096e <assert_failed>
  assert_param(IS_ADC_CLOCKPRESCALER(hadc->Init.ClockPrescaler));
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	685b      	ldr	r3, [r3, #4]
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d012      	beq.n	80016d6 <HAL_ADC_Init+0x66>
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	685a      	ldr	r2, [r3, #4]
 80016b4:	2380      	movs	r3, #128	; 0x80
 80016b6:	05db      	lsls	r3, r3, #23
 80016b8:	429a      	cmp	r2, r3
 80016ba:	d00c      	beq.n	80016d6 <HAL_ADC_Init+0x66>
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	685a      	ldr	r2, [r3, #4]
 80016c0:	2380      	movs	r3, #128	; 0x80
 80016c2:	061b      	lsls	r3, r3, #24
 80016c4:	429a      	cmp	r2, r3
 80016c6:	d006      	beq.n	80016d6 <HAL_ADC_Init+0x66>
 80016c8:	23ba      	movs	r3, #186	; 0xba
 80016ca:	005a      	lsls	r2, r3, #1
 80016cc:	4bb6      	ldr	r3, [pc, #728]	; (80019a8 <HAL_ADC_Init+0x338>)
 80016ce:	0011      	movs	r1, r2
 80016d0:	0018      	movs	r0, r3
 80016d2:	f7ff f94c 	bl	800096e <assert_failed>
  assert_param(IS_ADC_RESOLUTION(hadc->Init.Resolution));
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	689b      	ldr	r3, [r3, #8]
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d013      	beq.n	8001706 <HAL_ADC_Init+0x96>
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	689b      	ldr	r3, [r3, #8]
 80016e2:	2b08      	cmp	r3, #8
 80016e4:	d00f      	beq.n	8001706 <HAL_ADC_Init+0x96>
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	689b      	ldr	r3, [r3, #8]
 80016ea:	2b10      	cmp	r3, #16
 80016ec:	d00b      	beq.n	8001706 <HAL_ADC_Init+0x96>
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	689b      	ldr	r3, [r3, #8]
 80016f2:	2b18      	cmp	r3, #24
 80016f4:	d007      	beq.n	8001706 <HAL_ADC_Init+0x96>
 80016f6:	2376      	movs	r3, #118	; 0x76
 80016f8:	33ff      	adds	r3, #255	; 0xff
 80016fa:	001a      	movs	r2, r3
 80016fc:	4baa      	ldr	r3, [pc, #680]	; (80019a8 <HAL_ADC_Init+0x338>)
 80016fe:	0011      	movs	r1, r2
 8001700:	0018      	movs	r0, r3
 8001702:	f7ff f934 	bl	800096e <assert_failed>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign)); 
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	68db      	ldr	r3, [r3, #12]
 800170a:	2b00      	cmp	r3, #0
 800170c:	d00a      	beq.n	8001724 <HAL_ADC_Init+0xb4>
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	68db      	ldr	r3, [r3, #12]
 8001712:	2b20      	cmp	r3, #32
 8001714:	d006      	beq.n	8001724 <HAL_ADC_Init+0xb4>
 8001716:	23bb      	movs	r3, #187	; 0xbb
 8001718:	005a      	lsls	r2, r3, #1
 800171a:	4ba3      	ldr	r3, [pc, #652]	; (80019a8 <HAL_ADC_Init+0x338>)
 800171c:	0011      	movs	r1, r2
 800171e:	0018      	movs	r0, r3
 8001720:	f7ff f925 	bl	800096e <assert_failed>
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	691b      	ldr	r3, [r3, #16]
 8001728:	2b01      	cmp	r3, #1
 800172a:	d00b      	beq.n	8001744 <HAL_ADC_Init+0xd4>
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	691b      	ldr	r3, [r3, #16]
 8001730:	2b02      	cmp	r3, #2
 8001732:	d007      	beq.n	8001744 <HAL_ADC_Init+0xd4>
 8001734:	2378      	movs	r3, #120	; 0x78
 8001736:	33ff      	adds	r3, #255	; 0xff
 8001738:	001a      	movs	r2, r3
 800173a:	4b9b      	ldr	r3, [pc, #620]	; (80019a8 <HAL_ADC_Init+0x338>)
 800173c:	0011      	movs	r1, r2
 800173e:	0018      	movs	r0, r3
 8001740:	f7ff f915 	bl	800096e <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	6a1b      	ldr	r3, [r3, #32]
 8001748:	2b00      	cmp	r3, #0
 800174a:	d00a      	beq.n	8001762 <HAL_ADC_Init+0xf2>
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	6a1b      	ldr	r3, [r3, #32]
 8001750:	2b01      	cmp	r3, #1
 8001752:	d006      	beq.n	8001762 <HAL_ADC_Init+0xf2>
 8001754:	23bc      	movs	r3, #188	; 0xbc
 8001756:	005a      	lsls	r2, r3, #1
 8001758:	4b93      	ldr	r3, [pc, #588]	; (80019a8 <HAL_ADC_Init+0x338>)
 800175a:	0011      	movs	r1, r2
 800175c:	0018      	movs	r0, r3
 800175e:	f7ff f906 	bl	800096e <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DiscontinuousConvMode));
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001766:	2b00      	cmp	r3, #0
 8001768:	d00b      	beq.n	8001782 <HAL_ADC_Init+0x112>
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800176e:	2b01      	cmp	r3, #1
 8001770:	d007      	beq.n	8001782 <HAL_ADC_Init+0x112>
 8001772:	237a      	movs	r3, #122	; 0x7a
 8001774:	33ff      	adds	r3, #255	; 0xff
 8001776:	001a      	movs	r2, r3
 8001778:	4b8b      	ldr	r3, [pc, #556]	; (80019a8 <HAL_ADC_Init+0x338>)
 800177a:	0011      	movs	r1, r2
 800177c:	0018      	movs	r0, r3
 800177e:	f7ff f8f6 	bl	800096e <assert_failed>
  assert_param(IS_ADC_EXTTRIG_EDGE(hadc->Init.ExternalTrigConvEdge));   
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001786:	2b00      	cmp	r3, #0
 8001788:	d018      	beq.n	80017bc <HAL_ADC_Init+0x14c>
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800178e:	2380      	movs	r3, #128	; 0x80
 8001790:	00db      	lsls	r3, r3, #3
 8001792:	429a      	cmp	r2, r3
 8001794:	d012      	beq.n	80017bc <HAL_ADC_Init+0x14c>
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800179a:	2380      	movs	r3, #128	; 0x80
 800179c:	011b      	lsls	r3, r3, #4
 800179e:	429a      	cmp	r2, r3
 80017a0:	d00c      	beq.n	80017bc <HAL_ADC_Init+0x14c>
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80017a6:	23c0      	movs	r3, #192	; 0xc0
 80017a8:	011b      	lsls	r3, r3, #4
 80017aa:	429a      	cmp	r2, r3
 80017ac:	d006      	beq.n	80017bc <HAL_ADC_Init+0x14c>
 80017ae:	23bd      	movs	r3, #189	; 0xbd
 80017b0:	005a      	lsls	r2, r3, #1
 80017b2:	4b7d      	ldr	r3, [pc, #500]	; (80019a8 <HAL_ADC_Init+0x338>)
 80017b4:	0011      	movs	r1, r2
 80017b6:	0018      	movs	r0, r3
 80017b8:	f7ff f8d9 	bl	800096e <assert_failed>
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));   
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d01f      	beq.n	8001804 <HAL_ADC_Init+0x194>
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017c8:	2b40      	cmp	r3, #64	; 0x40
 80017ca:	d01b      	beq.n	8001804 <HAL_ADC_Init+0x194>
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017d0:	2b80      	cmp	r3, #128	; 0x80
 80017d2:	d017      	beq.n	8001804 <HAL_ADC_Init+0x194>
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017d8:	2bc0      	cmp	r3, #192	; 0xc0
 80017da:	d013      	beq.n	8001804 <HAL_ADC_Init+0x194>
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80017e0:	2380      	movs	r3, #128	; 0x80
 80017e2:	005b      	lsls	r3, r3, #1
 80017e4:	429a      	cmp	r2, r3
 80017e6:	d00d      	beq.n	8001804 <HAL_ADC_Init+0x194>
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80017ec:	23c2      	movs	r3, #194	; 0xc2
 80017ee:	33ff      	adds	r3, #255	; 0xff
 80017f0:	429a      	cmp	r2, r3
 80017f2:	d007      	beq.n	8001804 <HAL_ADC_Init+0x194>
 80017f4:	237c      	movs	r3, #124	; 0x7c
 80017f6:	33ff      	adds	r3, #255	; 0xff
 80017f8:	001a      	movs	r2, r3
 80017fa:	4b6b      	ldr	r3, [pc, #428]	; (80019a8 <HAL_ADC_Init+0x338>)
 80017fc:	0011      	movs	r1, r2
 80017fe:	0018      	movs	r0, r3
 8001800:	f7ff f8b5 	bl	800096e <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001808:	2b00      	cmp	r3, #0
 800180a:	d00a      	beq.n	8001822 <HAL_ADC_Init+0x1b2>
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001810:	2b01      	cmp	r3, #1
 8001812:	d006      	beq.n	8001822 <HAL_ADC_Init+0x1b2>
 8001814:	23be      	movs	r3, #190	; 0xbe
 8001816:	005a      	lsls	r2, r3, #1
 8001818:	4b63      	ldr	r3, [pc, #396]	; (80019a8 <HAL_ADC_Init+0x338>)
 800181a:	0011      	movs	r1, r2
 800181c:	0018      	movs	r0, r3
 800181e:	f7ff f8a6 	bl	800096e <assert_failed>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	695b      	ldr	r3, [r3, #20]
 8001826:	2b04      	cmp	r3, #4
 8001828:	d00b      	beq.n	8001842 <HAL_ADC_Init+0x1d2>
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	695b      	ldr	r3, [r3, #20]
 800182e:	2b08      	cmp	r3, #8
 8001830:	d007      	beq.n	8001842 <HAL_ADC_Init+0x1d2>
 8001832:	237e      	movs	r3, #126	; 0x7e
 8001834:	33ff      	adds	r3, #255	; 0xff
 8001836:	001a      	movs	r2, r3
 8001838:	4b5b      	ldr	r3, [pc, #364]	; (80019a8 <HAL_ADC_Init+0x338>)
 800183a:	0011      	movs	r1, r2
 800183c:	0018      	movs	r0, r3
 800183e:	f7ff f896 	bl	800096e <assert_failed>
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001846:	2b01      	cmp	r3, #1
 8001848:	d00a      	beq.n	8001860 <HAL_ADC_Init+0x1f0>
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800184e:	2b00      	cmp	r3, #0
 8001850:	d006      	beq.n	8001860 <HAL_ADC_Init+0x1f0>
 8001852:	23bf      	movs	r3, #191	; 0xbf
 8001854:	005a      	lsls	r2, r3, #1
 8001856:	4b54      	ldr	r3, [pc, #336]	; (80019a8 <HAL_ADC_Init+0x338>)
 8001858:	0011      	movs	r1, r2
 800185a:	0018      	movs	r0, r3
 800185c:	f7ff f887 	bl	800096e <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	699b      	ldr	r3, [r3, #24]
 8001864:	2b00      	cmp	r3, #0
 8001866:	d00b      	beq.n	8001880 <HAL_ADC_Init+0x210>
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	699b      	ldr	r3, [r3, #24]
 800186c:	2b01      	cmp	r3, #1
 800186e:	d007      	beq.n	8001880 <HAL_ADC_Init+0x210>
 8001870:	2380      	movs	r3, #128	; 0x80
 8001872:	33ff      	adds	r3, #255	; 0xff
 8001874:	001a      	movs	r2, r3
 8001876:	4b4c      	ldr	r3, [pc, #304]	; (80019a8 <HAL_ADC_Init+0x338>)
 8001878:	0011      	movs	r1, r2
 800187a:	0018      	movs	r0, r3
 800187c:	f7ff f877 	bl	800096e <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoPowerOff));
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	69db      	ldr	r3, [r3, #28]
 8001884:	2b00      	cmp	r3, #0
 8001886:	d00a      	beq.n	800189e <HAL_ADC_Init+0x22e>
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	69db      	ldr	r3, [r3, #28]
 800188c:	2b01      	cmp	r3, #1
 800188e:	d006      	beq.n	800189e <HAL_ADC_Init+0x22e>
 8001890:	23c0      	movs	r3, #192	; 0xc0
 8001892:	005a      	lsls	r2, r3, #1
 8001894:	4b44      	ldr	r3, [pc, #272]	; (80019a8 <HAL_ADC_Init+0x338>)
 8001896:	0011      	movs	r1, r2
 8001898:	0018      	movs	r0, r3
 800189a:	f7ff f868 	bl	800096e <assert_failed>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d10a      	bne.n	80018bc <HAL_ADC_Init+0x24c>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	2200      	movs	r2, #0
 80018aa:	649a      	str	r2, [r3, #72]	; 0x48
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	2240      	movs	r2, #64	; 0x40
 80018b0:	2100      	movs	r1, #0
 80018b2:	5499      	strb	r1, [r3, r2]
    
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	0018      	movs	r0, r3
 80018b8:	f7fe fd40 	bl	800033c <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */ 
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018c0:	2210      	movs	r2, #16
 80018c2:	4013      	ands	r3, r2
 80018c4:	d000      	beq.n	80018c8 <HAL_ADC_Init+0x258>
 80018c6:	e10a      	b.n	8001ade <HAL_ADC_Init+0x46e>
 80018c8:	230f      	movs	r3, #15
 80018ca:	18fb      	adds	r3, r7, r3
 80018cc:	781b      	ldrb	r3, [r3, #0]
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d000      	beq.n	80018d4 <HAL_ADC_Init+0x264>
 80018d2:	e104      	b.n	8001ade <HAL_ADC_Init+0x46e>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	689b      	ldr	r3, [r3, #8]
 80018da:	2204      	movs	r2, #4
 80018dc:	4013      	ands	r3, r2
      (tmp_hal_status == HAL_OK)                                &&
 80018de:	d000      	beq.n	80018e2 <HAL_ADC_Init+0x272>
 80018e0:	e0fd      	b.n	8001ade <HAL_ADC_Init+0x46e>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018e6:	4a31      	ldr	r2, [pc, #196]	; (80019ac <HAL_ADC_Init+0x33c>)
 80018e8:	4013      	ands	r3, r2
 80018ea:	2202      	movs	r2, #2
 80018ec:	431a      	orrs	r2, r3
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	645a      	str	r2, [r3, #68]	; 0x44
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - ADC clock mode                                                      */
    /*  - ADC clock prescaler                                                 */
    /*  - ADC resolution                                                      */
    if (ADC_IS_ENABLE(hadc) == RESET)
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	689b      	ldr	r3, [r3, #8]
 80018f8:	2203      	movs	r2, #3
 80018fa:	4013      	ands	r3, r2
 80018fc:	2b01      	cmp	r3, #1
 80018fe:	d112      	bne.n	8001926 <HAL_ADC_Init+0x2b6>
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	2201      	movs	r2, #1
 8001908:	4013      	ands	r3, r2
 800190a:	2b01      	cmp	r3, #1
 800190c:	d009      	beq.n	8001922 <HAL_ADC_Init+0x2b2>
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	68da      	ldr	r2, [r3, #12]
 8001914:	2380      	movs	r3, #128	; 0x80
 8001916:	021b      	lsls	r3, r3, #8
 8001918:	401a      	ands	r2, r3
 800191a:	2380      	movs	r3, #128	; 0x80
 800191c:	021b      	lsls	r3, r3, #8
 800191e:	429a      	cmp	r2, r3
 8001920:	d101      	bne.n	8001926 <HAL_ADC_Init+0x2b6>
 8001922:	2301      	movs	r3, #1
 8001924:	e000      	b.n	8001928 <HAL_ADC_Init+0x2b8>
 8001926:	2300      	movs	r3, #0
 8001928:	2b00      	cmp	r3, #0
 800192a:	d116      	bne.n	800195a <HAL_ADC_Init+0x2ea>
      /* parameters):                                                         */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() )                              */
     
      /* Configuration of ADC resolution                                      */
      MODIFY_REG(hadc->Instance->CFGR1,
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	68db      	ldr	r3, [r3, #12]
 8001932:	2218      	movs	r2, #24
 8001934:	4393      	bics	r3, r2
 8001936:	0019      	movs	r1, r3
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	689a      	ldr	r2, [r3, #8]
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	430a      	orrs	r2, r1
 8001942:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_RES        ,
                 hadc->Init.Resolution );
      
      /* Configuration of ADC clock mode: clock source AHB or HSI with        */
      /* selectable prescaler                                                 */
      MODIFY_REG(hadc->Instance->CFGR2    ,
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	691b      	ldr	r3, [r3, #16]
 800194a:	009b      	lsls	r3, r3, #2
 800194c:	0899      	lsrs	r1, r3, #2
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	685a      	ldr	r2, [r3, #4]
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	430a      	orrs	r2, r1
 8001958:	611a      	str	r2, [r3, #16]
    /*  - external trigger polarity                                           */
    /*  - data alignment                                                      */
    /*  - resolution                                                          */
    /*  - scan direction                                                      */
    /*  - DMA continuous request                                              */
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_DISCEN  |
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	68da      	ldr	r2, [r3, #12]
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	4912      	ldr	r1, [pc, #72]	; (80019b0 <HAL_ADC_Init+0x340>)
 8001966:	400a      	ands	r2, r1
 8001968:	60da      	str	r2, [r3, #12]
                                ADC_CFGR1_EXTEN   |
                                ADC_CFGR1_ALIGN   |
                                ADC_CFGR1_SCANDIR |
                                ADC_CFGR1_DMACFG   );

    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT(hadc->Init.LowPowerAutoWait)        |
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	699b      	ldr	r3, [r3, #24]
 800196e:	039a      	lsls	r2, r3, #14
                 ADC_CFGR1_AUTOOFF(hadc->Init.LowPowerAutoPowerOff)     |
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	69db      	ldr	r3, [r3, #28]
 8001974:	03db      	lsls	r3, r3, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT(hadc->Init.LowPowerAutoWait)        |
 8001976:	431a      	orrs	r2, r3
                 ADC_CFGR1_CONTINUOUS(hadc->Init.ContinuousConvMode)    |
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	6a1b      	ldr	r3, [r3, #32]
 800197c:	035b      	lsls	r3, r3, #13
                 ADC_CFGR1_AUTOOFF(hadc->Init.LowPowerAutoPowerOff)     |
 800197e:	431a      	orrs	r2, r3
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                  |
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001984:	2b01      	cmp	r3, #1
 8001986:	d002      	beq.n	800198e <HAL_ADC_Init+0x31e>
 8001988:	2380      	movs	r3, #128	; 0x80
 800198a:	015b      	lsls	r3, r3, #5
 800198c:	e000      	b.n	8001990 <HAL_ADC_Init+0x320>
 800198e:	2300      	movs	r3, #0
                 ADC_CFGR1_CONTINUOUS(hadc->Init.ContinuousConvMode)    |
 8001990:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                   |
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	68db      	ldr	r3, [r3, #12]
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                  |
 8001996:	431a      	orrs	r2, r3
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                   |
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	691b      	ldr	r3, [r3, #16]
 800199c:	2b02      	cmp	r3, #2
 800199e:	d109      	bne.n	80019b4 <HAL_ADC_Init+0x344>
 80019a0:	2304      	movs	r3, #4
 80019a2:	e008      	b.n	80019b6 <HAL_ADC_Init+0x346>
 80019a4:	40012400 	.word	0x40012400
 80019a8:	080068f4 	.word	0x080068f4
 80019ac:	fffffefd 	.word	0xfffffefd
 80019b0:	fffe0219 	.word	0xfffe0219
 80019b4:	2300      	movs	r3, #0
                 hadc->Init.DataAlign                                   |
 80019b6:	431a      	orrs	r2, r3
                 ADC_CFGR1_DMACONTREQ(hadc->Init.DMAContinuousRequests)  );
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019bc:	005b      	lsls	r3, r3, #1
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                   |
 80019be:	4313      	orrs	r3, r2
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT(hadc->Init.LowPowerAutoWait)        |
 80019c0:	68ba      	ldr	r2, [r7, #8]
 80019c2:	4313      	orrs	r3, r2
 80019c4:	60bb      	str	r3, [r7, #8]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019ca:	2b01      	cmp	r3, #1
 80019cc:	d115      	bne.n	80019fa <HAL_ADC_Init+0x38a>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	6a1b      	ldr	r3, [r3, #32]
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d105      	bne.n	80019e2 <HAL_ADC_Init+0x372>
      {
        /* Enable the selected ADC group regular discontinuous mode */
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 80019d6:	68bb      	ldr	r3, [r7, #8]
 80019d8:	2280      	movs	r2, #128	; 0x80
 80019da:	0252      	lsls	r2, r2, #9
 80019dc:	4313      	orrs	r3, r2
 80019de:	60bb      	str	r3, [r7, #8]
 80019e0:	e00b      	b.n	80019fa <HAL_ADC_Init+0x38a>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019e6:	2220      	movs	r2, #32
 80019e8:	431a      	orrs	r2, r3
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	645a      	str	r2, [r3, #68]	; 0x44
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80019f2:	2201      	movs	r2, #1
 80019f4:	431a      	orrs	r2, r3
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	649a      	str	r2, [r3, #72]	; 0x48
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80019fe:	23c2      	movs	r3, #194	; 0xc2
 8001a00:	33ff      	adds	r3, #255	; 0xff
 8001a02:	429a      	cmp	r2, r3
 8001a04:	d007      	beq.n	8001a16 <HAL_ADC_Init+0x3a6>
    {
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	6a9a      	ldr	r2, [r3, #40]	; 0x28
                    hadc->Init.ExternalTrigConvEdge );
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8001a0e:	4313      	orrs	r3, r2
 8001a10:	68ba      	ldr	r2, [r7, #8]
 8001a12:	4313      	orrs	r3, r2
 8001a14:	60bb      	str	r3, [r7, #8]
    }
    
    /* Update ADC configuration register with previous settings */
    hadc->Instance->CFGR1 |= tmpCFGR1;
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	68d9      	ldr	r1, [r3, #12]
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	68ba      	ldr	r2, [r7, #8]
 8001a22:	430a      	orrs	r2, r1
 8001a24:	60da      	str	r2, [r3, #12]
    /* Management of parameters "SamplingTimeCommon" and "SamplingTime"       */
    /* (obsolete): sampling time set in this function if parameter            */
    /*  "SamplingTimeCommon" has been set to a valid sampling time.           */
    /* Otherwise, sampling time is set into ADC channel initialization        */
    /* structure with parameter "SamplingTime" (obsolete).                    */
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001a2a:	2380      	movs	r3, #128	; 0x80
 8001a2c:	055b      	lsls	r3, r3, #21
 8001a2e:	429a      	cmp	r2, r3
 8001a30:	d01b      	beq.n	8001a6a <HAL_ADC_Init+0x3fa>
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a36:	2b01      	cmp	r3, #1
 8001a38:	d017      	beq.n	8001a6a <HAL_ADC_Init+0x3fa>
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a3e:	2b02      	cmp	r3, #2
 8001a40:	d013      	beq.n	8001a6a <HAL_ADC_Init+0x3fa>
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a46:	2b03      	cmp	r3, #3
 8001a48:	d00f      	beq.n	8001a6a <HAL_ADC_Init+0x3fa>
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a4e:	2b04      	cmp	r3, #4
 8001a50:	d00b      	beq.n	8001a6a <HAL_ADC_Init+0x3fa>
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a56:	2b05      	cmp	r3, #5
 8001a58:	d007      	beq.n	8001a6a <HAL_ADC_Init+0x3fa>
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a5e:	2b06      	cmp	r3, #6
 8001a60:	d003      	beq.n	8001a6a <HAL_ADC_Init+0x3fa>
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a66:	2b07      	cmp	r3, #7
 8001a68:	d112      	bne.n	8001a90 <HAL_ADC_Init+0x420>
    {
      /* Channel sampling time configuration */
      /* Clear the old sample time */
      hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	695a      	ldr	r2, [r3, #20]
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	2107      	movs	r1, #7
 8001a76:	438a      	bics	r2, r1
 8001a78:	615a      	str	r2, [r3, #20]
      
      /* Set the new sample time */
      hadc->Instance->SMPR |= ADC_SMPR_SET(hadc->Init.SamplingTimeCommon);
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	6959      	ldr	r1, [r3, #20]
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a84:	2207      	movs	r2, #7
 8001a86:	401a      	ands	r2, r3
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	430a      	orrs	r2, r1
 8001a8e:	615a      	str	r2, [r3, #20]
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CFGR1 (excluding analog watchdog configuration: */
    /* set into separate dedicated function, and bits of ADC resolution set   */
    /* out of temporary variable 'tmpCFGR1').                                 */
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	68db      	ldr	r3, [r3, #12]
 8001a96:	4a1a      	ldr	r2, [pc, #104]	; (8001b00 <HAL_ADC_Init+0x490>)
 8001a98:	4013      	ands	r3, r2
 8001a9a:	68ba      	ldr	r2, [r7, #8]
 8001a9c:	429a      	cmp	r2, r3
 8001a9e:	d10b      	bne.n	8001ab8 <HAL_ADC_Init+0x448>
         == tmpCFGR1)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	2200      	movs	r2, #0
 8001aa4:	649a      	str	r2, [r3, #72]	; 0x48
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001aaa:	2203      	movs	r2, #3
 8001aac:	4393      	bics	r3, r2
 8001aae:	2201      	movs	r2, #1
 8001ab0:	431a      	orrs	r2, r3
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	645a      	str	r2, [r3, #68]	; 0x44
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8001ab6:	e01c      	b.n	8001af2 <HAL_ADC_Init+0x482>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001abc:	2212      	movs	r2, #18
 8001abe:	4393      	bics	r3, r2
 8001ac0:	2210      	movs	r2, #16
 8001ac2:	431a      	orrs	r2, r3
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	645a      	str	r2, [r3, #68]	; 0x44
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001acc:	2201      	movs	r2, #1
 8001ace:	431a      	orrs	r2, r3
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	649a      	str	r2, [r3, #72]	; 0x48
      
      tmp_hal_status = HAL_ERROR;
 8001ad4:	230f      	movs	r3, #15
 8001ad6:	18fb      	adds	r3, r7, r3
 8001ad8:	2201      	movs	r2, #1
 8001ada:	701a      	strb	r2, [r3, #0]
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8001adc:	e009      	b.n	8001af2 <HAL_ADC_Init+0x482>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ae2:	2210      	movs	r2, #16
 8001ae4:	431a      	orrs	r2, r3
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	645a      	str	r2, [r3, #68]	; 0x44
        
    tmp_hal_status = HAL_ERROR;
 8001aea:	230f      	movs	r3, #15
 8001aec:	18fb      	adds	r3, r7, r3
 8001aee:	2201      	movs	r2, #1
 8001af0:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001af2:	230f      	movs	r3, #15
 8001af4:	18fb      	adds	r3, r7, r3
 8001af6:	781b      	ldrb	r3, [r3, #0]
}
 8001af8:	0018      	movs	r0, r3
 8001afa:	46bd      	mov	sp, r7
 8001afc:	b004      	add	sp, #16
 8001afe:	bd80      	pop	{r7, pc}
 8001b00:	833fffe7 	.word	0x833fffe7

08001b04 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001b04:	b580      	push	{r7, lr}
 8001b06:	b084      	sub	sp, #16
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	6078      	str	r0, [r7, #4]
 8001b0c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001b0e:	230f      	movs	r3, #15
 8001b10:	18fb      	adds	r3, r7, r3
 8001b12:	2200      	movs	r2, #0
 8001b14:	701a      	strb	r2, [r3, #0]
  __IO uint32_t wait_loop_index = 0U;
 8001b16:	2300      	movs	r3, #0
 8001b18:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	4abc      	ldr	r2, [pc, #752]	; (8001e10 <HAL_ADC_ConfigChannel+0x30c>)
 8001b20:	4293      	cmp	r3, r2
 8001b22:	d005      	beq.n	8001b30 <HAL_ADC_ConfigChannel+0x2c>
 8001b24:	4abb      	ldr	r2, [pc, #748]	; (8001e14 <HAL_ADC_ConfigChannel+0x310>)
 8001b26:	4bbc      	ldr	r3, [pc, #752]	; (8001e18 <HAL_ADC_ConfigChannel+0x314>)
 8001b28:	0011      	movs	r1, r2
 8001b2a:	0018      	movs	r0, r3
 8001b2c:	f7fe ff1f 	bl	800096e <assert_failed>
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
 8001b30:	683b      	ldr	r3, [r7, #0]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d04d      	beq.n	8001bd4 <HAL_ADC_ConfigChannel+0xd0>
 8001b38:	683b      	ldr	r3, [r7, #0]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	2b01      	cmp	r3, #1
 8001b3e:	d049      	beq.n	8001bd4 <HAL_ADC_ConfigChannel+0xd0>
 8001b40:	683b      	ldr	r3, [r7, #0]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	2b02      	cmp	r3, #2
 8001b46:	d045      	beq.n	8001bd4 <HAL_ADC_ConfigChannel+0xd0>
 8001b48:	683b      	ldr	r3, [r7, #0]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	2b03      	cmp	r3, #3
 8001b4e:	d041      	beq.n	8001bd4 <HAL_ADC_ConfigChannel+0xd0>
 8001b50:	683b      	ldr	r3, [r7, #0]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	2b04      	cmp	r3, #4
 8001b56:	d03d      	beq.n	8001bd4 <HAL_ADC_ConfigChannel+0xd0>
 8001b58:	683b      	ldr	r3, [r7, #0]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	2b05      	cmp	r3, #5
 8001b5e:	d039      	beq.n	8001bd4 <HAL_ADC_ConfigChannel+0xd0>
 8001b60:	683b      	ldr	r3, [r7, #0]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	2b06      	cmp	r3, #6
 8001b66:	d035      	beq.n	8001bd4 <HAL_ADC_ConfigChannel+0xd0>
 8001b68:	683b      	ldr	r3, [r7, #0]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	2b07      	cmp	r3, #7
 8001b6e:	d031      	beq.n	8001bd4 <HAL_ADC_ConfigChannel+0xd0>
 8001b70:	683b      	ldr	r3, [r7, #0]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	2b08      	cmp	r3, #8
 8001b76:	d02d      	beq.n	8001bd4 <HAL_ADC_ConfigChannel+0xd0>
 8001b78:	683b      	ldr	r3, [r7, #0]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	2b09      	cmp	r3, #9
 8001b7e:	d029      	beq.n	8001bd4 <HAL_ADC_ConfigChannel+0xd0>
 8001b80:	683b      	ldr	r3, [r7, #0]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	2b0a      	cmp	r3, #10
 8001b86:	d025      	beq.n	8001bd4 <HAL_ADC_ConfigChannel+0xd0>
 8001b88:	683b      	ldr	r3, [r7, #0]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	2b0b      	cmp	r3, #11
 8001b8e:	d021      	beq.n	8001bd4 <HAL_ADC_ConfigChannel+0xd0>
 8001b90:	683b      	ldr	r3, [r7, #0]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	2b0c      	cmp	r3, #12
 8001b96:	d01d      	beq.n	8001bd4 <HAL_ADC_ConfigChannel+0xd0>
 8001b98:	683b      	ldr	r3, [r7, #0]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	2b0d      	cmp	r3, #13
 8001b9e:	d019      	beq.n	8001bd4 <HAL_ADC_ConfigChannel+0xd0>
 8001ba0:	683b      	ldr	r3, [r7, #0]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	2b0e      	cmp	r3, #14
 8001ba6:	d015      	beq.n	8001bd4 <HAL_ADC_ConfigChannel+0xd0>
 8001ba8:	683b      	ldr	r3, [r7, #0]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	2b0f      	cmp	r3, #15
 8001bae:	d011      	beq.n	8001bd4 <HAL_ADC_ConfigChannel+0xd0>
 8001bb0:	683b      	ldr	r3, [r7, #0]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	2b10      	cmp	r3, #16
 8001bb6:	d00d      	beq.n	8001bd4 <HAL_ADC_ConfigChannel+0xd0>
 8001bb8:	683b      	ldr	r3, [r7, #0]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	2b11      	cmp	r3, #17
 8001bbe:	d009      	beq.n	8001bd4 <HAL_ADC_ConfigChannel+0xd0>
 8001bc0:	683b      	ldr	r3, [r7, #0]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	2b12      	cmp	r3, #18
 8001bc6:	d005      	beq.n	8001bd4 <HAL_ADC_ConfigChannel+0xd0>
 8001bc8:	4a94      	ldr	r2, [pc, #592]	; (8001e1c <HAL_ADC_ConfigChannel+0x318>)
 8001bca:	4b93      	ldr	r3, [pc, #588]	; (8001e18 <HAL_ADC_ConfigChannel+0x314>)
 8001bcc:	0011      	movs	r1, r2
 8001bce:	0018      	movs	r0, r3
 8001bd0:	f7fe fecd 	bl	800096e <assert_failed>
  assert_param(IS_ADC_RANK(sConfig->Rank));
 8001bd4:	683b      	ldr	r3, [r7, #0]
 8001bd6:	685a      	ldr	r2, [r3, #4]
 8001bd8:	2380      	movs	r3, #128	; 0x80
 8001bda:	015b      	lsls	r3, r3, #5
 8001bdc:	429a      	cmp	r2, r3
 8001bde:	d00a      	beq.n	8001bf6 <HAL_ADC_ConfigChannel+0xf2>
 8001be0:	683b      	ldr	r3, [r7, #0]
 8001be2:	685b      	ldr	r3, [r3, #4]
 8001be4:	4a8e      	ldr	r2, [pc, #568]	; (8001e20 <HAL_ADC_ConfigChannel+0x31c>)
 8001be6:	4293      	cmp	r3, r2
 8001be8:	d005      	beq.n	8001bf6 <HAL_ADC_ConfigChannel+0xf2>
 8001bea:	4a8e      	ldr	r2, [pc, #568]	; (8001e24 <HAL_ADC_ConfigChannel+0x320>)
 8001bec:	4b8a      	ldr	r3, [pc, #552]	; (8001e18 <HAL_ADC_ConfigChannel+0x314>)
 8001bee:	0011      	movs	r1, r2
 8001bf0:	0018      	movs	r0, r3
 8001bf2:	f7fe febc 	bl	800096e <assert_failed>
  
  if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001bfa:	2380      	movs	r3, #128	; 0x80
 8001bfc:	055b      	lsls	r3, r3, #21
 8001bfe:	429a      	cmp	r2, r3
 8001c00:	d043      	beq.n	8001c8a <HAL_ADC_ConfigChannel+0x186>
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c06:	2b01      	cmp	r3, #1
 8001c08:	d03f      	beq.n	8001c8a <HAL_ADC_ConfigChannel+0x186>
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c0e:	2b02      	cmp	r3, #2
 8001c10:	d03b      	beq.n	8001c8a <HAL_ADC_ConfigChannel+0x186>
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c16:	2b03      	cmp	r3, #3
 8001c18:	d037      	beq.n	8001c8a <HAL_ADC_ConfigChannel+0x186>
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c1e:	2b04      	cmp	r3, #4
 8001c20:	d033      	beq.n	8001c8a <HAL_ADC_ConfigChannel+0x186>
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c26:	2b05      	cmp	r3, #5
 8001c28:	d02f      	beq.n	8001c8a <HAL_ADC_ConfigChannel+0x186>
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c2e:	2b06      	cmp	r3, #6
 8001c30:	d02b      	beq.n	8001c8a <HAL_ADC_ConfigChannel+0x186>
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c36:	2b07      	cmp	r3, #7
 8001c38:	d027      	beq.n	8001c8a <HAL_ADC_ConfigChannel+0x186>
  {
    assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
 8001c3a:	683b      	ldr	r3, [r7, #0]
 8001c3c:	689a      	ldr	r2, [r3, #8]
 8001c3e:	2380      	movs	r3, #128	; 0x80
 8001c40:	055b      	lsls	r3, r3, #21
 8001c42:	429a      	cmp	r2, r3
 8001c44:	d021      	beq.n	8001c8a <HAL_ADC_ConfigChannel+0x186>
 8001c46:	683b      	ldr	r3, [r7, #0]
 8001c48:	689b      	ldr	r3, [r3, #8]
 8001c4a:	2b01      	cmp	r3, #1
 8001c4c:	d01d      	beq.n	8001c8a <HAL_ADC_ConfigChannel+0x186>
 8001c4e:	683b      	ldr	r3, [r7, #0]
 8001c50:	689b      	ldr	r3, [r3, #8]
 8001c52:	2b02      	cmp	r3, #2
 8001c54:	d019      	beq.n	8001c8a <HAL_ADC_ConfigChannel+0x186>
 8001c56:	683b      	ldr	r3, [r7, #0]
 8001c58:	689b      	ldr	r3, [r3, #8]
 8001c5a:	2b03      	cmp	r3, #3
 8001c5c:	d015      	beq.n	8001c8a <HAL_ADC_ConfigChannel+0x186>
 8001c5e:	683b      	ldr	r3, [r7, #0]
 8001c60:	689b      	ldr	r3, [r3, #8]
 8001c62:	2b04      	cmp	r3, #4
 8001c64:	d011      	beq.n	8001c8a <HAL_ADC_ConfigChannel+0x186>
 8001c66:	683b      	ldr	r3, [r7, #0]
 8001c68:	689b      	ldr	r3, [r3, #8]
 8001c6a:	2b05      	cmp	r3, #5
 8001c6c:	d00d      	beq.n	8001c8a <HAL_ADC_ConfigChannel+0x186>
 8001c6e:	683b      	ldr	r3, [r7, #0]
 8001c70:	689b      	ldr	r3, [r3, #8]
 8001c72:	2b06      	cmp	r3, #6
 8001c74:	d009      	beq.n	8001c8a <HAL_ADC_ConfigChannel+0x186>
 8001c76:	683b      	ldr	r3, [r7, #0]
 8001c78:	689b      	ldr	r3, [r3, #8]
 8001c7a:	2b07      	cmp	r3, #7
 8001c7c:	d005      	beq.n	8001c8a <HAL_ADC_ConfigChannel+0x186>
 8001c7e:	4a6a      	ldr	r2, [pc, #424]	; (8001e28 <HAL_ADC_ConfigChannel+0x324>)
 8001c80:	4b65      	ldr	r3, [pc, #404]	; (8001e18 <HAL_ADC_ConfigChannel+0x314>)
 8001c82:	0011      	movs	r1, r2
 8001c84:	0018      	movs	r0, r3
 8001c86:	f7fe fe72 	bl	800096e <assert_failed>
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	2240      	movs	r2, #64	; 0x40
 8001c8e:	5c9b      	ldrb	r3, [r3, r2]
 8001c90:	2b01      	cmp	r3, #1
 8001c92:	d101      	bne.n	8001c98 <HAL_ADC_ConfigChannel+0x194>
 8001c94:	2302      	movs	r3, #2
 8001c96:	e0e9      	b.n	8001e6c <HAL_ADC_ConfigChannel+0x368>
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	2240      	movs	r2, #64	; 0x40
 8001c9c:	2101      	movs	r1, #1
 8001c9e:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	689b      	ldr	r3, [r3, #8]
 8001ca6:	2204      	movs	r2, #4
 8001ca8:	4013      	ands	r3, r2
 8001caa:	d000      	beq.n	8001cae <HAL_ADC_ConfigChannel+0x1aa>
 8001cac:	e0cd      	b.n	8001e4a <HAL_ADC_ConfigChannel+0x346>
  {
    /* Configure channel: depending on rank setting, add it or remove it from */
    /* ADC conversion sequencer.                                              */
    if (sConfig->Rank != ADC_RANK_NONE)
 8001cae:	683b      	ldr	r3, [r7, #0]
 8001cb0:	685b      	ldr	r3, [r3, #4]
 8001cb2:	4a5b      	ldr	r2, [pc, #364]	; (8001e20 <HAL_ADC_ConfigChannel+0x31c>)
 8001cb4:	4293      	cmp	r3, r2
 8001cb6:	d100      	bne.n	8001cba <HAL_ADC_ConfigChannel+0x1b6>
 8001cb8:	e083      	b.n	8001dc2 <HAL_ADC_ConfigChannel+0x2be>
    {
      /* Regular sequence configuration */
      /* Set the channel selection register from the selected channel */
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8001cc0:	683b      	ldr	r3, [r7, #0]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	2201      	movs	r2, #1
 8001cc6:	409a      	lsls	r2, r3
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	430a      	orrs	r2, r1
 8001cce:	629a      	str	r2, [r3, #40]	; 0x28
      /* Channel sampling time configuration */
      /* Management of parameters "SamplingTimeCommon" and "SamplingTime"     */
      /* (obsolete): sampling time set in this function with                  */
      /* parameter "SamplingTime" (obsolete) only if not already set into     */
      /* ADC initialization structure with parameter "SamplingTimeCommon".    */
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001cd4:	2380      	movs	r3, #128	; 0x80
 8001cd6:	055b      	lsls	r3, r3, #21
 8001cd8:	429a      	cmp	r2, r3
 8001cda:	d037      	beq.n	8001d4c <HAL_ADC_ConfigChannel+0x248>
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ce0:	2b01      	cmp	r3, #1
 8001ce2:	d033      	beq.n	8001d4c <HAL_ADC_ConfigChannel+0x248>
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ce8:	2b02      	cmp	r3, #2
 8001cea:	d02f      	beq.n	8001d4c <HAL_ADC_ConfigChannel+0x248>
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001cf0:	2b03      	cmp	r3, #3
 8001cf2:	d02b      	beq.n	8001d4c <HAL_ADC_ConfigChannel+0x248>
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001cf8:	2b04      	cmp	r3, #4
 8001cfa:	d027      	beq.n	8001d4c <HAL_ADC_ConfigChannel+0x248>
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d00:	2b05      	cmp	r3, #5
 8001d02:	d023      	beq.n	8001d4c <HAL_ADC_ConfigChannel+0x248>
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d08:	2b06      	cmp	r3, #6
 8001d0a:	d01f      	beq.n	8001d4c <HAL_ADC_ConfigChannel+0x248>
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d10:	2b07      	cmp	r3, #7
 8001d12:	d01b      	beq.n	8001d4c <HAL_ADC_ConfigChannel+0x248>
      {
        /* Modify sampling time if needed (not needed in case of reoccurrence */
        /* for several channels programmed consecutively into the sequencer)  */
        if (sConfig->SamplingTime != ADC_GET_SAMPLINGTIME(hadc))
 8001d14:	683b      	ldr	r3, [r7, #0]
 8001d16:	689a      	ldr	r2, [r3, #8]
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	695b      	ldr	r3, [r3, #20]
 8001d1e:	2107      	movs	r1, #7
 8001d20:	400b      	ands	r3, r1
 8001d22:	429a      	cmp	r2, r3
 8001d24:	d012      	beq.n	8001d4c <HAL_ADC_ConfigChannel+0x248>
        {
          /* Channel sampling time configuration */
          /* Clear the old sample time */
          hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	695a      	ldr	r2, [r3, #20]
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	2107      	movs	r1, #7
 8001d32:	438a      	bics	r2, r1
 8001d34:	615a      	str	r2, [r3, #20]
          
          /* Set the new sample time */
          hadc->Instance->SMPR |= ADC_SMPR_SET(sConfig->SamplingTime);
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	6959      	ldr	r1, [r3, #20]
 8001d3c:	683b      	ldr	r3, [r7, #0]
 8001d3e:	689b      	ldr	r3, [r3, #8]
 8001d40:	2207      	movs	r2, #7
 8001d42:	401a      	ands	r2, r3
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	430a      	orrs	r2, r1
 8001d4a:	615a      	str	r2, [r3, #20]
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8001d4c:	683b      	ldr	r3, [r7, #0]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	2b10      	cmp	r3, #16
 8001d52:	d008      	beq.n	8001d66 <HAL_ADC_ConfigChannel+0x262>
 8001d54:	683b      	ldr	r3, [r7, #0]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	2b11      	cmp	r3, #17
 8001d5a:	d004      	beq.n	8001d66 <HAL_ADC_ConfigChannel+0x262>
 8001d5c:	683b      	ldr	r3, [r7, #0]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	2b12      	cmp	r3, #18
 8001d62:	d000      	beq.n	8001d66 <HAL_ADC_ConfigChannel+0x262>
 8001d64:	e07b      	b.n	8001e5e <HAL_ADC_ConfigChannel+0x35a>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path. */
        /* If Channel_17 is selected, enable VREFINT measurement path. */
        /* If Channel_18 is selected, enable VBAT measurement path. */
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8001d66:	4b31      	ldr	r3, [pc, #196]	; (8001e2c <HAL_ADC_ConfigChannel+0x328>)
 8001d68:	6819      	ldr	r1, [r3, #0]
 8001d6a:	683b      	ldr	r3, [r7, #0]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	2b10      	cmp	r3, #16
 8001d70:	d009      	beq.n	8001d86 <HAL_ADC_ConfigChannel+0x282>
 8001d72:	683b      	ldr	r3, [r7, #0]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	2b11      	cmp	r3, #17
 8001d78:	d102      	bne.n	8001d80 <HAL_ADC_ConfigChannel+0x27c>
 8001d7a:	2380      	movs	r3, #128	; 0x80
 8001d7c:	03db      	lsls	r3, r3, #15
 8001d7e:	e004      	b.n	8001d8a <HAL_ADC_ConfigChannel+0x286>
 8001d80:	2380      	movs	r3, #128	; 0x80
 8001d82:	045b      	lsls	r3, r3, #17
 8001d84:	e001      	b.n	8001d8a <HAL_ADC_ConfigChannel+0x286>
 8001d86:	2380      	movs	r3, #128	; 0x80
 8001d88:	041b      	lsls	r3, r3, #16
 8001d8a:	4a28      	ldr	r2, [pc, #160]	; (8001e2c <HAL_ADC_ConfigChannel+0x328>)
 8001d8c:	430b      	orrs	r3, r1
 8001d8e:	6013      	str	r3, [r2, #0]
        
        /* If Temp. sensor is selected, wait for stabilization delay */
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001d90:	683b      	ldr	r3, [r7, #0]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	2b10      	cmp	r3, #16
 8001d96:	d162      	bne.n	8001e5e <HAL_ADC_ConfigChannel+0x35a>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001d98:	4b25      	ldr	r3, [pc, #148]	; (8001e30 <HAL_ADC_ConfigChannel+0x32c>)
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	4925      	ldr	r1, [pc, #148]	; (8001e34 <HAL_ADC_ConfigChannel+0x330>)
 8001d9e:	0018      	movs	r0, r3
 8001da0:	f7fe f9b2 	bl	8000108 <__udivsi3>
 8001da4:	0003      	movs	r3, r0
 8001da6:	001a      	movs	r2, r3
 8001da8:	0013      	movs	r3, r2
 8001daa:	009b      	lsls	r3, r3, #2
 8001dac:	189b      	adds	r3, r3, r2
 8001dae:	005b      	lsls	r3, r3, #1
 8001db0:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001db2:	e002      	b.n	8001dba <HAL_ADC_ConfigChannel+0x2b6>
          {
            wait_loop_index--;
 8001db4:	68bb      	ldr	r3, [r7, #8]
 8001db6:	3b01      	subs	r3, #1
 8001db8:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001dba:	68bb      	ldr	r3, [r7, #8]
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d1f9      	bne.n	8001db4 <HAL_ADC_ConfigChannel+0x2b0>
 8001dc0:	e04d      	b.n	8001e5e <HAL_ADC_ConfigChannel+0x35a>
    }
    else
    {
      /* Regular sequence configuration */
      /* Reset the channel selection register from the selected channel */
      hadc->Instance->CHSELR &= ~ADC_CHSELR_CHANNEL(sConfig->Channel);
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001dc8:	683b      	ldr	r3, [r7, #0]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	2101      	movs	r1, #1
 8001dce:	4099      	lsls	r1, r3
 8001dd0:	000b      	movs	r3, r1
 8001dd2:	43d9      	mvns	r1, r3
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	400a      	ands	r2, r1
 8001dda:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
      /* internal measurement paths disable: If internal channel selected,    */
      /* disable dedicated internal buffers and path.                         */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8001ddc:	683b      	ldr	r3, [r7, #0]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	2b10      	cmp	r3, #16
 8001de2:	d007      	beq.n	8001df4 <HAL_ADC_ConfigChannel+0x2f0>
 8001de4:	683b      	ldr	r3, [r7, #0]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	2b11      	cmp	r3, #17
 8001dea:	d003      	beq.n	8001df4 <HAL_ADC_ConfigChannel+0x2f0>
 8001dec:	683b      	ldr	r3, [r7, #0]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	2b12      	cmp	r3, #18
 8001df2:	d134      	bne.n	8001e5e <HAL_ADC_ConfigChannel+0x35a>
      {
        /* If Channel_16 is selected, disable Temp. sensor measurement path. */
        /* If Channel_17 is selected, disable VREFINT measurement path. */
        /* If Channel_18 is selected, disable VBAT measurement path. */
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8001df4:	4b0d      	ldr	r3, [pc, #52]	; (8001e2c <HAL_ADC_ConfigChannel+0x328>)
 8001df6:	6819      	ldr	r1, [r3, #0]
 8001df8:	683b      	ldr	r3, [r7, #0]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	2b10      	cmp	r3, #16
 8001dfe:	d01f      	beq.n	8001e40 <HAL_ADC_ConfigChannel+0x33c>
 8001e00:	683b      	ldr	r3, [r7, #0]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	2b11      	cmp	r3, #17
 8001e06:	d101      	bne.n	8001e0c <HAL_ADC_ConfigChannel+0x308>
 8001e08:	4b0b      	ldr	r3, [pc, #44]	; (8001e38 <HAL_ADC_ConfigChannel+0x334>)
 8001e0a:	e01a      	b.n	8001e42 <HAL_ADC_ConfigChannel+0x33e>
 8001e0c:	4b0b      	ldr	r3, [pc, #44]	; (8001e3c <HAL_ADC_ConfigChannel+0x338>)
 8001e0e:	e018      	b.n	8001e42 <HAL_ADC_ConfigChannel+0x33e>
 8001e10:	40012400 	.word	0x40012400
 8001e14:	00000651 	.word	0x00000651
 8001e18:	080068f4 	.word	0x080068f4
 8001e1c:	00000652 	.word	0x00000652
 8001e20:	00001001 	.word	0x00001001
 8001e24:	00000653 	.word	0x00000653
 8001e28:	00000657 	.word	0x00000657
 8001e2c:	40012708 	.word	0x40012708
 8001e30:	20000000 	.word	0x20000000
 8001e34:	000f4240 	.word	0x000f4240
 8001e38:	ffbfffff 	.word	0xffbfffff
 8001e3c:	feffffff 	.word	0xfeffffff
 8001e40:	4b0c      	ldr	r3, [pc, #48]	; (8001e74 <HAL_ADC_ConfigChannel+0x370>)
 8001e42:	4a0d      	ldr	r2, [pc, #52]	; (8001e78 <HAL_ADC_ConfigChannel+0x374>)
 8001e44:	400b      	ands	r3, r1
 8001e46:	6013      	str	r3, [r2, #0]
 8001e48:	e009      	b.n	8001e5e <HAL_ADC_ConfigChannel+0x35a>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e4e:	2220      	movs	r2, #32
 8001e50:	431a      	orrs	r2, r3
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	645a      	str	r2, [r3, #68]	; 0x44
    
    tmp_hal_status = HAL_ERROR;
 8001e56:	230f      	movs	r3, #15
 8001e58:	18fb      	adds	r3, r7, r3
 8001e5a:	2201      	movs	r2, #1
 8001e5c:	701a      	strb	r2, [r3, #0]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	2240      	movs	r2, #64	; 0x40
 8001e62:	2100      	movs	r1, #0
 8001e64:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 8001e66:	230f      	movs	r3, #15
 8001e68:	18fb      	adds	r3, r7, r3
 8001e6a:	781b      	ldrb	r3, [r3, #0]
}
 8001e6c:	0018      	movs	r0, r3
 8001e6e:	46bd      	mov	sp, r7
 8001e70:	b004      	add	sp, #16
 8001e72:	bd80      	pop	{r7, pc}
 8001e74:	ff7fffff 	.word	0xff7fffff
 8001e78:	40012708 	.word	0x40012708

08001e7c <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e7c:	b580      	push	{r7, lr}
 8001e7e:	b082      	sub	sp, #8
 8001e80:	af00      	add	r7, sp, #0
 8001e82:	0002      	movs	r2, r0
 8001e84:	1dfb      	adds	r3, r7, #7
 8001e86:	701a      	strb	r2, [r3, #0]
  NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8001e88:	1dfb      	adds	r3, r7, #7
 8001e8a:	781b      	ldrb	r3, [r3, #0]
 8001e8c:	001a      	movs	r2, r3
 8001e8e:	231f      	movs	r3, #31
 8001e90:	401a      	ands	r2, r3
 8001e92:	4b04      	ldr	r3, [pc, #16]	; (8001ea4 <NVIC_EnableIRQ+0x28>)
 8001e94:	2101      	movs	r1, #1
 8001e96:	4091      	lsls	r1, r2
 8001e98:	000a      	movs	r2, r1
 8001e9a:	601a      	str	r2, [r3, #0]
}
 8001e9c:	46c0      	nop			; (mov r8, r8)
 8001e9e:	46bd      	mov	sp, r7
 8001ea0:	b002      	add	sp, #8
 8001ea2:	bd80      	pop	{r7, pc}
 8001ea4:	e000e100 	.word	0xe000e100

08001ea8 <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001ea8:	b590      	push	{r4, r7, lr}
 8001eaa:	b083      	sub	sp, #12
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	0002      	movs	r2, r0
 8001eb0:	6039      	str	r1, [r7, #0]
 8001eb2:	1dfb      	adds	r3, r7, #7
 8001eb4:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) < 0)
 8001eb6:	1dfb      	adds	r3, r7, #7
 8001eb8:	781b      	ldrb	r3, [r3, #0]
 8001eba:	2b7f      	cmp	r3, #127	; 0x7f
 8001ebc:	d932      	bls.n	8001f24 <NVIC_SetPriority+0x7c>
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001ebe:	4a2f      	ldr	r2, [pc, #188]	; (8001f7c <NVIC_SetPriority+0xd4>)
 8001ec0:	1dfb      	adds	r3, r7, #7
 8001ec2:	781b      	ldrb	r3, [r3, #0]
 8001ec4:	0019      	movs	r1, r3
 8001ec6:	230f      	movs	r3, #15
 8001ec8:	400b      	ands	r3, r1
 8001eca:	3b08      	subs	r3, #8
 8001ecc:	089b      	lsrs	r3, r3, #2
 8001ece:	3306      	adds	r3, #6
 8001ed0:	009b      	lsls	r3, r3, #2
 8001ed2:	18d3      	adds	r3, r2, r3
 8001ed4:	3304      	adds	r3, #4
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	1dfa      	adds	r2, r7, #7
 8001eda:	7812      	ldrb	r2, [r2, #0]
 8001edc:	0011      	movs	r1, r2
 8001ede:	2203      	movs	r2, #3
 8001ee0:	400a      	ands	r2, r1
 8001ee2:	00d2      	lsls	r2, r2, #3
 8001ee4:	21ff      	movs	r1, #255	; 0xff
 8001ee6:	4091      	lsls	r1, r2
 8001ee8:	000a      	movs	r2, r1
 8001eea:	43d2      	mvns	r2, r2
 8001eec:	401a      	ands	r2, r3
 8001eee:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001ef0:	683b      	ldr	r3, [r7, #0]
 8001ef2:	019b      	lsls	r3, r3, #6
 8001ef4:	22ff      	movs	r2, #255	; 0xff
 8001ef6:	401a      	ands	r2, r3
 8001ef8:	1dfb      	adds	r3, r7, #7
 8001efa:	781b      	ldrb	r3, [r3, #0]
 8001efc:	0018      	movs	r0, r3
 8001efe:	2303      	movs	r3, #3
 8001f00:	4003      	ands	r3, r0
 8001f02:	00db      	lsls	r3, r3, #3
 8001f04:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001f06:	481d      	ldr	r0, [pc, #116]	; (8001f7c <NVIC_SetPriority+0xd4>)
 8001f08:	1dfb      	adds	r3, r7, #7
 8001f0a:	781b      	ldrb	r3, [r3, #0]
 8001f0c:	001c      	movs	r4, r3
 8001f0e:	230f      	movs	r3, #15
 8001f10:	4023      	ands	r3, r4
 8001f12:	3b08      	subs	r3, #8
 8001f14:	089b      	lsrs	r3, r3, #2
 8001f16:	430a      	orrs	r2, r1
 8001f18:	3306      	adds	r3, #6
 8001f1a:	009b      	lsls	r3, r3, #2
 8001f1c:	18c3      	adds	r3, r0, r3
 8001f1e:	3304      	adds	r3, #4
 8001f20:	601a      	str	r2, [r3, #0]
  else
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8001f22:	e027      	b.n	8001f74 <NVIC_SetPriority+0xcc>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001f24:	4a16      	ldr	r2, [pc, #88]	; (8001f80 <NVIC_SetPriority+0xd8>)
 8001f26:	1dfb      	adds	r3, r7, #7
 8001f28:	781b      	ldrb	r3, [r3, #0]
 8001f2a:	b25b      	sxtb	r3, r3
 8001f2c:	089b      	lsrs	r3, r3, #2
 8001f2e:	33c0      	adds	r3, #192	; 0xc0
 8001f30:	009b      	lsls	r3, r3, #2
 8001f32:	589b      	ldr	r3, [r3, r2]
 8001f34:	1dfa      	adds	r2, r7, #7
 8001f36:	7812      	ldrb	r2, [r2, #0]
 8001f38:	0011      	movs	r1, r2
 8001f3a:	2203      	movs	r2, #3
 8001f3c:	400a      	ands	r2, r1
 8001f3e:	00d2      	lsls	r2, r2, #3
 8001f40:	21ff      	movs	r1, #255	; 0xff
 8001f42:	4091      	lsls	r1, r2
 8001f44:	000a      	movs	r2, r1
 8001f46:	43d2      	mvns	r2, r2
 8001f48:	401a      	ands	r2, r3
 8001f4a:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001f4c:	683b      	ldr	r3, [r7, #0]
 8001f4e:	019b      	lsls	r3, r3, #6
 8001f50:	22ff      	movs	r2, #255	; 0xff
 8001f52:	401a      	ands	r2, r3
 8001f54:	1dfb      	adds	r3, r7, #7
 8001f56:	781b      	ldrb	r3, [r3, #0]
 8001f58:	0018      	movs	r0, r3
 8001f5a:	2303      	movs	r3, #3
 8001f5c:	4003      	ands	r3, r0
 8001f5e:	00db      	lsls	r3, r3, #3
 8001f60:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001f62:	4807      	ldr	r0, [pc, #28]	; (8001f80 <NVIC_SetPriority+0xd8>)
 8001f64:	1dfb      	adds	r3, r7, #7
 8001f66:	781b      	ldrb	r3, [r3, #0]
 8001f68:	b25b      	sxtb	r3, r3
 8001f6a:	089b      	lsrs	r3, r3, #2
 8001f6c:	430a      	orrs	r2, r1
 8001f6e:	33c0      	adds	r3, #192	; 0xc0
 8001f70:	009b      	lsls	r3, r3, #2
 8001f72:	501a      	str	r2, [r3, r0]
}
 8001f74:	46c0      	nop			; (mov r8, r8)
 8001f76:	46bd      	mov	sp, r7
 8001f78:	b003      	add	sp, #12
 8001f7a:	bd90      	pop	{r4, r7, pc}
 8001f7c:	e000ed00 	.word	0xe000ed00
 8001f80:	e000e100 	.word	0xe000e100

08001f84 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001f84:	b580      	push	{r7, lr}
 8001f86:	b082      	sub	sp, #8
 8001f88:	af00      	add	r7, sp, #0
 8001f8a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	3b01      	subs	r3, #1
 8001f90:	4a0c      	ldr	r2, [pc, #48]	; (8001fc4 <SysTick_Config+0x40>)
 8001f92:	4293      	cmp	r3, r2
 8001f94:	d901      	bls.n	8001f9a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001f96:	2301      	movs	r3, #1
 8001f98:	e010      	b.n	8001fbc <SysTick_Config+0x38>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001f9a:	4b0b      	ldr	r3, [pc, #44]	; (8001fc8 <SysTick_Config+0x44>)
 8001f9c:	687a      	ldr	r2, [r7, #4]
 8001f9e:	3a01      	subs	r2, #1
 8001fa0:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001fa2:	2301      	movs	r3, #1
 8001fa4:	425b      	negs	r3, r3
 8001fa6:	2103      	movs	r1, #3
 8001fa8:	0018      	movs	r0, r3
 8001faa:	f7ff ff7d 	bl	8001ea8 <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001fae:	4b06      	ldr	r3, [pc, #24]	; (8001fc8 <SysTick_Config+0x44>)
 8001fb0:	2200      	movs	r2, #0
 8001fb2:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001fb4:	4b04      	ldr	r3, [pc, #16]	; (8001fc8 <SysTick_Config+0x44>)
 8001fb6:	2207      	movs	r2, #7
 8001fb8:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001fba:	2300      	movs	r3, #0
}
 8001fbc:	0018      	movs	r0, r3
 8001fbe:	46bd      	mov	sp, r7
 8001fc0:	b002      	add	sp, #8
 8001fc2:	bd80      	pop	{r7, pc}
 8001fc4:	00ffffff 	.word	0x00ffffff
 8001fc8:	e000e010 	.word	0xe000e010

08001fcc <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001fcc:	b580      	push	{r7, lr}
 8001fce:	b084      	sub	sp, #16
 8001fd0:	af00      	add	r7, sp, #0
 8001fd2:	60b9      	str	r1, [r7, #8]
 8001fd4:	607a      	str	r2, [r7, #4]
 8001fd6:	230f      	movs	r3, #15
 8001fd8:	18fb      	adds	r3, r7, r3
 8001fda:	1c02      	adds	r2, r0, #0
 8001fdc:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 8001fde:	68bb      	ldr	r3, [r7, #8]
 8001fe0:	2b03      	cmp	r3, #3
 8001fe2:	d904      	bls.n	8001fee <HAL_NVIC_SetPriority+0x22>
 8001fe4:	4b08      	ldr	r3, [pc, #32]	; (8002008 <HAL_NVIC_SetPriority+0x3c>)
 8001fe6:	219b      	movs	r1, #155	; 0x9b
 8001fe8:	0018      	movs	r0, r3
 8001fea:	f7fe fcc0 	bl	800096e <assert_failed>
  NVIC_SetPriority(IRQn,PreemptPriority);
 8001fee:	68ba      	ldr	r2, [r7, #8]
 8001ff0:	230f      	movs	r3, #15
 8001ff2:	18fb      	adds	r3, r7, r3
 8001ff4:	781b      	ldrb	r3, [r3, #0]
 8001ff6:	b25b      	sxtb	r3, r3
 8001ff8:	0011      	movs	r1, r2
 8001ffa:	0018      	movs	r0, r3
 8001ffc:	f7ff ff54 	bl	8001ea8 <NVIC_SetPriority>
}
 8002000:	46c0      	nop			; (mov r8, r8)
 8002002:	46bd      	mov	sp, r7
 8002004:	b004      	add	sp, #16
 8002006:	bd80      	pop	{r7, pc}
 8002008:	0800692c 	.word	0x0800692c

0800200c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800200c:	b580      	push	{r7, lr}
 800200e:	b082      	sub	sp, #8
 8002010:	af00      	add	r7, sp, #0
 8002012:	0002      	movs	r2, r0
 8002014:	1dfb      	adds	r3, r7, #7
 8002016:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 8002018:	1dfb      	adds	r3, r7, #7
 800201a:	781b      	ldrb	r3, [r3, #0]
 800201c:	2b7f      	cmp	r3, #127	; 0x7f
 800201e:	d904      	bls.n	800202a <HAL_NVIC_EnableIRQ+0x1e>
 8002020:	4b07      	ldr	r3, [pc, #28]	; (8002040 <HAL_NVIC_EnableIRQ+0x34>)
 8002022:	21ab      	movs	r1, #171	; 0xab
 8002024:	0018      	movs	r0, r3
 8002026:	f7fe fca2 	bl	800096e <assert_failed>
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800202a:	1dfb      	adds	r3, r7, #7
 800202c:	781b      	ldrb	r3, [r3, #0]
 800202e:	b25b      	sxtb	r3, r3
 8002030:	0018      	movs	r0, r3
 8002032:	f7ff ff23 	bl	8001e7c <NVIC_EnableIRQ>
}
 8002036:	46c0      	nop			; (mov r8, r8)
 8002038:	46bd      	mov	sp, r7
 800203a:	b002      	add	sp, #8
 800203c:	bd80      	pop	{r7, pc}
 800203e:	46c0      	nop			; (mov r8, r8)
 8002040:	0800692c 	.word	0x0800692c

08002044 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002044:	b580      	push	{r7, lr}
 8002046:	b082      	sub	sp, #8
 8002048:	af00      	add	r7, sp, #0
 800204a:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	0018      	movs	r0, r3
 8002050:	f7ff ff98 	bl	8001f84 <SysTick_Config>
 8002054:	0003      	movs	r3, r0
}
 8002056:	0018      	movs	r0, r3
 8002058:	46bd      	mov	sp, r7
 800205a:	b002      	add	sp, #8
 800205c:	bd80      	pop	{r7, pc}
	...

08002060 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and initialize the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8002060:	b580      	push	{r7, lr}
 8002062:	b082      	sub	sp, #8
 8002064:	af00      	add	r7, sp, #0
 8002066:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if(hcrc == NULL)
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	2b00      	cmp	r3, #0
 800206c:	d101      	bne.n	8002072 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 800206e:	2301      	movs	r3, #1
 8002070:	e08b      	b.n	800218a <HAL_CRC_Init+0x12a>
  }
  
  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	4a47      	ldr	r2, [pc, #284]	; (8002194 <HAL_CRC_Init+0x134>)
 8002078:	4293      	cmp	r3, r2
 800207a:	d004      	beq.n	8002086 <HAL_CRC_Init+0x26>
 800207c:	4b46      	ldr	r3, [pc, #280]	; (8002198 <HAL_CRC_Init+0x138>)
 800207e:	2180      	movs	r1, #128	; 0x80
 8002080:	0018      	movs	r0, r3
 8002082:	f7fe fc74 	bl	800096e <assert_failed>

  if(hcrc->State == HAL_CRC_STATE_RESET)
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	7f5b      	ldrb	r3, [r3, #29]
 800208a:	b2db      	uxtb	r3, r3
 800208c:	2b00      	cmp	r3, #0
 800208e:	d106      	bne.n	800209e <HAL_CRC_Init+0x3e>
  {   
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	2200      	movs	r2, #0
 8002094:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	0018      	movs	r0, r3
 800209a:	f7fe f9e7 	bl	800046c <HAL_CRC_MspInit>
  }
  
  hcrc->State = HAL_CRC_STATE_BUSY; 
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	2202      	movs	r2, #2
 80020a2:	775a      	strb	r2, [r3, #29]
  /* Extended initialization: if programmable polynomial feature is 
     applicable to device, set default or non-default generating 
     polynomial according to hcrc->Init parameters.
     If feature is non-applicable to device in use, HAL_CRCEx_Init straight 
     away reports HAL_OK. */
  if (HAL_CRCEx_Init(hcrc) != HAL_OK)
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	0018      	movs	r0, r3
 80020a8:	f000 f878 	bl	800219c <HAL_CRCEx_Init>
 80020ac:	1e03      	subs	r3, r0, #0
 80020ae:	d001      	beq.n	80020b4 <HAL_CRC_Init+0x54>
  {
    return HAL_ERROR;
 80020b0:	2301      	movs	r3, #1
 80020b2:	e06a      	b.n	800218a <HAL_CRC_Init+0x12a>
  }
  
  /* check whether or not non-default CRC initial value has been 
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	795b      	ldrb	r3, [r3, #5]
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d008      	beq.n	80020ce <HAL_CRC_Init+0x6e>
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	795b      	ldrb	r3, [r3, #5]
 80020c0:	2b01      	cmp	r3, #1
 80020c2:	d004      	beq.n	80020ce <HAL_CRC_Init+0x6e>
 80020c4:	4b34      	ldr	r3, [pc, #208]	; (8002198 <HAL_CRC_Init+0x138>)
 80020c6:	2199      	movs	r1, #153	; 0x99
 80020c8:	0018      	movs	r0, r3
 80020ca:	f7fe fc50 	bl	800096e <assert_failed>
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	795b      	ldrb	r3, [r3, #5]
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d105      	bne.n	80020e2 <HAL_CRC_Init+0x82>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);  
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	2201      	movs	r2, #1
 80020dc:	4252      	negs	r2, r2
 80020de:	611a      	str	r2, [r3, #16]
 80020e0:	e004      	b.n	80020ec <HAL_CRC_Init+0x8c>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	687a      	ldr	r2, [r7, #4]
 80020e8:	6912      	ldr	r2, [r2, #16]
 80020ea:	611a      	str	r2, [r3, #16]
  }
  

  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode)); 
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	695b      	ldr	r3, [r3, #20]
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d010      	beq.n	8002116 <HAL_CRC_Init+0xb6>
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	695b      	ldr	r3, [r3, #20]
 80020f8:	2b20      	cmp	r3, #32
 80020fa:	d00c      	beq.n	8002116 <HAL_CRC_Init+0xb6>
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	695b      	ldr	r3, [r3, #20]
 8002100:	2b40      	cmp	r3, #64	; 0x40
 8002102:	d008      	beq.n	8002116 <HAL_CRC_Init+0xb6>
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	695b      	ldr	r3, [r3, #20]
 8002108:	2b60      	cmp	r3, #96	; 0x60
 800210a:	d004      	beq.n	8002116 <HAL_CRC_Init+0xb6>
 800210c:	4b22      	ldr	r3, [pc, #136]	; (8002198 <HAL_CRC_Init+0x138>)
 800210e:	21a5      	movs	r1, #165	; 0xa5
 8002110:	0018      	movs	r0, r3
 8002112:	f7fe fc2c 	bl	800096e <assert_failed>
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode); 
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	689b      	ldr	r3, [r3, #8]
 800211c:	2260      	movs	r2, #96	; 0x60
 800211e:	4393      	bics	r3, r2
 8002120:	0019      	movs	r1, r3
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	695a      	ldr	r2, [r3, #20]
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	430a      	orrs	r2, r1
 800212c:	609a      	str	r2, [r3, #8]
  
  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode)); 
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	699b      	ldr	r3, [r3, #24]
 8002132:	2b00      	cmp	r3, #0
 8002134:	d008      	beq.n	8002148 <HAL_CRC_Init+0xe8>
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	699b      	ldr	r3, [r3, #24]
 800213a:	2b80      	cmp	r3, #128	; 0x80
 800213c:	d004      	beq.n	8002148 <HAL_CRC_Init+0xe8>
 800213e:	4b16      	ldr	r3, [pc, #88]	; (8002198 <HAL_CRC_Init+0x138>)
 8002140:	21a9      	movs	r1, #169	; 0xa9
 8002142:	0018      	movs	r0, r3
 8002144:	f7fe fc13 	bl	800096e <assert_failed>
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);  
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	689b      	ldr	r3, [r3, #8]
 800214e:	2280      	movs	r2, #128	; 0x80
 8002150:	4393      	bics	r3, r2
 8002152:	0019      	movs	r1, r3
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	699a      	ldr	r2, [r3, #24]
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	430a      	orrs	r2, r1
 800215e:	609a      	str	r2, [r3, #8]
  
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	6a1b      	ldr	r3, [r3, #32]
 8002164:	2b01      	cmp	r3, #1
 8002166:	d00c      	beq.n	8002182 <HAL_CRC_Init+0x122>
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	6a1b      	ldr	r3, [r3, #32]
 800216c:	2b02      	cmp	r3, #2
 800216e:	d008      	beq.n	8002182 <HAL_CRC_Init+0x122>
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	6a1b      	ldr	r3, [r3, #32]
 8002174:	2b03      	cmp	r3, #3
 8002176:	d004      	beq.n	8002182 <HAL_CRC_Init+0x122>
 8002178:	4b07      	ldr	r3, [pc, #28]	; (8002198 <HAL_CRC_Init+0x138>)
 800217a:	21ae      	movs	r1, #174	; 0xae
 800217c:	0018      	movs	r0, r3
 800217e:	f7fe fbf6 	bl	800096e <assert_failed>

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	2201      	movs	r2, #1
 8002186:	775a      	strb	r2, [r3, #29]
  
  /* Return function status */
  return HAL_OK;
 8002188:	2300      	movs	r3, #0
}
 800218a:	0018      	movs	r0, r3
 800218c:	46bd      	mov	sp, r7
 800218e:	b002      	add	sp, #8
 8002190:	bd80      	pop	{r7, pc}
 8002192:	46c0      	nop			; (mov r8, r8)
 8002194:	40023000 	.word	0x40023000
 8002198:	08006968 	.word	0x08006968

0800219c <HAL_CRCEx_Init>:
  * @brief  Extended initialization to set generating polynomial
  * @param  hcrc CRC handle             
  * @retval HAL status
  */             
HAL_StatusTypeDef HAL_CRCEx_Init(CRC_HandleTypeDef *hcrc)
{
 800219c:	b580      	push	{r7, lr}
 800219e:	b082      	sub	sp, #8
 80021a0:	af00      	add	r7, sp, #0
 80021a2:	6078      	str	r0, [r7, #4]
      return HAL_ERROR;
    }
  }
#endif /* defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F091xC) || defined (STM32F098xx) */    

   return HAL_OK;
 80021a4:	2300      	movs	r3, #0
}
 80021a6:	0018      	movs	r0, r3
 80021a8:	46bd      	mov	sp, r7
 80021aa:	b002      	add	sp, #8
 80021ac:	bd80      	pop	{r7, pc}
	...

080021b0 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef* hdac)
{ 
 80021b0:	b580      	push	{r7, lr}
 80021b2:	b082      	sub	sp, #8
 80021b4:	af00      	add	r7, sp, #0
 80021b6:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if(hdac == NULL)
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d101      	bne.n	80021c2 <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 80021be:	2301      	movs	r3, #1
 80021c0:	e021      	b.n	8002206 <HAL_DAC_Init+0x56>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	4a12      	ldr	r2, [pc, #72]	; (8002210 <HAL_DAC_Init+0x60>)
 80021c8:	4293      	cmp	r3, r2
 80021ca:	d006      	beq.n	80021da <HAL_DAC_Init+0x2a>
 80021cc:	2387      	movs	r3, #135	; 0x87
 80021ce:	005a      	lsls	r2, r3, #1
 80021d0:	4b10      	ldr	r3, [pc, #64]	; (8002214 <HAL_DAC_Init+0x64>)
 80021d2:	0011      	movs	r1, r2
 80021d4:	0018      	movs	r0, r3
 80021d6:	f7fe fbca 	bl	800096e <assert_failed>
  
  if(hdac->State == HAL_DAC_STATE_RESET)
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	791b      	ldrb	r3, [r3, #4]
 80021de:	b2db      	uxtb	r3, r3
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d106      	bne.n	80021f2 <HAL_DAC_Init+0x42>
  {  
    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	2200      	movs	r2, #0
 80021e8:	715a      	strb	r2, [r3, #5]

    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	0018      	movs	r0, r3
 80021ee:	f7fe f989 	bl	8000504 <HAL_DAC_MspInit>
  }
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	2202      	movs	r2, #2
 80021f6:	711a      	strb	r2, [r3, #4]
  
  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	2200      	movs	r2, #0
 80021fc:	611a      	str	r2, [r3, #16]
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	2201      	movs	r2, #1
 8002202:	711a      	strb	r2, [r3, #4]
  
  /* Return function status */
  return HAL_OK;
 8002204:	2300      	movs	r3, #0
}
 8002206:	0018      	movs	r0, r3
 8002208:	46bd      	mov	sp, r7
 800220a:	b002      	add	sp, #8
 800220c:	bd80      	pop	{r7, pc}
 800220e:	46c0      	nop			; (mov r8, r8)
 8002210:	40007400 	.word	0x40007400
 8002214:	080069a0 	.word	0x080069a0

08002218 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef* hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{  
 8002218:	b580      	push	{r7, lr}
 800221a:	b086      	sub	sp, #24
 800221c:	af00      	add	r7, sp, #0
 800221e:	60f8      	str	r0, [r7, #12]
 8002220:	60b9      	str	r1, [r7, #8]
 8002222:	607a      	str	r2, [r7, #4]
 8002224:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0;
 8002226:	2300      	movs	r3, #0
 8002228:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
 800222a:	68bb      	ldr	r3, [r7, #8]
 800222c:	2b00      	cmp	r3, #0
 800222e:	d005      	beq.n	800223c <HAL_DAC_SetValue+0x24>
 8002230:	4a1c      	ldr	r2, [pc, #112]	; (80022a4 <HAL_DAC_SetValue+0x8c>)
 8002232:	4b1d      	ldr	r3, [pc, #116]	; (80022a8 <HAL_DAC_SetValue+0x90>)
 8002234:	0011      	movs	r1, r2
 8002236:	0018      	movs	r0, r3
 8002238:	f7fe fb99 	bl	800096e <assert_failed>
  assert_param(IS_DAC_ALIGN(Alignment));
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	2b00      	cmp	r3, #0
 8002240:	d00b      	beq.n	800225a <HAL_DAC_SetValue+0x42>
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	2b04      	cmp	r3, #4
 8002246:	d008      	beq.n	800225a <HAL_DAC_SetValue+0x42>
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	2b08      	cmp	r3, #8
 800224c:	d005      	beq.n	800225a <HAL_DAC_SetValue+0x42>
 800224e:	4a17      	ldr	r2, [pc, #92]	; (80022ac <HAL_DAC_SetValue+0x94>)
 8002250:	4b15      	ldr	r3, [pc, #84]	; (80022a8 <HAL_DAC_SetValue+0x90>)
 8002252:	0011      	movs	r1, r2
 8002254:	0018      	movs	r0, r3
 8002256:	f7fe fb8a 	bl	800096e <assert_failed>
  assert_param(IS_DAC_DATA(Data));
 800225a:	683b      	ldr	r3, [r7, #0]
 800225c:	4a14      	ldr	r2, [pc, #80]	; (80022b0 <HAL_DAC_SetValue+0x98>)
 800225e:	4293      	cmp	r3, r2
 8002260:	d906      	bls.n	8002270 <HAL_DAC_SetValue+0x58>
 8002262:	238e      	movs	r3, #142	; 0x8e
 8002264:	009a      	lsls	r2, r3, #2
 8002266:	4b10      	ldr	r3, [pc, #64]	; (80022a8 <HAL_DAC_SetValue+0x90>)
 8002268:	0011      	movs	r1, r2
 800226a:	0018      	movs	r0, r3
 800226c:	f7fe fb7f 	bl	800096e <assert_failed>
  
  tmp = (uint32_t)hdac->Instance; 
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	617b      	str	r3, [r7, #20]
  if(Channel == DAC_CHANNEL_1)
 8002276:	68bb      	ldr	r3, [r7, #8]
 8002278:	2b00      	cmp	r3, #0
 800227a:	d105      	bne.n	8002288 <HAL_DAC_SetValue+0x70>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 800227c:	697a      	ldr	r2, [r7, #20]
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	18d3      	adds	r3, r2, r3
 8002282:	3308      	adds	r3, #8
 8002284:	617b      	str	r3, [r7, #20]
 8002286:	e004      	b.n	8002292 <HAL_DAC_SetValue+0x7a>
  }
  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 8002288:	697a      	ldr	r2, [r7, #20]
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	18d3      	adds	r3, r2, r3
 800228e:	3314      	adds	r3, #20
 8002290:	617b      	str	r3, [r7, #20]
  }

  /* Set the DAC channel1 selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8002292:	697b      	ldr	r3, [r7, #20]
 8002294:	683a      	ldr	r2, [r7, #0]
 8002296:	601a      	str	r2, [r3, #0]
  
  /* Return function status */
  return HAL_OK;
 8002298:	2300      	movs	r3, #0
}
 800229a:	0018      	movs	r0, r3
 800229c:	46bd      	mov	sp, r7
 800229e:	b006      	add	sp, #24
 80022a0:	bd80      	pop	{r7, pc}
 80022a2:	46c0      	nop			; (mov r8, r8)
 80022a4:	00000236 	.word	0x00000236
 80022a8:	080069a0 	.word	0x080069a0
 80022ac:	00000237 	.word	0x00000237
 80022b0:	0000fff0 	.word	0x0000fff0

080022b4 <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 80022b4:	b580      	push	{r7, lr}
 80022b6:	b082      	sub	sp, #8
 80022b8:	af00      	add	r7, sp, #0
 80022ba:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh1 could be implemented in the user file
   */
}
 80022bc:	46c0      	nop			; (mov r8, r8)
 80022be:	46bd      	mov	sp, r7
 80022c0:	b002      	add	sp, #8
 80022c2:	bd80      	pop	{r7, pc}

080022c4 <HAL_DAC_ConfigChannel>:
  *          This parameter can be one of the following values:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef* hdac, DAC_ChannelConfTypeDef* sConfig, uint32_t Channel)
{
 80022c4:	b580      	push	{r7, lr}
 80022c6:	b086      	sub	sp, #24
 80022c8:	af00      	add	r7, sp, #0
 80022ca:	60f8      	str	r0, [r7, #12]
 80022cc:	60b9      	str	r1, [r7, #8]
 80022ce:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1 = 0U, tmpreg2 = 0U;
 80022d0:	2300      	movs	r3, #0
 80022d2:	617b      	str	r3, [r7, #20]
 80022d4:	2300      	movs	r3, #0
 80022d6:	613b      	str	r3, [r7, #16]

  /* Check the DAC parameters */
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
 80022d8:	68bb      	ldr	r3, [r7, #8]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d01c      	beq.n	800231a <HAL_DAC_ConfigChannel+0x56>
 80022e0:	68bb      	ldr	r3, [r7, #8]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	2b24      	cmp	r3, #36	; 0x24
 80022e6:	d018      	beq.n	800231a <HAL_DAC_ConfigChannel+0x56>
 80022e8:	68bb      	ldr	r3, [r7, #8]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	2b0c      	cmp	r3, #12
 80022ee:	d014      	beq.n	800231a <HAL_DAC_ConfigChannel+0x56>
 80022f0:	68bb      	ldr	r3, [r7, #8]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	2b04      	cmp	r3, #4
 80022f6:	d010      	beq.n	800231a <HAL_DAC_ConfigChannel+0x56>
 80022f8:	68bb      	ldr	r3, [r7, #8]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	2b1c      	cmp	r3, #28
 80022fe:	d00c      	beq.n	800231a <HAL_DAC_ConfigChannel+0x56>
 8002300:	68bb      	ldr	r3, [r7, #8]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	2b34      	cmp	r3, #52	; 0x34
 8002306:	d008      	beq.n	800231a <HAL_DAC_ConfigChannel+0x56>
 8002308:	68bb      	ldr	r3, [r7, #8]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	2b3c      	cmp	r3, #60	; 0x3c
 800230e:	d004      	beq.n	800231a <HAL_DAC_ConfigChannel+0x56>
 8002310:	4b37      	ldr	r3, [pc, #220]	; (80023f0 <HAL_DAC_ConfigChannel+0x12c>)
 8002312:	21b9      	movs	r1, #185	; 0xb9
 8002314:	0018      	movs	r0, r3
 8002316:	f7fe fb2a 	bl	800096e <assert_failed>
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
 800231a:	68bb      	ldr	r3, [r7, #8]
 800231c:	685b      	ldr	r3, [r3, #4]
 800231e:	2b00      	cmp	r3, #0
 8002320:	d008      	beq.n	8002334 <HAL_DAC_ConfigChannel+0x70>
 8002322:	68bb      	ldr	r3, [r7, #8]
 8002324:	685b      	ldr	r3, [r3, #4]
 8002326:	2b02      	cmp	r3, #2
 8002328:	d004      	beq.n	8002334 <HAL_DAC_ConfigChannel+0x70>
 800232a:	4b31      	ldr	r3, [pc, #196]	; (80023f0 <HAL_DAC_ConfigChannel+0x12c>)
 800232c:	21ba      	movs	r1, #186	; 0xba
 800232e:	0018      	movs	r0, r3
 8002330:	f7fe fb1d 	bl	800096e <assert_failed>
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
 8002334:	68bb      	ldr	r3, [r7, #8]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	2b00      	cmp	r3, #0
 800233a:	d01c      	beq.n	8002376 <HAL_DAC_ConfigChannel+0xb2>
 800233c:	68bb      	ldr	r3, [r7, #8]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	2b24      	cmp	r3, #36	; 0x24
 8002342:	d018      	beq.n	8002376 <HAL_DAC_ConfigChannel+0xb2>
 8002344:	68bb      	ldr	r3, [r7, #8]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	2b0c      	cmp	r3, #12
 800234a:	d014      	beq.n	8002376 <HAL_DAC_ConfigChannel+0xb2>
 800234c:	68bb      	ldr	r3, [r7, #8]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	2b04      	cmp	r3, #4
 8002352:	d010      	beq.n	8002376 <HAL_DAC_ConfigChannel+0xb2>
 8002354:	68bb      	ldr	r3, [r7, #8]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	2b1c      	cmp	r3, #28
 800235a:	d00c      	beq.n	8002376 <HAL_DAC_ConfigChannel+0xb2>
 800235c:	68bb      	ldr	r3, [r7, #8]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	2b34      	cmp	r3, #52	; 0x34
 8002362:	d008      	beq.n	8002376 <HAL_DAC_ConfigChannel+0xb2>
 8002364:	68bb      	ldr	r3, [r7, #8]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	2b3c      	cmp	r3, #60	; 0x3c
 800236a:	d004      	beq.n	8002376 <HAL_DAC_ConfigChannel+0xb2>
 800236c:	4b20      	ldr	r3, [pc, #128]	; (80023f0 <HAL_DAC_ConfigChannel+0x12c>)
 800236e:	21bb      	movs	r1, #187	; 0xbb
 8002370:	0018      	movs	r0, r3
 8002372:	f7fe fafc 	bl	800096e <assert_failed>
  assert_param(IS_DAC_CHANNEL(Channel));
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	2b00      	cmp	r3, #0
 800237a:	d004      	beq.n	8002386 <HAL_DAC_ConfigChannel+0xc2>
 800237c:	4b1c      	ldr	r3, [pc, #112]	; (80023f0 <HAL_DAC_ConfigChannel+0x12c>)
 800237e:	21bc      	movs	r1, #188	; 0xbc
 8002380:	0018      	movs	r0, r3
 8002382:	f7fe faf4 	bl	800096e <assert_failed>
  
  /* Process locked */
  __HAL_LOCK(hdac);
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	795b      	ldrb	r3, [r3, #5]
 800238a:	2b01      	cmp	r3, #1
 800238c:	d101      	bne.n	8002392 <HAL_DAC_ConfigChannel+0xce>
 800238e:	2302      	movs	r3, #2
 8002390:	e029      	b.n	80023e6 <HAL_DAC_ConfigChannel+0x122>
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	2201      	movs	r2, #1
 8002396:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	2202      	movs	r2, #2
 800239c:	711a      	strb	r2, [r3, #4]
  
  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << Channel); 
 80023a6:	223e      	movs	r2, #62	; 0x3e
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	409a      	lsls	r2, r3
 80023ac:	0013      	movs	r3, r2
 80023ae:	43da      	mvns	r2, r3
 80023b0:	697b      	ldr	r3, [r7, #20]
 80023b2:	4013      	ands	r3, r2
 80023b4:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */   
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 80023b6:	68bb      	ldr	r3, [r7, #8]
 80023b8:	681a      	ldr	r2, [r3, #0]
 80023ba:	68bb      	ldr	r3, [r7, #8]
 80023bc:	685b      	ldr	r3, [r3, #4]
 80023be:	4313      	orrs	r3, r2
 80023c0:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << Channel;
 80023c2:	693a      	ldr	r2, [r7, #16]
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	409a      	lsls	r2, r3
 80023c8:	0013      	movs	r3, r2
 80023ca:	697a      	ldr	r2, [r7, #20]
 80023cc:	4313      	orrs	r3, r2
 80023ce:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	697a      	ldr	r2, [r7, #20]
 80023d6:	601a      	str	r2, [r3, #0]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	2201      	movs	r2, #1
 80023dc:	711a      	strb	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	2200      	movs	r2, #0
 80023e2:	715a      	strb	r2, [r3, #5]
  
  /* Return function status */
  return HAL_OK;
 80023e4:	2300      	movs	r3, #0
}
 80023e6:	0018      	movs	r0, r3
 80023e8:	46bd      	mov	sp, r7
 80023ea:	b006      	add	sp, #24
 80023ec:	bd80      	pop	{r7, pc}
 80023ee:	46c0      	nop			; (mov r8, r8)
 80023f0:	080069d8 	.word	0x080069d8

080023f4 <HAL_DAC_Start>:
       /* STM32F091xC  STM32F098xx */

#if defined (STM32F051x8) || defined (STM32F058xx)

HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef* hdac, uint32_t Channel)
{
 80023f4:	b580      	push	{r7, lr}
 80023f6:	b082      	sub	sp, #8
 80023f8:	af00      	add	r7, sp, #0
 80023fa:	6078      	str	r0, [r7, #4]
 80023fc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
 80023fe:	683b      	ldr	r3, [r7, #0]
 8002400:	2b00      	cmp	r3, #0
 8002402:	d006      	beq.n	8002412 <HAL_DAC_Start+0x1e>
 8002404:	23f0      	movs	r3, #240	; 0xf0
 8002406:	005a      	lsls	r2, r3, #1
 8002408:	4b1b      	ldr	r3, [pc, #108]	; (8002478 <HAL_DAC_Start+0x84>)
 800240a:	0011      	movs	r1, r2
 800240c:	0018      	movs	r0, r3
 800240e:	f7fe faae 	bl	800096e <assert_failed>
  
  /* Process locked */
  __HAL_LOCK(hdac);
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	795b      	ldrb	r3, [r3, #5]
 8002416:	2b01      	cmp	r3, #1
 8002418:	d101      	bne.n	800241e <HAL_DAC_Start+0x2a>
 800241a:	2302      	movs	r3, #2
 800241c:	e028      	b.n	8002470 <HAL_DAC_Start+0x7c>
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	2201      	movs	r2, #1
 8002422:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	2202      	movs	r2, #2
 8002428:	711a      	strb	r2, [r3, #4]
  
  /* Enable the Peripharal */
  __HAL_DAC_ENABLE(hdac, Channel);
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	6819      	ldr	r1, [r3, #0]
 8002430:	2201      	movs	r2, #1
 8002432:	683b      	ldr	r3, [r7, #0]
 8002434:	409a      	lsls	r2, r3
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	430a      	orrs	r2, r1
 800243c:	601a      	str	r2, [r3, #0]
  
  if(Channel == DAC_CHANNEL_1)
 800243e:	683b      	ldr	r3, [r7, #0]
 8002440:	2b00      	cmp	r3, #0
 8002442:	d10e      	bne.n	8002462 <HAL_DAC_Start+0x6e>
  {
    /* Check if software trigger enabled */
    if((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == (DAC_CR_TEN1 | DAC_CR_TSEL1))
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	223c      	movs	r2, #60	; 0x3c
 800244c:	4013      	ands	r3, r2
 800244e:	2b3c      	cmp	r3, #60	; 0x3c
 8002450:	d107      	bne.n	8002462 <HAL_DAC_Start+0x6e>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	685a      	ldr	r2, [r3, #4]
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	2101      	movs	r1, #1
 800245e:	430a      	orrs	r2, r1
 8002460:	605a      	str	r2, [r3, #4]
    }
  }
 
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	2201      	movs	r2, #1
 8002466:	711a      	strb	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	2200      	movs	r2, #0
 800246c:	715a      	strb	r2, [r3, #5]
    
  /* Return function status */
  return HAL_OK;
 800246e:	2300      	movs	r3, #0
}
 8002470:	0018      	movs	r0, r3
 8002472:	46bd      	mov	sp, r7
 8002474:	b002      	add	sp, #8
 8002476:	bd80      	pop	{r7, pc}
 8002478:	080069d8 	.word	0x080069d8

0800247c <HAL_DAC_IRQHandler>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
void HAL_DAC_IRQHandler(DAC_HandleTypeDef* hdac)
{
 800247c:	b580      	push	{r7, lr}
 800247e:	b082      	sub	sp, #8
 8002480:	af00      	add	r7, sp, #0
 8002482:	6078      	str	r0, [r7, #4]
  if(__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR1))
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	681a      	ldr	r2, [r3, #0]
 800248a:	2380      	movs	r3, #128	; 0x80
 800248c:	019b      	lsls	r3, r3, #6
 800248e:	401a      	ands	r2, r3
 8002490:	2380      	movs	r3, #128	; 0x80
 8002492:	019b      	lsls	r3, r3, #6
 8002494:	429a      	cmp	r2, r3
 8002496:	d123      	bne.n	80024e0 <HAL_DAC_IRQHandler+0x64>
  { 
  /* Check Overrun flag */
  if(__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR1))
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800249e:	2380      	movs	r3, #128	; 0x80
 80024a0:	019b      	lsls	r3, r3, #6
 80024a2:	401a      	ands	r2, r3
 80024a4:	2380      	movs	r3, #128	; 0x80
 80024a6:	019b      	lsls	r3, r3, #6
 80024a8:	429a      	cmp	r2, r3
 80024aa:	d119      	bne.n	80024e0 <HAL_DAC_IRQHandler+0x64>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	2204      	movs	r2, #4
 80024b0:	711a      	strb	r2, [r3, #4]
    
      /* Set DAC error code to chanel1 DMA underrun error */
      hdac->ErrorCode |= HAL_DAC_ERROR_DMAUNDERRUNCH1;
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	691b      	ldr	r3, [r3, #16]
 80024b6:	2201      	movs	r2, #1
 80024b8:	431a      	orrs	r2, r3
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	611a      	str	r2, [r3, #16]
    
      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac,DAC_FLAG_DMAUDR1);
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	2280      	movs	r2, #128	; 0x80
 80024c4:	0192      	lsls	r2, r2, #6
 80024c6:	635a      	str	r2, [r3, #52]	; 0x34
    
      /* Disable the selected DAC channel1 DMA request */
      hdac->Instance->CR &= ~DAC_CR_DMAEN1;
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	681a      	ldr	r2, [r3, #0]
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	4905      	ldr	r1, [pc, #20]	; (80024e8 <HAL_DAC_IRQHandler+0x6c>)
 80024d4:	400a      	ands	r2, r1
 80024d6:	601a      	str	r2, [r3, #0]
    
      /* Error callback */ 
      HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	0018      	movs	r0, r3
 80024dc:	f7ff feea 	bl	80022b4 <HAL_DAC_DMAUnderrunCallbackCh1>
    }
  }
}
 80024e0:	46c0      	nop			; (mov r8, r8)
 80024e2:	46bd      	mov	sp, r7
 80024e4:	b002      	add	sp, #8
 80024e6:	bd80      	pop	{r7, pc}
 80024e8:	ffffefff 	.word	0xffffefff

080024ec <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 80024ec:	b580      	push	{r7, lr}
 80024ee:	b084      	sub	sp, #16
 80024f0:	af00      	add	r7, sp, #0
 80024f2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80024f4:	2300      	movs	r3, #0
 80024f6:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d101      	bne.n	8002502 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 80024fe:	2301      	movs	r3, #1
 8002500:	e0df      	b.n	80026c2 <HAL_DMA_Init+0x1d6>
  }
  
  /* Check the parameters */
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	4a71      	ldr	r2, [pc, #452]	; (80026cc <HAL_DMA_Init+0x1e0>)
 8002508:	4293      	cmp	r3, r2
 800250a:	d018      	beq.n	800253e <HAL_DMA_Init+0x52>
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	4a6f      	ldr	r2, [pc, #444]	; (80026d0 <HAL_DMA_Init+0x1e4>)
 8002512:	4293      	cmp	r3, r2
 8002514:	d013      	beq.n	800253e <HAL_DMA_Init+0x52>
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	4a6e      	ldr	r2, [pc, #440]	; (80026d4 <HAL_DMA_Init+0x1e8>)
 800251c:	4293      	cmp	r3, r2
 800251e:	d00e      	beq.n	800253e <HAL_DMA_Init+0x52>
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	4a6c      	ldr	r2, [pc, #432]	; (80026d8 <HAL_DMA_Init+0x1ec>)
 8002526:	4293      	cmp	r3, r2
 8002528:	d009      	beq.n	800253e <HAL_DMA_Init+0x52>
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	4a6b      	ldr	r2, [pc, #428]	; (80026dc <HAL_DMA_Init+0x1f0>)
 8002530:	4293      	cmp	r3, r2
 8002532:	d004      	beq.n	800253e <HAL_DMA_Init+0x52>
 8002534:	4b6a      	ldr	r3, [pc, #424]	; (80026e0 <HAL_DMA_Init+0x1f4>)
 8002536:	21a5      	movs	r1, #165	; 0xa5
 8002538:	0018      	movs	r0, r3
 800253a:	f7fe fa18 	bl	800096e <assert_failed>
  assert_param(IS_DMA_DIRECTION(hdma->Init.Direction));
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	685b      	ldr	r3, [r3, #4]
 8002542:	2b00      	cmp	r3, #0
 8002544:	d00e      	beq.n	8002564 <HAL_DMA_Init+0x78>
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	685b      	ldr	r3, [r3, #4]
 800254a:	2b10      	cmp	r3, #16
 800254c:	d00a      	beq.n	8002564 <HAL_DMA_Init+0x78>
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	685a      	ldr	r2, [r3, #4]
 8002552:	2380      	movs	r3, #128	; 0x80
 8002554:	01db      	lsls	r3, r3, #7
 8002556:	429a      	cmp	r2, r3
 8002558:	d004      	beq.n	8002564 <HAL_DMA_Init+0x78>
 800255a:	4b61      	ldr	r3, [pc, #388]	; (80026e0 <HAL_DMA_Init+0x1f4>)
 800255c:	21a6      	movs	r1, #166	; 0xa6
 800255e:	0018      	movs	r0, r3
 8002560:	f7fe fa05 	bl	800096e <assert_failed>
  assert_param(IS_DMA_PERIPHERAL_INC_STATE(hdma->Init.PeriphInc));
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	689b      	ldr	r3, [r3, #8]
 8002568:	2b40      	cmp	r3, #64	; 0x40
 800256a:	d008      	beq.n	800257e <HAL_DMA_Init+0x92>
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	689b      	ldr	r3, [r3, #8]
 8002570:	2b00      	cmp	r3, #0
 8002572:	d004      	beq.n	800257e <HAL_DMA_Init+0x92>
 8002574:	4b5a      	ldr	r3, [pc, #360]	; (80026e0 <HAL_DMA_Init+0x1f4>)
 8002576:	21a7      	movs	r1, #167	; 0xa7
 8002578:	0018      	movs	r0, r3
 800257a:	f7fe f9f8 	bl	800096e <assert_failed>
  assert_param(IS_DMA_MEMORY_INC_STATE(hdma->Init.MemInc));
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	68db      	ldr	r3, [r3, #12]
 8002582:	2b80      	cmp	r3, #128	; 0x80
 8002584:	d008      	beq.n	8002598 <HAL_DMA_Init+0xac>
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	68db      	ldr	r3, [r3, #12]
 800258a:	2b00      	cmp	r3, #0
 800258c:	d004      	beq.n	8002598 <HAL_DMA_Init+0xac>
 800258e:	4b54      	ldr	r3, [pc, #336]	; (80026e0 <HAL_DMA_Init+0x1f4>)
 8002590:	21a8      	movs	r1, #168	; 0xa8
 8002592:	0018      	movs	r0, r3
 8002594:	f7fe f9eb 	bl	800096e <assert_failed>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	691b      	ldr	r3, [r3, #16]
 800259c:	2b00      	cmp	r3, #0
 800259e:	d010      	beq.n	80025c2 <HAL_DMA_Init+0xd6>
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	691a      	ldr	r2, [r3, #16]
 80025a4:	2380      	movs	r3, #128	; 0x80
 80025a6:	005b      	lsls	r3, r3, #1
 80025a8:	429a      	cmp	r2, r3
 80025aa:	d00a      	beq.n	80025c2 <HAL_DMA_Init+0xd6>
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	691a      	ldr	r2, [r3, #16]
 80025b0:	2380      	movs	r3, #128	; 0x80
 80025b2:	009b      	lsls	r3, r3, #2
 80025b4:	429a      	cmp	r2, r3
 80025b6:	d004      	beq.n	80025c2 <HAL_DMA_Init+0xd6>
 80025b8:	4b49      	ldr	r3, [pc, #292]	; (80026e0 <HAL_DMA_Init+0x1f4>)
 80025ba:	21a9      	movs	r1, #169	; 0xa9
 80025bc:	0018      	movs	r0, r3
 80025be:	f7fe f9d6 	bl	800096e <assert_failed>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	695b      	ldr	r3, [r3, #20]
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d010      	beq.n	80025ec <HAL_DMA_Init+0x100>
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	695a      	ldr	r2, [r3, #20]
 80025ce:	2380      	movs	r3, #128	; 0x80
 80025d0:	00db      	lsls	r3, r3, #3
 80025d2:	429a      	cmp	r2, r3
 80025d4:	d00a      	beq.n	80025ec <HAL_DMA_Init+0x100>
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	695a      	ldr	r2, [r3, #20]
 80025da:	2380      	movs	r3, #128	; 0x80
 80025dc:	011b      	lsls	r3, r3, #4
 80025de:	429a      	cmp	r2, r3
 80025e0:	d004      	beq.n	80025ec <HAL_DMA_Init+0x100>
 80025e2:	4b3f      	ldr	r3, [pc, #252]	; (80026e0 <HAL_DMA_Init+0x1f4>)
 80025e4:	21aa      	movs	r1, #170	; 0xaa
 80025e6:	0018      	movs	r0, r3
 80025e8:	f7fe f9c1 	bl	800096e <assert_failed>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	699b      	ldr	r3, [r3, #24]
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d008      	beq.n	8002606 <HAL_DMA_Init+0x11a>
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	699b      	ldr	r3, [r3, #24]
 80025f8:	2b20      	cmp	r3, #32
 80025fa:	d004      	beq.n	8002606 <HAL_DMA_Init+0x11a>
 80025fc:	4b38      	ldr	r3, [pc, #224]	; (80026e0 <HAL_DMA_Init+0x1f4>)
 80025fe:	21ab      	movs	r1, #171	; 0xab
 8002600:	0018      	movs	r0, r3
 8002602:	f7fe f9b4 	bl	800096e <assert_failed>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	69db      	ldr	r3, [r3, #28]
 800260a:	2b00      	cmp	r3, #0
 800260c:	d016      	beq.n	800263c <HAL_DMA_Init+0x150>
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	69da      	ldr	r2, [r3, #28]
 8002612:	2380      	movs	r3, #128	; 0x80
 8002614:	015b      	lsls	r3, r3, #5
 8002616:	429a      	cmp	r2, r3
 8002618:	d010      	beq.n	800263c <HAL_DMA_Init+0x150>
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	69da      	ldr	r2, [r3, #28]
 800261e:	2380      	movs	r3, #128	; 0x80
 8002620:	019b      	lsls	r3, r3, #6
 8002622:	429a      	cmp	r2, r3
 8002624:	d00a      	beq.n	800263c <HAL_DMA_Init+0x150>
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	69da      	ldr	r2, [r3, #28]
 800262a:	23c0      	movs	r3, #192	; 0xc0
 800262c:	019b      	lsls	r3, r3, #6
 800262e:	429a      	cmp	r2, r3
 8002630:	d004      	beq.n	800263c <HAL_DMA_Init+0x150>
 8002632:	4b2b      	ldr	r3, [pc, #172]	; (80026e0 <HAL_DMA_Init+0x1f4>)
 8002634:	21ac      	movs	r1, #172	; 0xac
 8002636:	0018      	movs	r0, r3
 8002638:	f7fe f999 	bl	800096e <assert_failed>
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	2221      	movs	r2, #33	; 0x21
 8002640:	2102      	movs	r1, #2
 8002642:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	4a25      	ldr	r2, [pc, #148]	; (80026e4 <HAL_DMA_Init+0x1f8>)
 8002650:	4013      	ands	r3, r2
 8002652:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 800265c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	68db      	ldr	r3, [r3, #12]
 8002662:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002668:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	695b      	ldr	r3, [r3, #20]
 800266e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002674:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	69db      	ldr	r3, [r3, #28]
 800267a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800267c:	68fa      	ldr	r2, [r7, #12]
 800267e:	4313      	orrs	r3, r2
 8002680:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	68fa      	ldr	r2, [r7, #12]
 8002688:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	0018      	movs	r0, r3
 800268e:	f000 f8cd 	bl	800282c <DMA_CalcBaseAndBitshift>
  
  /* Clean callbacks */
  hdma->XferCpltCallback = NULL;
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	2200      	movs	r2, #0
 8002696:	629a      	str	r2, [r3, #40]	; 0x28
  hdma->XferHalfCpltCallback = NULL;
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	2200      	movs	r2, #0
 800269c:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma->XferErrorCallback = NULL;
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	2200      	movs	r2, #0
 80026a2:	631a      	str	r2, [r3, #48]	; 0x30
  hdma->XferAbortCallback = NULL;
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	2200      	movs	r2, #0
 80026a8:	635a      	str	r2, [r3, #52]	; 0x34
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	2200      	movs	r2, #0
 80026ae:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	2221      	movs	r2, #33	; 0x21
 80026b4:	2101      	movs	r1, #1
 80026b6:	5499      	strb	r1, [r3, r2]
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	2220      	movs	r2, #32
 80026bc:	2100      	movs	r1, #0
 80026be:	5499      	strb	r1, [r3, r2]
  
  return HAL_OK;
 80026c0:	2300      	movs	r3, #0
}  
 80026c2:	0018      	movs	r0, r3
 80026c4:	46bd      	mov	sp, r7
 80026c6:	b004      	add	sp, #16
 80026c8:	bd80      	pop	{r7, pc}
 80026ca:	46c0      	nop			; (mov r8, r8)
 80026cc:	40020008 	.word	0x40020008
 80026d0:	4002001c 	.word	0x4002001c
 80026d4:	40020030 	.word	0x40020030
 80026d8:	40020044 	.word	0x40020044
 80026dc:	40020058 	.word	0x40020058
 80026e0:	08006a14 	.word	0x08006a14
 80026e4:	ffffc00f 	.word	0xffffc00f

080026e8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80026e8:	b580      	push	{r7, lr}
 80026ea:	b084      	sub	sp, #16
 80026ec:	af00      	add	r7, sp, #0
 80026ee:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002704:	2204      	movs	r2, #4
 8002706:	409a      	lsls	r2, r3
 8002708:	0013      	movs	r3, r2
 800270a:	68fa      	ldr	r2, [r7, #12]
 800270c:	4013      	ands	r3, r2
 800270e:	d024      	beq.n	800275a <HAL_DMA_IRQHandler+0x72>
 8002710:	68bb      	ldr	r3, [r7, #8]
 8002712:	2204      	movs	r2, #4
 8002714:	4013      	ands	r3, r2
 8002716:	d020      	beq.n	800275a <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	2220      	movs	r2, #32
 8002720:	4013      	ands	r3, r2
 8002722:	d107      	bne.n	8002734 <HAL_DMA_IRQHandler+0x4c>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	681a      	ldr	r2, [r3, #0]
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	2104      	movs	r1, #4
 8002730:	438a      	bics	r2, r1
 8002732:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800273c:	2104      	movs	r1, #4
 800273e:	4091      	lsls	r1, r2
 8002740:	000a      	movs	r2, r1
 8002742:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002748:	2b00      	cmp	r3, #0
 800274a:	d100      	bne.n	800274e <HAL_DMA_IRQHandler+0x66>
 800274c:	e06a      	b.n	8002824 <HAL_DMA_IRQHandler+0x13c>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002752:	687a      	ldr	r2, [r7, #4]
 8002754:	0010      	movs	r0, r2
 8002756:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 8002758:	e064      	b.n	8002824 <HAL_DMA_IRQHandler+0x13c>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800275e:	2202      	movs	r2, #2
 8002760:	409a      	lsls	r2, r3
 8002762:	0013      	movs	r3, r2
 8002764:	68fa      	ldr	r2, [r7, #12]
 8002766:	4013      	ands	r3, r2
 8002768:	d02b      	beq.n	80027c2 <HAL_DMA_IRQHandler+0xda>
 800276a:	68bb      	ldr	r3, [r7, #8]
 800276c:	2202      	movs	r2, #2
 800276e:	4013      	ands	r3, r2
 8002770:	d027      	beq.n	80027c2 <HAL_DMA_IRQHandler+0xda>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	2220      	movs	r2, #32
 800277a:	4013      	ands	r3, r2
 800277c:	d10b      	bne.n	8002796 <HAL_DMA_IRQHandler+0xae>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	681a      	ldr	r2, [r3, #0]
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	210a      	movs	r1, #10
 800278a:	438a      	bics	r2, r1
 800278c:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	2221      	movs	r2, #33	; 0x21
 8002792:	2101      	movs	r1, #1
 8002794:	5499      	strb	r1, [r3, r2]
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800279e:	2102      	movs	r1, #2
 80027a0:	4091      	lsls	r1, r2
 80027a2:	000a      	movs	r2, r1
 80027a4:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	2220      	movs	r2, #32
 80027aa:	2100      	movs	r1, #0
 80027ac:	5499      	strb	r1, [r3, r2]
  	
  	if(hdma->XferCpltCallback != NULL)
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d036      	beq.n	8002824 <HAL_DMA_IRQHandler+0x13c>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027ba:	687a      	ldr	r2, [r7, #4]
 80027bc:	0010      	movs	r0, r2
 80027be:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 80027c0:	e030      	b.n	8002824 <HAL_DMA_IRQHandler+0x13c>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027c6:	2208      	movs	r2, #8
 80027c8:	409a      	lsls	r2, r3
 80027ca:	0013      	movs	r3, r2
 80027cc:	68fa      	ldr	r2, [r7, #12]
 80027ce:	4013      	ands	r3, r2
 80027d0:	d028      	beq.n	8002824 <HAL_DMA_IRQHandler+0x13c>
 80027d2:	68bb      	ldr	r3, [r7, #8]
 80027d4:	2208      	movs	r2, #8
 80027d6:	4013      	ands	r3, r2
 80027d8:	d024      	beq.n	8002824 <HAL_DMA_IRQHandler+0x13c>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	681a      	ldr	r2, [r3, #0]
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	210e      	movs	r1, #14
 80027e6:	438a      	bics	r2, r1
 80027e8:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80027f2:	2101      	movs	r1, #1
 80027f4:	4091      	lsls	r1, r2
 80027f6:	000a      	movs	r2, r1
 80027f8:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	2201      	movs	r2, #1
 80027fe:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	2221      	movs	r2, #33	; 0x21
 8002804:	2101      	movs	r1, #1
 8002806:	5499      	strb	r1, [r3, r2]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	2220      	movs	r2, #32
 800280c:	2100      	movs	r1, #0
 800280e:	5499      	strb	r1, [r3, r2]
    
    if(hdma->XferErrorCallback != NULL)
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002814:	2b00      	cmp	r3, #0
 8002816:	d005      	beq.n	8002824 <HAL_DMA_IRQHandler+0x13c>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800281c:	687a      	ldr	r2, [r7, #4]
 800281e:	0010      	movs	r0, r2
 8002820:	4798      	blx	r3
    }
   }
}  
 8002822:	e7ff      	b.n	8002824 <HAL_DMA_IRQHandler+0x13c>
 8002824:	46c0      	nop			; (mov r8, r8)
 8002826:	46bd      	mov	sp, r7
 8002828:	b004      	add	sp, #16
 800282a:	bd80      	pop	{r7, pc}

0800282c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800282c:	b580      	push	{r7, lr}
 800282e:	b082      	sub	sp, #8
 8002830:	af00      	add	r7, sp, #0
 8002832:	6078      	str	r0, [r7, #4]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	4a08      	ldr	r2, [pc, #32]	; (800285c <DMA_CalcBaseAndBitshift+0x30>)
 800283a:	4694      	mov	ip, r2
 800283c:	4463      	add	r3, ip
 800283e:	2114      	movs	r1, #20
 8002840:	0018      	movs	r0, r3
 8002842:	f7fd fc61 	bl	8000108 <__udivsi3>
 8002846:	0003      	movs	r3, r0
 8002848:	009a      	lsls	r2, r3, #2
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	4a03      	ldr	r2, [pc, #12]	; (8002860 <DMA_CalcBaseAndBitshift+0x34>)
 8002852:	63da      	str	r2, [r3, #60]	; 0x3c
#endif
}
 8002854:	46c0      	nop			; (mov r8, r8)
 8002856:	46bd      	mov	sp, r7
 8002858:	b002      	add	sp, #8
 800285a:	bd80      	pop	{r7, pc}
 800285c:	bffdfff8 	.word	0xbffdfff8
 8002860:	40020000 	.word	0x40020000

08002864 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
 8002864:	b580      	push	{r7, lr}
 8002866:	b086      	sub	sp, #24
 8002868:	af00      	add	r7, sp, #0
 800286a:	6078      	str	r0, [r7, #4]
 800286c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800286e:	2300      	movs	r3, #0
 8002870:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002872:	2300      	movs	r3, #0
 8002874:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 8002876:	2300      	movs	r3, #0
 8002878:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 800287a:	687a      	ldr	r2, [r7, #4]
 800287c:	2390      	movs	r3, #144	; 0x90
 800287e:	05db      	lsls	r3, r3, #23
 8002880:	429a      	cmp	r2, r3
 8002882:	d014      	beq.n	80028ae <HAL_GPIO_Init+0x4a>
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	4ac2      	ldr	r2, [pc, #776]	; (8002b90 <HAL_GPIO_Init+0x32c>)
 8002888:	4293      	cmp	r3, r2
 800288a:	d010      	beq.n	80028ae <HAL_GPIO_Init+0x4a>
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	4ac1      	ldr	r2, [pc, #772]	; (8002b94 <HAL_GPIO_Init+0x330>)
 8002890:	4293      	cmp	r3, r2
 8002892:	d00c      	beq.n	80028ae <HAL_GPIO_Init+0x4a>
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	4ac0      	ldr	r2, [pc, #768]	; (8002b98 <HAL_GPIO_Init+0x334>)
 8002898:	4293      	cmp	r3, r2
 800289a:	d008      	beq.n	80028ae <HAL_GPIO_Init+0x4a>
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	4abf      	ldr	r2, [pc, #764]	; (8002b9c <HAL_GPIO_Init+0x338>)
 80028a0:	4293      	cmp	r3, r2
 80028a2:	d004      	beq.n	80028ae <HAL_GPIO_Init+0x4a>
 80028a4:	4bbe      	ldr	r3, [pc, #760]	; (8002ba0 <HAL_GPIO_Init+0x33c>)
 80028a6:	21c1      	movs	r1, #193	; 0xc1
 80028a8:	0018      	movs	r0, r3
 80028aa:	f7fe f860 	bl	800096e <assert_failed>
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
 80028ae:	683b      	ldr	r3, [r7, #0]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	041b      	lsls	r3, r3, #16
 80028b4:	0c1b      	lsrs	r3, r3, #16
 80028b6:	d004      	beq.n	80028c2 <HAL_GPIO_Init+0x5e>
 80028b8:	683b      	ldr	r3, [r7, #0]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	0c1b      	lsrs	r3, r3, #16
 80028be:	041b      	lsls	r3, r3, #16
 80028c0:	d004      	beq.n	80028cc <HAL_GPIO_Init+0x68>
 80028c2:	4bb7      	ldr	r3, [pc, #732]	; (8002ba0 <HAL_GPIO_Init+0x33c>)
 80028c4:	21c2      	movs	r1, #194	; 0xc2
 80028c6:	0018      	movs	r0, r3
 80028c8:	f7fe f851 	bl	800096e <assert_failed>
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
 80028cc:	683b      	ldr	r3, [r7, #0]
 80028ce:	685b      	ldr	r3, [r3, #4]
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d036      	beq.n	8002942 <HAL_GPIO_Init+0xde>
 80028d4:	683b      	ldr	r3, [r7, #0]
 80028d6:	685b      	ldr	r3, [r3, #4]
 80028d8:	2b01      	cmp	r3, #1
 80028da:	d032      	beq.n	8002942 <HAL_GPIO_Init+0xde>
 80028dc:	683b      	ldr	r3, [r7, #0]
 80028de:	685b      	ldr	r3, [r3, #4]
 80028e0:	2b11      	cmp	r3, #17
 80028e2:	d02e      	beq.n	8002942 <HAL_GPIO_Init+0xde>
 80028e4:	683b      	ldr	r3, [r7, #0]
 80028e6:	685b      	ldr	r3, [r3, #4]
 80028e8:	2b02      	cmp	r3, #2
 80028ea:	d02a      	beq.n	8002942 <HAL_GPIO_Init+0xde>
 80028ec:	683b      	ldr	r3, [r7, #0]
 80028ee:	685b      	ldr	r3, [r3, #4]
 80028f0:	2b12      	cmp	r3, #18
 80028f2:	d026      	beq.n	8002942 <HAL_GPIO_Init+0xde>
 80028f4:	683b      	ldr	r3, [r7, #0]
 80028f6:	685b      	ldr	r3, [r3, #4]
 80028f8:	4aaa      	ldr	r2, [pc, #680]	; (8002ba4 <HAL_GPIO_Init+0x340>)
 80028fa:	4293      	cmp	r3, r2
 80028fc:	d021      	beq.n	8002942 <HAL_GPIO_Init+0xde>
 80028fe:	683b      	ldr	r3, [r7, #0]
 8002900:	685b      	ldr	r3, [r3, #4]
 8002902:	4aa9      	ldr	r2, [pc, #676]	; (8002ba8 <HAL_GPIO_Init+0x344>)
 8002904:	4293      	cmp	r3, r2
 8002906:	d01c      	beq.n	8002942 <HAL_GPIO_Init+0xde>
 8002908:	683b      	ldr	r3, [r7, #0]
 800290a:	685b      	ldr	r3, [r3, #4]
 800290c:	4aa7      	ldr	r2, [pc, #668]	; (8002bac <HAL_GPIO_Init+0x348>)
 800290e:	4293      	cmp	r3, r2
 8002910:	d017      	beq.n	8002942 <HAL_GPIO_Init+0xde>
 8002912:	683b      	ldr	r3, [r7, #0]
 8002914:	685b      	ldr	r3, [r3, #4]
 8002916:	4aa6      	ldr	r2, [pc, #664]	; (8002bb0 <HAL_GPIO_Init+0x34c>)
 8002918:	4293      	cmp	r3, r2
 800291a:	d012      	beq.n	8002942 <HAL_GPIO_Init+0xde>
 800291c:	683b      	ldr	r3, [r7, #0]
 800291e:	685b      	ldr	r3, [r3, #4]
 8002920:	4aa4      	ldr	r2, [pc, #656]	; (8002bb4 <HAL_GPIO_Init+0x350>)
 8002922:	4293      	cmp	r3, r2
 8002924:	d00d      	beq.n	8002942 <HAL_GPIO_Init+0xde>
 8002926:	683b      	ldr	r3, [r7, #0]
 8002928:	685b      	ldr	r3, [r3, #4]
 800292a:	4aa3      	ldr	r2, [pc, #652]	; (8002bb8 <HAL_GPIO_Init+0x354>)
 800292c:	4293      	cmp	r3, r2
 800292e:	d008      	beq.n	8002942 <HAL_GPIO_Init+0xde>
 8002930:	683b      	ldr	r3, [r7, #0]
 8002932:	685b      	ldr	r3, [r3, #4]
 8002934:	2b03      	cmp	r3, #3
 8002936:	d004      	beq.n	8002942 <HAL_GPIO_Init+0xde>
 8002938:	4b99      	ldr	r3, [pc, #612]	; (8002ba0 <HAL_GPIO_Init+0x33c>)
 800293a:	21c3      	movs	r1, #195	; 0xc3
 800293c:	0018      	movs	r0, r3
 800293e:	f7fe f816 	bl	800096e <assert_failed>
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull)); 
 8002942:	683b      	ldr	r3, [r7, #0]
 8002944:	689b      	ldr	r3, [r3, #8]
 8002946:	2b00      	cmp	r3, #0
 8002948:	d100      	bne.n	800294c <HAL_GPIO_Init+0xe8>
 800294a:	e1a2      	b.n	8002c92 <HAL_GPIO_Init+0x42e>
 800294c:	683b      	ldr	r3, [r7, #0]
 800294e:	689b      	ldr	r3, [r3, #8]
 8002950:	2b01      	cmp	r3, #1
 8002952:	d100      	bne.n	8002956 <HAL_GPIO_Init+0xf2>
 8002954:	e19d      	b.n	8002c92 <HAL_GPIO_Init+0x42e>
 8002956:	683b      	ldr	r3, [r7, #0]
 8002958:	689b      	ldr	r3, [r3, #8]
 800295a:	2b02      	cmp	r3, #2
 800295c:	d100      	bne.n	8002960 <HAL_GPIO_Init+0xfc>
 800295e:	e198      	b.n	8002c92 <HAL_GPIO_Init+0x42e>
 8002960:	4b8f      	ldr	r3, [pc, #572]	; (8002ba0 <HAL_GPIO_Init+0x33c>)
 8002962:	21c4      	movs	r1, #196	; 0xc4
 8002964:	0018      	movs	r0, r3
 8002966:	f7fe f802 	bl	800096e <assert_failed>

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != RESET)
 800296a:	e192      	b.n	8002c92 <HAL_GPIO_Init+0x42e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 800296c:	683b      	ldr	r3, [r7, #0]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	2101      	movs	r1, #1
 8002972:	697a      	ldr	r2, [r7, #20]
 8002974:	4091      	lsls	r1, r2
 8002976:	000a      	movs	r2, r1
 8002978:	4013      	ands	r3, r2
 800297a:	60fb      	str	r3, [r7, #12]
    
    if(iocurrent)
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	2b00      	cmp	r3, #0
 8002980:	d100      	bne.n	8002984 <HAL_GPIO_Init+0x120>
 8002982:	e183      	b.n	8002c8c <HAL_GPIO_Init+0x428>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD)) 
 8002984:	683b      	ldr	r3, [r7, #0]
 8002986:	685b      	ldr	r3, [r3, #4]
 8002988:	2b02      	cmp	r3, #2
 800298a:	d003      	beq.n	8002994 <HAL_GPIO_Init+0x130>
 800298c:	683b      	ldr	r3, [r7, #0]
 800298e:	685b      	ldr	r3, [r3, #4]
 8002990:	2b12      	cmp	r3, #18
 8002992:	d13a      	bne.n	8002a0a <HAL_GPIO_Init+0x1a6>
      {
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
 8002994:	687a      	ldr	r2, [r7, #4]
 8002996:	2390      	movs	r3, #144	; 0x90
 8002998:	05db      	lsls	r3, r3, #23
 800299a:	429a      	cmp	r2, r3
 800299c:	d008      	beq.n	80029b0 <HAL_GPIO_Init+0x14c>
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	4a7b      	ldr	r2, [pc, #492]	; (8002b90 <HAL_GPIO_Init+0x32c>)
 80029a2:	4293      	cmp	r3, r2
 80029a4:	d004      	beq.n	80029b0 <HAL_GPIO_Init+0x14c>
 80029a6:	4b7e      	ldr	r3, [pc, #504]	; (8002ba0 <HAL_GPIO_Init+0x33c>)
 80029a8:	21d3      	movs	r1, #211	; 0xd3
 80029aa:	0018      	movs	r0, r3
 80029ac:	f7fd ffdf 	bl	800096e <assert_failed>
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
 80029b0:	683b      	ldr	r3, [r7, #0]
 80029b2:	691b      	ldr	r3, [r3, #16]
 80029b4:	2b07      	cmp	r3, #7
 80029b6:	d904      	bls.n	80029c2 <HAL_GPIO_Init+0x15e>
 80029b8:	4b79      	ldr	r3, [pc, #484]	; (8002ba0 <HAL_GPIO_Init+0x33c>)
 80029ba:	21d4      	movs	r1, #212	; 0xd4
 80029bc:	0018      	movs	r0, r3
 80029be:	f7fd ffd6 	bl	800096e <assert_failed>
        
        /* Configure Alternate function mapped with the current IO */ 
        temp = GPIOx->AFR[position >> 3];
 80029c2:	697b      	ldr	r3, [r7, #20]
 80029c4:	08da      	lsrs	r2, r3, #3
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	3208      	adds	r2, #8
 80029ca:	0092      	lsls	r2, r2, #2
 80029cc:	58d3      	ldr	r3, [r2, r3]
 80029ce:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;      
 80029d0:	697b      	ldr	r3, [r7, #20]
 80029d2:	2207      	movs	r2, #7
 80029d4:	4013      	ands	r3, r2
 80029d6:	009b      	lsls	r3, r3, #2
 80029d8:	220f      	movs	r2, #15
 80029da:	409a      	lsls	r2, r3
 80029dc:	0013      	movs	r3, r2
 80029de:	43da      	mvns	r2, r3
 80029e0:	693b      	ldr	r3, [r7, #16]
 80029e2:	4013      	ands	r3, r2
 80029e4:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));       
 80029e6:	683b      	ldr	r3, [r7, #0]
 80029e8:	691a      	ldr	r2, [r3, #16]
 80029ea:	697b      	ldr	r3, [r7, #20]
 80029ec:	2107      	movs	r1, #7
 80029ee:	400b      	ands	r3, r1
 80029f0:	009b      	lsls	r3, r3, #2
 80029f2:	409a      	lsls	r2, r3
 80029f4:	0013      	movs	r3, r2
 80029f6:	693a      	ldr	r2, [r7, #16]
 80029f8:	4313      	orrs	r3, r2
 80029fa:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80029fc:	697b      	ldr	r3, [r7, #20]
 80029fe:	08da      	lsrs	r2, r3, #3
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	3208      	adds	r2, #8
 8002a04:	0092      	lsls	r2, r2, #2
 8002a06:	6939      	ldr	r1, [r7, #16]
 8002a08:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2U));   
 8002a10:	697b      	ldr	r3, [r7, #20]
 8002a12:	005b      	lsls	r3, r3, #1
 8002a14:	2203      	movs	r2, #3
 8002a16:	409a      	lsls	r2, r3
 8002a18:	0013      	movs	r3, r2
 8002a1a:	43da      	mvns	r2, r3
 8002a1c:	693b      	ldr	r3, [r7, #16]
 8002a1e:	4013      	ands	r3, r2
 8002a20:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002a22:	683b      	ldr	r3, [r7, #0]
 8002a24:	685b      	ldr	r3, [r3, #4]
 8002a26:	2203      	movs	r2, #3
 8002a28:	401a      	ands	r2, r3
 8002a2a:	697b      	ldr	r3, [r7, #20]
 8002a2c:	005b      	lsls	r3, r3, #1
 8002a2e:	409a      	lsls	r2, r3
 8002a30:	0013      	movs	r3, r2
 8002a32:	693a      	ldr	r2, [r7, #16]
 8002a34:	4313      	orrs	r3, r2
 8002a36:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	693a      	ldr	r2, [r7, #16]
 8002a3c:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002a3e:	683b      	ldr	r3, [r7, #0]
 8002a40:	685b      	ldr	r3, [r3, #4]
 8002a42:	2b01      	cmp	r3, #1
 8002a44:	d00b      	beq.n	8002a5e <HAL_GPIO_Init+0x1fa>
 8002a46:	683b      	ldr	r3, [r7, #0]
 8002a48:	685b      	ldr	r3, [r3, #4]
 8002a4a:	2b02      	cmp	r3, #2
 8002a4c:	d007      	beq.n	8002a5e <HAL_GPIO_Init+0x1fa>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002a4e:	683b      	ldr	r3, [r7, #0]
 8002a50:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002a52:	2b11      	cmp	r3, #17
 8002a54:	d003      	beq.n	8002a5e <HAL_GPIO_Init+0x1fa>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002a56:	683b      	ldr	r3, [r7, #0]
 8002a58:	685b      	ldr	r3, [r3, #4]
 8002a5a:	2b12      	cmp	r3, #18
 8002a5c:	d141      	bne.n	8002ae2 <HAL_GPIO_Init+0x27e>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 8002a5e:	683b      	ldr	r3, [r7, #0]
 8002a60:	68db      	ldr	r3, [r3, #12]
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d00c      	beq.n	8002a80 <HAL_GPIO_Init+0x21c>
 8002a66:	683b      	ldr	r3, [r7, #0]
 8002a68:	68db      	ldr	r3, [r3, #12]
 8002a6a:	2b01      	cmp	r3, #1
 8002a6c:	d008      	beq.n	8002a80 <HAL_GPIO_Init+0x21c>
 8002a6e:	683b      	ldr	r3, [r7, #0]
 8002a70:	68db      	ldr	r3, [r3, #12]
 8002a72:	2b03      	cmp	r3, #3
 8002a74:	d004      	beq.n	8002a80 <HAL_GPIO_Init+0x21c>
 8002a76:	4b4a      	ldr	r3, [pc, #296]	; (8002ba0 <HAL_GPIO_Init+0x33c>)
 8002a78:	21e8      	movs	r1, #232	; 0xe8
 8002a7a:	0018      	movs	r0, r3
 8002a7c:	f7fd ff77 	bl	800096e <assert_failed>
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	689b      	ldr	r3, [r3, #8]
 8002a84:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002a86:	697b      	ldr	r3, [r7, #20]
 8002a88:	005b      	lsls	r3, r3, #1
 8002a8a:	2203      	movs	r2, #3
 8002a8c:	409a      	lsls	r2, r3
 8002a8e:	0013      	movs	r3, r2
 8002a90:	43da      	mvns	r2, r3
 8002a92:	693b      	ldr	r3, [r7, #16]
 8002a94:	4013      	ands	r3, r2
 8002a96:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, GPIO_Init->Speed << (position * 2U));
 8002a98:	683b      	ldr	r3, [r7, #0]
 8002a9a:	68da      	ldr	r2, [r3, #12]
 8002a9c:	697b      	ldr	r3, [r7, #20]
 8002a9e:	005b      	lsls	r3, r3, #1
 8002aa0:	409a      	lsls	r2, r3
 8002aa2:	0013      	movs	r3, r2
 8002aa4:	693a      	ldr	r2, [r7, #16]
 8002aa6:	4313      	orrs	r3, r2
 8002aa8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	693a      	ldr	r2, [r7, #16]
 8002aae:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	685b      	ldr	r3, [r3, #4]
 8002ab4:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 8002ab6:	2201      	movs	r2, #1
 8002ab8:	697b      	ldr	r3, [r7, #20]
 8002aba:	409a      	lsls	r2, r3
 8002abc:	0013      	movs	r3, r2
 8002abe:	43da      	mvns	r2, r3
 8002ac0:	693b      	ldr	r3, [r7, #16]
 8002ac2:	4013      	ands	r3, r2
 8002ac4:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, ((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002ac6:	683b      	ldr	r3, [r7, #0]
 8002ac8:	685b      	ldr	r3, [r3, #4]
 8002aca:	091b      	lsrs	r3, r3, #4
 8002acc:	2201      	movs	r2, #1
 8002ace:	401a      	ands	r2, r3
 8002ad0:	697b      	ldr	r3, [r7, #20]
 8002ad2:	409a      	lsls	r2, r3
 8002ad4:	0013      	movs	r3, r2
 8002ad6:	693a      	ldr	r2, [r7, #16]
 8002ad8:	4313      	orrs	r3, r2
 8002ada:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	693a      	ldr	r2, [r7, #16]
 8002ae0:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	68db      	ldr	r3, [r3, #12]
 8002ae6:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002ae8:	697b      	ldr	r3, [r7, #20]
 8002aea:	005b      	lsls	r3, r3, #1
 8002aec:	2203      	movs	r2, #3
 8002aee:	409a      	lsls	r2, r3
 8002af0:	0013      	movs	r3, r2
 8002af2:	43da      	mvns	r2, r3
 8002af4:	693b      	ldr	r3, [r7, #16]
 8002af6:	4013      	ands	r3, r2
 8002af8:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Pull) << (position * 2U));
 8002afa:	683b      	ldr	r3, [r7, #0]
 8002afc:	689a      	ldr	r2, [r3, #8]
 8002afe:	697b      	ldr	r3, [r7, #20]
 8002b00:	005b      	lsls	r3, r3, #1
 8002b02:	409a      	lsls	r2, r3
 8002b04:	0013      	movs	r3, r2
 8002b06:	693a      	ldr	r2, [r7, #16]
 8002b08:	4313      	orrs	r3, r2
 8002b0a:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	693a      	ldr	r2, [r7, #16]
 8002b10:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 8002b12:	683b      	ldr	r3, [r7, #0]
 8002b14:	685a      	ldr	r2, [r3, #4]
 8002b16:	2380      	movs	r3, #128	; 0x80
 8002b18:	055b      	lsls	r3, r3, #21
 8002b1a:	4013      	ands	r3, r2
 8002b1c:	d100      	bne.n	8002b20 <HAL_GPIO_Init+0x2bc>
 8002b1e:	e0b5      	b.n	8002c8c <HAL_GPIO_Init+0x428>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002b20:	4b26      	ldr	r3, [pc, #152]	; (8002bbc <HAL_GPIO_Init+0x358>)
 8002b22:	699a      	ldr	r2, [r3, #24]
 8002b24:	4b25      	ldr	r3, [pc, #148]	; (8002bbc <HAL_GPIO_Init+0x358>)
 8002b26:	2101      	movs	r1, #1
 8002b28:	430a      	orrs	r2, r1
 8002b2a:	619a      	str	r2, [r3, #24]
 8002b2c:	4b23      	ldr	r3, [pc, #140]	; (8002bbc <HAL_GPIO_Init+0x358>)
 8002b2e:	699b      	ldr	r3, [r3, #24]
 8002b30:	2201      	movs	r2, #1
 8002b32:	4013      	ands	r3, r2
 8002b34:	60bb      	str	r3, [r7, #8]
 8002b36:	68bb      	ldr	r3, [r7, #8]
  
        temp = SYSCFG->EXTICR[position >> 2];
 8002b38:	4a21      	ldr	r2, [pc, #132]	; (8002bc0 <HAL_GPIO_Init+0x35c>)
 8002b3a:	697b      	ldr	r3, [r7, #20]
 8002b3c:	089b      	lsrs	r3, r3, #2
 8002b3e:	3302      	adds	r3, #2
 8002b40:	009b      	lsls	r3, r3, #2
 8002b42:	589b      	ldr	r3, [r3, r2]
 8002b44:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8002b46:	697b      	ldr	r3, [r7, #20]
 8002b48:	2203      	movs	r2, #3
 8002b4a:	4013      	ands	r3, r2
 8002b4c:	009b      	lsls	r3, r3, #2
 8002b4e:	220f      	movs	r2, #15
 8002b50:	409a      	lsls	r2, r3
 8002b52:	0013      	movs	r3, r2
 8002b54:	43da      	mvns	r2, r3
 8002b56:	693b      	ldr	r3, [r7, #16]
 8002b58:	4013      	ands	r3, r2
 8002b5a:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002b5c:	687a      	ldr	r2, [r7, #4]
 8002b5e:	2390      	movs	r3, #144	; 0x90
 8002b60:	05db      	lsls	r3, r3, #23
 8002b62:	429a      	cmp	r2, r3
 8002b64:	d02e      	beq.n	8002bc4 <HAL_GPIO_Init+0x360>
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	4a09      	ldr	r2, [pc, #36]	; (8002b90 <HAL_GPIO_Init+0x32c>)
 8002b6a:	4293      	cmp	r3, r2
 8002b6c:	d00d      	beq.n	8002b8a <HAL_GPIO_Init+0x326>
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	4a08      	ldr	r2, [pc, #32]	; (8002b94 <HAL_GPIO_Init+0x330>)
 8002b72:	4293      	cmp	r3, r2
 8002b74:	d007      	beq.n	8002b86 <HAL_GPIO_Init+0x322>
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	4a07      	ldr	r2, [pc, #28]	; (8002b98 <HAL_GPIO_Init+0x334>)
 8002b7a:	4293      	cmp	r3, r2
 8002b7c:	d101      	bne.n	8002b82 <HAL_GPIO_Init+0x31e>
 8002b7e:	2303      	movs	r3, #3
 8002b80:	e021      	b.n	8002bc6 <HAL_GPIO_Init+0x362>
 8002b82:	2305      	movs	r3, #5
 8002b84:	e01f      	b.n	8002bc6 <HAL_GPIO_Init+0x362>
 8002b86:	2302      	movs	r3, #2
 8002b88:	e01d      	b.n	8002bc6 <HAL_GPIO_Init+0x362>
 8002b8a:	2301      	movs	r3, #1
 8002b8c:	e01b      	b.n	8002bc6 <HAL_GPIO_Init+0x362>
 8002b8e:	46c0      	nop			; (mov r8, r8)
 8002b90:	48000400 	.word	0x48000400
 8002b94:	48000800 	.word	0x48000800
 8002b98:	48000c00 	.word	0x48000c00
 8002b9c:	48001400 	.word	0x48001400
 8002ba0:	08006a4c 	.word	0x08006a4c
 8002ba4:	10110000 	.word	0x10110000
 8002ba8:	10210000 	.word	0x10210000
 8002bac:	10310000 	.word	0x10310000
 8002bb0:	10120000 	.word	0x10120000
 8002bb4:	10220000 	.word	0x10220000
 8002bb8:	10320000 	.word	0x10320000
 8002bbc:	40021000 	.word	0x40021000
 8002bc0:	40010000 	.word	0x40010000
 8002bc4:	2300      	movs	r3, #0
 8002bc6:	697a      	ldr	r2, [r7, #20]
 8002bc8:	2103      	movs	r1, #3
 8002bca:	400a      	ands	r2, r1
 8002bcc:	0092      	lsls	r2, r2, #2
 8002bce:	4093      	lsls	r3, r2
 8002bd0:	693a      	ldr	r2, [r7, #16]
 8002bd2:	4313      	orrs	r3, r2
 8002bd4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2] = temp;
 8002bd6:	4934      	ldr	r1, [pc, #208]	; (8002ca8 <HAL_GPIO_Init+0x444>)
 8002bd8:	697b      	ldr	r3, [r7, #20]
 8002bda:	089b      	lsrs	r3, r3, #2
 8002bdc:	3302      	adds	r3, #2
 8002bde:	009b      	lsls	r3, r3, #2
 8002be0:	693a      	ldr	r2, [r7, #16]
 8002be2:	505a      	str	r2, [r3, r1]
                  
        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002be4:	4b31      	ldr	r3, [pc, #196]	; (8002cac <HAL_GPIO_Init+0x448>)
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	43da      	mvns	r2, r3
 8002bee:	693b      	ldr	r3, [r7, #16]
 8002bf0:	4013      	ands	r3, r2
 8002bf2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002bf4:	683b      	ldr	r3, [r7, #0]
 8002bf6:	685a      	ldr	r2, [r3, #4]
 8002bf8:	2380      	movs	r3, #128	; 0x80
 8002bfa:	025b      	lsls	r3, r3, #9
 8002bfc:	4013      	ands	r3, r2
 8002bfe:	d003      	beq.n	8002c08 <HAL_GPIO_Init+0x3a4>
        {
          SET_BIT(temp, iocurrent); 
 8002c00:	693a      	ldr	r2, [r7, #16]
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	4313      	orrs	r3, r2
 8002c06:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8002c08:	4b28      	ldr	r3, [pc, #160]	; (8002cac <HAL_GPIO_Init+0x448>)
 8002c0a:	693a      	ldr	r2, [r7, #16]
 8002c0c:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8002c0e:	4b27      	ldr	r3, [pc, #156]	; (8002cac <HAL_GPIO_Init+0x448>)
 8002c10:	685b      	ldr	r3, [r3, #4]
 8002c12:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);      
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	43da      	mvns	r2, r3
 8002c18:	693b      	ldr	r3, [r7, #16]
 8002c1a:	4013      	ands	r3, r2
 8002c1c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002c1e:	683b      	ldr	r3, [r7, #0]
 8002c20:	685a      	ldr	r2, [r3, #4]
 8002c22:	2380      	movs	r3, #128	; 0x80
 8002c24:	029b      	lsls	r3, r3, #10
 8002c26:	4013      	ands	r3, r2
 8002c28:	d003      	beq.n	8002c32 <HAL_GPIO_Init+0x3ce>
        { 
          SET_BIT(temp, iocurrent); 
 8002c2a:	693a      	ldr	r2, [r7, #16]
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	4313      	orrs	r3, r2
 8002c30:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8002c32:	4b1e      	ldr	r3, [pc, #120]	; (8002cac <HAL_GPIO_Init+0x448>)
 8002c34:	693a      	ldr	r2, [r7, #16]
 8002c36:	605a      	str	r2, [r3, #4]
  
        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002c38:	4b1c      	ldr	r3, [pc, #112]	; (8002cac <HAL_GPIO_Init+0x448>)
 8002c3a:	689b      	ldr	r3, [r3, #8]
 8002c3c:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	43da      	mvns	r2, r3
 8002c42:	693b      	ldr	r3, [r7, #16]
 8002c44:	4013      	ands	r3, r2
 8002c46:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002c48:	683b      	ldr	r3, [r7, #0]
 8002c4a:	685a      	ldr	r2, [r3, #4]
 8002c4c:	2380      	movs	r3, #128	; 0x80
 8002c4e:	035b      	lsls	r3, r3, #13
 8002c50:	4013      	ands	r3, r2
 8002c52:	d003      	beq.n	8002c5c <HAL_GPIO_Init+0x3f8>
        {
          SET_BIT(temp, iocurrent); 
 8002c54:	693a      	ldr	r2, [r7, #16]
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	4313      	orrs	r3, r2
 8002c5a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002c5c:	4b13      	ldr	r3, [pc, #76]	; (8002cac <HAL_GPIO_Init+0x448>)
 8002c5e:	693a      	ldr	r2, [r7, #16]
 8002c60:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8002c62:	4b12      	ldr	r3, [pc, #72]	; (8002cac <HAL_GPIO_Init+0x448>)
 8002c64:	68db      	ldr	r3, [r3, #12]
 8002c66:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	43da      	mvns	r2, r3
 8002c6c:	693b      	ldr	r3, [r7, #16]
 8002c6e:	4013      	ands	r3, r2
 8002c70:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002c72:	683b      	ldr	r3, [r7, #0]
 8002c74:	685a      	ldr	r2, [r3, #4]
 8002c76:	2380      	movs	r3, #128	; 0x80
 8002c78:	039b      	lsls	r3, r3, #14
 8002c7a:	4013      	ands	r3, r2
 8002c7c:	d003      	beq.n	8002c86 <HAL_GPIO_Init+0x422>
        {
          SET_BIT(temp, iocurrent); 
 8002c7e:	693a      	ldr	r2, [r7, #16]
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	4313      	orrs	r3, r2
 8002c84:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8002c86:	4b09      	ldr	r3, [pc, #36]	; (8002cac <HAL_GPIO_Init+0x448>)
 8002c88:	693a      	ldr	r2, [r7, #16]
 8002c8a:	60da      	str	r2, [r3, #12]
      }
    }
    
    position++;
 8002c8c:	697b      	ldr	r3, [r7, #20]
 8002c8e:	3301      	adds	r3, #1
 8002c90:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != RESET)
 8002c92:	683b      	ldr	r3, [r7, #0]
 8002c94:	681a      	ldr	r2, [r3, #0]
 8002c96:	697b      	ldr	r3, [r7, #20]
 8002c98:	40da      	lsrs	r2, r3
 8002c9a:	1e13      	subs	r3, r2, #0
 8002c9c:	d000      	beq.n	8002ca0 <HAL_GPIO_Init+0x43c>
 8002c9e:	e665      	b.n	800296c <HAL_GPIO_Init+0x108>
  } 
}
 8002ca0:	46c0      	nop			; (mov r8, r8)
 8002ca2:	46bd      	mov	sp, r7
 8002ca4:	b006      	add	sp, #24
 8002ca6:	bd80      	pop	{r7, pc}
 8002ca8:	40010000 	.word	0x40010000
 8002cac:	40010400 	.word	0x40010400

08002cb0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002cb0:	b580      	push	{r7, lr}
 8002cb2:	b084      	sub	sp, #16
 8002cb4:	af00      	add	r7, sp, #0
 8002cb6:	6078      	str	r0, [r7, #4]
 8002cb8:	000a      	movs	r2, r1
 8002cba:	1cbb      	adds	r3, r7, #2
 8002cbc:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 8002cbe:	1cbb      	adds	r3, r7, #2
 8002cc0:	881b      	ldrh	r3, [r3, #0]
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d004      	beq.n	8002cd0 <HAL_GPIO_ReadPin+0x20>
 8002cc6:	1cbb      	adds	r3, r7, #2
 8002cc8:	881b      	ldrh	r3, [r3, #0]
 8002cca:	0c1b      	lsrs	r3, r3, #16
 8002ccc:	041b      	lsls	r3, r3, #16
 8002cce:	d007      	beq.n	8002ce0 <HAL_GPIO_ReadPin+0x30>
 8002cd0:	238e      	movs	r3, #142	; 0x8e
 8002cd2:	33ff      	adds	r3, #255	; 0xff
 8002cd4:	001a      	movs	r2, r3
 8002cd6:	4b0d      	ldr	r3, [pc, #52]	; (8002d0c <HAL_GPIO_ReadPin+0x5c>)
 8002cd8:	0011      	movs	r1, r2
 8002cda:	0018      	movs	r0, r3
 8002cdc:	f7fd fe47 	bl	800096e <assert_failed>

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	691b      	ldr	r3, [r3, #16]
 8002ce4:	1cba      	adds	r2, r7, #2
 8002ce6:	8812      	ldrh	r2, [r2, #0]
 8002ce8:	4013      	ands	r3, r2
 8002cea:	d004      	beq.n	8002cf6 <HAL_GPIO_ReadPin+0x46>
  {
    bitstatus = GPIO_PIN_SET;
 8002cec:	230f      	movs	r3, #15
 8002cee:	18fb      	adds	r3, r7, r3
 8002cf0:	2201      	movs	r2, #1
 8002cf2:	701a      	strb	r2, [r3, #0]
 8002cf4:	e003      	b.n	8002cfe <HAL_GPIO_ReadPin+0x4e>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002cf6:	230f      	movs	r3, #15
 8002cf8:	18fb      	adds	r3, r7, r3
 8002cfa:	2200      	movs	r2, #0
 8002cfc:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8002cfe:	230f      	movs	r3, #15
 8002d00:	18fb      	adds	r3, r7, r3
 8002d02:	781b      	ldrb	r3, [r3, #0]
  }
 8002d04:	0018      	movs	r0, r3
 8002d06:	46bd      	mov	sp, r7
 8002d08:	b004      	add	sp, #16
 8002d0a:	bd80      	pop	{r7, pc}
 8002d0c:	08006a4c 	.word	0x08006a4c

08002d10 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002d10:	b580      	push	{r7, lr}
 8002d12:	b082      	sub	sp, #8
 8002d14:	af00      	add	r7, sp, #0
 8002d16:	6078      	str	r0, [r7, #4]
 8002d18:	0008      	movs	r0, r1
 8002d1a:	0011      	movs	r1, r2
 8002d1c:	1cbb      	adds	r3, r7, #2
 8002d1e:	1c02      	adds	r2, r0, #0
 8002d20:	801a      	strh	r2, [r3, #0]
 8002d22:	1c7b      	adds	r3, r7, #1
 8002d24:	1c0a      	adds	r2, r1, #0
 8002d26:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 8002d28:	1cbb      	adds	r3, r7, #2
 8002d2a:	881b      	ldrh	r3, [r3, #0]
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d004      	beq.n	8002d3a <HAL_GPIO_WritePin+0x2a>
 8002d30:	1cbb      	adds	r3, r7, #2
 8002d32:	881b      	ldrh	r3, [r3, #0]
 8002d34:	0c1b      	lsrs	r3, r3, #16
 8002d36:	041b      	lsls	r3, r3, #16
 8002d38:	d006      	beq.n	8002d48 <HAL_GPIO_WritePin+0x38>
 8002d3a:	23d6      	movs	r3, #214	; 0xd6
 8002d3c:	005a      	lsls	r2, r3, #1
 8002d3e:	4b13      	ldr	r3, [pc, #76]	; (8002d8c <HAL_GPIO_WritePin+0x7c>)
 8002d40:	0011      	movs	r1, r2
 8002d42:	0018      	movs	r0, r3
 8002d44:	f7fd fe13 	bl	800096e <assert_failed>
  assert_param(IS_GPIO_PIN_ACTION(PinState));
 8002d48:	1c7b      	adds	r3, r7, #1
 8002d4a:	781b      	ldrb	r3, [r3, #0]
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d00b      	beq.n	8002d68 <HAL_GPIO_WritePin+0x58>
 8002d50:	1c7b      	adds	r3, r7, #1
 8002d52:	781b      	ldrb	r3, [r3, #0]
 8002d54:	2b01      	cmp	r3, #1
 8002d56:	d007      	beq.n	8002d68 <HAL_GPIO_WritePin+0x58>
 8002d58:	23ae      	movs	r3, #174	; 0xae
 8002d5a:	33ff      	adds	r3, #255	; 0xff
 8002d5c:	001a      	movs	r2, r3
 8002d5e:	4b0b      	ldr	r3, [pc, #44]	; (8002d8c <HAL_GPIO_WritePin+0x7c>)
 8002d60:	0011      	movs	r1, r2
 8002d62:	0018      	movs	r0, r3
 8002d64:	f7fd fe03 	bl	800096e <assert_failed>

  if (PinState != GPIO_PIN_RESET)
 8002d68:	1c7b      	adds	r3, r7, #1
 8002d6a:	781b      	ldrb	r3, [r3, #0]
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d004      	beq.n	8002d7a <HAL_GPIO_WritePin+0x6a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002d70:	1cbb      	adds	r3, r7, #2
 8002d72:	881a      	ldrh	r2, [r3, #0]
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002d78:	e003      	b.n	8002d82 <HAL_GPIO_WritePin+0x72>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002d7a:	1cbb      	adds	r3, r7, #2
 8002d7c:	881a      	ldrh	r2, [r3, #0]
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002d82:	46c0      	nop			; (mov r8, r8)
 8002d84:	46bd      	mov	sp, r7
 8002d86:	b002      	add	sp, #8
 8002d88:	bd80      	pop	{r7, pc}
 8002d8a:	46c0      	nop			; (mov r8, r8)
 8002d8c:	08006a4c 	.word	0x08006a4c

08002d90 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F0 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002d90:	b580      	push	{r7, lr}
 8002d92:	b082      	sub	sp, #8
 8002d94:	af00      	add	r7, sp, #0
 8002d96:	6078      	str	r0, [r7, #4]
 8002d98:	000a      	movs	r2, r1
 8002d9a:	1cbb      	adds	r3, r7, #2
 8002d9c:	801a      	strh	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 8002d9e:	1cbb      	adds	r3, r7, #2
 8002da0:	881b      	ldrh	r3, [r3, #0]
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d004      	beq.n	8002db0 <HAL_GPIO_TogglePin+0x20>
 8002da6:	1cbb      	adds	r3, r7, #2
 8002da8:	881b      	ldrh	r3, [r3, #0]
 8002daa:	0c1b      	lsrs	r3, r3, #16
 8002dac:	041b      	lsls	r3, r3, #16
 8002dae:	d006      	beq.n	8002dbe <HAL_GPIO_TogglePin+0x2e>
 8002db0:	23e1      	movs	r3, #225	; 0xe1
 8002db2:	005a      	lsls	r2, r3, #1
 8002db4:	4b07      	ldr	r3, [pc, #28]	; (8002dd4 <HAL_GPIO_TogglePin+0x44>)
 8002db6:	0011      	movs	r1, r2
 8002db8:	0018      	movs	r0, r3
 8002dba:	f7fd fdd8 	bl	800096e <assert_failed>

  GPIOx->ODR ^= GPIO_Pin;
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	695a      	ldr	r2, [r3, #20]
 8002dc2:	1cbb      	adds	r3, r7, #2
 8002dc4:	881b      	ldrh	r3, [r3, #0]
 8002dc6:	405a      	eors	r2, r3
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	615a      	str	r2, [r3, #20]
}
 8002dcc:	46c0      	nop			; (mov r8, r8)
 8002dce:	46bd      	mov	sp, r7
 8002dd0:	b002      	add	sp, #8
 8002dd2:	bd80      	pop	{r7, pc}
 8002dd4:	08006a4c 	.word	0x08006a4c

08002dd8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002dd8:	b580      	push	{r7, lr}
 8002dda:	b082      	sub	sp, #8
 8002ddc:	af00      	add	r7, sp, #0
 8002dde:	0002      	movs	r2, r0
 8002de0:	1dbb      	adds	r3, r7, #6
 8002de2:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET) 
 8002de4:	4b09      	ldr	r3, [pc, #36]	; (8002e0c <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8002de6:	695b      	ldr	r3, [r3, #20]
 8002de8:	1dba      	adds	r2, r7, #6
 8002dea:	8812      	ldrh	r2, [r2, #0]
 8002dec:	4013      	ands	r3, r2
 8002dee:	d008      	beq.n	8002e02 <HAL_GPIO_EXTI_IRQHandler+0x2a>
  { 
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002df0:	4b06      	ldr	r3, [pc, #24]	; (8002e0c <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8002df2:	1dba      	adds	r2, r7, #6
 8002df4:	8812      	ldrh	r2, [r2, #0]
 8002df6:	615a      	str	r2, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002df8:	1dbb      	adds	r3, r7, #6
 8002dfa:	881b      	ldrh	r3, [r3, #0]
 8002dfc:	0018      	movs	r0, r3
 8002dfe:	f7fd fd91 	bl	8000924 <HAL_GPIO_EXTI_Callback>
  }
}
 8002e02:	46c0      	nop			; (mov r8, r8)
 8002e04:	46bd      	mov	sp, r7
 8002e06:	b002      	add	sp, #8
 8002e08:	bd80      	pop	{r7, pc}
 8002e0a:	46c0      	nop			; (mov r8, r8)
 8002e0c:	40010400 	.word	0x40010400

08002e10 <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 8002e10:	b580      	push	{r7, lr}
 8002e12:	b084      	sub	sp, #16
 8002e14:	af00      	add	r7, sp, #0
 8002e16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if(hiwdg == NULL)
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d101      	bne.n	8002e22 <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
 8002e1e:	2301      	movs	r3, #1
 8002e20:	e075      	b.n	8002f0e <HAL_IWDG_Init+0xfe>
  }

  /* Check the parameters */
  assert_param(IS_IWDG_ALL_INSTANCE(hiwdg->Instance));
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	4a3c      	ldr	r2, [pc, #240]	; (8002f18 <HAL_IWDG_Init+0x108>)
 8002e28:	4293      	cmp	r3, r2
 8002e2a:	d004      	beq.n	8002e36 <HAL_IWDG_Init+0x26>
 8002e2c:	4b3b      	ldr	r3, [pc, #236]	; (8002f1c <HAL_IWDG_Init+0x10c>)
 8002e2e:	21b5      	movs	r1, #181	; 0xb5
 8002e30:	0018      	movs	r0, r3
 8002e32:	f7fd fd9c 	bl	800096e <assert_failed>
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	685b      	ldr	r3, [r3, #4]
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d01c      	beq.n	8002e78 <HAL_IWDG_Init+0x68>
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	685b      	ldr	r3, [r3, #4]
 8002e42:	2b01      	cmp	r3, #1
 8002e44:	d018      	beq.n	8002e78 <HAL_IWDG_Init+0x68>
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	685b      	ldr	r3, [r3, #4]
 8002e4a:	2b02      	cmp	r3, #2
 8002e4c:	d014      	beq.n	8002e78 <HAL_IWDG_Init+0x68>
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	685b      	ldr	r3, [r3, #4]
 8002e52:	2b03      	cmp	r3, #3
 8002e54:	d010      	beq.n	8002e78 <HAL_IWDG_Init+0x68>
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	685b      	ldr	r3, [r3, #4]
 8002e5a:	2b04      	cmp	r3, #4
 8002e5c:	d00c      	beq.n	8002e78 <HAL_IWDG_Init+0x68>
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	685b      	ldr	r3, [r3, #4]
 8002e62:	2b05      	cmp	r3, #5
 8002e64:	d008      	beq.n	8002e78 <HAL_IWDG_Init+0x68>
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	685b      	ldr	r3, [r3, #4]
 8002e6a:	2b06      	cmp	r3, #6
 8002e6c:	d004      	beq.n	8002e78 <HAL_IWDG_Init+0x68>
 8002e6e:	4b2b      	ldr	r3, [pc, #172]	; (8002f1c <HAL_IWDG_Init+0x10c>)
 8002e70:	21b6      	movs	r1, #182	; 0xb6
 8002e72:	0018      	movs	r0, r3
 8002e74:	f7fd fd7b 	bl	800096e <assert_failed>
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	689b      	ldr	r3, [r3, #8]
 8002e7c:	4a28      	ldr	r2, [pc, #160]	; (8002f20 <HAL_IWDG_Init+0x110>)
 8002e7e:	4293      	cmp	r3, r2
 8002e80:	d904      	bls.n	8002e8c <HAL_IWDG_Init+0x7c>
 8002e82:	4b26      	ldr	r3, [pc, #152]	; (8002f1c <HAL_IWDG_Init+0x10c>)
 8002e84:	21b7      	movs	r1, #183	; 0xb7
 8002e86:	0018      	movs	r0, r3
 8002e88:	f7fd fd71 	bl	800096e <assert_failed>
  assert_param(IS_IWDG_WINDOW(hiwdg->Init.Window));
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	68db      	ldr	r3, [r3, #12]
 8002e90:	4a23      	ldr	r2, [pc, #140]	; (8002f20 <HAL_IWDG_Init+0x110>)
 8002e92:	4293      	cmp	r3, r2
 8002e94:	d904      	bls.n	8002ea0 <HAL_IWDG_Init+0x90>
 8002e96:	4b21      	ldr	r3, [pc, #132]	; (8002f1c <HAL_IWDG_Init+0x10c>)
 8002e98:	21b8      	movs	r1, #184	; 0xb8
 8002e9a:	0018      	movs	r0, r3
 8002e9c:	f7fd fd67 	bl	800096e <assert_failed>

  /* Enable IWDG. LSI is turned on automaticaly */
  __HAL_IWDG_START(hiwdg);
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	4a1f      	ldr	r2, [pc, #124]	; (8002f24 <HAL_IWDG_Init+0x114>)
 8002ea6:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR, IWDG_RLR and IWDG_WINR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	4a1e      	ldr	r2, [pc, #120]	; (8002f28 <HAL_IWDG_Init+0x118>)
 8002eae:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	687a      	ldr	r2, [r7, #4]
 8002eb6:	6852      	ldr	r2, [r2, #4]
 8002eb8:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	687a      	ldr	r2, [r7, #4]
 8002ec0:	6892      	ldr	r2, [r2, #8]
 8002ec2:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 8002ec4:	f7fe fbac 	bl	8001620 <HAL_GetTick>
 8002ec8:	0003      	movs	r3, r0
 8002eca:	60fb      	str	r3, [r7, #12]

   /* Wait for register to be updated */
  while(hiwdg->Instance->SR != RESET)
 8002ecc:	e008      	b.n	8002ee0 <HAL_IWDG_Init+0xd0>
  {
    if((HAL_GetTick() - tickstart ) > HAL_IWDG_DEFAULT_TIMEOUT)
 8002ece:	f7fe fba7 	bl	8001620 <HAL_GetTick>
 8002ed2:	0002      	movs	r2, r0
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	1ad3      	subs	r3, r2, r3
 8002ed8:	2b27      	cmp	r3, #39	; 0x27
 8002eda:	d901      	bls.n	8002ee0 <HAL_IWDG_Init+0xd0>
    {
      return HAL_TIMEOUT;
 8002edc:	2303      	movs	r3, #3
 8002ede:	e016      	b.n	8002f0e <HAL_IWDG_Init+0xfe>
  while(hiwdg->Instance->SR != RESET)
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	68db      	ldr	r3, [r3, #12]
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d1f1      	bne.n	8002ece <HAL_IWDG_Init+0xbe>
    }
  }

  /* If window parameter is different than current value, modify window 
  register */
  if(hiwdg->Instance->WINR != hiwdg->Init.Window)
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	691a      	ldr	r2, [r3, #16]
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	68db      	ldr	r3, [r3, #12]
 8002ef4:	429a      	cmp	r2, r3
 8002ef6:	d005      	beq.n	8002f04 <HAL_IWDG_Init+0xf4>
  {
    /* Write to IWDG WINR the IWDG_Window value to compare with. In any case,
    even if window feature is disabled, Watchdog will be reloaded by writing 
    windows register */
    hiwdg->Instance->WINR = hiwdg->Init.Window;
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	687a      	ldr	r2, [r7, #4]
 8002efe:	68d2      	ldr	r2, [r2, #12]
 8002f00:	611a      	str	r2, [r3, #16]
 8002f02:	e003      	b.n	8002f0c <HAL_IWDG_Init+0xfc>
  }
  else
  {
    /* Reload IWDG counter with value defined in the reload register */
    __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	4a08      	ldr	r2, [pc, #32]	; (8002f2c <HAL_IWDG_Init+0x11c>)
 8002f0a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002f0c:	2300      	movs	r3, #0
}
 8002f0e:	0018      	movs	r0, r3
 8002f10:	46bd      	mov	sp, r7
 8002f12:	b004      	add	sp, #16
 8002f14:	bd80      	pop	{r7, pc}
 8002f16:	46c0      	nop			; (mov r8, r8)
 8002f18:	40003000 	.word	0x40003000
 8002f1c:	08006a88 	.word	0x08006a88
 8002f20:	00000fff 	.word	0x00000fff
 8002f24:	0000cccc 	.word	0x0000cccc
 8002f28:	00005555 	.word	0x00005555
 8002f2c:	0000aaaa 	.word	0x0000aaaa

08002f30 <HAL_IWDG_Refresh>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
 8002f30:	b580      	push	{r7, lr}
 8002f32:	b082      	sub	sp, #8
 8002f34:	af00      	add	r7, sp, #0
 8002f36:	6078      	str	r0, [r7, #4]
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	4a03      	ldr	r2, [pc, #12]	; (8002f4c <HAL_IWDG_Refresh+0x1c>)
 8002f3e:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8002f40:	2300      	movs	r3, #0
}
 8002f42:	0018      	movs	r0, r3
 8002f44:	46bd      	mov	sp, r7
 8002f46:	b002      	add	sp, #8
 8002f48:	bd80      	pop	{r7, pc}
 8002f4a:	46c0      	nop			; (mov r8, r8)
 8002f4c:	0000aaaa 	.word	0x0000aaaa

08002f50 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002f50:	b580      	push	{r7, lr}
 8002f52:	b086      	sub	sp, #24
 8002f54:	af00      	add	r7, sp, #0
 8002f56:	6078      	str	r0, [r7, #4]
   uint32_t tickstart = 0U;
 8002f58:	2300      	movs	r3, #0
 8002f5a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d106      	bne.n	8002f70 <HAL_RCC_OscConfig+0x20>
 8002f62:	2389      	movs	r3, #137	; 0x89
 8002f64:	005a      	lsls	r2, r3, #1
 8002f66:	4bc6      	ldr	r3, [pc, #792]	; (8003280 <HAL_RCC_OscConfig+0x330>)
 8002f68:	0011      	movs	r1, r2
 8002f6a:	0018      	movs	r0, r3
 8002f6c:	f7fd fcff 	bl	800096e <assert_failed>
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d020      	beq.n	8002fba <HAL_RCC_OscConfig+0x6a>
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	2201      	movs	r2, #1
 8002f7e:	4013      	ands	r3, r2
 8002f80:	d11b      	bne.n	8002fba <HAL_RCC_OscConfig+0x6a>
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	2202      	movs	r2, #2
 8002f88:	4013      	ands	r3, r2
 8002f8a:	d116      	bne.n	8002fba <HAL_RCC_OscConfig+0x6a>
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	2208      	movs	r2, #8
 8002f92:	4013      	ands	r3, r2
 8002f94:	d111      	bne.n	8002fba <HAL_RCC_OscConfig+0x6a>
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	2204      	movs	r2, #4
 8002f9c:	4013      	ands	r3, r2
 8002f9e:	d10c      	bne.n	8002fba <HAL_RCC_OscConfig+0x6a>
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	2210      	movs	r2, #16
 8002fa6:	4013      	ands	r3, r2
 8002fa8:	d107      	bne.n	8002fba <HAL_RCC_OscConfig+0x6a>
 8002faa:	2314      	movs	r3, #20
 8002fac:	33ff      	adds	r3, #255	; 0xff
 8002fae:	001a      	movs	r2, r3
 8002fb0:	4bb3      	ldr	r3, [pc, #716]	; (8003280 <HAL_RCC_OscConfig+0x330>)
 8002fb2:	0011      	movs	r1, r2
 8002fb4:	0018      	movs	r0, r3
 8002fb6:	f7fd fcda 	bl	800096e <assert_failed>

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	2201      	movs	r2, #1
 8002fc0:	4013      	ands	r3, r2
 8002fc2:	d100      	bne.n	8002fc6 <HAL_RCC_OscConfig+0x76>
 8002fc4:	e0a4      	b.n	8003110 <HAL_RCC_OscConfig+0x1c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	685b      	ldr	r3, [r3, #4]
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d00f      	beq.n	8002fee <HAL_RCC_OscConfig+0x9e>
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	685b      	ldr	r3, [r3, #4]
 8002fd2:	2b01      	cmp	r3, #1
 8002fd4:	d00b      	beq.n	8002fee <HAL_RCC_OscConfig+0x9e>
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	685b      	ldr	r3, [r3, #4]
 8002fda:	2b05      	cmp	r3, #5
 8002fdc:	d007      	beq.n	8002fee <HAL_RCC_OscConfig+0x9e>
 8002fde:	231a      	movs	r3, #26
 8002fe0:	33ff      	adds	r3, #255	; 0xff
 8002fe2:	001a      	movs	r2, r3
 8002fe4:	4ba6      	ldr	r3, [pc, #664]	; (8003280 <HAL_RCC_OscConfig+0x330>)
 8002fe6:	0011      	movs	r1, r2
 8002fe8:	0018      	movs	r0, r3
 8002fea:	f7fd fcc0 	bl	800096e <assert_failed>

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8002fee:	4ba5      	ldr	r3, [pc, #660]	; (8003284 <HAL_RCC_OscConfig+0x334>)
 8002ff0:	685b      	ldr	r3, [r3, #4]
 8002ff2:	220c      	movs	r2, #12
 8002ff4:	4013      	ands	r3, r2
 8002ff6:	2b04      	cmp	r3, #4
 8002ff8:	d00e      	beq.n	8003018 <HAL_RCC_OscConfig+0xc8>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002ffa:	4ba2      	ldr	r3, [pc, #648]	; (8003284 <HAL_RCC_OscConfig+0x334>)
 8002ffc:	685b      	ldr	r3, [r3, #4]
 8002ffe:	220c      	movs	r2, #12
 8003000:	4013      	ands	r3, r2
 8003002:	2b08      	cmp	r3, #8
 8003004:	d117      	bne.n	8003036 <HAL_RCC_OscConfig+0xe6>
 8003006:	4b9f      	ldr	r3, [pc, #636]	; (8003284 <HAL_RCC_OscConfig+0x334>)
 8003008:	685a      	ldr	r2, [r3, #4]
 800300a:	2380      	movs	r3, #128	; 0x80
 800300c:	025b      	lsls	r3, r3, #9
 800300e:	401a      	ands	r2, r3
 8003010:	2380      	movs	r3, #128	; 0x80
 8003012:	025b      	lsls	r3, r3, #9
 8003014:	429a      	cmp	r2, r3
 8003016:	d10e      	bne.n	8003036 <HAL_RCC_OscConfig+0xe6>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003018:	4b9a      	ldr	r3, [pc, #616]	; (8003284 <HAL_RCC_OscConfig+0x334>)
 800301a:	681a      	ldr	r2, [r3, #0]
 800301c:	2380      	movs	r3, #128	; 0x80
 800301e:	029b      	lsls	r3, r3, #10
 8003020:	4013      	ands	r3, r2
 8003022:	d100      	bne.n	8003026 <HAL_RCC_OscConfig+0xd6>
 8003024:	e073      	b.n	800310e <HAL_RCC_OscConfig+0x1be>
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	685b      	ldr	r3, [r3, #4]
 800302a:	2b00      	cmp	r3, #0
 800302c:	d000      	beq.n	8003030 <HAL_RCC_OscConfig+0xe0>
 800302e:	e06e      	b.n	800310e <HAL_RCC_OscConfig+0x1be>
      {
        return HAL_ERROR;
 8003030:	2301      	movs	r3, #1
 8003032:	f000 fbe9 	bl	8003808 <HAL_RCC_OscConfig+0x8b8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	685b      	ldr	r3, [r3, #4]
 800303a:	2b01      	cmp	r3, #1
 800303c:	d107      	bne.n	800304e <HAL_RCC_OscConfig+0xfe>
 800303e:	4b91      	ldr	r3, [pc, #580]	; (8003284 <HAL_RCC_OscConfig+0x334>)
 8003040:	681a      	ldr	r2, [r3, #0]
 8003042:	4b90      	ldr	r3, [pc, #576]	; (8003284 <HAL_RCC_OscConfig+0x334>)
 8003044:	2180      	movs	r1, #128	; 0x80
 8003046:	0249      	lsls	r1, r1, #9
 8003048:	430a      	orrs	r2, r1
 800304a:	601a      	str	r2, [r3, #0]
 800304c:	e02f      	b.n	80030ae <HAL_RCC_OscConfig+0x15e>
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	685b      	ldr	r3, [r3, #4]
 8003052:	2b00      	cmp	r3, #0
 8003054:	d10c      	bne.n	8003070 <HAL_RCC_OscConfig+0x120>
 8003056:	4b8b      	ldr	r3, [pc, #556]	; (8003284 <HAL_RCC_OscConfig+0x334>)
 8003058:	681a      	ldr	r2, [r3, #0]
 800305a:	4b8a      	ldr	r3, [pc, #552]	; (8003284 <HAL_RCC_OscConfig+0x334>)
 800305c:	498a      	ldr	r1, [pc, #552]	; (8003288 <HAL_RCC_OscConfig+0x338>)
 800305e:	400a      	ands	r2, r1
 8003060:	601a      	str	r2, [r3, #0]
 8003062:	4b88      	ldr	r3, [pc, #544]	; (8003284 <HAL_RCC_OscConfig+0x334>)
 8003064:	681a      	ldr	r2, [r3, #0]
 8003066:	4b87      	ldr	r3, [pc, #540]	; (8003284 <HAL_RCC_OscConfig+0x334>)
 8003068:	4988      	ldr	r1, [pc, #544]	; (800328c <HAL_RCC_OscConfig+0x33c>)
 800306a:	400a      	ands	r2, r1
 800306c:	601a      	str	r2, [r3, #0]
 800306e:	e01e      	b.n	80030ae <HAL_RCC_OscConfig+0x15e>
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	685b      	ldr	r3, [r3, #4]
 8003074:	2b05      	cmp	r3, #5
 8003076:	d10e      	bne.n	8003096 <HAL_RCC_OscConfig+0x146>
 8003078:	4b82      	ldr	r3, [pc, #520]	; (8003284 <HAL_RCC_OscConfig+0x334>)
 800307a:	681a      	ldr	r2, [r3, #0]
 800307c:	4b81      	ldr	r3, [pc, #516]	; (8003284 <HAL_RCC_OscConfig+0x334>)
 800307e:	2180      	movs	r1, #128	; 0x80
 8003080:	02c9      	lsls	r1, r1, #11
 8003082:	430a      	orrs	r2, r1
 8003084:	601a      	str	r2, [r3, #0]
 8003086:	4b7f      	ldr	r3, [pc, #508]	; (8003284 <HAL_RCC_OscConfig+0x334>)
 8003088:	681a      	ldr	r2, [r3, #0]
 800308a:	4b7e      	ldr	r3, [pc, #504]	; (8003284 <HAL_RCC_OscConfig+0x334>)
 800308c:	2180      	movs	r1, #128	; 0x80
 800308e:	0249      	lsls	r1, r1, #9
 8003090:	430a      	orrs	r2, r1
 8003092:	601a      	str	r2, [r3, #0]
 8003094:	e00b      	b.n	80030ae <HAL_RCC_OscConfig+0x15e>
 8003096:	4b7b      	ldr	r3, [pc, #492]	; (8003284 <HAL_RCC_OscConfig+0x334>)
 8003098:	681a      	ldr	r2, [r3, #0]
 800309a:	4b7a      	ldr	r3, [pc, #488]	; (8003284 <HAL_RCC_OscConfig+0x334>)
 800309c:	497a      	ldr	r1, [pc, #488]	; (8003288 <HAL_RCC_OscConfig+0x338>)
 800309e:	400a      	ands	r2, r1
 80030a0:	601a      	str	r2, [r3, #0]
 80030a2:	4b78      	ldr	r3, [pc, #480]	; (8003284 <HAL_RCC_OscConfig+0x334>)
 80030a4:	681a      	ldr	r2, [r3, #0]
 80030a6:	4b77      	ldr	r3, [pc, #476]	; (8003284 <HAL_RCC_OscConfig+0x334>)
 80030a8:	4978      	ldr	r1, [pc, #480]	; (800328c <HAL_RCC_OscConfig+0x33c>)
 80030aa:	400a      	ands	r2, r1
 80030ac:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	685b      	ldr	r3, [r3, #4]
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d015      	beq.n	80030e2 <HAL_RCC_OscConfig+0x192>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030b6:	f7fe fab3 	bl	8001620 <HAL_GetTick>
 80030ba:	0003      	movs	r3, r0
 80030bc:	613b      	str	r3, [r7, #16]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80030be:	e009      	b.n	80030d4 <HAL_RCC_OscConfig+0x184>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80030c0:	f7fe faae 	bl	8001620 <HAL_GetTick>
 80030c4:	0002      	movs	r2, r0
 80030c6:	693b      	ldr	r3, [r7, #16]
 80030c8:	1ad3      	subs	r3, r2, r3
 80030ca:	2b64      	cmp	r3, #100	; 0x64
 80030cc:	d902      	bls.n	80030d4 <HAL_RCC_OscConfig+0x184>
          {
            return HAL_TIMEOUT;
 80030ce:	2303      	movs	r3, #3
 80030d0:	f000 fb9a 	bl	8003808 <HAL_RCC_OscConfig+0x8b8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80030d4:	4b6b      	ldr	r3, [pc, #428]	; (8003284 <HAL_RCC_OscConfig+0x334>)
 80030d6:	681a      	ldr	r2, [r3, #0]
 80030d8:	2380      	movs	r3, #128	; 0x80
 80030da:	029b      	lsls	r3, r3, #10
 80030dc:	4013      	ands	r3, r2
 80030de:	d0ef      	beq.n	80030c0 <HAL_RCC_OscConfig+0x170>
 80030e0:	e016      	b.n	8003110 <HAL_RCC_OscConfig+0x1c0>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030e2:	f7fe fa9d 	bl	8001620 <HAL_GetTick>
 80030e6:	0003      	movs	r3, r0
 80030e8:	613b      	str	r3, [r7, #16]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80030ea:	e009      	b.n	8003100 <HAL_RCC_OscConfig+0x1b0>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80030ec:	f7fe fa98 	bl	8001620 <HAL_GetTick>
 80030f0:	0002      	movs	r2, r0
 80030f2:	693b      	ldr	r3, [r7, #16]
 80030f4:	1ad3      	subs	r3, r2, r3
 80030f6:	2b64      	cmp	r3, #100	; 0x64
 80030f8:	d902      	bls.n	8003100 <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 80030fa:	2303      	movs	r3, #3
 80030fc:	f000 fb84 	bl	8003808 <HAL_RCC_OscConfig+0x8b8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003100:	4b60      	ldr	r3, [pc, #384]	; (8003284 <HAL_RCC_OscConfig+0x334>)
 8003102:	681a      	ldr	r2, [r3, #0]
 8003104:	2380      	movs	r3, #128	; 0x80
 8003106:	029b      	lsls	r3, r3, #10
 8003108:	4013      	ands	r3, r2
 800310a:	d1ef      	bne.n	80030ec <HAL_RCC_OscConfig+0x19c>
 800310c:	e000      	b.n	8003110 <HAL_RCC_OscConfig+0x1c0>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800310e:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	2202      	movs	r2, #2
 8003116:	4013      	ands	r3, r2
 8003118:	d100      	bne.n	800311c <HAL_RCC_OscConfig+0x1cc>
 800311a:	e085      	b.n	8003228 <HAL_RCC_OscConfig+0x2d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	68db      	ldr	r3, [r3, #12]
 8003120:	2b00      	cmp	r3, #0
 8003122:	d00b      	beq.n	800313c <HAL_RCC_OscConfig+0x1ec>
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	68db      	ldr	r3, [r3, #12]
 8003128:	2b01      	cmp	r3, #1
 800312a:	d007      	beq.n	800313c <HAL_RCC_OscConfig+0x1ec>
 800312c:	234e      	movs	r3, #78	; 0x4e
 800312e:	33ff      	adds	r3, #255	; 0xff
 8003130:	001a      	movs	r2, r3
 8003132:	4b53      	ldr	r3, [pc, #332]	; (8003280 <HAL_RCC_OscConfig+0x330>)
 8003134:	0011      	movs	r1, r2
 8003136:	0018      	movs	r0, r3
 8003138:	f7fd fc19 	bl	800096e <assert_failed>
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	691b      	ldr	r3, [r3, #16]
 8003140:	2b1f      	cmp	r3, #31
 8003142:	d906      	bls.n	8003152 <HAL_RCC_OscConfig+0x202>
 8003144:	23a7      	movs	r3, #167	; 0xa7
 8003146:	005a      	lsls	r2, r3, #1
 8003148:	4b4d      	ldr	r3, [pc, #308]	; (8003280 <HAL_RCC_OscConfig+0x330>)
 800314a:	0011      	movs	r1, r2
 800314c:	0018      	movs	r0, r3
 800314e:	f7fd fc0e 	bl	800096e <assert_failed>
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8003152:	4b4c      	ldr	r3, [pc, #304]	; (8003284 <HAL_RCC_OscConfig+0x334>)
 8003154:	685b      	ldr	r3, [r3, #4]
 8003156:	220c      	movs	r2, #12
 8003158:	4013      	ands	r3, r2
 800315a:	d00b      	beq.n	8003174 <HAL_RCC_OscConfig+0x224>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 800315c:	4b49      	ldr	r3, [pc, #292]	; (8003284 <HAL_RCC_OscConfig+0x334>)
 800315e:	685b      	ldr	r3, [r3, #4]
 8003160:	220c      	movs	r2, #12
 8003162:	4013      	ands	r3, r2
 8003164:	2b08      	cmp	r3, #8
 8003166:	d11d      	bne.n	80031a4 <HAL_RCC_OscConfig+0x254>
 8003168:	4b46      	ldr	r3, [pc, #280]	; (8003284 <HAL_RCC_OscConfig+0x334>)
 800316a:	685a      	ldr	r2, [r3, #4]
 800316c:	2380      	movs	r3, #128	; 0x80
 800316e:	025b      	lsls	r3, r3, #9
 8003170:	4013      	ands	r3, r2
 8003172:	d117      	bne.n	80031a4 <HAL_RCC_OscConfig+0x254>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003174:	4b43      	ldr	r3, [pc, #268]	; (8003284 <HAL_RCC_OscConfig+0x334>)
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	2202      	movs	r2, #2
 800317a:	4013      	ands	r3, r2
 800317c:	d006      	beq.n	800318c <HAL_RCC_OscConfig+0x23c>
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	68db      	ldr	r3, [r3, #12]
 8003182:	2b01      	cmp	r3, #1
 8003184:	d002      	beq.n	800318c <HAL_RCC_OscConfig+0x23c>
      {
        return HAL_ERROR;
 8003186:	2301      	movs	r3, #1
 8003188:	f000 fb3e 	bl	8003808 <HAL_RCC_OscConfig+0x8b8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800318c:	4b3d      	ldr	r3, [pc, #244]	; (8003284 <HAL_RCC_OscConfig+0x334>)
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	22f8      	movs	r2, #248	; 0xf8
 8003192:	4393      	bics	r3, r2
 8003194:	0019      	movs	r1, r3
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	691b      	ldr	r3, [r3, #16]
 800319a:	00da      	lsls	r2, r3, #3
 800319c:	4b39      	ldr	r3, [pc, #228]	; (8003284 <HAL_RCC_OscConfig+0x334>)
 800319e:	430a      	orrs	r2, r1
 80031a0:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80031a2:	e041      	b.n	8003228 <HAL_RCC_OscConfig+0x2d8>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	68db      	ldr	r3, [r3, #12]
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d024      	beq.n	80031f6 <HAL_RCC_OscConfig+0x2a6>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80031ac:	4b35      	ldr	r3, [pc, #212]	; (8003284 <HAL_RCC_OscConfig+0x334>)
 80031ae:	681a      	ldr	r2, [r3, #0]
 80031b0:	4b34      	ldr	r3, [pc, #208]	; (8003284 <HAL_RCC_OscConfig+0x334>)
 80031b2:	2101      	movs	r1, #1
 80031b4:	430a      	orrs	r2, r1
 80031b6:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031b8:	f7fe fa32 	bl	8001620 <HAL_GetTick>
 80031bc:	0003      	movs	r3, r0
 80031be:	613b      	str	r3, [r7, #16]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80031c0:	e008      	b.n	80031d4 <HAL_RCC_OscConfig+0x284>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80031c2:	f7fe fa2d 	bl	8001620 <HAL_GetTick>
 80031c6:	0002      	movs	r2, r0
 80031c8:	693b      	ldr	r3, [r7, #16]
 80031ca:	1ad3      	subs	r3, r2, r3
 80031cc:	2b02      	cmp	r3, #2
 80031ce:	d901      	bls.n	80031d4 <HAL_RCC_OscConfig+0x284>
          {
            return HAL_TIMEOUT;
 80031d0:	2303      	movs	r3, #3
 80031d2:	e319      	b.n	8003808 <HAL_RCC_OscConfig+0x8b8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80031d4:	4b2b      	ldr	r3, [pc, #172]	; (8003284 <HAL_RCC_OscConfig+0x334>)
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	2202      	movs	r2, #2
 80031da:	4013      	ands	r3, r2
 80031dc:	d0f1      	beq.n	80031c2 <HAL_RCC_OscConfig+0x272>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80031de:	4b29      	ldr	r3, [pc, #164]	; (8003284 <HAL_RCC_OscConfig+0x334>)
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	22f8      	movs	r2, #248	; 0xf8
 80031e4:	4393      	bics	r3, r2
 80031e6:	0019      	movs	r1, r3
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	691b      	ldr	r3, [r3, #16]
 80031ec:	00da      	lsls	r2, r3, #3
 80031ee:	4b25      	ldr	r3, [pc, #148]	; (8003284 <HAL_RCC_OscConfig+0x334>)
 80031f0:	430a      	orrs	r2, r1
 80031f2:	601a      	str	r2, [r3, #0]
 80031f4:	e018      	b.n	8003228 <HAL_RCC_OscConfig+0x2d8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80031f6:	4b23      	ldr	r3, [pc, #140]	; (8003284 <HAL_RCC_OscConfig+0x334>)
 80031f8:	681a      	ldr	r2, [r3, #0]
 80031fa:	4b22      	ldr	r3, [pc, #136]	; (8003284 <HAL_RCC_OscConfig+0x334>)
 80031fc:	2101      	movs	r1, #1
 80031fe:	438a      	bics	r2, r1
 8003200:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003202:	f7fe fa0d 	bl	8001620 <HAL_GetTick>
 8003206:	0003      	movs	r3, r0
 8003208:	613b      	str	r3, [r7, #16]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800320a:	e008      	b.n	800321e <HAL_RCC_OscConfig+0x2ce>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800320c:	f7fe fa08 	bl	8001620 <HAL_GetTick>
 8003210:	0002      	movs	r2, r0
 8003212:	693b      	ldr	r3, [r7, #16]
 8003214:	1ad3      	subs	r3, r2, r3
 8003216:	2b02      	cmp	r3, #2
 8003218:	d901      	bls.n	800321e <HAL_RCC_OscConfig+0x2ce>
          {
            return HAL_TIMEOUT;
 800321a:	2303      	movs	r3, #3
 800321c:	e2f4      	b.n	8003808 <HAL_RCC_OscConfig+0x8b8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800321e:	4b19      	ldr	r3, [pc, #100]	; (8003284 <HAL_RCC_OscConfig+0x334>)
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	2202      	movs	r2, #2
 8003224:	4013      	ands	r3, r2
 8003226:	d1f1      	bne.n	800320c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	2208      	movs	r2, #8
 800322e:	4013      	ands	r3, r2
 8003230:	d04d      	beq.n	80032ce <HAL_RCC_OscConfig+0x37e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	69db      	ldr	r3, [r3, #28]
 8003236:	2b00      	cmp	r3, #0
 8003238:	d00a      	beq.n	8003250 <HAL_RCC_OscConfig+0x300>
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	69db      	ldr	r3, [r3, #28]
 800323e:	2b01      	cmp	r3, #1
 8003240:	d006      	beq.n	8003250 <HAL_RCC_OscConfig+0x300>
 8003242:	23c7      	movs	r3, #199	; 0xc7
 8003244:	005a      	lsls	r2, r3, #1
 8003246:	4b0e      	ldr	r3, [pc, #56]	; (8003280 <HAL_RCC_OscConfig+0x330>)
 8003248:	0011      	movs	r1, r2
 800324a:	0018      	movs	r0, r3
 800324c:	f7fd fb8f 	bl	800096e <assert_failed>
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	69db      	ldr	r3, [r3, #28]
 8003254:	2b00      	cmp	r3, #0
 8003256:	d021      	beq.n	800329c <HAL_RCC_OscConfig+0x34c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003258:	4b0a      	ldr	r3, [pc, #40]	; (8003284 <HAL_RCC_OscConfig+0x334>)
 800325a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800325c:	4b09      	ldr	r3, [pc, #36]	; (8003284 <HAL_RCC_OscConfig+0x334>)
 800325e:	2101      	movs	r1, #1
 8003260:	430a      	orrs	r2, r1
 8003262:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003264:	f7fe f9dc 	bl	8001620 <HAL_GetTick>
 8003268:	0003      	movs	r3, r0
 800326a:	613b      	str	r3, [r7, #16]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800326c:	e010      	b.n	8003290 <HAL_RCC_OscConfig+0x340>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800326e:	f7fe f9d7 	bl	8001620 <HAL_GetTick>
 8003272:	0002      	movs	r2, r0
 8003274:	693b      	ldr	r3, [r7, #16]
 8003276:	1ad3      	subs	r3, r2, r3
 8003278:	2b02      	cmp	r3, #2
 800327a:	d909      	bls.n	8003290 <HAL_RCC_OscConfig+0x340>
        {
          return HAL_TIMEOUT;
 800327c:	2303      	movs	r3, #3
 800327e:	e2c3      	b.n	8003808 <HAL_RCC_OscConfig+0x8b8>
 8003280:	08006ac4 	.word	0x08006ac4
 8003284:	40021000 	.word	0x40021000
 8003288:	fffeffff 	.word	0xfffeffff
 800328c:	fffbffff 	.word	0xfffbffff
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003290:	4bb3      	ldr	r3, [pc, #716]	; (8003560 <HAL_RCC_OscConfig+0x610>)
 8003292:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003294:	2202      	movs	r2, #2
 8003296:	4013      	ands	r3, r2
 8003298:	d0e9      	beq.n	800326e <HAL_RCC_OscConfig+0x31e>
 800329a:	e018      	b.n	80032ce <HAL_RCC_OscConfig+0x37e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800329c:	4bb0      	ldr	r3, [pc, #704]	; (8003560 <HAL_RCC_OscConfig+0x610>)
 800329e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80032a0:	4baf      	ldr	r3, [pc, #700]	; (8003560 <HAL_RCC_OscConfig+0x610>)
 80032a2:	2101      	movs	r1, #1
 80032a4:	438a      	bics	r2, r1
 80032a6:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80032a8:	f7fe f9ba 	bl	8001620 <HAL_GetTick>
 80032ac:	0003      	movs	r3, r0
 80032ae:	613b      	str	r3, [r7, #16]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80032b0:	e008      	b.n	80032c4 <HAL_RCC_OscConfig+0x374>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80032b2:	f7fe f9b5 	bl	8001620 <HAL_GetTick>
 80032b6:	0002      	movs	r2, r0
 80032b8:	693b      	ldr	r3, [r7, #16]
 80032ba:	1ad3      	subs	r3, r2, r3
 80032bc:	2b02      	cmp	r3, #2
 80032be:	d901      	bls.n	80032c4 <HAL_RCC_OscConfig+0x374>
        {
          return HAL_TIMEOUT;
 80032c0:	2303      	movs	r3, #3
 80032c2:	e2a1      	b.n	8003808 <HAL_RCC_OscConfig+0x8b8>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80032c4:	4ba6      	ldr	r3, [pc, #664]	; (8003560 <HAL_RCC_OscConfig+0x610>)
 80032c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032c8:	2202      	movs	r2, #2
 80032ca:	4013      	ands	r3, r2
 80032cc:	d1f1      	bne.n	80032b2 <HAL_RCC_OscConfig+0x362>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	2204      	movs	r2, #4
 80032d4:	4013      	ands	r3, r2
 80032d6:	d100      	bne.n	80032da <HAL_RCC_OscConfig+0x38a>
 80032d8:	e0c0      	b.n	800345c <HAL_RCC_OscConfig+0x50c>
  {
    FlagStatus       pwrclkchanged = RESET;
 80032da:	2317      	movs	r3, #23
 80032dc:	18fb      	adds	r3, r7, r3
 80032de:	2200      	movs	r2, #0
 80032e0:	701a      	strb	r2, [r3, #0]
    
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	689b      	ldr	r3, [r3, #8]
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d00e      	beq.n	8003308 <HAL_RCC_OscConfig+0x3b8>
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	689b      	ldr	r3, [r3, #8]
 80032ee:	2b01      	cmp	r3, #1
 80032f0:	d00a      	beq.n	8003308 <HAL_RCC_OscConfig+0x3b8>
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	689b      	ldr	r3, [r3, #8]
 80032f6:	2b05      	cmp	r3, #5
 80032f8:	d006      	beq.n	8003308 <HAL_RCC_OscConfig+0x3b8>
 80032fa:	23dd      	movs	r3, #221	; 0xdd
 80032fc:	005a      	lsls	r2, r3, #1
 80032fe:	4b99      	ldr	r3, [pc, #612]	; (8003564 <HAL_RCC_OscConfig+0x614>)
 8003300:	0011      	movs	r1, r2
 8003302:	0018      	movs	r0, r3
 8003304:	f7fd fb33 	bl	800096e <assert_failed>

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003308:	4b95      	ldr	r3, [pc, #596]	; (8003560 <HAL_RCC_OscConfig+0x610>)
 800330a:	69da      	ldr	r2, [r3, #28]
 800330c:	2380      	movs	r3, #128	; 0x80
 800330e:	055b      	lsls	r3, r3, #21
 8003310:	4013      	ands	r3, r2
 8003312:	d111      	bne.n	8003338 <HAL_RCC_OscConfig+0x3e8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003314:	4b92      	ldr	r3, [pc, #584]	; (8003560 <HAL_RCC_OscConfig+0x610>)
 8003316:	69da      	ldr	r2, [r3, #28]
 8003318:	4b91      	ldr	r3, [pc, #580]	; (8003560 <HAL_RCC_OscConfig+0x610>)
 800331a:	2180      	movs	r1, #128	; 0x80
 800331c:	0549      	lsls	r1, r1, #21
 800331e:	430a      	orrs	r2, r1
 8003320:	61da      	str	r2, [r3, #28]
 8003322:	4b8f      	ldr	r3, [pc, #572]	; (8003560 <HAL_RCC_OscConfig+0x610>)
 8003324:	69da      	ldr	r2, [r3, #28]
 8003326:	2380      	movs	r3, #128	; 0x80
 8003328:	055b      	lsls	r3, r3, #21
 800332a:	4013      	ands	r3, r2
 800332c:	60fb      	str	r3, [r7, #12]
 800332e:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8003330:	2317      	movs	r3, #23
 8003332:	18fb      	adds	r3, r7, r3
 8003334:	2201      	movs	r2, #1
 8003336:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003338:	4b8b      	ldr	r3, [pc, #556]	; (8003568 <HAL_RCC_OscConfig+0x618>)
 800333a:	681a      	ldr	r2, [r3, #0]
 800333c:	2380      	movs	r3, #128	; 0x80
 800333e:	005b      	lsls	r3, r3, #1
 8003340:	4013      	ands	r3, r2
 8003342:	d11a      	bne.n	800337a <HAL_RCC_OscConfig+0x42a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003344:	4b88      	ldr	r3, [pc, #544]	; (8003568 <HAL_RCC_OscConfig+0x618>)
 8003346:	681a      	ldr	r2, [r3, #0]
 8003348:	4b87      	ldr	r3, [pc, #540]	; (8003568 <HAL_RCC_OscConfig+0x618>)
 800334a:	2180      	movs	r1, #128	; 0x80
 800334c:	0049      	lsls	r1, r1, #1
 800334e:	430a      	orrs	r2, r1
 8003350:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003352:	f7fe f965 	bl	8001620 <HAL_GetTick>
 8003356:	0003      	movs	r3, r0
 8003358:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800335a:	e008      	b.n	800336e <HAL_RCC_OscConfig+0x41e>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800335c:	f7fe f960 	bl	8001620 <HAL_GetTick>
 8003360:	0002      	movs	r2, r0
 8003362:	693b      	ldr	r3, [r7, #16]
 8003364:	1ad3      	subs	r3, r2, r3
 8003366:	2b64      	cmp	r3, #100	; 0x64
 8003368:	d901      	bls.n	800336e <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 800336a:	2303      	movs	r3, #3
 800336c:	e24c      	b.n	8003808 <HAL_RCC_OscConfig+0x8b8>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800336e:	4b7e      	ldr	r3, [pc, #504]	; (8003568 <HAL_RCC_OscConfig+0x618>)
 8003370:	681a      	ldr	r2, [r3, #0]
 8003372:	2380      	movs	r3, #128	; 0x80
 8003374:	005b      	lsls	r3, r3, #1
 8003376:	4013      	ands	r3, r2
 8003378:	d0f0      	beq.n	800335c <HAL_RCC_OscConfig+0x40c>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	689b      	ldr	r3, [r3, #8]
 800337e:	2b01      	cmp	r3, #1
 8003380:	d106      	bne.n	8003390 <HAL_RCC_OscConfig+0x440>
 8003382:	4b77      	ldr	r3, [pc, #476]	; (8003560 <HAL_RCC_OscConfig+0x610>)
 8003384:	6a1a      	ldr	r2, [r3, #32]
 8003386:	4b76      	ldr	r3, [pc, #472]	; (8003560 <HAL_RCC_OscConfig+0x610>)
 8003388:	2101      	movs	r1, #1
 800338a:	430a      	orrs	r2, r1
 800338c:	621a      	str	r2, [r3, #32]
 800338e:	e02d      	b.n	80033ec <HAL_RCC_OscConfig+0x49c>
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	689b      	ldr	r3, [r3, #8]
 8003394:	2b00      	cmp	r3, #0
 8003396:	d10c      	bne.n	80033b2 <HAL_RCC_OscConfig+0x462>
 8003398:	4b71      	ldr	r3, [pc, #452]	; (8003560 <HAL_RCC_OscConfig+0x610>)
 800339a:	6a1a      	ldr	r2, [r3, #32]
 800339c:	4b70      	ldr	r3, [pc, #448]	; (8003560 <HAL_RCC_OscConfig+0x610>)
 800339e:	2101      	movs	r1, #1
 80033a0:	438a      	bics	r2, r1
 80033a2:	621a      	str	r2, [r3, #32]
 80033a4:	4b6e      	ldr	r3, [pc, #440]	; (8003560 <HAL_RCC_OscConfig+0x610>)
 80033a6:	6a1a      	ldr	r2, [r3, #32]
 80033a8:	4b6d      	ldr	r3, [pc, #436]	; (8003560 <HAL_RCC_OscConfig+0x610>)
 80033aa:	2104      	movs	r1, #4
 80033ac:	438a      	bics	r2, r1
 80033ae:	621a      	str	r2, [r3, #32]
 80033b0:	e01c      	b.n	80033ec <HAL_RCC_OscConfig+0x49c>
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	689b      	ldr	r3, [r3, #8]
 80033b6:	2b05      	cmp	r3, #5
 80033b8:	d10c      	bne.n	80033d4 <HAL_RCC_OscConfig+0x484>
 80033ba:	4b69      	ldr	r3, [pc, #420]	; (8003560 <HAL_RCC_OscConfig+0x610>)
 80033bc:	6a1a      	ldr	r2, [r3, #32]
 80033be:	4b68      	ldr	r3, [pc, #416]	; (8003560 <HAL_RCC_OscConfig+0x610>)
 80033c0:	2104      	movs	r1, #4
 80033c2:	430a      	orrs	r2, r1
 80033c4:	621a      	str	r2, [r3, #32]
 80033c6:	4b66      	ldr	r3, [pc, #408]	; (8003560 <HAL_RCC_OscConfig+0x610>)
 80033c8:	6a1a      	ldr	r2, [r3, #32]
 80033ca:	4b65      	ldr	r3, [pc, #404]	; (8003560 <HAL_RCC_OscConfig+0x610>)
 80033cc:	2101      	movs	r1, #1
 80033ce:	430a      	orrs	r2, r1
 80033d0:	621a      	str	r2, [r3, #32]
 80033d2:	e00b      	b.n	80033ec <HAL_RCC_OscConfig+0x49c>
 80033d4:	4b62      	ldr	r3, [pc, #392]	; (8003560 <HAL_RCC_OscConfig+0x610>)
 80033d6:	6a1a      	ldr	r2, [r3, #32]
 80033d8:	4b61      	ldr	r3, [pc, #388]	; (8003560 <HAL_RCC_OscConfig+0x610>)
 80033da:	2101      	movs	r1, #1
 80033dc:	438a      	bics	r2, r1
 80033de:	621a      	str	r2, [r3, #32]
 80033e0:	4b5f      	ldr	r3, [pc, #380]	; (8003560 <HAL_RCC_OscConfig+0x610>)
 80033e2:	6a1a      	ldr	r2, [r3, #32]
 80033e4:	4b5e      	ldr	r3, [pc, #376]	; (8003560 <HAL_RCC_OscConfig+0x610>)
 80033e6:	2104      	movs	r1, #4
 80033e8:	438a      	bics	r2, r1
 80033ea:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	689b      	ldr	r3, [r3, #8]
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d014      	beq.n	800341e <HAL_RCC_OscConfig+0x4ce>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80033f4:	f7fe f914 	bl	8001620 <HAL_GetTick>
 80033f8:	0003      	movs	r3, r0
 80033fa:	613b      	str	r3, [r7, #16]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80033fc:	e009      	b.n	8003412 <HAL_RCC_OscConfig+0x4c2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80033fe:	f7fe f90f 	bl	8001620 <HAL_GetTick>
 8003402:	0002      	movs	r2, r0
 8003404:	693b      	ldr	r3, [r7, #16]
 8003406:	1ad3      	subs	r3, r2, r3
 8003408:	4a58      	ldr	r2, [pc, #352]	; (800356c <HAL_RCC_OscConfig+0x61c>)
 800340a:	4293      	cmp	r3, r2
 800340c:	d901      	bls.n	8003412 <HAL_RCC_OscConfig+0x4c2>
        {
          return HAL_TIMEOUT;
 800340e:	2303      	movs	r3, #3
 8003410:	e1fa      	b.n	8003808 <HAL_RCC_OscConfig+0x8b8>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003412:	4b53      	ldr	r3, [pc, #332]	; (8003560 <HAL_RCC_OscConfig+0x610>)
 8003414:	6a1b      	ldr	r3, [r3, #32]
 8003416:	2202      	movs	r2, #2
 8003418:	4013      	ands	r3, r2
 800341a:	d0f0      	beq.n	80033fe <HAL_RCC_OscConfig+0x4ae>
 800341c:	e013      	b.n	8003446 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800341e:	f7fe f8ff 	bl	8001620 <HAL_GetTick>
 8003422:	0003      	movs	r3, r0
 8003424:	613b      	str	r3, [r7, #16]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003426:	e009      	b.n	800343c <HAL_RCC_OscConfig+0x4ec>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003428:	f7fe f8fa 	bl	8001620 <HAL_GetTick>
 800342c:	0002      	movs	r2, r0
 800342e:	693b      	ldr	r3, [r7, #16]
 8003430:	1ad3      	subs	r3, r2, r3
 8003432:	4a4e      	ldr	r2, [pc, #312]	; (800356c <HAL_RCC_OscConfig+0x61c>)
 8003434:	4293      	cmp	r3, r2
 8003436:	d901      	bls.n	800343c <HAL_RCC_OscConfig+0x4ec>
        {
          return HAL_TIMEOUT;
 8003438:	2303      	movs	r3, #3
 800343a:	e1e5      	b.n	8003808 <HAL_RCC_OscConfig+0x8b8>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800343c:	4b48      	ldr	r3, [pc, #288]	; (8003560 <HAL_RCC_OscConfig+0x610>)
 800343e:	6a1b      	ldr	r3, [r3, #32]
 8003440:	2202      	movs	r2, #2
 8003442:	4013      	ands	r3, r2
 8003444:	d1f0      	bne.n	8003428 <HAL_RCC_OscConfig+0x4d8>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003446:	2317      	movs	r3, #23
 8003448:	18fb      	adds	r3, r7, r3
 800344a:	781b      	ldrb	r3, [r3, #0]
 800344c:	2b01      	cmp	r3, #1
 800344e:	d105      	bne.n	800345c <HAL_RCC_OscConfig+0x50c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003450:	4b43      	ldr	r3, [pc, #268]	; (8003560 <HAL_RCC_OscConfig+0x610>)
 8003452:	69da      	ldr	r2, [r3, #28]
 8003454:	4b42      	ldr	r3, [pc, #264]	; (8003560 <HAL_RCC_OscConfig+0x610>)
 8003456:	4946      	ldr	r1, [pc, #280]	; (8003570 <HAL_RCC_OscConfig+0x620>)
 8003458:	400a      	ands	r2, r1
 800345a:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	2210      	movs	r2, #16
 8003462:	4013      	ands	r3, r2
 8003464:	d100      	bne.n	8003468 <HAL_RCC_OscConfig+0x518>
 8003466:	e08c      	b.n	8003582 <HAL_RCC_OscConfig+0x632>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	695b      	ldr	r3, [r3, #20]
 800346c:	2b00      	cmp	r3, #0
 800346e:	d00e      	beq.n	800348e <HAL_RCC_OscConfig+0x53e>
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	695b      	ldr	r3, [r3, #20]
 8003474:	2b01      	cmp	r3, #1
 8003476:	d00a      	beq.n	800348e <HAL_RCC_OscConfig+0x53e>
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	695b      	ldr	r3, [r3, #20]
 800347c:	3305      	adds	r3, #5
 800347e:	d006      	beq.n	800348e <HAL_RCC_OscConfig+0x53e>
 8003480:	2380      	movs	r3, #128	; 0x80
 8003482:	009a      	lsls	r2, r3, #2
 8003484:	4b37      	ldr	r3, [pc, #220]	; (8003564 <HAL_RCC_OscConfig+0x614>)
 8003486:	0011      	movs	r1, r2
 8003488:	0018      	movs	r0, r3
 800348a:	f7fd fa70 	bl	800096e <assert_failed>
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	699b      	ldr	r3, [r3, #24]
 8003492:	2b1f      	cmp	r3, #31
 8003494:	d905      	bls.n	80034a2 <HAL_RCC_OscConfig+0x552>
 8003496:	4a37      	ldr	r2, [pc, #220]	; (8003574 <HAL_RCC_OscConfig+0x624>)
 8003498:	4b32      	ldr	r3, [pc, #200]	; (8003564 <HAL_RCC_OscConfig+0x614>)
 800349a:	0011      	movs	r1, r2
 800349c:	0018      	movs	r0, r3
 800349e:	f7fd fa66 	bl	800096e <assert_failed>

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	695b      	ldr	r3, [r3, #20]
 80034a6:	2b01      	cmp	r3, #1
 80034a8:	d12a      	bne.n	8003500 <HAL_RCC_OscConfig+0x5b0>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80034aa:	4b2d      	ldr	r3, [pc, #180]	; (8003560 <HAL_RCC_OscConfig+0x610>)
 80034ac:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80034ae:	4b2c      	ldr	r3, [pc, #176]	; (8003560 <HAL_RCC_OscConfig+0x610>)
 80034b0:	2104      	movs	r1, #4
 80034b2:	430a      	orrs	r2, r1
 80034b4:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 80034b6:	4b2a      	ldr	r3, [pc, #168]	; (8003560 <HAL_RCC_OscConfig+0x610>)
 80034b8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80034ba:	4b29      	ldr	r3, [pc, #164]	; (8003560 <HAL_RCC_OscConfig+0x610>)
 80034bc:	2101      	movs	r1, #1
 80034be:	430a      	orrs	r2, r1
 80034c0:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80034c2:	f7fe f8ad 	bl	8001620 <HAL_GetTick>
 80034c6:	0003      	movs	r3, r0
 80034c8:	613b      	str	r3, [r7, #16]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80034ca:	e008      	b.n	80034de <HAL_RCC_OscConfig+0x58e>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80034cc:	f7fe f8a8 	bl	8001620 <HAL_GetTick>
 80034d0:	0002      	movs	r2, r0
 80034d2:	693b      	ldr	r3, [r7, #16]
 80034d4:	1ad3      	subs	r3, r2, r3
 80034d6:	2b02      	cmp	r3, #2
 80034d8:	d901      	bls.n	80034de <HAL_RCC_OscConfig+0x58e>
        {
          return HAL_TIMEOUT;
 80034da:	2303      	movs	r3, #3
 80034dc:	e194      	b.n	8003808 <HAL_RCC_OscConfig+0x8b8>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80034de:	4b20      	ldr	r3, [pc, #128]	; (8003560 <HAL_RCC_OscConfig+0x610>)
 80034e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80034e2:	2202      	movs	r2, #2
 80034e4:	4013      	ands	r3, r2
 80034e6:	d0f1      	beq.n	80034cc <HAL_RCC_OscConfig+0x57c>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80034e8:	4b1d      	ldr	r3, [pc, #116]	; (8003560 <HAL_RCC_OscConfig+0x610>)
 80034ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80034ec:	22f8      	movs	r2, #248	; 0xf8
 80034ee:	4393      	bics	r3, r2
 80034f0:	0019      	movs	r1, r3
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	699b      	ldr	r3, [r3, #24]
 80034f6:	00da      	lsls	r2, r3, #3
 80034f8:	4b19      	ldr	r3, [pc, #100]	; (8003560 <HAL_RCC_OscConfig+0x610>)
 80034fa:	430a      	orrs	r2, r1
 80034fc:	635a      	str	r2, [r3, #52]	; 0x34
 80034fe:	e040      	b.n	8003582 <HAL_RCC_OscConfig+0x632>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	695b      	ldr	r3, [r3, #20]
 8003504:	3305      	adds	r3, #5
 8003506:	d111      	bne.n	800352c <HAL_RCC_OscConfig+0x5dc>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8003508:	4b15      	ldr	r3, [pc, #84]	; (8003560 <HAL_RCC_OscConfig+0x610>)
 800350a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800350c:	4b14      	ldr	r3, [pc, #80]	; (8003560 <HAL_RCC_OscConfig+0x610>)
 800350e:	2104      	movs	r1, #4
 8003510:	438a      	bics	r2, r1
 8003512:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8003514:	4b12      	ldr	r3, [pc, #72]	; (8003560 <HAL_RCC_OscConfig+0x610>)
 8003516:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003518:	22f8      	movs	r2, #248	; 0xf8
 800351a:	4393      	bics	r3, r2
 800351c:	0019      	movs	r1, r3
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	699b      	ldr	r3, [r3, #24]
 8003522:	00da      	lsls	r2, r3, #3
 8003524:	4b0e      	ldr	r3, [pc, #56]	; (8003560 <HAL_RCC_OscConfig+0x610>)
 8003526:	430a      	orrs	r2, r1
 8003528:	635a      	str	r2, [r3, #52]	; 0x34
 800352a:	e02a      	b.n	8003582 <HAL_RCC_OscConfig+0x632>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 800352c:	4b0c      	ldr	r3, [pc, #48]	; (8003560 <HAL_RCC_OscConfig+0x610>)
 800352e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003530:	4b0b      	ldr	r3, [pc, #44]	; (8003560 <HAL_RCC_OscConfig+0x610>)
 8003532:	2104      	movs	r1, #4
 8003534:	430a      	orrs	r2, r1
 8003536:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8003538:	4b09      	ldr	r3, [pc, #36]	; (8003560 <HAL_RCC_OscConfig+0x610>)
 800353a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800353c:	4b08      	ldr	r3, [pc, #32]	; (8003560 <HAL_RCC_OscConfig+0x610>)
 800353e:	2101      	movs	r1, #1
 8003540:	438a      	bics	r2, r1
 8003542:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003544:	f7fe f86c 	bl	8001620 <HAL_GetTick>
 8003548:	0003      	movs	r3, r0
 800354a:	613b      	str	r3, [r7, #16]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 800354c:	e014      	b.n	8003578 <HAL_RCC_OscConfig+0x628>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 800354e:	f7fe f867 	bl	8001620 <HAL_GetTick>
 8003552:	0002      	movs	r2, r0
 8003554:	693b      	ldr	r3, [r7, #16]
 8003556:	1ad3      	subs	r3, r2, r3
 8003558:	2b02      	cmp	r3, #2
 800355a:	d90d      	bls.n	8003578 <HAL_RCC_OscConfig+0x628>
        {
          return HAL_TIMEOUT;
 800355c:	2303      	movs	r3, #3
 800355e:	e153      	b.n	8003808 <HAL_RCC_OscConfig+0x8b8>
 8003560:	40021000 	.word	0x40021000
 8003564:	08006ac4 	.word	0x08006ac4
 8003568:	40007000 	.word	0x40007000
 800356c:	00001388 	.word	0x00001388
 8003570:	efffffff 	.word	0xefffffff
 8003574:	00000201 	.word	0x00000201
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8003578:	4ba5      	ldr	r3, [pc, #660]	; (8003810 <HAL_RCC_OscConfig+0x8c0>)
 800357a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800357c:	2202      	movs	r2, #2
 800357e:	4013      	ands	r3, r2
 8003580:	d1e5      	bne.n	800354e <HAL_RCC_OscConfig+0x5fe>
  }
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	6a1b      	ldr	r3, [r3, #32]
 8003586:	2b00      	cmp	r3, #0
 8003588:	d00e      	beq.n	80035a8 <HAL_RCC_OscConfig+0x658>
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	6a1b      	ldr	r3, [r3, #32]
 800358e:	2b01      	cmp	r3, #1
 8003590:	d00a      	beq.n	80035a8 <HAL_RCC_OscConfig+0x658>
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	6a1b      	ldr	r3, [r3, #32]
 8003596:	2b02      	cmp	r3, #2
 8003598:	d006      	beq.n	80035a8 <HAL_RCC_OscConfig+0x658>
 800359a:	239d      	movs	r3, #157	; 0x9d
 800359c:	009a      	lsls	r2, r3, #2
 800359e:	4b9d      	ldr	r3, [pc, #628]	; (8003814 <HAL_RCC_OscConfig+0x8c4>)
 80035a0:	0011      	movs	r1, r2
 80035a2:	0018      	movs	r0, r3
 80035a4:	f7fd f9e3 	bl	800096e <assert_failed>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	6a1b      	ldr	r3, [r3, #32]
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d100      	bne.n	80035b2 <HAL_RCC_OscConfig+0x662>
 80035b0:	e129      	b.n	8003806 <HAL_RCC_OscConfig+0x8b6>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80035b2:	4b97      	ldr	r3, [pc, #604]	; (8003810 <HAL_RCC_OscConfig+0x8c0>)
 80035b4:	685b      	ldr	r3, [r3, #4]
 80035b6:	220c      	movs	r2, #12
 80035b8:	4013      	ands	r3, r2
 80035ba:	2b08      	cmp	r3, #8
 80035bc:	d100      	bne.n	80035c0 <HAL_RCC_OscConfig+0x670>
 80035be:	e120      	b.n	8003802 <HAL_RCC_OscConfig+0x8b2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	6a1b      	ldr	r3, [r3, #32]
 80035c4:	2b02      	cmp	r3, #2
 80035c6:	d000      	beq.n	80035ca <HAL_RCC_OscConfig+0x67a>
 80035c8:	e100      	b.n	80037cc <HAL_RCC_OscConfig+0x87c>
      {
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d00b      	beq.n	80035ea <HAL_RCC_OscConfig+0x69a>
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80035d6:	2380      	movs	r3, #128	; 0x80
 80035d8:	025b      	lsls	r3, r3, #9
 80035da:	429a      	cmp	r2, r3
 80035dc:	d005      	beq.n	80035ea <HAL_RCC_OscConfig+0x69a>
 80035de:	4a8e      	ldr	r2, [pc, #568]	; (8003818 <HAL_RCC_OscConfig+0x8c8>)
 80035e0:	4b8c      	ldr	r3, [pc, #560]	; (8003814 <HAL_RCC_OscConfig+0x8c4>)
 80035e2:	0011      	movs	r1, r2
 80035e4:	0018      	movs	r0, r3
 80035e6:	f7fd f9c2 	bl	800096e <assert_failed>
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d059      	beq.n	80036a6 <HAL_RCC_OscConfig+0x756>
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80035f6:	2380      	movs	r3, #128	; 0x80
 80035f8:	02db      	lsls	r3, r3, #11
 80035fa:	429a      	cmp	r2, r3
 80035fc:	d053      	beq.n	80036a6 <HAL_RCC_OscConfig+0x756>
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003602:	2380      	movs	r3, #128	; 0x80
 8003604:	031b      	lsls	r3, r3, #12
 8003606:	429a      	cmp	r2, r3
 8003608:	d04d      	beq.n	80036a6 <HAL_RCC_OscConfig+0x756>
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800360e:	23c0      	movs	r3, #192	; 0xc0
 8003610:	031b      	lsls	r3, r3, #12
 8003612:	429a      	cmp	r2, r3
 8003614:	d047      	beq.n	80036a6 <HAL_RCC_OscConfig+0x756>
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800361a:	2380      	movs	r3, #128	; 0x80
 800361c:	035b      	lsls	r3, r3, #13
 800361e:	429a      	cmp	r2, r3
 8003620:	d041      	beq.n	80036a6 <HAL_RCC_OscConfig+0x756>
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003626:	23a0      	movs	r3, #160	; 0xa0
 8003628:	035b      	lsls	r3, r3, #13
 800362a:	429a      	cmp	r2, r3
 800362c:	d03b      	beq.n	80036a6 <HAL_RCC_OscConfig+0x756>
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003632:	23c0      	movs	r3, #192	; 0xc0
 8003634:	035b      	lsls	r3, r3, #13
 8003636:	429a      	cmp	r2, r3
 8003638:	d035      	beq.n	80036a6 <HAL_RCC_OscConfig+0x756>
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800363e:	23e0      	movs	r3, #224	; 0xe0
 8003640:	035b      	lsls	r3, r3, #13
 8003642:	429a      	cmp	r2, r3
 8003644:	d02f      	beq.n	80036a6 <HAL_RCC_OscConfig+0x756>
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800364a:	2380      	movs	r3, #128	; 0x80
 800364c:	039b      	lsls	r3, r3, #14
 800364e:	429a      	cmp	r2, r3
 8003650:	d029      	beq.n	80036a6 <HAL_RCC_OscConfig+0x756>
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003656:	2390      	movs	r3, #144	; 0x90
 8003658:	039b      	lsls	r3, r3, #14
 800365a:	429a      	cmp	r2, r3
 800365c:	d023      	beq.n	80036a6 <HAL_RCC_OscConfig+0x756>
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003662:	23a0      	movs	r3, #160	; 0xa0
 8003664:	039b      	lsls	r3, r3, #14
 8003666:	429a      	cmp	r2, r3
 8003668:	d01d      	beq.n	80036a6 <HAL_RCC_OscConfig+0x756>
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800366e:	23b0      	movs	r3, #176	; 0xb0
 8003670:	039b      	lsls	r3, r3, #14
 8003672:	429a      	cmp	r2, r3
 8003674:	d017      	beq.n	80036a6 <HAL_RCC_OscConfig+0x756>
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800367a:	23c0      	movs	r3, #192	; 0xc0
 800367c:	039b      	lsls	r3, r3, #14
 800367e:	429a      	cmp	r2, r3
 8003680:	d011      	beq.n	80036a6 <HAL_RCC_OscConfig+0x756>
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003686:	23d0      	movs	r3, #208	; 0xd0
 8003688:	039b      	lsls	r3, r3, #14
 800368a:	429a      	cmp	r2, r3
 800368c:	d00b      	beq.n	80036a6 <HAL_RCC_OscConfig+0x756>
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003692:	23e0      	movs	r3, #224	; 0xe0
 8003694:	039b      	lsls	r3, r3, #14
 8003696:	429a      	cmp	r2, r3
 8003698:	d005      	beq.n	80036a6 <HAL_RCC_OscConfig+0x756>
 800369a:	4a60      	ldr	r2, [pc, #384]	; (800381c <HAL_RCC_OscConfig+0x8cc>)
 800369c:	4b5d      	ldr	r3, [pc, #372]	; (8003814 <HAL_RCC_OscConfig+0x8c4>)
 800369e:	0011      	movs	r1, r2
 80036a0:	0018      	movs	r0, r3
 80036a2:	f7fd f964 	bl	800096e <assert_failed>
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d041      	beq.n	8003732 <HAL_RCC_OscConfig+0x7e2>
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036b2:	2b01      	cmp	r3, #1
 80036b4:	d03d      	beq.n	8003732 <HAL_RCC_OscConfig+0x7e2>
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036ba:	2b02      	cmp	r3, #2
 80036bc:	d039      	beq.n	8003732 <HAL_RCC_OscConfig+0x7e2>
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036c2:	2b03      	cmp	r3, #3
 80036c4:	d035      	beq.n	8003732 <HAL_RCC_OscConfig+0x7e2>
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036ca:	2b04      	cmp	r3, #4
 80036cc:	d031      	beq.n	8003732 <HAL_RCC_OscConfig+0x7e2>
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036d2:	2b05      	cmp	r3, #5
 80036d4:	d02d      	beq.n	8003732 <HAL_RCC_OscConfig+0x7e2>
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036da:	2b06      	cmp	r3, #6
 80036dc:	d029      	beq.n	8003732 <HAL_RCC_OscConfig+0x7e2>
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036e2:	2b07      	cmp	r3, #7
 80036e4:	d025      	beq.n	8003732 <HAL_RCC_OscConfig+0x7e2>
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036ea:	2b08      	cmp	r3, #8
 80036ec:	d021      	beq.n	8003732 <HAL_RCC_OscConfig+0x7e2>
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036f2:	2b09      	cmp	r3, #9
 80036f4:	d01d      	beq.n	8003732 <HAL_RCC_OscConfig+0x7e2>
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036fa:	2b0a      	cmp	r3, #10
 80036fc:	d019      	beq.n	8003732 <HAL_RCC_OscConfig+0x7e2>
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003702:	2b0b      	cmp	r3, #11
 8003704:	d015      	beq.n	8003732 <HAL_RCC_OscConfig+0x7e2>
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800370a:	2b0c      	cmp	r3, #12
 800370c:	d011      	beq.n	8003732 <HAL_RCC_OscConfig+0x7e2>
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003712:	2b0d      	cmp	r3, #13
 8003714:	d00d      	beq.n	8003732 <HAL_RCC_OscConfig+0x7e2>
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800371a:	2b0e      	cmp	r3, #14
 800371c:	d009      	beq.n	8003732 <HAL_RCC_OscConfig+0x7e2>
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003722:	2b0f      	cmp	r3, #15
 8003724:	d005      	beq.n	8003732 <HAL_RCC_OscConfig+0x7e2>
 8003726:	4a3e      	ldr	r2, [pc, #248]	; (8003820 <HAL_RCC_OscConfig+0x8d0>)
 8003728:	4b3a      	ldr	r3, [pc, #232]	; (8003814 <HAL_RCC_OscConfig+0x8c4>)
 800372a:	0011      	movs	r1, r2
 800372c:	0018      	movs	r0, r3
 800372e:	f7fd f91e 	bl	800096e <assert_failed>
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003732:	4b37      	ldr	r3, [pc, #220]	; (8003810 <HAL_RCC_OscConfig+0x8c0>)
 8003734:	681a      	ldr	r2, [r3, #0]
 8003736:	4b36      	ldr	r3, [pc, #216]	; (8003810 <HAL_RCC_OscConfig+0x8c0>)
 8003738:	493a      	ldr	r1, [pc, #232]	; (8003824 <HAL_RCC_OscConfig+0x8d4>)
 800373a:	400a      	ands	r2, r1
 800373c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800373e:	f7fd ff6f 	bl	8001620 <HAL_GetTick>
 8003742:	0003      	movs	r3, r0
 8003744:	613b      	str	r3, [r7, #16]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003746:	e008      	b.n	800375a <HAL_RCC_OscConfig+0x80a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003748:	f7fd ff6a 	bl	8001620 <HAL_GetTick>
 800374c:	0002      	movs	r2, r0
 800374e:	693b      	ldr	r3, [r7, #16]
 8003750:	1ad3      	subs	r3, r2, r3
 8003752:	2b02      	cmp	r3, #2
 8003754:	d901      	bls.n	800375a <HAL_RCC_OscConfig+0x80a>
          {
            return HAL_TIMEOUT;
 8003756:	2303      	movs	r3, #3
 8003758:	e056      	b.n	8003808 <HAL_RCC_OscConfig+0x8b8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800375a:	4b2d      	ldr	r3, [pc, #180]	; (8003810 <HAL_RCC_OscConfig+0x8c0>)
 800375c:	681a      	ldr	r2, [r3, #0]
 800375e:	2380      	movs	r3, #128	; 0x80
 8003760:	049b      	lsls	r3, r3, #18
 8003762:	4013      	ands	r3, r2
 8003764:	d1f0      	bne.n	8003748 <HAL_RCC_OscConfig+0x7f8>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003766:	4b2a      	ldr	r3, [pc, #168]	; (8003810 <HAL_RCC_OscConfig+0x8c0>)
 8003768:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800376a:	220f      	movs	r2, #15
 800376c:	4393      	bics	r3, r2
 800376e:	0019      	movs	r1, r3
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003774:	4b26      	ldr	r3, [pc, #152]	; (8003810 <HAL_RCC_OscConfig+0x8c0>)
 8003776:	430a      	orrs	r2, r1
 8003778:	62da      	str	r2, [r3, #44]	; 0x2c
 800377a:	4b25      	ldr	r3, [pc, #148]	; (8003810 <HAL_RCC_OscConfig+0x8c0>)
 800377c:	685b      	ldr	r3, [r3, #4]
 800377e:	4a2a      	ldr	r2, [pc, #168]	; (8003828 <HAL_RCC_OscConfig+0x8d8>)
 8003780:	4013      	ands	r3, r2
 8003782:	0019      	movs	r1, r3
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800378c:	431a      	orrs	r2, r3
 800378e:	4b20      	ldr	r3, [pc, #128]	; (8003810 <HAL_RCC_OscConfig+0x8c0>)
 8003790:	430a      	orrs	r2, r1
 8003792:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003794:	4b1e      	ldr	r3, [pc, #120]	; (8003810 <HAL_RCC_OscConfig+0x8c0>)
 8003796:	681a      	ldr	r2, [r3, #0]
 8003798:	4b1d      	ldr	r3, [pc, #116]	; (8003810 <HAL_RCC_OscConfig+0x8c0>)
 800379a:	2180      	movs	r1, #128	; 0x80
 800379c:	0449      	lsls	r1, r1, #17
 800379e:	430a      	orrs	r2, r1
 80037a0:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037a2:	f7fd ff3d 	bl	8001620 <HAL_GetTick>
 80037a6:	0003      	movs	r3, r0
 80037a8:	613b      	str	r3, [r7, #16]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80037aa:	e008      	b.n	80037be <HAL_RCC_OscConfig+0x86e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80037ac:	f7fd ff38 	bl	8001620 <HAL_GetTick>
 80037b0:	0002      	movs	r2, r0
 80037b2:	693b      	ldr	r3, [r7, #16]
 80037b4:	1ad3      	subs	r3, r2, r3
 80037b6:	2b02      	cmp	r3, #2
 80037b8:	d901      	bls.n	80037be <HAL_RCC_OscConfig+0x86e>
          {
            return HAL_TIMEOUT;
 80037ba:	2303      	movs	r3, #3
 80037bc:	e024      	b.n	8003808 <HAL_RCC_OscConfig+0x8b8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80037be:	4b14      	ldr	r3, [pc, #80]	; (8003810 <HAL_RCC_OscConfig+0x8c0>)
 80037c0:	681a      	ldr	r2, [r3, #0]
 80037c2:	2380      	movs	r3, #128	; 0x80
 80037c4:	049b      	lsls	r3, r3, #18
 80037c6:	4013      	ands	r3, r2
 80037c8:	d0f0      	beq.n	80037ac <HAL_RCC_OscConfig+0x85c>
 80037ca:	e01c      	b.n	8003806 <HAL_RCC_OscConfig+0x8b6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80037cc:	4b10      	ldr	r3, [pc, #64]	; (8003810 <HAL_RCC_OscConfig+0x8c0>)
 80037ce:	681a      	ldr	r2, [r3, #0]
 80037d0:	4b0f      	ldr	r3, [pc, #60]	; (8003810 <HAL_RCC_OscConfig+0x8c0>)
 80037d2:	4914      	ldr	r1, [pc, #80]	; (8003824 <HAL_RCC_OscConfig+0x8d4>)
 80037d4:	400a      	ands	r2, r1
 80037d6:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037d8:	f7fd ff22 	bl	8001620 <HAL_GetTick>
 80037dc:	0003      	movs	r3, r0
 80037de:	613b      	str	r3, [r7, #16]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80037e0:	e008      	b.n	80037f4 <HAL_RCC_OscConfig+0x8a4>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80037e2:	f7fd ff1d 	bl	8001620 <HAL_GetTick>
 80037e6:	0002      	movs	r2, r0
 80037e8:	693b      	ldr	r3, [r7, #16]
 80037ea:	1ad3      	subs	r3, r2, r3
 80037ec:	2b02      	cmp	r3, #2
 80037ee:	d901      	bls.n	80037f4 <HAL_RCC_OscConfig+0x8a4>
          {
            return HAL_TIMEOUT;
 80037f0:	2303      	movs	r3, #3
 80037f2:	e009      	b.n	8003808 <HAL_RCC_OscConfig+0x8b8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80037f4:	4b06      	ldr	r3, [pc, #24]	; (8003810 <HAL_RCC_OscConfig+0x8c0>)
 80037f6:	681a      	ldr	r2, [r3, #0]
 80037f8:	2380      	movs	r3, #128	; 0x80
 80037fa:	049b      	lsls	r3, r3, #18
 80037fc:	4013      	ands	r3, r2
 80037fe:	d1f0      	bne.n	80037e2 <HAL_RCC_OscConfig+0x892>
 8003800:	e001      	b.n	8003806 <HAL_RCC_OscConfig+0x8b6>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8003802:	2301      	movs	r3, #1
 8003804:	e000      	b.n	8003808 <HAL_RCC_OscConfig+0x8b8>
    }
  }
  
  return HAL_OK;
 8003806:	2300      	movs	r3, #0
}
 8003808:	0018      	movs	r0, r3
 800380a:	46bd      	mov	sp, r7
 800380c:	b006      	add	sp, #24
 800380e:	bd80      	pop	{r7, pc}
 8003810:	40021000 	.word	0x40021000
 8003814:	08006ac4 	.word	0x08006ac4
 8003818:	0000027d 	.word	0x0000027d
 800381c:	0000027e 	.word	0x0000027e
 8003820:	0000027f 	.word	0x0000027f
 8003824:	feffffff 	.word	0xfeffffff
 8003828:	ffc2ffff 	.word	0xffc2ffff

0800382c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800382c:	b580      	push	{r7, lr}
 800382e:	b084      	sub	sp, #16
 8003830:	af00      	add	r7, sp, #0
 8003832:	6078      	str	r0, [r7, #4]
 8003834:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8003836:	2300      	movs	r3, #0
 8003838:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	2b00      	cmp	r3, #0
 800383e:	d105      	bne.n	800384c <HAL_RCC_ClockConfig+0x20>
 8003840:	4aac      	ldr	r2, [pc, #688]	; (8003af4 <HAL_RCC_ClockConfig+0x2c8>)
 8003842:	4bad      	ldr	r3, [pc, #692]	; (8003af8 <HAL_RCC_ClockConfig+0x2cc>)
 8003844:	0011      	movs	r1, r2
 8003846:	0018      	movs	r0, r3
 8003848:	f7fd f891 	bl	800096e <assert_failed>
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	2201      	movs	r2, #1
 8003852:	4013      	ands	r3, r2
 8003854:	d10f      	bne.n	8003876 <HAL_RCC_ClockConfig+0x4a>
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	2202      	movs	r2, #2
 800385c:	4013      	ands	r3, r2
 800385e:	d10a      	bne.n	8003876 <HAL_RCC_ClockConfig+0x4a>
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	2204      	movs	r2, #4
 8003866:	4013      	ands	r3, r2
 8003868:	d105      	bne.n	8003876 <HAL_RCC_ClockConfig+0x4a>
 800386a:	4aa4      	ldr	r2, [pc, #656]	; (8003afc <HAL_RCC_ClockConfig+0x2d0>)
 800386c:	4ba2      	ldr	r3, [pc, #648]	; (8003af8 <HAL_RCC_ClockConfig+0x2cc>)
 800386e:	0011      	movs	r1, r2
 8003870:	0018      	movs	r0, r3
 8003872:	f7fd f87c 	bl	800096e <assert_failed>
  assert_param(IS_FLASH_LATENCY(FLatency));
 8003876:	683b      	ldr	r3, [r7, #0]
 8003878:	2b00      	cmp	r3, #0
 800387a:	d009      	beq.n	8003890 <HAL_RCC_ClockConfig+0x64>
 800387c:	683b      	ldr	r3, [r7, #0]
 800387e:	2b01      	cmp	r3, #1
 8003880:	d006      	beq.n	8003890 <HAL_RCC_ClockConfig+0x64>
 8003882:	23b7      	movs	r3, #183	; 0xb7
 8003884:	009a      	lsls	r2, r3, #2
 8003886:	4b9c      	ldr	r3, [pc, #624]	; (8003af8 <HAL_RCC_ClockConfig+0x2cc>)
 8003888:	0011      	movs	r1, r2
 800388a:	0018      	movs	r0, r3
 800388c:	f7fd f86f 	bl	800096e <assert_failed>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8003890:	4b9b      	ldr	r3, [pc, #620]	; (8003b00 <HAL_RCC_ClockConfig+0x2d4>)
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	2201      	movs	r2, #1
 8003896:	4013      	ands	r3, r2
 8003898:	683a      	ldr	r2, [r7, #0]
 800389a:	429a      	cmp	r2, r3
 800389c:	d911      	bls.n	80038c2 <HAL_RCC_ClockConfig+0x96>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800389e:	4b98      	ldr	r3, [pc, #608]	; (8003b00 <HAL_RCC_ClockConfig+0x2d4>)
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	2201      	movs	r2, #1
 80038a4:	4393      	bics	r3, r2
 80038a6:	0019      	movs	r1, r3
 80038a8:	4b95      	ldr	r3, [pc, #596]	; (8003b00 <HAL_RCC_ClockConfig+0x2d4>)
 80038aa:	683a      	ldr	r2, [r7, #0]
 80038ac:	430a      	orrs	r2, r1
 80038ae:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80038b0:	4b93      	ldr	r3, [pc, #588]	; (8003b00 <HAL_RCC_ClockConfig+0x2d4>)
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	2201      	movs	r2, #1
 80038b6:	4013      	ands	r3, r2
 80038b8:	683a      	ldr	r2, [r7, #0]
 80038ba:	429a      	cmp	r2, r3
 80038bc:	d001      	beq.n	80038c2 <HAL_RCC_ClockConfig+0x96>
    {
      return HAL_ERROR;
 80038be:	2301      	movs	r3, #1
 80038c0:	e114      	b.n	8003aec <HAL_RCC_ClockConfig+0x2c0>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	2202      	movs	r2, #2
 80038c8:	4013      	ands	r3, r2
 80038ca:	d033      	beq.n	8003934 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	689b      	ldr	r3, [r3, #8]
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d025      	beq.n	8003920 <HAL_RCC_ClockConfig+0xf4>
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	689b      	ldr	r3, [r3, #8]
 80038d8:	2b80      	cmp	r3, #128	; 0x80
 80038da:	d021      	beq.n	8003920 <HAL_RCC_ClockConfig+0xf4>
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	689b      	ldr	r3, [r3, #8]
 80038e0:	2b90      	cmp	r3, #144	; 0x90
 80038e2:	d01d      	beq.n	8003920 <HAL_RCC_ClockConfig+0xf4>
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	689b      	ldr	r3, [r3, #8]
 80038e8:	2ba0      	cmp	r3, #160	; 0xa0
 80038ea:	d019      	beq.n	8003920 <HAL_RCC_ClockConfig+0xf4>
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	689b      	ldr	r3, [r3, #8]
 80038f0:	2bb0      	cmp	r3, #176	; 0xb0
 80038f2:	d015      	beq.n	8003920 <HAL_RCC_ClockConfig+0xf4>
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	689b      	ldr	r3, [r3, #8]
 80038f8:	2bc0      	cmp	r3, #192	; 0xc0
 80038fa:	d011      	beq.n	8003920 <HAL_RCC_ClockConfig+0xf4>
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	689b      	ldr	r3, [r3, #8]
 8003900:	2bd0      	cmp	r3, #208	; 0xd0
 8003902:	d00d      	beq.n	8003920 <HAL_RCC_ClockConfig+0xf4>
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	689b      	ldr	r3, [r3, #8]
 8003908:	2be0      	cmp	r3, #224	; 0xe0
 800390a:	d009      	beq.n	8003920 <HAL_RCC_ClockConfig+0xf4>
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	689b      	ldr	r3, [r3, #8]
 8003910:	2bf0      	cmp	r3, #240	; 0xf0
 8003912:	d005      	beq.n	8003920 <HAL_RCC_ClockConfig+0xf4>
 8003914:	4a7b      	ldr	r2, [pc, #492]	; (8003b04 <HAL_RCC_ClockConfig+0x2d8>)
 8003916:	4b78      	ldr	r3, [pc, #480]	; (8003af8 <HAL_RCC_ClockConfig+0x2cc>)
 8003918:	0011      	movs	r1, r2
 800391a:	0018      	movs	r0, r3
 800391c:	f7fd f827 	bl	800096e <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003920:	4b79      	ldr	r3, [pc, #484]	; (8003b08 <HAL_RCC_ClockConfig+0x2dc>)
 8003922:	685b      	ldr	r3, [r3, #4]
 8003924:	22f0      	movs	r2, #240	; 0xf0
 8003926:	4393      	bics	r3, r2
 8003928:	0019      	movs	r1, r3
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	689a      	ldr	r2, [r3, #8]
 800392e:	4b76      	ldr	r3, [pc, #472]	; (8003b08 <HAL_RCC_ClockConfig+0x2dc>)
 8003930:	430a      	orrs	r2, r1
 8003932:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	2201      	movs	r2, #1
 800393a:	4013      	ands	r3, r2
 800393c:	d100      	bne.n	8003940 <HAL_RCC_ClockConfig+0x114>
 800393e:	e079      	b.n	8003a34 <HAL_RCC_ClockConfig+0x208>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	685b      	ldr	r3, [r3, #4]
 8003944:	2b00      	cmp	r3, #0
 8003946:	d00d      	beq.n	8003964 <HAL_RCC_ClockConfig+0x138>
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	685b      	ldr	r3, [r3, #4]
 800394c:	2b01      	cmp	r3, #1
 800394e:	d009      	beq.n	8003964 <HAL_RCC_ClockConfig+0x138>
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	685b      	ldr	r3, [r3, #4]
 8003954:	2b02      	cmp	r3, #2
 8003956:	d005      	beq.n	8003964 <HAL_RCC_ClockConfig+0x138>
 8003958:	4a6c      	ldr	r2, [pc, #432]	; (8003b0c <HAL_RCC_ClockConfig+0x2e0>)
 800395a:	4b67      	ldr	r3, [pc, #412]	; (8003af8 <HAL_RCC_ClockConfig+0x2cc>)
 800395c:	0011      	movs	r1, r2
 800395e:	0018      	movs	r0, r3
 8003960:	f7fd f805 	bl	800096e <assert_failed>
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	685b      	ldr	r3, [r3, #4]
 8003968:	2b01      	cmp	r3, #1
 800396a:	d107      	bne.n	800397c <HAL_RCC_ClockConfig+0x150>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800396c:	4b66      	ldr	r3, [pc, #408]	; (8003b08 <HAL_RCC_ClockConfig+0x2dc>)
 800396e:	681a      	ldr	r2, [r3, #0]
 8003970:	2380      	movs	r3, #128	; 0x80
 8003972:	029b      	lsls	r3, r3, #10
 8003974:	4013      	ands	r3, r2
 8003976:	d114      	bne.n	80039a2 <HAL_RCC_ClockConfig+0x176>
      {
        return HAL_ERROR;
 8003978:	2301      	movs	r3, #1
 800397a:	e0b7      	b.n	8003aec <HAL_RCC_ClockConfig+0x2c0>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	685b      	ldr	r3, [r3, #4]
 8003980:	2b02      	cmp	r3, #2
 8003982:	d107      	bne.n	8003994 <HAL_RCC_ClockConfig+0x168>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003984:	4b60      	ldr	r3, [pc, #384]	; (8003b08 <HAL_RCC_ClockConfig+0x2dc>)
 8003986:	681a      	ldr	r2, [r3, #0]
 8003988:	2380      	movs	r3, #128	; 0x80
 800398a:	049b      	lsls	r3, r3, #18
 800398c:	4013      	ands	r3, r2
 800398e:	d108      	bne.n	80039a2 <HAL_RCC_ClockConfig+0x176>
      {
        return HAL_ERROR;
 8003990:	2301      	movs	r3, #1
 8003992:	e0ab      	b.n	8003aec <HAL_RCC_ClockConfig+0x2c0>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003994:	4b5c      	ldr	r3, [pc, #368]	; (8003b08 <HAL_RCC_ClockConfig+0x2dc>)
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	2202      	movs	r2, #2
 800399a:	4013      	ands	r3, r2
 800399c:	d101      	bne.n	80039a2 <HAL_RCC_ClockConfig+0x176>
      {
        return HAL_ERROR;
 800399e:	2301      	movs	r3, #1
 80039a0:	e0a4      	b.n	8003aec <HAL_RCC_ClockConfig+0x2c0>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80039a2:	4b59      	ldr	r3, [pc, #356]	; (8003b08 <HAL_RCC_ClockConfig+0x2dc>)
 80039a4:	685b      	ldr	r3, [r3, #4]
 80039a6:	2203      	movs	r2, #3
 80039a8:	4393      	bics	r3, r2
 80039aa:	0019      	movs	r1, r3
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	685a      	ldr	r2, [r3, #4]
 80039b0:	4b55      	ldr	r3, [pc, #340]	; (8003b08 <HAL_RCC_ClockConfig+0x2dc>)
 80039b2:	430a      	orrs	r2, r1
 80039b4:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80039b6:	f7fd fe33 	bl	8001620 <HAL_GetTick>
 80039ba:	0003      	movs	r3, r0
 80039bc:	60fb      	str	r3, [r7, #12]
    
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	685b      	ldr	r3, [r3, #4]
 80039c2:	2b01      	cmp	r3, #1
 80039c4:	d111      	bne.n	80039ea <HAL_RCC_ClockConfig+0x1be>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80039c6:	e009      	b.n	80039dc <HAL_RCC_ClockConfig+0x1b0>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80039c8:	f7fd fe2a 	bl	8001620 <HAL_GetTick>
 80039cc:	0002      	movs	r2, r0
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	1ad3      	subs	r3, r2, r3
 80039d2:	4a4f      	ldr	r2, [pc, #316]	; (8003b10 <HAL_RCC_ClockConfig+0x2e4>)
 80039d4:	4293      	cmp	r3, r2
 80039d6:	d901      	bls.n	80039dc <HAL_RCC_ClockConfig+0x1b0>
        {
          return HAL_TIMEOUT;
 80039d8:	2303      	movs	r3, #3
 80039da:	e087      	b.n	8003aec <HAL_RCC_ClockConfig+0x2c0>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80039dc:	4b4a      	ldr	r3, [pc, #296]	; (8003b08 <HAL_RCC_ClockConfig+0x2dc>)
 80039de:	685b      	ldr	r3, [r3, #4]
 80039e0:	220c      	movs	r2, #12
 80039e2:	4013      	ands	r3, r2
 80039e4:	2b04      	cmp	r3, #4
 80039e6:	d1ef      	bne.n	80039c8 <HAL_RCC_ClockConfig+0x19c>
 80039e8:	e024      	b.n	8003a34 <HAL_RCC_ClockConfig+0x208>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	685b      	ldr	r3, [r3, #4]
 80039ee:	2b02      	cmp	r3, #2
 80039f0:	d11b      	bne.n	8003a2a <HAL_RCC_ClockConfig+0x1fe>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80039f2:	e009      	b.n	8003a08 <HAL_RCC_ClockConfig+0x1dc>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80039f4:	f7fd fe14 	bl	8001620 <HAL_GetTick>
 80039f8:	0002      	movs	r2, r0
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	1ad3      	subs	r3, r2, r3
 80039fe:	4a44      	ldr	r2, [pc, #272]	; (8003b10 <HAL_RCC_ClockConfig+0x2e4>)
 8003a00:	4293      	cmp	r3, r2
 8003a02:	d901      	bls.n	8003a08 <HAL_RCC_ClockConfig+0x1dc>
        {
          return HAL_TIMEOUT;
 8003a04:	2303      	movs	r3, #3
 8003a06:	e071      	b.n	8003aec <HAL_RCC_ClockConfig+0x2c0>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003a08:	4b3f      	ldr	r3, [pc, #252]	; (8003b08 <HAL_RCC_ClockConfig+0x2dc>)
 8003a0a:	685b      	ldr	r3, [r3, #4]
 8003a0c:	220c      	movs	r2, #12
 8003a0e:	4013      	ands	r3, r2
 8003a10:	2b08      	cmp	r3, #8
 8003a12:	d1ef      	bne.n	80039f4 <HAL_RCC_ClockConfig+0x1c8>
 8003a14:	e00e      	b.n	8003a34 <HAL_RCC_ClockConfig+0x208>
#endif /* RCC_CFGR_SWS_HSI48 */
    else
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003a16:	f7fd fe03 	bl	8001620 <HAL_GetTick>
 8003a1a:	0002      	movs	r2, r0
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	1ad3      	subs	r3, r2, r3
 8003a20:	4a3b      	ldr	r2, [pc, #236]	; (8003b10 <HAL_RCC_ClockConfig+0x2e4>)
 8003a22:	4293      	cmp	r3, r2
 8003a24:	d901      	bls.n	8003a2a <HAL_RCC_ClockConfig+0x1fe>
        {
          return HAL_TIMEOUT;
 8003a26:	2303      	movs	r3, #3
 8003a28:	e060      	b.n	8003aec <HAL_RCC_ClockConfig+0x2c0>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8003a2a:	4b37      	ldr	r3, [pc, #220]	; (8003b08 <HAL_RCC_ClockConfig+0x2dc>)
 8003a2c:	685b      	ldr	r3, [r3, #4]
 8003a2e:	220c      	movs	r2, #12
 8003a30:	4013      	ands	r3, r2
 8003a32:	d1f0      	bne.n	8003a16 <HAL_RCC_ClockConfig+0x1ea>
        }
      }
    }      
  }    
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 8003a34:	4b32      	ldr	r3, [pc, #200]	; (8003b00 <HAL_RCC_ClockConfig+0x2d4>)
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	2201      	movs	r2, #1
 8003a3a:	4013      	ands	r3, r2
 8003a3c:	683a      	ldr	r2, [r7, #0]
 8003a3e:	429a      	cmp	r2, r3
 8003a40:	d211      	bcs.n	8003a66 <HAL_RCC_ClockConfig+0x23a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a42:	4b2f      	ldr	r3, [pc, #188]	; (8003b00 <HAL_RCC_ClockConfig+0x2d4>)
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	2201      	movs	r2, #1
 8003a48:	4393      	bics	r3, r2
 8003a4a:	0019      	movs	r1, r3
 8003a4c:	4b2c      	ldr	r3, [pc, #176]	; (8003b00 <HAL_RCC_ClockConfig+0x2d4>)
 8003a4e:	683a      	ldr	r2, [r7, #0]
 8003a50:	430a      	orrs	r2, r1
 8003a52:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8003a54:	4b2a      	ldr	r3, [pc, #168]	; (8003b00 <HAL_RCC_ClockConfig+0x2d4>)
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	2201      	movs	r2, #1
 8003a5a:	4013      	ands	r3, r2
 8003a5c:	683a      	ldr	r2, [r7, #0]
 8003a5e:	429a      	cmp	r2, r3
 8003a60:	d001      	beq.n	8003a66 <HAL_RCC_ClockConfig+0x23a>
    {
      return HAL_ERROR;
 8003a62:	2301      	movs	r3, #1
 8003a64:	e042      	b.n	8003aec <HAL_RCC_ClockConfig+0x2c0>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	2204      	movs	r2, #4
 8003a6c:	4013      	ands	r3, r2
 8003a6e:	d02b      	beq.n	8003ac8 <HAL_RCC_ClockConfig+0x29c>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	68db      	ldr	r3, [r3, #12]
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d01d      	beq.n	8003ab4 <HAL_RCC_ClockConfig+0x288>
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	68da      	ldr	r2, [r3, #12]
 8003a7c:	2380      	movs	r3, #128	; 0x80
 8003a7e:	00db      	lsls	r3, r3, #3
 8003a80:	429a      	cmp	r2, r3
 8003a82:	d017      	beq.n	8003ab4 <HAL_RCC_ClockConfig+0x288>
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	68da      	ldr	r2, [r3, #12]
 8003a88:	23a0      	movs	r3, #160	; 0xa0
 8003a8a:	00db      	lsls	r3, r3, #3
 8003a8c:	429a      	cmp	r2, r3
 8003a8e:	d011      	beq.n	8003ab4 <HAL_RCC_ClockConfig+0x288>
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	68da      	ldr	r2, [r3, #12]
 8003a94:	23c0      	movs	r3, #192	; 0xc0
 8003a96:	00db      	lsls	r3, r3, #3
 8003a98:	429a      	cmp	r2, r3
 8003a9a:	d00b      	beq.n	8003ab4 <HAL_RCC_ClockConfig+0x288>
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	68da      	ldr	r2, [r3, #12]
 8003aa0:	23e0      	movs	r3, #224	; 0xe0
 8003aa2:	00db      	lsls	r3, r3, #3
 8003aa4:	429a      	cmp	r2, r3
 8003aa6:	d005      	beq.n	8003ab4 <HAL_RCC_ClockConfig+0x288>
 8003aa8:	4a1a      	ldr	r2, [pc, #104]	; (8003b14 <HAL_RCC_ClockConfig+0x2e8>)
 8003aaa:	4b13      	ldr	r3, [pc, #76]	; (8003af8 <HAL_RCC_ClockConfig+0x2cc>)
 8003aac:	0011      	movs	r1, r2
 8003aae:	0018      	movs	r0, r3
 8003ab0:	f7fc ff5d 	bl	800096e <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8003ab4:	4b14      	ldr	r3, [pc, #80]	; (8003b08 <HAL_RCC_ClockConfig+0x2dc>)
 8003ab6:	685b      	ldr	r3, [r3, #4]
 8003ab8:	4a17      	ldr	r2, [pc, #92]	; (8003b18 <HAL_RCC_ClockConfig+0x2ec>)
 8003aba:	4013      	ands	r3, r2
 8003abc:	0019      	movs	r1, r3
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	68da      	ldr	r2, [r3, #12]
 8003ac2:	4b11      	ldr	r3, [pc, #68]	; (8003b08 <HAL_RCC_ClockConfig+0x2dc>)
 8003ac4:	430a      	orrs	r2, r1
 8003ac6:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8003ac8:	f000 f82c 	bl	8003b24 <HAL_RCC_GetSysClockFreq>
 8003acc:	0001      	movs	r1, r0
 8003ace:	4b0e      	ldr	r3, [pc, #56]	; (8003b08 <HAL_RCC_ClockConfig+0x2dc>)
 8003ad0:	685b      	ldr	r3, [r3, #4]
 8003ad2:	091b      	lsrs	r3, r3, #4
 8003ad4:	220f      	movs	r2, #15
 8003ad6:	4013      	ands	r3, r2
 8003ad8:	4a10      	ldr	r2, [pc, #64]	; (8003b1c <HAL_RCC_ClockConfig+0x2f0>)
 8003ada:	5cd3      	ldrb	r3, [r2, r3]
 8003adc:	000a      	movs	r2, r1
 8003ade:	40da      	lsrs	r2, r3
 8003ae0:	4b0f      	ldr	r3, [pc, #60]	; (8003b20 <HAL_RCC_ClockConfig+0x2f4>)
 8003ae2:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8003ae4:	2000      	movs	r0, #0
 8003ae6:	f7fd fd73 	bl	80015d0 <HAL_InitTick>
  
  return HAL_OK;
 8003aea:	2300      	movs	r3, #0
}
 8003aec:	0018      	movs	r0, r3
 8003aee:	46bd      	mov	sp, r7
 8003af0:	b004      	add	sp, #16
 8003af2:	bd80      	pop	{r7, pc}
 8003af4:	000002da 	.word	0x000002da
 8003af8:	08006ac4 	.word	0x08006ac4
 8003afc:	000002db 	.word	0x000002db
 8003b00:	40022000 	.word	0x40022000
 8003b04:	000002f3 	.word	0x000002f3
 8003b08:	40021000 	.word	0x40021000
 8003b0c:	000002fa 	.word	0x000002fa
 8003b10:	00001388 	.word	0x00001388
 8003b14:	00000363 	.word	0x00000363
 8003b18:	fffff8ff 	.word	0xfffff8ff
 8003b1c:	08006bcc 	.word	0x08006bcc
 8003b20:	20000000 	.word	0x20000000

08003b24 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003b24:	b590      	push	{r4, r7, lr}
 8003b26:	b08f      	sub	sp, #60	; 0x3c
 8003b28:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8003b2a:	2314      	movs	r3, #20
 8003b2c:	18fb      	adds	r3, r7, r3
 8003b2e:	4a2b      	ldr	r2, [pc, #172]	; (8003bdc <HAL_RCC_GetSysClockFreq+0xb8>)
 8003b30:	ca13      	ldmia	r2!, {r0, r1, r4}
 8003b32:	c313      	stmia	r3!, {r0, r1, r4}
 8003b34:	6812      	ldr	r2, [r2, #0]
 8003b36:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8003b38:	1d3b      	adds	r3, r7, #4
 8003b3a:	4a29      	ldr	r2, [pc, #164]	; (8003be0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003b3c:	ca13      	ldmia	r2!, {r0, r1, r4}
 8003b3e:	c313      	stmia	r3!, {r0, r1, r4}
 8003b40:	6812      	ldr	r2, [r2, #0]
 8003b42:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003b44:	2300      	movs	r3, #0
 8003b46:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003b48:	2300      	movs	r3, #0
 8003b4a:	62bb      	str	r3, [r7, #40]	; 0x28
 8003b4c:	2300      	movs	r3, #0
 8003b4e:	637b      	str	r3, [r7, #52]	; 0x34
 8003b50:	2300      	movs	r3, #0
 8003b52:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 8003b54:	2300      	movs	r3, #0
 8003b56:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 8003b58:	4b22      	ldr	r3, [pc, #136]	; (8003be4 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003b5a:	685b      	ldr	r3, [r3, #4]
 8003b5c:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003b5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b60:	220c      	movs	r2, #12
 8003b62:	4013      	ands	r3, r2
 8003b64:	2b04      	cmp	r3, #4
 8003b66:	d002      	beq.n	8003b6e <HAL_RCC_GetSysClockFreq+0x4a>
 8003b68:	2b08      	cmp	r3, #8
 8003b6a:	d003      	beq.n	8003b74 <HAL_RCC_GetSysClockFreq+0x50>
 8003b6c:	e02d      	b.n	8003bca <HAL_RCC_GetSysClockFreq+0xa6>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003b6e:	4b1e      	ldr	r3, [pc, #120]	; (8003be8 <HAL_RCC_GetSysClockFreq+0xc4>)
 8003b70:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8003b72:	e02d      	b.n	8003bd0 <HAL_RCC_GetSysClockFreq+0xac>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8003b74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b76:	0c9b      	lsrs	r3, r3, #18
 8003b78:	220f      	movs	r2, #15
 8003b7a:	4013      	ands	r3, r2
 8003b7c:	2214      	movs	r2, #20
 8003b7e:	18ba      	adds	r2, r7, r2
 8003b80:	5cd3      	ldrb	r3, [r2, r3]
 8003b82:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8003b84:	4b17      	ldr	r3, [pc, #92]	; (8003be4 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003b86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b88:	220f      	movs	r2, #15
 8003b8a:	4013      	ands	r3, r2
 8003b8c:	1d3a      	adds	r2, r7, #4
 8003b8e:	5cd3      	ldrb	r3, [r2, r3]
 8003b90:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8003b92:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003b94:	2380      	movs	r3, #128	; 0x80
 8003b96:	025b      	lsls	r3, r3, #9
 8003b98:	4013      	ands	r3, r2
 8003b9a:	d009      	beq.n	8003bb0 <HAL_RCC_GetSysClockFreq+0x8c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (HSE_VALUE / prediv) * pllmul;
 8003b9c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003b9e:	4812      	ldr	r0, [pc, #72]	; (8003be8 <HAL_RCC_GetSysClockFreq+0xc4>)
 8003ba0:	f7fc fab2 	bl	8000108 <__udivsi3>
 8003ba4:	0003      	movs	r3, r0
 8003ba6:	001a      	movs	r2, r3
 8003ba8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003baa:	4353      	muls	r3, r2
 8003bac:	637b      	str	r3, [r7, #52]	; 0x34
 8003bae:	e009      	b.n	8003bc4 <HAL_RCC_GetSysClockFreq+0xa0>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (HSI_VALUE / prediv) * pllmul;
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1U) * pllmul);
 8003bb0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003bb2:	000a      	movs	r2, r1
 8003bb4:	0152      	lsls	r2, r2, #5
 8003bb6:	1a52      	subs	r2, r2, r1
 8003bb8:	0193      	lsls	r3, r2, #6
 8003bba:	1a9b      	subs	r3, r3, r2
 8003bbc:	00db      	lsls	r3, r3, #3
 8003bbe:	185b      	adds	r3, r3, r1
 8003bc0:	021b      	lsls	r3, r3, #8
 8003bc2:	637b      	str	r3, [r7, #52]	; 0x34
#endif
      }
      sysclockfreq = pllclk;
 8003bc4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003bc6:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8003bc8:	e002      	b.n	8003bd0 <HAL_RCC_GetSysClockFreq+0xac>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003bca:	4b07      	ldr	r3, [pc, #28]	; (8003be8 <HAL_RCC_GetSysClockFreq+0xc4>)
 8003bcc:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8003bce:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8003bd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8003bd2:	0018      	movs	r0, r3
 8003bd4:	46bd      	mov	sp, r7
 8003bd6:	b00f      	add	sp, #60	; 0x3c
 8003bd8:	bd90      	pop	{r4, r7, pc}
 8003bda:	46c0      	nop			; (mov r8, r8)
 8003bdc:	08006afc 	.word	0x08006afc
 8003be0:	08006b0c 	.word	0x08006b0c
 8003be4:	40021000 	.word	0x40021000
 8003be8:	007a1200 	.word	0x007a1200

08003bec <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003bec:	b580      	push	{r7, lr}
 8003bee:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003bf0:	4b02      	ldr	r3, [pc, #8]	; (8003bfc <HAL_RCC_GetHCLKFreq+0x10>)
 8003bf2:	681b      	ldr	r3, [r3, #0]
}
 8003bf4:	0018      	movs	r0, r3
 8003bf6:	46bd      	mov	sp, r7
 8003bf8:	bd80      	pop	{r7, pc}
 8003bfa:	46c0      	nop			; (mov r8, r8)
 8003bfc:	20000000 	.word	0x20000000

08003c00 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003c00:	b580      	push	{r7, lr}
 8003c02:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8003c04:	f7ff fff2 	bl	8003bec <HAL_RCC_GetHCLKFreq>
 8003c08:	0001      	movs	r1, r0
 8003c0a:	4b06      	ldr	r3, [pc, #24]	; (8003c24 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003c0c:	685b      	ldr	r3, [r3, #4]
 8003c0e:	0a1b      	lsrs	r3, r3, #8
 8003c10:	2207      	movs	r2, #7
 8003c12:	4013      	ands	r3, r2
 8003c14:	4a04      	ldr	r2, [pc, #16]	; (8003c28 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003c16:	5cd3      	ldrb	r3, [r2, r3]
 8003c18:	40d9      	lsrs	r1, r3
 8003c1a:	000b      	movs	r3, r1
}    
 8003c1c:	0018      	movs	r0, r3
 8003c1e:	46bd      	mov	sp, r7
 8003c20:	bd80      	pop	{r7, pc}
 8003c22:	46c0      	nop			; (mov r8, r8)
 8003c24:	40021000 	.word	0x40021000
 8003c28:	08006bdc 	.word	0x08006bdc

08003c2c <HAL_TIM_Base_Init>:
  *         parameters in the TIM_HandleTypeDef and create the associated handle.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003c2c:	b580      	push	{r7, lr}
 8003c2e:	b082      	sub	sp, #8
 8003c30:	af00      	add	r7, sp, #0
 8003c32:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if(htim == NULL)
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d101      	bne.n	8003c3e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003c3a:	2301      	movs	r3, #1
 8003c3c:	e087      	b.n	8003d4e <HAL_TIM_Base_Init+0x122>
  }

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	4a45      	ldr	r2, [pc, #276]	; (8003d58 <HAL_TIM_Base_Init+0x12c>)
 8003c44:	4293      	cmp	r3, r2
 8003c46:	d028      	beq.n	8003c9a <HAL_TIM_Base_Init+0x6e>
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681a      	ldr	r2, [r3, #0]
 8003c4c:	2380      	movs	r3, #128	; 0x80
 8003c4e:	05db      	lsls	r3, r3, #23
 8003c50:	429a      	cmp	r2, r3
 8003c52:	d022      	beq.n	8003c9a <HAL_TIM_Base_Init+0x6e>
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	4a40      	ldr	r2, [pc, #256]	; (8003d5c <HAL_TIM_Base_Init+0x130>)
 8003c5a:	4293      	cmp	r3, r2
 8003c5c:	d01d      	beq.n	8003c9a <HAL_TIM_Base_Init+0x6e>
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	4a3f      	ldr	r2, [pc, #252]	; (8003d60 <HAL_TIM_Base_Init+0x134>)
 8003c64:	4293      	cmp	r3, r2
 8003c66:	d018      	beq.n	8003c9a <HAL_TIM_Base_Init+0x6e>
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	4a3d      	ldr	r2, [pc, #244]	; (8003d64 <HAL_TIM_Base_Init+0x138>)
 8003c6e:	4293      	cmp	r3, r2
 8003c70:	d013      	beq.n	8003c9a <HAL_TIM_Base_Init+0x6e>
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	4a3c      	ldr	r2, [pc, #240]	; (8003d68 <HAL_TIM_Base_Init+0x13c>)
 8003c78:	4293      	cmp	r3, r2
 8003c7a:	d00e      	beq.n	8003c9a <HAL_TIM_Base_Init+0x6e>
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	4a3a      	ldr	r2, [pc, #232]	; (8003d6c <HAL_TIM_Base_Init+0x140>)
 8003c82:	4293      	cmp	r3, r2
 8003c84:	d009      	beq.n	8003c9a <HAL_TIM_Base_Init+0x6e>
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	4a39      	ldr	r2, [pc, #228]	; (8003d70 <HAL_TIM_Base_Init+0x144>)
 8003c8c:	4293      	cmp	r3, r2
 8003c8e:	d004      	beq.n	8003c9a <HAL_TIM_Base_Init+0x6e>
 8003c90:	4b38      	ldr	r3, [pc, #224]	; (8003d74 <HAL_TIM_Base_Init+0x148>)
 8003c92:	21d4      	movs	r1, #212	; 0xd4
 8003c94:	0018      	movs	r0, r3
 8003c96:	f7fc fe6a 	bl	800096e <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	689b      	ldr	r3, [r3, #8]
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d014      	beq.n	8003ccc <HAL_TIM_Base_Init+0xa0>
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	689b      	ldr	r3, [r3, #8]
 8003ca6:	2b10      	cmp	r3, #16
 8003ca8:	d010      	beq.n	8003ccc <HAL_TIM_Base_Init+0xa0>
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	689b      	ldr	r3, [r3, #8]
 8003cae:	2b20      	cmp	r3, #32
 8003cb0:	d00c      	beq.n	8003ccc <HAL_TIM_Base_Init+0xa0>
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	689b      	ldr	r3, [r3, #8]
 8003cb6:	2b40      	cmp	r3, #64	; 0x40
 8003cb8:	d008      	beq.n	8003ccc <HAL_TIM_Base_Init+0xa0>
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	689b      	ldr	r3, [r3, #8]
 8003cbe:	2b60      	cmp	r3, #96	; 0x60
 8003cc0:	d004      	beq.n	8003ccc <HAL_TIM_Base_Init+0xa0>
 8003cc2:	4b2c      	ldr	r3, [pc, #176]	; (8003d74 <HAL_TIM_Base_Init+0x148>)
 8003cc4:	21d5      	movs	r1, #213	; 0xd5
 8003cc6:	0018      	movs	r0, r3
 8003cc8:	f7fc fe51 	bl	800096e <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	691b      	ldr	r3, [r3, #16]
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d010      	beq.n	8003cf6 <HAL_TIM_Base_Init+0xca>
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	691a      	ldr	r2, [r3, #16]
 8003cd8:	2380      	movs	r3, #128	; 0x80
 8003cda:	005b      	lsls	r3, r3, #1
 8003cdc:	429a      	cmp	r2, r3
 8003cde:	d00a      	beq.n	8003cf6 <HAL_TIM_Base_Init+0xca>
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	691a      	ldr	r2, [r3, #16]
 8003ce4:	2380      	movs	r3, #128	; 0x80
 8003ce6:	009b      	lsls	r3, r3, #2
 8003ce8:	429a      	cmp	r2, r3
 8003cea:	d004      	beq.n	8003cf6 <HAL_TIM_Base_Init+0xca>
 8003cec:	4b21      	ldr	r3, [pc, #132]	; (8003d74 <HAL_TIM_Base_Init+0x148>)
 8003cee:	21d6      	movs	r1, #214	; 0xd6
 8003cf0:	0018      	movs	r0, r3
 8003cf2:	f7fc fe3c 	bl	800096e <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	699b      	ldr	r3, [r3, #24]
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d008      	beq.n	8003d10 <HAL_TIM_Base_Init+0xe4>
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	699b      	ldr	r3, [r3, #24]
 8003d02:	2b80      	cmp	r3, #128	; 0x80
 8003d04:	d004      	beq.n	8003d10 <HAL_TIM_Base_Init+0xe4>
 8003d06:	4b1b      	ldr	r3, [pc, #108]	; (8003d74 <HAL_TIM_Base_Init+0x148>)
 8003d08:	21d7      	movs	r1, #215	; 0xd7
 8003d0a:	0018      	movs	r0, r3
 8003d0c:	f7fc fe2f 	bl	800096e <assert_failed>

  if(htim->State == HAL_TIM_STATE_RESET)
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	223d      	movs	r2, #61	; 0x3d
 8003d14:	5c9b      	ldrb	r3, [r3, r2]
 8003d16:	b2db      	uxtb	r3, r3
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d107      	bne.n	8003d2c <HAL_TIM_Base_Init+0x100>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	223c      	movs	r2, #60	; 0x3c
 8003d20:	2100      	movs	r1, #0
 8003d22:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	0018      	movs	r0, r3
 8003d28:	f7fd f82a 	bl	8000d80 <HAL_TIM_Base_MspInit>
  }

  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	223d      	movs	r2, #61	; 0x3d
 8003d30:	2102      	movs	r1, #2
 8003d32:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681a      	ldr	r2, [r3, #0]
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	3304      	adds	r3, #4
 8003d3c:	0019      	movs	r1, r3
 8003d3e:	0010      	movs	r0, r2
 8003d40:	f001 f996 	bl	8005070 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	223d      	movs	r2, #61	; 0x3d
 8003d48:	2101      	movs	r1, #1
 8003d4a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003d4c:	2300      	movs	r3, #0
}
 8003d4e:	0018      	movs	r0, r3
 8003d50:	46bd      	mov	sp, r7
 8003d52:	b002      	add	sp, #8
 8003d54:	bd80      	pop	{r7, pc}
 8003d56:	46c0      	nop			; (mov r8, r8)
 8003d58:	40012c00 	.word	0x40012c00
 8003d5c:	40000400 	.word	0x40000400
 8003d60:	40001000 	.word	0x40001000
 8003d64:	40002000 	.word	0x40002000
 8003d68:	40014000 	.word	0x40014000
 8003d6c:	40014400 	.word	0x40014400
 8003d70:	40014800 	.word	0x40014800
 8003d74:	08006b1c 	.word	0x08006b1c

08003d78 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM handle
  * @retval HAL status
*/
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8003d78:	b580      	push	{r7, lr}
 8003d7a:	b082      	sub	sp, #8
 8003d7c:	af00      	add	r7, sp, #0
 8003d7e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	4a21      	ldr	r2, [pc, #132]	; (8003e0c <HAL_TIM_Base_Start+0x94>)
 8003d86:	4293      	cmp	r3, r2
 8003d88:	d02a      	beq.n	8003de0 <HAL_TIM_Base_Start+0x68>
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681a      	ldr	r2, [r3, #0]
 8003d8e:	2380      	movs	r3, #128	; 0x80
 8003d90:	05db      	lsls	r3, r3, #23
 8003d92:	429a      	cmp	r2, r3
 8003d94:	d024      	beq.n	8003de0 <HAL_TIM_Base_Start+0x68>
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	4a1d      	ldr	r2, [pc, #116]	; (8003e10 <HAL_TIM_Base_Start+0x98>)
 8003d9c:	4293      	cmp	r3, r2
 8003d9e:	d01f      	beq.n	8003de0 <HAL_TIM_Base_Start+0x68>
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	4a1b      	ldr	r2, [pc, #108]	; (8003e14 <HAL_TIM_Base_Start+0x9c>)
 8003da6:	4293      	cmp	r3, r2
 8003da8:	d01a      	beq.n	8003de0 <HAL_TIM_Base_Start+0x68>
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	4a1a      	ldr	r2, [pc, #104]	; (8003e18 <HAL_TIM_Base_Start+0xa0>)
 8003db0:	4293      	cmp	r3, r2
 8003db2:	d015      	beq.n	8003de0 <HAL_TIM_Base_Start+0x68>
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	4a18      	ldr	r2, [pc, #96]	; (8003e1c <HAL_TIM_Base_Start+0xa4>)
 8003dba:	4293      	cmp	r3, r2
 8003dbc:	d010      	beq.n	8003de0 <HAL_TIM_Base_Start+0x68>
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	4a17      	ldr	r2, [pc, #92]	; (8003e20 <HAL_TIM_Base_Start+0xa8>)
 8003dc4:	4293      	cmp	r3, r2
 8003dc6:	d00b      	beq.n	8003de0 <HAL_TIM_Base_Start+0x68>
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	4a15      	ldr	r2, [pc, #84]	; (8003e24 <HAL_TIM_Base_Start+0xac>)
 8003dce:	4293      	cmp	r3, r2
 8003dd0:	d006      	beq.n	8003de0 <HAL_TIM_Base_Start+0x68>
 8003dd2:	2398      	movs	r3, #152	; 0x98
 8003dd4:	005a      	lsls	r2, r3, #1
 8003dd6:	4b14      	ldr	r3, [pc, #80]	; (8003e28 <HAL_TIM_Base_Start+0xb0>)
 8003dd8:	0011      	movs	r1, r2
 8003dda:	0018      	movs	r0, r3
 8003ddc:	f7fc fdc7 	bl	800096e <assert_failed>

  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	223d      	movs	r2, #61	; 0x3d
 8003de4:	2102      	movs	r1, #2
 8003de6:	5499      	strb	r1, [r3, r2]

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	681a      	ldr	r2, [r3, #0]
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	2101      	movs	r1, #1
 8003df4:	430a      	orrs	r2, r1
 8003df6:	601a      	str	r2, [r3, #0]

  /* Change the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	223d      	movs	r2, #61	; 0x3d
 8003dfc:	2101      	movs	r1, #1
 8003dfe:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8003e00:	2300      	movs	r3, #0
}
 8003e02:	0018      	movs	r0, r3
 8003e04:	46bd      	mov	sp, r7
 8003e06:	b002      	add	sp, #8
 8003e08:	bd80      	pop	{r7, pc}
 8003e0a:	46c0      	nop			; (mov r8, r8)
 8003e0c:	40012c00 	.word	0x40012c00
 8003e10:	40000400 	.word	0x40000400
 8003e14:	40001000 	.word	0x40001000
 8003e18:	40002000 	.word	0x40002000
 8003e1c:	40014000 	.word	0x40014000
 8003e20:	40014400 	.word	0x40014400
 8003e24:	40014800 	.word	0x40014800
 8003e28:	08006b1c 	.word	0x08006b1c

08003e2c <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM handle
  * @retval HAL status
*/
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 8003e2c:	b580      	push	{r7, lr}
 8003e2e:	b082      	sub	sp, #8
 8003e30:	af00      	add	r7, sp, #0
 8003e32:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	4a27      	ldr	r2, [pc, #156]	; (8003ed8 <HAL_TIM_Base_Stop+0xac>)
 8003e3a:	4293      	cmp	r3, r2
 8003e3c:	d02b      	beq.n	8003e96 <HAL_TIM_Base_Stop+0x6a>
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681a      	ldr	r2, [r3, #0]
 8003e42:	2380      	movs	r3, #128	; 0x80
 8003e44:	05db      	lsls	r3, r3, #23
 8003e46:	429a      	cmp	r2, r3
 8003e48:	d025      	beq.n	8003e96 <HAL_TIM_Base_Stop+0x6a>
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	4a23      	ldr	r2, [pc, #140]	; (8003edc <HAL_TIM_Base_Stop+0xb0>)
 8003e50:	4293      	cmp	r3, r2
 8003e52:	d020      	beq.n	8003e96 <HAL_TIM_Base_Stop+0x6a>
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	4a21      	ldr	r2, [pc, #132]	; (8003ee0 <HAL_TIM_Base_Stop+0xb4>)
 8003e5a:	4293      	cmp	r3, r2
 8003e5c:	d01b      	beq.n	8003e96 <HAL_TIM_Base_Stop+0x6a>
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	4a20      	ldr	r2, [pc, #128]	; (8003ee4 <HAL_TIM_Base_Stop+0xb8>)
 8003e64:	4293      	cmp	r3, r2
 8003e66:	d016      	beq.n	8003e96 <HAL_TIM_Base_Stop+0x6a>
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	4a1e      	ldr	r2, [pc, #120]	; (8003ee8 <HAL_TIM_Base_Stop+0xbc>)
 8003e6e:	4293      	cmp	r3, r2
 8003e70:	d011      	beq.n	8003e96 <HAL_TIM_Base_Stop+0x6a>
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	4a1d      	ldr	r2, [pc, #116]	; (8003eec <HAL_TIM_Base_Stop+0xc0>)
 8003e78:	4293      	cmp	r3, r2
 8003e7a:	d00c      	beq.n	8003e96 <HAL_TIM_Base_Stop+0x6a>
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	4a1b      	ldr	r2, [pc, #108]	; (8003ef0 <HAL_TIM_Base_Stop+0xc4>)
 8003e82:	4293      	cmp	r3, r2
 8003e84:	d007      	beq.n	8003e96 <HAL_TIM_Base_Stop+0x6a>
 8003e86:	2348      	movs	r3, #72	; 0x48
 8003e88:	33ff      	adds	r3, #255	; 0xff
 8003e8a:	001a      	movs	r2, r3
 8003e8c:	4b19      	ldr	r3, [pc, #100]	; (8003ef4 <HAL_TIM_Base_Stop+0xc8>)
 8003e8e:	0011      	movs	r1, r2
 8003e90:	0018      	movs	r0, r3
 8003e92:	f7fc fd6c 	bl	800096e <assert_failed>

  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	223d      	movs	r2, #61	; 0x3d
 8003e9a:	2102      	movs	r1, #2
 8003e9c:	5499      	strb	r1, [r3, r2]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	6a1b      	ldr	r3, [r3, #32]
 8003ea4:	4a14      	ldr	r2, [pc, #80]	; (8003ef8 <HAL_TIM_Base_Stop+0xcc>)
 8003ea6:	4013      	ands	r3, r2
 8003ea8:	d10d      	bne.n	8003ec6 <HAL_TIM_Base_Stop+0x9a>
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	6a1b      	ldr	r3, [r3, #32]
 8003eb0:	4a12      	ldr	r2, [pc, #72]	; (8003efc <HAL_TIM_Base_Stop+0xd0>)
 8003eb2:	4013      	ands	r3, r2
 8003eb4:	d107      	bne.n	8003ec6 <HAL_TIM_Base_Stop+0x9a>
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	681a      	ldr	r2, [r3, #0]
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	2101      	movs	r1, #1
 8003ec2:	438a      	bics	r2, r1
 8003ec4:	601a      	str	r2, [r3, #0]

  /* Change the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	223d      	movs	r2, #61	; 0x3d
 8003eca:	2101      	movs	r1, #1
 8003ecc:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8003ece:	2300      	movs	r3, #0
}
 8003ed0:	0018      	movs	r0, r3
 8003ed2:	46bd      	mov	sp, r7
 8003ed4:	b002      	add	sp, #8
 8003ed6:	bd80      	pop	{r7, pc}
 8003ed8:	40012c00 	.word	0x40012c00
 8003edc:	40000400 	.word	0x40000400
 8003ee0:	40001000 	.word	0x40001000
 8003ee4:	40002000 	.word	0x40002000
 8003ee8:	40014000 	.word	0x40014000
 8003eec:	40014400 	.word	0x40014400
 8003ef0:	40014800 	.word	0x40014800
 8003ef4:	08006b1c 	.word	0x08006b1c
 8003ef8:	00001111 	.word	0x00001111
 8003efc:	00000444 	.word	0x00000444

08003f00 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM handle
  * @retval HAL status
*/
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003f00:	b580      	push	{r7, lr}
 8003f02:	b082      	sub	sp, #8
 8003f04:	af00      	add	r7, sp, #0
 8003f06:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	4a21      	ldr	r2, [pc, #132]	; (8003f94 <HAL_TIM_Base_Start_IT+0x94>)
 8003f0e:	4293      	cmp	r3, r2
 8003f10:	d02a      	beq.n	8003f68 <HAL_TIM_Base_Start_IT+0x68>
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681a      	ldr	r2, [r3, #0]
 8003f16:	2380      	movs	r3, #128	; 0x80
 8003f18:	05db      	lsls	r3, r3, #23
 8003f1a:	429a      	cmp	r2, r3
 8003f1c:	d024      	beq.n	8003f68 <HAL_TIM_Base_Start_IT+0x68>
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	4a1d      	ldr	r2, [pc, #116]	; (8003f98 <HAL_TIM_Base_Start_IT+0x98>)
 8003f24:	4293      	cmp	r3, r2
 8003f26:	d01f      	beq.n	8003f68 <HAL_TIM_Base_Start_IT+0x68>
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	4a1b      	ldr	r2, [pc, #108]	; (8003f9c <HAL_TIM_Base_Start_IT+0x9c>)
 8003f2e:	4293      	cmp	r3, r2
 8003f30:	d01a      	beq.n	8003f68 <HAL_TIM_Base_Start_IT+0x68>
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	4a1a      	ldr	r2, [pc, #104]	; (8003fa0 <HAL_TIM_Base_Start_IT+0xa0>)
 8003f38:	4293      	cmp	r3, r2
 8003f3a:	d015      	beq.n	8003f68 <HAL_TIM_Base_Start_IT+0x68>
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	4a18      	ldr	r2, [pc, #96]	; (8003fa4 <HAL_TIM_Base_Start_IT+0xa4>)
 8003f42:	4293      	cmp	r3, r2
 8003f44:	d010      	beq.n	8003f68 <HAL_TIM_Base_Start_IT+0x68>
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	4a17      	ldr	r2, [pc, #92]	; (8003fa8 <HAL_TIM_Base_Start_IT+0xa8>)
 8003f4c:	4293      	cmp	r3, r2
 8003f4e:	d00b      	beq.n	8003f68 <HAL_TIM_Base_Start_IT+0x68>
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	4a15      	ldr	r2, [pc, #84]	; (8003fac <HAL_TIM_Base_Start_IT+0xac>)
 8003f56:	4293      	cmp	r3, r2
 8003f58:	d006      	beq.n	8003f68 <HAL_TIM_Base_Start_IT+0x68>
 8003f5a:	23af      	movs	r3, #175	; 0xaf
 8003f5c:	005a      	lsls	r2, r3, #1
 8003f5e:	4b14      	ldr	r3, [pc, #80]	; (8003fb0 <HAL_TIM_Base_Start_IT+0xb0>)
 8003f60:	0011      	movs	r1, r2
 8003f62:	0018      	movs	r0, r3
 8003f64:	f7fc fd03 	bl	800096e <assert_failed>

   /* Enable the TIM Update interrupt */
   __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	68da      	ldr	r2, [r3, #12]
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	2101      	movs	r1, #1
 8003f74:	430a      	orrs	r2, r1
 8003f76:	60da      	str	r2, [r3, #12]

   /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	681a      	ldr	r2, [r3, #0]
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	2101      	movs	r1, #1
 8003f84:	430a      	orrs	r2, r1
 8003f86:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8003f88:	2300      	movs	r3, #0
}
 8003f8a:	0018      	movs	r0, r3
 8003f8c:	46bd      	mov	sp, r7
 8003f8e:	b002      	add	sp, #8
 8003f90:	bd80      	pop	{r7, pc}
 8003f92:	46c0      	nop			; (mov r8, r8)
 8003f94:	40012c00 	.word	0x40012c00
 8003f98:	40000400 	.word	0x40000400
 8003f9c:	40001000 	.word	0x40001000
 8003fa0:	40002000 	.word	0x40002000
 8003fa4:	40014000 	.word	0x40014000
 8003fa8:	40014400 	.word	0x40014400
 8003fac:	40014800 	.word	0x40014800
 8003fb0:	08006b1c 	.word	0x08006b1c

08003fb4 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM handle
  * @retval HAL status
*/
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8003fb4:	b580      	push	{r7, lr}
 8003fb6:	b082      	sub	sp, #8
 8003fb8:	af00      	add	r7, sp, #0
 8003fba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	4a27      	ldr	r2, [pc, #156]	; (8004060 <HAL_TIM_Base_Stop_IT+0xac>)
 8003fc2:	4293      	cmp	r3, r2
 8003fc4:	d02a      	beq.n	800401c <HAL_TIM_Base_Stop_IT+0x68>
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681a      	ldr	r2, [r3, #0]
 8003fca:	2380      	movs	r3, #128	; 0x80
 8003fcc:	05db      	lsls	r3, r3, #23
 8003fce:	429a      	cmp	r2, r3
 8003fd0:	d024      	beq.n	800401c <HAL_TIM_Base_Stop_IT+0x68>
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	4a23      	ldr	r2, [pc, #140]	; (8004064 <HAL_TIM_Base_Stop_IT+0xb0>)
 8003fd8:	4293      	cmp	r3, r2
 8003fda:	d01f      	beq.n	800401c <HAL_TIM_Base_Stop_IT+0x68>
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	4a21      	ldr	r2, [pc, #132]	; (8004068 <HAL_TIM_Base_Stop_IT+0xb4>)
 8003fe2:	4293      	cmp	r3, r2
 8003fe4:	d01a      	beq.n	800401c <HAL_TIM_Base_Stop_IT+0x68>
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	4a20      	ldr	r2, [pc, #128]	; (800406c <HAL_TIM_Base_Stop_IT+0xb8>)
 8003fec:	4293      	cmp	r3, r2
 8003fee:	d015      	beq.n	800401c <HAL_TIM_Base_Stop_IT+0x68>
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	4a1e      	ldr	r2, [pc, #120]	; (8004070 <HAL_TIM_Base_Stop_IT+0xbc>)
 8003ff6:	4293      	cmp	r3, r2
 8003ff8:	d010      	beq.n	800401c <HAL_TIM_Base_Stop_IT+0x68>
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	4a1d      	ldr	r2, [pc, #116]	; (8004074 <HAL_TIM_Base_Stop_IT+0xc0>)
 8004000:	4293      	cmp	r3, r2
 8004002:	d00b      	beq.n	800401c <HAL_TIM_Base_Stop_IT+0x68>
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	4a1b      	ldr	r2, [pc, #108]	; (8004078 <HAL_TIM_Base_Stop_IT+0xc4>)
 800400a:	4293      	cmp	r3, r2
 800400c:	d006      	beq.n	800401c <HAL_TIM_Base_Stop_IT+0x68>
 800400e:	23b9      	movs	r3, #185	; 0xb9
 8004010:	005a      	lsls	r2, r3, #1
 8004012:	4b1a      	ldr	r3, [pc, #104]	; (800407c <HAL_TIM_Base_Stop_IT+0xc8>)
 8004014:	0011      	movs	r1, r2
 8004016:	0018      	movs	r0, r3
 8004018:	f7fc fca9 	bl	800096e <assert_failed>
  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	68da      	ldr	r2, [r3, #12]
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	2101      	movs	r1, #1
 8004028:	438a      	bics	r2, r1
 800402a:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	6a1b      	ldr	r3, [r3, #32]
 8004032:	4a13      	ldr	r2, [pc, #76]	; (8004080 <HAL_TIM_Base_Stop_IT+0xcc>)
 8004034:	4013      	ands	r3, r2
 8004036:	d10d      	bne.n	8004054 <HAL_TIM_Base_Stop_IT+0xa0>
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	6a1b      	ldr	r3, [r3, #32]
 800403e:	4a11      	ldr	r2, [pc, #68]	; (8004084 <HAL_TIM_Base_Stop_IT+0xd0>)
 8004040:	4013      	ands	r3, r2
 8004042:	d107      	bne.n	8004054 <HAL_TIM_Base_Stop_IT+0xa0>
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	681a      	ldr	r2, [r3, #0]
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	2101      	movs	r1, #1
 8004050:	438a      	bics	r2, r1
 8004052:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8004054:	2300      	movs	r3, #0
}
 8004056:	0018      	movs	r0, r3
 8004058:	46bd      	mov	sp, r7
 800405a:	b002      	add	sp, #8
 800405c:	bd80      	pop	{r7, pc}
 800405e:	46c0      	nop			; (mov r8, r8)
 8004060:	40012c00 	.word	0x40012c00
 8004064:	40000400 	.word	0x40000400
 8004068:	40001000 	.word	0x40001000
 800406c:	40002000 	.word	0x40002000
 8004070:	40014000 	.word	0x40014000
 8004074:	40014400 	.word	0x40014400
 8004078:	40014800 	.word	0x40014800
 800407c:	08006b1c 	.word	0x08006b1c
 8004080:	00001111 	.word	0x00001111
 8004084:	00000444 	.word	0x00000444

08004088 <HAL_TIM_OC_Init>:
  *         parameters in the TIM_HandleTypeDef and create the associated handle.
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef* htim)
{
 8004088:	b580      	push	{r7, lr}
 800408a:	b082      	sub	sp, #8
 800408c:	af00      	add	r7, sp, #0
 800408e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if(htim == NULL)
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	2b00      	cmp	r3, #0
 8004094:	d101      	bne.n	800409a <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8004096:	2301      	movs	r3, #1
 8004098:	e091      	b.n	80041be <HAL_TIM_OC_Init+0x136>
  }

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	4a4a      	ldr	r2, [pc, #296]	; (80041c8 <HAL_TIM_OC_Init+0x140>)
 80040a0:	4293      	cmp	r3, r2
 80040a2:	d02a      	beq.n	80040fa <HAL_TIM_OC_Init+0x72>
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681a      	ldr	r2, [r3, #0]
 80040a8:	2380      	movs	r3, #128	; 0x80
 80040aa:	05db      	lsls	r3, r3, #23
 80040ac:	429a      	cmp	r2, r3
 80040ae:	d024      	beq.n	80040fa <HAL_TIM_OC_Init+0x72>
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	4a45      	ldr	r2, [pc, #276]	; (80041cc <HAL_TIM_OC_Init+0x144>)
 80040b6:	4293      	cmp	r3, r2
 80040b8:	d01f      	beq.n	80040fa <HAL_TIM_OC_Init+0x72>
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	4a44      	ldr	r2, [pc, #272]	; (80041d0 <HAL_TIM_OC_Init+0x148>)
 80040c0:	4293      	cmp	r3, r2
 80040c2:	d01a      	beq.n	80040fa <HAL_TIM_OC_Init+0x72>
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	4a42      	ldr	r2, [pc, #264]	; (80041d4 <HAL_TIM_OC_Init+0x14c>)
 80040ca:	4293      	cmp	r3, r2
 80040cc:	d015      	beq.n	80040fa <HAL_TIM_OC_Init+0x72>
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	4a41      	ldr	r2, [pc, #260]	; (80041d8 <HAL_TIM_OC_Init+0x150>)
 80040d4:	4293      	cmp	r3, r2
 80040d6:	d010      	beq.n	80040fa <HAL_TIM_OC_Init+0x72>
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	4a3f      	ldr	r2, [pc, #252]	; (80041dc <HAL_TIM_OC_Init+0x154>)
 80040de:	4293      	cmp	r3, r2
 80040e0:	d00b      	beq.n	80040fa <HAL_TIM_OC_Init+0x72>
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	4a3e      	ldr	r2, [pc, #248]	; (80041e0 <HAL_TIM_OC_Init+0x158>)
 80040e8:	4293      	cmp	r3, r2
 80040ea:	d006      	beq.n	80040fa <HAL_TIM_OC_Init+0x72>
 80040ec:	23f5      	movs	r3, #245	; 0xf5
 80040ee:	005a      	lsls	r2, r3, #1
 80040f0:	4b3c      	ldr	r3, [pc, #240]	; (80041e4 <HAL_TIM_OC_Init+0x15c>)
 80040f2:	0011      	movs	r1, r2
 80040f4:	0018      	movs	r0, r3
 80040f6:	f7fc fc3a 	bl	800096e <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	689b      	ldr	r3, [r3, #8]
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d017      	beq.n	8004132 <HAL_TIM_OC_Init+0xaa>
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	689b      	ldr	r3, [r3, #8]
 8004106:	2b10      	cmp	r3, #16
 8004108:	d013      	beq.n	8004132 <HAL_TIM_OC_Init+0xaa>
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	689b      	ldr	r3, [r3, #8]
 800410e:	2b20      	cmp	r3, #32
 8004110:	d00f      	beq.n	8004132 <HAL_TIM_OC_Init+0xaa>
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	689b      	ldr	r3, [r3, #8]
 8004116:	2b40      	cmp	r3, #64	; 0x40
 8004118:	d00b      	beq.n	8004132 <HAL_TIM_OC_Init+0xaa>
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	689b      	ldr	r3, [r3, #8]
 800411e:	2b60      	cmp	r3, #96	; 0x60
 8004120:	d007      	beq.n	8004132 <HAL_TIM_OC_Init+0xaa>
 8004122:	23ec      	movs	r3, #236	; 0xec
 8004124:	33ff      	adds	r3, #255	; 0xff
 8004126:	001a      	movs	r2, r3
 8004128:	4b2e      	ldr	r3, [pc, #184]	; (80041e4 <HAL_TIM_OC_Init+0x15c>)
 800412a:	0011      	movs	r1, r2
 800412c:	0018      	movs	r0, r3
 800412e:	f7fc fc1e 	bl	800096e <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	691b      	ldr	r3, [r3, #16]
 8004136:	2b00      	cmp	r3, #0
 8004138:	d012      	beq.n	8004160 <HAL_TIM_OC_Init+0xd8>
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	691a      	ldr	r2, [r3, #16]
 800413e:	2380      	movs	r3, #128	; 0x80
 8004140:	005b      	lsls	r3, r3, #1
 8004142:	429a      	cmp	r2, r3
 8004144:	d00c      	beq.n	8004160 <HAL_TIM_OC_Init+0xd8>
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	691a      	ldr	r2, [r3, #16]
 800414a:	2380      	movs	r3, #128	; 0x80
 800414c:	009b      	lsls	r3, r3, #2
 800414e:	429a      	cmp	r2, r3
 8004150:	d006      	beq.n	8004160 <HAL_TIM_OC_Init+0xd8>
 8004152:	23f6      	movs	r3, #246	; 0xf6
 8004154:	005a      	lsls	r2, r3, #1
 8004156:	4b23      	ldr	r3, [pc, #140]	; (80041e4 <HAL_TIM_OC_Init+0x15c>)
 8004158:	0011      	movs	r1, r2
 800415a:	0018      	movs	r0, r3
 800415c:	f7fc fc07 	bl	800096e <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	699b      	ldr	r3, [r3, #24]
 8004164:	2b00      	cmp	r3, #0
 8004166:	d00b      	beq.n	8004180 <HAL_TIM_OC_Init+0xf8>
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	699b      	ldr	r3, [r3, #24]
 800416c:	2b80      	cmp	r3, #128	; 0x80
 800416e:	d007      	beq.n	8004180 <HAL_TIM_OC_Init+0xf8>
 8004170:	23ee      	movs	r3, #238	; 0xee
 8004172:	33ff      	adds	r3, #255	; 0xff
 8004174:	001a      	movs	r2, r3
 8004176:	4b1b      	ldr	r3, [pc, #108]	; (80041e4 <HAL_TIM_OC_Init+0x15c>)
 8004178:	0011      	movs	r1, r2
 800417a:	0018      	movs	r0, r3
 800417c:	f7fc fbf7 	bl	800096e <assert_failed>

  if(htim->State == HAL_TIM_STATE_RESET)
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	223d      	movs	r2, #61	; 0x3d
 8004184:	5c9b      	ldrb	r3, [r3, r2]
 8004186:	b2db      	uxtb	r3, r3
 8004188:	2b00      	cmp	r3, #0
 800418a:	d107      	bne.n	800419c <HAL_TIM_OC_Init+0x114>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	223c      	movs	r2, #60	; 0x3c
 8004190:	2100      	movs	r1, #0
 8004192:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	0018      	movs	r0, r3
 8004198:	f000 f826 	bl	80041e8 <HAL_TIM_OC_MspInit>
  }

  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	223d      	movs	r2, #61	; 0x3d
 80041a0:	2102      	movs	r1, #2
 80041a2:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681a      	ldr	r2, [r3, #0]
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	3304      	adds	r3, #4
 80041ac:	0019      	movs	r1, r3
 80041ae:	0010      	movs	r0, r2
 80041b0:	f000 ff5e 	bl	8005070 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	223d      	movs	r2, #61	; 0x3d
 80041b8:	2101      	movs	r1, #1
 80041ba:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80041bc:	2300      	movs	r3, #0
}
 80041be:	0018      	movs	r0, r3
 80041c0:	46bd      	mov	sp, r7
 80041c2:	b002      	add	sp, #8
 80041c4:	bd80      	pop	{r7, pc}
 80041c6:	46c0      	nop			; (mov r8, r8)
 80041c8:	40012c00 	.word	0x40012c00
 80041cc:	40000400 	.word	0x40000400
 80041d0:	40001000 	.word	0x40001000
 80041d4:	40002000 	.word	0x40002000
 80041d8:	40014000 	.word	0x40014000
 80041dc:	40014400 	.word	0x40014400
 80041e0:	40014800 	.word	0x40014800
 80041e4:	08006b1c 	.word	0x08006b1c

080041e8 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 80041e8:	b580      	push	{r7, lr}
 80041ea:	b082      	sub	sp, #8
 80041ec:	af00      	add	r7, sp, #0
 80041ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 80041f0:	46c0      	nop			; (mov r8, r8)
 80041f2:	46bd      	mov	sp, r7
 80041f4:	b002      	add	sp, #8
 80041f6:	bd80      	pop	{r7, pc}

080041f8 <HAL_TIM_OC_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected 
  * @retval HAL status
*/
HAL_StatusTypeDef HAL_TIM_OC_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80041f8:	b580      	push	{r7, lr}
 80041fa:	b082      	sub	sp, #8
 80041fc:	af00      	add	r7, sp, #0
 80041fe:	6078      	str	r0, [r7, #4]
 8004200:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	4a49      	ldr	r2, [pc, #292]	; (800432c <HAL_TIM_OC_Start+0x134>)
 8004208:	4293      	cmp	r3, r2
 800420a:	d10c      	bne.n	8004226 <HAL_TIM_OC_Start+0x2e>
 800420c:	683b      	ldr	r3, [r7, #0]
 800420e:	2b00      	cmp	r3, #0
 8004210:	d100      	bne.n	8004214 <HAL_TIM_OC_Start+0x1c>
 8004212:	e054      	b.n	80042be <HAL_TIM_OC_Start+0xc6>
 8004214:	683b      	ldr	r3, [r7, #0]
 8004216:	2b04      	cmp	r3, #4
 8004218:	d051      	beq.n	80042be <HAL_TIM_OC_Start+0xc6>
 800421a:	683b      	ldr	r3, [r7, #0]
 800421c:	2b08      	cmp	r3, #8
 800421e:	d04e      	beq.n	80042be <HAL_TIM_OC_Start+0xc6>
 8004220:	683b      	ldr	r3, [r7, #0]
 8004222:	2b0c      	cmp	r3, #12
 8004224:	d04b      	beq.n	80042be <HAL_TIM_OC_Start+0xc6>
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681a      	ldr	r2, [r3, #0]
 800422a:	2380      	movs	r3, #128	; 0x80
 800422c:	05db      	lsls	r3, r3, #23
 800422e:	429a      	cmp	r2, r3
 8004230:	d10b      	bne.n	800424a <HAL_TIM_OC_Start+0x52>
 8004232:	683b      	ldr	r3, [r7, #0]
 8004234:	2b00      	cmp	r3, #0
 8004236:	d042      	beq.n	80042be <HAL_TIM_OC_Start+0xc6>
 8004238:	683b      	ldr	r3, [r7, #0]
 800423a:	2b04      	cmp	r3, #4
 800423c:	d03f      	beq.n	80042be <HAL_TIM_OC_Start+0xc6>
 800423e:	683b      	ldr	r3, [r7, #0]
 8004240:	2b08      	cmp	r3, #8
 8004242:	d03c      	beq.n	80042be <HAL_TIM_OC_Start+0xc6>
 8004244:	683b      	ldr	r3, [r7, #0]
 8004246:	2b0c      	cmp	r3, #12
 8004248:	d039      	beq.n	80042be <HAL_TIM_OC_Start+0xc6>
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	4a38      	ldr	r2, [pc, #224]	; (8004330 <HAL_TIM_OC_Start+0x138>)
 8004250:	4293      	cmp	r3, r2
 8004252:	d10b      	bne.n	800426c <HAL_TIM_OC_Start+0x74>
 8004254:	683b      	ldr	r3, [r7, #0]
 8004256:	2b00      	cmp	r3, #0
 8004258:	d031      	beq.n	80042be <HAL_TIM_OC_Start+0xc6>
 800425a:	683b      	ldr	r3, [r7, #0]
 800425c:	2b04      	cmp	r3, #4
 800425e:	d02e      	beq.n	80042be <HAL_TIM_OC_Start+0xc6>
 8004260:	683b      	ldr	r3, [r7, #0]
 8004262:	2b08      	cmp	r3, #8
 8004264:	d02b      	beq.n	80042be <HAL_TIM_OC_Start+0xc6>
 8004266:	683b      	ldr	r3, [r7, #0]
 8004268:	2b0c      	cmp	r3, #12
 800426a:	d028      	beq.n	80042be <HAL_TIM_OC_Start+0xc6>
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	4a30      	ldr	r2, [pc, #192]	; (8004334 <HAL_TIM_OC_Start+0x13c>)
 8004272:	4293      	cmp	r3, r2
 8004274:	d102      	bne.n	800427c <HAL_TIM_OC_Start+0x84>
 8004276:	683b      	ldr	r3, [r7, #0]
 8004278:	2b00      	cmp	r3, #0
 800427a:	d020      	beq.n	80042be <HAL_TIM_OC_Start+0xc6>
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	4a2d      	ldr	r2, [pc, #180]	; (8004338 <HAL_TIM_OC_Start+0x140>)
 8004282:	4293      	cmp	r3, r2
 8004284:	d105      	bne.n	8004292 <HAL_TIM_OC_Start+0x9a>
 8004286:	683b      	ldr	r3, [r7, #0]
 8004288:	2b00      	cmp	r3, #0
 800428a:	d018      	beq.n	80042be <HAL_TIM_OC_Start+0xc6>
 800428c:	683b      	ldr	r3, [r7, #0]
 800428e:	2b04      	cmp	r3, #4
 8004290:	d015      	beq.n	80042be <HAL_TIM_OC_Start+0xc6>
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	4a29      	ldr	r2, [pc, #164]	; (800433c <HAL_TIM_OC_Start+0x144>)
 8004298:	4293      	cmp	r3, r2
 800429a:	d102      	bne.n	80042a2 <HAL_TIM_OC_Start+0xaa>
 800429c:	683b      	ldr	r3, [r7, #0]
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d00d      	beq.n	80042be <HAL_TIM_OC_Start+0xc6>
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	4a26      	ldr	r2, [pc, #152]	; (8004340 <HAL_TIM_OC_Start+0x148>)
 80042a8:	4293      	cmp	r3, r2
 80042aa:	d102      	bne.n	80042b2 <HAL_TIM_OC_Start+0xba>
 80042ac:	683b      	ldr	r3, [r7, #0]
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d005      	beq.n	80042be <HAL_TIM_OC_Start+0xc6>
 80042b2:	4a24      	ldr	r2, [pc, #144]	; (8004344 <HAL_TIM_OC_Start+0x14c>)
 80042b4:	4b24      	ldr	r3, [pc, #144]	; (8004348 <HAL_TIM_OC_Start+0x150>)
 80042b6:	0011      	movs	r1, r2
 80042b8:	0018      	movs	r0, r3
 80042ba:	f7fc fb58 	bl	800096e <assert_failed>

  /* Enable the Output compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	6839      	ldr	r1, [r7, #0]
 80042c4:	2201      	movs	r2, #1
 80042c6:	0018      	movs	r0, r3
 80042c8:	f001 fac8 	bl	800585c <TIM_CCxChannelCmd>

  if(IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	4a16      	ldr	r2, [pc, #88]	; (800432c <HAL_TIM_OC_Start+0x134>)
 80042d2:	4293      	cmp	r3, r2
 80042d4:	d00e      	beq.n	80042f4 <HAL_TIM_OC_Start+0xfc>
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	4a17      	ldr	r2, [pc, #92]	; (8004338 <HAL_TIM_OC_Start+0x140>)
 80042dc:	4293      	cmp	r3, r2
 80042de:	d009      	beq.n	80042f4 <HAL_TIM_OC_Start+0xfc>
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	4a15      	ldr	r2, [pc, #84]	; (800433c <HAL_TIM_OC_Start+0x144>)
 80042e6:	4293      	cmp	r3, r2
 80042e8:	d004      	beq.n	80042f4 <HAL_TIM_OC_Start+0xfc>
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	4a14      	ldr	r2, [pc, #80]	; (8004340 <HAL_TIM_OC_Start+0x148>)
 80042f0:	4293      	cmp	r3, r2
 80042f2:	d101      	bne.n	80042f8 <HAL_TIM_OC_Start+0x100>
 80042f4:	2301      	movs	r3, #1
 80042f6:	e000      	b.n	80042fa <HAL_TIM_OC_Start+0x102>
 80042f8:	2300      	movs	r3, #0
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d008      	beq.n	8004310 <HAL_TIM_OC_Start+0x118>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	2180      	movs	r1, #128	; 0x80
 800430a:	0209      	lsls	r1, r1, #8
 800430c:	430a      	orrs	r2, r1
 800430e:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	681a      	ldr	r2, [r3, #0]
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	2101      	movs	r1, #1
 800431c:	430a      	orrs	r2, r1
 800431e:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8004320:	2300      	movs	r3, #0
}
 8004322:	0018      	movs	r0, r3
 8004324:	46bd      	mov	sp, r7
 8004326:	b002      	add	sp, #8
 8004328:	bd80      	pop	{r7, pc}
 800432a:	46c0      	nop			; (mov r8, r8)
 800432c:	40012c00 	.word	0x40012c00
 8004330:	40000400 	.word	0x40000400
 8004334:	40002000 	.word	0x40002000
 8004338:	40014000 	.word	0x40014000
 800433c:	40014400 	.word	0x40014400
 8004340:	40014800 	.word	0x40014800
 8004344:	0000024b 	.word	0x0000024b
 8004348:	08006b1c 	.word	0x08006b1c

0800434c <HAL_TIM_OC_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
*/
HAL_StatusTypeDef HAL_TIM_OC_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800434c:	b580      	push	{r7, lr}
 800434e:	b082      	sub	sp, #8
 8004350:	af00      	add	r7, sp, #0
 8004352:	6078      	str	r0, [r7, #4]
 8004354:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	4a54      	ldr	r2, [pc, #336]	; (80044ac <HAL_TIM_OC_Stop+0x160>)
 800435c:	4293      	cmp	r3, r2
 800435e:	d10c      	bne.n	800437a <HAL_TIM_OC_Stop+0x2e>
 8004360:	683b      	ldr	r3, [r7, #0]
 8004362:	2b00      	cmp	r3, #0
 8004364:	d100      	bne.n	8004368 <HAL_TIM_OC_Stop+0x1c>
 8004366:	e054      	b.n	8004412 <HAL_TIM_OC_Stop+0xc6>
 8004368:	683b      	ldr	r3, [r7, #0]
 800436a:	2b04      	cmp	r3, #4
 800436c:	d051      	beq.n	8004412 <HAL_TIM_OC_Stop+0xc6>
 800436e:	683b      	ldr	r3, [r7, #0]
 8004370:	2b08      	cmp	r3, #8
 8004372:	d04e      	beq.n	8004412 <HAL_TIM_OC_Stop+0xc6>
 8004374:	683b      	ldr	r3, [r7, #0]
 8004376:	2b0c      	cmp	r3, #12
 8004378:	d04b      	beq.n	8004412 <HAL_TIM_OC_Stop+0xc6>
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681a      	ldr	r2, [r3, #0]
 800437e:	2380      	movs	r3, #128	; 0x80
 8004380:	05db      	lsls	r3, r3, #23
 8004382:	429a      	cmp	r2, r3
 8004384:	d10b      	bne.n	800439e <HAL_TIM_OC_Stop+0x52>
 8004386:	683b      	ldr	r3, [r7, #0]
 8004388:	2b00      	cmp	r3, #0
 800438a:	d042      	beq.n	8004412 <HAL_TIM_OC_Stop+0xc6>
 800438c:	683b      	ldr	r3, [r7, #0]
 800438e:	2b04      	cmp	r3, #4
 8004390:	d03f      	beq.n	8004412 <HAL_TIM_OC_Stop+0xc6>
 8004392:	683b      	ldr	r3, [r7, #0]
 8004394:	2b08      	cmp	r3, #8
 8004396:	d03c      	beq.n	8004412 <HAL_TIM_OC_Stop+0xc6>
 8004398:	683b      	ldr	r3, [r7, #0]
 800439a:	2b0c      	cmp	r3, #12
 800439c:	d039      	beq.n	8004412 <HAL_TIM_OC_Stop+0xc6>
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	4a43      	ldr	r2, [pc, #268]	; (80044b0 <HAL_TIM_OC_Stop+0x164>)
 80043a4:	4293      	cmp	r3, r2
 80043a6:	d10b      	bne.n	80043c0 <HAL_TIM_OC_Stop+0x74>
 80043a8:	683b      	ldr	r3, [r7, #0]
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d031      	beq.n	8004412 <HAL_TIM_OC_Stop+0xc6>
 80043ae:	683b      	ldr	r3, [r7, #0]
 80043b0:	2b04      	cmp	r3, #4
 80043b2:	d02e      	beq.n	8004412 <HAL_TIM_OC_Stop+0xc6>
 80043b4:	683b      	ldr	r3, [r7, #0]
 80043b6:	2b08      	cmp	r3, #8
 80043b8:	d02b      	beq.n	8004412 <HAL_TIM_OC_Stop+0xc6>
 80043ba:	683b      	ldr	r3, [r7, #0]
 80043bc:	2b0c      	cmp	r3, #12
 80043be:	d028      	beq.n	8004412 <HAL_TIM_OC_Stop+0xc6>
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	4a3b      	ldr	r2, [pc, #236]	; (80044b4 <HAL_TIM_OC_Stop+0x168>)
 80043c6:	4293      	cmp	r3, r2
 80043c8:	d102      	bne.n	80043d0 <HAL_TIM_OC_Stop+0x84>
 80043ca:	683b      	ldr	r3, [r7, #0]
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d020      	beq.n	8004412 <HAL_TIM_OC_Stop+0xc6>
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	4a38      	ldr	r2, [pc, #224]	; (80044b8 <HAL_TIM_OC_Stop+0x16c>)
 80043d6:	4293      	cmp	r3, r2
 80043d8:	d105      	bne.n	80043e6 <HAL_TIM_OC_Stop+0x9a>
 80043da:	683b      	ldr	r3, [r7, #0]
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d018      	beq.n	8004412 <HAL_TIM_OC_Stop+0xc6>
 80043e0:	683b      	ldr	r3, [r7, #0]
 80043e2:	2b04      	cmp	r3, #4
 80043e4:	d015      	beq.n	8004412 <HAL_TIM_OC_Stop+0xc6>
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	4a34      	ldr	r2, [pc, #208]	; (80044bc <HAL_TIM_OC_Stop+0x170>)
 80043ec:	4293      	cmp	r3, r2
 80043ee:	d102      	bne.n	80043f6 <HAL_TIM_OC_Stop+0xaa>
 80043f0:	683b      	ldr	r3, [r7, #0]
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d00d      	beq.n	8004412 <HAL_TIM_OC_Stop+0xc6>
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	4a31      	ldr	r2, [pc, #196]	; (80044c0 <HAL_TIM_OC_Stop+0x174>)
 80043fc:	4293      	cmp	r3, r2
 80043fe:	d102      	bne.n	8004406 <HAL_TIM_OC_Stop+0xba>
 8004400:	683b      	ldr	r3, [r7, #0]
 8004402:	2b00      	cmp	r3, #0
 8004404:	d005      	beq.n	8004412 <HAL_TIM_OC_Stop+0xc6>
 8004406:	4a2f      	ldr	r2, [pc, #188]	; (80044c4 <HAL_TIM_OC_Stop+0x178>)
 8004408:	4b2f      	ldr	r3, [pc, #188]	; (80044c8 <HAL_TIM_OC_Stop+0x17c>)
 800440a:	0011      	movs	r1, r2
 800440c:	0018      	movs	r0, r3
 800440e:	f7fc faae 	bl	800096e <assert_failed>

  /* Disable the Output compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	6839      	ldr	r1, [r7, #0]
 8004418:	2200      	movs	r2, #0
 800441a:	0018      	movs	r0, r3
 800441c:	f001 fa1e 	bl	800585c <TIM_CCxChannelCmd>

  if(IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	4a21      	ldr	r2, [pc, #132]	; (80044ac <HAL_TIM_OC_Stop+0x160>)
 8004426:	4293      	cmp	r3, r2
 8004428:	d00e      	beq.n	8004448 <HAL_TIM_OC_Stop+0xfc>
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	4a22      	ldr	r2, [pc, #136]	; (80044b8 <HAL_TIM_OC_Stop+0x16c>)
 8004430:	4293      	cmp	r3, r2
 8004432:	d009      	beq.n	8004448 <HAL_TIM_OC_Stop+0xfc>
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	4a20      	ldr	r2, [pc, #128]	; (80044bc <HAL_TIM_OC_Stop+0x170>)
 800443a:	4293      	cmp	r3, r2
 800443c:	d004      	beq.n	8004448 <HAL_TIM_OC_Stop+0xfc>
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	4a1f      	ldr	r2, [pc, #124]	; (80044c0 <HAL_TIM_OC_Stop+0x174>)
 8004444:	4293      	cmp	r3, r2
 8004446:	d101      	bne.n	800444c <HAL_TIM_OC_Stop+0x100>
 8004448:	2301      	movs	r3, #1
 800444a:	e000      	b.n	800444e <HAL_TIM_OC_Stop+0x102>
 800444c:	2300      	movs	r3, #0
 800444e:	2b00      	cmp	r3, #0
 8004450:	d013      	beq.n	800447a <HAL_TIM_OC_Stop+0x12e>
  {
    /* Disable the Main Ouput */
    __HAL_TIM_MOE_DISABLE(htim);
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	6a1b      	ldr	r3, [r3, #32]
 8004458:	4a1c      	ldr	r2, [pc, #112]	; (80044cc <HAL_TIM_OC_Stop+0x180>)
 800445a:	4013      	ands	r3, r2
 800445c:	d10d      	bne.n	800447a <HAL_TIM_OC_Stop+0x12e>
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	6a1b      	ldr	r3, [r3, #32]
 8004464:	4a1a      	ldr	r2, [pc, #104]	; (80044d0 <HAL_TIM_OC_Stop+0x184>)
 8004466:	4013      	ands	r3, r2
 8004468:	d107      	bne.n	800447a <HAL_TIM_OC_Stop+0x12e>
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	4917      	ldr	r1, [pc, #92]	; (80044d4 <HAL_TIM_OC_Stop+0x188>)
 8004476:	400a      	ands	r2, r1
 8004478:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	6a1b      	ldr	r3, [r3, #32]
 8004480:	4a12      	ldr	r2, [pc, #72]	; (80044cc <HAL_TIM_OC_Stop+0x180>)
 8004482:	4013      	ands	r3, r2
 8004484:	d10d      	bne.n	80044a2 <HAL_TIM_OC_Stop+0x156>
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	6a1b      	ldr	r3, [r3, #32]
 800448c:	4a10      	ldr	r2, [pc, #64]	; (80044d0 <HAL_TIM_OC_Stop+0x184>)
 800448e:	4013      	ands	r3, r2
 8004490:	d107      	bne.n	80044a2 <HAL_TIM_OC_Stop+0x156>
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	681a      	ldr	r2, [r3, #0]
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	2101      	movs	r1, #1
 800449e:	438a      	bics	r2, r1
 80044a0:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80044a2:	2300      	movs	r3, #0
}
 80044a4:	0018      	movs	r0, r3
 80044a6:	46bd      	mov	sp, r7
 80044a8:	b002      	add	sp, #8
 80044aa:	bd80      	pop	{r7, pc}
 80044ac:	40012c00 	.word	0x40012c00
 80044b0:	40000400 	.word	0x40000400
 80044b4:	40002000 	.word	0x40002000
 80044b8:	40014000 	.word	0x40014000
 80044bc:	40014400 	.word	0x40014400
 80044c0:	40014800 	.word	0x40014800
 80044c4:	0000026b 	.word	0x0000026b
 80044c8:	08006b1c 	.word	0x08006b1c
 80044cc:	00001111 	.word	0x00001111
 80044d0:	00000444 	.word	0x00000444
 80044d4:	ffff7fff 	.word	0xffff7fff

080044d8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80044d8:	b580      	push	{r7, lr}
 80044da:	b082      	sub	sp, #8
 80044dc:	af00      	add	r7, sp, #0
 80044de:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	691b      	ldr	r3, [r3, #16]
 80044e6:	2202      	movs	r2, #2
 80044e8:	4013      	ands	r3, r2
 80044ea:	2b02      	cmp	r3, #2
 80044ec:	d124      	bne.n	8004538 <HAL_TIM_IRQHandler+0x60>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	68db      	ldr	r3, [r3, #12]
 80044f4:	2202      	movs	r2, #2
 80044f6:	4013      	ands	r3, r2
 80044f8:	2b02      	cmp	r3, #2
 80044fa:	d11d      	bne.n	8004538 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	2203      	movs	r2, #3
 8004502:	4252      	negs	r2, r2
 8004504:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	2201      	movs	r2, #1
 800450a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	699b      	ldr	r3, [r3, #24]
 8004512:	2203      	movs	r2, #3
 8004514:	4013      	ands	r3, r2
 8004516:	d004      	beq.n	8004522 <HAL_TIM_IRQHandler+0x4a>
        {
          HAL_TIM_IC_CaptureCallback(htim);
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	0018      	movs	r0, r3
 800451c:	f000 fd90 	bl	8005040 <HAL_TIM_IC_CaptureCallback>
 8004520:	e007      	b.n	8004532 <HAL_TIM_IRQHandler+0x5a>
        }
        /* Output compare event */
        else
        {
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	0018      	movs	r0, r3
 8004526:	f000 fd83 	bl	8005030 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	0018      	movs	r0, r3
 800452e:	f000 fd8f 	bl	8005050 <HAL_TIM_PWM_PulseFinishedCallback>
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	2200      	movs	r2, #0
 8004536:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	691b      	ldr	r3, [r3, #16]
 800453e:	2204      	movs	r2, #4
 8004540:	4013      	ands	r3, r2
 8004542:	2b04      	cmp	r3, #4
 8004544:	d125      	bne.n	8004592 <HAL_TIM_IRQHandler+0xba>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	68db      	ldr	r3, [r3, #12]
 800454c:	2204      	movs	r2, #4
 800454e:	4013      	ands	r3, r2
 8004550:	2b04      	cmp	r3, #4
 8004552:	d11e      	bne.n	8004592 <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	2205      	movs	r2, #5
 800455a:	4252      	negs	r2, r2
 800455c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	2202      	movs	r2, #2
 8004562:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	699a      	ldr	r2, [r3, #24]
 800456a:	23c0      	movs	r3, #192	; 0xc0
 800456c:	009b      	lsls	r3, r3, #2
 800456e:	4013      	ands	r3, r2
 8004570:	d004      	beq.n	800457c <HAL_TIM_IRQHandler+0xa4>
      {
        HAL_TIM_IC_CaptureCallback(htim);
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	0018      	movs	r0, r3
 8004576:	f000 fd63 	bl	8005040 <HAL_TIM_IC_CaptureCallback>
 800457a:	e007      	b.n	800458c <HAL_TIM_IRQHandler+0xb4>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	0018      	movs	r0, r3
 8004580:	f000 fd56 	bl	8005030 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	0018      	movs	r0, r3
 8004588:	f000 fd62 	bl	8005050 <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	2200      	movs	r2, #0
 8004590:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	691b      	ldr	r3, [r3, #16]
 8004598:	2208      	movs	r2, #8
 800459a:	4013      	ands	r3, r2
 800459c:	2b08      	cmp	r3, #8
 800459e:	d124      	bne.n	80045ea <HAL_TIM_IRQHandler+0x112>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	68db      	ldr	r3, [r3, #12]
 80045a6:	2208      	movs	r2, #8
 80045a8:	4013      	ands	r3, r2
 80045aa:	2b08      	cmp	r3, #8
 80045ac:	d11d      	bne.n	80045ea <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	2209      	movs	r2, #9
 80045b4:	4252      	negs	r2, r2
 80045b6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	2204      	movs	r2, #4
 80045bc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	69db      	ldr	r3, [r3, #28]
 80045c4:	2203      	movs	r2, #3
 80045c6:	4013      	ands	r3, r2
 80045c8:	d004      	beq.n	80045d4 <HAL_TIM_IRQHandler+0xfc>
      {
        HAL_TIM_IC_CaptureCallback(htim);
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	0018      	movs	r0, r3
 80045ce:	f000 fd37 	bl	8005040 <HAL_TIM_IC_CaptureCallback>
 80045d2:	e007      	b.n	80045e4 <HAL_TIM_IRQHandler+0x10c>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	0018      	movs	r0, r3
 80045d8:	f000 fd2a 	bl	8005030 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	0018      	movs	r0, r3
 80045e0:	f000 fd36 	bl	8005050 <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	2200      	movs	r2, #0
 80045e8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	691b      	ldr	r3, [r3, #16]
 80045f0:	2210      	movs	r2, #16
 80045f2:	4013      	ands	r3, r2
 80045f4:	2b10      	cmp	r3, #16
 80045f6:	d125      	bne.n	8004644 <HAL_TIM_IRQHandler+0x16c>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	68db      	ldr	r3, [r3, #12]
 80045fe:	2210      	movs	r2, #16
 8004600:	4013      	ands	r3, r2
 8004602:	2b10      	cmp	r3, #16
 8004604:	d11e      	bne.n	8004644 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	2211      	movs	r2, #17
 800460c:	4252      	negs	r2, r2
 800460e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	2208      	movs	r2, #8
 8004614:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	69da      	ldr	r2, [r3, #28]
 800461c:	23c0      	movs	r3, #192	; 0xc0
 800461e:	009b      	lsls	r3, r3, #2
 8004620:	4013      	ands	r3, r2
 8004622:	d004      	beq.n	800462e <HAL_TIM_IRQHandler+0x156>
      {
        HAL_TIM_IC_CaptureCallback(htim);
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	0018      	movs	r0, r3
 8004628:	f000 fd0a 	bl	8005040 <HAL_TIM_IC_CaptureCallback>
 800462c:	e007      	b.n	800463e <HAL_TIM_IRQHandler+0x166>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	0018      	movs	r0, r3
 8004632:	f000 fcfd 	bl	8005030 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	0018      	movs	r0, r3
 800463a:	f000 fd09 	bl	8005050 <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	2200      	movs	r2, #0
 8004642:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	691b      	ldr	r3, [r3, #16]
 800464a:	2201      	movs	r2, #1
 800464c:	4013      	ands	r3, r2
 800464e:	2b01      	cmp	r3, #1
 8004650:	d10f      	bne.n	8004672 <HAL_TIM_IRQHandler+0x19a>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) !=RESET)
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	68db      	ldr	r3, [r3, #12]
 8004658:	2201      	movs	r2, #1
 800465a:	4013      	ands	r3, r2
 800465c:	2b01      	cmp	r3, #1
 800465e:	d108      	bne.n	8004672 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	2202      	movs	r2, #2
 8004666:	4252      	negs	r2, r2
 8004668:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	0018      	movs	r0, r3
 800466e:	f000 fcd7 	bl	8005020 <HAL_TIM_PeriodElapsedCallback>
    }
  }
  /* TIM Break input event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	691b      	ldr	r3, [r3, #16]
 8004678:	2280      	movs	r2, #128	; 0x80
 800467a:	4013      	ands	r3, r2
 800467c:	2b80      	cmp	r3, #128	; 0x80
 800467e:	d10f      	bne.n	80046a0 <HAL_TIM_IRQHandler+0x1c8>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	68db      	ldr	r3, [r3, #12]
 8004686:	2280      	movs	r2, #128	; 0x80
 8004688:	4013      	ands	r3, r2
 800468a:	2b80      	cmp	r3, #128	; 0x80
 800468c:	d108      	bne.n	80046a0 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	2281      	movs	r2, #129	; 0x81
 8004694:	4252      	negs	r2, r2
 8004696:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	0018      	movs	r0, r3
 800469c:	f001 fbe4 	bl	8005e68 <HAL_TIMEx_BreakCallback>
    }
  }
  /* TIM Trigger detection event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	691b      	ldr	r3, [r3, #16]
 80046a6:	2240      	movs	r2, #64	; 0x40
 80046a8:	4013      	ands	r3, r2
 80046aa:	2b40      	cmp	r3, #64	; 0x40
 80046ac:	d10f      	bne.n	80046ce <HAL_TIM_IRQHandler+0x1f6>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) !=RESET)
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	68db      	ldr	r3, [r3, #12]
 80046b4:	2240      	movs	r2, #64	; 0x40
 80046b6:	4013      	ands	r3, r2
 80046b8:	2b40      	cmp	r3, #64	; 0x40
 80046ba:	d108      	bne.n	80046ce <HAL_TIM_IRQHandler+0x1f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	2241      	movs	r2, #65	; 0x41
 80046c2:	4252      	negs	r2, r2
 80046c4:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	0018      	movs	r0, r3
 80046ca:	f000 fcc9 	bl	8005060 <HAL_TIM_TriggerCallback>
    }
  }
  /* TIM commutation event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	691b      	ldr	r3, [r3, #16]
 80046d4:	2220      	movs	r2, #32
 80046d6:	4013      	ands	r3, r2
 80046d8:	2b20      	cmp	r3, #32
 80046da:	d10f      	bne.n	80046fc <HAL_TIM_IRQHandler+0x224>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	68db      	ldr	r3, [r3, #12]
 80046e2:	2220      	movs	r2, #32
 80046e4:	4013      	ands	r3, r2
 80046e6:	2b20      	cmp	r3, #32
 80046e8:	d108      	bne.n	80046fc <HAL_TIM_IRQHandler+0x224>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	2221      	movs	r2, #33	; 0x21
 80046f0:	4252      	negs	r2, r2
 80046f2:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutationCallback(htim);
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	0018      	movs	r0, r3
 80046f8:	f001 fbae 	bl	8005e58 <HAL_TIMEx_CommutationCallback>
    }
  }
}
 80046fc:	46c0      	nop			; (mov r8, r8)
 80046fe:	46bd      	mov	sp, r7
 8004700:	b002      	add	sp, #8
 8004702:	bd80      	pop	{r7, pc}

08004704 <HAL_TIM_OC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_OC_InitTypeDef* sConfig, uint32_t Channel)
{
 8004704:	b580      	push	{r7, lr}
 8004706:	b084      	sub	sp, #16
 8004708:	af00      	add	r7, sp, #0
 800470a:	60f8      	str	r0, [r7, #12]
 800470c:	60b9      	str	r1, [r7, #8]
 800470e:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_CHANNELS(Channel));
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	2b00      	cmp	r3, #0
 8004714:	d011      	beq.n	800473a <HAL_TIM_OC_ConfigChannel+0x36>
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	2b04      	cmp	r3, #4
 800471a:	d00e      	beq.n	800473a <HAL_TIM_OC_ConfigChannel+0x36>
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	2b08      	cmp	r3, #8
 8004720:	d00b      	beq.n	800473a <HAL_TIM_OC_ConfigChannel+0x36>
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	2b0c      	cmp	r3, #12
 8004726:	d008      	beq.n	800473a <HAL_TIM_OC_ConfigChannel+0x36>
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	2b18      	cmp	r3, #24
 800472c:	d005      	beq.n	800473a <HAL_TIM_OC_ConfigChannel+0x36>
 800472e:	4a76      	ldr	r2, [pc, #472]	; (8004908 <HAL_TIM_OC_ConfigChannel+0x204>)
 8004730:	4b76      	ldr	r3, [pc, #472]	; (800490c <HAL_TIM_OC_ConfigChannel+0x208>)
 8004732:	0011      	movs	r1, r2
 8004734:	0018      	movs	r0, r3
 8004736:	f7fc f91a 	bl	800096e <assert_failed>
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
 800473a:	68bb      	ldr	r3, [r7, #8]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	2b00      	cmp	r3, #0
 8004740:	d019      	beq.n	8004776 <HAL_TIM_OC_ConfigChannel+0x72>
 8004742:	68bb      	ldr	r3, [r7, #8]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	2b10      	cmp	r3, #16
 8004748:	d015      	beq.n	8004776 <HAL_TIM_OC_ConfigChannel+0x72>
 800474a:	68bb      	ldr	r3, [r7, #8]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	2b20      	cmp	r3, #32
 8004750:	d011      	beq.n	8004776 <HAL_TIM_OC_ConfigChannel+0x72>
 8004752:	68bb      	ldr	r3, [r7, #8]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	2b30      	cmp	r3, #48	; 0x30
 8004758:	d00d      	beq.n	8004776 <HAL_TIM_OC_ConfigChannel+0x72>
 800475a:	68bb      	ldr	r3, [r7, #8]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	2b50      	cmp	r3, #80	; 0x50
 8004760:	d009      	beq.n	8004776 <HAL_TIM_OC_ConfigChannel+0x72>
 8004762:	68bb      	ldr	r3, [r7, #8]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	2b40      	cmp	r3, #64	; 0x40
 8004768:	d005      	beq.n	8004776 <HAL_TIM_OC_ConfigChannel+0x72>
 800476a:	4a69      	ldr	r2, [pc, #420]	; (8004910 <HAL_TIM_OC_ConfigChannel+0x20c>)
 800476c:	4b67      	ldr	r3, [pc, #412]	; (800490c <HAL_TIM_OC_ConfigChannel+0x208>)
 800476e:	0011      	movs	r1, r2
 8004770:	0018      	movs	r0, r3
 8004772:	f7fc f8fc 	bl	800096e <assert_failed>
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
 8004776:	68bb      	ldr	r3, [r7, #8]
 8004778:	689b      	ldr	r3, [r3, #8]
 800477a:	2b00      	cmp	r3, #0
 800477c:	d009      	beq.n	8004792 <HAL_TIM_OC_ConfigChannel+0x8e>
 800477e:	68bb      	ldr	r3, [r7, #8]
 8004780:	689b      	ldr	r3, [r3, #8]
 8004782:	2b02      	cmp	r3, #2
 8004784:	d005      	beq.n	8004792 <HAL_TIM_OC_ConfigChannel+0x8e>
 8004786:	4a63      	ldr	r2, [pc, #396]	; (8004914 <HAL_TIM_OC_ConfigChannel+0x210>)
 8004788:	4b60      	ldr	r3, [pc, #384]	; (800490c <HAL_TIM_OC_ConfigChannel+0x208>)
 800478a:	0011      	movs	r1, r2
 800478c:	0018      	movs	r0, r3
 800478e:	f7fc f8ee 	bl	800096e <assert_failed>

  /* Check input state */
  __HAL_LOCK(htim);
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	223c      	movs	r2, #60	; 0x3c
 8004796:	5c9b      	ldrb	r3, [r3, r2]
 8004798:	2b01      	cmp	r3, #1
 800479a:	d101      	bne.n	80047a0 <HAL_TIM_OC_ConfigChannel+0x9c>
 800479c:	2302      	movs	r3, #2
 800479e:	e0ae      	b.n	80048fe <HAL_TIM_OC_ConfigChannel+0x1fa>
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	223c      	movs	r2, #60	; 0x3c
 80047a4:	2101      	movs	r1, #1
 80047a6:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	223d      	movs	r2, #61	; 0x3d
 80047ac:	2102      	movs	r1, #2
 80047ae:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	2b04      	cmp	r3, #4
 80047b4:	d03b      	beq.n	800482e <HAL_TIM_OC_ConfigChannel+0x12a>
 80047b6:	d802      	bhi.n	80047be <HAL_TIM_OC_ConfigChannel+0xba>
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d006      	beq.n	80047ca <HAL_TIM_OC_ConfigChannel+0xc6>
       TIM_OC4_SetConfig(htim->Instance, sConfig);
    }
    break;

    default:
    break;
 80047bc:	e096      	b.n	80048ec <HAL_TIM_OC_ConfigChannel+0x1e8>
  switch (Channel)
 80047be:	2b08      	cmp	r3, #8
 80047c0:	d058      	beq.n	8004874 <HAL_TIM_OC_ConfigChannel+0x170>
 80047c2:	2b0c      	cmp	r3, #12
 80047c4:	d100      	bne.n	80047c8 <HAL_TIM_OC_ConfigChannel+0xc4>
 80047c6:	e073      	b.n	80048b0 <HAL_TIM_OC_ConfigChannel+0x1ac>
    break;
 80047c8:	e090      	b.n	80048ec <HAL_TIM_OC_ConfigChannel+0x1e8>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	4a52      	ldr	r2, [pc, #328]	; (8004918 <HAL_TIM_OC_ConfigChannel+0x214>)
 80047d0:	4293      	cmp	r3, r2
 80047d2:	d024      	beq.n	800481e <HAL_TIM_OC_ConfigChannel+0x11a>
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	681a      	ldr	r2, [r3, #0]
 80047d8:	2380      	movs	r3, #128	; 0x80
 80047da:	05db      	lsls	r3, r3, #23
 80047dc:	429a      	cmp	r2, r3
 80047de:	d01e      	beq.n	800481e <HAL_TIM_OC_ConfigChannel+0x11a>
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	4a4d      	ldr	r2, [pc, #308]	; (800491c <HAL_TIM_OC_ConfigChannel+0x218>)
 80047e6:	4293      	cmp	r3, r2
 80047e8:	d019      	beq.n	800481e <HAL_TIM_OC_ConfigChannel+0x11a>
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	4a4c      	ldr	r2, [pc, #304]	; (8004920 <HAL_TIM_OC_ConfigChannel+0x21c>)
 80047f0:	4293      	cmp	r3, r2
 80047f2:	d014      	beq.n	800481e <HAL_TIM_OC_ConfigChannel+0x11a>
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	4a4a      	ldr	r2, [pc, #296]	; (8004924 <HAL_TIM_OC_ConfigChannel+0x220>)
 80047fa:	4293      	cmp	r3, r2
 80047fc:	d00f      	beq.n	800481e <HAL_TIM_OC_ConfigChannel+0x11a>
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	4a49      	ldr	r2, [pc, #292]	; (8004928 <HAL_TIM_OC_ConfigChannel+0x224>)
 8004804:	4293      	cmp	r3, r2
 8004806:	d00a      	beq.n	800481e <HAL_TIM_OC_ConfigChannel+0x11a>
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	4a47      	ldr	r2, [pc, #284]	; (800492c <HAL_TIM_OC_ConfigChannel+0x228>)
 800480e:	4293      	cmp	r3, r2
 8004810:	d005      	beq.n	800481e <HAL_TIM_OC_ConfigChannel+0x11a>
 8004812:	4a47      	ldr	r2, [pc, #284]	; (8004930 <HAL_TIM_OC_ConfigChannel+0x22c>)
 8004814:	4b3d      	ldr	r3, [pc, #244]	; (800490c <HAL_TIM_OC_ConfigChannel+0x208>)
 8004816:	0011      	movs	r1, r2
 8004818:	0018      	movs	r0, r3
 800481a:	f7fc f8a8 	bl	800096e <assert_failed>
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	68ba      	ldr	r2, [r7, #8]
 8004824:	0011      	movs	r1, r2
 8004826:	0018      	movs	r0, r3
 8004828:	f000 fca4 	bl	8005174 <TIM_OC1_SetConfig>
    break;
 800482c:	e05e      	b.n	80048ec <HAL_TIM_OC_ConfigChannel+0x1e8>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	4a39      	ldr	r2, [pc, #228]	; (8004918 <HAL_TIM_OC_ConfigChannel+0x214>)
 8004834:	4293      	cmp	r3, r2
 8004836:	d015      	beq.n	8004864 <HAL_TIM_OC_ConfigChannel+0x160>
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	681a      	ldr	r2, [r3, #0]
 800483c:	2380      	movs	r3, #128	; 0x80
 800483e:	05db      	lsls	r3, r3, #23
 8004840:	429a      	cmp	r2, r3
 8004842:	d00f      	beq.n	8004864 <HAL_TIM_OC_ConfigChannel+0x160>
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	4a34      	ldr	r2, [pc, #208]	; (800491c <HAL_TIM_OC_ConfigChannel+0x218>)
 800484a:	4293      	cmp	r3, r2
 800484c:	d00a      	beq.n	8004864 <HAL_TIM_OC_ConfigChannel+0x160>
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	4a34      	ldr	r2, [pc, #208]	; (8004924 <HAL_TIM_OC_ConfigChannel+0x220>)
 8004854:	4293      	cmp	r3, r2
 8004856:	d005      	beq.n	8004864 <HAL_TIM_OC_ConfigChannel+0x160>
 8004858:	4a36      	ldr	r2, [pc, #216]	; (8004934 <HAL_TIM_OC_ConfigChannel+0x230>)
 800485a:	4b2c      	ldr	r3, [pc, #176]	; (800490c <HAL_TIM_OC_ConfigChannel+0x208>)
 800485c:	0011      	movs	r1, r2
 800485e:	0018      	movs	r0, r3
 8004860:	f7fc f885 	bl	800096e <assert_failed>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	68ba      	ldr	r2, [r7, #8]
 800486a:	0011      	movs	r1, r2
 800486c:	0018      	movs	r0, r3
 800486e:	f000 fd45 	bl	80052fc <TIM_OC2_SetConfig>
    break;
 8004872:	e03b      	b.n	80048ec <HAL_TIM_OC_ConfigChannel+0x1e8>
       assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	4a27      	ldr	r2, [pc, #156]	; (8004918 <HAL_TIM_OC_ConfigChannel+0x214>)
 800487a:	4293      	cmp	r3, r2
 800487c:	d010      	beq.n	80048a0 <HAL_TIM_OC_ConfigChannel+0x19c>
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	681a      	ldr	r2, [r3, #0]
 8004882:	2380      	movs	r3, #128	; 0x80
 8004884:	05db      	lsls	r3, r3, #23
 8004886:	429a      	cmp	r2, r3
 8004888:	d00a      	beq.n	80048a0 <HAL_TIM_OC_ConfigChannel+0x19c>
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	4a23      	ldr	r2, [pc, #140]	; (800491c <HAL_TIM_OC_ConfigChannel+0x218>)
 8004890:	4293      	cmp	r3, r2
 8004892:	d005      	beq.n	80048a0 <HAL_TIM_OC_ConfigChannel+0x19c>
 8004894:	4a28      	ldr	r2, [pc, #160]	; (8004938 <HAL_TIM_OC_ConfigChannel+0x234>)
 8004896:	4b1d      	ldr	r3, [pc, #116]	; (800490c <HAL_TIM_OC_ConfigChannel+0x208>)
 8004898:	0011      	movs	r1, r2
 800489a:	0018      	movs	r0, r3
 800489c:	f7fc f867 	bl	800096e <assert_failed>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	68ba      	ldr	r2, [r7, #8]
 80048a6:	0011      	movs	r1, r2
 80048a8:	0018      	movs	r0, r3
 80048aa:	f000 fde7 	bl	800547c <TIM_OC3_SetConfig>
    break;
 80048ae:	e01d      	b.n	80048ec <HAL_TIM_OC_ConfigChannel+0x1e8>
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	4a18      	ldr	r2, [pc, #96]	; (8004918 <HAL_TIM_OC_ConfigChannel+0x214>)
 80048b6:	4293      	cmp	r3, r2
 80048b8:	d010      	beq.n	80048dc <HAL_TIM_OC_ConfigChannel+0x1d8>
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	681a      	ldr	r2, [r3, #0]
 80048be:	2380      	movs	r3, #128	; 0x80
 80048c0:	05db      	lsls	r3, r3, #23
 80048c2:	429a      	cmp	r2, r3
 80048c4:	d00a      	beq.n	80048dc <HAL_TIM_OC_ConfigChannel+0x1d8>
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	4a14      	ldr	r2, [pc, #80]	; (800491c <HAL_TIM_OC_ConfigChannel+0x218>)
 80048cc:	4293      	cmp	r3, r2
 80048ce:	d005      	beq.n	80048dc <HAL_TIM_OC_ConfigChannel+0x1d8>
 80048d0:	4a1a      	ldr	r2, [pc, #104]	; (800493c <HAL_TIM_OC_ConfigChannel+0x238>)
 80048d2:	4b0e      	ldr	r3, [pc, #56]	; (800490c <HAL_TIM_OC_ConfigChannel+0x208>)
 80048d4:	0011      	movs	r1, r2
 80048d6:	0018      	movs	r0, r3
 80048d8:	f7fc f849 	bl	800096e <assert_failed>
       TIM_OC4_SetConfig(htim->Instance, sConfig);
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	68ba      	ldr	r2, [r7, #8]
 80048e2:	0011      	movs	r1, r2
 80048e4:	0018      	movs	r0, r3
 80048e6:	f000 fe8b 	bl	8005600 <TIM_OC4_SetConfig>
    break;
 80048ea:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	223d      	movs	r2, #61	; 0x3d
 80048f0:	2101      	movs	r1, #1
 80048f2:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	223c      	movs	r2, #60	; 0x3c
 80048f8:	2100      	movs	r1, #0
 80048fa:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80048fc:	2300      	movs	r3, #0
}
 80048fe:	0018      	movs	r0, r3
 8004900:	46bd      	mov	sp, r7
 8004902:	b004      	add	sp, #16
 8004904:	bd80      	pop	{r7, pc}
 8004906:	46c0      	nop			; (mov r8, r8)
 8004908:	00000b77 	.word	0x00000b77
 800490c:	08006b1c 	.word	0x08006b1c
 8004910:	00000b78 	.word	0x00000b78
 8004914:	00000b79 	.word	0x00000b79
 8004918:	40012c00 	.word	0x40012c00
 800491c:	40000400 	.word	0x40000400
 8004920:	40002000 	.word	0x40002000
 8004924:	40014000 	.word	0x40014000
 8004928:	40014400 	.word	0x40014400
 800492c:	40014800 	.word	0x40014800
 8004930:	00000b84 	.word	0x00000b84
 8004934:	00000b8c 	.word	0x00000b8c
 8004938:	00000b94 	.word	0x00000b94
 800493c:	00000b9c 	.word	0x00000b9c

08004940 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */ 
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef * sClockSourceConfig)
{
 8004940:	b580      	push	{r7, lr}
 8004942:	b084      	sub	sp, #16
 8004944:	af00      	add	r7, sp, #0
 8004946:	6078      	str	r0, [r7, #4]
 8004948:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr = 0U;
 800494a:	2300      	movs	r3, #0
 800494c:	60fb      	str	r3, [r7, #12]

  /* Process Locked */
  __HAL_LOCK(htim);
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	223c      	movs	r2, #60	; 0x3c
 8004952:	5c9b      	ldrb	r3, [r3, r2]
 8004954:	2b01      	cmp	r3, #1
 8004956:	d102      	bne.n	800495e <HAL_TIM_ConfigClockSource+0x1e>
 8004958:	2302      	movs	r3, #2
 800495a:	f000 fb52 	bl	8005002 <HAL_TIM_ConfigClockSource+0x6c2>
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	223c      	movs	r2, #60	; 0x3c
 8004962:	2101      	movs	r1, #1
 8004964:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	223d      	movs	r2, #61	; 0x3d
 800496a:	2102      	movs	r1, #2
 800496c:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));
 800496e:	683b      	ldr	r3, [r7, #0]
 8004970:	681a      	ldr	r2, [r3, #0]
 8004972:	2380      	movs	r3, #128	; 0x80
 8004974:	015b      	lsls	r3, r3, #5
 8004976:	429a      	cmp	r2, r3
 8004978:	d02b      	beq.n	80049d2 <HAL_TIM_ConfigClockSource+0x92>
 800497a:	683b      	ldr	r3, [r7, #0]
 800497c:	681a      	ldr	r2, [r3, #0]
 800497e:	2380      	movs	r3, #128	; 0x80
 8004980:	019b      	lsls	r3, r3, #6
 8004982:	429a      	cmp	r2, r3
 8004984:	d025      	beq.n	80049d2 <HAL_TIM_ConfigClockSource+0x92>
 8004986:	683b      	ldr	r3, [r7, #0]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	2b00      	cmp	r3, #0
 800498c:	d021      	beq.n	80049d2 <HAL_TIM_ConfigClockSource+0x92>
 800498e:	683b      	ldr	r3, [r7, #0]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	2b10      	cmp	r3, #16
 8004994:	d01d      	beq.n	80049d2 <HAL_TIM_ConfigClockSource+0x92>
 8004996:	683b      	ldr	r3, [r7, #0]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	2b20      	cmp	r3, #32
 800499c:	d019      	beq.n	80049d2 <HAL_TIM_ConfigClockSource+0x92>
 800499e:	683b      	ldr	r3, [r7, #0]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	2b30      	cmp	r3, #48	; 0x30
 80049a4:	d015      	beq.n	80049d2 <HAL_TIM_ConfigClockSource+0x92>
 80049a6:	683b      	ldr	r3, [r7, #0]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	2b40      	cmp	r3, #64	; 0x40
 80049ac:	d011      	beq.n	80049d2 <HAL_TIM_ConfigClockSource+0x92>
 80049ae:	683b      	ldr	r3, [r7, #0]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	2b50      	cmp	r3, #80	; 0x50
 80049b4:	d00d      	beq.n	80049d2 <HAL_TIM_ConfigClockSource+0x92>
 80049b6:	683b      	ldr	r3, [r7, #0]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	2b60      	cmp	r3, #96	; 0x60
 80049bc:	d009      	beq.n	80049d2 <HAL_TIM_ConfigClockSource+0x92>
 80049be:	683b      	ldr	r3, [r7, #0]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	2b70      	cmp	r3, #112	; 0x70
 80049c4:	d005      	beq.n	80049d2 <HAL_TIM_ConfigClockSource+0x92>
 80049c6:	4aab      	ldr	r2, [pc, #684]	; (8004c74 <HAL_TIM_ConfigClockSource+0x334>)
 80049c8:	4bab      	ldr	r3, [pc, #684]	; (8004c78 <HAL_TIM_ConfigClockSource+0x338>)
 80049ca:	0011      	movs	r1, r2
 80049cc:	0018      	movs	r0, r3
 80049ce:	f7fb ffce 	bl	800096e <assert_failed>

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	689b      	ldr	r3, [r3, #8]
 80049d8:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	2277      	movs	r2, #119	; 0x77
 80049de:	4393      	bics	r3, r2
 80049e0:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	4aa5      	ldr	r2, [pc, #660]	; (8004c7c <HAL_TIM_ConfigClockSource+0x33c>)
 80049e6:	4013      	ands	r3, r2
 80049e8:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	68fa      	ldr	r2, [r7, #12]
 80049f0:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80049f2:	683b      	ldr	r3, [r7, #0]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	2b40      	cmp	r3, #64	; 0x40
 80049f8:	d100      	bne.n	80049fc <HAL_TIM_ConfigClockSource+0xbc>
 80049fa:	e202      	b.n	8004e02 <HAL_TIM_ConfigClockSource+0x4c2>
 80049fc:	d80e      	bhi.n	8004a1c <HAL_TIM_ConfigClockSource+0xdc>
 80049fe:	2b10      	cmp	r3, #16
 8004a00:	d100      	bne.n	8004a04 <HAL_TIM_ConfigClockSource+0xc4>
 8004a02:	e271      	b.n	8004ee8 <HAL_TIM_ConfigClockSource+0x5a8>
 8004a04:	d803      	bhi.n	8004a0e <HAL_TIM_ConfigClockSource+0xce>
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d100      	bne.n	8004a0c <HAL_TIM_ConfigClockSource+0xcc>
 8004a0a:	e24b      	b.n	8004ea4 <HAL_TIM_ConfigClockSource+0x564>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR3);
    }
    break;

  default:
    break;
 8004a0c:	e2f0      	b.n	8004ff0 <HAL_TIM_ConfigClockSource+0x6b0>
  switch (sClockSourceConfig->ClockSource)
 8004a0e:	2b20      	cmp	r3, #32
 8004a10:	d100      	bne.n	8004a14 <HAL_TIM_ConfigClockSource+0xd4>
 8004a12:	e28b      	b.n	8004f2c <HAL_TIM_ConfigClockSource+0x5ec>
 8004a14:	2b30      	cmp	r3, #48	; 0x30
 8004a16:	d100      	bne.n	8004a1a <HAL_TIM_ConfigClockSource+0xda>
 8004a18:	e2c8      	b.n	8004fac <HAL_TIM_ConfigClockSource+0x66c>
    break;
 8004a1a:	e2e9      	b.n	8004ff0 <HAL_TIM_ConfigClockSource+0x6b0>
  switch (sClockSourceConfig->ClockSource)
 8004a1c:	2b70      	cmp	r3, #112	; 0x70
 8004a1e:	d049      	beq.n	8004ab4 <HAL_TIM_ConfigClockSource+0x174>
 8004a20:	d806      	bhi.n	8004a30 <HAL_TIM_ConfigClockSource+0xf0>
 8004a22:	2b50      	cmp	r3, #80	; 0x50
 8004a24:	d100      	bne.n	8004a28 <HAL_TIM_ConfigClockSource+0xe8>
 8004a26:	e149      	b.n	8004cbc <HAL_TIM_ConfigClockSource+0x37c>
 8004a28:	2b60      	cmp	r3, #96	; 0x60
 8004a2a:	d100      	bne.n	8004a2e <HAL_TIM_ConfigClockSource+0xee>
 8004a2c:	e198      	b.n	8004d60 <HAL_TIM_ConfigClockSource+0x420>
    break;
 8004a2e:	e2df      	b.n	8004ff0 <HAL_TIM_ConfigClockSource+0x6b0>
  switch (sClockSourceConfig->ClockSource)
 8004a30:	2280      	movs	r2, #128	; 0x80
 8004a32:	0152      	lsls	r2, r2, #5
 8004a34:	4293      	cmp	r3, r2
 8004a36:	d005      	beq.n	8004a44 <HAL_TIM_ConfigClockSource+0x104>
 8004a38:	2280      	movs	r2, #128	; 0x80
 8004a3a:	0192      	lsls	r2, r2, #6
 8004a3c:	4293      	cmp	r3, r2
 8004a3e:	d100      	bne.n	8004a42 <HAL_TIM_ConfigClockSource+0x102>
 8004a40:	e0ab      	b.n	8004b9a <HAL_TIM_ConfigClockSource+0x25a>
    break;
 8004a42:	e2d5      	b.n	8004ff0 <HAL_TIM_ConfigClockSource+0x6b0>
      assert_param(IS_TIM_INSTANCE(htim->Instance));
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	4a8d      	ldr	r2, [pc, #564]	; (8004c80 <HAL_TIM_ConfigClockSource+0x340>)
 8004a4a:	4293      	cmp	r3, r2
 8004a4c:	d029      	beq.n	8004aa2 <HAL_TIM_ConfigClockSource+0x162>
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	681a      	ldr	r2, [r3, #0]
 8004a52:	2380      	movs	r3, #128	; 0x80
 8004a54:	05db      	lsls	r3, r3, #23
 8004a56:	429a      	cmp	r2, r3
 8004a58:	d023      	beq.n	8004aa2 <HAL_TIM_ConfigClockSource+0x162>
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	4a89      	ldr	r2, [pc, #548]	; (8004c84 <HAL_TIM_ConfigClockSource+0x344>)
 8004a60:	4293      	cmp	r3, r2
 8004a62:	d01e      	beq.n	8004aa2 <HAL_TIM_ConfigClockSource+0x162>
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	4a87      	ldr	r2, [pc, #540]	; (8004c88 <HAL_TIM_ConfigClockSource+0x348>)
 8004a6a:	4293      	cmp	r3, r2
 8004a6c:	d019      	beq.n	8004aa2 <HAL_TIM_ConfigClockSource+0x162>
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	4a86      	ldr	r2, [pc, #536]	; (8004c8c <HAL_TIM_ConfigClockSource+0x34c>)
 8004a74:	4293      	cmp	r3, r2
 8004a76:	d014      	beq.n	8004aa2 <HAL_TIM_ConfigClockSource+0x162>
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	4a84      	ldr	r2, [pc, #528]	; (8004c90 <HAL_TIM_ConfigClockSource+0x350>)
 8004a7e:	4293      	cmp	r3, r2
 8004a80:	d00f      	beq.n	8004aa2 <HAL_TIM_ConfigClockSource+0x162>
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	4a83      	ldr	r2, [pc, #524]	; (8004c94 <HAL_TIM_ConfigClockSource+0x354>)
 8004a88:	4293      	cmp	r3, r2
 8004a8a:	d00a      	beq.n	8004aa2 <HAL_TIM_ConfigClockSource+0x162>
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	4a81      	ldr	r2, [pc, #516]	; (8004c98 <HAL_TIM_ConfigClockSource+0x358>)
 8004a92:	4293      	cmp	r3, r2
 8004a94:	d005      	beq.n	8004aa2 <HAL_TIM_ConfigClockSource+0x162>
 8004a96:	4a81      	ldr	r2, [pc, #516]	; (8004c9c <HAL_TIM_ConfigClockSource+0x35c>)
 8004a98:	4b77      	ldr	r3, [pc, #476]	; (8004c78 <HAL_TIM_ConfigClockSource+0x338>)
 8004a9a:	0011      	movs	r1, r2
 8004a9c:	0018      	movs	r0, r3
 8004a9e:	f7fb ff66 	bl	800096e <assert_failed>
      htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	689a      	ldr	r2, [r3, #8]
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	2107      	movs	r1, #7
 8004aae:	438a      	bics	r2, r1
 8004ab0:	609a      	str	r2, [r3, #8]
    break;
 8004ab2:	e29d      	b.n	8004ff0 <HAL_TIM_ConfigClockSource+0x6b0>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	4a71      	ldr	r2, [pc, #452]	; (8004c80 <HAL_TIM_ConfigClockSource+0x340>)
 8004aba:	4293      	cmp	r3, r2
 8004abc:	d010      	beq.n	8004ae0 <HAL_TIM_ConfigClockSource+0x1a0>
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	681a      	ldr	r2, [r3, #0]
 8004ac2:	2380      	movs	r3, #128	; 0x80
 8004ac4:	05db      	lsls	r3, r3, #23
 8004ac6:	429a      	cmp	r2, r3
 8004ac8:	d00a      	beq.n	8004ae0 <HAL_TIM_ConfigClockSource+0x1a0>
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	4a6d      	ldr	r2, [pc, #436]	; (8004c84 <HAL_TIM_ConfigClockSource+0x344>)
 8004ad0:	4293      	cmp	r3, r2
 8004ad2:	d005      	beq.n	8004ae0 <HAL_TIM_ConfigClockSource+0x1a0>
 8004ad4:	4a72      	ldr	r2, [pc, #456]	; (8004ca0 <HAL_TIM_ConfigClockSource+0x360>)
 8004ad6:	4b68      	ldr	r3, [pc, #416]	; (8004c78 <HAL_TIM_ConfigClockSource+0x338>)
 8004ad8:	0011      	movs	r1, r2
 8004ada:	0018      	movs	r0, r3
 8004adc:	f7fb ff47 	bl	800096e <assert_failed>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
 8004ae0:	683b      	ldr	r3, [r7, #0]
 8004ae2:	689b      	ldr	r3, [r3, #8]
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d017      	beq.n	8004b18 <HAL_TIM_ConfigClockSource+0x1d8>
 8004ae8:	683b      	ldr	r3, [r7, #0]
 8004aea:	689a      	ldr	r2, [r3, #8]
 8004aec:	2380      	movs	r3, #128	; 0x80
 8004aee:	015b      	lsls	r3, r3, #5
 8004af0:	429a      	cmp	r2, r3
 8004af2:	d011      	beq.n	8004b18 <HAL_TIM_ConfigClockSource+0x1d8>
 8004af4:	683b      	ldr	r3, [r7, #0]
 8004af6:	689a      	ldr	r2, [r3, #8]
 8004af8:	2380      	movs	r3, #128	; 0x80
 8004afa:	019b      	lsls	r3, r3, #6
 8004afc:	429a      	cmp	r2, r3
 8004afe:	d00b      	beq.n	8004b18 <HAL_TIM_ConfigClockSource+0x1d8>
 8004b00:	683b      	ldr	r3, [r7, #0]
 8004b02:	689a      	ldr	r2, [r3, #8]
 8004b04:	23c0      	movs	r3, #192	; 0xc0
 8004b06:	019b      	lsls	r3, r3, #6
 8004b08:	429a      	cmp	r2, r3
 8004b0a:	d005      	beq.n	8004b18 <HAL_TIM_ConfigClockSource+0x1d8>
 8004b0c:	4a65      	ldr	r2, [pc, #404]	; (8004ca4 <HAL_TIM_ConfigClockSource+0x364>)
 8004b0e:	4b5a      	ldr	r3, [pc, #360]	; (8004c78 <HAL_TIM_ConfigClockSource+0x338>)
 8004b10:	0011      	movs	r1, r2
 8004b12:	0018      	movs	r0, r3
 8004b14:	f7fb ff2b 	bl	800096e <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 8004b18:	683b      	ldr	r3, [r7, #0]
 8004b1a:	685a      	ldr	r2, [r3, #4]
 8004b1c:	2380      	movs	r3, #128	; 0x80
 8004b1e:	021b      	lsls	r3, r3, #8
 8004b20:	429a      	cmp	r2, r3
 8004b22:	d015      	beq.n	8004b50 <HAL_TIM_ConfigClockSource+0x210>
 8004b24:	683b      	ldr	r3, [r7, #0]
 8004b26:	685b      	ldr	r3, [r3, #4]
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d011      	beq.n	8004b50 <HAL_TIM_ConfigClockSource+0x210>
 8004b2c:	683b      	ldr	r3, [r7, #0]
 8004b2e:	685b      	ldr	r3, [r3, #4]
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d00d      	beq.n	8004b50 <HAL_TIM_ConfigClockSource+0x210>
 8004b34:	683b      	ldr	r3, [r7, #0]
 8004b36:	685b      	ldr	r3, [r3, #4]
 8004b38:	2b02      	cmp	r3, #2
 8004b3a:	d009      	beq.n	8004b50 <HAL_TIM_ConfigClockSource+0x210>
 8004b3c:	683b      	ldr	r3, [r7, #0]
 8004b3e:	685b      	ldr	r3, [r3, #4]
 8004b40:	2b0a      	cmp	r3, #10
 8004b42:	d005      	beq.n	8004b50 <HAL_TIM_ConfigClockSource+0x210>
 8004b44:	4a58      	ldr	r2, [pc, #352]	; (8004ca8 <HAL_TIM_ConfigClockSource+0x368>)
 8004b46:	4b4c      	ldr	r3, [pc, #304]	; (8004c78 <HAL_TIM_ConfigClockSource+0x338>)
 8004b48:	0011      	movs	r1, r2
 8004b4a:	0018      	movs	r0, r3
 8004b4c:	f7fb ff0f 	bl	800096e <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8004b50:	683b      	ldr	r3, [r7, #0]
 8004b52:	68db      	ldr	r3, [r3, #12]
 8004b54:	2b0f      	cmp	r3, #15
 8004b56:	d905      	bls.n	8004b64 <HAL_TIM_ConfigClockSource+0x224>
 8004b58:	4a54      	ldr	r2, [pc, #336]	; (8004cac <HAL_TIM_ConfigClockSource+0x36c>)
 8004b5a:	4b47      	ldr	r3, [pc, #284]	; (8004c78 <HAL_TIM_ConfigClockSource+0x338>)
 8004b5c:	0011      	movs	r1, r2
 8004b5e:	0018      	movs	r0, r3
 8004b60:	f7fb ff05 	bl	800096e <assert_failed>
      TIM_ETR_SetConfig(htim->Instance,
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	6818      	ldr	r0, [r3, #0]
 8004b68:	683b      	ldr	r3, [r7, #0]
 8004b6a:	6899      	ldr	r1, [r3, #8]
 8004b6c:	683b      	ldr	r3, [r7, #0]
 8004b6e:	685a      	ldr	r2, [r3, #4]
 8004b70:	683b      	ldr	r3, [r7, #0]
 8004b72:	68db      	ldr	r3, [r3, #12]
 8004b74:	f000 fe50 	bl	8005818 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	689b      	ldr	r3, [r3, #8]
 8004b7e:	60fb      	str	r3, [r7, #12]
      tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	2277      	movs	r2, #119	; 0x77
 8004b84:	4393      	bics	r3, r2
 8004b86:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	2277      	movs	r2, #119	; 0x77
 8004b8c:	4313      	orrs	r3, r2
 8004b8e:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	68fa      	ldr	r2, [r7, #12]
 8004b96:	609a      	str	r2, [r3, #8]
    break;
 8004b98:	e22a      	b.n	8004ff0 <HAL_TIM_ConfigClockSource+0x6b0>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE2_INSTANCE(htim->Instance));
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	4a38      	ldr	r2, [pc, #224]	; (8004c80 <HAL_TIM_ConfigClockSource+0x340>)
 8004ba0:	4293      	cmp	r3, r2
 8004ba2:	d010      	beq.n	8004bc6 <HAL_TIM_ConfigClockSource+0x286>
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681a      	ldr	r2, [r3, #0]
 8004ba8:	2380      	movs	r3, #128	; 0x80
 8004baa:	05db      	lsls	r3, r3, #23
 8004bac:	429a      	cmp	r2, r3
 8004bae:	d00a      	beq.n	8004bc6 <HAL_TIM_ConfigClockSource+0x286>
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	4a33      	ldr	r2, [pc, #204]	; (8004c84 <HAL_TIM_ConfigClockSource+0x344>)
 8004bb6:	4293      	cmp	r3, r2
 8004bb8:	d005      	beq.n	8004bc6 <HAL_TIM_ConfigClockSource+0x286>
 8004bba:	4a3d      	ldr	r2, [pc, #244]	; (8004cb0 <HAL_TIM_ConfigClockSource+0x370>)
 8004bbc:	4b2e      	ldr	r3, [pc, #184]	; (8004c78 <HAL_TIM_ConfigClockSource+0x338>)
 8004bbe:	0011      	movs	r1, r2
 8004bc0:	0018      	movs	r0, r3
 8004bc2:	f7fb fed4 	bl	800096e <assert_failed>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
 8004bc6:	683b      	ldr	r3, [r7, #0]
 8004bc8:	689b      	ldr	r3, [r3, #8]
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d017      	beq.n	8004bfe <HAL_TIM_ConfigClockSource+0x2be>
 8004bce:	683b      	ldr	r3, [r7, #0]
 8004bd0:	689a      	ldr	r2, [r3, #8]
 8004bd2:	2380      	movs	r3, #128	; 0x80
 8004bd4:	015b      	lsls	r3, r3, #5
 8004bd6:	429a      	cmp	r2, r3
 8004bd8:	d011      	beq.n	8004bfe <HAL_TIM_ConfigClockSource+0x2be>
 8004bda:	683b      	ldr	r3, [r7, #0]
 8004bdc:	689a      	ldr	r2, [r3, #8]
 8004bde:	2380      	movs	r3, #128	; 0x80
 8004be0:	019b      	lsls	r3, r3, #6
 8004be2:	429a      	cmp	r2, r3
 8004be4:	d00b      	beq.n	8004bfe <HAL_TIM_ConfigClockSource+0x2be>
 8004be6:	683b      	ldr	r3, [r7, #0]
 8004be8:	689a      	ldr	r2, [r3, #8]
 8004bea:	23c0      	movs	r3, #192	; 0xc0
 8004bec:	019b      	lsls	r3, r3, #6
 8004bee:	429a      	cmp	r2, r3
 8004bf0:	d005      	beq.n	8004bfe <HAL_TIM_ConfigClockSource+0x2be>
 8004bf2:	4a30      	ldr	r2, [pc, #192]	; (8004cb4 <HAL_TIM_ConfigClockSource+0x374>)
 8004bf4:	4b20      	ldr	r3, [pc, #128]	; (8004c78 <HAL_TIM_ConfigClockSource+0x338>)
 8004bf6:	0011      	movs	r1, r2
 8004bf8:	0018      	movs	r0, r3
 8004bfa:	f7fb feb8 	bl	800096e <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 8004bfe:	683b      	ldr	r3, [r7, #0]
 8004c00:	685a      	ldr	r2, [r3, #4]
 8004c02:	2380      	movs	r3, #128	; 0x80
 8004c04:	021b      	lsls	r3, r3, #8
 8004c06:	429a      	cmp	r2, r3
 8004c08:	d016      	beq.n	8004c38 <HAL_TIM_ConfigClockSource+0x2f8>
 8004c0a:	683b      	ldr	r3, [r7, #0]
 8004c0c:	685b      	ldr	r3, [r3, #4]
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d012      	beq.n	8004c38 <HAL_TIM_ConfigClockSource+0x2f8>
 8004c12:	683b      	ldr	r3, [r7, #0]
 8004c14:	685b      	ldr	r3, [r3, #4]
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d00e      	beq.n	8004c38 <HAL_TIM_ConfigClockSource+0x2f8>
 8004c1a:	683b      	ldr	r3, [r7, #0]
 8004c1c:	685b      	ldr	r3, [r3, #4]
 8004c1e:	2b02      	cmp	r3, #2
 8004c20:	d00a      	beq.n	8004c38 <HAL_TIM_ConfigClockSource+0x2f8>
 8004c22:	683b      	ldr	r3, [r7, #0]
 8004c24:	685b      	ldr	r3, [r3, #4]
 8004c26:	2b0a      	cmp	r3, #10
 8004c28:	d006      	beq.n	8004c38 <HAL_TIM_ConfigClockSource+0x2f8>
 8004c2a:	23ff      	movs	r3, #255	; 0xff
 8004c2c:	011a      	lsls	r2, r3, #4
 8004c2e:	4b12      	ldr	r3, [pc, #72]	; (8004c78 <HAL_TIM_ConfigClockSource+0x338>)
 8004c30:	0011      	movs	r1, r2
 8004c32:	0018      	movs	r0, r3
 8004c34:	f7fb fe9b 	bl	800096e <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8004c38:	683b      	ldr	r3, [r7, #0]
 8004c3a:	68db      	ldr	r3, [r3, #12]
 8004c3c:	2b0f      	cmp	r3, #15
 8004c3e:	d905      	bls.n	8004c4c <HAL_TIM_ConfigClockSource+0x30c>
 8004c40:	4a1d      	ldr	r2, [pc, #116]	; (8004cb8 <HAL_TIM_ConfigClockSource+0x378>)
 8004c42:	4b0d      	ldr	r3, [pc, #52]	; (8004c78 <HAL_TIM_ConfigClockSource+0x338>)
 8004c44:	0011      	movs	r1, r2
 8004c46:	0018      	movs	r0, r3
 8004c48:	f7fb fe91 	bl	800096e <assert_failed>
      TIM_ETR_SetConfig(htim->Instance,
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	6818      	ldr	r0, [r3, #0]
 8004c50:	683b      	ldr	r3, [r7, #0]
 8004c52:	6899      	ldr	r1, [r3, #8]
 8004c54:	683b      	ldr	r3, [r7, #0]
 8004c56:	685a      	ldr	r2, [r3, #4]
 8004c58:	683b      	ldr	r3, [r7, #0]
 8004c5a:	68db      	ldr	r3, [r3, #12]
 8004c5c:	f000 fddc 	bl	8005818 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	689a      	ldr	r2, [r3, #8]
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	2180      	movs	r1, #128	; 0x80
 8004c6c:	01c9      	lsls	r1, r1, #7
 8004c6e:	430a      	orrs	r2, r1
 8004c70:	609a      	str	r2, [r3, #8]
    break;
 8004c72:	e1bd      	b.n	8004ff0 <HAL_TIM_ConfigClockSource+0x6b0>
 8004c74:	00000fbd 	.word	0x00000fbd
 8004c78:	08006b1c 	.word	0x08006b1c
 8004c7c:	ffff00ff 	.word	0xffff00ff
 8004c80:	40012c00 	.word	0x40012c00
 8004c84:	40000400 	.word	0x40000400
 8004c88:	40001000 	.word	0x40001000
 8004c8c:	40002000 	.word	0x40002000
 8004c90:	40014000 	.word	0x40014000
 8004c94:	40014400 	.word	0x40014400
 8004c98:	40014800 	.word	0x40014800
 8004c9c:	00000fc9 	.word	0x00000fc9
 8004ca0:	00000fd2 	.word	0x00000fd2
 8004ca4:	00000fd5 	.word	0x00000fd5
 8004ca8:	00000fd6 	.word	0x00000fd6
 8004cac:	00000fd7 	.word	0x00000fd7
 8004cb0:	00000fec 	.word	0x00000fec
 8004cb4:	00000fef 	.word	0x00000fef
 8004cb8:	00000ff1 	.word	0x00000ff1
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	4aab      	ldr	r2, [pc, #684]	; (8004f70 <HAL_TIM_ConfigClockSource+0x630>)
 8004cc2:	4293      	cmp	r3, r2
 8004cc4:	d016      	beq.n	8004cf4 <HAL_TIM_ConfigClockSource+0x3b4>
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681a      	ldr	r2, [r3, #0]
 8004cca:	2380      	movs	r3, #128	; 0x80
 8004ccc:	05db      	lsls	r3, r3, #23
 8004cce:	429a      	cmp	r2, r3
 8004cd0:	d010      	beq.n	8004cf4 <HAL_TIM_ConfigClockSource+0x3b4>
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	4aa7      	ldr	r2, [pc, #668]	; (8004f74 <HAL_TIM_ConfigClockSource+0x634>)
 8004cd8:	4293      	cmp	r3, r2
 8004cda:	d00b      	beq.n	8004cf4 <HAL_TIM_ConfigClockSource+0x3b4>
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	4aa5      	ldr	r2, [pc, #660]	; (8004f78 <HAL_TIM_ConfigClockSource+0x638>)
 8004ce2:	4293      	cmp	r3, r2
 8004ce4:	d006      	beq.n	8004cf4 <HAL_TIM_ConfigClockSource+0x3b4>
 8004ce6:	2380      	movs	r3, #128	; 0x80
 8004ce8:	015a      	lsls	r2, r3, #5
 8004cea:	4ba4      	ldr	r3, [pc, #656]	; (8004f7c <HAL_TIM_ConfigClockSource+0x63c>)
 8004cec:	0011      	movs	r1, r2
 8004cee:	0018      	movs	r0, r3
 8004cf0:	f7fb fe3d 	bl	800096e <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 8004cf4:	683b      	ldr	r3, [r7, #0]
 8004cf6:	685a      	ldr	r2, [r3, #4]
 8004cf8:	2380      	movs	r3, #128	; 0x80
 8004cfa:	021b      	lsls	r3, r3, #8
 8004cfc:	429a      	cmp	r2, r3
 8004cfe:	d015      	beq.n	8004d2c <HAL_TIM_ConfigClockSource+0x3ec>
 8004d00:	683b      	ldr	r3, [r7, #0]
 8004d02:	685b      	ldr	r3, [r3, #4]
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d011      	beq.n	8004d2c <HAL_TIM_ConfigClockSource+0x3ec>
 8004d08:	683b      	ldr	r3, [r7, #0]
 8004d0a:	685b      	ldr	r3, [r3, #4]
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	d00d      	beq.n	8004d2c <HAL_TIM_ConfigClockSource+0x3ec>
 8004d10:	683b      	ldr	r3, [r7, #0]
 8004d12:	685b      	ldr	r3, [r3, #4]
 8004d14:	2b02      	cmp	r3, #2
 8004d16:	d009      	beq.n	8004d2c <HAL_TIM_ConfigClockSource+0x3ec>
 8004d18:	683b      	ldr	r3, [r7, #0]
 8004d1a:	685b      	ldr	r3, [r3, #4]
 8004d1c:	2b0a      	cmp	r3, #10
 8004d1e:	d005      	beq.n	8004d2c <HAL_TIM_ConfigClockSource+0x3ec>
 8004d20:	4a97      	ldr	r2, [pc, #604]	; (8004f80 <HAL_TIM_ConfigClockSource+0x640>)
 8004d22:	4b96      	ldr	r3, [pc, #600]	; (8004f7c <HAL_TIM_ConfigClockSource+0x63c>)
 8004d24:	0011      	movs	r1, r2
 8004d26:	0018      	movs	r0, r3
 8004d28:	f7fb fe21 	bl	800096e <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8004d2c:	683b      	ldr	r3, [r7, #0]
 8004d2e:	68db      	ldr	r3, [r3, #12]
 8004d30:	2b0f      	cmp	r3, #15
 8004d32:	d905      	bls.n	8004d40 <HAL_TIM_ConfigClockSource+0x400>
 8004d34:	4a93      	ldr	r2, [pc, #588]	; (8004f84 <HAL_TIM_ConfigClockSource+0x644>)
 8004d36:	4b91      	ldr	r3, [pc, #580]	; (8004f7c <HAL_TIM_ConfigClockSource+0x63c>)
 8004d38:	0011      	movs	r1, r2
 8004d3a:	0018      	movs	r0, r3
 8004d3c:	f7fb fe17 	bl	800096e <assert_failed>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	6818      	ldr	r0, [r3, #0]
 8004d44:	683b      	ldr	r3, [r7, #0]
 8004d46:	6859      	ldr	r1, [r3, #4]
 8004d48:	683b      	ldr	r3, [r7, #0]
 8004d4a:	68db      	ldr	r3, [r3, #12]
 8004d4c:	001a      	movs	r2, r3
 8004d4e:	f000 fcdb 	bl	8005708 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	2150      	movs	r1, #80	; 0x50
 8004d58:	0018      	movs	r0, r3
 8004d5a:	f000 fd3d 	bl	80057d8 <TIM_ITRx_SetConfig>
    break;
 8004d5e:	e147      	b.n	8004ff0 <HAL_TIM_ConfigClockSource+0x6b0>
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	4a82      	ldr	r2, [pc, #520]	; (8004f70 <HAL_TIM_ConfigClockSource+0x630>)
 8004d66:	4293      	cmp	r3, r2
 8004d68:	d015      	beq.n	8004d96 <HAL_TIM_ConfigClockSource+0x456>
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	681a      	ldr	r2, [r3, #0]
 8004d6e:	2380      	movs	r3, #128	; 0x80
 8004d70:	05db      	lsls	r3, r3, #23
 8004d72:	429a      	cmp	r2, r3
 8004d74:	d00f      	beq.n	8004d96 <HAL_TIM_ConfigClockSource+0x456>
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	4a7e      	ldr	r2, [pc, #504]	; (8004f74 <HAL_TIM_ConfigClockSource+0x634>)
 8004d7c:	4293      	cmp	r3, r2
 8004d7e:	d00a      	beq.n	8004d96 <HAL_TIM_ConfigClockSource+0x456>
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	4a7c      	ldr	r2, [pc, #496]	; (8004f78 <HAL_TIM_ConfigClockSource+0x638>)
 8004d86:	4293      	cmp	r3, r2
 8004d88:	d005      	beq.n	8004d96 <HAL_TIM_ConfigClockSource+0x456>
 8004d8a:	4a7f      	ldr	r2, [pc, #508]	; (8004f88 <HAL_TIM_ConfigClockSource+0x648>)
 8004d8c:	4b7b      	ldr	r3, [pc, #492]	; (8004f7c <HAL_TIM_ConfigClockSource+0x63c>)
 8004d8e:	0011      	movs	r1, r2
 8004d90:	0018      	movs	r0, r3
 8004d92:	f7fb fdec 	bl	800096e <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 8004d96:	683b      	ldr	r3, [r7, #0]
 8004d98:	685a      	ldr	r2, [r3, #4]
 8004d9a:	2380      	movs	r3, #128	; 0x80
 8004d9c:	021b      	lsls	r3, r3, #8
 8004d9e:	429a      	cmp	r2, r3
 8004da0:	d015      	beq.n	8004dce <HAL_TIM_ConfigClockSource+0x48e>
 8004da2:	683b      	ldr	r3, [r7, #0]
 8004da4:	685b      	ldr	r3, [r3, #4]
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d011      	beq.n	8004dce <HAL_TIM_ConfigClockSource+0x48e>
 8004daa:	683b      	ldr	r3, [r7, #0]
 8004dac:	685b      	ldr	r3, [r3, #4]
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d00d      	beq.n	8004dce <HAL_TIM_ConfigClockSource+0x48e>
 8004db2:	683b      	ldr	r3, [r7, #0]
 8004db4:	685b      	ldr	r3, [r3, #4]
 8004db6:	2b02      	cmp	r3, #2
 8004db8:	d009      	beq.n	8004dce <HAL_TIM_ConfigClockSource+0x48e>
 8004dba:	683b      	ldr	r3, [r7, #0]
 8004dbc:	685b      	ldr	r3, [r3, #4]
 8004dbe:	2b0a      	cmp	r3, #10
 8004dc0:	d005      	beq.n	8004dce <HAL_TIM_ConfigClockSource+0x48e>
 8004dc2:	4a72      	ldr	r2, [pc, #456]	; (8004f8c <HAL_TIM_ConfigClockSource+0x64c>)
 8004dc4:	4b6d      	ldr	r3, [pc, #436]	; (8004f7c <HAL_TIM_ConfigClockSource+0x63c>)
 8004dc6:	0011      	movs	r1, r2
 8004dc8:	0018      	movs	r0, r3
 8004dca:	f7fb fdd0 	bl	800096e <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8004dce:	683b      	ldr	r3, [r7, #0]
 8004dd0:	68db      	ldr	r3, [r3, #12]
 8004dd2:	2b0f      	cmp	r3, #15
 8004dd4:	d905      	bls.n	8004de2 <HAL_TIM_ConfigClockSource+0x4a2>
 8004dd6:	4a6e      	ldr	r2, [pc, #440]	; (8004f90 <HAL_TIM_ConfigClockSource+0x650>)
 8004dd8:	4b68      	ldr	r3, [pc, #416]	; (8004f7c <HAL_TIM_ConfigClockSource+0x63c>)
 8004dda:	0011      	movs	r1, r2
 8004ddc:	0018      	movs	r0, r3
 8004dde:	f7fb fdc6 	bl	800096e <assert_failed>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	6818      	ldr	r0, [r3, #0]
 8004de6:	683b      	ldr	r3, [r7, #0]
 8004de8:	6859      	ldr	r1, [r3, #4]
 8004dea:	683b      	ldr	r3, [r7, #0]
 8004dec:	68db      	ldr	r3, [r3, #12]
 8004dee:	001a      	movs	r2, r3
 8004df0:	f000 fcbc 	bl	800576c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	2160      	movs	r1, #96	; 0x60
 8004dfa:	0018      	movs	r0, r3
 8004dfc:	f000 fcec 	bl	80057d8 <TIM_ITRx_SetConfig>
    break;
 8004e00:	e0f6      	b.n	8004ff0 <HAL_TIM_ConfigClockSource+0x6b0>
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	4a5a      	ldr	r2, [pc, #360]	; (8004f70 <HAL_TIM_ConfigClockSource+0x630>)
 8004e08:	4293      	cmp	r3, r2
 8004e0a:	d015      	beq.n	8004e38 <HAL_TIM_ConfigClockSource+0x4f8>
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	681a      	ldr	r2, [r3, #0]
 8004e10:	2380      	movs	r3, #128	; 0x80
 8004e12:	05db      	lsls	r3, r3, #23
 8004e14:	429a      	cmp	r2, r3
 8004e16:	d00f      	beq.n	8004e38 <HAL_TIM_ConfigClockSource+0x4f8>
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	4a55      	ldr	r2, [pc, #340]	; (8004f74 <HAL_TIM_ConfigClockSource+0x634>)
 8004e1e:	4293      	cmp	r3, r2
 8004e20:	d00a      	beq.n	8004e38 <HAL_TIM_ConfigClockSource+0x4f8>
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	4a54      	ldr	r2, [pc, #336]	; (8004f78 <HAL_TIM_ConfigClockSource+0x638>)
 8004e28:	4293      	cmp	r3, r2
 8004e2a:	d005      	beq.n	8004e38 <HAL_TIM_ConfigClockSource+0x4f8>
 8004e2c:	4a59      	ldr	r2, [pc, #356]	; (8004f94 <HAL_TIM_ConfigClockSource+0x654>)
 8004e2e:	4b53      	ldr	r3, [pc, #332]	; (8004f7c <HAL_TIM_ConfigClockSource+0x63c>)
 8004e30:	0011      	movs	r1, r2
 8004e32:	0018      	movs	r0, r3
 8004e34:	f7fb fd9b 	bl	800096e <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 8004e38:	683b      	ldr	r3, [r7, #0]
 8004e3a:	685a      	ldr	r2, [r3, #4]
 8004e3c:	2380      	movs	r3, #128	; 0x80
 8004e3e:	021b      	lsls	r3, r3, #8
 8004e40:	429a      	cmp	r2, r3
 8004e42:	d015      	beq.n	8004e70 <HAL_TIM_ConfigClockSource+0x530>
 8004e44:	683b      	ldr	r3, [r7, #0]
 8004e46:	685b      	ldr	r3, [r3, #4]
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d011      	beq.n	8004e70 <HAL_TIM_ConfigClockSource+0x530>
 8004e4c:	683b      	ldr	r3, [r7, #0]
 8004e4e:	685b      	ldr	r3, [r3, #4]
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	d00d      	beq.n	8004e70 <HAL_TIM_ConfigClockSource+0x530>
 8004e54:	683b      	ldr	r3, [r7, #0]
 8004e56:	685b      	ldr	r3, [r3, #4]
 8004e58:	2b02      	cmp	r3, #2
 8004e5a:	d009      	beq.n	8004e70 <HAL_TIM_ConfigClockSource+0x530>
 8004e5c:	683b      	ldr	r3, [r7, #0]
 8004e5e:	685b      	ldr	r3, [r3, #4]
 8004e60:	2b0a      	cmp	r3, #10
 8004e62:	d005      	beq.n	8004e70 <HAL_TIM_ConfigClockSource+0x530>
 8004e64:	4a4c      	ldr	r2, [pc, #304]	; (8004f98 <HAL_TIM_ConfigClockSource+0x658>)
 8004e66:	4b45      	ldr	r3, [pc, #276]	; (8004f7c <HAL_TIM_ConfigClockSource+0x63c>)
 8004e68:	0011      	movs	r1, r2
 8004e6a:	0018      	movs	r0, r3
 8004e6c:	f7fb fd7f 	bl	800096e <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8004e70:	683b      	ldr	r3, [r7, #0]
 8004e72:	68db      	ldr	r3, [r3, #12]
 8004e74:	2b0f      	cmp	r3, #15
 8004e76:	d905      	bls.n	8004e84 <HAL_TIM_ConfigClockSource+0x544>
 8004e78:	4a48      	ldr	r2, [pc, #288]	; (8004f9c <HAL_TIM_ConfigClockSource+0x65c>)
 8004e7a:	4b40      	ldr	r3, [pc, #256]	; (8004f7c <HAL_TIM_ConfigClockSource+0x63c>)
 8004e7c:	0011      	movs	r1, r2
 8004e7e:	0018      	movs	r0, r3
 8004e80:	f7fb fd75 	bl	800096e <assert_failed>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	6818      	ldr	r0, [r3, #0]
 8004e88:	683b      	ldr	r3, [r7, #0]
 8004e8a:	6859      	ldr	r1, [r3, #4]
 8004e8c:	683b      	ldr	r3, [r7, #0]
 8004e8e:	68db      	ldr	r3, [r3, #12]
 8004e90:	001a      	movs	r2, r3
 8004e92:	f000 fc39 	bl	8005708 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	2140      	movs	r1, #64	; 0x40
 8004e9c:	0018      	movs	r0, r3
 8004e9e:	f000 fc9b 	bl	80057d8 <TIM_ITRx_SetConfig>
    break;
 8004ea2:	e0a5      	b.n	8004ff0 <HAL_TIM_ConfigClockSource+0x6b0>
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	4a31      	ldr	r2, [pc, #196]	; (8004f70 <HAL_TIM_ConfigClockSource+0x630>)
 8004eaa:	4293      	cmp	r3, r2
 8004eac:	d015      	beq.n	8004eda <HAL_TIM_ConfigClockSource+0x59a>
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	681a      	ldr	r2, [r3, #0]
 8004eb2:	2380      	movs	r3, #128	; 0x80
 8004eb4:	05db      	lsls	r3, r3, #23
 8004eb6:	429a      	cmp	r2, r3
 8004eb8:	d00f      	beq.n	8004eda <HAL_TIM_ConfigClockSource+0x59a>
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	4a2d      	ldr	r2, [pc, #180]	; (8004f74 <HAL_TIM_ConfigClockSource+0x634>)
 8004ec0:	4293      	cmp	r3, r2
 8004ec2:	d00a      	beq.n	8004eda <HAL_TIM_ConfigClockSource+0x59a>
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	4a2b      	ldr	r2, [pc, #172]	; (8004f78 <HAL_TIM_ConfigClockSource+0x638>)
 8004eca:	4293      	cmp	r3, r2
 8004ecc:	d005      	beq.n	8004eda <HAL_TIM_ConfigClockSource+0x59a>
 8004ece:	4a34      	ldr	r2, [pc, #208]	; (8004fa0 <HAL_TIM_ConfigClockSource+0x660>)
 8004ed0:	4b2a      	ldr	r3, [pc, #168]	; (8004f7c <HAL_TIM_ConfigClockSource+0x63c>)
 8004ed2:	0011      	movs	r1, r2
 8004ed4:	0018      	movs	r0, r3
 8004ed6:	f7fb fd4a 	bl	800096e <assert_failed>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR0);
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	2100      	movs	r1, #0
 8004ee0:	0018      	movs	r0, r3
 8004ee2:	f000 fc79 	bl	80057d8 <TIM_ITRx_SetConfig>
    break;
 8004ee6:	e083      	b.n	8004ff0 <HAL_TIM_ConfigClockSource+0x6b0>
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	4a20      	ldr	r2, [pc, #128]	; (8004f70 <HAL_TIM_ConfigClockSource+0x630>)
 8004eee:	4293      	cmp	r3, r2
 8004ef0:	d015      	beq.n	8004f1e <HAL_TIM_ConfigClockSource+0x5de>
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	681a      	ldr	r2, [r3, #0]
 8004ef6:	2380      	movs	r3, #128	; 0x80
 8004ef8:	05db      	lsls	r3, r3, #23
 8004efa:	429a      	cmp	r2, r3
 8004efc:	d00f      	beq.n	8004f1e <HAL_TIM_ConfigClockSource+0x5de>
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	4a1c      	ldr	r2, [pc, #112]	; (8004f74 <HAL_TIM_ConfigClockSource+0x634>)
 8004f04:	4293      	cmp	r3, r2
 8004f06:	d00a      	beq.n	8004f1e <HAL_TIM_ConfigClockSource+0x5de>
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	4a1a      	ldr	r2, [pc, #104]	; (8004f78 <HAL_TIM_ConfigClockSource+0x638>)
 8004f0e:	4293      	cmp	r3, r2
 8004f10:	d005      	beq.n	8004f1e <HAL_TIM_ConfigClockSource+0x5de>
 8004f12:	4a24      	ldr	r2, [pc, #144]	; (8004fa4 <HAL_TIM_ConfigClockSource+0x664>)
 8004f14:	4b19      	ldr	r3, [pc, #100]	; (8004f7c <HAL_TIM_ConfigClockSource+0x63c>)
 8004f16:	0011      	movs	r1, r2
 8004f18:	0018      	movs	r0, r3
 8004f1a:	f7fb fd28 	bl	800096e <assert_failed>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR1);
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	2110      	movs	r1, #16
 8004f24:	0018      	movs	r0, r3
 8004f26:	f000 fc57 	bl	80057d8 <TIM_ITRx_SetConfig>
    break;
 8004f2a:	e061      	b.n	8004ff0 <HAL_TIM_ConfigClockSource+0x6b0>
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	4a0f      	ldr	r2, [pc, #60]	; (8004f70 <HAL_TIM_ConfigClockSource+0x630>)
 8004f32:	4293      	cmp	r3, r2
 8004f34:	d015      	beq.n	8004f62 <HAL_TIM_ConfigClockSource+0x622>
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	681a      	ldr	r2, [r3, #0]
 8004f3a:	2380      	movs	r3, #128	; 0x80
 8004f3c:	05db      	lsls	r3, r3, #23
 8004f3e:	429a      	cmp	r2, r3
 8004f40:	d00f      	beq.n	8004f62 <HAL_TIM_ConfigClockSource+0x622>
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	4a0b      	ldr	r2, [pc, #44]	; (8004f74 <HAL_TIM_ConfigClockSource+0x634>)
 8004f48:	4293      	cmp	r3, r2
 8004f4a:	d00a      	beq.n	8004f62 <HAL_TIM_ConfigClockSource+0x622>
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	4a09      	ldr	r2, [pc, #36]	; (8004f78 <HAL_TIM_ConfigClockSource+0x638>)
 8004f52:	4293      	cmp	r3, r2
 8004f54:	d005      	beq.n	8004f62 <HAL_TIM_ConfigClockSource+0x622>
 8004f56:	4a14      	ldr	r2, [pc, #80]	; (8004fa8 <HAL_TIM_ConfigClockSource+0x668>)
 8004f58:	4b08      	ldr	r3, [pc, #32]	; (8004f7c <HAL_TIM_ConfigClockSource+0x63c>)
 8004f5a:	0011      	movs	r1, r2
 8004f5c:	0018      	movs	r0, r3
 8004f5e:	f7fb fd06 	bl	800096e <assert_failed>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR2);
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	2120      	movs	r1, #32
 8004f68:	0018      	movs	r0, r3
 8004f6a:	f000 fc35 	bl	80057d8 <TIM_ITRx_SetConfig>
    break;
 8004f6e:	e03f      	b.n	8004ff0 <HAL_TIM_ConfigClockSource+0x6b0>
 8004f70:	40012c00 	.word	0x40012c00
 8004f74:	40000400 	.word	0x40000400
 8004f78:	40014000 	.word	0x40014000
 8004f7c:	08006b1c 	.word	0x08006b1c
 8004f80:	00001003 	.word	0x00001003
 8004f84:	00001004 	.word	0x00001004
 8004f88:	0000100f 	.word	0x0000100f
 8004f8c:	00001012 	.word	0x00001012
 8004f90:	00001013 	.word	0x00001013
 8004f94:	0000101e 	.word	0x0000101e
 8004f98:	00001021 	.word	0x00001021
 8004f9c:	00001022 	.word	0x00001022
 8004fa0:	0000102d 	.word	0x0000102d
 8004fa4:	00001035 	.word	0x00001035
 8004fa8:	0000103d 	.word	0x0000103d
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	4a16      	ldr	r2, [pc, #88]	; (800500c <HAL_TIM_ConfigClockSource+0x6cc>)
 8004fb2:	4293      	cmp	r3, r2
 8004fb4:	d015      	beq.n	8004fe2 <HAL_TIM_ConfigClockSource+0x6a2>
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	681a      	ldr	r2, [r3, #0]
 8004fba:	2380      	movs	r3, #128	; 0x80
 8004fbc:	05db      	lsls	r3, r3, #23
 8004fbe:	429a      	cmp	r2, r3
 8004fc0:	d00f      	beq.n	8004fe2 <HAL_TIM_ConfigClockSource+0x6a2>
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	4a12      	ldr	r2, [pc, #72]	; (8005010 <HAL_TIM_ConfigClockSource+0x6d0>)
 8004fc8:	4293      	cmp	r3, r2
 8004fca:	d00a      	beq.n	8004fe2 <HAL_TIM_ConfigClockSource+0x6a2>
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	4a10      	ldr	r2, [pc, #64]	; (8005014 <HAL_TIM_ConfigClockSource+0x6d4>)
 8004fd2:	4293      	cmp	r3, r2
 8004fd4:	d005      	beq.n	8004fe2 <HAL_TIM_ConfigClockSource+0x6a2>
 8004fd6:	4a10      	ldr	r2, [pc, #64]	; (8005018 <HAL_TIM_ConfigClockSource+0x6d8>)
 8004fd8:	4b10      	ldr	r3, [pc, #64]	; (800501c <HAL_TIM_ConfigClockSource+0x6dc>)
 8004fda:	0011      	movs	r1, r2
 8004fdc:	0018      	movs	r0, r3
 8004fde:	f7fb fcc6 	bl	800096e <assert_failed>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR3);
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	2130      	movs	r1, #48	; 0x30
 8004fe8:	0018      	movs	r0, r3
 8004fea:	f000 fbf5 	bl	80057d8 <TIM_ITRx_SetConfig>
    break;
 8004fee:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	223d      	movs	r2, #61	; 0x3d
 8004ff4:	2101      	movs	r1, #1
 8004ff6:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	223c      	movs	r2, #60	; 0x3c
 8004ffc:	2100      	movs	r1, #0
 8004ffe:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005000:	2300      	movs	r3, #0
}
 8005002:	0018      	movs	r0, r3
 8005004:	46bd      	mov	sp, r7
 8005006:	b004      	add	sp, #16
 8005008:	bd80      	pop	{r7, pc}
 800500a:	46c0      	nop			; (mov r8, r8)
 800500c:	40012c00 	.word	0x40012c00
 8005010:	40000400 	.word	0x40000400
 8005014:	40014000 	.word	0x40014000
 8005018:	00001045 	.word	0x00001045
 800501c:	08006b1c 	.word	0x08006b1c

08005020 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non blocking mode 
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005020:	b580      	push	{r7, lr}
 8005022:	b082      	sub	sp, #8
 8005024:	af00      	add	r7, sp, #0
 8005026:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the __HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */

}
 8005028:	46c0      	nop			; (mov r8, r8)
 800502a:	46bd      	mov	sp, r7
 800502c:	b002      	add	sp, #8
 800502e:	bd80      	pop	{r7, pc}

08005030 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non blocking mode 
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005030:	b580      	push	{r7, lr}
 8005032:	b082      	sub	sp, #8
 8005034:	af00      	add	r7, sp, #0
 8005036:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the __HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005038:	46c0      	nop			; (mov r8, r8)
 800503a:	46bd      	mov	sp, r7
 800503c:	b002      	add	sp, #8
 800503e:	bd80      	pop	{r7, pc}

08005040 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non blocking mode 
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005040:	b580      	push	{r7, lr}
 8005042:	b082      	sub	sp, #8
 8005044:	af00      	add	r7, sp, #0
 8005046:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the __HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005048:	46c0      	nop			; (mov r8, r8)
 800504a:	46bd      	mov	sp, r7
 800504c:	b002      	add	sp, #8
 800504e:	bd80      	pop	{r7, pc}

08005050 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non blocking mode 
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005050:	b580      	push	{r7, lr}
 8005052:	b082      	sub	sp, #8
 8005054:	af00      	add	r7, sp, #0
 8005056:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the __HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005058:	46c0      	nop			; (mov r8, r8)
 800505a:	46bd      	mov	sp, r7
 800505c:	b002      	add	sp, #8
 800505e:	bd80      	pop	{r7, pc}

08005060 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non blocking mode 
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005060:	b580      	push	{r7, lr}
 8005062:	b082      	sub	sp, #8
 8005064:	af00      	add	r7, sp, #0
 8005066:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005068:	46c0      	nop			; (mov r8, r8)
 800506a:	46bd      	mov	sp, r7
 800506c:	b002      	add	sp, #8
 800506e:	bd80      	pop	{r7, pc}

08005070 <TIM_Base_SetConfig>:
  * @param  TIMx TIM periheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005070:	b580      	push	{r7, lr}
 8005072:	b084      	sub	sp, #16
 8005074:	af00      	add	r7, sp, #0
 8005076:	6078      	str	r0, [r7, #4]
 8005078:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1 = 0U;
 800507a:	2300      	movs	r3, #0
 800507c:	60fb      	str	r3, [r7, #12]
  tmpcr1 = TIMx->CR1;
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	4a34      	ldr	r2, [pc, #208]	; (8005158 <TIM_Base_SetConfig+0xe8>)
 8005088:	4293      	cmp	r3, r2
 800508a:	d008      	beq.n	800509e <TIM_Base_SetConfig+0x2e>
 800508c:	687a      	ldr	r2, [r7, #4]
 800508e:	2380      	movs	r3, #128	; 0x80
 8005090:	05db      	lsls	r3, r3, #23
 8005092:	429a      	cmp	r2, r3
 8005094:	d003      	beq.n	800509e <TIM_Base_SetConfig+0x2e>
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	4a30      	ldr	r2, [pc, #192]	; (800515c <TIM_Base_SetConfig+0xec>)
 800509a:	4293      	cmp	r3, r2
 800509c:	d108      	bne.n	80050b0 <TIM_Base_SetConfig+0x40>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	2270      	movs	r2, #112	; 0x70
 80050a2:	4393      	bics	r3, r2
 80050a4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80050a6:	683b      	ldr	r3, [r7, #0]
 80050a8:	685b      	ldr	r3, [r3, #4]
 80050aa:	68fa      	ldr	r2, [r7, #12]
 80050ac:	4313      	orrs	r3, r2
 80050ae:	60fb      	str	r3, [r7, #12]
  }

  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	4a29      	ldr	r2, [pc, #164]	; (8005158 <TIM_Base_SetConfig+0xe8>)
 80050b4:	4293      	cmp	r3, r2
 80050b6:	d018      	beq.n	80050ea <TIM_Base_SetConfig+0x7a>
 80050b8:	687a      	ldr	r2, [r7, #4]
 80050ba:	2380      	movs	r3, #128	; 0x80
 80050bc:	05db      	lsls	r3, r3, #23
 80050be:	429a      	cmp	r2, r3
 80050c0:	d013      	beq.n	80050ea <TIM_Base_SetConfig+0x7a>
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	4a25      	ldr	r2, [pc, #148]	; (800515c <TIM_Base_SetConfig+0xec>)
 80050c6:	4293      	cmp	r3, r2
 80050c8:	d00f      	beq.n	80050ea <TIM_Base_SetConfig+0x7a>
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	4a24      	ldr	r2, [pc, #144]	; (8005160 <TIM_Base_SetConfig+0xf0>)
 80050ce:	4293      	cmp	r3, r2
 80050d0:	d00b      	beq.n	80050ea <TIM_Base_SetConfig+0x7a>
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	4a23      	ldr	r2, [pc, #140]	; (8005164 <TIM_Base_SetConfig+0xf4>)
 80050d6:	4293      	cmp	r3, r2
 80050d8:	d007      	beq.n	80050ea <TIM_Base_SetConfig+0x7a>
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	4a22      	ldr	r2, [pc, #136]	; (8005168 <TIM_Base_SetConfig+0xf8>)
 80050de:	4293      	cmp	r3, r2
 80050e0:	d003      	beq.n	80050ea <TIM_Base_SetConfig+0x7a>
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	4a21      	ldr	r2, [pc, #132]	; (800516c <TIM_Base_SetConfig+0xfc>)
 80050e6:	4293      	cmp	r3, r2
 80050e8:	d108      	bne.n	80050fc <TIM_Base_SetConfig+0x8c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	4a20      	ldr	r2, [pc, #128]	; (8005170 <TIM_Base_SetConfig+0x100>)
 80050ee:	4013      	ands	r3, r2
 80050f0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80050f2:	683b      	ldr	r3, [r7, #0]
 80050f4:	68db      	ldr	r3, [r3, #12]
 80050f6:	68fa      	ldr	r2, [r7, #12]
 80050f8:	4313      	orrs	r3, r2
 80050fa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	2280      	movs	r2, #128	; 0x80
 8005100:	4393      	bics	r3, r2
 8005102:	001a      	movs	r2, r3
 8005104:	683b      	ldr	r3, [r7, #0]
 8005106:	695b      	ldr	r3, [r3, #20]
 8005108:	4313      	orrs	r3, r2
 800510a:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	68fa      	ldr	r2, [r7, #12]
 8005110:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005112:	683b      	ldr	r3, [r7, #0]
 8005114:	689a      	ldr	r2, [r3, #8]
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 800511a:	683b      	ldr	r3, [r7, #0]
 800511c:	681a      	ldr	r2, [r3, #0]
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	4a0c      	ldr	r2, [pc, #48]	; (8005158 <TIM_Base_SetConfig+0xe8>)
 8005126:	4293      	cmp	r3, r2
 8005128:	d00b      	beq.n	8005142 <TIM_Base_SetConfig+0xd2>
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	4a0d      	ldr	r2, [pc, #52]	; (8005164 <TIM_Base_SetConfig+0xf4>)
 800512e:	4293      	cmp	r3, r2
 8005130:	d007      	beq.n	8005142 <TIM_Base_SetConfig+0xd2>
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	4a0c      	ldr	r2, [pc, #48]	; (8005168 <TIM_Base_SetConfig+0xf8>)
 8005136:	4293      	cmp	r3, r2
 8005138:	d003      	beq.n	8005142 <TIM_Base_SetConfig+0xd2>
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	4a0b      	ldr	r2, [pc, #44]	; (800516c <TIM_Base_SetConfig+0xfc>)
 800513e:	4293      	cmp	r3, r2
 8005140:	d103      	bne.n	800514a <TIM_Base_SetConfig+0xda>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005142:	683b      	ldr	r3, [r7, #0]
 8005144:	691a      	ldr	r2, [r3, #16]
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediatly */
  TIMx->EGR = TIM_EGR_UG;
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	2201      	movs	r2, #1
 800514e:	615a      	str	r2, [r3, #20]
}
 8005150:	46c0      	nop			; (mov r8, r8)
 8005152:	46bd      	mov	sp, r7
 8005154:	b004      	add	sp, #16
 8005156:	bd80      	pop	{r7, pc}
 8005158:	40012c00 	.word	0x40012c00
 800515c:	40000400 	.word	0x40000400
 8005160:	40002000 	.word	0x40002000
 8005164:	40014000 	.word	0x40014000
 8005168:	40014400 	.word	0x40014400
 800516c:	40014800 	.word	0x40014800
 8005170:	fffffcff 	.word	0xfffffcff

08005174 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005174:	b580      	push	{r7, lr}
 8005176:	b086      	sub	sp, #24
 8005178:	af00      	add	r7, sp, #0
 800517a:	6078      	str	r0, [r7, #4]
 800517c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx = 0U;
 800517e:	2300      	movs	r3, #0
 8005180:	60fb      	str	r3, [r7, #12]
  uint32_t tmpccer = 0U;
 8005182:	2300      	movs	r3, #0
 8005184:	617b      	str	r3, [r7, #20]
  uint32_t tmpcr2 = 0U;
 8005186:	2300      	movs	r3, #0
 8005188:	613b      	str	r3, [r7, #16]

   /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	6a1b      	ldr	r3, [r3, #32]
 800518e:	2201      	movs	r2, #1
 8005190:	4393      	bics	r3, r2
 8005192:	001a      	movs	r2, r3
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	6a1b      	ldr	r3, [r3, #32]
 800519c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	685b      	ldr	r3, [r3, #4]
 80051a2:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	699b      	ldr	r3, [r3, #24]
 80051a8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	2270      	movs	r2, #112	; 0x70
 80051ae:	4393      	bics	r3, r2
 80051b0:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	2203      	movs	r2, #3
 80051b6:	4393      	bics	r3, r2
 80051b8:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80051ba:	683b      	ldr	r3, [r7, #0]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	68fa      	ldr	r2, [r7, #12]
 80051c0:	4313      	orrs	r3, r2
 80051c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80051c4:	697b      	ldr	r3, [r7, #20]
 80051c6:	2202      	movs	r2, #2
 80051c8:	4393      	bics	r3, r2
 80051ca:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80051cc:	683b      	ldr	r3, [r7, #0]
 80051ce:	689b      	ldr	r3, [r3, #8]
 80051d0:	697a      	ldr	r2, [r7, #20]
 80051d2:	4313      	orrs	r3, r2
 80051d4:	617b      	str	r3, [r7, #20]

  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	4a3e      	ldr	r2, [pc, #248]	; (80052d4 <TIM_OC1_SetConfig+0x160>)
 80051da:	4293      	cmp	r3, r2
 80051dc:	d00b      	beq.n	80051f6 <TIM_OC1_SetConfig+0x82>
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	4a3d      	ldr	r2, [pc, #244]	; (80052d8 <TIM_OC1_SetConfig+0x164>)
 80051e2:	4293      	cmp	r3, r2
 80051e4:	d007      	beq.n	80051f6 <TIM_OC1_SetConfig+0x82>
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	4a3c      	ldr	r2, [pc, #240]	; (80052dc <TIM_OC1_SetConfig+0x168>)
 80051ea:	4293      	cmp	r3, r2
 80051ec:	d003      	beq.n	80051f6 <TIM_OC1_SetConfig+0x82>
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	4a3b      	ldr	r2, [pc, #236]	; (80052e0 <TIM_OC1_SetConfig+0x16c>)
 80051f2:	4293      	cmp	r3, r2
 80051f4:	d11a      	bne.n	800522c <TIM_OC1_SetConfig+0xb8>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 80051f6:	683b      	ldr	r3, [r7, #0]
 80051f8:	68db      	ldr	r3, [r3, #12]
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d009      	beq.n	8005212 <TIM_OC1_SetConfig+0x9e>
 80051fe:	683b      	ldr	r3, [r7, #0]
 8005200:	68db      	ldr	r3, [r3, #12]
 8005202:	2b08      	cmp	r3, #8
 8005204:	d005      	beq.n	8005212 <TIM_OC1_SetConfig+0x9e>
 8005206:	4a37      	ldr	r2, [pc, #220]	; (80052e4 <TIM_OC1_SetConfig+0x170>)
 8005208:	4b37      	ldr	r3, [pc, #220]	; (80052e8 <TIM_OC1_SetConfig+0x174>)
 800520a:	0011      	movs	r1, r2
 800520c:	0018      	movs	r0, r3
 800520e:	f7fb fbae 	bl	800096e <assert_failed>

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005212:	697b      	ldr	r3, [r7, #20]
 8005214:	2208      	movs	r2, #8
 8005216:	4393      	bics	r3, r2
 8005218:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800521a:	683b      	ldr	r3, [r7, #0]
 800521c:	68db      	ldr	r3, [r3, #12]
 800521e:	697a      	ldr	r2, [r7, #20]
 8005220:	4313      	orrs	r3, r2
 8005222:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005224:	697b      	ldr	r3, [r7, #20]
 8005226:	2204      	movs	r2, #4
 8005228:	4393      	bics	r3, r2
 800522a:	617b      	str	r3, [r7, #20]
  }

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	4a29      	ldr	r2, [pc, #164]	; (80052d4 <TIM_OC1_SetConfig+0x160>)
 8005230:	4293      	cmp	r3, r2
 8005232:	d00b      	beq.n	800524c <TIM_OC1_SetConfig+0xd8>
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	4a28      	ldr	r2, [pc, #160]	; (80052d8 <TIM_OC1_SetConfig+0x164>)
 8005238:	4293      	cmp	r3, r2
 800523a:	d007      	beq.n	800524c <TIM_OC1_SetConfig+0xd8>
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	4a27      	ldr	r2, [pc, #156]	; (80052dc <TIM_OC1_SetConfig+0x168>)
 8005240:	4293      	cmp	r3, r2
 8005242:	d003      	beq.n	800524c <TIM_OC1_SetConfig+0xd8>
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	4a26      	ldr	r2, [pc, #152]	; (80052e0 <TIM_OC1_SetConfig+0x16c>)
 8005248:	4293      	cmp	r3, r2
 800524a:	d131      	bne.n	80052b0 <TIM_OC1_SetConfig+0x13c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 800524c:	683b      	ldr	r3, [r7, #0]
 800524e:	699a      	ldr	r2, [r3, #24]
 8005250:	2380      	movs	r3, #128	; 0x80
 8005252:	009b      	lsls	r3, r3, #2
 8005254:	429a      	cmp	r2, r3
 8005256:	d009      	beq.n	800526c <TIM_OC1_SetConfig+0xf8>
 8005258:	683b      	ldr	r3, [r7, #0]
 800525a:	699b      	ldr	r3, [r3, #24]
 800525c:	2b00      	cmp	r3, #0
 800525e:	d005      	beq.n	800526c <TIM_OC1_SetConfig+0xf8>
 8005260:	4a22      	ldr	r2, [pc, #136]	; (80052ec <TIM_OC1_SetConfig+0x178>)
 8005262:	4b21      	ldr	r3, [pc, #132]	; (80052e8 <TIM_OC1_SetConfig+0x174>)
 8005264:	0011      	movs	r1, r2
 8005266:	0018      	movs	r0, r3
 8005268:	f7fb fb81 	bl	800096e <assert_failed>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 800526c:	683b      	ldr	r3, [r7, #0]
 800526e:	695a      	ldr	r2, [r3, #20]
 8005270:	2380      	movs	r3, #128	; 0x80
 8005272:	005b      	lsls	r3, r3, #1
 8005274:	429a      	cmp	r2, r3
 8005276:	d009      	beq.n	800528c <TIM_OC1_SetConfig+0x118>
 8005278:	683b      	ldr	r3, [r7, #0]
 800527a:	695b      	ldr	r3, [r3, #20]
 800527c:	2b00      	cmp	r3, #0
 800527e:	d005      	beq.n	800528c <TIM_OC1_SetConfig+0x118>
 8005280:	4a1b      	ldr	r2, [pc, #108]	; (80052f0 <TIM_OC1_SetConfig+0x17c>)
 8005282:	4b19      	ldr	r3, [pc, #100]	; (80052e8 <TIM_OC1_SetConfig+0x174>)
 8005284:	0011      	movs	r1, r2
 8005286:	0018      	movs	r0, r3
 8005288:	f7fb fb71 	bl	800096e <assert_failed>

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800528c:	693b      	ldr	r3, [r7, #16]
 800528e:	4a19      	ldr	r2, [pc, #100]	; (80052f4 <TIM_OC1_SetConfig+0x180>)
 8005290:	4013      	ands	r3, r2
 8005292:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005294:	693b      	ldr	r3, [r7, #16]
 8005296:	4a18      	ldr	r2, [pc, #96]	; (80052f8 <TIM_OC1_SetConfig+0x184>)
 8005298:	4013      	ands	r3, r2
 800529a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800529c:	683b      	ldr	r3, [r7, #0]
 800529e:	695b      	ldr	r3, [r3, #20]
 80052a0:	693a      	ldr	r2, [r7, #16]
 80052a2:	4313      	orrs	r3, r2
 80052a4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80052a6:	683b      	ldr	r3, [r7, #0]
 80052a8:	699b      	ldr	r3, [r3, #24]
 80052aa:	693a      	ldr	r2, [r7, #16]
 80052ac:	4313      	orrs	r3, r2
 80052ae:	613b      	str	r3, [r7, #16]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	693a      	ldr	r2, [r7, #16]
 80052b4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	68fa      	ldr	r2, [r7, #12]
 80052ba:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80052bc:	683b      	ldr	r3, [r7, #0]
 80052be:	685a      	ldr	r2, [r3, #4]
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	697a      	ldr	r2, [r7, #20]
 80052c8:	621a      	str	r2, [r3, #32]
}
 80052ca:	46c0      	nop			; (mov r8, r8)
 80052cc:	46bd      	mov	sp, r7
 80052ce:	b006      	add	sp, #24
 80052d0:	bd80      	pop	{r7, pc}
 80052d2:	46c0      	nop			; (mov r8, r8)
 80052d4:	40012c00 	.word	0x40012c00
 80052d8:	40014000 	.word	0x40014000
 80052dc:	40014400 	.word	0x40014400
 80052e0:	40014800 	.word	0x40014800
 80052e4:	00001290 	.word	0x00001290
 80052e8:	08006b1c 	.word	0x08006b1c
 80052ec:	0000129d 	.word	0x0000129d
 80052f0:	0000129e 	.word	0x0000129e
 80052f4:	fffffeff 	.word	0xfffffeff
 80052f8:	fffffdff 	.word	0xfffffdff

080052fc <TIM_OC2_SetConfig>:
  * @param  TIMx  to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80052fc:	b580      	push	{r7, lr}
 80052fe:	b086      	sub	sp, #24
 8005300:	af00      	add	r7, sp, #0
 8005302:	6078      	str	r0, [r7, #4]
 8005304:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx = 0U;
 8005306:	2300      	movs	r3, #0
 8005308:	60fb      	str	r3, [r7, #12]
  uint32_t tmpccer = 0U;
 800530a:	2300      	movs	r3, #0
 800530c:	617b      	str	r3, [r7, #20]
  uint32_t tmpcr2 = 0U;
 800530e:	2300      	movs	r3, #0
 8005310:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	6a1b      	ldr	r3, [r3, #32]
 8005316:	2210      	movs	r2, #16
 8005318:	4393      	bics	r3, r2
 800531a:	001a      	movs	r2, r3
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	6a1b      	ldr	r3, [r3, #32]
 8005324:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	685b      	ldr	r3, [r3, #4]
 800532a:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	699b      	ldr	r3, [r3, #24]
 8005330:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	4a45      	ldr	r2, [pc, #276]	; (800544c <TIM_OC2_SetConfig+0x150>)
 8005336:	4013      	ands	r3, r2
 8005338:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	4a44      	ldr	r2, [pc, #272]	; (8005450 <TIM_OC2_SetConfig+0x154>)
 800533e:	4013      	ands	r3, r2
 8005340:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005342:	683b      	ldr	r3, [r7, #0]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	021b      	lsls	r3, r3, #8
 8005348:	68fa      	ldr	r2, [r7, #12]
 800534a:	4313      	orrs	r3, r2
 800534c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800534e:	697b      	ldr	r3, [r7, #20]
 8005350:	2220      	movs	r2, #32
 8005352:	4393      	bics	r3, r2
 8005354:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005356:	683b      	ldr	r3, [r7, #0]
 8005358:	689b      	ldr	r3, [r3, #8]
 800535a:	011b      	lsls	r3, r3, #4
 800535c:	697a      	ldr	r2, [r7, #20]
 800535e:	4313      	orrs	r3, r2
 8005360:	617b      	str	r3, [r7, #20]

  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	4a3b      	ldr	r2, [pc, #236]	; (8005454 <TIM_OC2_SetConfig+0x158>)
 8005366:	4293      	cmp	r3, r2
 8005368:	d11b      	bne.n	80053a2 <TIM_OC2_SetConfig+0xa6>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 800536a:	683b      	ldr	r3, [r7, #0]
 800536c:	68db      	ldr	r3, [r3, #12]
 800536e:	2b00      	cmp	r3, #0
 8005370:	d009      	beq.n	8005386 <TIM_OC2_SetConfig+0x8a>
 8005372:	683b      	ldr	r3, [r7, #0]
 8005374:	68db      	ldr	r3, [r3, #12]
 8005376:	2b08      	cmp	r3, #8
 8005378:	d005      	beq.n	8005386 <TIM_OC2_SetConfig+0x8a>
 800537a:	4a37      	ldr	r2, [pc, #220]	; (8005458 <TIM_OC2_SetConfig+0x15c>)
 800537c:	4b37      	ldr	r3, [pc, #220]	; (800545c <TIM_OC2_SetConfig+0x160>)
 800537e:	0011      	movs	r1, r2
 8005380:	0018      	movs	r0, r3
 8005382:	f7fb faf4 	bl	800096e <assert_failed>

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005386:	697b      	ldr	r3, [r7, #20]
 8005388:	2280      	movs	r2, #128	; 0x80
 800538a:	4393      	bics	r3, r2
 800538c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800538e:	683b      	ldr	r3, [r7, #0]
 8005390:	68db      	ldr	r3, [r3, #12]
 8005392:	011b      	lsls	r3, r3, #4
 8005394:	697a      	ldr	r2, [r7, #20]
 8005396:	4313      	orrs	r3, r2
 8005398:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800539a:	697b      	ldr	r3, [r7, #20]
 800539c:	2240      	movs	r2, #64	; 0x40
 800539e:	4393      	bics	r3, r2
 80053a0:	617b      	str	r3, [r7, #20]

  }

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	4a2b      	ldr	r2, [pc, #172]	; (8005454 <TIM_OC2_SetConfig+0x158>)
 80053a6:	4293      	cmp	r3, r2
 80053a8:	d00b      	beq.n	80053c2 <TIM_OC2_SetConfig+0xc6>
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	4a2c      	ldr	r2, [pc, #176]	; (8005460 <TIM_OC2_SetConfig+0x164>)
 80053ae:	4293      	cmp	r3, r2
 80053b0:	d007      	beq.n	80053c2 <TIM_OC2_SetConfig+0xc6>
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	4a2b      	ldr	r2, [pc, #172]	; (8005464 <TIM_OC2_SetConfig+0x168>)
 80053b6:	4293      	cmp	r3, r2
 80053b8:	d003      	beq.n	80053c2 <TIM_OC2_SetConfig+0xc6>
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	4a2a      	ldr	r2, [pc, #168]	; (8005468 <TIM_OC2_SetConfig+0x16c>)
 80053be:	4293      	cmp	r3, r2
 80053c0:	d133      	bne.n	800542a <TIM_OC2_SetConfig+0x12e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 80053c2:	683b      	ldr	r3, [r7, #0]
 80053c4:	699a      	ldr	r2, [r3, #24]
 80053c6:	2380      	movs	r3, #128	; 0x80
 80053c8:	009b      	lsls	r3, r3, #2
 80053ca:	429a      	cmp	r2, r3
 80053cc:	d009      	beq.n	80053e2 <TIM_OC2_SetConfig+0xe6>
 80053ce:	683b      	ldr	r3, [r7, #0]
 80053d0:	699b      	ldr	r3, [r3, #24]
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d005      	beq.n	80053e2 <TIM_OC2_SetConfig+0xe6>
 80053d6:	4a25      	ldr	r2, [pc, #148]	; (800546c <TIM_OC2_SetConfig+0x170>)
 80053d8:	4b20      	ldr	r3, [pc, #128]	; (800545c <TIM_OC2_SetConfig+0x160>)
 80053da:	0011      	movs	r1, r2
 80053dc:	0018      	movs	r0, r3
 80053de:	f7fb fac6 	bl	800096e <assert_failed>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 80053e2:	683b      	ldr	r3, [r7, #0]
 80053e4:	695a      	ldr	r2, [r3, #20]
 80053e6:	2380      	movs	r3, #128	; 0x80
 80053e8:	005b      	lsls	r3, r3, #1
 80053ea:	429a      	cmp	r2, r3
 80053ec:	d009      	beq.n	8005402 <TIM_OC2_SetConfig+0x106>
 80053ee:	683b      	ldr	r3, [r7, #0]
 80053f0:	695b      	ldr	r3, [r3, #20]
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d005      	beq.n	8005402 <TIM_OC2_SetConfig+0x106>
 80053f6:	4a1e      	ldr	r2, [pc, #120]	; (8005470 <TIM_OC2_SetConfig+0x174>)
 80053f8:	4b18      	ldr	r3, [pc, #96]	; (800545c <TIM_OC2_SetConfig+0x160>)
 80053fa:	0011      	movs	r1, r2
 80053fc:	0018      	movs	r0, r3
 80053fe:	f7fb fab6 	bl	800096e <assert_failed>

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005402:	693b      	ldr	r3, [r7, #16]
 8005404:	4a1b      	ldr	r2, [pc, #108]	; (8005474 <TIM_OC2_SetConfig+0x178>)
 8005406:	4013      	ands	r3, r2
 8005408:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800540a:	693b      	ldr	r3, [r7, #16]
 800540c:	4a1a      	ldr	r2, [pc, #104]	; (8005478 <TIM_OC2_SetConfig+0x17c>)
 800540e:	4013      	ands	r3, r2
 8005410:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005412:	683b      	ldr	r3, [r7, #0]
 8005414:	695b      	ldr	r3, [r3, #20]
 8005416:	009b      	lsls	r3, r3, #2
 8005418:	693a      	ldr	r2, [r7, #16]
 800541a:	4313      	orrs	r3, r2
 800541c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800541e:	683b      	ldr	r3, [r7, #0]
 8005420:	699b      	ldr	r3, [r3, #24]
 8005422:	009b      	lsls	r3, r3, #2
 8005424:	693a      	ldr	r2, [r7, #16]
 8005426:	4313      	orrs	r3, r2
 8005428:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	693a      	ldr	r2, [r7, #16]
 800542e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	68fa      	ldr	r2, [r7, #12]
 8005434:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005436:	683b      	ldr	r3, [r7, #0]
 8005438:	685a      	ldr	r2, [r3, #4]
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	697a      	ldr	r2, [r7, #20]
 8005442:	621a      	str	r2, [r3, #32]
}
 8005444:	46c0      	nop			; (mov r8, r8)
 8005446:	46bd      	mov	sp, r7
 8005448:	b006      	add	sp, #24
 800544a:	bd80      	pop	{r7, pc}
 800544c:	ffff8fff 	.word	0xffff8fff
 8005450:	fffffcff 	.word	0xfffffcff
 8005454:	40012c00 	.word	0x40012c00
 8005458:	000012da 	.word	0x000012da
 800545c:	08006b1c 	.word	0x08006b1c
 8005460:	40014000 	.word	0x40014000
 8005464:	40014400 	.word	0x40014400
 8005468:	40014800 	.word	0x40014800
 800546c:	000012e8 	.word	0x000012e8
 8005470:	000012e9 	.word	0x000012e9
 8005474:	fffffbff 	.word	0xfffffbff
 8005478:	fffff7ff 	.word	0xfffff7ff

0800547c <TIM_OC3_SetConfig>:
  * @param  TIMx  to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800547c:	b580      	push	{r7, lr}
 800547e:	b086      	sub	sp, #24
 8005480:	af00      	add	r7, sp, #0
 8005482:	6078      	str	r0, [r7, #4]
 8005484:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx = 0U;
 8005486:	2300      	movs	r3, #0
 8005488:	60fb      	str	r3, [r7, #12]
  uint32_t tmpccer = 0U;
 800548a:	2300      	movs	r3, #0
 800548c:	617b      	str	r3, [r7, #20]
  uint32_t tmpcr2 = 0U;
 800548e:	2300      	movs	r3, #0
 8005490:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	6a1b      	ldr	r3, [r3, #32]
 8005496:	4a4c      	ldr	r2, [pc, #304]	; (80055c8 <TIM_OC3_SetConfig+0x14c>)
 8005498:	401a      	ands	r2, r3
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	6a1b      	ldr	r3, [r3, #32]
 80054a2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	685b      	ldr	r3, [r3, #4]
 80054a8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	69db      	ldr	r3, [r3, #28]
 80054ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	2270      	movs	r2, #112	; 0x70
 80054b4:	4393      	bics	r3, r2
 80054b6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	2203      	movs	r2, #3
 80054bc:	4393      	bics	r3, r2
 80054be:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80054c0:	683b      	ldr	r3, [r7, #0]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	68fa      	ldr	r2, [r7, #12]
 80054c6:	4313      	orrs	r3, r2
 80054c8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80054ca:	697b      	ldr	r3, [r7, #20]
 80054cc:	4a3f      	ldr	r2, [pc, #252]	; (80055cc <TIM_OC3_SetConfig+0x150>)
 80054ce:	4013      	ands	r3, r2
 80054d0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80054d2:	683b      	ldr	r3, [r7, #0]
 80054d4:	689b      	ldr	r3, [r3, #8]
 80054d6:	021b      	lsls	r3, r3, #8
 80054d8:	697a      	ldr	r2, [r7, #20]
 80054da:	4313      	orrs	r3, r2
 80054dc:	617b      	str	r3, [r7, #20]

  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	4a3b      	ldr	r2, [pc, #236]	; (80055d0 <TIM_OC3_SetConfig+0x154>)
 80054e2:	4293      	cmp	r3, r2
 80054e4:	d11b      	bne.n	800551e <TIM_OC3_SetConfig+0xa2>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 80054e6:	683b      	ldr	r3, [r7, #0]
 80054e8:	68db      	ldr	r3, [r3, #12]
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d009      	beq.n	8005502 <TIM_OC3_SetConfig+0x86>
 80054ee:	683b      	ldr	r3, [r7, #0]
 80054f0:	68db      	ldr	r3, [r3, #12]
 80054f2:	2b08      	cmp	r3, #8
 80054f4:	d005      	beq.n	8005502 <TIM_OC3_SetConfig+0x86>
 80054f6:	4a37      	ldr	r2, [pc, #220]	; (80055d4 <TIM_OC3_SetConfig+0x158>)
 80054f8:	4b37      	ldr	r3, [pc, #220]	; (80055d8 <TIM_OC3_SetConfig+0x15c>)
 80054fa:	0011      	movs	r1, r2
 80054fc:	0018      	movs	r0, r3
 80054fe:	f7fb fa36 	bl	800096e <assert_failed>

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005502:	697b      	ldr	r3, [r7, #20]
 8005504:	4a35      	ldr	r2, [pc, #212]	; (80055dc <TIM_OC3_SetConfig+0x160>)
 8005506:	4013      	ands	r3, r2
 8005508:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800550a:	683b      	ldr	r3, [r7, #0]
 800550c:	68db      	ldr	r3, [r3, #12]
 800550e:	021b      	lsls	r3, r3, #8
 8005510:	697a      	ldr	r2, [r7, #20]
 8005512:	4313      	orrs	r3, r2
 8005514:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005516:	697b      	ldr	r3, [r7, #20]
 8005518:	4a31      	ldr	r2, [pc, #196]	; (80055e0 <TIM_OC3_SetConfig+0x164>)
 800551a:	4013      	ands	r3, r2
 800551c:	617b      	str	r3, [r7, #20]
  }

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	4a2b      	ldr	r2, [pc, #172]	; (80055d0 <TIM_OC3_SetConfig+0x154>)
 8005522:	4293      	cmp	r3, r2
 8005524:	d00b      	beq.n	800553e <TIM_OC3_SetConfig+0xc2>
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	4a2e      	ldr	r2, [pc, #184]	; (80055e4 <TIM_OC3_SetConfig+0x168>)
 800552a:	4293      	cmp	r3, r2
 800552c:	d007      	beq.n	800553e <TIM_OC3_SetConfig+0xc2>
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	4a2d      	ldr	r2, [pc, #180]	; (80055e8 <TIM_OC3_SetConfig+0x16c>)
 8005532:	4293      	cmp	r3, r2
 8005534:	d003      	beq.n	800553e <TIM_OC3_SetConfig+0xc2>
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	4a2c      	ldr	r2, [pc, #176]	; (80055ec <TIM_OC3_SetConfig+0x170>)
 800553a:	4293      	cmp	r3, r2
 800553c:	d133      	bne.n	80055a6 <TIM_OC3_SetConfig+0x12a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 800553e:	683b      	ldr	r3, [r7, #0]
 8005540:	699a      	ldr	r2, [r3, #24]
 8005542:	2380      	movs	r3, #128	; 0x80
 8005544:	009b      	lsls	r3, r3, #2
 8005546:	429a      	cmp	r2, r3
 8005548:	d009      	beq.n	800555e <TIM_OC3_SetConfig+0xe2>
 800554a:	683b      	ldr	r3, [r7, #0]
 800554c:	699b      	ldr	r3, [r3, #24]
 800554e:	2b00      	cmp	r3, #0
 8005550:	d005      	beq.n	800555e <TIM_OC3_SetConfig+0xe2>
 8005552:	4a27      	ldr	r2, [pc, #156]	; (80055f0 <TIM_OC3_SetConfig+0x174>)
 8005554:	4b20      	ldr	r3, [pc, #128]	; (80055d8 <TIM_OC3_SetConfig+0x15c>)
 8005556:	0011      	movs	r1, r2
 8005558:	0018      	movs	r0, r3
 800555a:	f7fb fa08 	bl	800096e <assert_failed>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 800555e:	683b      	ldr	r3, [r7, #0]
 8005560:	695a      	ldr	r2, [r3, #20]
 8005562:	2380      	movs	r3, #128	; 0x80
 8005564:	005b      	lsls	r3, r3, #1
 8005566:	429a      	cmp	r2, r3
 8005568:	d009      	beq.n	800557e <TIM_OC3_SetConfig+0x102>
 800556a:	683b      	ldr	r3, [r7, #0]
 800556c:	695b      	ldr	r3, [r3, #20]
 800556e:	2b00      	cmp	r3, #0
 8005570:	d005      	beq.n	800557e <TIM_OC3_SetConfig+0x102>
 8005572:	4a20      	ldr	r2, [pc, #128]	; (80055f4 <TIM_OC3_SetConfig+0x178>)
 8005574:	4b18      	ldr	r3, [pc, #96]	; (80055d8 <TIM_OC3_SetConfig+0x15c>)
 8005576:	0011      	movs	r1, r2
 8005578:	0018      	movs	r0, r3
 800557a:	f7fb f9f8 	bl	800096e <assert_failed>

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800557e:	693b      	ldr	r3, [r7, #16]
 8005580:	4a1d      	ldr	r2, [pc, #116]	; (80055f8 <TIM_OC3_SetConfig+0x17c>)
 8005582:	4013      	ands	r3, r2
 8005584:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005586:	693b      	ldr	r3, [r7, #16]
 8005588:	4a1c      	ldr	r2, [pc, #112]	; (80055fc <TIM_OC3_SetConfig+0x180>)
 800558a:	4013      	ands	r3, r2
 800558c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800558e:	683b      	ldr	r3, [r7, #0]
 8005590:	695b      	ldr	r3, [r3, #20]
 8005592:	011b      	lsls	r3, r3, #4
 8005594:	693a      	ldr	r2, [r7, #16]
 8005596:	4313      	orrs	r3, r2
 8005598:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800559a:	683b      	ldr	r3, [r7, #0]
 800559c:	699b      	ldr	r3, [r3, #24]
 800559e:	011b      	lsls	r3, r3, #4
 80055a0:	693a      	ldr	r2, [r7, #16]
 80055a2:	4313      	orrs	r3, r2
 80055a4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	693a      	ldr	r2, [r7, #16]
 80055aa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	68fa      	ldr	r2, [r7, #12]
 80055b0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80055b2:	683b      	ldr	r3, [r7, #0]
 80055b4:	685a      	ldr	r2, [r3, #4]
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	697a      	ldr	r2, [r7, #20]
 80055be:	621a      	str	r2, [r3, #32]
}
 80055c0:	46c0      	nop			; (mov r8, r8)
 80055c2:	46bd      	mov	sp, r7
 80055c4:	b006      	add	sp, #24
 80055c6:	bd80      	pop	{r7, pc}
 80055c8:	fffffeff 	.word	0xfffffeff
 80055cc:	fffffdff 	.word	0xfffffdff
 80055d0:	40012c00 	.word	0x40012c00
 80055d4:	00001325 	.word	0x00001325
 80055d8:	08006b1c 	.word	0x08006b1c
 80055dc:	fffff7ff 	.word	0xfffff7ff
 80055e0:	fffffbff 	.word	0xfffffbff
 80055e4:	40014000 	.word	0x40014000
 80055e8:	40014400 	.word	0x40014400
 80055ec:	40014800 	.word	0x40014800
 80055f0:	00001332 	.word	0x00001332
 80055f4:	00001333 	.word	0x00001333
 80055f8:	ffffefff 	.word	0xffffefff
 80055fc:	ffffdfff 	.word	0xffffdfff

08005600 <TIM_OC4_SetConfig>:
  * @param  TIMx  to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005600:	b580      	push	{r7, lr}
 8005602:	b086      	sub	sp, #24
 8005604:	af00      	add	r7, sp, #0
 8005606:	6078      	str	r0, [r7, #4]
 8005608:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx = 0U;
 800560a:	2300      	movs	r3, #0
 800560c:	613b      	str	r3, [r7, #16]
  uint32_t tmpccer = 0U;
 800560e:	2300      	movs	r3, #0
 8005610:	60fb      	str	r3, [r7, #12]
  uint32_t tmpcr2 = 0U;
 8005612:	2300      	movs	r3, #0
 8005614:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	6a1b      	ldr	r3, [r3, #32]
 800561a:	4a30      	ldr	r2, [pc, #192]	; (80056dc <TIM_OC4_SetConfig+0xdc>)
 800561c:	401a      	ands	r2, r3
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	6a1b      	ldr	r3, [r3, #32]
 8005626:	60fb      	str	r3, [r7, #12]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	685b      	ldr	r3, [r3, #4]
 800562c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	69db      	ldr	r3, [r3, #28]
 8005632:	613b      	str	r3, [r7, #16]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005634:	693b      	ldr	r3, [r7, #16]
 8005636:	4a2a      	ldr	r2, [pc, #168]	; (80056e0 <TIM_OC4_SetConfig+0xe0>)
 8005638:	4013      	ands	r3, r2
 800563a:	613b      	str	r3, [r7, #16]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800563c:	693b      	ldr	r3, [r7, #16]
 800563e:	4a29      	ldr	r2, [pc, #164]	; (80056e4 <TIM_OC4_SetConfig+0xe4>)
 8005640:	4013      	ands	r3, r2
 8005642:	613b      	str	r3, [r7, #16]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005644:	683b      	ldr	r3, [r7, #0]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	021b      	lsls	r3, r3, #8
 800564a:	693a      	ldr	r2, [r7, #16]
 800564c:	4313      	orrs	r3, r2
 800564e:	613b      	str	r3, [r7, #16]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	4a25      	ldr	r2, [pc, #148]	; (80056e8 <TIM_OC4_SetConfig+0xe8>)
 8005654:	4013      	ands	r3, r2
 8005656:	60fb      	str	r3, [r7, #12]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005658:	683b      	ldr	r3, [r7, #0]
 800565a:	689b      	ldr	r3, [r3, #8]
 800565c:	031b      	lsls	r3, r3, #12
 800565e:	68fa      	ldr	r2, [r7, #12]
 8005660:	4313      	orrs	r3, r2
 8005662:	60fb      	str	r3, [r7, #12]

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	4a21      	ldr	r2, [pc, #132]	; (80056ec <TIM_OC4_SetConfig+0xec>)
 8005668:	4293      	cmp	r3, r2
 800566a:	d00b      	beq.n	8005684 <TIM_OC4_SetConfig+0x84>
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	4a20      	ldr	r2, [pc, #128]	; (80056f0 <TIM_OC4_SetConfig+0xf0>)
 8005670:	4293      	cmp	r3, r2
 8005672:	d007      	beq.n	8005684 <TIM_OC4_SetConfig+0x84>
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	4a1f      	ldr	r2, [pc, #124]	; (80056f4 <TIM_OC4_SetConfig+0xf4>)
 8005678:	4293      	cmp	r3, r2
 800567a:	d003      	beq.n	8005684 <TIM_OC4_SetConfig+0x84>
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	4a1e      	ldr	r2, [pc, #120]	; (80056f8 <TIM_OC4_SetConfig+0xf8>)
 8005680:	4293      	cmp	r3, r2
 8005682:	d119      	bne.n	80056b8 <TIM_OC4_SetConfig+0xb8>
  {
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 8005684:	683b      	ldr	r3, [r7, #0]
 8005686:	695a      	ldr	r2, [r3, #20]
 8005688:	2380      	movs	r3, #128	; 0x80
 800568a:	005b      	lsls	r3, r3, #1
 800568c:	429a      	cmp	r2, r3
 800568e:	d009      	beq.n	80056a4 <TIM_OC4_SetConfig+0xa4>
 8005690:	683b      	ldr	r3, [r7, #0]
 8005692:	695b      	ldr	r3, [r3, #20]
 8005694:	2b00      	cmp	r3, #0
 8005696:	d005      	beq.n	80056a4 <TIM_OC4_SetConfig+0xa4>
 8005698:	4a18      	ldr	r2, [pc, #96]	; (80056fc <TIM_OC4_SetConfig+0xfc>)
 800569a:	4b19      	ldr	r3, [pc, #100]	; (8005700 <TIM_OC4_SetConfig+0x100>)
 800569c:	0011      	movs	r1, r2
 800569e:	0018      	movs	r0, r3
 80056a0:	f7fb f965 	bl	800096e <assert_failed>

   /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80056a4:	697b      	ldr	r3, [r7, #20]
 80056a6:	4a17      	ldr	r2, [pc, #92]	; (8005704 <TIM_OC4_SetConfig+0x104>)
 80056a8:	4013      	ands	r3, r2
 80056aa:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80056ac:	683b      	ldr	r3, [r7, #0]
 80056ae:	695b      	ldr	r3, [r3, #20]
 80056b0:	019b      	lsls	r3, r3, #6
 80056b2:	697a      	ldr	r2, [r7, #20]
 80056b4:	4313      	orrs	r3, r2
 80056b6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	697a      	ldr	r2, [r7, #20]
 80056bc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	693a      	ldr	r2, [r7, #16]
 80056c2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80056c4:	683b      	ldr	r3, [r7, #0]
 80056c6:	685a      	ldr	r2, [r3, #4]
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	68fa      	ldr	r2, [r7, #12]
 80056d0:	621a      	str	r2, [r3, #32]
}
 80056d2:	46c0      	nop			; (mov r8, r8)
 80056d4:	46bd      	mov	sp, r7
 80056d6:	b006      	add	sp, #24
 80056d8:	bd80      	pop	{r7, pc}
 80056da:	46c0      	nop			; (mov r8, r8)
 80056dc:	ffffefff 	.word	0xffffefff
 80056e0:	ffff8fff 	.word	0xffff8fff
 80056e4:	fffffcff 	.word	0xfffffcff
 80056e8:	ffffdfff 	.word	0xffffdfff
 80056ec:	40012c00 	.word	0x40012c00
 80056f0:	40014000 	.word	0x40014000
 80056f4:	40014400 	.word	0x40014400
 80056f8:	40014800 	.word	0x40014800
 80056fc:	00001370 	.word	0x00001370
 8005700:	08006b1c 	.word	0x08006b1c
 8005704:	ffffbfff 	.word	0xffffbfff

08005708 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005708:	b580      	push	{r7, lr}
 800570a:	b086      	sub	sp, #24
 800570c:	af00      	add	r7, sp, #0
 800570e:	60f8      	str	r0, [r7, #12]
 8005710:	60b9      	str	r1, [r7, #8]
 8005712:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1 = 0U;
 8005714:	2300      	movs	r3, #0
 8005716:	617b      	str	r3, [r7, #20]
  uint32_t tmpccer = 0U;
 8005718:	2300      	movs	r3, #0
 800571a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	6a1b      	ldr	r3, [r3, #32]
 8005720:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	6a1b      	ldr	r3, [r3, #32]
 8005726:	2201      	movs	r2, #1
 8005728:	4393      	bics	r3, r2
 800572a:	001a      	movs	r2, r3
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	699b      	ldr	r3, [r3, #24]
 8005734:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005736:	697b      	ldr	r3, [r7, #20]
 8005738:	22f0      	movs	r2, #240	; 0xf0
 800573a:	4393      	bics	r3, r2
 800573c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	011b      	lsls	r3, r3, #4
 8005742:	697a      	ldr	r2, [r7, #20]
 8005744:	4313      	orrs	r3, r2
 8005746:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005748:	693b      	ldr	r3, [r7, #16]
 800574a:	220a      	movs	r2, #10
 800574c:	4393      	bics	r3, r2
 800574e:	613b      	str	r3, [r7, #16]
  tmpccer |= TIM_ICPolarity;
 8005750:	693a      	ldr	r2, [r7, #16]
 8005752:	68bb      	ldr	r3, [r7, #8]
 8005754:	4313      	orrs	r3, r2
 8005756:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	697a      	ldr	r2, [r7, #20]
 800575c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	693a      	ldr	r2, [r7, #16]
 8005762:	621a      	str	r2, [r3, #32]
}
 8005764:	46c0      	nop			; (mov r8, r8)
 8005766:	46bd      	mov	sp, r7
 8005768:	b006      	add	sp, #24
 800576a:	bd80      	pop	{r7, pc}

0800576c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800576c:	b580      	push	{r7, lr}
 800576e:	b086      	sub	sp, #24
 8005770:	af00      	add	r7, sp, #0
 8005772:	60f8      	str	r0, [r7, #12]
 8005774:	60b9      	str	r1, [r7, #8]
 8005776:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1 = 0U;
 8005778:	2300      	movs	r3, #0
 800577a:	617b      	str	r3, [r7, #20]
  uint32_t tmpccer = 0U;
 800577c:	2300      	movs	r3, #0
 800577e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	6a1b      	ldr	r3, [r3, #32]
 8005784:	2210      	movs	r2, #16
 8005786:	4393      	bics	r3, r2
 8005788:	001a      	movs	r2, r3
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	699b      	ldr	r3, [r3, #24]
 8005792:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	6a1b      	ldr	r3, [r3, #32]
 8005798:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800579a:	697b      	ldr	r3, [r7, #20]
 800579c:	4a0d      	ldr	r2, [pc, #52]	; (80057d4 <TIM_TI2_ConfigInputStage+0x68>)
 800579e:	4013      	ands	r3, r2
 80057a0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	031b      	lsls	r3, r3, #12
 80057a6:	697a      	ldr	r2, [r7, #20]
 80057a8:	4313      	orrs	r3, r2
 80057aa:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80057ac:	693b      	ldr	r3, [r7, #16]
 80057ae:	22a0      	movs	r2, #160	; 0xa0
 80057b0:	4393      	bics	r3, r2
 80057b2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80057b4:	68bb      	ldr	r3, [r7, #8]
 80057b6:	011b      	lsls	r3, r3, #4
 80057b8:	693a      	ldr	r2, [r7, #16]
 80057ba:	4313      	orrs	r3, r2
 80057bc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	697a      	ldr	r2, [r7, #20]
 80057c2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	693a      	ldr	r2, [r7, #16]
 80057c8:	621a      	str	r2, [r3, #32]
}
 80057ca:	46c0      	nop			; (mov r8, r8)
 80057cc:	46bd      	mov	sp, r7
 80057ce:	b006      	add	sp, #24
 80057d0:	bd80      	pop	{r7, pc}
 80057d2:	46c0      	nop			; (mov r8, r8)
 80057d4:	ffff0fff 	.word	0xffff0fff

080057d8 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2 : Filtered Timer Input 2
  *            @arg TIM_TS_ETRF : External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint16_t InputTriggerSource)
{
 80057d8:	b580      	push	{r7, lr}
 80057da:	b084      	sub	sp, #16
 80057dc:	af00      	add	r7, sp, #0
 80057de:	6078      	str	r0, [r7, #4]
 80057e0:	000a      	movs	r2, r1
 80057e2:	1cbb      	adds	r3, r7, #2
 80057e4:	801a      	strh	r2, [r3, #0]
  uint32_t tmpsmcr = 0U;
 80057e6:	2300      	movs	r3, #0
 80057e8:	60fb      	str	r3, [r7, #12]

   /* Get the TIMx SMCR register value */
   tmpsmcr = TIMx->SMCR;
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	689b      	ldr	r3, [r3, #8]
 80057ee:	60fb      	str	r3, [r7, #12]
   /* Reset the TS Bits */
   tmpsmcr &= ~TIM_SMCR_TS;
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	2270      	movs	r2, #112	; 0x70
 80057f4:	4393      	bics	r3, r2
 80057f6:	60fb      	str	r3, [r7, #12]
   /* Set the Input Trigger source and the slave mode*/
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 80057f8:	1cbb      	adds	r3, r7, #2
 80057fa:	881b      	ldrh	r3, [r3, #0]
 80057fc:	2207      	movs	r2, #7
 80057fe:	4313      	orrs	r3, r2
 8005800:	b29b      	uxth	r3, r3
 8005802:	001a      	movs	r2, r3
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	4313      	orrs	r3, r2
 8005808:	60fb      	str	r3, [r7, #12]
   /* Write to TIMx SMCR */
   TIMx->SMCR = tmpsmcr;
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	68fa      	ldr	r2, [r7, #12]
 800580e:	609a      	str	r2, [r3, #8]
}
 8005810:	46c0      	nop			; (mov r8, r8)
 8005812:	46bd      	mov	sp, r7
 8005814:	b004      	add	sp, #16
 8005816:	bd80      	pop	{r7, pc}

08005818 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef* TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005818:	b580      	push	{r7, lr}
 800581a:	b086      	sub	sp, #24
 800581c:	af00      	add	r7, sp, #0
 800581e:	60f8      	str	r0, [r7, #12]
 8005820:	60b9      	str	r1, [r7, #8]
 8005822:	607a      	str	r2, [r7, #4]
 8005824:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr = 0U;
 8005826:	2300      	movs	r3, #0
 8005828:	617b      	str	r3, [r7, #20]

  tmpsmcr = TIMx->SMCR;
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	689b      	ldr	r3, [r3, #8]
 800582e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005830:	697b      	ldr	r3, [r7, #20]
 8005832:	4a09      	ldr	r2, [pc, #36]	; (8005858 <TIM_ETR_SetConfig+0x40>)
 8005834:	4013      	ands	r3, r2
 8005836:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005838:	683b      	ldr	r3, [r7, #0]
 800583a:	021a      	lsls	r2, r3, #8
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	431a      	orrs	r2, r3
 8005840:	68bb      	ldr	r3, [r7, #8]
 8005842:	4313      	orrs	r3, r2
 8005844:	697a      	ldr	r2, [r7, #20]
 8005846:	4313      	orrs	r3, r2
 8005848:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	697a      	ldr	r2, [r7, #20]
 800584e:	609a      	str	r2, [r3, #8]
}
 8005850:	46c0      	nop			; (mov r8, r8)
 8005852:	46bd      	mov	sp, r7
 8005854:	b006      	add	sp, #24
 8005856:	bd80      	pop	{r7, pc}
 8005858:	ffff00ff 	.word	0xffff00ff

0800585c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_Disable.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef* TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800585c:	b580      	push	{r7, lr}
 800585e:	b086      	sub	sp, #24
 8005860:	af00      	add	r7, sp, #0
 8005862:	60f8      	str	r0, [r7, #12]
 8005864:	60b9      	str	r1, [r7, #8]
 8005866:	607a      	str	r2, [r7, #4]
  uint32_t tmp = 0U;
 8005868:	2300      	movs	r3, #0
 800586a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	4a28      	ldr	r2, [pc, #160]	; (8005910 <TIM_CCxChannelCmd+0xb4>)
 8005870:	4293      	cmp	r3, r2
 8005872:	d01e      	beq.n	80058b2 <TIM_CCxChannelCmd+0x56>
 8005874:	68fa      	ldr	r2, [r7, #12]
 8005876:	2380      	movs	r3, #128	; 0x80
 8005878:	05db      	lsls	r3, r3, #23
 800587a:	429a      	cmp	r2, r3
 800587c:	d019      	beq.n	80058b2 <TIM_CCxChannelCmd+0x56>
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	4a24      	ldr	r2, [pc, #144]	; (8005914 <TIM_CCxChannelCmd+0xb8>)
 8005882:	4293      	cmp	r3, r2
 8005884:	d015      	beq.n	80058b2 <TIM_CCxChannelCmd+0x56>
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	4a23      	ldr	r2, [pc, #140]	; (8005918 <TIM_CCxChannelCmd+0xbc>)
 800588a:	4293      	cmp	r3, r2
 800588c:	d011      	beq.n	80058b2 <TIM_CCxChannelCmd+0x56>
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	4a22      	ldr	r2, [pc, #136]	; (800591c <TIM_CCxChannelCmd+0xc0>)
 8005892:	4293      	cmp	r3, r2
 8005894:	d00d      	beq.n	80058b2 <TIM_CCxChannelCmd+0x56>
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	4a21      	ldr	r2, [pc, #132]	; (8005920 <TIM_CCxChannelCmd+0xc4>)
 800589a:	4293      	cmp	r3, r2
 800589c:	d009      	beq.n	80058b2 <TIM_CCxChannelCmd+0x56>
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	4a20      	ldr	r2, [pc, #128]	; (8005924 <TIM_CCxChannelCmd+0xc8>)
 80058a2:	4293      	cmp	r3, r2
 80058a4:	d005      	beq.n	80058b2 <TIM_CCxChannelCmd+0x56>
 80058a6:	4a20      	ldr	r2, [pc, #128]	; (8005928 <TIM_CCxChannelCmd+0xcc>)
 80058a8:	4b20      	ldr	r3, [pc, #128]	; (800592c <TIM_CCxChannelCmd+0xd0>)
 80058aa:	0011      	movs	r1, r2
 80058ac:	0018      	movs	r0, r3
 80058ae:	f7fb f85e 	bl	800096e <assert_failed>
  assert_param(IS_TIM_CHANNELS(Channel));
 80058b2:	68bb      	ldr	r3, [r7, #8]
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	d011      	beq.n	80058dc <TIM_CCxChannelCmd+0x80>
 80058b8:	68bb      	ldr	r3, [r7, #8]
 80058ba:	2b04      	cmp	r3, #4
 80058bc:	d00e      	beq.n	80058dc <TIM_CCxChannelCmd+0x80>
 80058be:	68bb      	ldr	r3, [r7, #8]
 80058c0:	2b08      	cmp	r3, #8
 80058c2:	d00b      	beq.n	80058dc <TIM_CCxChannelCmd+0x80>
 80058c4:	68bb      	ldr	r3, [r7, #8]
 80058c6:	2b0c      	cmp	r3, #12
 80058c8:	d008      	beq.n	80058dc <TIM_CCxChannelCmd+0x80>
 80058ca:	68bb      	ldr	r3, [r7, #8]
 80058cc:	2b18      	cmp	r3, #24
 80058ce:	d005      	beq.n	80058dc <TIM_CCxChannelCmd+0x80>
 80058d0:	4a17      	ldr	r2, [pc, #92]	; (8005930 <TIM_CCxChannelCmd+0xd4>)
 80058d2:	4b16      	ldr	r3, [pc, #88]	; (800592c <TIM_CCxChannelCmd+0xd0>)
 80058d4:	0011      	movs	r1, r2
 80058d6:	0018      	movs	r0, r3
 80058d8:	f7fb f849 	bl	800096e <assert_failed>

  tmp = TIM_CCER_CC1E << Channel;
 80058dc:	2201      	movs	r2, #1
 80058de:	68bb      	ldr	r3, [r7, #8]
 80058e0:	409a      	lsls	r2, r3
 80058e2:	0013      	movs	r3, r2
 80058e4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	6a1b      	ldr	r3, [r3, #32]
 80058ea:	697a      	ldr	r2, [r7, #20]
 80058ec:	43d2      	mvns	r2, r2
 80058ee:	401a      	ands	r2, r3
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |=  (uint32_t)(ChannelState << Channel);
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	6a1a      	ldr	r2, [r3, #32]
 80058f8:	6879      	ldr	r1, [r7, #4]
 80058fa:	68bb      	ldr	r3, [r7, #8]
 80058fc:	4099      	lsls	r1, r3
 80058fe:	000b      	movs	r3, r1
 8005900:	431a      	orrs	r2, r3
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	621a      	str	r2, [r3, #32]
}
 8005906:	46c0      	nop			; (mov r8, r8)
 8005908:	46bd      	mov	sp, r7
 800590a:	b006      	add	sp, #24
 800590c:	bd80      	pop	{r7, pc}
 800590e:	46c0      	nop			; (mov r8, r8)
 8005910:	40012c00 	.word	0x40012c00
 8005914:	40000400 	.word	0x40000400
 8005918:	40002000 	.word	0x40002000
 800591c:	40014000 	.word	0x40014000
 8005920:	40014400 	.word	0x40014400
 8005924:	40014800 	.word	0x40014800
 8005928:	0000155e 	.word	0x0000155e
 800592c:	08006b1c 	.word	0x08006b1c
 8005930:	0000155f 	.word	0x0000155f

08005934 <HAL_TIMEx_OCN_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_OCN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005934:	b580      	push	{r7, lr}
 8005936:	b082      	sub	sp, #8
 8005938:	af00      	add	r7, sp, #0
 800593a:	6078      	str	r0, [r7, #4]
 800593c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	4a24      	ldr	r2, [pc, #144]	; (80059d4 <HAL_TIMEx_OCN_Start+0xa0>)
 8005944:	4293      	cmp	r3, r2
 8005946:	d108      	bne.n	800595a <HAL_TIMEx_OCN_Start+0x26>
 8005948:	683b      	ldr	r3, [r7, #0]
 800594a:	2b00      	cmp	r3, #0
 800594c:	d024      	beq.n	8005998 <HAL_TIMEx_OCN_Start+0x64>
 800594e:	683b      	ldr	r3, [r7, #0]
 8005950:	2b04      	cmp	r3, #4
 8005952:	d021      	beq.n	8005998 <HAL_TIMEx_OCN_Start+0x64>
 8005954:	683b      	ldr	r3, [r7, #0]
 8005956:	2b08      	cmp	r3, #8
 8005958:	d01e      	beq.n	8005998 <HAL_TIMEx_OCN_Start+0x64>
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	4a1e      	ldr	r2, [pc, #120]	; (80059d8 <HAL_TIMEx_OCN_Start+0xa4>)
 8005960:	4293      	cmp	r3, r2
 8005962:	d102      	bne.n	800596a <HAL_TIMEx_OCN_Start+0x36>
 8005964:	683b      	ldr	r3, [r7, #0]
 8005966:	2b00      	cmp	r3, #0
 8005968:	d016      	beq.n	8005998 <HAL_TIMEx_OCN_Start+0x64>
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	4a1b      	ldr	r2, [pc, #108]	; (80059dc <HAL_TIMEx_OCN_Start+0xa8>)
 8005970:	4293      	cmp	r3, r2
 8005972:	d102      	bne.n	800597a <HAL_TIMEx_OCN_Start+0x46>
 8005974:	683b      	ldr	r3, [r7, #0]
 8005976:	2b00      	cmp	r3, #0
 8005978:	d00e      	beq.n	8005998 <HAL_TIMEx_OCN_Start+0x64>
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	4a18      	ldr	r2, [pc, #96]	; (80059e0 <HAL_TIMEx_OCN_Start+0xac>)
 8005980:	4293      	cmp	r3, r2
 8005982:	d102      	bne.n	800598a <HAL_TIMEx_OCN_Start+0x56>
 8005984:	683b      	ldr	r3, [r7, #0]
 8005986:	2b00      	cmp	r3, #0
 8005988:	d006      	beq.n	8005998 <HAL_TIMEx_OCN_Start+0x64>
 800598a:	23f6      	movs	r3, #246	; 0xf6
 800598c:	005a      	lsls	r2, r3, #1
 800598e:	4b15      	ldr	r3, [pc, #84]	; (80059e4 <HAL_TIMEx_OCN_Start+0xb0>)
 8005990:	0011      	movs	r1, r2
 8005992:	0018      	movs	r0, r3
 8005994:	f7fa ffeb 	bl	800096e <assert_failed>

     /* Enable the Capture compare channel N */
     TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	6839      	ldr	r1, [r7, #0]
 800599e:	2204      	movs	r2, #4
 80059a0:	0018      	movs	r0, r3
 80059a2:	f000 fa69 	bl	8005e78 <TIM_CCxNChannelCmd>

  /* Enable the Main Ouput */
    __HAL_TIM_MOE_ENABLE(htim);
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	2180      	movs	r1, #128	; 0x80
 80059b2:	0209      	lsls	r1, r1, #8
 80059b4:	430a      	orrs	r2, r1
 80059b6:	645a      	str	r2, [r3, #68]	; 0x44

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	681a      	ldr	r2, [r3, #0]
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	2101      	movs	r1, #1
 80059c4:	430a      	orrs	r2, r1
 80059c6:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80059c8:	2300      	movs	r3, #0
}
 80059ca:	0018      	movs	r0, r3
 80059cc:	46bd      	mov	sp, r7
 80059ce:	b002      	add	sp, #8
 80059d0:	bd80      	pop	{r7, pc}
 80059d2:	46c0      	nop			; (mov r8, r8)
 80059d4:	40012c00 	.word	0x40012c00
 80059d8:	40014000 	.word	0x40014000
 80059dc:	40014400 	.word	0x40014400
 80059e0:	40014800 	.word	0x40014800
 80059e4:	08006b54 	.word	0x08006b54

080059e8 <HAL_TIMEx_OCN_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_OCN_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80059e8:	b580      	push	{r7, lr}
 80059ea:	b082      	sub	sp, #8
 80059ec:	af00      	add	r7, sp, #0
 80059ee:	6078      	str	r0, [r7, #4]
 80059f0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	4a2f      	ldr	r2, [pc, #188]	; (8005ab4 <HAL_TIMEx_OCN_Stop+0xcc>)
 80059f8:	4293      	cmp	r3, r2
 80059fa:	d108      	bne.n	8005a0e <HAL_TIMEx_OCN_Stop+0x26>
 80059fc:	683b      	ldr	r3, [r7, #0]
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	d023      	beq.n	8005a4a <HAL_TIMEx_OCN_Stop+0x62>
 8005a02:	683b      	ldr	r3, [r7, #0]
 8005a04:	2b04      	cmp	r3, #4
 8005a06:	d020      	beq.n	8005a4a <HAL_TIMEx_OCN_Stop+0x62>
 8005a08:	683b      	ldr	r3, [r7, #0]
 8005a0a:	2b08      	cmp	r3, #8
 8005a0c:	d01d      	beq.n	8005a4a <HAL_TIMEx_OCN_Stop+0x62>
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	4a29      	ldr	r2, [pc, #164]	; (8005ab8 <HAL_TIMEx_OCN_Stop+0xd0>)
 8005a14:	4293      	cmp	r3, r2
 8005a16:	d102      	bne.n	8005a1e <HAL_TIMEx_OCN_Stop+0x36>
 8005a18:	683b      	ldr	r3, [r7, #0]
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d015      	beq.n	8005a4a <HAL_TIMEx_OCN_Stop+0x62>
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	4a26      	ldr	r2, [pc, #152]	; (8005abc <HAL_TIMEx_OCN_Stop+0xd4>)
 8005a24:	4293      	cmp	r3, r2
 8005a26:	d102      	bne.n	8005a2e <HAL_TIMEx_OCN_Stop+0x46>
 8005a28:	683b      	ldr	r3, [r7, #0]
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d00d      	beq.n	8005a4a <HAL_TIMEx_OCN_Stop+0x62>
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	4a23      	ldr	r2, [pc, #140]	; (8005ac0 <HAL_TIMEx_OCN_Stop+0xd8>)
 8005a34:	4293      	cmp	r3, r2
 8005a36:	d102      	bne.n	8005a3e <HAL_TIMEx_OCN_Stop+0x56>
 8005a38:	683b      	ldr	r3, [r7, #0]
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d005      	beq.n	8005a4a <HAL_TIMEx_OCN_Stop+0x62>
 8005a3e:	4a21      	ldr	r2, [pc, #132]	; (8005ac4 <HAL_TIMEx_OCN_Stop+0xdc>)
 8005a40:	4b21      	ldr	r3, [pc, #132]	; (8005ac8 <HAL_TIMEx_OCN_Stop+0xe0>)
 8005a42:	0011      	movs	r1, r2
 8005a44:	0018      	movs	r0, r3
 8005a46:	f7fa ff92 	bl	800096e <assert_failed>

    /* Disable the Capture compare channel N */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_DISABLE);
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	6839      	ldr	r1, [r7, #0]
 8005a50:	2200      	movs	r2, #0
 8005a52:	0018      	movs	r0, r3
 8005a54:	f000 fa10 	bl	8005e78 <TIM_CCxNChannelCmd>

  /* Disable the Main Ouput */
    __HAL_TIM_MOE_DISABLE(htim);
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	6a1b      	ldr	r3, [r3, #32]
 8005a5e:	4a1b      	ldr	r2, [pc, #108]	; (8005acc <HAL_TIMEx_OCN_Stop+0xe4>)
 8005a60:	4013      	ands	r3, r2
 8005a62:	d10d      	bne.n	8005a80 <HAL_TIMEx_OCN_Stop+0x98>
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	6a1b      	ldr	r3, [r3, #32]
 8005a6a:	4a19      	ldr	r2, [pc, #100]	; (8005ad0 <HAL_TIMEx_OCN_Stop+0xe8>)
 8005a6c:	4013      	ands	r3, r2
 8005a6e:	d107      	bne.n	8005a80 <HAL_TIMEx_OCN_Stop+0x98>
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	4916      	ldr	r1, [pc, #88]	; (8005ad4 <HAL_TIMEx_OCN_Stop+0xec>)
 8005a7c:	400a      	ands	r2, r1
 8005a7e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	6a1b      	ldr	r3, [r3, #32]
 8005a86:	4a11      	ldr	r2, [pc, #68]	; (8005acc <HAL_TIMEx_OCN_Stop+0xe4>)
 8005a88:	4013      	ands	r3, r2
 8005a8a:	d10d      	bne.n	8005aa8 <HAL_TIMEx_OCN_Stop+0xc0>
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	6a1b      	ldr	r3, [r3, #32]
 8005a92:	4a0f      	ldr	r2, [pc, #60]	; (8005ad0 <HAL_TIMEx_OCN_Stop+0xe8>)
 8005a94:	4013      	ands	r3, r2
 8005a96:	d107      	bne.n	8005aa8 <HAL_TIMEx_OCN_Stop+0xc0>
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	681a      	ldr	r2, [r3, #0]
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	2101      	movs	r1, #1
 8005aa4:	438a      	bics	r2, r1
 8005aa6:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8005aa8:	2300      	movs	r3, #0
}
 8005aaa:	0018      	movs	r0, r3
 8005aac:	46bd      	mov	sp, r7
 8005aae:	b002      	add	sp, #8
 8005ab0:	bd80      	pop	{r7, pc}
 8005ab2:	46c0      	nop			; (mov r8, r8)
 8005ab4:	40012c00 	.word	0x40012c00
 8005ab8:	40014000 	.word	0x40014000
 8005abc:	40014400 	.word	0x40014400
 8005ac0:	40014800 	.word	0x40014800
 8005ac4:	0000020a 	.word	0x0000020a
 8005ac8:	08006b54 	.word	0x08006b54
 8005acc:	00001111 	.word	0x00001111
 8005ad0:	00000444 	.word	0x00000444
 8005ad4:	ffff7fff 	.word	0xffff7fff

08005ad8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         contains the selected trigger output (TRGO) and the Master/Slave 
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim, TIM_MasterConfigTypeDef * sMasterConfig)
{
 8005ad8:	b580      	push	{r7, lr}
 8005ada:	b082      	sub	sp, #8
 8005adc:	af00      	add	r7, sp, #0
 8005ade:	6078      	str	r0, [r7, #4]
 8005ae0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	4a48      	ldr	r2, [pc, #288]	; (8005c08 <HAL_TIMEx_MasterConfigSynchronization+0x130>)
 8005ae8:	4293      	cmp	r3, r2
 8005aea:	d01a      	beq.n	8005b22 <HAL_TIMEx_MasterConfigSynchronization+0x4a>
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	681a      	ldr	r2, [r3, #0]
 8005af0:	2380      	movs	r3, #128	; 0x80
 8005af2:	05db      	lsls	r3, r3, #23
 8005af4:	429a      	cmp	r2, r3
 8005af6:	d014      	beq.n	8005b22 <HAL_TIMEx_MasterConfigSynchronization+0x4a>
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	4a43      	ldr	r2, [pc, #268]	; (8005c0c <HAL_TIMEx_MasterConfigSynchronization+0x134>)
 8005afe:	4293      	cmp	r3, r2
 8005b00:	d00f      	beq.n	8005b22 <HAL_TIMEx_MasterConfigSynchronization+0x4a>
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	4a42      	ldr	r2, [pc, #264]	; (8005c10 <HAL_TIMEx_MasterConfigSynchronization+0x138>)
 8005b08:	4293      	cmp	r3, r2
 8005b0a:	d00a      	beq.n	8005b22 <HAL_TIMEx_MasterConfigSynchronization+0x4a>
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	4a40      	ldr	r2, [pc, #256]	; (8005c14 <HAL_TIMEx_MasterConfigSynchronization+0x13c>)
 8005b12:	4293      	cmp	r3, r2
 8005b14:	d005      	beq.n	8005b22 <HAL_TIMEx_MasterConfigSynchronization+0x4a>
 8005b16:	4a40      	ldr	r2, [pc, #256]	; (8005c18 <HAL_TIMEx_MasterConfigSynchronization+0x140>)
 8005b18:	4b40      	ldr	r3, [pc, #256]	; (8005c1c <HAL_TIMEx_MasterConfigSynchronization+0x144>)
 8005b1a:	0011      	movs	r1, r2
 8005b1c:	0018      	movs	r0, r3
 8005b1e:	f7fa ff26 	bl	800096e <assert_failed>
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
 8005b22:	683b      	ldr	r3, [r7, #0]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d021      	beq.n	8005b6e <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8005b2a:	683b      	ldr	r3, [r7, #0]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	2b10      	cmp	r3, #16
 8005b30:	d01d      	beq.n	8005b6e <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8005b32:	683b      	ldr	r3, [r7, #0]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	2b20      	cmp	r3, #32
 8005b38:	d019      	beq.n	8005b6e <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8005b3a:	683b      	ldr	r3, [r7, #0]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	2b30      	cmp	r3, #48	; 0x30
 8005b40:	d015      	beq.n	8005b6e <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8005b42:	683b      	ldr	r3, [r7, #0]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	2b40      	cmp	r3, #64	; 0x40
 8005b48:	d011      	beq.n	8005b6e <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8005b4a:	683b      	ldr	r3, [r7, #0]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	2b50      	cmp	r3, #80	; 0x50
 8005b50:	d00d      	beq.n	8005b6e <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8005b52:	683b      	ldr	r3, [r7, #0]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	2b60      	cmp	r3, #96	; 0x60
 8005b58:	d009      	beq.n	8005b6e <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8005b5a:	683b      	ldr	r3, [r7, #0]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	2b70      	cmp	r3, #112	; 0x70
 8005b60:	d005      	beq.n	8005b6e <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8005b62:	4a2f      	ldr	r2, [pc, #188]	; (8005c20 <HAL_TIMEx_MasterConfigSynchronization+0x148>)
 8005b64:	4b2d      	ldr	r3, [pc, #180]	; (8005c1c <HAL_TIMEx_MasterConfigSynchronization+0x144>)
 8005b66:	0011      	movs	r1, r2
 8005b68:	0018      	movs	r0, r3
 8005b6a:	f7fa ff00 	bl	800096e <assert_failed>
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
 8005b6e:	683b      	ldr	r3, [r7, #0]
 8005b70:	685b      	ldr	r3, [r3, #4]
 8005b72:	2b80      	cmp	r3, #128	; 0x80
 8005b74:	d009      	beq.n	8005b8a <HAL_TIMEx_MasterConfigSynchronization+0xb2>
 8005b76:	683b      	ldr	r3, [r7, #0]
 8005b78:	685b      	ldr	r3, [r3, #4]
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	d005      	beq.n	8005b8a <HAL_TIMEx_MasterConfigSynchronization+0xb2>
 8005b7e:	4a29      	ldr	r2, [pc, #164]	; (8005c24 <HAL_TIMEx_MasterConfigSynchronization+0x14c>)
 8005b80:	4b26      	ldr	r3, [pc, #152]	; (8005c1c <HAL_TIMEx_MasterConfigSynchronization+0x144>)
 8005b82:	0011      	movs	r1, r2
 8005b84:	0018      	movs	r0, r3
 8005b86:	f7fa fef2 	bl	800096e <assert_failed>

  __HAL_LOCK(htim);
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	223c      	movs	r2, #60	; 0x3c
 8005b8e:	5c9b      	ldrb	r3, [r3, r2]
 8005b90:	2b01      	cmp	r3, #1
 8005b92:	d101      	bne.n	8005b98 <HAL_TIMEx_MasterConfigSynchronization+0xc0>
 8005b94:	2302      	movs	r3, #2
 8005b96:	e032      	b.n	8005bfe <HAL_TIMEx_MasterConfigSynchronization+0x126>
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	223c      	movs	r2, #60	; 0x3c
 8005b9c:	2101      	movs	r1, #1
 8005b9e:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	223d      	movs	r2, #61	; 0x3d
 8005ba4:	2102      	movs	r1, #2
 8005ba6:	5499      	strb	r1, [r3, r2]

  /* Reset the MMS Bits */
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	685a      	ldr	r2, [r3, #4]
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	2170      	movs	r1, #112	; 0x70
 8005bb4:	438a      	bics	r2, r1
 8005bb6:	605a      	str	r2, [r3, #4]
  /* Select the TRGO source */
  htim->Instance->CR2 |=  sMasterConfig->MasterOutputTrigger;
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	6859      	ldr	r1, [r3, #4]
 8005bbe:	683b      	ldr	r3, [r7, #0]
 8005bc0:	681a      	ldr	r2, [r3, #0]
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	430a      	orrs	r2, r1
 8005bc8:	605a      	str	r2, [r3, #4]

  /* Reset the MSM Bit */
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	689a      	ldr	r2, [r3, #8]
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	2180      	movs	r1, #128	; 0x80
 8005bd6:	438a      	bics	r2, r1
 8005bd8:	609a      	str	r2, [r3, #8]
  /* Set or Reset the MSM Bit */
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	6899      	ldr	r1, [r3, #8]
 8005be0:	683b      	ldr	r3, [r7, #0]
 8005be2:	685a      	ldr	r2, [r3, #4]
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	430a      	orrs	r2, r1
 8005bea:	609a      	str	r2, [r3, #8]

  htim->State = HAL_TIM_STATE_READY;
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	223d      	movs	r2, #61	; 0x3d
 8005bf0:	2101      	movs	r1, #1
 8005bf2:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	223c      	movs	r2, #60	; 0x3c
 8005bf8:	2100      	movs	r1, #0
 8005bfa:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005bfc:	2300      	movs	r3, #0
}
 8005bfe:	0018      	movs	r0, r3
 8005c00:	46bd      	mov	sp, r7
 8005c02:	b002      	add	sp, #8
 8005c04:	bd80      	pop	{r7, pc}
 8005c06:	46c0      	nop			; (mov r8, r8)
 8005c08:	40012c00 	.word	0x40012c00
 8005c0c:	40000400 	.word	0x40000400
 8005c10:	40001000 	.word	0x40001000
 8005c14:	40014000 	.word	0x40014000
 8005c18:	00000649 	.word	0x00000649
 8005c1c:	08006b54 	.word	0x08006b54
 8005c20:	0000064a 	.word	0x0000064a
 8005c24:	0000064b 	.word	0x0000064b

08005c28 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         contains the BDTR Register configuration  information for the TIM peripheral.
  * @retval HAL status
  */    
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005c28:	b580      	push	{r7, lr}
 8005c2a:	b084      	sub	sp, #16
 8005c2c:	af00      	add	r7, sp, #0
 8005c2e:	6078      	str	r0, [r7, #4]
 8005c30:	6039      	str	r1, [r7, #0]
  uint32_t tmpbdtr = 0;
 8005c32:	2300      	movs	r3, #0
 8005c34:	60fb      	str	r3, [r7, #12]
   
  /* Check the parameters */
  assert_param(IS_TIM_BREAK_INSTANCE(htim->Instance));
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	4a74      	ldr	r2, [pc, #464]	; (8005e0c <HAL_TIMEx_ConfigBreakDeadTime+0x1e4>)
 8005c3c:	4293      	cmp	r3, r2
 8005c3e:	d015      	beq.n	8005c6c <HAL_TIMEx_ConfigBreakDeadTime+0x44>
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	4a72      	ldr	r2, [pc, #456]	; (8005e10 <HAL_TIMEx_ConfigBreakDeadTime+0x1e8>)
 8005c46:	4293      	cmp	r3, r2
 8005c48:	d010      	beq.n	8005c6c <HAL_TIMEx_ConfigBreakDeadTime+0x44>
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	4a71      	ldr	r2, [pc, #452]	; (8005e14 <HAL_TIMEx_ConfigBreakDeadTime+0x1ec>)
 8005c50:	4293      	cmp	r3, r2
 8005c52:	d00b      	beq.n	8005c6c <HAL_TIMEx_ConfigBreakDeadTime+0x44>
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	4a6f      	ldr	r2, [pc, #444]	; (8005e18 <HAL_TIMEx_ConfigBreakDeadTime+0x1f0>)
 8005c5a:	4293      	cmp	r3, r2
 8005c5c:	d006      	beq.n	8005c6c <HAL_TIMEx_ConfigBreakDeadTime+0x44>
 8005c5e:	23ce      	movs	r3, #206	; 0xce
 8005c60:	00da      	lsls	r2, r3, #3
 8005c62:	4b6e      	ldr	r3, [pc, #440]	; (8005e1c <HAL_TIMEx_ConfigBreakDeadTime+0x1f4>)
 8005c64:	0011      	movs	r1, r2
 8005c66:	0018      	movs	r0, r3
 8005c68:	f7fa fe81 	bl	800096e <assert_failed>
  assert_param(IS_TIM_OSSR_STATE(sBreakDeadTimeConfig->OffStateRunMode));
 8005c6c:	683b      	ldr	r3, [r7, #0]
 8005c6e:	681a      	ldr	r2, [r3, #0]
 8005c70:	2380      	movs	r3, #128	; 0x80
 8005c72:	011b      	lsls	r3, r3, #4
 8005c74:	429a      	cmp	r2, r3
 8005c76:	d009      	beq.n	8005c8c <HAL_TIMEx_ConfigBreakDeadTime+0x64>
 8005c78:	683b      	ldr	r3, [r7, #0]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	d005      	beq.n	8005c8c <HAL_TIMEx_ConfigBreakDeadTime+0x64>
 8005c80:	4a67      	ldr	r2, [pc, #412]	; (8005e20 <HAL_TIMEx_ConfigBreakDeadTime+0x1f8>)
 8005c82:	4b66      	ldr	r3, [pc, #408]	; (8005e1c <HAL_TIMEx_ConfigBreakDeadTime+0x1f4>)
 8005c84:	0011      	movs	r1, r2
 8005c86:	0018      	movs	r0, r3
 8005c88:	f7fa fe71 	bl	800096e <assert_failed>
  assert_param(IS_TIM_OSSI_STATE(sBreakDeadTimeConfig->OffStateIDLEMode));
 8005c8c:	683b      	ldr	r3, [r7, #0]
 8005c8e:	685a      	ldr	r2, [r3, #4]
 8005c90:	2380      	movs	r3, #128	; 0x80
 8005c92:	00db      	lsls	r3, r3, #3
 8005c94:	429a      	cmp	r2, r3
 8005c96:	d009      	beq.n	8005cac <HAL_TIMEx_ConfigBreakDeadTime+0x84>
 8005c98:	683b      	ldr	r3, [r7, #0]
 8005c9a:	685b      	ldr	r3, [r3, #4]
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	d005      	beq.n	8005cac <HAL_TIMEx_ConfigBreakDeadTime+0x84>
 8005ca0:	4a60      	ldr	r2, [pc, #384]	; (8005e24 <HAL_TIMEx_ConfigBreakDeadTime+0x1fc>)
 8005ca2:	4b5e      	ldr	r3, [pc, #376]	; (8005e1c <HAL_TIMEx_ConfigBreakDeadTime+0x1f4>)
 8005ca4:	0011      	movs	r1, r2
 8005ca6:	0018      	movs	r0, r3
 8005ca8:	f7fa fe61 	bl	800096e <assert_failed>
  assert_param(IS_TIM_LOCK_LEVEL(sBreakDeadTimeConfig->LockLevel));
 8005cac:	683b      	ldr	r3, [r7, #0]
 8005cae:	689b      	ldr	r3, [r3, #8]
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	d017      	beq.n	8005ce4 <HAL_TIMEx_ConfigBreakDeadTime+0xbc>
 8005cb4:	683b      	ldr	r3, [r7, #0]
 8005cb6:	689a      	ldr	r2, [r3, #8]
 8005cb8:	2380      	movs	r3, #128	; 0x80
 8005cba:	005b      	lsls	r3, r3, #1
 8005cbc:	429a      	cmp	r2, r3
 8005cbe:	d011      	beq.n	8005ce4 <HAL_TIMEx_ConfigBreakDeadTime+0xbc>
 8005cc0:	683b      	ldr	r3, [r7, #0]
 8005cc2:	689a      	ldr	r2, [r3, #8]
 8005cc4:	2380      	movs	r3, #128	; 0x80
 8005cc6:	009b      	lsls	r3, r3, #2
 8005cc8:	429a      	cmp	r2, r3
 8005cca:	d00b      	beq.n	8005ce4 <HAL_TIMEx_ConfigBreakDeadTime+0xbc>
 8005ccc:	683b      	ldr	r3, [r7, #0]
 8005cce:	689a      	ldr	r2, [r3, #8]
 8005cd0:	23c0      	movs	r3, #192	; 0xc0
 8005cd2:	009b      	lsls	r3, r3, #2
 8005cd4:	429a      	cmp	r2, r3
 8005cd6:	d005      	beq.n	8005ce4 <HAL_TIMEx_ConfigBreakDeadTime+0xbc>
 8005cd8:	4a53      	ldr	r2, [pc, #332]	; (8005e28 <HAL_TIMEx_ConfigBreakDeadTime+0x200>)
 8005cda:	4b50      	ldr	r3, [pc, #320]	; (8005e1c <HAL_TIMEx_ConfigBreakDeadTime+0x1f4>)
 8005cdc:	0011      	movs	r1, r2
 8005cde:	0018      	movs	r0, r3
 8005ce0:	f7fa fe45 	bl	800096e <assert_failed>
  assert_param(IS_TIM_DEADTIME(sBreakDeadTimeConfig->DeadTime));
 8005ce4:	683b      	ldr	r3, [r7, #0]
 8005ce6:	68db      	ldr	r3, [r3, #12]
 8005ce8:	2bff      	cmp	r3, #255	; 0xff
 8005cea:	d905      	bls.n	8005cf8 <HAL_TIMEx_ConfigBreakDeadTime+0xd0>
 8005cec:	4a4f      	ldr	r2, [pc, #316]	; (8005e2c <HAL_TIMEx_ConfigBreakDeadTime+0x204>)
 8005cee:	4b4b      	ldr	r3, [pc, #300]	; (8005e1c <HAL_TIMEx_ConfigBreakDeadTime+0x1f4>)
 8005cf0:	0011      	movs	r1, r2
 8005cf2:	0018      	movs	r0, r3
 8005cf4:	f7fa fe3b 	bl	800096e <assert_failed>
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
 8005cf8:	683b      	ldr	r3, [r7, #0]
 8005cfa:	691a      	ldr	r2, [r3, #16]
 8005cfc:	2380      	movs	r3, #128	; 0x80
 8005cfe:	015b      	lsls	r3, r3, #5
 8005d00:	429a      	cmp	r2, r3
 8005d02:	d009      	beq.n	8005d18 <HAL_TIMEx_ConfigBreakDeadTime+0xf0>
 8005d04:	683b      	ldr	r3, [r7, #0]
 8005d06:	691b      	ldr	r3, [r3, #16]
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	d005      	beq.n	8005d18 <HAL_TIMEx_ConfigBreakDeadTime+0xf0>
 8005d0c:	4a48      	ldr	r2, [pc, #288]	; (8005e30 <HAL_TIMEx_ConfigBreakDeadTime+0x208>)
 8005d0e:	4b43      	ldr	r3, [pc, #268]	; (8005e1c <HAL_TIMEx_ConfigBreakDeadTime+0x1f4>)
 8005d10:	0011      	movs	r1, r2
 8005d12:	0018      	movs	r0, r3
 8005d14:	f7fa fe2b 	bl	800096e <assert_failed>
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
 8005d18:	683b      	ldr	r3, [r7, #0]
 8005d1a:	695b      	ldr	r3, [r3, #20]
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	d00b      	beq.n	8005d38 <HAL_TIMEx_ConfigBreakDeadTime+0x110>
 8005d20:	683b      	ldr	r3, [r7, #0]
 8005d22:	695a      	ldr	r2, [r3, #20]
 8005d24:	2380      	movs	r3, #128	; 0x80
 8005d26:	019b      	lsls	r3, r3, #6
 8005d28:	429a      	cmp	r2, r3
 8005d2a:	d005      	beq.n	8005d38 <HAL_TIMEx_ConfigBreakDeadTime+0x110>
 8005d2c:	4a41      	ldr	r2, [pc, #260]	; (8005e34 <HAL_TIMEx_ConfigBreakDeadTime+0x20c>)
 8005d2e:	4b3b      	ldr	r3, [pc, #236]	; (8005e1c <HAL_TIMEx_ConfigBreakDeadTime+0x1f4>)
 8005d30:	0011      	movs	r1, r2
 8005d32:	0018      	movs	r0, r3
 8005d34:	f7fa fe1b 	bl	800096e <assert_failed>
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
 8005d38:	683b      	ldr	r3, [r7, #0]
 8005d3a:	699a      	ldr	r2, [r3, #24]
 8005d3c:	2380      	movs	r3, #128	; 0x80
 8005d3e:	01db      	lsls	r3, r3, #7
 8005d40:	429a      	cmp	r2, r3
 8005d42:	d009      	beq.n	8005d58 <HAL_TIMEx_ConfigBreakDeadTime+0x130>
 8005d44:	683b      	ldr	r3, [r7, #0]
 8005d46:	699b      	ldr	r3, [r3, #24]
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	d005      	beq.n	8005d58 <HAL_TIMEx_ConfigBreakDeadTime+0x130>
 8005d4c:	4a3a      	ldr	r2, [pc, #232]	; (8005e38 <HAL_TIMEx_ConfigBreakDeadTime+0x210>)
 8005d4e:	4b33      	ldr	r3, [pc, #204]	; (8005e1c <HAL_TIMEx_ConfigBreakDeadTime+0x1f4>)
 8005d50:	0011      	movs	r1, r2
 8005d52:	0018      	movs	r0, r3
 8005d54:	f7fa fe0b 	bl	800096e <assert_failed>

  /* Process Locked */
  __HAL_LOCK(htim);
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	223c      	movs	r2, #60	; 0x3c
 8005d5c:	5c9b      	ldrb	r3, [r3, r2]
 8005d5e:	2b01      	cmp	r3, #1
 8005d60:	d101      	bne.n	8005d66 <HAL_TIMEx_ConfigBreakDeadTime+0x13e>
 8005d62:	2302      	movs	r3, #2
 8005d64:	e04d      	b.n	8005e02 <HAL_TIMEx_ConfigBreakDeadTime+0x1da>
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	223c      	movs	r2, #60	; 0x3c
 8005d6a:	2101      	movs	r1, #1
 8005d6c:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	223d      	movs	r2, #61	; 0x3d
 8005d72:	2102      	movs	r1, #2
 8005d74:	5499      	strb	r1, [r3, r2]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */
  
  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	22ff      	movs	r2, #255	; 0xff
 8005d7a:	4393      	bics	r3, r2
 8005d7c:	001a      	movs	r2, r3
 8005d7e:	683b      	ldr	r3, [r7, #0]
 8005d80:	68db      	ldr	r3, [r3, #12]
 8005d82:	4313      	orrs	r3, r2
 8005d84:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	4a2c      	ldr	r2, [pc, #176]	; (8005e3c <HAL_TIMEx_ConfigBreakDeadTime+0x214>)
 8005d8a:	401a      	ands	r2, r3
 8005d8c:	683b      	ldr	r3, [r7, #0]
 8005d8e:	689b      	ldr	r3, [r3, #8]
 8005d90:	4313      	orrs	r3, r2
 8005d92:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	4a2a      	ldr	r2, [pc, #168]	; (8005e40 <HAL_TIMEx_ConfigBreakDeadTime+0x218>)
 8005d98:	401a      	ands	r2, r3
 8005d9a:	683b      	ldr	r3, [r7, #0]
 8005d9c:	685b      	ldr	r3, [r3, #4]
 8005d9e:	4313      	orrs	r3, r2
 8005da0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	4a27      	ldr	r2, [pc, #156]	; (8005e44 <HAL_TIMEx_ConfigBreakDeadTime+0x21c>)
 8005da6:	401a      	ands	r2, r3
 8005da8:	683b      	ldr	r3, [r7, #0]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	4313      	orrs	r3, r2
 8005dae:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	4a25      	ldr	r2, [pc, #148]	; (8005e48 <HAL_TIMEx_ConfigBreakDeadTime+0x220>)
 8005db4:	401a      	ands	r2, r3
 8005db6:	683b      	ldr	r3, [r7, #0]
 8005db8:	691b      	ldr	r3, [r3, #16]
 8005dba:	4313      	orrs	r3, r2
 8005dbc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	4a22      	ldr	r2, [pc, #136]	; (8005e4c <HAL_TIMEx_ConfigBreakDeadTime+0x224>)
 8005dc2:	401a      	ands	r2, r3
 8005dc4:	683b      	ldr	r3, [r7, #0]
 8005dc6:	695b      	ldr	r3, [r3, #20]
 8005dc8:	4313      	orrs	r3, r2
 8005dca:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	4a20      	ldr	r2, [pc, #128]	; (8005e50 <HAL_TIMEx_ConfigBreakDeadTime+0x228>)
 8005dd0:	401a      	ands	r2, r3
 8005dd2:	683b      	ldr	r3, [r7, #0]
 8005dd4:	699b      	ldr	r3, [r3, #24]
 8005dd6:	4313      	orrs	r3, r2
 8005dd8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_MOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	4a1d      	ldr	r2, [pc, #116]	; (8005e54 <HAL_TIMEx_ConfigBreakDeadTime+0x22c>)
 8005dde:	401a      	ands	r2, r3
 8005de0:	683b      	ldr	r3, [r7, #0]
 8005de2:	699b      	ldr	r3, [r3, #24]
 8005de4:	4313      	orrs	r3, r2
 8005de6:	60fb      	str	r3, [r7, #12]
  
  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	68fa      	ldr	r2, [r7, #12]
 8005dee:	645a      	str	r2, [r3, #68]	; 0x44
  
  htim->State = HAL_TIM_STATE_READY;
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	223d      	movs	r2, #61	; 0x3d
 8005df4:	2101      	movs	r1, #1
 8005df6:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	223c      	movs	r2, #60	; 0x3c
 8005dfc:	2100      	movs	r1, #0
 8005dfe:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005e00:	2300      	movs	r3, #0
}
 8005e02:	0018      	movs	r0, r3
 8005e04:	46bd      	mov	sp, r7
 8005e06:	b004      	add	sp, #16
 8005e08:	bd80      	pop	{r7, pc}
 8005e0a:	46c0      	nop			; (mov r8, r8)
 8005e0c:	40012c00 	.word	0x40012c00
 8005e10:	40014000 	.word	0x40014000
 8005e14:	40014400 	.word	0x40014400
 8005e18:	40014800 	.word	0x40014800
 8005e1c:	08006b54 	.word	0x08006b54
 8005e20:	00000671 	.word	0x00000671
 8005e24:	00000672 	.word	0x00000672
 8005e28:	00000673 	.word	0x00000673
 8005e2c:	00000674 	.word	0x00000674
 8005e30:	00000675 	.word	0x00000675
 8005e34:	00000676 	.word	0x00000676
 8005e38:	00000677 	.word	0x00000677
 8005e3c:	fffffcff 	.word	0xfffffcff
 8005e40:	fffffbff 	.word	0xfffffbff
 8005e44:	fffff7ff 	.word	0xfffff7ff
 8005e48:	ffffefff 	.word	0xffffefff
 8005e4c:	ffffdfff 	.word	0xffffdfff
 8005e50:	ffffbfff 	.word	0xffffbfff
 8005e54:	ffff7fff 	.word	0xffff7fff

08005e58 <HAL_TIMEx_CommutationCallback>:
  * @brief  Hall commutation changed callback in non blocking mode 
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutationCallback(TIM_HandleTypeDef *htim)
{
 8005e58:	b580      	push	{r7, lr}
 8005e5a:	b082      	sub	sp, #8
 8005e5c:	af00      	add	r7, sp, #0
 8005e5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutationCallback could be implemented in the user file
   */
}
 8005e60:	46c0      	nop			; (mov r8, r8)
 8005e62:	46bd      	mov	sp, r7
 8005e64:	b002      	add	sp, #8
 8005e66:	bd80      	pop	{r7, pc}

08005e68 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non blocking mode 
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005e68:	b580      	push	{r7, lr}
 8005e6a:	b082      	sub	sp, #8
 8005e6c:	af00      	add	r7, sp, #0
 8005e6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005e70:	46c0      	nop			; (mov r8, r8)
 8005e72:	46bd      	mov	sp, r7
 8005e74:	b002      	add	sp, #8
 8005e76:	bd80      	pop	{r7, pc}

08005e78 <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef* TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 8005e78:	b580      	push	{r7, lr}
 8005e7a:	b086      	sub	sp, #24
 8005e7c:	af00      	add	r7, sp, #0
 8005e7e:	60f8      	str	r0, [r7, #12]
 8005e80:	60b9      	str	r1, [r7, #8]
 8005e82:	607a      	str	r2, [r7, #4]
  uint32_t tmp = 0U;
 8005e84:	2300      	movs	r3, #0
 8005e86:	617b      	str	r3, [r7, #20]

  tmp = TIM_CCER_CC1NE << Channel;
 8005e88:	2204      	movs	r2, #4
 8005e8a:	68bb      	ldr	r3, [r7, #8]
 8005e8c:	409a      	lsls	r2, r3
 8005e8e:	0013      	movs	r3, r2
 8005e90:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	6a1b      	ldr	r3, [r3, #32]
 8005e96:	697a      	ldr	r2, [r7, #20]
 8005e98:	43d2      	mvns	r2, r2
 8005e9a:	401a      	ands	r2, r3
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |=  (uint32_t)(ChannelNState << Channel);
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	6a1a      	ldr	r2, [r3, #32]
 8005ea4:	6879      	ldr	r1, [r7, #4]
 8005ea6:	68bb      	ldr	r3, [r7, #8]
 8005ea8:	4099      	lsls	r1, r3
 8005eaa:	000b      	movs	r3, r1
 8005eac:	431a      	orrs	r2, r3
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	621a      	str	r2, [r3, #32]
}
 8005eb2:	46c0      	nop			; (mov r8, r8)
 8005eb4:	46bd      	mov	sp, r7
 8005eb6:	b006      	add	sp, #24
 8005eb8:	bd80      	pop	{r7, pc}
	...

08005ebc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005ebc:	b580      	push	{r7, lr}
 8005ebe:	b082      	sub	sp, #8
 8005ec0:	af00      	add	r7, sp, #0
 8005ec2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if(huart == NULL)
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	d101      	bne.n	8005ece <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005eca:	2301      	movs	r3, #1
 8005ecc:	e06f      	b.n	8005fae <HAL_UART_Init+0xf2>
  }

  if(huart->Init.HwFlowCtl != UART_HWCONTROL_NONE)
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	699b      	ldr	r3, [r3, #24]
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	d011      	beq.n	8005efa <HAL_UART_Init+0x3e>
  {
    /* Check the parameters */
    assert_param(IS_UART_HWFLOW_INSTANCE(huart->Instance));
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	4a37      	ldr	r2, [pc, #220]	; (8005fb8 <HAL_UART_Init+0xfc>)
 8005edc:	4293      	cmp	r3, r2
 8005ede:	d01e      	beq.n	8005f1e <HAL_UART_Init+0x62>
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	4a35      	ldr	r2, [pc, #212]	; (8005fbc <HAL_UART_Init+0x100>)
 8005ee6:	4293      	cmp	r3, r2
 8005ee8:	d019      	beq.n	8005f1e <HAL_UART_Init+0x62>
 8005eea:	2397      	movs	r3, #151	; 0x97
 8005eec:	005a      	lsls	r2, r3, #1
 8005eee:	4b34      	ldr	r3, [pc, #208]	; (8005fc0 <HAL_UART_Init+0x104>)
 8005ef0:	0011      	movs	r1, r2
 8005ef2:	0018      	movs	r0, r3
 8005ef4:	f7fa fd3b 	bl	800096e <assert_failed>
 8005ef8:	e011      	b.n	8005f1e <HAL_UART_Init+0x62>
  }
  else
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	4a2e      	ldr	r2, [pc, #184]	; (8005fb8 <HAL_UART_Init+0xfc>)
 8005f00:	4293      	cmp	r3, r2
 8005f02:	d00c      	beq.n	8005f1e <HAL_UART_Init+0x62>
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	4a2c      	ldr	r2, [pc, #176]	; (8005fbc <HAL_UART_Init+0x100>)
 8005f0a:	4293      	cmp	r3, r2
 8005f0c:	d007      	beq.n	8005f1e <HAL_UART_Init+0x62>
 8005f0e:	2334      	movs	r3, #52	; 0x34
 8005f10:	33ff      	adds	r3, #255	; 0xff
 8005f12:	001a      	movs	r2, r3
 8005f14:	4b2a      	ldr	r3, [pc, #168]	; (8005fc0 <HAL_UART_Init+0x104>)
 8005f16:	0011      	movs	r1, r2
 8005f18:	0018      	movs	r0, r3
 8005f1a:	f7fa fd28 	bl	800096e <assert_failed>
  }

  if(huart->gState == HAL_UART_STATE_RESET)
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	2269      	movs	r2, #105	; 0x69
 8005f22:	5c9b      	ldrb	r3, [r3, r2]
 8005f24:	b2db      	uxtb	r3, r3
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	d107      	bne.n	8005f3a <HAL_UART_Init+0x7e>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	2268      	movs	r2, #104	; 0x68
 8005f2e:	2100      	movs	r1, #0
 8005f30:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	0018      	movs	r0, r3
 8005f36:	f7fb f805 	bl	8000f44 <HAL_UART_MspInit>
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	2269      	movs	r2, #105	; 0x69
 8005f3e:	2124      	movs	r1, #36	; 0x24
 8005f40:	5499      	strb	r1, [r3, r2]

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	681a      	ldr	r2, [r3, #0]
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	2101      	movs	r1, #1
 8005f4e:	438a      	bics	r2, r1
 8005f50:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	0018      	movs	r0, r3
 8005f56:	f000 f837 	bl	8005fc8 <UART_SetConfig>
 8005f5a:	0003      	movs	r3, r0
 8005f5c:	2b01      	cmp	r3, #1
 8005f5e:	d101      	bne.n	8005f64 <HAL_UART_Init+0xa8>
  {
    return HAL_ERROR;
 8005f60:	2301      	movs	r3, #1
 8005f62:	e024      	b.n	8005fae <HAL_UART_Init+0xf2>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	d003      	beq.n	8005f74 <HAL_UART_Init+0xb8>
  {
    UART_AdvFeatureConfig(huart);
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	0018      	movs	r0, r3
 8005f70:	f000 fa4c 	bl	800640c <UART_AdvFeatureConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register. */
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	685a      	ldr	r2, [r3, #4]
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	4911      	ldr	r1, [pc, #68]	; (8005fc4 <HAL_UART_Init+0x108>)
 8005f80:	400a      	ands	r2, r1
 8005f82:	605a      	str	r2, [r3, #4]
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
#endif
#if defined (USART_CR3_SCEN)
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	689a      	ldr	r2, [r3, #8]
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	212a      	movs	r1, #42	; 0x2a
 8005f90:	438a      	bics	r2, r1
 8005f92:	609a      	str	r2, [r3, #8]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
#endif
#endif

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	681a      	ldr	r2, [r3, #0]
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	2101      	movs	r1, #1
 8005fa0:	430a      	orrs	r2, r1
 8005fa2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	0018      	movs	r0, r3
 8005fa8:	f000 fba4 	bl	80066f4 <UART_CheckIdleState>
 8005fac:	0003      	movs	r3, r0
}
 8005fae:	0018      	movs	r0, r3
 8005fb0:	46bd      	mov	sp, r7
 8005fb2:	b002      	add	sp, #8
 8005fb4:	bd80      	pop	{r7, pc}
 8005fb6:	46c0      	nop			; (mov r8, r8)
 8005fb8:	40013800 	.word	0x40013800
 8005fbc:	40004400 	.word	0x40004400
 8005fc0:	08006b90 	.word	0x08006b90
 8005fc4:	ffffb7ff 	.word	0xffffb7ff

08005fc8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005fc8:	b590      	push	{r4, r7, lr}
 8005fca:	b087      	sub	sp, #28
 8005fcc:	af00      	add	r7, sp, #0
 8005fce:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg                     = 0x00000000U;
 8005fd0:	2300      	movs	r3, #0
 8005fd2:	60fb      	str	r3, [r7, #12]
  UART_ClockSourceTypeDef clocksource = UART_CLOCKSOURCE_UNDEFINED;
 8005fd4:	2317      	movs	r3, #23
 8005fd6:	18fb      	adds	r3, r7, r3
 8005fd8:	2210      	movs	r2, #16
 8005fda:	701a      	strb	r2, [r3, #0]
  uint16_t brrtemp                    = 0x0000U;
 8005fdc:	230a      	movs	r3, #10
 8005fde:	18fb      	adds	r3, r7, r3
 8005fe0:	2200      	movs	r2, #0
 8005fe2:	801a      	strh	r2, [r3, #0]
  uint16_t usartdiv                   = 0x0000U;
 8005fe4:	2314      	movs	r3, #20
 8005fe6:	18fb      	adds	r3, r7, r3
 8005fe8:	2200      	movs	r2, #0
 8005fea:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef ret               = HAL_OK;
 8005fec:	2313      	movs	r3, #19
 8005fee:	18fb      	adds	r3, r7, r3
 8005ff0:	2200      	movs	r2, #0
 8005ff2:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	685b      	ldr	r3, [r3, #4]
 8005ff8:	4ac7      	ldr	r2, [pc, #796]	; (8006318 <UART_SetConfig+0x350>)
 8005ffa:	4293      	cmp	r3, r2
 8005ffc:	d905      	bls.n	800600a <UART_SetConfig+0x42>
 8005ffe:	4ac7      	ldr	r2, [pc, #796]	; (800631c <UART_SetConfig+0x354>)
 8006000:	4bc7      	ldr	r3, [pc, #796]	; (8006320 <UART_SetConfig+0x358>)
 8006002:	0011      	movs	r1, r2
 8006004:	0018      	movs	r0, r3
 8006006:	f7fa fcb2 	bl	800096e <assert_failed>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	689b      	ldr	r3, [r3, #8]
 800600e:	2b00      	cmp	r3, #0
 8006010:	d00b      	beq.n	800602a <UART_SetConfig+0x62>
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	689a      	ldr	r2, [r3, #8]
 8006016:	2380      	movs	r3, #128	; 0x80
 8006018:	015b      	lsls	r3, r3, #5
 800601a:	429a      	cmp	r2, r3
 800601c:	d005      	beq.n	800602a <UART_SetConfig+0x62>
 800601e:	4ac1      	ldr	r2, [pc, #772]	; (8006324 <UART_SetConfig+0x35c>)
 8006020:	4bbf      	ldr	r3, [pc, #764]	; (8006320 <UART_SetConfig+0x358>)
 8006022:	0011      	movs	r1, r2
 8006024:	0018      	movs	r0, r3
 8006026:	f7fa fca2 	bl	800096e <assert_failed>
  assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	68da      	ldr	r2, [r3, #12]
 800602e:	2380      	movs	r3, #128	; 0x80
 8006030:	015b      	lsls	r3, r3, #5
 8006032:	429a      	cmp	r2, r3
 8006034:	d015      	beq.n	8006062 <UART_SetConfig+0x9a>
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	68db      	ldr	r3, [r3, #12]
 800603a:	2b00      	cmp	r3, #0
 800603c:	d011      	beq.n	8006062 <UART_SetConfig+0x9a>
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	68da      	ldr	r2, [r3, #12]
 8006042:	23c0      	movs	r3, #192	; 0xc0
 8006044:	019b      	lsls	r3, r3, #6
 8006046:	429a      	cmp	r2, r3
 8006048:	d00b      	beq.n	8006062 <UART_SetConfig+0x9a>
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	68da      	ldr	r2, [r3, #12]
 800604e:	2380      	movs	r3, #128	; 0x80
 8006050:	019b      	lsls	r3, r3, #6
 8006052:	429a      	cmp	r2, r3
 8006054:	d005      	beq.n	8006062 <UART_SetConfig+0x9a>
 8006056:	4ab4      	ldr	r2, [pc, #720]	; (8006328 <UART_SetConfig+0x360>)
 8006058:	4bb1      	ldr	r3, [pc, #708]	; (8006320 <UART_SetConfig+0x358>)
 800605a:	0011      	movs	r1, r2
 800605c:	0018      	movs	r0, r3
 800605e:	f7fa fc86 	bl	800096e <assert_failed>
  assert_param(IS_UART_PARITY(huart->Init.Parity));
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	691b      	ldr	r3, [r3, #16]
 8006066:	2b00      	cmp	r3, #0
 8006068:	d011      	beq.n	800608e <UART_SetConfig+0xc6>
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	691a      	ldr	r2, [r3, #16]
 800606e:	2380      	movs	r3, #128	; 0x80
 8006070:	00db      	lsls	r3, r3, #3
 8006072:	429a      	cmp	r2, r3
 8006074:	d00b      	beq.n	800608e <UART_SetConfig+0xc6>
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	691a      	ldr	r2, [r3, #16]
 800607a:	23c0      	movs	r3, #192	; 0xc0
 800607c:	00db      	lsls	r3, r3, #3
 800607e:	429a      	cmp	r2, r3
 8006080:	d005      	beq.n	800608e <UART_SetConfig+0xc6>
 8006082:	4aaa      	ldr	r2, [pc, #680]	; (800632c <UART_SetConfig+0x364>)
 8006084:	4ba6      	ldr	r3, [pc, #664]	; (8006320 <UART_SetConfig+0x358>)
 8006086:	0011      	movs	r1, r2
 8006088:	0018      	movs	r0, r3
 800608a:	f7fa fc70 	bl	800096e <assert_failed>
  assert_param(IS_UART_MODE(huart->Init.Mode));
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	695b      	ldr	r3, [r3, #20]
 8006092:	220c      	movs	r2, #12
 8006094:	4393      	bics	r3, r2
 8006096:	d103      	bne.n	80060a0 <UART_SetConfig+0xd8>
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	695b      	ldr	r3, [r3, #20]
 800609c:	2b00      	cmp	r3, #0
 800609e:	d105      	bne.n	80060ac <UART_SetConfig+0xe4>
 80060a0:	4aa3      	ldr	r2, [pc, #652]	; (8006330 <UART_SetConfig+0x368>)
 80060a2:	4b9f      	ldr	r3, [pc, #636]	; (8006320 <UART_SetConfig+0x358>)
 80060a4:	0011      	movs	r1, r2
 80060a6:	0018      	movs	r0, r3
 80060a8:	f7fa fc61 	bl	800096e <assert_failed>
  assert_param(IS_UART_HARDWARE_FLOW_CONTROL(huart->Init.HwFlowCtl));
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	699b      	ldr	r3, [r3, #24]
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	d017      	beq.n	80060e4 <UART_SetConfig+0x11c>
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	699a      	ldr	r2, [r3, #24]
 80060b8:	2380      	movs	r3, #128	; 0x80
 80060ba:	005b      	lsls	r3, r3, #1
 80060bc:	429a      	cmp	r2, r3
 80060be:	d011      	beq.n	80060e4 <UART_SetConfig+0x11c>
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	699a      	ldr	r2, [r3, #24]
 80060c4:	2380      	movs	r3, #128	; 0x80
 80060c6:	009b      	lsls	r3, r3, #2
 80060c8:	429a      	cmp	r2, r3
 80060ca:	d00b      	beq.n	80060e4 <UART_SetConfig+0x11c>
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	699a      	ldr	r2, [r3, #24]
 80060d0:	23c0      	movs	r3, #192	; 0xc0
 80060d2:	009b      	lsls	r3, r3, #2
 80060d4:	429a      	cmp	r2, r3
 80060d6:	d005      	beq.n	80060e4 <UART_SetConfig+0x11c>
 80060d8:	4a96      	ldr	r2, [pc, #600]	; (8006334 <UART_SetConfig+0x36c>)
 80060da:	4b91      	ldr	r3, [pc, #580]	; (8006320 <UART_SetConfig+0x358>)
 80060dc:	0011      	movs	r1, r2
 80060de:	0018      	movs	r0, r3
 80060e0:	f7fa fc45 	bl	800096e <assert_failed>
  assert_param(IS_UART_ONE_BIT_SAMPLE(huart->Init.OneBitSampling));
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	6a1b      	ldr	r3, [r3, #32]
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	d00b      	beq.n	8006104 <UART_SetConfig+0x13c>
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	6a1a      	ldr	r2, [r3, #32]
 80060f0:	2380      	movs	r3, #128	; 0x80
 80060f2:	011b      	lsls	r3, r3, #4
 80060f4:	429a      	cmp	r2, r3
 80060f6:	d005      	beq.n	8006104 <UART_SetConfig+0x13c>
 80060f8:	4a8f      	ldr	r2, [pc, #572]	; (8006338 <UART_SetConfig+0x370>)
 80060fa:	4b89      	ldr	r3, [pc, #548]	; (8006320 <UART_SetConfig+0x358>)
 80060fc:	0011      	movs	r1, r2
 80060fe:	0018      	movs	r0, r3
 8006100:	f7fa fc35 	bl	800096e <assert_failed>
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	69db      	ldr	r3, [r3, #28]
 8006108:	2b00      	cmp	r3, #0
 800610a:	d00b      	beq.n	8006124 <UART_SetConfig+0x15c>
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	69da      	ldr	r2, [r3, #28]
 8006110:	2380      	movs	r3, #128	; 0x80
 8006112:	021b      	lsls	r3, r3, #8
 8006114:	429a      	cmp	r2, r3
 8006116:	d005      	beq.n	8006124 <UART_SetConfig+0x15c>
 8006118:	4a88      	ldr	r2, [pc, #544]	; (800633c <UART_SetConfig+0x374>)
 800611a:	4b81      	ldr	r3, [pc, #516]	; (8006320 <UART_SetConfig+0x358>)
 800611c:	0011      	movs	r1, r2
 800611e:	0018      	movs	r0, r3
 8006120:	f7fa fc25 	bl	800096e <assert_failed>
   *  the UART Word Length, Parity, Mode and oversampling:
   *  set the M bits according to huart->Init.WordLength value
   *  set PCE and PS bits according to huart->Init.Parity value
   *  set TE and RE bits according to huart->Init.Mode value
   *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	689a      	ldr	r2, [r3, #8]
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	691b      	ldr	r3, [r3, #16]
 800612c:	431a      	orrs	r2, r3
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	695b      	ldr	r3, [r3, #20]
 8006132:	431a      	orrs	r2, r3
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	69db      	ldr	r3, [r3, #28]
 8006138:	4313      	orrs	r3, r2
 800613a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	4a7f      	ldr	r2, [pc, #508]	; (8006340 <UART_SetConfig+0x378>)
 8006144:	4013      	ands	r3, r2
 8006146:	0019      	movs	r1, r3
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	68fa      	ldr	r2, [r7, #12]
 800614e:	430a      	orrs	r2, r1
 8006150:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
   * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	685b      	ldr	r3, [r3, #4]
 8006158:	4a7a      	ldr	r2, [pc, #488]	; (8006344 <UART_SetConfig+0x37c>)
 800615a:	4013      	ands	r3, r2
 800615c:	0019      	movs	r1, r3
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	68da      	ldr	r2, [r3, #12]
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	430a      	orrs	r2, r1
 8006168:	605a      	str	r2, [r3, #4]
  /* Configure
   * - UART HardWare Flow Control: set CTSE and RTSE bits according
   *   to huart->Init.HwFlowCtl value
   * - one-bit sampling method versus three samples' majority rule according
   *   to huart->Init.OneBitSampling */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	699a      	ldr	r2, [r3, #24]
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	6a1b      	ldr	r3, [r3, #32]
 8006172:	4313      	orrs	r3, r2
 8006174:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	689b      	ldr	r3, [r3, #8]
 800617c:	4a72      	ldr	r2, [pc, #456]	; (8006348 <UART_SetConfig+0x380>)
 800617e:	4013      	ands	r3, r2
 8006180:	0019      	movs	r1, r3
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	68fa      	ldr	r2, [r7, #12]
 8006188:	430a      	orrs	r2, r1
 800618a:	609a      	str	r2, [r3, #8]

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	4a6e      	ldr	r2, [pc, #440]	; (800634c <UART_SetConfig+0x384>)
 8006192:	4293      	cmp	r3, r2
 8006194:	d125      	bne.n	80061e2 <UART_SetConfig+0x21a>
 8006196:	4b6e      	ldr	r3, [pc, #440]	; (8006350 <UART_SetConfig+0x388>)
 8006198:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800619a:	2203      	movs	r2, #3
 800619c:	4013      	ands	r3, r2
 800619e:	2b01      	cmp	r3, #1
 80061a0:	d00f      	beq.n	80061c2 <UART_SetConfig+0x1fa>
 80061a2:	d304      	bcc.n	80061ae <UART_SetConfig+0x1e6>
 80061a4:	2b02      	cmp	r3, #2
 80061a6:	d011      	beq.n	80061cc <UART_SetConfig+0x204>
 80061a8:	2b03      	cmp	r3, #3
 80061aa:	d005      	beq.n	80061b8 <UART_SetConfig+0x1f0>
 80061ac:	e013      	b.n	80061d6 <UART_SetConfig+0x20e>
 80061ae:	2317      	movs	r3, #23
 80061b0:	18fb      	adds	r3, r7, r3
 80061b2:	2200      	movs	r2, #0
 80061b4:	701a      	strb	r2, [r3, #0]
 80061b6:	e022      	b.n	80061fe <UART_SetConfig+0x236>
 80061b8:	2317      	movs	r3, #23
 80061ba:	18fb      	adds	r3, r7, r3
 80061bc:	2202      	movs	r2, #2
 80061be:	701a      	strb	r2, [r3, #0]
 80061c0:	e01d      	b.n	80061fe <UART_SetConfig+0x236>
 80061c2:	2317      	movs	r3, #23
 80061c4:	18fb      	adds	r3, r7, r3
 80061c6:	2204      	movs	r2, #4
 80061c8:	701a      	strb	r2, [r3, #0]
 80061ca:	e018      	b.n	80061fe <UART_SetConfig+0x236>
 80061cc:	2317      	movs	r3, #23
 80061ce:	18fb      	adds	r3, r7, r3
 80061d0:	2208      	movs	r2, #8
 80061d2:	701a      	strb	r2, [r3, #0]
 80061d4:	e013      	b.n	80061fe <UART_SetConfig+0x236>
 80061d6:	2317      	movs	r3, #23
 80061d8:	18fb      	adds	r3, r7, r3
 80061da:	2210      	movs	r2, #16
 80061dc:	701a      	strb	r2, [r3, #0]
 80061de:	46c0      	nop			; (mov r8, r8)
 80061e0:	e00d      	b.n	80061fe <UART_SetConfig+0x236>
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	4a5b      	ldr	r2, [pc, #364]	; (8006354 <UART_SetConfig+0x38c>)
 80061e8:	4293      	cmp	r3, r2
 80061ea:	d104      	bne.n	80061f6 <UART_SetConfig+0x22e>
 80061ec:	2317      	movs	r3, #23
 80061ee:	18fb      	adds	r3, r7, r3
 80061f0:	2200      	movs	r2, #0
 80061f2:	701a      	strb	r2, [r3, #0]
 80061f4:	e003      	b.n	80061fe <UART_SetConfig+0x236>
 80061f6:	2317      	movs	r3, #23
 80061f8:	18fb      	adds	r3, r7, r3
 80061fa:	2210      	movs	r2, #16
 80061fc:	701a      	strb	r2, [r3, #0]
  
  /* Check UART Over Sampling to set Baud Rate Register */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	69da      	ldr	r2, [r3, #28]
 8006202:	2380      	movs	r3, #128	; 0x80
 8006204:	021b      	lsls	r3, r3, #8
 8006206:	429a      	cmp	r2, r3
 8006208:	d000      	beq.n	800620c <UART_SetConfig+0x244>
 800620a:	e077      	b.n	80062fc <UART_SetConfig+0x334>
  {
    switch (clocksource)
 800620c:	2317      	movs	r3, #23
 800620e:	18fb      	adds	r3, r7, r3
 8006210:	781b      	ldrb	r3, [r3, #0]
 8006212:	2b02      	cmp	r3, #2
 8006214:	d01c      	beq.n	8006250 <UART_SetConfig+0x288>
 8006216:	dc02      	bgt.n	800621e <UART_SetConfig+0x256>
 8006218:	2b00      	cmp	r3, #0
 800621a:	d005      	beq.n	8006228 <UART_SetConfig+0x260>
 800621c:	e04f      	b.n	80062be <UART_SetConfig+0x2f6>
 800621e:	2b04      	cmp	r3, #4
 8006220:	d027      	beq.n	8006272 <UART_SetConfig+0x2aa>
 8006222:	2b08      	cmp	r3, #8
 8006224:	d039      	beq.n	800629a <UART_SetConfig+0x2d2>
 8006226:	e04a      	b.n	80062be <UART_SetConfig+0x2f6>
    {
      case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8006228:	f7fd fcea 	bl	8003c00 <HAL_RCC_GetPCLK1Freq>
 800622c:	0003      	movs	r3, r0
 800622e:	005a      	lsls	r2, r3, #1
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	685b      	ldr	r3, [r3, #4]
 8006234:	085b      	lsrs	r3, r3, #1
 8006236:	18d2      	adds	r2, r2, r3
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	685b      	ldr	r3, [r3, #4]
 800623c:	0019      	movs	r1, r3
 800623e:	0010      	movs	r0, r2
 8006240:	f7f9 ff62 	bl	8000108 <__udivsi3>
 8006244:	0003      	movs	r3, r0
 8006246:	001a      	movs	r2, r3
 8006248:	2314      	movs	r3, #20
 800624a:	18fb      	adds	r3, r7, r3
 800624c:	801a      	strh	r2, [r3, #0]
        break;
 800624e:	e03b      	b.n	80062c8 <UART_SetConfig+0x300>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	685b      	ldr	r3, [r3, #4]
 8006254:	085b      	lsrs	r3, r3, #1
 8006256:	4a40      	ldr	r2, [pc, #256]	; (8006358 <UART_SetConfig+0x390>)
 8006258:	189a      	adds	r2, r3, r2
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	685b      	ldr	r3, [r3, #4]
 800625e:	0019      	movs	r1, r3
 8006260:	0010      	movs	r0, r2
 8006262:	f7f9 ff51 	bl	8000108 <__udivsi3>
 8006266:	0003      	movs	r3, r0
 8006268:	001a      	movs	r2, r3
 800626a:	2314      	movs	r3, #20
 800626c:	18fb      	adds	r3, r7, r3
 800626e:	801a      	strh	r2, [r3, #0]
        break;
 8006270:	e02a      	b.n	80062c8 <UART_SetConfig+0x300>
      case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8006272:	f7fd fc57 	bl	8003b24 <HAL_RCC_GetSysClockFreq>
 8006276:	0003      	movs	r3, r0
 8006278:	005a      	lsls	r2, r3, #1
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	685b      	ldr	r3, [r3, #4]
 800627e:	085b      	lsrs	r3, r3, #1
 8006280:	18d2      	adds	r2, r2, r3
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	685b      	ldr	r3, [r3, #4]
 8006286:	0019      	movs	r1, r3
 8006288:	0010      	movs	r0, r2
 800628a:	f7f9 ff3d 	bl	8000108 <__udivsi3>
 800628e:	0003      	movs	r3, r0
 8006290:	001a      	movs	r2, r3
 8006292:	2314      	movs	r3, #20
 8006294:	18fb      	adds	r3, r7, r3
 8006296:	801a      	strh	r2, [r3, #0]
        break;
 8006298:	e016      	b.n	80062c8 <UART_SetConfig+0x300>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	685b      	ldr	r3, [r3, #4]
 800629e:	085b      	lsrs	r3, r3, #1
 80062a0:	2280      	movs	r2, #128	; 0x80
 80062a2:	0252      	lsls	r2, r2, #9
 80062a4:	189a      	adds	r2, r3, r2
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	685b      	ldr	r3, [r3, #4]
 80062aa:	0019      	movs	r1, r3
 80062ac:	0010      	movs	r0, r2
 80062ae:	f7f9 ff2b 	bl	8000108 <__udivsi3>
 80062b2:	0003      	movs	r3, r0
 80062b4:	001a      	movs	r2, r3
 80062b6:	2314      	movs	r3, #20
 80062b8:	18fb      	adds	r3, r7, r3
 80062ba:	801a      	strh	r2, [r3, #0]
        break;
 80062bc:	e004      	b.n	80062c8 <UART_SetConfig+0x300>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 80062be:	2313      	movs	r3, #19
 80062c0:	18fb      	adds	r3, r7, r3
 80062c2:	2201      	movs	r2, #1
 80062c4:	701a      	strb	r2, [r3, #0]
        break;
 80062c6:	46c0      	nop			; (mov r8, r8)
    }

    brrtemp = usartdiv & 0xFFF0U;
 80062c8:	200a      	movs	r0, #10
 80062ca:	183b      	adds	r3, r7, r0
 80062cc:	2414      	movs	r4, #20
 80062ce:	193a      	adds	r2, r7, r4
 80062d0:	8812      	ldrh	r2, [r2, #0]
 80062d2:	210f      	movs	r1, #15
 80062d4:	438a      	bics	r2, r1
 80062d6:	801a      	strh	r2, [r3, #0]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80062d8:	193b      	adds	r3, r7, r4
 80062da:	881b      	ldrh	r3, [r3, #0]
 80062dc:	105b      	asrs	r3, r3, #1
 80062de:	b29b      	uxth	r3, r3
 80062e0:	2207      	movs	r2, #7
 80062e2:	4013      	ands	r3, r2
 80062e4:	b299      	uxth	r1, r3
 80062e6:	183b      	adds	r3, r7, r0
 80062e8:	183a      	adds	r2, r7, r0
 80062ea:	8812      	ldrh	r2, [r2, #0]
 80062ec:	430a      	orrs	r2, r1
 80062ee:	801a      	strh	r2, [r3, #0]
    huart->Instance->BRR = brrtemp;
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	183a      	adds	r2, r7, r0
 80062f6:	8812      	ldrh	r2, [r2, #0]
 80062f8:	60da      	str	r2, [r3, #12]
 80062fa:	e07d      	b.n	80063f8 <UART_SetConfig+0x430>
  }
  else
  {
    switch (clocksource)
 80062fc:	2317      	movs	r3, #23
 80062fe:	18fb      	adds	r3, r7, r3
 8006300:	781b      	ldrb	r3, [r3, #0]
 8006302:	2b02      	cmp	r3, #2
 8006304:	d03d      	beq.n	8006382 <UART_SetConfig+0x3ba>
 8006306:	dc02      	bgt.n	800630e <UART_SetConfig+0x346>
 8006308:	2b00      	cmp	r3, #0
 800630a:	d027      	beq.n	800635c <UART_SetConfig+0x394>
 800630c:	e06f      	b.n	80063ee <UART_SetConfig+0x426>
 800630e:	2b04      	cmp	r3, #4
 8006310:	d048      	beq.n	80063a4 <UART_SetConfig+0x3dc>
 8006312:	2b08      	cmp	r3, #8
 8006314:	d059      	beq.n	80063ca <UART_SetConfig+0x402>
 8006316:	e06a      	b.n	80063ee <UART_SetConfig+0x426>
 8006318:	005b8d80 	.word	0x005b8d80
 800631c:	00000846 	.word	0x00000846
 8006320:	08006b90 	.word	0x08006b90
 8006324:	00000847 	.word	0x00000847
 8006328:	00000848 	.word	0x00000848
 800632c:	00000849 	.word	0x00000849
 8006330:	0000084a 	.word	0x0000084a
 8006334:	0000084b 	.word	0x0000084b
 8006338:	0000084c 	.word	0x0000084c
 800633c:	0000084d 	.word	0x0000084d
 8006340:	ffff69f3 	.word	0xffff69f3
 8006344:	ffffcfff 	.word	0xffffcfff
 8006348:	fffff4ff 	.word	0xfffff4ff
 800634c:	40013800 	.word	0x40013800
 8006350:	40021000 	.word	0x40021000
 8006354:	40004400 	.word	0x40004400
 8006358:	00f42400 	.word	0x00f42400
    {
      case UART_CLOCKSOURCE_PCLK1:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 800635c:	f7fd fc50 	bl	8003c00 <HAL_RCC_GetPCLK1Freq>
 8006360:	0002      	movs	r2, r0
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	685b      	ldr	r3, [r3, #4]
 8006366:	085b      	lsrs	r3, r3, #1
 8006368:	18d2      	adds	r2, r2, r3
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	685b      	ldr	r3, [r3, #4]
 800636e:	0019      	movs	r1, r3
 8006370:	0010      	movs	r0, r2
 8006372:	f7f9 fec9 	bl	8000108 <__udivsi3>
 8006376:	0003      	movs	r3, r0
 8006378:	b29a      	uxth	r2, r3
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	60da      	str	r2, [r3, #12]
        break;
 8006380:	e03a      	b.n	80063f8 <UART_SetConfig+0x430>
      case UART_CLOCKSOURCE_HSI:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	685b      	ldr	r3, [r3, #4]
 8006386:	085b      	lsrs	r3, r3, #1
 8006388:	4a1f      	ldr	r2, [pc, #124]	; (8006408 <UART_SetConfig+0x440>)
 800638a:	189a      	adds	r2, r3, r2
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	685b      	ldr	r3, [r3, #4]
 8006390:	0019      	movs	r1, r3
 8006392:	0010      	movs	r0, r2
 8006394:	f7f9 feb8 	bl	8000108 <__udivsi3>
 8006398:	0003      	movs	r3, r0
 800639a:	b29a      	uxth	r2, r3
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	60da      	str	r2, [r3, #12]
        break;
 80063a2:	e029      	b.n	80063f8 <UART_SetConfig+0x430>
      case UART_CLOCKSOURCE_SYSCLK:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 80063a4:	f7fd fbbe 	bl	8003b24 <HAL_RCC_GetSysClockFreq>
 80063a8:	0002      	movs	r2, r0
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	685b      	ldr	r3, [r3, #4]
 80063ae:	085b      	lsrs	r3, r3, #1
 80063b0:	18d2      	adds	r2, r2, r3
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	685b      	ldr	r3, [r3, #4]
 80063b6:	0019      	movs	r1, r3
 80063b8:	0010      	movs	r0, r2
 80063ba:	f7f9 fea5 	bl	8000108 <__udivsi3>
 80063be:	0003      	movs	r3, r0
 80063c0:	b29a      	uxth	r2, r3
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	60da      	str	r2, [r3, #12]
        break;
 80063c8:	e016      	b.n	80063f8 <UART_SetConfig+0x430>
      case UART_CLOCKSOURCE_LSE:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	685b      	ldr	r3, [r3, #4]
 80063ce:	085b      	lsrs	r3, r3, #1
 80063d0:	2280      	movs	r2, #128	; 0x80
 80063d2:	0212      	lsls	r2, r2, #8
 80063d4:	189a      	adds	r2, r3, r2
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	685b      	ldr	r3, [r3, #4]
 80063da:	0019      	movs	r1, r3
 80063dc:	0010      	movs	r0, r2
 80063de:	f7f9 fe93 	bl	8000108 <__udivsi3>
 80063e2:	0003      	movs	r3, r0
 80063e4:	b29a      	uxth	r2, r3
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	60da      	str	r2, [r3, #12]
        break;
 80063ec:	e004      	b.n	80063f8 <UART_SetConfig+0x430>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 80063ee:	2313      	movs	r3, #19
 80063f0:	18fb      	adds	r3, r7, r3
 80063f2:	2201      	movs	r2, #1
 80063f4:	701a      	strb	r2, [r3, #0]
        break;
 80063f6:	46c0      	nop			; (mov r8, r8)
    }
  }

  return ret;
 80063f8:	2313      	movs	r3, #19
 80063fa:	18fb      	adds	r3, r7, r3
 80063fc:	781b      	ldrb	r3, [r3, #0]

}
 80063fe:	0018      	movs	r0, r3
 8006400:	46bd      	mov	sp, r7
 8006402:	b007      	add	sp, #28
 8006404:	bd90      	pop	{r4, r7, pc}
 8006406:	46c0      	nop			; (mov r8, r8)
 8006408:	007a1200 	.word	0x007a1200

0800640c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800640c:	b580      	push	{r7, lr}
 800640e:	b082      	sub	sp, #8
 8006410:	af00      	add	r7, sp, #0
 8006412:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006418:	2bff      	cmp	r3, #255	; 0xff
 800641a:	d905      	bls.n	8006428 <UART_AdvFeatureConfig+0x1c>
 800641c:	4a9f      	ldr	r2, [pc, #636]	; (800669c <UART_AdvFeatureConfig+0x290>)
 800641e:	4ba0      	ldr	r3, [pc, #640]	; (80066a0 <UART_AdvFeatureConfig+0x294>)
 8006420:	0011      	movs	r1, r2
 8006422:	0018      	movs	r0, r3
 8006424:	f7fa faa3 	bl	800096e <assert_failed>

  /* if required, configure TX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800642c:	2201      	movs	r2, #1
 800642e:	4013      	ands	r3, r2
 8006430:	d01b      	beq.n	800646a <UART_AdvFeatureConfig+0x5e>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006436:	2b00      	cmp	r3, #0
 8006438:	d00b      	beq.n	8006452 <UART_AdvFeatureConfig+0x46>
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800643e:	2380      	movs	r3, #128	; 0x80
 8006440:	029b      	lsls	r3, r3, #10
 8006442:	429a      	cmp	r2, r3
 8006444:	d005      	beq.n	8006452 <UART_AdvFeatureConfig+0x46>
 8006446:	4a97      	ldr	r2, [pc, #604]	; (80066a4 <UART_AdvFeatureConfig+0x298>)
 8006448:	4b95      	ldr	r3, [pc, #596]	; (80066a0 <UART_AdvFeatureConfig+0x294>)
 800644a:	0011      	movs	r1, r2
 800644c:	0018      	movs	r0, r3
 800644e:	f7fa fa8e 	bl	800096e <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	685b      	ldr	r3, [r3, #4]
 8006458:	4a93      	ldr	r2, [pc, #588]	; (80066a8 <UART_AdvFeatureConfig+0x29c>)
 800645a:	4013      	ands	r3, r2
 800645c:	0019      	movs	r1, r3
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	430a      	orrs	r2, r1
 8006468:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800646e:	2202      	movs	r2, #2
 8006470:	4013      	ands	r3, r2
 8006472:	d01b      	beq.n	80064ac <UART_AdvFeatureConfig+0xa0>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006478:	2b00      	cmp	r3, #0
 800647a:	d00b      	beq.n	8006494 <UART_AdvFeatureConfig+0x88>
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006480:	2380      	movs	r3, #128	; 0x80
 8006482:	025b      	lsls	r3, r3, #9
 8006484:	429a      	cmp	r2, r3
 8006486:	d005      	beq.n	8006494 <UART_AdvFeatureConfig+0x88>
 8006488:	4a88      	ldr	r2, [pc, #544]	; (80066ac <UART_AdvFeatureConfig+0x2a0>)
 800648a:	4b85      	ldr	r3, [pc, #532]	; (80066a0 <UART_AdvFeatureConfig+0x294>)
 800648c:	0011      	movs	r1, r2
 800648e:	0018      	movs	r0, r3
 8006490:	f7fa fa6d 	bl	800096e <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	685b      	ldr	r3, [r3, #4]
 800649a:	4a85      	ldr	r2, [pc, #532]	; (80066b0 <UART_AdvFeatureConfig+0x2a4>)
 800649c:	4013      	ands	r3, r2
 800649e:	0019      	movs	r1, r3
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	430a      	orrs	r2, r1
 80064aa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064b0:	2204      	movs	r2, #4
 80064b2:	4013      	ands	r3, r2
 80064b4:	d01b      	beq.n	80064ee <UART_AdvFeatureConfig+0xe2>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	d00b      	beq.n	80064d6 <UART_AdvFeatureConfig+0xca>
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80064c2:	2380      	movs	r3, #128	; 0x80
 80064c4:	02db      	lsls	r3, r3, #11
 80064c6:	429a      	cmp	r2, r3
 80064c8:	d005      	beq.n	80064d6 <UART_AdvFeatureConfig+0xca>
 80064ca:	4a7a      	ldr	r2, [pc, #488]	; (80066b4 <UART_AdvFeatureConfig+0x2a8>)
 80064cc:	4b74      	ldr	r3, [pc, #464]	; (80066a0 <UART_AdvFeatureConfig+0x294>)
 80064ce:	0011      	movs	r1, r2
 80064d0:	0018      	movs	r0, r3
 80064d2:	f7fa fa4c 	bl	800096e <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	685b      	ldr	r3, [r3, #4]
 80064dc:	4a76      	ldr	r2, [pc, #472]	; (80066b8 <UART_AdvFeatureConfig+0x2ac>)
 80064de:	4013      	ands	r3, r2
 80064e0:	0019      	movs	r1, r3
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	430a      	orrs	r2, r1
 80064ec:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064f2:	2208      	movs	r2, #8
 80064f4:	4013      	ands	r3, r2
 80064f6:	d01b      	beq.n	8006530 <UART_AdvFeatureConfig+0x124>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80064fc:	2b00      	cmp	r3, #0
 80064fe:	d00b      	beq.n	8006518 <UART_AdvFeatureConfig+0x10c>
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006504:	2380      	movs	r3, #128	; 0x80
 8006506:	021b      	lsls	r3, r3, #8
 8006508:	429a      	cmp	r2, r3
 800650a:	d005      	beq.n	8006518 <UART_AdvFeatureConfig+0x10c>
 800650c:	4a6b      	ldr	r2, [pc, #428]	; (80066bc <UART_AdvFeatureConfig+0x2b0>)
 800650e:	4b64      	ldr	r3, [pc, #400]	; (80066a0 <UART_AdvFeatureConfig+0x294>)
 8006510:	0011      	movs	r1, r2
 8006512:	0018      	movs	r0, r3
 8006514:	f7fa fa2b 	bl	800096e <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	685b      	ldr	r3, [r3, #4]
 800651e:	4a68      	ldr	r2, [pc, #416]	; (80066c0 <UART_AdvFeatureConfig+0x2b4>)
 8006520:	4013      	ands	r3, r2
 8006522:	0019      	movs	r1, r3
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	430a      	orrs	r2, r1
 800652e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006534:	2210      	movs	r2, #16
 8006536:	4013      	ands	r3, r2
 8006538:	d01b      	beq.n	8006572 <UART_AdvFeatureConfig+0x166>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800653e:	2b00      	cmp	r3, #0
 8006540:	d00b      	beq.n	800655a <UART_AdvFeatureConfig+0x14e>
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006546:	2380      	movs	r3, #128	; 0x80
 8006548:	015b      	lsls	r3, r3, #5
 800654a:	429a      	cmp	r2, r3
 800654c:	d005      	beq.n	800655a <UART_AdvFeatureConfig+0x14e>
 800654e:	4a5d      	ldr	r2, [pc, #372]	; (80066c4 <UART_AdvFeatureConfig+0x2b8>)
 8006550:	4b53      	ldr	r3, [pc, #332]	; (80066a0 <UART_AdvFeatureConfig+0x294>)
 8006552:	0011      	movs	r1, r2
 8006554:	0018      	movs	r0, r3
 8006556:	f7fa fa0a 	bl	800096e <assert_failed>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	689b      	ldr	r3, [r3, #8]
 8006560:	4a59      	ldr	r2, [pc, #356]	; (80066c8 <UART_AdvFeatureConfig+0x2bc>)
 8006562:	4013      	ands	r3, r2
 8006564:	0019      	movs	r1, r3
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	430a      	orrs	r2, r1
 8006570:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006576:	2220      	movs	r2, #32
 8006578:	4013      	ands	r3, r2
 800657a:	d01b      	beq.n	80065b4 <UART_AdvFeatureConfig+0x1a8>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006580:	2b00      	cmp	r3, #0
 8006582:	d00b      	beq.n	800659c <UART_AdvFeatureConfig+0x190>
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006588:	2380      	movs	r3, #128	; 0x80
 800658a:	019b      	lsls	r3, r3, #6
 800658c:	429a      	cmp	r2, r3
 800658e:	d005      	beq.n	800659c <UART_AdvFeatureConfig+0x190>
 8006590:	4a4e      	ldr	r2, [pc, #312]	; (80066cc <UART_AdvFeatureConfig+0x2c0>)
 8006592:	4b43      	ldr	r3, [pc, #268]	; (80066a0 <UART_AdvFeatureConfig+0x294>)
 8006594:	0011      	movs	r1, r2
 8006596:	0018      	movs	r0, r3
 8006598:	f7fa f9e9 	bl	800096e <assert_failed>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	689b      	ldr	r3, [r3, #8]
 80065a2:	4a4b      	ldr	r2, [pc, #300]	; (80066d0 <UART_AdvFeatureConfig+0x2c4>)
 80065a4:	4013      	ands	r3, r2
 80065a6:	0019      	movs	r1, r3
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	430a      	orrs	r2, r1
 80065b2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065b8:	2240      	movs	r2, #64	; 0x40
 80065ba:	4013      	ands	r3, r2
 80065bc:	d048      	beq.n	8006650 <UART_AdvFeatureConfig+0x244>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	4a44      	ldr	r2, [pc, #272]	; (80066d4 <UART_AdvFeatureConfig+0x2c8>)
 80065c4:	4293      	cmp	r3, r2
 80065c6:	d005      	beq.n	80065d4 <UART_AdvFeatureConfig+0x1c8>
 80065c8:	4a43      	ldr	r2, [pc, #268]	; (80066d8 <UART_AdvFeatureConfig+0x2cc>)
 80065ca:	4b35      	ldr	r3, [pc, #212]	; (80066a0 <UART_AdvFeatureConfig+0x294>)
 80065cc:	0011      	movs	r1, r2
 80065ce:	0018      	movs	r0, r3
 80065d0:	f7fa f9cd 	bl	800096e <assert_failed>
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065d8:	2b00      	cmp	r3, #0
 80065da:	d00b      	beq.n	80065f4 <UART_AdvFeatureConfig+0x1e8>
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80065e0:	2380      	movs	r3, #128	; 0x80
 80065e2:	035b      	lsls	r3, r3, #13
 80065e4:	429a      	cmp	r2, r3
 80065e6:	d005      	beq.n	80065f4 <UART_AdvFeatureConfig+0x1e8>
 80065e8:	4a3c      	ldr	r2, [pc, #240]	; (80066dc <UART_AdvFeatureConfig+0x2d0>)
 80065ea:	4b2d      	ldr	r3, [pc, #180]	; (80066a0 <UART_AdvFeatureConfig+0x294>)
 80065ec:	0011      	movs	r1, r2
 80065ee:	0018      	movs	r0, r3
 80065f0:	f7fa f9bd 	bl	800096e <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	685b      	ldr	r3, [r3, #4]
 80065fa:	4a39      	ldr	r2, [pc, #228]	; (80066e0 <UART_AdvFeatureConfig+0x2d4>)
 80065fc:	4013      	ands	r3, r2
 80065fe:	0019      	movs	r1, r3
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	430a      	orrs	r2, r1
 800660a:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006610:	2380      	movs	r3, #128	; 0x80
 8006612:	035b      	lsls	r3, r3, #13
 8006614:	429a      	cmp	r2, r3
 8006616:	d11b      	bne.n	8006650 <UART_AdvFeatureConfig+0x244>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800661c:	2b00      	cmp	r3, #0
 800661e:	d00b      	beq.n	8006638 <UART_AdvFeatureConfig+0x22c>
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006624:	2380      	movs	r3, #128	; 0x80
 8006626:	039b      	lsls	r3, r3, #14
 8006628:	429a      	cmp	r2, r3
 800662a:	d005      	beq.n	8006638 <UART_AdvFeatureConfig+0x22c>
 800662c:	4a2d      	ldr	r2, [pc, #180]	; (80066e4 <UART_AdvFeatureConfig+0x2d8>)
 800662e:	4b1c      	ldr	r3, [pc, #112]	; (80066a0 <UART_AdvFeatureConfig+0x294>)
 8006630:	0011      	movs	r1, r2
 8006632:	0018      	movs	r0, r3
 8006634:	f7fa f99b 	bl	800096e <assert_failed>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	685b      	ldr	r3, [r3, #4]
 800663e:	4a2a      	ldr	r2, [pc, #168]	; (80066e8 <UART_AdvFeatureConfig+0x2dc>)
 8006640:	4013      	ands	r3, r2
 8006642:	0019      	movs	r1, r3
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	430a      	orrs	r2, r1
 800664e:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006654:	2280      	movs	r2, #128	; 0x80
 8006656:	4013      	ands	r3, r2
 8006658:	d01b      	beq.n	8006692 <UART_AdvFeatureConfig+0x286>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800665e:	2b00      	cmp	r3, #0
 8006660:	d00b      	beq.n	800667a <UART_AdvFeatureConfig+0x26e>
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006666:	2380      	movs	r3, #128	; 0x80
 8006668:	031b      	lsls	r3, r3, #12
 800666a:	429a      	cmp	r2, r3
 800666c:	d005      	beq.n	800667a <UART_AdvFeatureConfig+0x26e>
 800666e:	4a1f      	ldr	r2, [pc, #124]	; (80066ec <UART_AdvFeatureConfig+0x2e0>)
 8006670:	4b0b      	ldr	r3, [pc, #44]	; (80066a0 <UART_AdvFeatureConfig+0x294>)
 8006672:	0011      	movs	r1, r2
 8006674:	0018      	movs	r0, r3
 8006676:	f7fa f97a 	bl	800096e <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	685b      	ldr	r3, [r3, #4]
 8006680:	4a1b      	ldr	r2, [pc, #108]	; (80066f0 <UART_AdvFeatureConfig+0x2e4>)
 8006682:	4013      	ands	r3, r2
 8006684:	0019      	movs	r1, r3
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	430a      	orrs	r2, r1
 8006690:	605a      	str	r2, [r3, #4]
  }
}
 8006692:	46c0      	nop			; (mov r8, r8)
 8006694:	46bd      	mov	sp, r7
 8006696:	b002      	add	sp, #8
 8006698:	bd80      	pop	{r7, pc}
 800669a:	46c0      	nop			; (mov r8, r8)
 800669c:	000008a9 	.word	0x000008a9
 80066a0:	08006b90 	.word	0x08006b90
 80066a4:	000008ae 	.word	0x000008ae
 80066a8:	fffdffff 	.word	0xfffdffff
 80066ac:	000008b5 	.word	0x000008b5
 80066b0:	fffeffff 	.word	0xfffeffff
 80066b4:	000008bc 	.word	0x000008bc
 80066b8:	fffbffff 	.word	0xfffbffff
 80066bc:	000008c3 	.word	0x000008c3
 80066c0:	ffff7fff 	.word	0xffff7fff
 80066c4:	000008ca 	.word	0x000008ca
 80066c8:	ffffefff 	.word	0xffffefff
 80066cc:	000008d1 	.word	0x000008d1
 80066d0:	ffffdfff 	.word	0xffffdfff
 80066d4:	40013800 	.word	0x40013800
 80066d8:	000008d8 	.word	0x000008d8
 80066dc:	000008d9 	.word	0x000008d9
 80066e0:	ffefffff 	.word	0xffefffff
 80066e4:	000008de 	.word	0x000008de
 80066e8:	ff9fffff 	.word	0xff9fffff
 80066ec:	000008e6 	.word	0x000008e6
 80066f0:	fff7ffff 	.word	0xfff7ffff

080066f4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80066f4:	b580      	push	{r7, lr}
 80066f6:	b086      	sub	sp, #24
 80066f8:	af02      	add	r7, sp, #8
 80066fa:	6078      	str	r0, [r7, #4]
#if !defined(STM32F030x6) && !defined(STM32F030x8)&& !defined(STM32F070xB)&& !defined(STM32F070x6)&& !defined(STM32F030xC)
  uint32_t tickstart = 0U;
 80066fc:	2300      	movs	r3, #0
 80066fe:	60fb      	str	r3, [r7, #12]
#endif /* !defined(STM32F030x6) && !defined(STM32F030x8)&& !defined(STM32F070xB)&& !defined(STM32F070x6)&& !defined(STM32F030xC) */

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	2200      	movs	r2, #0
 8006704:	66da      	str	r2, [r3, #108]	; 0x6c

#if !defined(STM32F030x6) && !defined(STM32F030x8)&& !defined(STM32F070xB)&& !defined(STM32F070x6)&& !defined(STM32F030xC)
  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8006706:	f7fa ff8b 	bl	8001620 <HAL_GetTick>
 800670a:	0003      	movs	r3, r0
 800670c:	60fb      	str	r3, [r7, #12]

  /* TEACK and REACK bits in ISR are checked only when available (not available on all F0 devices).
     Bits are defined for some specific devices, and are available only for UART instances supporting WakeUp from Stop Mode feature. 
  */
  if (IS_UART_WAKEUP_FROMSTOP_INSTANCE(huart->Instance))
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	4a1f      	ldr	r2, [pc, #124]	; (8006790 <UART_CheckIdleState+0x9c>)
 8006714:	4293      	cmp	r3, r2
 8006716:	d129      	bne.n	800676c <UART_CheckIdleState+0x78>
  {
    /* Check if the Transmitter is enabled */
    if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	2208      	movs	r2, #8
 8006720:	4013      	ands	r3, r2
 8006722:	2b08      	cmp	r3, #8
 8006724:	d10d      	bne.n	8006742 <UART_CheckIdleState+0x4e>
    {
      /* Wait until TEACK flag is set */
      if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006726:	68fa      	ldr	r2, [r7, #12]
 8006728:	2380      	movs	r3, #128	; 0x80
 800672a:	0399      	lsls	r1, r3, #14
 800672c:	6878      	ldr	r0, [r7, #4]
 800672e:	4b19      	ldr	r3, [pc, #100]	; (8006794 <UART_CheckIdleState+0xa0>)
 8006730:	9300      	str	r3, [sp, #0]
 8006732:	0013      	movs	r3, r2
 8006734:	2200      	movs	r2, #0
 8006736:	f000 f82f 	bl	8006798 <UART_WaitOnFlagUntilTimeout>
 800673a:	1e03      	subs	r3, r0, #0
 800673c:	d001      	beq.n	8006742 <UART_CheckIdleState+0x4e>
      {
        /* Timeout occurred */
        return HAL_TIMEOUT;
 800673e:	2303      	movs	r3, #3
 8006740:	e021      	b.n	8006786 <UART_CheckIdleState+0x92>
      }
    }

    /* Check if the Receiver is enabled */
    if((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	2204      	movs	r2, #4
 800674a:	4013      	ands	r3, r2
 800674c:	2b04      	cmp	r3, #4
 800674e:	d10d      	bne.n	800676c <UART_CheckIdleState+0x78>
    {
      /* Wait until REACK flag is set */
      if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006750:	68fa      	ldr	r2, [r7, #12]
 8006752:	2380      	movs	r3, #128	; 0x80
 8006754:	03d9      	lsls	r1, r3, #15
 8006756:	6878      	ldr	r0, [r7, #4]
 8006758:	4b0e      	ldr	r3, [pc, #56]	; (8006794 <UART_CheckIdleState+0xa0>)
 800675a:	9300      	str	r3, [sp, #0]
 800675c:	0013      	movs	r3, r2
 800675e:	2200      	movs	r2, #0
 8006760:	f000 f81a 	bl	8006798 <UART_WaitOnFlagUntilTimeout>
 8006764:	1e03      	subs	r3, r0, #0
 8006766:	d001      	beq.n	800676c <UART_CheckIdleState+0x78>
      {
        /* Timeout occurred */
        return HAL_TIMEOUT;
 8006768:	2303      	movs	r3, #3
 800676a:	e00c      	b.n	8006786 <UART_CheckIdleState+0x92>
    }
  }
#endif /* !defined(STM32F030x6) && !defined(STM32F030x8)&& !defined(STM32F070xB)&& !defined(STM32F070x6)&& !defined(STM32F030xC) */

  /* Initialize the UART State */
  huart->gState  = HAL_UART_STATE_READY;
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	2269      	movs	r2, #105	; 0x69
 8006770:	2120      	movs	r1, #32
 8006772:	5499      	strb	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	226a      	movs	r2, #106	; 0x6a
 8006778:	2120      	movs	r1, #32
 800677a:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	2268      	movs	r2, #104	; 0x68
 8006780:	2100      	movs	r1, #0
 8006782:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006784:	2300      	movs	r3, #0
}
 8006786:	0018      	movs	r0, r3
 8006788:	46bd      	mov	sp, r7
 800678a:	b004      	add	sp, #16
 800678c:	bd80      	pop	{r7, pc}
 800678e:	46c0      	nop			; (mov r8, r8)
 8006790:	40013800 	.word	0x40013800
 8006794:	01ffffff 	.word	0x01ffffff

08006798 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8006798:	b580      	push	{r7, lr}
 800679a:	b084      	sub	sp, #16
 800679c:	af00      	add	r7, sp, #0
 800679e:	60f8      	str	r0, [r7, #12]
 80067a0:	60b9      	str	r1, [r7, #8]
 80067a2:	603b      	str	r3, [r7, #0]
 80067a4:	1dfb      	adds	r3, r7, #7
 80067a6:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80067a8:	e02b      	b.n	8006802 <UART_WaitOnFlagUntilTimeout+0x6a>
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 80067aa:	69bb      	ldr	r3, [r7, #24]
 80067ac:	3301      	adds	r3, #1
 80067ae:	d028      	beq.n	8006802 <UART_WaitOnFlagUntilTimeout+0x6a>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 80067b0:	69bb      	ldr	r3, [r7, #24]
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	d007      	beq.n	80067c6 <UART_WaitOnFlagUntilTimeout+0x2e>
 80067b6:	f7fa ff33 	bl	8001620 <HAL_GetTick>
 80067ba:	0002      	movs	r2, r0
 80067bc:	683b      	ldr	r3, [r7, #0]
 80067be:	1ad3      	subs	r3, r2, r3
 80067c0:	69ba      	ldr	r2, [r7, #24]
 80067c2:	429a      	cmp	r2, r3
 80067c4:	d21d      	bcs.n	8006802 <UART_WaitOnFlagUntilTimeout+0x6a>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80067c6:	68fb      	ldr	r3, [r7, #12]
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	681a      	ldr	r2, [r3, #0]
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	4916      	ldr	r1, [pc, #88]	; (800682c <UART_WaitOnFlagUntilTimeout+0x94>)
 80067d2:	400a      	ands	r2, r1
 80067d4:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	689a      	ldr	r2, [r3, #8]
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	2101      	movs	r1, #1
 80067e2:	438a      	bics	r2, r1
 80067e4:	609a      	str	r2, [r3, #8]

        huart->gState  = HAL_UART_STATE_READY;
 80067e6:	68fb      	ldr	r3, [r7, #12]
 80067e8:	2269      	movs	r2, #105	; 0x69
 80067ea:	2120      	movs	r1, #32
 80067ec:	5499      	strb	r1, [r3, r2]
        huart->RxState = HAL_UART_STATE_READY;
 80067ee:	68fb      	ldr	r3, [r7, #12]
 80067f0:	226a      	movs	r2, #106	; 0x6a
 80067f2:	2120      	movs	r1, #32
 80067f4:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	2268      	movs	r2, #104	; 0x68
 80067fa:	2100      	movs	r1, #0
 80067fc:	5499      	strb	r1, [r3, r2]
        return HAL_TIMEOUT;
 80067fe:	2303      	movs	r3, #3
 8006800:	e00f      	b.n	8006822 <UART_WaitOnFlagUntilTimeout+0x8a>
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006802:	68fb      	ldr	r3, [r7, #12]
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	69db      	ldr	r3, [r3, #28]
 8006808:	68ba      	ldr	r2, [r7, #8]
 800680a:	4013      	ands	r3, r2
 800680c:	68ba      	ldr	r2, [r7, #8]
 800680e:	1ad3      	subs	r3, r2, r3
 8006810:	425a      	negs	r2, r3
 8006812:	4153      	adcs	r3, r2
 8006814:	b2db      	uxtb	r3, r3
 8006816:	001a      	movs	r2, r3
 8006818:	1dfb      	adds	r3, r7, #7
 800681a:	781b      	ldrb	r3, [r3, #0]
 800681c:	429a      	cmp	r2, r3
 800681e:	d0c4      	beq.n	80067aa <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006820:	2300      	movs	r3, #0
}
 8006822:	0018      	movs	r0, r3
 8006824:	46bd      	mov	sp, r7
 8006826:	b004      	add	sp, #16
 8006828:	bd80      	pop	{r7, pc}
 800682a:	46c0      	nop			; (mov r8, r8)
 800682c:	fffffe5f 	.word	0xfffffe5f

08006830 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8006830:	480d      	ldr	r0, [pc, #52]	; (8006868 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8006832:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8006834:	480d      	ldr	r0, [pc, #52]	; (800686c <LoopForever+0x6>)
  ldr r1, =_edata
 8006836:	490e      	ldr	r1, [pc, #56]	; (8006870 <LoopForever+0xa>)
  ldr r2, =_sidata
 8006838:	4a0e      	ldr	r2, [pc, #56]	; (8006874 <LoopForever+0xe>)
  movs r3, #0
 800683a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800683c:	e002      	b.n	8006844 <LoopCopyDataInit>

0800683e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800683e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8006840:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8006842:	3304      	adds	r3, #4

08006844 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8006844:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8006846:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8006848:	d3f9      	bcc.n	800683e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800684a:	4a0b      	ldr	r2, [pc, #44]	; (8006878 <LoopForever+0x12>)
  ldr r4, =_ebss
 800684c:	4c0b      	ldr	r4, [pc, #44]	; (800687c <LoopForever+0x16>)
  movs r3, #0
 800684e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8006850:	e001      	b.n	8006856 <LoopFillZerobss>

08006852 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8006852:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8006854:	3204      	adds	r2, #4

08006856 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8006856:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8006858:	d3fb      	bcc.n	8006852 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 800685a:	f7fa f93f 	bl	8000adc <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 800685e:	f000 f811 	bl	8006884 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8006862:	f7f9 ffcb 	bl	80007fc <main>

08006866 <LoopForever>:

LoopForever:
    b LoopForever
 8006866:	e7fe      	b.n	8006866 <LoopForever>
  ldr   r0, =_estack
 8006868:	20001fff 	.word	0x20001fff
  ldr r0, =_sdata
 800686c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8006870:	200003c8 	.word	0x200003c8
  ldr r2, =_sidata
 8006874:	08006bec 	.word	0x08006bec
  ldr r2, =_sbss
 8006878:	200003c8 	.word	0x200003c8
  ldr r4, =_ebss
 800687c:	20000648 	.word	0x20000648

08006880 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8006880:	e7fe      	b.n	8006880 <ADC1_COMP_IRQHandler>
	...

08006884 <__libc_init_array>:
 8006884:	b570      	push	{r4, r5, r6, lr}
 8006886:	2600      	movs	r6, #0
 8006888:	4d0c      	ldr	r5, [pc, #48]	; (80068bc <__libc_init_array+0x38>)
 800688a:	4c0d      	ldr	r4, [pc, #52]	; (80068c0 <__libc_init_array+0x3c>)
 800688c:	1b64      	subs	r4, r4, r5
 800688e:	10a4      	asrs	r4, r4, #2
 8006890:	42a6      	cmp	r6, r4
 8006892:	d109      	bne.n	80068a8 <__libc_init_array+0x24>
 8006894:	2600      	movs	r6, #0
 8006896:	f000 f821 	bl	80068dc <_init>
 800689a:	4d0a      	ldr	r5, [pc, #40]	; (80068c4 <__libc_init_array+0x40>)
 800689c:	4c0a      	ldr	r4, [pc, #40]	; (80068c8 <__libc_init_array+0x44>)
 800689e:	1b64      	subs	r4, r4, r5
 80068a0:	10a4      	asrs	r4, r4, #2
 80068a2:	42a6      	cmp	r6, r4
 80068a4:	d105      	bne.n	80068b2 <__libc_init_array+0x2e>
 80068a6:	bd70      	pop	{r4, r5, r6, pc}
 80068a8:	00b3      	lsls	r3, r6, #2
 80068aa:	58eb      	ldr	r3, [r5, r3]
 80068ac:	4798      	blx	r3
 80068ae:	3601      	adds	r6, #1
 80068b0:	e7ee      	b.n	8006890 <__libc_init_array+0xc>
 80068b2:	00b3      	lsls	r3, r6, #2
 80068b4:	58eb      	ldr	r3, [r5, r3]
 80068b6:	4798      	blx	r3
 80068b8:	3601      	adds	r6, #1
 80068ba:	e7f2      	b.n	80068a2 <__libc_init_array+0x1e>
 80068bc:	08006be4 	.word	0x08006be4
 80068c0:	08006be4 	.word	0x08006be4
 80068c4:	08006be4 	.word	0x08006be4
 80068c8:	08006be8 	.word	0x08006be8

080068cc <memset>:
 80068cc:	0003      	movs	r3, r0
 80068ce:	1812      	adds	r2, r2, r0
 80068d0:	4293      	cmp	r3, r2
 80068d2:	d100      	bne.n	80068d6 <memset+0xa>
 80068d4:	4770      	bx	lr
 80068d6:	7019      	strb	r1, [r3, #0]
 80068d8:	3301      	adds	r3, #1
 80068da:	e7f9      	b.n	80068d0 <memset+0x4>

080068dc <_init>:
 80068dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80068de:	46c0      	nop			; (mov r8, r8)
 80068e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80068e2:	bc08      	pop	{r3}
 80068e4:	469e      	mov	lr, r3
 80068e6:	4770      	bx	lr

080068e8 <_fini>:
 80068e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80068ea:	46c0      	nop			; (mov r8, r8)
 80068ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80068ee:	bc08      	pop	{r3}
 80068f0:	469e      	mov	lr, r3
 80068f2:	4770      	bx	lr
