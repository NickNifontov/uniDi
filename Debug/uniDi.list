
uniDi.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006e3c  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002f0  08006efc  08006efc  00016efc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080071ec  080071ec  000203cc  2**0
                  CONTENTS
  4 .ARM          00000000  080071ec  080071ec  000203cc  2**0
                  CONTENTS
  5 .preinit_array 00000000  080071ec  080071ec  000203cc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080071ec  080071ec  000171ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080071f0  080071f0  000171f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000003cc  20000000  080071f4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002a8  200003cc  080075c0  000203cc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000674  080075c0  00020674  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  000203cc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001f78d  00000000  00000000  000203f4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000400d  00000000  00000000  0003fb81  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000fc0  00000000  00000000  00043b90  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000dd8  00000000  00000000  00044b50  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000142ed  00000000  00000000  00045928  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00016f2f  00000000  00000000  00059c15  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0005b5cd  00000000  00000000  00070b44  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000cc111  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003488  00000000  00000000  000cc18c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	200003cc 	.word	0x200003cc
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08006ee4 	.word	0x08006ee4

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	200003d0 	.word	0x200003d0
 8000104:	08006ee4 	.word	0x08006ee4

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <MX_ADC_Init>:
ADC_HandleTypeDef hadc;
DMA_HandleTypeDef hdma_adc;

/* ADC init function */
void MX_ADC_Init(void)
{
 8000220:	b580      	push	{r7, lr}
 8000222:	b084      	sub	sp, #16
 8000224:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 8000226:	1d3b      	adds	r3, r7, #4
 8000228:	0018      	movs	r0, r3
 800022a:	230c      	movs	r3, #12
 800022c:	001a      	movs	r2, r3
 800022e:	2100      	movs	r1, #0
 8000230:	f006 fe50 	bl	8006ed4 <memset>

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc.Instance = ADC1;
 8000234:	4b3f      	ldr	r3, [pc, #252]	; (8000334 <MX_ADC_Init+0x114>)
 8000236:	4a40      	ldr	r2, [pc, #256]	; (8000338 <MX_ADC_Init+0x118>)
 8000238:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800023a:	4b3e      	ldr	r3, [pc, #248]	; (8000334 <MX_ADC_Init+0x114>)
 800023c:	2200      	movs	r2, #0
 800023e:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8000240:	4b3c      	ldr	r3, [pc, #240]	; (8000334 <MX_ADC_Init+0x114>)
 8000242:	2200      	movs	r2, #0
 8000244:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000246:	4b3b      	ldr	r3, [pc, #236]	; (8000334 <MX_ADC_Init+0x114>)
 8000248:	2200      	movs	r2, #0
 800024a:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 800024c:	4b39      	ldr	r3, [pc, #228]	; (8000334 <MX_ADC_Init+0x114>)
 800024e:	2201      	movs	r2, #1
 8000250:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000252:	4b38      	ldr	r3, [pc, #224]	; (8000334 <MX_ADC_Init+0x114>)
 8000254:	2204      	movs	r2, #4
 8000256:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = DISABLE;
 8000258:	4b36      	ldr	r3, [pc, #216]	; (8000334 <MX_ADC_Init+0x114>)
 800025a:	2200      	movs	r2, #0
 800025c:	619a      	str	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 800025e:	4b35      	ldr	r3, [pc, #212]	; (8000334 <MX_ADC_Init+0x114>)
 8000260:	2200      	movs	r2, #0
 8000262:	61da      	str	r2, [r3, #28]
  hadc.Init.ContinuousConvMode = ENABLE;
 8000264:	4b33      	ldr	r3, [pc, #204]	; (8000334 <MX_ADC_Init+0x114>)
 8000266:	2201      	movs	r2, #1
 8000268:	621a      	str	r2, [r3, #32]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 800026a:	4b32      	ldr	r3, [pc, #200]	; (8000334 <MX_ADC_Init+0x114>)
 800026c:	2200      	movs	r2, #0
 800026e:	625a      	str	r2, [r3, #36]	; 0x24
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000270:	4b30      	ldr	r3, [pc, #192]	; (8000334 <MX_ADC_Init+0x114>)
 8000272:	22c2      	movs	r2, #194	; 0xc2
 8000274:	32ff      	adds	r2, #255	; 0xff
 8000276:	629a      	str	r2, [r3, #40]	; 0x28
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000278:	4b2e      	ldr	r3, [pc, #184]	; (8000334 <MX_ADC_Init+0x114>)
 800027a:	2200      	movs	r2, #0
 800027c:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc.Init.DMAContinuousRequests = ENABLE;
 800027e:	4b2d      	ldr	r3, [pc, #180]	; (8000334 <MX_ADC_Init+0x114>)
 8000280:	2201      	movs	r2, #1
 8000282:	631a      	str	r2, [r3, #48]	; 0x30
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000284:	4b2b      	ldr	r3, [pc, #172]	; (8000334 <MX_ADC_Init+0x114>)
 8000286:	2201      	movs	r2, #1
 8000288:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 800028a:	4b2a      	ldr	r3, [pc, #168]	; (8000334 <MX_ADC_Init+0x114>)
 800028c:	0018      	movs	r0, r3
 800028e:	f001 faab 	bl	80017e8 <HAL_ADC_Init>
 8000292:	1e03      	subs	r3, r0, #0
 8000294:	d001      	beq.n	800029a <MX_ADC_Init+0x7a>
  {
    Error_Handler();
 8000296:	f000 fb67 	bl	8000968 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted. 
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800029a:	1d3b      	adds	r3, r7, #4
 800029c:	2201      	movs	r2, #1
 800029e:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 80002a0:	1d3b      	adds	r3, r7, #4
 80002a2:	2280      	movs	r2, #128	; 0x80
 80002a4:	0152      	lsls	r2, r2, #5
 80002a6:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 80002a8:	1d3b      	adds	r3, r7, #4
 80002aa:	2207      	movs	r2, #7
 80002ac:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80002ae:	1d3a      	adds	r2, r7, #4
 80002b0:	4b20      	ldr	r3, [pc, #128]	; (8000334 <MX_ADC_Init+0x114>)
 80002b2:	0011      	movs	r1, r2
 80002b4:	0018      	movs	r0, r3
 80002b6:	f001 fd85 	bl	8001dc4 <HAL_ADC_ConfigChannel>
 80002ba:	1e03      	subs	r3, r0, #0
 80002bc:	d001      	beq.n	80002c2 <MX_ADC_Init+0xa2>
  {
    Error_Handler();
 80002be:	f000 fb53 	bl	8000968 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted. 
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80002c2:	1d3b      	adds	r3, r7, #4
 80002c4:	2203      	movs	r2, #3
 80002c6:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80002c8:	1d3a      	adds	r2, r7, #4
 80002ca:	4b1a      	ldr	r3, [pc, #104]	; (8000334 <MX_ADC_Init+0x114>)
 80002cc:	0011      	movs	r1, r2
 80002ce:	0018      	movs	r0, r3
 80002d0:	f001 fd78 	bl	8001dc4 <HAL_ADC_ConfigChannel>
 80002d4:	1e03      	subs	r3, r0, #0
 80002d6:	d001      	beq.n	80002dc <MX_ADC_Init+0xbc>
  {
    Error_Handler();
 80002d8:	f000 fb46 	bl	8000968 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted. 
  */
  sConfig.Channel = ADC_CHANNEL_5;
 80002dc:	1d3b      	adds	r3, r7, #4
 80002de:	2205      	movs	r2, #5
 80002e0:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80002e2:	1d3a      	adds	r2, r7, #4
 80002e4:	4b13      	ldr	r3, [pc, #76]	; (8000334 <MX_ADC_Init+0x114>)
 80002e6:	0011      	movs	r1, r2
 80002e8:	0018      	movs	r0, r3
 80002ea:	f001 fd6b 	bl	8001dc4 <HAL_ADC_ConfigChannel>
 80002ee:	1e03      	subs	r3, r0, #0
 80002f0:	d001      	beq.n	80002f6 <MX_ADC_Init+0xd6>
  {
    Error_Handler();
 80002f2:	f000 fb39 	bl	8000968 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted. 
  */
  sConfig.Channel = ADC_CHANNEL_6;
 80002f6:	1d3b      	adds	r3, r7, #4
 80002f8:	2206      	movs	r2, #6
 80002fa:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80002fc:	1d3a      	adds	r2, r7, #4
 80002fe:	4b0d      	ldr	r3, [pc, #52]	; (8000334 <MX_ADC_Init+0x114>)
 8000300:	0011      	movs	r1, r2
 8000302:	0018      	movs	r0, r3
 8000304:	f001 fd5e 	bl	8001dc4 <HAL_ADC_ConfigChannel>
 8000308:	1e03      	subs	r3, r0, #0
 800030a:	d001      	beq.n	8000310 <MX_ADC_Init+0xf0>
  {
    Error_Handler();
 800030c:	f000 fb2c 	bl	8000968 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted. 
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8000310:	1d3b      	adds	r3, r7, #4
 8000312:	2207      	movs	r2, #7
 8000314:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000316:	1d3a      	adds	r2, r7, #4
 8000318:	4b06      	ldr	r3, [pc, #24]	; (8000334 <MX_ADC_Init+0x114>)
 800031a:	0011      	movs	r1, r2
 800031c:	0018      	movs	r0, r3
 800031e:	f001 fd51 	bl	8001dc4 <HAL_ADC_ConfigChannel>
 8000322:	1e03      	subs	r3, r0, #0
 8000324:	d001      	beq.n	800032a <MX_ADC_Init+0x10a>
  {
    Error_Handler();
 8000326:	f000 fb1f 	bl	8000968 <Error_Handler>
  }

}
 800032a:	46c0      	nop			; (mov r8, r8)
 800032c:	46bd      	mov	sp, r7
 800032e:	b004      	add	sp, #16
 8000330:	bd80      	pop	{r7, pc}
 8000332:	46c0      	nop			; (mov r8, r8)
 8000334:	20000440 	.word	0x20000440
 8000338:	40012400 	.word	0x40012400

0800033c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 800033c:	b580      	push	{r7, lr}
 800033e:	b08a      	sub	sp, #40	; 0x28
 8000340:	af00      	add	r7, sp, #0
 8000342:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000344:	2314      	movs	r3, #20
 8000346:	18fb      	adds	r3, r7, r3
 8000348:	0018      	movs	r0, r3
 800034a:	2314      	movs	r3, #20
 800034c:	001a      	movs	r2, r3
 800034e:	2100      	movs	r1, #0
 8000350:	f006 fdc0 	bl	8006ed4 <memset>
  if(adcHandle->Instance==ADC1)
 8000354:	687b      	ldr	r3, [r7, #4]
 8000356:	681b      	ldr	r3, [r3, #0]
 8000358:	4a2e      	ldr	r2, [pc, #184]	; (8000414 <HAL_ADC_MspInit+0xd8>)
 800035a:	4293      	cmp	r3, r2
 800035c:	d155      	bne.n	800040a <HAL_ADC_MspInit+0xce>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800035e:	4b2e      	ldr	r3, [pc, #184]	; (8000418 <HAL_ADC_MspInit+0xdc>)
 8000360:	699a      	ldr	r2, [r3, #24]
 8000362:	4b2d      	ldr	r3, [pc, #180]	; (8000418 <HAL_ADC_MspInit+0xdc>)
 8000364:	2180      	movs	r1, #128	; 0x80
 8000366:	0089      	lsls	r1, r1, #2
 8000368:	430a      	orrs	r2, r1
 800036a:	619a      	str	r2, [r3, #24]
 800036c:	4b2a      	ldr	r3, [pc, #168]	; (8000418 <HAL_ADC_MspInit+0xdc>)
 800036e:	699a      	ldr	r2, [r3, #24]
 8000370:	2380      	movs	r3, #128	; 0x80
 8000372:	009b      	lsls	r3, r3, #2
 8000374:	4013      	ands	r3, r2
 8000376:	613b      	str	r3, [r7, #16]
 8000378:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800037a:	4b27      	ldr	r3, [pc, #156]	; (8000418 <HAL_ADC_MspInit+0xdc>)
 800037c:	695a      	ldr	r2, [r3, #20]
 800037e:	4b26      	ldr	r3, [pc, #152]	; (8000418 <HAL_ADC_MspInit+0xdc>)
 8000380:	2180      	movs	r1, #128	; 0x80
 8000382:	0289      	lsls	r1, r1, #10
 8000384:	430a      	orrs	r2, r1
 8000386:	615a      	str	r2, [r3, #20]
 8000388:	4b23      	ldr	r3, [pc, #140]	; (8000418 <HAL_ADC_MspInit+0xdc>)
 800038a:	695a      	ldr	r2, [r3, #20]
 800038c:	2380      	movs	r3, #128	; 0x80
 800038e:	029b      	lsls	r3, r3, #10
 8000390:	4013      	ands	r3, r2
 8000392:	60fb      	str	r3, [r7, #12]
 8000394:	68fb      	ldr	r3, [r7, #12]
    PA3     ------> ADC_IN3
    PA6     ------> ADC_IN6
    PA1     ------> ADC_IN1
    PA7     ------> ADC_IN7 
    */
    GPIO_InitStruct.Pin = POLKA_Pin|OC_I_Pin|KLAPAN_Pin|OC_V_Pin 
 8000396:	2114      	movs	r1, #20
 8000398:	187b      	adds	r3, r7, r1
 800039a:	22ea      	movs	r2, #234	; 0xea
 800039c:	601a      	str	r2, [r3, #0]
                          |ZERO_WIEN_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800039e:	187b      	adds	r3, r7, r1
 80003a0:	2203      	movs	r2, #3
 80003a2:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003a4:	187b      	adds	r3, r7, r1
 80003a6:	2200      	movs	r2, #0
 80003a8:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80003aa:	187a      	adds	r2, r7, r1
 80003ac:	2390      	movs	r3, #144	; 0x90
 80003ae:	05db      	lsls	r3, r3, #23
 80003b0:	0011      	movs	r1, r2
 80003b2:	0018      	movs	r0, r3
 80003b4:	f002 fd5a 	bl	8002e6c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC Init */
    hdma_adc.Instance = DMA1_Channel1;
 80003b8:	4b18      	ldr	r3, [pc, #96]	; (800041c <HAL_ADC_MspInit+0xe0>)
 80003ba:	4a19      	ldr	r2, [pc, #100]	; (8000420 <HAL_ADC_MspInit+0xe4>)
 80003bc:	601a      	str	r2, [r3, #0]
    hdma_adc.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80003be:	4b17      	ldr	r3, [pc, #92]	; (800041c <HAL_ADC_MspInit+0xe0>)
 80003c0:	2200      	movs	r2, #0
 80003c2:	605a      	str	r2, [r3, #4]
    hdma_adc.Init.PeriphInc = DMA_PINC_DISABLE;
 80003c4:	4b15      	ldr	r3, [pc, #84]	; (800041c <HAL_ADC_MspInit+0xe0>)
 80003c6:	2200      	movs	r2, #0
 80003c8:	609a      	str	r2, [r3, #8]
    hdma_adc.Init.MemInc = DMA_MINC_ENABLE;
 80003ca:	4b14      	ldr	r3, [pc, #80]	; (800041c <HAL_ADC_MspInit+0xe0>)
 80003cc:	2280      	movs	r2, #128	; 0x80
 80003ce:	60da      	str	r2, [r3, #12]
    hdma_adc.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80003d0:	4b12      	ldr	r3, [pc, #72]	; (800041c <HAL_ADC_MspInit+0xe0>)
 80003d2:	2280      	movs	r2, #128	; 0x80
 80003d4:	0052      	lsls	r2, r2, #1
 80003d6:	611a      	str	r2, [r3, #16]
    hdma_adc.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80003d8:	4b10      	ldr	r3, [pc, #64]	; (800041c <HAL_ADC_MspInit+0xe0>)
 80003da:	2280      	movs	r2, #128	; 0x80
 80003dc:	00d2      	lsls	r2, r2, #3
 80003de:	615a      	str	r2, [r3, #20]
    hdma_adc.Init.Mode = DMA_CIRCULAR;
 80003e0:	4b0e      	ldr	r3, [pc, #56]	; (800041c <HAL_ADC_MspInit+0xe0>)
 80003e2:	2220      	movs	r2, #32
 80003e4:	619a      	str	r2, [r3, #24]
    hdma_adc.Init.Priority = DMA_PRIORITY_MEDIUM;
 80003e6:	4b0d      	ldr	r3, [pc, #52]	; (800041c <HAL_ADC_MspInit+0xe0>)
 80003e8:	2280      	movs	r2, #128	; 0x80
 80003ea:	0152      	lsls	r2, r2, #5
 80003ec:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc) != HAL_OK)
 80003ee:	4b0b      	ldr	r3, [pc, #44]	; (800041c <HAL_ADC_MspInit+0xe0>)
 80003f0:	0018      	movs	r0, r3
 80003f2:	f002 fadb 	bl	80029ac <HAL_DMA_Init>
 80003f6:	1e03      	subs	r3, r0, #0
 80003f8:	d001      	beq.n	80003fe <HAL_ADC_MspInit+0xc2>
    {
      Error_Handler();
 80003fa:	f000 fab5 	bl	8000968 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc);
 80003fe:	687b      	ldr	r3, [r7, #4]
 8000400:	4a06      	ldr	r2, [pc, #24]	; (800041c <HAL_ADC_MspInit+0xe0>)
 8000402:	63da      	str	r2, [r3, #60]	; 0x3c
 8000404:	4b05      	ldr	r3, [pc, #20]	; (800041c <HAL_ADC_MspInit+0xe0>)
 8000406:	687a      	ldr	r2, [r7, #4]
 8000408:	625a      	str	r2, [r3, #36]	; 0x24

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 800040a:	46c0      	nop			; (mov r8, r8)
 800040c:	46bd      	mov	sp, r7
 800040e:	b00a      	add	sp, #40	; 0x28
 8000410:	bd80      	pop	{r7, pc}
 8000412:	46c0      	nop			; (mov r8, r8)
 8000414:	40012400 	.word	0x40012400
 8000418:	40021000 	.word	0x40021000
 800041c:	200003fc 	.word	0x200003fc
 8000420:	40020008 	.word	0x40020008

08000424 <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 8000424:	b580      	push	{r7, lr}
 8000426:	af00      	add	r7, sp, #0

  hcrc.Instance = CRC;
 8000428:	4b0e      	ldr	r3, [pc, #56]	; (8000464 <MX_CRC_Init+0x40>)
 800042a:	4a0f      	ldr	r2, [pc, #60]	; (8000468 <MX_CRC_Init+0x44>)
 800042c:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 800042e:	4b0d      	ldr	r3, [pc, #52]	; (8000464 <MX_CRC_Init+0x40>)
 8000430:	2200      	movs	r2, #0
 8000432:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 8000434:	4b0b      	ldr	r3, [pc, #44]	; (8000464 <MX_CRC_Init+0x40>)
 8000436:	2200      	movs	r2, #0
 8000438:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 800043a:	4b0a      	ldr	r3, [pc, #40]	; (8000464 <MX_CRC_Init+0x40>)
 800043c:	2200      	movs	r2, #0
 800043e:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8000440:	4b08      	ldr	r3, [pc, #32]	; (8000464 <MX_CRC_Init+0x40>)
 8000442:	2200      	movs	r2, #0
 8000444:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8000446:	4b07      	ldr	r3, [pc, #28]	; (8000464 <MX_CRC_Init+0x40>)
 8000448:	2201      	movs	r2, #1
 800044a:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 800044c:	4b05      	ldr	r3, [pc, #20]	; (8000464 <MX_CRC_Init+0x40>)
 800044e:	0018      	movs	r0, r3
 8000450:	f002 f866 	bl	8002520 <HAL_CRC_Init>
 8000454:	1e03      	subs	r3, r0, #0
 8000456:	d001      	beq.n	800045c <MX_CRC_Init+0x38>
  {
    Error_Handler();
 8000458:	f000 fa86 	bl	8000968 <Error_Handler>
  }

}
 800045c:	46c0      	nop			; (mov r8, r8)
 800045e:	46bd      	mov	sp, r7
 8000460:	bd80      	pop	{r7, pc}
 8000462:	46c0      	nop			; (mov r8, r8)
 8000464:	2000048c 	.word	0x2000048c
 8000468:	40023000 	.word	0x40023000

0800046c <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{
 800046c:	b580      	push	{r7, lr}
 800046e:	b084      	sub	sp, #16
 8000470:	af00      	add	r7, sp, #0
 8000472:	6078      	str	r0, [r7, #4]

  if(crcHandle->Instance==CRC)
 8000474:	687b      	ldr	r3, [r7, #4]
 8000476:	681b      	ldr	r3, [r3, #0]
 8000478:	4a09      	ldr	r2, [pc, #36]	; (80004a0 <HAL_CRC_MspInit+0x34>)
 800047a:	4293      	cmp	r3, r2
 800047c:	d10b      	bne.n	8000496 <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 800047e:	4b09      	ldr	r3, [pc, #36]	; (80004a4 <HAL_CRC_MspInit+0x38>)
 8000480:	695a      	ldr	r2, [r3, #20]
 8000482:	4b08      	ldr	r3, [pc, #32]	; (80004a4 <HAL_CRC_MspInit+0x38>)
 8000484:	2140      	movs	r1, #64	; 0x40
 8000486:	430a      	orrs	r2, r1
 8000488:	615a      	str	r2, [r3, #20]
 800048a:	4b06      	ldr	r3, [pc, #24]	; (80004a4 <HAL_CRC_MspInit+0x38>)
 800048c:	695b      	ldr	r3, [r3, #20]
 800048e:	2240      	movs	r2, #64	; 0x40
 8000490:	4013      	ands	r3, r2
 8000492:	60fb      	str	r3, [r7, #12]
 8000494:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 8000496:	46c0      	nop			; (mov r8, r8)
 8000498:	46bd      	mov	sp, r7
 800049a:	b004      	add	sp, #16
 800049c:	bd80      	pop	{r7, pc}
 800049e:	46c0      	nop			; (mov r8, r8)
 80004a0:	40023000 	.word	0x40023000
 80004a4:	40021000 	.word	0x40021000

080004a8 <MX_DAC1_Init>:

DAC_HandleTypeDef hdac1;

/* DAC1 init function */
void MX_DAC1_Init(void)
{
 80004a8:	b580      	push	{r7, lr}
 80004aa:	b082      	sub	sp, #8
 80004ac:	af00      	add	r7, sp, #0
  DAC_ChannelConfTypeDef sConfig = {0};
 80004ae:	003b      	movs	r3, r7
 80004b0:	0018      	movs	r0, r3
 80004b2:	2308      	movs	r3, #8
 80004b4:	001a      	movs	r2, r3
 80004b6:	2100      	movs	r1, #0
 80004b8:	f006 fd0c 	bl	8006ed4 <memset>

  /** DAC Initialization 
  */
  hdac1.Instance = DAC;
 80004bc:	4b0f      	ldr	r3, [pc, #60]	; (80004fc <MX_DAC1_Init+0x54>)
 80004be:	4a10      	ldr	r2, [pc, #64]	; (8000500 <MX_DAC1_Init+0x58>)
 80004c0:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 80004c2:	4b0e      	ldr	r3, [pc, #56]	; (80004fc <MX_DAC1_Init+0x54>)
 80004c4:	0018      	movs	r0, r3
 80004c6:	f002 f8d3 	bl	8002670 <HAL_DAC_Init>
 80004ca:	1e03      	subs	r3, r0, #0
 80004cc:	d001      	beq.n	80004d2 <MX_DAC1_Init+0x2a>
  {
    Error_Handler();
 80004ce:	f000 fa4b 	bl	8000968 <Error_Handler>
  }
  /** DAC channel OUT1 config 
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_T2_TRGO;
 80004d2:	003b      	movs	r3, r7
 80004d4:	2224      	movs	r2, #36	; 0x24
 80004d6:	601a      	str	r2, [r3, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 80004d8:	003b      	movs	r3, r7
 80004da:	2200      	movs	r2, #0
 80004dc:	605a      	str	r2, [r3, #4]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 80004de:	0039      	movs	r1, r7
 80004e0:	4b06      	ldr	r3, [pc, #24]	; (80004fc <MX_DAC1_Init+0x54>)
 80004e2:	2200      	movs	r2, #0
 80004e4:	0018      	movs	r0, r3
 80004e6:	f002 f94d 	bl	8002784 <HAL_DAC_ConfigChannel>
 80004ea:	1e03      	subs	r3, r0, #0
 80004ec:	d001      	beq.n	80004f2 <MX_DAC1_Init+0x4a>
  {
    Error_Handler();
 80004ee:	f000 fa3b 	bl	8000968 <Error_Handler>
  }

}
 80004f2:	46c0      	nop			; (mov r8, r8)
 80004f4:	46bd      	mov	sp, r7
 80004f6:	b002      	add	sp, #8
 80004f8:	bd80      	pop	{r7, pc}
 80004fa:	46c0      	nop			; (mov r8, r8)
 80004fc:	200004b0 	.word	0x200004b0
 8000500:	40007400 	.word	0x40007400

08000504 <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 8000504:	b580      	push	{r7, lr}
 8000506:	b08a      	sub	sp, #40	; 0x28
 8000508:	af00      	add	r7, sp, #0
 800050a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800050c:	2314      	movs	r3, #20
 800050e:	18fb      	adds	r3, r7, r3
 8000510:	0018      	movs	r0, r3
 8000512:	2314      	movs	r3, #20
 8000514:	001a      	movs	r2, r3
 8000516:	2100      	movs	r1, #0
 8000518:	f006 fcdc 	bl	8006ed4 <memset>
  if(dacHandle->Instance==DAC)
 800051c:	687b      	ldr	r3, [r7, #4]
 800051e:	681b      	ldr	r3, [r3, #0]
 8000520:	4a1d      	ldr	r2, [pc, #116]	; (8000598 <HAL_DAC_MspInit+0x94>)
 8000522:	4293      	cmp	r3, r2
 8000524:	d134      	bne.n	8000590 <HAL_DAC_MspInit+0x8c>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* DAC clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 8000526:	4b1d      	ldr	r3, [pc, #116]	; (800059c <HAL_DAC_MspInit+0x98>)
 8000528:	69da      	ldr	r2, [r3, #28]
 800052a:	4b1c      	ldr	r3, [pc, #112]	; (800059c <HAL_DAC_MspInit+0x98>)
 800052c:	2180      	movs	r1, #128	; 0x80
 800052e:	0589      	lsls	r1, r1, #22
 8000530:	430a      	orrs	r2, r1
 8000532:	61da      	str	r2, [r3, #28]
 8000534:	4b19      	ldr	r3, [pc, #100]	; (800059c <HAL_DAC_MspInit+0x98>)
 8000536:	69da      	ldr	r2, [r3, #28]
 8000538:	2380      	movs	r3, #128	; 0x80
 800053a:	059b      	lsls	r3, r3, #22
 800053c:	4013      	ands	r3, r2
 800053e:	613b      	str	r3, [r7, #16]
 8000540:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000542:	4b16      	ldr	r3, [pc, #88]	; (800059c <HAL_DAC_MspInit+0x98>)
 8000544:	695a      	ldr	r2, [r3, #20]
 8000546:	4b15      	ldr	r3, [pc, #84]	; (800059c <HAL_DAC_MspInit+0x98>)
 8000548:	2180      	movs	r1, #128	; 0x80
 800054a:	0289      	lsls	r1, r1, #10
 800054c:	430a      	orrs	r2, r1
 800054e:	615a      	str	r2, [r3, #20]
 8000550:	4b12      	ldr	r3, [pc, #72]	; (800059c <HAL_DAC_MspInit+0x98>)
 8000552:	695a      	ldr	r2, [r3, #20]
 8000554:	2380      	movs	r3, #128	; 0x80
 8000556:	029b      	lsls	r3, r3, #10
 8000558:	4013      	ands	r3, r2
 800055a:	60fb      	str	r3, [r7, #12]
 800055c:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration    
    PA4     ------> DAC1_OUT1 
    */
    GPIO_InitStruct.Pin = WIEN_Pin;
 800055e:	2114      	movs	r1, #20
 8000560:	187b      	adds	r3, r7, r1
 8000562:	2210      	movs	r2, #16
 8000564:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000566:	187b      	adds	r3, r7, r1
 8000568:	2203      	movs	r2, #3
 800056a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800056c:	187b      	adds	r3, r7, r1
 800056e:	2200      	movs	r2, #0
 8000570:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(WIEN_GPIO_Port, &GPIO_InitStruct);
 8000572:	187a      	adds	r2, r7, r1
 8000574:	2390      	movs	r3, #144	; 0x90
 8000576:	05db      	lsls	r3, r3, #23
 8000578:	0011      	movs	r1, r2
 800057a:	0018      	movs	r0, r3
 800057c:	f002 fc76 	bl	8002e6c <HAL_GPIO_Init>

    /* DAC interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8000580:	2200      	movs	r2, #0
 8000582:	2100      	movs	r1, #0
 8000584:	2011      	movs	r0, #17
 8000586:	f001 ff81 	bl	800248c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800058a:	2011      	movs	r0, #17
 800058c:	f001 ff9e 	bl	80024cc <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }
}
 8000590:	46c0      	nop			; (mov r8, r8)
 8000592:	46bd      	mov	sp, r7
 8000594:	b00a      	add	sp, #40	; 0x28
 8000596:	bd80      	pop	{r7, pc}
 8000598:	40007400 	.word	0x40007400
 800059c:	40021000 	.word	0x40021000

080005a0 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
void MX_DMA_Init(void) 
{
 80005a0:	b580      	push	{r7, lr}
 80005a2:	b082      	sub	sp, #8
 80005a4:	af00      	add	r7, sp, #0
  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80005a6:	4b10      	ldr	r3, [pc, #64]	; (80005e8 <MX_DMA_Init+0x48>)
 80005a8:	695a      	ldr	r2, [r3, #20]
 80005aa:	4b0f      	ldr	r3, [pc, #60]	; (80005e8 <MX_DMA_Init+0x48>)
 80005ac:	2101      	movs	r1, #1
 80005ae:	430a      	orrs	r2, r1
 80005b0:	615a      	str	r2, [r3, #20]
 80005b2:	4b0d      	ldr	r3, [pc, #52]	; (80005e8 <MX_DMA_Init+0x48>)
 80005b4:	695b      	ldr	r3, [r3, #20]
 80005b6:	2201      	movs	r2, #1
 80005b8:	4013      	ands	r3, r2
 80005ba:	607b      	str	r3, [r7, #4]
 80005bc:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80005be:	2200      	movs	r2, #0
 80005c0:	2100      	movs	r1, #0
 80005c2:	2009      	movs	r0, #9
 80005c4:	f001 ff62 	bl	800248c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80005c8:	2009      	movs	r0, #9
 80005ca:	f001 ff7f 	bl	80024cc <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_5_IRQn, 0, 0);
 80005ce:	2200      	movs	r2, #0
 80005d0:	2100      	movs	r1, #0
 80005d2:	200b      	movs	r0, #11
 80005d4:	f001 ff5a 	bl	800248c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_5_IRQn);
 80005d8:	200b      	movs	r0, #11
 80005da:	f001 ff77 	bl	80024cc <HAL_NVIC_EnableIRQ>

}
 80005de:	46c0      	nop			; (mov r8, r8)
 80005e0:	46bd      	mov	sp, r7
 80005e2:	b002      	add	sp, #8
 80005e4:	bd80      	pop	{r7, pc}
 80005e6:	46c0      	nop			; (mov r8, r8)
 80005e8:	40021000 	.word	0x40021000

080005ec <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through 
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 80005ec:	b590      	push	{r4, r7, lr}
 80005ee:	b08b      	sub	sp, #44	; 0x2c
 80005f0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005f2:	2414      	movs	r4, #20
 80005f4:	193b      	adds	r3, r7, r4
 80005f6:	0018      	movs	r0, r3
 80005f8:	2314      	movs	r3, #20
 80005fa:	001a      	movs	r2, r3
 80005fc:	2100      	movs	r1, #0
 80005fe:	f006 fc69 	bl	8006ed4 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000602:	4b66      	ldr	r3, [pc, #408]	; (800079c <MX_GPIO_Init+0x1b0>)
 8000604:	695a      	ldr	r2, [r3, #20]
 8000606:	4b65      	ldr	r3, [pc, #404]	; (800079c <MX_GPIO_Init+0x1b0>)
 8000608:	2180      	movs	r1, #128	; 0x80
 800060a:	0309      	lsls	r1, r1, #12
 800060c:	430a      	orrs	r2, r1
 800060e:	615a      	str	r2, [r3, #20]
 8000610:	4b62      	ldr	r3, [pc, #392]	; (800079c <MX_GPIO_Init+0x1b0>)
 8000612:	695a      	ldr	r2, [r3, #20]
 8000614:	2380      	movs	r3, #128	; 0x80
 8000616:	031b      	lsls	r3, r3, #12
 8000618:	4013      	ands	r3, r2
 800061a:	613b      	str	r3, [r7, #16]
 800061c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800061e:	4b5f      	ldr	r3, [pc, #380]	; (800079c <MX_GPIO_Init+0x1b0>)
 8000620:	695a      	ldr	r2, [r3, #20]
 8000622:	4b5e      	ldr	r3, [pc, #376]	; (800079c <MX_GPIO_Init+0x1b0>)
 8000624:	2180      	movs	r1, #128	; 0x80
 8000626:	02c9      	lsls	r1, r1, #11
 8000628:	430a      	orrs	r2, r1
 800062a:	615a      	str	r2, [r3, #20]
 800062c:	4b5b      	ldr	r3, [pc, #364]	; (800079c <MX_GPIO_Init+0x1b0>)
 800062e:	695a      	ldr	r2, [r3, #20]
 8000630:	2380      	movs	r3, #128	; 0x80
 8000632:	02db      	lsls	r3, r3, #11
 8000634:	4013      	ands	r3, r2
 8000636:	60fb      	str	r3, [r7, #12]
 8000638:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800063a:	4b58      	ldr	r3, [pc, #352]	; (800079c <MX_GPIO_Init+0x1b0>)
 800063c:	695a      	ldr	r2, [r3, #20]
 800063e:	4b57      	ldr	r3, [pc, #348]	; (800079c <MX_GPIO_Init+0x1b0>)
 8000640:	2180      	movs	r1, #128	; 0x80
 8000642:	0289      	lsls	r1, r1, #10
 8000644:	430a      	orrs	r2, r1
 8000646:	615a      	str	r2, [r3, #20]
 8000648:	4b54      	ldr	r3, [pc, #336]	; (800079c <MX_GPIO_Init+0x1b0>)
 800064a:	695a      	ldr	r2, [r3, #20]
 800064c:	2380      	movs	r3, #128	; 0x80
 800064e:	029b      	lsls	r3, r3, #10
 8000650:	4013      	ands	r3, r2
 8000652:	60bb      	str	r3, [r7, #8]
 8000654:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000656:	4b51      	ldr	r3, [pc, #324]	; (800079c <MX_GPIO_Init+0x1b0>)
 8000658:	695a      	ldr	r2, [r3, #20]
 800065a:	4b50      	ldr	r3, [pc, #320]	; (800079c <MX_GPIO_Init+0x1b0>)
 800065c:	2180      	movs	r1, #128	; 0x80
 800065e:	0349      	lsls	r1, r1, #13
 8000660:	430a      	orrs	r2, r1
 8000662:	615a      	str	r2, [r3, #20]
 8000664:	4b4d      	ldr	r3, [pc, #308]	; (800079c <MX_GPIO_Init+0x1b0>)
 8000666:	695a      	ldr	r2, [r3, #20]
 8000668:	2380      	movs	r3, #128	; 0x80
 800066a:	035b      	lsls	r3, r3, #13
 800066c:	4013      	ands	r3, r2
 800066e:	607b      	str	r3, [r7, #4]
 8000670:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000672:	4b4a      	ldr	r3, [pc, #296]	; (800079c <MX_GPIO_Init+0x1b0>)
 8000674:	695a      	ldr	r2, [r3, #20]
 8000676:	4b49      	ldr	r3, [pc, #292]	; (800079c <MX_GPIO_Init+0x1b0>)
 8000678:	2180      	movs	r1, #128	; 0x80
 800067a:	03c9      	lsls	r1, r1, #15
 800067c:	430a      	orrs	r2, r1
 800067e:	615a      	str	r2, [r3, #20]
 8000680:	4b46      	ldr	r3, [pc, #280]	; (800079c <MX_GPIO_Init+0x1b0>)
 8000682:	695a      	ldr	r2, [r3, #20]
 8000684:	2380      	movs	r3, #128	; 0x80
 8000686:	03db      	lsls	r3, r3, #15
 8000688:	4013      	ands	r3, r2
 800068a:	603b      	str	r3, [r7, #0]
 800068c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, POLKA_LED_Pin|BOARD_LED_Pin, GPIO_PIN_RESET);
 800068e:	23c0      	movs	r3, #192	; 0xc0
 8000690:	009b      	lsls	r3, r3, #2
 8000692:	4843      	ldr	r0, [pc, #268]	; (80007a0 <MX_GPIO_Init+0x1b4>)
 8000694:	2200      	movs	r2, #0
 8000696:	0019      	movs	r1, r3
 8000698:	f002 fe3e 	bl	8003318 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC11 PC10 PC12 
                           PC1 PC0 PC7 PC2 
                           PC6 PC3 PC4 PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_11|GPIO_PIN_10|GPIO_PIN_12 
 800069c:	193b      	adds	r3, r7, r4
 800069e:	4a41      	ldr	r2, [pc, #260]	; (80007a4 <MX_GPIO_Init+0x1b8>)
 80006a0:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_7|GPIO_PIN_2 
                          |GPIO_PIN_6|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80006a2:	193b      	adds	r3, r7, r4
 80006a4:	2203      	movs	r2, #3
 80006a6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006a8:	193b      	adds	r3, r7, r4
 80006aa:	2200      	movs	r2, #0
 80006ac:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80006ae:	193b      	adds	r3, r7, r4
 80006b0:	4a3b      	ldr	r2, [pc, #236]	; (80007a0 <MX_GPIO_Init+0x1b4>)
 80006b2:	0019      	movs	r1, r3
 80006b4:	0010      	movs	r0, r2
 80006b6:	f002 fbd9 	bl	8002e6c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB9 PB4 PB3 PB8 
                           PB7 PB5 PB6 PB0 
                           PB14 PB1 PB2 PB10 
                           PB13 PB11 PB12 */
  GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_4|GPIO_PIN_3|GPIO_PIN_8 
 80006ba:	193b      	adds	r3, r7, r4
 80006bc:	4a3a      	ldr	r2, [pc, #232]	; (80007a8 <MX_GPIO_Init+0x1bc>)
 80006be:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_7|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_0 
                          |GPIO_PIN_14|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10 
                          |GPIO_PIN_13|GPIO_PIN_11|GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80006c0:	193b      	adds	r3, r7, r4
 80006c2:	2203      	movs	r2, #3
 80006c4:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006c6:	193b      	adds	r3, r7, r4
 80006c8:	2200      	movs	r2, #0
 80006ca:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006cc:	193b      	adds	r3, r7, r4
 80006ce:	4a37      	ldr	r2, [pc, #220]	; (80007ac <MX_GPIO_Init+0x1c0>)
 80006d0:	0019      	movs	r1, r3
 80006d2:	0010      	movs	r0, r2
 80006d4:	f002 fbca 	bl	8002e6c <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 80006d8:	193b      	adds	r3, r7, r4
 80006da:	2204      	movs	r2, #4
 80006dc:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80006de:	193b      	adds	r3, r7, r4
 80006e0:	2203      	movs	r2, #3
 80006e2:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006e4:	193b      	adds	r3, r7, r4
 80006e6:	2200      	movs	r2, #0
 80006e8:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80006ea:	193b      	adds	r3, r7, r4
 80006ec:	4a30      	ldr	r2, [pc, #192]	; (80007b0 <MX_GPIO_Init+0x1c4>)
 80006ee:	0019      	movs	r1, r3
 80006f0:	0010      	movs	r0, r2
 80006f2:	f002 fbbb 	bl	8002e6c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA12 PA9 PA11 PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_9|GPIO_PIN_11|GPIO_PIN_8;
 80006f6:	193b      	adds	r3, r7, r4
 80006f8:	22d8      	movs	r2, #216	; 0xd8
 80006fa:	0152      	lsls	r2, r2, #5
 80006fc:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80006fe:	193b      	adds	r3, r7, r4
 8000700:	2203      	movs	r2, #3
 8000702:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000704:	193b      	adds	r3, r7, r4
 8000706:	2200      	movs	r2, #0
 8000708:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800070a:	193a      	adds	r2, r7, r4
 800070c:	2390      	movs	r3, #144	; 0x90
 800070e:	05db      	lsls	r3, r3, #23
 8000710:	0011      	movs	r1, r2
 8000712:	0018      	movs	r0, r3
 8000714:	f002 fbaa 	bl	8002e6c <HAL_GPIO_Init>

  /*Configure GPIO pins : PF4 PF5 PF6 PF7 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000718:	193b      	adds	r3, r7, r4
 800071a:	22f0      	movs	r2, #240	; 0xf0
 800071c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800071e:	193b      	adds	r3, r7, r4
 8000720:	2203      	movs	r2, #3
 8000722:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000724:	193b      	adds	r3, r7, r4
 8000726:	2200      	movs	r2, #0
 8000728:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800072a:	193b      	adds	r3, r7, r4
 800072c:	4a21      	ldr	r2, [pc, #132]	; (80007b4 <MX_GPIO_Init+0x1c8>)
 800072e:	0019      	movs	r1, r3
 8000730:	0010      	movs	r0, r2
 8000732:	f002 fb9b 	bl	8002e6c <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = POLKA_LED_Pin|BOARD_LED_Pin;
 8000736:	0021      	movs	r1, r4
 8000738:	187b      	adds	r3, r7, r1
 800073a:	22c0      	movs	r2, #192	; 0xc0
 800073c:	0092      	lsls	r2, r2, #2
 800073e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000740:	187b      	adds	r3, r7, r1
 8000742:	2201      	movs	r2, #1
 8000744:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000746:	187b      	adds	r3, r7, r1
 8000748:	2200      	movs	r2, #0
 800074a:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800074c:	187b      	adds	r3, r7, r1
 800074e:	2203      	movs	r2, #3
 8000750:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000752:	000c      	movs	r4, r1
 8000754:	187b      	adds	r3, r7, r1
 8000756:	4a12      	ldr	r2, [pc, #72]	; (80007a0 <MX_GPIO_Init+0x1b4>)
 8000758:	0019      	movs	r1, r3
 800075a:	0010      	movs	r0, r2
 800075c:	f002 fb86 	bl	8002e6c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BLOCK_PU_Pin;
 8000760:	0021      	movs	r1, r4
 8000762:	187b      	adds	r3, r7, r1
 8000764:	2201      	movs	r2, #1
 8000766:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8000768:	187b      	adds	r3, r7, r1
 800076a:	4a13      	ldr	r2, [pc, #76]	; (80007b8 <MX_GPIO_Init+0x1cc>)
 800076c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800076e:	187b      	adds	r3, r7, r1
 8000770:	2201      	movs	r2, #1
 8000772:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(BLOCK_PU_GPIO_Port, &GPIO_InitStruct);
 8000774:	187a      	adds	r2, r7, r1
 8000776:	2390      	movs	r3, #144	; 0x90
 8000778:	05db      	lsls	r3, r3, #23
 800077a:	0011      	movs	r1, r2
 800077c:	0018      	movs	r0, r3
 800077e:	f002 fb75 	bl	8002e6c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_1_IRQn, 0, 0);
 8000782:	2200      	movs	r2, #0
 8000784:	2100      	movs	r1, #0
 8000786:	2005      	movs	r0, #5
 8000788:	f001 fe80 	bl	800248c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_1_IRQn);
 800078c:	2005      	movs	r0, #5
 800078e:	f001 fe9d 	bl	80024cc <HAL_NVIC_EnableIRQ>

}
 8000792:	46c0      	nop			; (mov r8, r8)
 8000794:	46bd      	mov	sp, r7
 8000796:	b00b      	add	sp, #44	; 0x2c
 8000798:	bd90      	pop	{r4, r7, pc}
 800079a:	46c0      	nop			; (mov r8, r8)
 800079c:	40021000 	.word	0x40021000
 80007a0:	48000800 	.word	0x48000800
 80007a4:	00003cff 	.word	0x00003cff
 80007a8:	00007fff 	.word	0x00007fff
 80007ac:	48000400 	.word	0x48000400
 80007b0:	48000c00 	.word	0x48000c00
 80007b4:	48001400 	.word	0x48001400
 80007b8:	10310000 	.word	0x10310000

080007bc <MX_IWDG_Init>:

IWDG_HandleTypeDef hiwdg;

/* IWDG init function */
void MX_IWDG_Init(void)
{
 80007bc:	b580      	push	{r7, lr}
 80007be:	af00      	add	r7, sp, #0

  hiwdg.Instance = IWDG;
 80007c0:	4b0b      	ldr	r3, [pc, #44]	; (80007f0 <MX_IWDG_Init+0x34>)
 80007c2:	4a0c      	ldr	r2, [pc, #48]	; (80007f4 <MX_IWDG_Init+0x38>)
 80007c4:	601a      	str	r2, [r3, #0]
  hiwdg.Init.Prescaler = IWDG_PRESCALER_4;
 80007c6:	4b0a      	ldr	r3, [pc, #40]	; (80007f0 <MX_IWDG_Init+0x34>)
 80007c8:	2200      	movs	r2, #0
 80007ca:	605a      	str	r2, [r3, #4]
  hiwdg.Init.Window = 4095;
 80007cc:	4b08      	ldr	r3, [pc, #32]	; (80007f0 <MX_IWDG_Init+0x34>)
 80007ce:	4a0a      	ldr	r2, [pc, #40]	; (80007f8 <MX_IWDG_Init+0x3c>)
 80007d0:	60da      	str	r2, [r3, #12]
  hiwdg.Init.Reload = 4095;
 80007d2:	4b07      	ldr	r3, [pc, #28]	; (80007f0 <MX_IWDG_Init+0x34>)
 80007d4:	4a08      	ldr	r2, [pc, #32]	; (80007f8 <MX_IWDG_Init+0x3c>)
 80007d6:	609a      	str	r2, [r3, #8]
  if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 80007d8:	4b05      	ldr	r3, [pc, #20]	; (80007f0 <MX_IWDG_Init+0x34>)
 80007da:	0018      	movs	r0, r3
 80007dc:	f002 fe1c 	bl	8003418 <HAL_IWDG_Init>
 80007e0:	1e03      	subs	r3, r0, #0
 80007e2:	d001      	beq.n	80007e8 <MX_IWDG_Init+0x2c>
  {
    Error_Handler();
 80007e4:	f000 f8c0 	bl	8000968 <Error_Handler>
  }

}
 80007e8:	46c0      	nop			; (mov r8, r8)
 80007ea:	46bd      	mov	sp, r7
 80007ec:	bd80      	pop	{r7, pc}
 80007ee:	46c0      	nop			; (mov r8, r8)
 80007f0:	200004c4 	.word	0x200004c4
 80007f4:	40003000 	.word	0x40003000
 80007f8:	00000fff 	.word	0x00000fff

080007fc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007fc:	b580      	push	{r7, lr}
 80007fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

	// Enable Debug
	EnableDebugMode();
 8000800:	f000 fe04 	bl	800140c <EnableDebugMode>
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000804:	f000 ff8c 	bl	8001720 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000808:	f000 f83c 	bl	8000884 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800080c:	f7ff feee 	bl	80005ec <MX_GPIO_Init>
  MX_DMA_Init();
 8000810:	f7ff fec6 	bl	80005a0 <MX_DMA_Init>
  MX_ADC_Init();
 8000814:	f7ff fd04 	bl	8000220 <MX_ADC_Init>
  MX_CRC_Init();
 8000818:	f7ff fe04 	bl	8000424 <MX_CRC_Init>
  MX_DAC1_Init();
 800081c:	f7ff fe44 	bl	80004a8 <MX_DAC1_Init>
  MX_IWDG_Init();
 8000820:	f7ff ffcc 	bl	80007bc <MX_IWDG_Init>
  MX_TIM1_Init();
 8000824:	f000 f9a0 	bl	8000b68 <MX_TIM1_Init>
  MX_TIM2_Init();
 8000828:	f000 fa58 	bl	8000cdc <MX_TIM2_Init>
  MX_USART2_UART_Init();
 800082c:	f000 fb5c 	bl	8000ee8 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  	// Reset All to Default
    DigiTOS_IWDG_Init(DigiTOS_IWDG_Timeout_16s);// WatchDog
 8000830:	200c      	movs	r0, #12
 8000832:	f000 fea7 	bl	8001584 <DigiTOS_IWDG_Init>

    BlinkLEDs(10,100);
 8000836:	2164      	movs	r1, #100	; 0x64
 8000838:	200a      	movs	r0, #10
 800083a:	f000 fd37 	bl	80012ac <BlinkLEDs>

    UseSoftStart=1;
 800083e:	4b0e      	ldr	r3, [pc, #56]	; (8000878 <main+0x7c>)
 8000840:	2201      	movs	r2, #1
 8000842:	601a      	str	r2, [r3, #0]
    HAL_GPIO_EXTI_Callback(BLOCK_PU_Pin); // Get State of Block Pin
 8000844:	2001      	movs	r0, #1
 8000846:	f000 f86f 	bl	8000928 <HAL_GPIO_EXTI_Callback>

    //PWM_50Hz_ON();
    //PWM_50Hz_OFF();

    DAC_SINUS_INIT();
 800084a:	f000 fe55 	bl	80014f8 <DAC_SINUS_INIT>

    Set50Hz();
 800084e:	f000 fc1f 	bl	8001090 <Set50Hz>
    //Set505Hz();

    StartADC();
 8000852:	f000 fd05 	bl	8001260 <StartADC>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  if (BlockGenerator==1) {
 8000856:	4b09      	ldr	r3, [pc, #36]	; (800087c <main+0x80>)
 8000858:	681b      	ldr	r3, [r3, #0]
 800085a:	2b01      	cmp	r3, #1
 800085c:	d106      	bne.n	800086c <main+0x70>
		  HAL_GPIO_WritePin(BOARD_LED_GPIO_Port, BOARD_LED_Pin,GPIO_PIN_SET); // LED Off
 800085e:	2380      	movs	r3, #128	; 0x80
 8000860:	005b      	lsls	r3, r3, #1
 8000862:	4807      	ldr	r0, [pc, #28]	; (8000880 <main+0x84>)
 8000864:	2201      	movs	r2, #1
 8000866:	0019      	movs	r1, r3
 8000868:	f002 fd56 	bl	8003318 <HAL_GPIO_WritePin>
	  }

	  Check50Hz(); // Check if need to start\stop generator
 800086c:	f000 fd56 	bl	800131c <Check50Hz>

	  ResetWDG(); // Reset WatchDog
 8000870:	f000 fe7c 	bl	800156c <ResetWDG>
	  if (BlockGenerator==1) {
 8000874:	e7ef      	b.n	8000856 <main+0x5a>
 8000876:	46c0      	nop			; (mov r8, r8)
 8000878:	200003e8 	.word	0x200003e8
 800087c:	20000004 	.word	0x20000004
 8000880:	48000800 	.word	0x48000800

08000884 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000884:	b590      	push	{r4, r7, lr}
 8000886:	b091      	sub	sp, #68	; 0x44
 8000888:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800088a:	2410      	movs	r4, #16
 800088c:	193b      	adds	r3, r7, r4
 800088e:	0018      	movs	r0, r3
 8000890:	2330      	movs	r3, #48	; 0x30
 8000892:	001a      	movs	r2, r3
 8000894:	2100      	movs	r1, #0
 8000896:	f006 fb1d 	bl	8006ed4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800089a:	003b      	movs	r3, r7
 800089c:	0018      	movs	r0, r3
 800089e:	2310      	movs	r3, #16
 80008a0:	001a      	movs	r2, r3
 80008a2:	2100      	movs	r1, #0
 80008a4:	f006 fb16 	bl	8006ed4 <memset>

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI14|RCC_OSCILLATORTYPE_LSI
 80008a8:	0021      	movs	r1, r4
 80008aa:	187b      	adds	r3, r7, r1
 80008ac:	2219      	movs	r2, #25
 80008ae:	601a      	str	r2, [r3, #0]
                              |RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80008b0:	187b      	adds	r3, r7, r1
 80008b2:	2201      	movs	r2, #1
 80008b4:	605a      	str	r2, [r3, #4]
  RCC_OscInitStruct.HSI14State = RCC_HSI14_ON;
 80008b6:	187b      	adds	r3, r7, r1
 80008b8:	2201      	movs	r2, #1
 80008ba:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.HSI14CalibrationValue = 16;
 80008bc:	187b      	adds	r3, r7, r1
 80008be:	2210      	movs	r2, #16
 80008c0:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80008c2:	187b      	adds	r3, r7, r1
 80008c4:	2201      	movs	r2, #1
 80008c6:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80008c8:	187b      	adds	r3, r7, r1
 80008ca:	2202      	movs	r2, #2
 80008cc:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80008ce:	187b      	adds	r3, r7, r1
 80008d0:	2280      	movs	r2, #128	; 0x80
 80008d2:	0252      	lsls	r2, r2, #9
 80008d4:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 80008d6:	187b      	adds	r3, r7, r1
 80008d8:	2280      	movs	r2, #128	; 0x80
 80008da:	0352      	lsls	r2, r2, #13
 80008dc:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 80008de:	187b      	adds	r3, r7, r1
 80008e0:	2200      	movs	r2, #0
 80008e2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008e4:	187b      	adds	r3, r7, r1
 80008e6:	0018      	movs	r0, r3
 80008e8:	f002 fe36 	bl	8003558 <HAL_RCC_OscConfig>
 80008ec:	1e03      	subs	r3, r0, #0
 80008ee:	d001      	beq.n	80008f4 <SystemClock_Config+0x70>
  {
    Error_Handler();
 80008f0:	f000 f83a 	bl	8000968 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008f4:	003b      	movs	r3, r7
 80008f6:	2207      	movs	r2, #7
 80008f8:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80008fa:	003b      	movs	r3, r7
 80008fc:	2202      	movs	r2, #2
 80008fe:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000900:	003b      	movs	r3, r7
 8000902:	2200      	movs	r2, #0
 8000904:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000906:	003b      	movs	r3, r7
 8000908:	2200      	movs	r2, #0
 800090a:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800090c:	003b      	movs	r3, r7
 800090e:	2101      	movs	r1, #1
 8000910:	0018      	movs	r0, r3
 8000912:	f003 fa8f 	bl	8003e34 <HAL_RCC_ClockConfig>
 8000916:	1e03      	subs	r3, r0, #0
 8000918:	d001      	beq.n	800091e <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800091a:	f000 f825 	bl	8000968 <Error_Handler>
  }
}
 800091e:	46c0      	nop			; (mov r8, r8)
 8000920:	46bd      	mov	sp, r7
 8000922:	b011      	add	sp, #68	; 0x44
 8000924:	bd90      	pop	{r4, r7, pc}
	...

08000928 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000928:	b580      	push	{r7, lr}
 800092a:	b082      	sub	sp, #8
 800092c:	af00      	add	r7, sp, #0
 800092e:	0002      	movs	r2, r0
 8000930:	1dbb      	adds	r3, r7, #6
 8000932:	801a      	strh	r2, [r3, #0]
  if(GPIO_Pin==BLOCK_PU_Pin) {
 8000934:	1dbb      	adds	r3, r7, #6
 8000936:	881b      	ldrh	r3, [r3, #0]
 8000938:	2b01      	cmp	r3, #1
 800093a:	d10e      	bne.n	800095a <HAL_GPIO_EXTI_Callback+0x32>
	  	  	  if (HAL_GPIO_ReadPin(BLOCK_PU_GPIO_Port, BLOCK_PU_Pin)==GPIO_PIN_RESET) {
 800093c:	2390      	movs	r3, #144	; 0x90
 800093e:	05db      	lsls	r3, r3, #23
 8000940:	2101      	movs	r1, #1
 8000942:	0018      	movs	r0, r3
 8000944:	f002 fcb8 	bl	80032b8 <HAL_GPIO_ReadPin>
 8000948:	1e03      	subs	r3, r0, #0
 800094a:	d103      	bne.n	8000954 <HAL_GPIO_EXTI_Callback+0x2c>
	  			  BlockGenerator=0; // Unblock Generator
 800094c:	4b05      	ldr	r3, [pc, #20]	; (8000964 <HAL_GPIO_EXTI_Callback+0x3c>)
 800094e:	2200      	movs	r2, #0
 8000950:	601a      	str	r2, [r3, #0]
	  		  } else {
	  			  BlockGenerator=1; //Block Generator
	  		  }
  }
}
 8000952:	e002      	b.n	800095a <HAL_GPIO_EXTI_Callback+0x32>
	  			  BlockGenerator=1; //Block Generator
 8000954:	4b03      	ldr	r3, [pc, #12]	; (8000964 <HAL_GPIO_EXTI_Callback+0x3c>)
 8000956:	2201      	movs	r2, #1
 8000958:	601a      	str	r2, [r3, #0]
}
 800095a:	46c0      	nop			; (mov r8, r8)
 800095c:	46bd      	mov	sp, r7
 800095e:	b002      	add	sp, #8
 8000960:	bd80      	pop	{r7, pc}
 8000962:	46c0      	nop			; (mov r8, r8)
 8000964:	20000004 	.word	0x20000004

08000968 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000968:	b580      	push	{r7, lr}
 800096a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800096c:	46c0      	nop			; (mov r8, r8)
 800096e:	46bd      	mov	sp, r7
 8000970:	bd80      	pop	{r7, pc}

08000972 <assert_failed>:
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(char *file, uint32_t line)
{ 
 8000972:	b580      	push	{r7, lr}
 8000974:	b082      	sub	sp, #8
 8000976:	af00      	add	r7, sp, #0
 8000978:	6078      	str	r0, [r7, #4]
 800097a:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     tex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
 800097c:	46c0      	nop			; (mov r8, r8)
 800097e:	46bd      	mov	sp, r7
 8000980:	b002      	add	sp, #8
 8000982:	bd80      	pop	{r7, pc}

08000984 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000984:	b580      	push	{r7, lr}
 8000986:	b082      	sub	sp, #8
 8000988:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800098a:	4b0f      	ldr	r3, [pc, #60]	; (80009c8 <HAL_MspInit+0x44>)
 800098c:	699a      	ldr	r2, [r3, #24]
 800098e:	4b0e      	ldr	r3, [pc, #56]	; (80009c8 <HAL_MspInit+0x44>)
 8000990:	2101      	movs	r1, #1
 8000992:	430a      	orrs	r2, r1
 8000994:	619a      	str	r2, [r3, #24]
 8000996:	4b0c      	ldr	r3, [pc, #48]	; (80009c8 <HAL_MspInit+0x44>)
 8000998:	699b      	ldr	r3, [r3, #24]
 800099a:	2201      	movs	r2, #1
 800099c:	4013      	ands	r3, r2
 800099e:	607b      	str	r3, [r7, #4]
 80009a0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009a2:	4b09      	ldr	r3, [pc, #36]	; (80009c8 <HAL_MspInit+0x44>)
 80009a4:	69da      	ldr	r2, [r3, #28]
 80009a6:	4b08      	ldr	r3, [pc, #32]	; (80009c8 <HAL_MspInit+0x44>)
 80009a8:	2180      	movs	r1, #128	; 0x80
 80009aa:	0549      	lsls	r1, r1, #21
 80009ac:	430a      	orrs	r2, r1
 80009ae:	61da      	str	r2, [r3, #28]
 80009b0:	4b05      	ldr	r3, [pc, #20]	; (80009c8 <HAL_MspInit+0x44>)
 80009b2:	69da      	ldr	r2, [r3, #28]
 80009b4:	2380      	movs	r3, #128	; 0x80
 80009b6:	055b      	lsls	r3, r3, #21
 80009b8:	4013      	ands	r3, r2
 80009ba:	603b      	str	r3, [r7, #0]
 80009bc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009be:	46c0      	nop			; (mov r8, r8)
 80009c0:	46bd      	mov	sp, r7
 80009c2:	b002      	add	sp, #8
 80009c4:	bd80      	pop	{r7, pc}
 80009c6:	46c0      	nop			; (mov r8, r8)
 80009c8:	40021000 	.word	0x40021000

080009cc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009cc:	b580      	push	{r7, lr}
 80009ce:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80009d0:	46c0      	nop			; (mov r8, r8)
 80009d2:	46bd      	mov	sp, r7
 80009d4:	bd80      	pop	{r7, pc}

080009d6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009d6:	b580      	push	{r7, lr}
 80009d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009da:	e7fe      	b.n	80009da <HardFault_Handler+0x4>

080009dc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80009dc:	b580      	push	{r7, lr}
 80009de:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80009e0:	46c0      	nop			; (mov r8, r8)
 80009e2:	46bd      	mov	sp, r7
 80009e4:	bd80      	pop	{r7, pc}

080009e6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80009e6:	b580      	push	{r7, lr}
 80009e8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80009ea:	46c0      	nop			; (mov r8, r8)
 80009ec:	46bd      	mov	sp, r7
 80009ee:	bd80      	pop	{r7, pc}

080009f0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80009f0:	b580      	push	{r7, lr}
 80009f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80009f4:	f000 fec4 	bl	8001780 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80009f8:	46c0      	nop			; (mov r8, r8)
 80009fa:	46bd      	mov	sp, r7
 80009fc:	bd80      	pop	{r7, pc}

080009fe <EXTI0_1_IRQHandler>:

/**
  * @brief This function handles EXTI line 0 and 1 interrupts.
  */
void EXTI0_1_IRQHandler(void)
{
 80009fe:	b580      	push	{r7, lr}
 8000a00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_1_IRQn 0 */

  /* USER CODE END EXTI0_1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BLOCK_PU_Pin);
 8000a02:	2001      	movs	r0, #1
 8000a04:	f002 fcec 	bl	80033e0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_1_IRQn 1 */

  /* USER CODE END EXTI0_1_IRQn 1 */
}
 8000a08:	46c0      	nop			; (mov r8, r8)
 8000a0a:	46bd      	mov	sp, r7
 8000a0c:	bd80      	pop	{r7, pc}
	...

08000a10 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000a10:	b580      	push	{r7, lr}
 8000a12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc);
 8000a14:	4b03      	ldr	r3, [pc, #12]	; (8000a24 <DMA1_Channel1_IRQHandler+0x14>)
 8000a16:	0018      	movs	r0, r3
 8000a18:	f002 f93e 	bl	8002c98 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8000a1c:	46c0      	nop			; (mov r8, r8)
 8000a1e:	46bd      	mov	sp, r7
 8000a20:	bd80      	pop	{r7, pc}
 8000a22:	46c0      	nop			; (mov r8, r8)
 8000a24:	200003fc 	.word	0x200003fc

08000a28 <DMA1_Channel4_5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 4 and 5 interrupts.
  */
void DMA1_Channel4_5_IRQHandler(void)
{
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_5_IRQn 0 */

  /* USER CODE END DMA1_Channel4_5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8000a2c:	4b05      	ldr	r3, [pc, #20]	; (8000a44 <DMA1_Channel4_5_IRQHandler+0x1c>)
 8000a2e:	0018      	movs	r0, r3
 8000a30:	f002 f932 	bl	8002c98 <HAL_DMA_IRQHandler>
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8000a34:	4b04      	ldr	r3, [pc, #16]	; (8000a48 <DMA1_Channel4_5_IRQHandler+0x20>)
 8000a36:	0018      	movs	r0, r3
 8000a38:	f002 f92e 	bl	8002c98 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_5_IRQn 1 */

  /* USER CODE END DMA1_Channel4_5_IRQn 1 */
}
 8000a3c:	46c0      	nop			; (mov r8, r8)
 8000a3e:	46bd      	mov	sp, r7
 8000a40:	bd80      	pop	{r7, pc}
 8000a42:	46c0      	nop			; (mov r8, r8)
 8000a44:	20000598 	.word	0x20000598
 8000a48:	20000554 	.word	0x20000554

08000a4c <TIM1_BRK_UP_TRG_COM_IRQHandler>:

/**
  * @brief This function handles TIM1 break, update, trigger and commutation interrupts.
  */
void TIM1_BRK_UP_TRG_COM_IRQHandler(void)
{
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_UP_TRG_COM_IRQn 0 */

  /* USER CODE END TIM1_BRK_UP_TRG_COM_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000a50:	4b03      	ldr	r3, [pc, #12]	; (8000a60 <TIM1_BRK_UP_TRG_COM_IRQHandler+0x14>)
 8000a52:	0018      	movs	r0, r3
 8000a54:	f004 f844 	bl	8004ae0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_UP_TRG_COM_IRQn 1 */

  /* USER CODE END TIM1_BRK_UP_TRG_COM_IRQn 1 */
}
 8000a58:	46c0      	nop			; (mov r8, r8)
 8000a5a:	46bd      	mov	sp, r7
 8000a5c:	bd80      	pop	{r7, pc}
 8000a5e:	46c0      	nop			; (mov r8, r8)
 8000a60:	200004d4 	.word	0x200004d4

08000a64 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8000a64:	b580      	push	{r7, lr}
 8000a66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000a68:	4b03      	ldr	r3, [pc, #12]	; (8000a78 <TIM1_CC_IRQHandler+0x14>)
 8000a6a:	0018      	movs	r0, r3
 8000a6c:	f004 f838 	bl	8004ae0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8000a70:	46c0      	nop			; (mov r8, r8)
 8000a72:	46bd      	mov	sp, r7
 8000a74:	bd80      	pop	{r7, pc}
 8000a76:	46c0      	nop			; (mov r8, r8)
 8000a78:	200004d4 	.word	0x200004d4

08000a7c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000a80:	4b0d      	ldr	r3, [pc, #52]	; (8000ab8 <TIM2_IRQHandler+0x3c>)
 8000a82:	0018      	movs	r0, r3
 8000a84:	f004 f82c 	bl	8004ae0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */


  	if (BlockGenerator==1) {
 8000a88:	4b0c      	ldr	r3, [pc, #48]	; (8000abc <TIM2_IRQHandler+0x40>)
 8000a8a:	681b      	ldr	r3, [r3, #0]
 8000a8c:	2b01      	cmp	r3, #1
 8000a8e:	d102      	bne.n	8000a96 <TIM2_IRQHandler+0x1a>
  	 Set_DAC_SINUS_ZERO();
 8000a90:	f000 fd24 	bl	80014dc <Set_DAC_SINUS_ZERO>
  	 return;
 8000a94:	e00e      	b.n	8000ab4 <TIM2_IRQHandler+0x38>
    }

  	HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1,DAC_ALIGN_12B_R,GetSinus());
 8000a96:	f000 fcef 	bl	8001478 <GetSinus>
 8000a9a:	0003      	movs	r3, r0
 8000a9c:	4808      	ldr	r0, [pc, #32]	; (8000ac0 <TIM2_IRQHandler+0x44>)
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	2100      	movs	r1, #0
 8000aa2:	f001 fe19 	bl	80026d8 <HAL_DAC_SetValue>

  	sin_step++;
 8000aa6:	4b07      	ldr	r3, [pc, #28]	; (8000ac4 <TIM2_IRQHandler+0x48>)
 8000aa8:	881b      	ldrh	r3, [r3, #0]
 8000aaa:	b29b      	uxth	r3, r3
 8000aac:	3301      	adds	r3, #1
 8000aae:	b29a      	uxth	r2, r3
 8000ab0:	4b04      	ldr	r3, [pc, #16]	; (8000ac4 <TIM2_IRQHandler+0x48>)
 8000ab2:	801a      	strh	r2, [r3, #0]

  /* USER CODE END TIM2_IRQn 1 */
}
 8000ab4:	46bd      	mov	sp, r7
 8000ab6:	bd80      	pop	{r7, pc}
 8000ab8:	20000514 	.word	0x20000514
 8000abc:	20000004 	.word	0x20000004
 8000ac0:	200004b0 	.word	0x200004b0
 8000ac4:	200003f8 	.word	0x200003f8

08000ac8 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global and DAC underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_DAC_IRQHandler(&hdac1);
 8000acc:	4b03      	ldr	r3, [pc, #12]	; (8000adc <TIM6_DAC_IRQHandler+0x14>)
 8000ace:	0018      	movs	r0, r3
 8000ad0:	f001 ff34 	bl	800293c <HAL_DAC_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000ad4:	46c0      	nop			; (mov r8, r8)
 8000ad6:	46bd      	mov	sp, r7
 8000ad8:	bd80      	pop	{r7, pc}
 8000ada:	46c0      	nop			; (mov r8, r8)
 8000adc:	200004b0 	.word	0x200004b0

08000ae0 <SystemInit>:
  *         Initialize the default HSI clock source, vector table location and the PLL configuration is reset.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001U;
 8000ae4:	4b1a      	ldr	r3, [pc, #104]	; (8000b50 <SystemInit+0x70>)
 8000ae6:	681a      	ldr	r2, [r3, #0]
 8000ae8:	4b19      	ldr	r3, [pc, #100]	; (8000b50 <SystemInit+0x70>)
 8000aea:	2101      	movs	r1, #1
 8000aec:	430a      	orrs	r2, r1
 8000aee:	601a      	str	r2, [r3, #0]

#if defined (STM32F051x8) || defined (STM32F058x8)
  /* Reset SW[1:0], HPRE[3:0], PPRE[2:0], ADCPRE and MCOSEL[2:0] bits */
  RCC->CFGR &= (uint32_t)0xF8FFB80CU;
 8000af0:	4b17      	ldr	r3, [pc, #92]	; (8000b50 <SystemInit+0x70>)
 8000af2:	685a      	ldr	r2, [r3, #4]
 8000af4:	4b16      	ldr	r3, [pc, #88]	; (8000b50 <SystemInit+0x70>)
 8000af6:	4917      	ldr	r1, [pc, #92]	; (8000b54 <SystemInit+0x74>)
 8000af8:	400a      	ands	r2, r1
 8000afa:	605a      	str	r2, [r3, #4]
  /* Reset SW[1:0], HPRE[3:0], PPRE[2:0], ADCPRE, MCOSEL[2:0], MCOPRE[2:0] and PLLNODIV bits */
  RCC->CFGR &= (uint32_t)0x08FFB80CU;
#endif /* STM32F051x8 or STM32F058x8 */
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFFU;
 8000afc:	4b14      	ldr	r3, [pc, #80]	; (8000b50 <SystemInit+0x70>)
 8000afe:	681a      	ldr	r2, [r3, #0]
 8000b00:	4b13      	ldr	r3, [pc, #76]	; (8000b50 <SystemInit+0x70>)
 8000b02:	4915      	ldr	r1, [pc, #84]	; (8000b58 <SystemInit+0x78>)
 8000b04:	400a      	ands	r2, r1
 8000b06:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFFU;
 8000b08:	4b11      	ldr	r3, [pc, #68]	; (8000b50 <SystemInit+0x70>)
 8000b0a:	681a      	ldr	r2, [r3, #0]
 8000b0c:	4b10      	ldr	r3, [pc, #64]	; (8000b50 <SystemInit+0x70>)
 8000b0e:	4913      	ldr	r1, [pc, #76]	; (8000b5c <SystemInit+0x7c>)
 8000b10:	400a      	ands	r2, r1
 8000b12:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE and PLLMUL[3:0] bits */
  RCC->CFGR &= (uint32_t)0xFFC0FFFFU;
 8000b14:	4b0e      	ldr	r3, [pc, #56]	; (8000b50 <SystemInit+0x70>)
 8000b16:	685a      	ldr	r2, [r3, #4]
 8000b18:	4b0d      	ldr	r3, [pc, #52]	; (8000b50 <SystemInit+0x70>)
 8000b1a:	4911      	ldr	r1, [pc, #68]	; (8000b60 <SystemInit+0x80>)
 8000b1c:	400a      	ands	r2, r1
 8000b1e:	605a      	str	r2, [r3, #4]

  /* Reset PREDIV[3:0] bits */
  RCC->CFGR2 &= (uint32_t)0xFFFFFFF0U;
 8000b20:	4b0b      	ldr	r3, [pc, #44]	; (8000b50 <SystemInit+0x70>)
 8000b22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000b24:	4b0a      	ldr	r3, [pc, #40]	; (8000b50 <SystemInit+0x70>)
 8000b26:	210f      	movs	r1, #15
 8000b28:	438a      	bics	r2, r1
 8000b2a:	62da      	str	r2, [r3, #44]	; 0x2c
#elif defined (STM32F030x6) || defined (STM32F030x8) || defined (STM32F031x6) || defined (STM32F038xx) || defined (STM32F030xC)
  /* Reset USART1SW[1:0], I2C1SW and ADCSW bits */
  RCC->CFGR3 &= (uint32_t)0xFFFFFEECU;
#elif defined (STM32F051x8) || defined (STM32F058xx)
  /* Reset USART1SW[1:0], I2C1SW, CECSW and ADCSW bits */
  RCC->CFGR3 &= (uint32_t)0xFFFFFEACU;
 8000b2c:	4b08      	ldr	r3, [pc, #32]	; (8000b50 <SystemInit+0x70>)
 8000b2e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000b30:	4b07      	ldr	r3, [pc, #28]	; (8000b50 <SystemInit+0x70>)
 8000b32:	490c      	ldr	r1, [pc, #48]	; (8000b64 <SystemInit+0x84>)
 8000b34:	400a      	ands	r2, r1
 8000b36:	631a      	str	r2, [r3, #48]	; 0x30
#else
 #warning "No target selected"
#endif

  /* Reset HSI14 bit */
  RCC->CR2 &= (uint32_t)0xFFFFFFFEU;
 8000b38:	4b05      	ldr	r3, [pc, #20]	; (8000b50 <SystemInit+0x70>)
 8000b3a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000b3c:	4b04      	ldr	r3, [pc, #16]	; (8000b50 <SystemInit+0x70>)
 8000b3e:	2101      	movs	r1, #1
 8000b40:	438a      	bics	r2, r1
 8000b42:	635a      	str	r2, [r3, #52]	; 0x34

  /* Disable all interrupts */
  RCC->CIR = 0x00000000U;
 8000b44:	4b02      	ldr	r3, [pc, #8]	; (8000b50 <SystemInit+0x70>)
 8000b46:	2200      	movs	r2, #0
 8000b48:	609a      	str	r2, [r3, #8]

}
 8000b4a:	46c0      	nop			; (mov r8, r8)
 8000b4c:	46bd      	mov	sp, r7
 8000b4e:	bd80      	pop	{r7, pc}
 8000b50:	40021000 	.word	0x40021000
 8000b54:	f8ffb80c 	.word	0xf8ffb80c
 8000b58:	fef6ffff 	.word	0xfef6ffff
 8000b5c:	fffbffff 	.word	0xfffbffff
 8000b60:	ffc0ffff 	.word	0xffc0ffff
 8000b64:	fffffeac 	.word	0xfffffeac

08000b68 <MX_TIM1_Init>:
TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim2;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	b094      	sub	sp, #80	; 0x50
 8000b6c:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000b6e:	2340      	movs	r3, #64	; 0x40
 8000b70:	18fb      	adds	r3, r7, r3
 8000b72:	0018      	movs	r0, r3
 8000b74:	2310      	movs	r3, #16
 8000b76:	001a      	movs	r2, r3
 8000b78:	2100      	movs	r1, #0
 8000b7a:	f006 f9ab 	bl	8006ed4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b7e:	2338      	movs	r3, #56	; 0x38
 8000b80:	18fb      	adds	r3, r7, r3
 8000b82:	0018      	movs	r0, r3
 8000b84:	2308      	movs	r3, #8
 8000b86:	001a      	movs	r2, r3
 8000b88:	2100      	movs	r1, #0
 8000b8a:	f006 f9a3 	bl	8006ed4 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000b8e:	231c      	movs	r3, #28
 8000b90:	18fb      	adds	r3, r7, r3
 8000b92:	0018      	movs	r0, r3
 8000b94:	231c      	movs	r3, #28
 8000b96:	001a      	movs	r2, r3
 8000b98:	2100      	movs	r1, #0
 8000b9a:	f006 f99b 	bl	8006ed4 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000b9e:	003b      	movs	r3, r7
 8000ba0:	0018      	movs	r0, r3
 8000ba2:	231c      	movs	r3, #28
 8000ba4:	001a      	movs	r2, r3
 8000ba6:	2100      	movs	r1, #0
 8000ba8:	f006 f994 	bl	8006ed4 <memset>

  htim1.Instance = TIM1;
 8000bac:	4b49      	ldr	r3, [pc, #292]	; (8000cd4 <MX_TIM1_Init+0x16c>)
 8000bae:	4a4a      	ldr	r2, [pc, #296]	; (8000cd8 <MX_TIM1_Init+0x170>)
 8000bb0:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 480;
 8000bb2:	4b48      	ldr	r3, [pc, #288]	; (8000cd4 <MX_TIM1_Init+0x16c>)
 8000bb4:	22f0      	movs	r2, #240	; 0xf0
 8000bb6:	0052      	lsls	r2, r2, #1
 8000bb8:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000bba:	4b46      	ldr	r3, [pc, #280]	; (8000cd4 <MX_TIM1_Init+0x16c>)
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000;
 8000bc0:	4b44      	ldr	r3, [pc, #272]	; (8000cd4 <MX_TIM1_Init+0x16c>)
 8000bc2:	22fa      	movs	r2, #250	; 0xfa
 8000bc4:	0092      	lsls	r2, r2, #2
 8000bc6:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000bc8:	4b42      	ldr	r3, [pc, #264]	; (8000cd4 <MX_TIM1_Init+0x16c>)
 8000bca:	2200      	movs	r2, #0
 8000bcc:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000bce:	4b41      	ldr	r3, [pc, #260]	; (8000cd4 <MX_TIM1_Init+0x16c>)
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000bd4:	4b3f      	ldr	r3, [pc, #252]	; (8000cd4 <MX_TIM1_Init+0x16c>)
 8000bd6:	2280      	movs	r2, #128	; 0x80
 8000bd8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000bda:	4b3e      	ldr	r3, [pc, #248]	; (8000cd4 <MX_TIM1_Init+0x16c>)
 8000bdc:	0018      	movs	r0, r3
 8000bde:	f003 fb29 	bl	8004234 <HAL_TIM_Base_Init>
 8000be2:	1e03      	subs	r3, r0, #0
 8000be4:	d001      	beq.n	8000bea <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 8000be6:	f7ff febf 	bl	8000968 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000bea:	2140      	movs	r1, #64	; 0x40
 8000bec:	187b      	adds	r3, r7, r1
 8000bee:	2280      	movs	r2, #128	; 0x80
 8000bf0:	0152      	lsls	r2, r2, #5
 8000bf2:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000bf4:	187a      	adds	r2, r7, r1
 8000bf6:	4b37      	ldr	r3, [pc, #220]	; (8000cd4 <MX_TIM1_Init+0x16c>)
 8000bf8:	0011      	movs	r1, r2
 8000bfa:	0018      	movs	r0, r3
 8000bfc:	f004 f9a4 	bl	8004f48 <HAL_TIM_ConfigClockSource>
 8000c00:	1e03      	subs	r3, r0, #0
 8000c02:	d001      	beq.n	8000c08 <MX_TIM1_Init+0xa0>
  {
    Error_Handler();
 8000c04:	f7ff feb0 	bl	8000968 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim1) != HAL_OK)
 8000c08:	4b32      	ldr	r3, [pc, #200]	; (8000cd4 <MX_TIM1_Init+0x16c>)
 8000c0a:	0018      	movs	r0, r3
 8000c0c:	f003 fd40 	bl	8004690 <HAL_TIM_OC_Init>
 8000c10:	1e03      	subs	r3, r0, #0
 8000c12:	d001      	beq.n	8000c18 <MX_TIM1_Init+0xb0>
  {
    Error_Handler();
 8000c14:	f7ff fea8 	bl	8000968 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c18:	2138      	movs	r1, #56	; 0x38
 8000c1a:	187b      	adds	r3, r7, r1
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c20:	187b      	adds	r3, r7, r1
 8000c22:	2200      	movs	r2, #0
 8000c24:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000c26:	187a      	adds	r2, r7, r1
 8000c28:	4b2a      	ldr	r3, [pc, #168]	; (8000cd4 <MX_TIM1_Init+0x16c>)
 8000c2a:	0011      	movs	r1, r2
 8000c2c:	0018      	movs	r0, r3
 8000c2e:	f005 fa57 	bl	80060e0 <HAL_TIMEx_MasterConfigSynchronization>
 8000c32:	1e03      	subs	r3, r0, #0
 8000c34:	d001      	beq.n	8000c3a <MX_TIM1_Init+0xd2>
  {
    Error_Handler();
 8000c36:	f7ff fe97 	bl	8000968 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TOGGLE;
 8000c3a:	211c      	movs	r1, #28
 8000c3c:	187b      	adds	r3, r7, r1
 8000c3e:	2230      	movs	r2, #48	; 0x30
 8000c40:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 500;
 8000c42:	187b      	adds	r3, r7, r1
 8000c44:	22fa      	movs	r2, #250	; 0xfa
 8000c46:	0052      	lsls	r2, r2, #1
 8000c48:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000c4a:	187b      	adds	r3, r7, r1
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000c50:	187b      	adds	r3, r7, r1
 8000c52:	2200      	movs	r2, #0
 8000c54:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000c56:	187b      	adds	r3, r7, r1
 8000c58:	2200      	movs	r2, #0
 8000c5a:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000c5c:	187b      	adds	r3, r7, r1
 8000c5e:	2200      	movs	r2, #0
 8000c60:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000c62:	187b      	adds	r3, r7, r1
 8000c64:	2200      	movs	r2, #0
 8000c66:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000c68:	1879      	adds	r1, r7, r1
 8000c6a:	4b1a      	ldr	r3, [pc, #104]	; (8000cd4 <MX_TIM1_Init+0x16c>)
 8000c6c:	2208      	movs	r2, #8
 8000c6e:	0018      	movs	r0, r3
 8000c70:	f004 f84c 	bl	8004d0c <HAL_TIM_OC_ConfigChannel>
 8000c74:	1e03      	subs	r3, r0, #0
 8000c76:	d001      	beq.n	8000c7c <MX_TIM1_Init+0x114>
  {
    Error_Handler();
 8000c78:	f7ff fe76 	bl	8000968 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000c7c:	003b      	movs	r3, r7
 8000c7e:	2200      	movs	r2, #0
 8000c80:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000c82:	003b      	movs	r3, r7
 8000c84:	2200      	movs	r2, #0
 8000c86:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000c88:	003b      	movs	r3, r7
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	609a      	str	r2, [r3, #8]
  //sBreakDeadTimeConfig.DeadTime = 200;
  sBreakDeadTimeConfig.DeadTime = SetDeadTime();
 8000c8e:	f000 fa0b 	bl	80010a8 <SetDeadTime>
 8000c92:	0003      	movs	r3, r0
 8000c94:	001a      	movs	r2, r3
 8000c96:	003b      	movs	r3, r7
 8000c98:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000c9a:	003b      	movs	r3, r7
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000ca0:	003b      	movs	r3, r7
 8000ca2:	2280      	movs	r2, #128	; 0x80
 8000ca4:	0192      	lsls	r2, r2, #6
 8000ca6:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000ca8:	003b      	movs	r3, r7
 8000caa:	2200      	movs	r2, #0
 8000cac:	619a      	str	r2, [r3, #24]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000cae:	003a      	movs	r2, r7
 8000cb0:	4b08      	ldr	r3, [pc, #32]	; (8000cd4 <MX_TIM1_Init+0x16c>)
 8000cb2:	0011      	movs	r1, r2
 8000cb4:	0018      	movs	r0, r3
 8000cb6:	f005 fabb 	bl	8006230 <HAL_TIMEx_ConfigBreakDeadTime>
 8000cba:	1e03      	subs	r3, r0, #0
 8000cbc:	d001      	beq.n	8000cc2 <MX_TIM1_Init+0x15a>
  {
    Error_Handler();
 8000cbe:	f7ff fe53 	bl	8000968 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim1);
 8000cc2:	4b04      	ldr	r3, [pc, #16]	; (8000cd4 <MX_TIM1_Init+0x16c>)
 8000cc4:	0018      	movs	r0, r3
 8000cc6:	f000 f8a7 	bl	8000e18 <HAL_TIM_MspPostInit>

}
 8000cca:	46c0      	nop			; (mov r8, r8)
 8000ccc:	46bd      	mov	sp, r7
 8000cce:	b014      	add	sp, #80	; 0x50
 8000cd0:	bd80      	pop	{r7, pc}
 8000cd2:	46c0      	nop			; (mov r8, r8)
 8000cd4:	200004d4 	.word	0x200004d4
 8000cd8:	40012c00 	.word	0x40012c00

08000cdc <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	b086      	sub	sp, #24
 8000ce0:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000ce2:	2308      	movs	r3, #8
 8000ce4:	18fb      	adds	r3, r7, r3
 8000ce6:	0018      	movs	r0, r3
 8000ce8:	2310      	movs	r3, #16
 8000cea:	001a      	movs	r2, r3
 8000cec:	2100      	movs	r1, #0
 8000cee:	f006 f8f1 	bl	8006ed4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000cf2:	003b      	movs	r3, r7
 8000cf4:	0018      	movs	r0, r3
 8000cf6:	2308      	movs	r3, #8
 8000cf8:	001a      	movs	r2, r3
 8000cfa:	2100      	movs	r1, #0
 8000cfc:	f006 f8ea 	bl	8006ed4 <memset>

  htim2.Instance = TIM2;
 8000d00:	4b1f      	ldr	r3, [pc, #124]	; (8000d80 <MX_TIM2_Init+0xa4>)
 8000d02:	2280      	movs	r2, #128	; 0x80
 8000d04:	05d2      	lsls	r2, r2, #23
 8000d06:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000d08:	4b1d      	ldr	r3, [pc, #116]	; (8000d80 <MX_TIM2_Init+0xa4>)
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d0e:	4b1c      	ldr	r3, [pc, #112]	; (8000d80 <MX_TIM2_Init+0xa4>)
 8000d10:	2200      	movs	r2, #0
 8000d12:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000;
 8000d14:	4b1a      	ldr	r3, [pc, #104]	; (8000d80 <MX_TIM2_Init+0xa4>)
 8000d16:	22fa      	movs	r2, #250	; 0xfa
 8000d18:	0092      	lsls	r2, r2, #2
 8000d1a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d1c:	4b18      	ldr	r3, [pc, #96]	; (8000d80 <MX_TIM2_Init+0xa4>)
 8000d1e:	2200      	movs	r2, #0
 8000d20:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000d22:	4b17      	ldr	r3, [pc, #92]	; (8000d80 <MX_TIM2_Init+0xa4>)
 8000d24:	2280      	movs	r2, #128	; 0x80
 8000d26:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000d28:	4b15      	ldr	r3, [pc, #84]	; (8000d80 <MX_TIM2_Init+0xa4>)
 8000d2a:	0018      	movs	r0, r3
 8000d2c:	f003 fa82 	bl	8004234 <HAL_TIM_Base_Init>
 8000d30:	1e03      	subs	r3, r0, #0
 8000d32:	d001      	beq.n	8000d38 <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 8000d34:	f7ff fe18 	bl	8000968 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000d38:	2108      	movs	r1, #8
 8000d3a:	187b      	adds	r3, r7, r1
 8000d3c:	2280      	movs	r2, #128	; 0x80
 8000d3e:	0152      	lsls	r2, r2, #5
 8000d40:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000d42:	187a      	adds	r2, r7, r1
 8000d44:	4b0e      	ldr	r3, [pc, #56]	; (8000d80 <MX_TIM2_Init+0xa4>)
 8000d46:	0011      	movs	r1, r2
 8000d48:	0018      	movs	r0, r3
 8000d4a:	f004 f8fd 	bl	8004f48 <HAL_TIM_ConfigClockSource>
 8000d4e:	1e03      	subs	r3, r0, #0
 8000d50:	d001      	beq.n	8000d56 <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 8000d52:	f7ff fe09 	bl	8000968 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000d56:	003b      	movs	r3, r7
 8000d58:	2220      	movs	r2, #32
 8000d5a:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d5c:	003b      	movs	r3, r7
 8000d5e:	2200      	movs	r2, #0
 8000d60:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000d62:	003a      	movs	r2, r7
 8000d64:	4b06      	ldr	r3, [pc, #24]	; (8000d80 <MX_TIM2_Init+0xa4>)
 8000d66:	0011      	movs	r1, r2
 8000d68:	0018      	movs	r0, r3
 8000d6a:	f005 f9b9 	bl	80060e0 <HAL_TIMEx_MasterConfigSynchronization>
 8000d6e:	1e03      	subs	r3, r0, #0
 8000d70:	d001      	beq.n	8000d76 <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8000d72:	f7ff fdf9 	bl	8000968 <Error_Handler>
  }

}
 8000d76:	46c0      	nop			; (mov r8, r8)
 8000d78:	46bd      	mov	sp, r7
 8000d7a:	b006      	add	sp, #24
 8000d7c:	bd80      	pop	{r7, pc}
 8000d7e:	46c0      	nop			; (mov r8, r8)
 8000d80:	20000514 	.word	0x20000514

08000d84 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000d84:	b580      	push	{r7, lr}
 8000d86:	b084      	sub	sp, #16
 8000d88:	af00      	add	r7, sp, #0
 8000d8a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	681b      	ldr	r3, [r3, #0]
 8000d90:	4a1f      	ldr	r2, [pc, #124]	; (8000e10 <HAL_TIM_Base_MspInit+0x8c>)
 8000d92:	4293      	cmp	r3, r2
 8000d94:	d11e      	bne.n	8000dd4 <HAL_TIM_Base_MspInit+0x50>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000d96:	4b1f      	ldr	r3, [pc, #124]	; (8000e14 <HAL_TIM_Base_MspInit+0x90>)
 8000d98:	699a      	ldr	r2, [r3, #24]
 8000d9a:	4b1e      	ldr	r3, [pc, #120]	; (8000e14 <HAL_TIM_Base_MspInit+0x90>)
 8000d9c:	2180      	movs	r1, #128	; 0x80
 8000d9e:	0109      	lsls	r1, r1, #4
 8000da0:	430a      	orrs	r2, r1
 8000da2:	619a      	str	r2, [r3, #24]
 8000da4:	4b1b      	ldr	r3, [pc, #108]	; (8000e14 <HAL_TIM_Base_MspInit+0x90>)
 8000da6:	699a      	ldr	r2, [r3, #24]
 8000da8:	2380      	movs	r3, #128	; 0x80
 8000daa:	011b      	lsls	r3, r3, #4
 8000dac:	4013      	ands	r3, r2
 8000dae:	60fb      	str	r3, [r7, #12]
 8000db0:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_UP_TRG_COM_IRQn, 0, 0);
 8000db2:	2200      	movs	r2, #0
 8000db4:	2100      	movs	r1, #0
 8000db6:	200d      	movs	r0, #13
 8000db8:	f001 fb68 	bl	800248c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_UP_TRG_COM_IRQn);
 8000dbc:	200d      	movs	r0, #13
 8000dbe:	f001 fb85 	bl	80024cc <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	2100      	movs	r1, #0
 8000dc6:	200e      	movs	r0, #14
 8000dc8:	f001 fb60 	bl	800248c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8000dcc:	200e      	movs	r0, #14
 8000dce:	f001 fb7d 	bl	80024cc <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8000dd2:	e019      	b.n	8000e08 <HAL_TIM_Base_MspInit+0x84>
  else if(tim_baseHandle->Instance==TIM2)
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	681a      	ldr	r2, [r3, #0]
 8000dd8:	2380      	movs	r3, #128	; 0x80
 8000dda:	05db      	lsls	r3, r3, #23
 8000ddc:	429a      	cmp	r2, r3
 8000dde:	d113      	bne.n	8000e08 <HAL_TIM_Base_MspInit+0x84>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000de0:	4b0c      	ldr	r3, [pc, #48]	; (8000e14 <HAL_TIM_Base_MspInit+0x90>)
 8000de2:	69da      	ldr	r2, [r3, #28]
 8000de4:	4b0b      	ldr	r3, [pc, #44]	; (8000e14 <HAL_TIM_Base_MspInit+0x90>)
 8000de6:	2101      	movs	r1, #1
 8000de8:	430a      	orrs	r2, r1
 8000dea:	61da      	str	r2, [r3, #28]
 8000dec:	4b09      	ldr	r3, [pc, #36]	; (8000e14 <HAL_TIM_Base_MspInit+0x90>)
 8000dee:	69db      	ldr	r3, [r3, #28]
 8000df0:	2201      	movs	r2, #1
 8000df2:	4013      	ands	r3, r2
 8000df4:	60bb      	str	r3, [r7, #8]
 8000df6:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000df8:	2200      	movs	r2, #0
 8000dfa:	2100      	movs	r1, #0
 8000dfc:	200f      	movs	r0, #15
 8000dfe:	f001 fb45 	bl	800248c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000e02:	200f      	movs	r0, #15
 8000e04:	f001 fb62 	bl	80024cc <HAL_NVIC_EnableIRQ>
}
 8000e08:	46c0      	nop			; (mov r8, r8)
 8000e0a:	46bd      	mov	sp, r7
 8000e0c:	b004      	add	sp, #16
 8000e0e:	bd80      	pop	{r7, pc}
 8000e10:	40012c00 	.word	0x40012c00
 8000e14:	40021000 	.word	0x40021000

08000e18 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8000e18:	b590      	push	{r4, r7, lr}
 8000e1a:	b08b      	sub	sp, #44	; 0x2c
 8000e1c:	af00      	add	r7, sp, #0
 8000e1e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e20:	2314      	movs	r3, #20
 8000e22:	18fb      	adds	r3, r7, r3
 8000e24:	0018      	movs	r0, r3
 8000e26:	2314      	movs	r3, #20
 8000e28:	001a      	movs	r2, r3
 8000e2a:	2100      	movs	r1, #0
 8000e2c:	f006 f852 	bl	8006ed4 <memset>
  if(timHandle->Instance==TIM1)
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	681b      	ldr	r3, [r3, #0]
 8000e34:	4a29      	ldr	r2, [pc, #164]	; (8000edc <HAL_TIM_MspPostInit+0xc4>)
 8000e36:	4293      	cmp	r3, r2
 8000e38:	d14b      	bne.n	8000ed2 <HAL_TIM_MspPostInit+0xba>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e3a:	4b29      	ldr	r3, [pc, #164]	; (8000ee0 <HAL_TIM_MspPostInit+0xc8>)
 8000e3c:	695a      	ldr	r2, [r3, #20]
 8000e3e:	4b28      	ldr	r3, [pc, #160]	; (8000ee0 <HAL_TIM_MspPostInit+0xc8>)
 8000e40:	2180      	movs	r1, #128	; 0x80
 8000e42:	0289      	lsls	r1, r1, #10
 8000e44:	430a      	orrs	r2, r1
 8000e46:	615a      	str	r2, [r3, #20]
 8000e48:	4b25      	ldr	r3, [pc, #148]	; (8000ee0 <HAL_TIM_MspPostInit+0xc8>)
 8000e4a:	695a      	ldr	r2, [r3, #20]
 8000e4c:	2380      	movs	r3, #128	; 0x80
 8000e4e:	029b      	lsls	r3, r3, #10
 8000e50:	4013      	ands	r3, r2
 8000e52:	613b      	str	r3, [r7, #16]
 8000e54:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e56:	4b22      	ldr	r3, [pc, #136]	; (8000ee0 <HAL_TIM_MspPostInit+0xc8>)
 8000e58:	695a      	ldr	r2, [r3, #20]
 8000e5a:	4b21      	ldr	r3, [pc, #132]	; (8000ee0 <HAL_TIM_MspPostInit+0xc8>)
 8000e5c:	2180      	movs	r1, #128	; 0x80
 8000e5e:	02c9      	lsls	r1, r1, #11
 8000e60:	430a      	orrs	r2, r1
 8000e62:	615a      	str	r2, [r3, #20]
 8000e64:	4b1e      	ldr	r3, [pc, #120]	; (8000ee0 <HAL_TIM_MspPostInit+0xc8>)
 8000e66:	695a      	ldr	r2, [r3, #20]
 8000e68:	2380      	movs	r3, #128	; 0x80
 8000e6a:	02db      	lsls	r3, r3, #11
 8000e6c:	4013      	ands	r3, r2
 8000e6e:	60fb      	str	r3, [r7, #12]
 8000e70:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration    
    PA10     ------> TIM1_CH3
    PB15     ------> TIM1_CH3N 
    */
    GPIO_InitStruct.Pin = CH1_Pin;
 8000e72:	2114      	movs	r1, #20
 8000e74:	187b      	adds	r3, r7, r1
 8000e76:	2280      	movs	r2, #128	; 0x80
 8000e78:	00d2      	lsls	r2, r2, #3
 8000e7a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e7c:	187b      	adds	r3, r7, r1
 8000e7e:	2202      	movs	r2, #2
 8000e80:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000e82:	187b      	adds	r3, r7, r1
 8000e84:	2202      	movs	r2, #2
 8000e86:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000e88:	187b      	adds	r3, r7, r1
 8000e8a:	2203      	movs	r2, #3
 8000e8c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8000e8e:	187b      	adds	r3, r7, r1
 8000e90:	2202      	movs	r2, #2
 8000e92:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(CH1_GPIO_Port, &GPIO_InitStruct);
 8000e94:	000c      	movs	r4, r1
 8000e96:	187a      	adds	r2, r7, r1
 8000e98:	2390      	movs	r3, #144	; 0x90
 8000e9a:	05db      	lsls	r3, r3, #23
 8000e9c:	0011      	movs	r1, r2
 8000e9e:	0018      	movs	r0, r3
 8000ea0:	f001 ffe4 	bl	8002e6c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = CH2_Pin;
 8000ea4:	0021      	movs	r1, r4
 8000ea6:	187b      	adds	r3, r7, r1
 8000ea8:	2280      	movs	r2, #128	; 0x80
 8000eaa:	0212      	lsls	r2, r2, #8
 8000eac:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000eae:	187b      	adds	r3, r7, r1
 8000eb0:	2202      	movs	r2, #2
 8000eb2:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000eb4:	187b      	adds	r3, r7, r1
 8000eb6:	2202      	movs	r2, #2
 8000eb8:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000eba:	187b      	adds	r3, r7, r1
 8000ebc:	2203      	movs	r2, #3
 8000ebe:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8000ec0:	187b      	adds	r3, r7, r1
 8000ec2:	2202      	movs	r2, #2
 8000ec4:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(CH2_GPIO_Port, &GPIO_InitStruct);
 8000ec6:	187b      	adds	r3, r7, r1
 8000ec8:	4a06      	ldr	r2, [pc, #24]	; (8000ee4 <HAL_TIM_MspPostInit+0xcc>)
 8000eca:	0019      	movs	r1, r3
 8000ecc:	0010      	movs	r0, r2
 8000ece:	f001 ffcd 	bl	8002e6c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8000ed2:	46c0      	nop			; (mov r8, r8)
 8000ed4:	46bd      	mov	sp, r7
 8000ed6:	b00b      	add	sp, #44	; 0x2c
 8000ed8:	bd90      	pop	{r4, r7, pc}
 8000eda:	46c0      	nop			; (mov r8, r8)
 8000edc:	40012c00 	.word	0x40012c00
 8000ee0:	40021000 	.word	0x40021000
 8000ee4:	48000400 	.word	0x48000400

08000ee8 <MX_USART2_UART_Init>:
DMA_HandleTypeDef hdma_usart2_tx;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 8000eec:	4b14      	ldr	r3, [pc, #80]	; (8000f40 <MX_USART2_UART_Init+0x58>)
 8000eee:	4a15      	ldr	r2, [pc, #84]	; (8000f44 <MX_USART2_UART_Init+0x5c>)
 8000ef0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000ef2:	4b13      	ldr	r3, [pc, #76]	; (8000f40 <MX_USART2_UART_Init+0x58>)
 8000ef4:	22e1      	movs	r2, #225	; 0xe1
 8000ef6:	0252      	lsls	r2, r2, #9
 8000ef8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000efa:	4b11      	ldr	r3, [pc, #68]	; (8000f40 <MX_USART2_UART_Init+0x58>)
 8000efc:	2200      	movs	r2, #0
 8000efe:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000f00:	4b0f      	ldr	r3, [pc, #60]	; (8000f40 <MX_USART2_UART_Init+0x58>)
 8000f02:	2200      	movs	r2, #0
 8000f04:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000f06:	4b0e      	ldr	r3, [pc, #56]	; (8000f40 <MX_USART2_UART_Init+0x58>)
 8000f08:	2200      	movs	r2, #0
 8000f0a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000f0c:	4b0c      	ldr	r3, [pc, #48]	; (8000f40 <MX_USART2_UART_Init+0x58>)
 8000f0e:	220c      	movs	r2, #12
 8000f10:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f12:	4b0b      	ldr	r3, [pc, #44]	; (8000f40 <MX_USART2_UART_Init+0x58>)
 8000f14:	2200      	movs	r2, #0
 8000f16:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f18:	4b09      	ldr	r3, [pc, #36]	; (8000f40 <MX_USART2_UART_Init+0x58>)
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000f1e:	4b08      	ldr	r3, [pc, #32]	; (8000f40 <MX_USART2_UART_Init+0x58>)
 8000f20:	2200      	movs	r2, #0
 8000f22:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000f24:	4b06      	ldr	r3, [pc, #24]	; (8000f40 <MX_USART2_UART_Init+0x58>)
 8000f26:	2200      	movs	r2, #0
 8000f28:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000f2a:	4b05      	ldr	r3, [pc, #20]	; (8000f40 <MX_USART2_UART_Init+0x58>)
 8000f2c:	0018      	movs	r0, r3
 8000f2e:	f005 fac9 	bl	80064c4 <HAL_UART_Init>
 8000f32:	1e03      	subs	r3, r0, #0
 8000f34:	d001      	beq.n	8000f3a <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000f36:	f7ff fd17 	bl	8000968 <Error_Handler>
  }

}
 8000f3a:	46c0      	nop			; (mov r8, r8)
 8000f3c:	46bd      	mov	sp, r7
 8000f3e:	bd80      	pop	{r7, pc}
 8000f40:	200005dc 	.word	0x200005dc
 8000f44:	40004400 	.word	0x40004400

08000f48 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	b08a      	sub	sp, #40	; 0x28
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f50:	2314      	movs	r3, #20
 8000f52:	18fb      	adds	r3, r7, r3
 8000f54:	0018      	movs	r0, r3
 8000f56:	2314      	movs	r3, #20
 8000f58:	001a      	movs	r2, r3
 8000f5a:	2100      	movs	r1, #0
 8000f5c:	f005 ffba 	bl	8006ed4 <memset>
  if(uartHandle->Instance==USART2)
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	4a43      	ldr	r2, [pc, #268]	; (8001074 <HAL_UART_MspInit+0x12c>)
 8000f66:	4293      	cmp	r3, r2
 8000f68:	d000      	beq.n	8000f6c <HAL_UART_MspInit+0x24>
 8000f6a:	e07e      	b.n	800106a <HAL_UART_MspInit+0x122>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000f6c:	4b42      	ldr	r3, [pc, #264]	; (8001078 <HAL_UART_MspInit+0x130>)
 8000f6e:	69da      	ldr	r2, [r3, #28]
 8000f70:	4b41      	ldr	r3, [pc, #260]	; (8001078 <HAL_UART_MspInit+0x130>)
 8000f72:	2180      	movs	r1, #128	; 0x80
 8000f74:	0289      	lsls	r1, r1, #10
 8000f76:	430a      	orrs	r2, r1
 8000f78:	61da      	str	r2, [r3, #28]
 8000f7a:	4b3f      	ldr	r3, [pc, #252]	; (8001078 <HAL_UART_MspInit+0x130>)
 8000f7c:	69da      	ldr	r2, [r3, #28]
 8000f7e:	2380      	movs	r3, #128	; 0x80
 8000f80:	029b      	lsls	r3, r3, #10
 8000f82:	4013      	ands	r3, r2
 8000f84:	613b      	str	r3, [r7, #16]
 8000f86:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f88:	4b3b      	ldr	r3, [pc, #236]	; (8001078 <HAL_UART_MspInit+0x130>)
 8000f8a:	695a      	ldr	r2, [r3, #20]
 8000f8c:	4b3a      	ldr	r3, [pc, #232]	; (8001078 <HAL_UART_MspInit+0x130>)
 8000f8e:	2180      	movs	r1, #128	; 0x80
 8000f90:	0289      	lsls	r1, r1, #10
 8000f92:	430a      	orrs	r2, r1
 8000f94:	615a      	str	r2, [r3, #20]
 8000f96:	4b38      	ldr	r3, [pc, #224]	; (8001078 <HAL_UART_MspInit+0x130>)
 8000f98:	695a      	ldr	r2, [r3, #20]
 8000f9a:	2380      	movs	r3, #128	; 0x80
 8000f9c:	029b      	lsls	r3, r3, #10
 8000f9e:	4013      	ands	r3, r2
 8000fa0:	60fb      	str	r3, [r7, #12]
 8000fa2:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration    
    PA15     ------> USART2_RX
    PA2     ------> USART2_TX 
    */
    GPIO_InitStruct.Pin = RX1_Pin|TX1_Pin;
 8000fa4:	2114      	movs	r1, #20
 8000fa6:	187b      	adds	r3, r7, r1
 8000fa8:	4a34      	ldr	r2, [pc, #208]	; (800107c <HAL_UART_MspInit+0x134>)
 8000faa:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fac:	187b      	adds	r3, r7, r1
 8000fae:	2202      	movs	r2, #2
 8000fb0:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fb2:	187b      	adds	r3, r7, r1
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000fb8:	187b      	adds	r3, r7, r1
 8000fba:	2203      	movs	r2, #3
 8000fbc:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8000fbe:	187b      	adds	r3, r7, r1
 8000fc0:	2201      	movs	r2, #1
 8000fc2:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fc4:	187a      	adds	r2, r7, r1
 8000fc6:	2390      	movs	r3, #144	; 0x90
 8000fc8:	05db      	lsls	r3, r3, #23
 8000fca:	0011      	movs	r1, r2
 8000fcc:	0018      	movs	r0, r3
 8000fce:	f001 ff4d 	bl	8002e6c <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Channel5;
 8000fd2:	4b2b      	ldr	r3, [pc, #172]	; (8001080 <HAL_UART_MspInit+0x138>)
 8000fd4:	4a2b      	ldr	r2, [pc, #172]	; (8001084 <HAL_UART_MspInit+0x13c>)
 8000fd6:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000fd8:	4b29      	ldr	r3, [pc, #164]	; (8001080 <HAL_UART_MspInit+0x138>)
 8000fda:	2200      	movs	r2, #0
 8000fdc:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000fde:	4b28      	ldr	r3, [pc, #160]	; (8001080 <HAL_UART_MspInit+0x138>)
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000fe4:	4b26      	ldr	r3, [pc, #152]	; (8001080 <HAL_UART_MspInit+0x138>)
 8000fe6:	2280      	movs	r2, #128	; 0x80
 8000fe8:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000fea:	4b25      	ldr	r3, [pc, #148]	; (8001080 <HAL_UART_MspInit+0x138>)
 8000fec:	2200      	movs	r2, #0
 8000fee:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000ff0:	4b23      	ldr	r3, [pc, #140]	; (8001080 <HAL_UART_MspInit+0x138>)
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 8000ff6:	4b22      	ldr	r3, [pc, #136]	; (8001080 <HAL_UART_MspInit+0x138>)
 8000ff8:	2220      	movs	r2, #32
 8000ffa:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000ffc:	4b20      	ldr	r3, [pc, #128]	; (8001080 <HAL_UART_MspInit+0x138>)
 8000ffe:	2200      	movs	r2, #0
 8001000:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8001002:	4b1f      	ldr	r3, [pc, #124]	; (8001080 <HAL_UART_MspInit+0x138>)
 8001004:	0018      	movs	r0, r3
 8001006:	f001 fcd1 	bl	80029ac <HAL_DMA_Init>
 800100a:	1e03      	subs	r3, r0, #0
 800100c:	d001      	beq.n	8001012 <HAL_UART_MspInit+0xca>
    {
      Error_Handler();
 800100e:	f7ff fcab 	bl	8000968 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	4a1a      	ldr	r2, [pc, #104]	; (8001080 <HAL_UART_MspInit+0x138>)
 8001016:	665a      	str	r2, [r3, #100]	; 0x64
 8001018:	4b19      	ldr	r3, [pc, #100]	; (8001080 <HAL_UART_MspInit+0x138>)
 800101a:	687a      	ldr	r2, [r7, #4]
 800101c:	625a      	str	r2, [r3, #36]	; 0x24

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Channel4;
 800101e:	4b1a      	ldr	r3, [pc, #104]	; (8001088 <HAL_UART_MspInit+0x140>)
 8001020:	4a1a      	ldr	r2, [pc, #104]	; (800108c <HAL_UART_MspInit+0x144>)
 8001022:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001024:	4b18      	ldr	r3, [pc, #96]	; (8001088 <HAL_UART_MspInit+0x140>)
 8001026:	2210      	movs	r2, #16
 8001028:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800102a:	4b17      	ldr	r3, [pc, #92]	; (8001088 <HAL_UART_MspInit+0x140>)
 800102c:	2200      	movs	r2, #0
 800102e:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001030:	4b15      	ldr	r3, [pc, #84]	; (8001088 <HAL_UART_MspInit+0x140>)
 8001032:	2280      	movs	r2, #128	; 0x80
 8001034:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001036:	4b14      	ldr	r3, [pc, #80]	; (8001088 <HAL_UART_MspInit+0x140>)
 8001038:	2200      	movs	r2, #0
 800103a:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800103c:	4b12      	ldr	r3, [pc, #72]	; (8001088 <HAL_UART_MspInit+0x140>)
 800103e:	2200      	movs	r2, #0
 8001040:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.Mode = DMA_CIRCULAR;
 8001042:	4b11      	ldr	r3, [pc, #68]	; (8001088 <HAL_UART_MspInit+0x140>)
 8001044:	2220      	movs	r2, #32
 8001046:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001048:	4b0f      	ldr	r3, [pc, #60]	; (8001088 <HAL_UART_MspInit+0x140>)
 800104a:	2200      	movs	r2, #0
 800104c:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 800104e:	4b0e      	ldr	r3, [pc, #56]	; (8001088 <HAL_UART_MspInit+0x140>)
 8001050:	0018      	movs	r0, r3
 8001052:	f001 fcab 	bl	80029ac <HAL_DMA_Init>
 8001056:	1e03      	subs	r3, r0, #0
 8001058:	d001      	beq.n	800105e <HAL_UART_MspInit+0x116>
    {
      Error_Handler();
 800105a:	f7ff fc85 	bl	8000968 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	4a09      	ldr	r2, [pc, #36]	; (8001088 <HAL_UART_MspInit+0x140>)
 8001062:	661a      	str	r2, [r3, #96]	; 0x60
 8001064:	4b08      	ldr	r3, [pc, #32]	; (8001088 <HAL_UART_MspInit+0x140>)
 8001066:	687a      	ldr	r2, [r7, #4]
 8001068:	625a      	str	r2, [r3, #36]	; 0x24

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 800106a:	46c0      	nop			; (mov r8, r8)
 800106c:	46bd      	mov	sp, r7
 800106e:	b00a      	add	sp, #40	; 0x28
 8001070:	bd80      	pop	{r7, pc}
 8001072:	46c0      	nop			; (mov r8, r8)
 8001074:	40004400 	.word	0x40004400
 8001078:	40021000 	.word	0x40021000
 800107c:	00008004 	.word	0x00008004
 8001080:	20000554 	.word	0x20000554
 8001084:	40020058 	.word	0x40020058
 8001088:	20000598 	.word	0x20000598
 800108c:	40020044 	.word	0x40020044

08001090 <Set50Hz>:
//#define DeadTime16X 				1 //332,8ns
//#define DeadTime32X 				1 //665,6ns
//#define DeadTime64X 				1 //1331,2ns
//#define DeadTime128X 				1 //2662,4ns

void Set50Hz() {
 8001090:	b580      	push	{r7, lr}
 8001092:	af00      	add	r7, sp, #0
	TIM1->PSC=479-1;
 8001094:	4b03      	ldr	r3, [pc, #12]	; (80010a4 <Set50Hz+0x14>)
 8001096:	22ef      	movs	r2, #239	; 0xef
 8001098:	0052      	lsls	r2, r2, #1
 800109a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800109c:	46c0      	nop			; (mov r8, r8)
 800109e:	46bd      	mov	sp, r7
 80010a0:	bd80      	pop	{r7, pc}
 80010a2:	46c0      	nop			; (mov r8, r8)
 80010a4:	40012c00 	.word	0x40012c00

080010a8 <SetDeadTime>:

void Set505Hz() {
	TIM1->PSC=475-1;
}

uint32_t SetDeadTime() {
 80010a8:	b580      	push	{r7, lr}
 80010aa:	b082      	sub	sp, #8
 80010ac:	af00      	add	r7, sp, #0
	uint32_t _DeadTime=0;
 80010ae:	2300      	movs	r3, #0
 80010b0:	607b      	str	r3, [r7, #4]

	//_DeadTime  |= TIM_BDTR_DTG_7;//128x //2662,4ns
	_DeadTime  |= TIM_BDTR_DTG_6;//64x //1331,2ns
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	2240      	movs	r2, #64	; 0x40
 80010b6:	4313      	orrs	r3, r2
 80010b8:	607b      	str	r3, [r7, #4]
	_DeadTime  |= TIM_BDTR_DTG_5;//32x //665,6ns
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	2220      	movs	r2, #32
 80010be:	4313      	orrs	r3, r2
 80010c0:	607b      	str	r3, [r7, #4]
	_DeadTime  |= TIM_BDTR_DTG_4;//16x //332,8ns
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	2210      	movs	r2, #16
 80010c6:	4313      	orrs	r3, r2
 80010c8:	607b      	str	r3, [r7, #4]
	_DeadTime  |= TIM_BDTR_DTG_3;//8x //166,4ns
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	2208      	movs	r2, #8
 80010ce:	4313      	orrs	r3, r2
 80010d0:	607b      	str	r3, [r7, #4]
	_DeadTime  |= TIM_BDTR_DTG_2;//4x //83,2ns
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	2204      	movs	r2, #4
 80010d6:	4313      	orrs	r3, r2
 80010d8:	607b      	str	r3, [r7, #4]
	_DeadTime  |= TIM_BDTR_DTG_1;//2x  //41,6ns
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	2202      	movs	r2, #2
 80010de:	4313      	orrs	r3, r2
 80010e0:	607b      	str	r3, [r7, #4]
	_DeadTime  |= TIM_BDTR_DTG_0;//1x // Dead time base value 1/Fosc=1/48000=20.8ns
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	2201      	movs	r2, #1
 80010e6:	4313      	orrs	r3, r2
 80010e8:	607b      	str	r3, [r7, #4]

	return _DeadTime;
 80010ea:	687b      	ldr	r3, [r7, #4]
}
 80010ec:	0018      	movs	r0, r3
 80010ee:	46bd      	mov	sp, r7
 80010f0:	b002      	add	sp, #8
 80010f2:	bd80      	pop	{r7, pc}

080010f4 <PWM_50Hz_ON>:
    //HAL_TIM_PWM_Stop(&htim1,TIM_CHANNEL_3);
}
*/


void PWM_50Hz_ON(void){
 80010f4:	b580      	push	{r7, lr}
 80010f6:	af00      	add	r7, sp, #0
	//PWM_50Hz_OUTEN(); // OUTPUT ENABLE
	//PWM_50Hz_START(); // start CNT
	HAL_TIM_Base_Start(&htim1);
 80010f8:	4b0b      	ldr	r3, [pc, #44]	; (8001128 <PWM_50Hz_ON+0x34>)
 80010fa:	0018      	movs	r0, r3
 80010fc:	f003 f940 	bl	8004380 <HAL_TIM_Base_Start>
	HAL_TIM_Base_Start_IT(&htim1);
 8001100:	4b09      	ldr	r3, [pc, #36]	; (8001128 <PWM_50Hz_ON+0x34>)
 8001102:	0018      	movs	r0, r3
 8001104:	f003 fa00 	bl	8004508 <HAL_TIM_Base_Start_IT>
	HAL_TIM_OC_Start(&htim1, TIM_CHANNEL_3);
 8001108:	4b07      	ldr	r3, [pc, #28]	; (8001128 <PWM_50Hz_ON+0x34>)
 800110a:	2108      	movs	r1, #8
 800110c:	0018      	movs	r0, r3
 800110e:	f003 fb77 	bl	8004800 <HAL_TIM_OC_Start>
	HAL_TIMEx_OCN_Start(&htim1, TIM_CHANNEL_3);
 8001112:	4b05      	ldr	r3, [pc, #20]	; (8001128 <PWM_50Hz_ON+0x34>)
 8001114:	2108      	movs	r1, #8
 8001116:	0018      	movs	r0, r3
 8001118:	f004 ff10 	bl	8005f3c <HAL_TIMEx_OCN_Start>

	IsGenerator=1;
 800111c:	4b03      	ldr	r3, [pc, #12]	; (800112c <PWM_50Hz_ON+0x38>)
 800111e:	2201      	movs	r2, #1
 8001120:	601a      	str	r2, [r3, #0]
}
 8001122:	46c0      	nop			; (mov r8, r8)
 8001124:	46bd      	mov	sp, r7
 8001126:	bd80      	pop	{r7, pc}
 8001128:	200004d4 	.word	0x200004d4
 800112c:	200003ec 	.word	0x200003ec

08001130 <PWM_50Hz_OFF>:

void PWM_50Hz_OFF(void){
 8001130:	b580      	push	{r7, lr}
 8001132:	af00      	add	r7, sp, #0
	//PWM_50Hz_OUTDIS(); // OUTPUT ENABLE
	//PWM_50Hz_STOP(); // stop CNT
	HAL_TIM_Base_Stop(&htim1);
 8001134:	4b0b      	ldr	r3, [pc, #44]	; (8001164 <PWM_50Hz_OFF+0x34>)
 8001136:	0018      	movs	r0, r3
 8001138:	f003 f97c 	bl	8004434 <HAL_TIM_Base_Stop>
	HAL_TIM_Base_Stop_IT(&htim1);
 800113c:	4b09      	ldr	r3, [pc, #36]	; (8001164 <PWM_50Hz_OFF+0x34>)
 800113e:	0018      	movs	r0, r3
 8001140:	f003 fa3c 	bl	80045bc <HAL_TIM_Base_Stop_IT>
	HAL_TIM_OC_Stop(&htim1, TIM_CHANNEL_3);
 8001144:	4b07      	ldr	r3, [pc, #28]	; (8001164 <PWM_50Hz_OFF+0x34>)
 8001146:	2108      	movs	r1, #8
 8001148:	0018      	movs	r0, r3
 800114a:	f003 fc03 	bl	8004954 <HAL_TIM_OC_Stop>
	HAL_TIMEx_OCN_Stop(&htim1, TIM_CHANNEL_3);
 800114e:	4b05      	ldr	r3, [pc, #20]	; (8001164 <PWM_50Hz_OFF+0x34>)
 8001150:	2108      	movs	r1, #8
 8001152:	0018      	movs	r0, r3
 8001154:	f004 ff4c 	bl	8005ff0 <HAL_TIMEx_OCN_Stop>

	IsGenerator=0;
 8001158:	4b03      	ldr	r3, [pc, #12]	; (8001168 <PWM_50Hz_OFF+0x38>)
 800115a:	2200      	movs	r2, #0
 800115c:	601a      	str	r2, [r3, #0]
}
 800115e:	46c0      	nop			; (mov r8, r8)
 8001160:	46bd      	mov	sp, r7
 8001162:	bd80      	pop	{r7, pc}
 8001164:	200004d4 	.word	0x200004d4
 8001168:	200003ec 	.word	0x200003ec

0800116c <ResetADC_Buff>:

volatile uint8_t CurrentMargin=SINUS_MARGIN;



void ResetADC_Buff() {
 800116c:	b580      	push	{r7, lr}
 800116e:	b082      	sub	sp, #8
 8001170:	af00      	add	r7, sp, #0
	for (int i=0;i<ADC_ChannelCnt;i++) {
 8001172:	2300      	movs	r3, #0
 8001174:	607b      	str	r3, [r7, #4]
 8001176:	e007      	b.n	8001188 <ResetADC_Buff+0x1c>
		ADC_Data[i]=0;
 8001178:	4b07      	ldr	r3, [pc, #28]	; (8001198 <ResetADC_Buff+0x2c>)
 800117a:	687a      	ldr	r2, [r7, #4]
 800117c:	0052      	lsls	r2, r2, #1
 800117e:	2100      	movs	r1, #0
 8001180:	52d1      	strh	r1, [r2, r3]
	for (int i=0;i<ADC_ChannelCnt;i++) {
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	3301      	adds	r3, #1
 8001186:	607b      	str	r3, [r7, #4]
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	2b04      	cmp	r3, #4
 800118c:	ddf4      	ble.n	8001178 <ResetADC_Buff+0xc>
	}
	//ADC_Cnt=0;
}
 800118e:	46c0      	nop			; (mov r8, r8)
 8001190:	46bd      	mov	sp, r7
 8001192:	b002      	add	sp, #8
 8001194:	bd80      	pop	{r7, pc}
 8001196:	46c0      	nop			; (mov r8, r8)
 8001198:	20000660 	.word	0x20000660

0800119c <CalcAvg>:

void CalcAvg() {
 800119c:	b580      	push	{r7, lr}
 800119e:	af00      	add	r7, sp, #0
	if (ADC_Cnt==0) {
 80011a0:	4b0d      	ldr	r3, [pc, #52]	; (80011d8 <CalcAvg+0x3c>)
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d102      	bne.n	80011ae <CalcAvg+0x12>
		adcWienZero_Avg=SINUS_MARGIN;
 80011a8:	4b0c      	ldr	r3, [pc, #48]	; (80011dc <CalcAvg+0x40>)
 80011aa:	2203      	movs	r2, #3
 80011ac:	601a      	str	r2, [r3, #0]
	}
	adcWienZero_Avg=(adcWienZero/ADC_Cnt);
 80011ae:	4b0c      	ldr	r3, [pc, #48]	; (80011e0 <CalcAvg+0x44>)
 80011b0:	681a      	ldr	r2, [r3, #0]
 80011b2:	4b09      	ldr	r3, [pc, #36]	; (80011d8 <CalcAvg+0x3c>)
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	0019      	movs	r1, r3
 80011b8:	0010      	movs	r0, r2
 80011ba:	f7fe ffa5 	bl	8000108 <__udivsi3>
 80011be:	0003      	movs	r3, r0
 80011c0:	001a      	movs	r2, r3
 80011c2:	4b06      	ldr	r3, [pc, #24]	; (80011dc <CalcAvg+0x40>)
 80011c4:	601a      	str	r2, [r3, #0]
	//
	ADC_Cnt=0;
 80011c6:	4b04      	ldr	r3, [pc, #16]	; (80011d8 <CalcAvg+0x3c>)
 80011c8:	2200      	movs	r2, #0
 80011ca:	601a      	str	r2, [r3, #0]
	adcWienZero=0;
 80011cc:	4b04      	ldr	r3, [pc, #16]	; (80011e0 <CalcAvg+0x44>)
 80011ce:	2200      	movs	r2, #0
 80011d0:	601a      	str	r2, [r3, #0]
}
 80011d2:	46c0      	nop			; (mov r8, r8)
 80011d4:	46bd      	mov	sp, r7
 80011d6:	bd80      	pop	{r7, pc}
 80011d8:	200003f4 	.word	0x200003f4
 80011dc:	20000654 	.word	0x20000654
 80011e0:	20000658 	.word	0x20000658

080011e4 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc1)
{
 80011e4:	b580      	push	{r7, lr}
 80011e6:	b082      	sub	sp, #8
 80011e8:	af00      	add	r7, sp, #0
 80011ea:	6078      	str	r0, [r7, #4]
	adcOC_I=adcOC_I+ADC_Data[2];
	adcKlapan=adcKlapan+ADC_Data[3];
	adcPolka=adcPolka+ADC_Data[4];
	adcWienZero=adcWienZero+ADC_Data[5];*/
	//
		adcOC_V=ADC_Data[0];
 80011ec:	4b15      	ldr	r3, [pc, #84]	; (8001244 <HAL_ADC_ConvCpltCallback+0x60>)
 80011ee:	881b      	ldrh	r3, [r3, #0]
 80011f0:	b29b      	uxth	r3, r3
 80011f2:	001a      	movs	r2, r3
 80011f4:	4b14      	ldr	r3, [pc, #80]	; (8001248 <HAL_ADC_ConvCpltCallback+0x64>)
 80011f6:	601a      	str	r2, [r3, #0]
		adcOC_I=ADC_Data[1];
 80011f8:	4b12      	ldr	r3, [pc, #72]	; (8001244 <HAL_ADC_ConvCpltCallback+0x60>)
 80011fa:	885b      	ldrh	r3, [r3, #2]
 80011fc:	b29b      	uxth	r3, r3
 80011fe:	001a      	movs	r2, r3
 8001200:	4b12      	ldr	r3, [pc, #72]	; (800124c <HAL_ADC_ConvCpltCallback+0x68>)
 8001202:	601a      	str	r2, [r3, #0]
		adcKlapan=ADC_Data[2];
 8001204:	4b0f      	ldr	r3, [pc, #60]	; (8001244 <HAL_ADC_ConvCpltCallback+0x60>)
 8001206:	889b      	ldrh	r3, [r3, #4]
 8001208:	b29b      	uxth	r3, r3
 800120a:	001a      	movs	r2, r3
 800120c:	4b10      	ldr	r3, [pc, #64]	; (8001250 <HAL_ADC_ConvCpltCallback+0x6c>)
 800120e:	601a      	str	r2, [r3, #0]
		adcPolka=ADC_Data[3];
 8001210:	4b0c      	ldr	r3, [pc, #48]	; (8001244 <HAL_ADC_ConvCpltCallback+0x60>)
 8001212:	88db      	ldrh	r3, [r3, #6]
 8001214:	b29b      	uxth	r3, r3
 8001216:	001a      	movs	r2, r3
 8001218:	4b0e      	ldr	r3, [pc, #56]	; (8001254 <HAL_ADC_ConvCpltCallback+0x70>)
 800121a:	601a      	str	r2, [r3, #0]
		adcWienZero=adcWienZero+ADC_Data[4];
 800121c:	4b09      	ldr	r3, [pc, #36]	; (8001244 <HAL_ADC_ConvCpltCallback+0x60>)
 800121e:	891b      	ldrh	r3, [r3, #8]
 8001220:	b29b      	uxth	r3, r3
 8001222:	001a      	movs	r2, r3
 8001224:	4b0c      	ldr	r3, [pc, #48]	; (8001258 <HAL_ADC_ConvCpltCallback+0x74>)
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	18d2      	adds	r2, r2, r3
 800122a:	4b0b      	ldr	r3, [pc, #44]	; (8001258 <HAL_ADC_ConvCpltCallback+0x74>)
 800122c:	601a      	str	r2, [r3, #0]
		//adcWienZero=10;

	//
	ADC_Cnt++;
 800122e:	4b0b      	ldr	r3, [pc, #44]	; (800125c <HAL_ADC_ConvCpltCallback+0x78>)
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	1c5a      	adds	r2, r3, #1
 8001234:	4b09      	ldr	r3, [pc, #36]	; (800125c <HAL_ADC_ConvCpltCallback+0x78>)
 8001236:	601a      	str	r2, [r3, #0]
	//
	ResetADC_Buff();
 8001238:	f7ff ff98 	bl	800116c <ResetADC_Buff>
	//StartADC();
}
 800123c:	46c0      	nop			; (mov r8, r8)
 800123e:	46bd      	mov	sp, r7
 8001240:	b002      	add	sp, #8
 8001242:	bd80      	pop	{r7, pc}
 8001244:	20000660 	.word	0x20000660
 8001248:	20000650 	.word	0x20000650
 800124c:	2000065c 	.word	0x2000065c
 8001250:	2000064c 	.word	0x2000064c
 8001254:	2000066c 	.word	0x2000066c
 8001258:	20000658 	.word	0x20000658
 800125c:	200003f4 	.word	0x200003f4

08001260 <StartADC>:



void StartADC(){
 8001260:	b580      	push	{r7, lr}
 8001262:	af00      	add	r7, sp, #0
	//HAL_ADC_Start_IT(&hadc);
	//ADC->CCR |= ADC_CCR_TSEN | ADC_CCR_VREFEN;
	HAL_ADC_Start_DMA(&hadc,(uint32_t*) &ADC_Data,ADC_ChannelCnt);
 8001264:	4904      	ldr	r1, [pc, #16]	; (8001278 <StartADC+0x18>)
 8001266:	4b05      	ldr	r3, [pc, #20]	; (800127c <StartADC+0x1c>)
 8001268:	2205      	movs	r2, #5
 800126a:	0018      	movs	r0, r3
 800126c:	f000 fd06 	bl	8001c7c <HAL_ADC_Start_DMA>
}
 8001270:	46c0      	nop			; (mov r8, r8)
 8001272:	46bd      	mov	sp, r7
 8001274:	bd80      	pop	{r7, pc}
 8001276:	46c0      	nop			; (mov r8, r8)
 8001278:	20000660 	.word	0x20000660
 800127c:	20000440 	.word	0x20000440

08001280 <Off_LEDs>:
void On_LEDs() {
	HAL_GPIO_WritePin(BOARD_LED_GPIO_Port, BOARD_LED_Pin,GPIO_PIN_SET); // LED On
    HAL_GPIO_WritePin(POLKA_LED_GPIO_Port, POLKA_LED_Pin,GPIO_PIN_SET); // LED On
}

void Off_LEDs() {
 8001280:	b580      	push	{r7, lr}
 8001282:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(BOARD_LED_GPIO_Port, BOARD_LED_Pin,GPIO_PIN_RESET); // LED Off
 8001284:	2380      	movs	r3, #128	; 0x80
 8001286:	005b      	lsls	r3, r3, #1
 8001288:	4807      	ldr	r0, [pc, #28]	; (80012a8 <Off_LEDs+0x28>)
 800128a:	2200      	movs	r2, #0
 800128c:	0019      	movs	r1, r3
 800128e:	f002 f843 	bl	8003318 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(POLKA_LED_GPIO_Port, POLKA_LED_Pin,GPIO_PIN_RESET); // LED Off
 8001292:	2380      	movs	r3, #128	; 0x80
 8001294:	009b      	lsls	r3, r3, #2
 8001296:	4804      	ldr	r0, [pc, #16]	; (80012a8 <Off_LEDs+0x28>)
 8001298:	2200      	movs	r2, #0
 800129a:	0019      	movs	r1, r3
 800129c:	f002 f83c 	bl	8003318 <HAL_GPIO_WritePin>
}
 80012a0:	46c0      	nop			; (mov r8, r8)
 80012a2:	46bd      	mov	sp, r7
 80012a4:	bd80      	pop	{r7, pc}
 80012a6:	46c0      	nop			; (mov r8, r8)
 80012a8:	48000800 	.word	0x48000800

080012ac <BlinkLEDs>:

void BlinkLEDs(uint8_t _cnt, uint8_t _Delay) {
 80012ac:	b580      	push	{r7, lr}
 80012ae:	b084      	sub	sp, #16
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	0002      	movs	r2, r0
 80012b4:	1dfb      	adds	r3, r7, #7
 80012b6:	701a      	strb	r2, [r3, #0]
 80012b8:	1dbb      	adds	r3, r7, #6
 80012ba:	1c0a      	adds	r2, r1, #0
 80012bc:	701a      	strb	r2, [r3, #0]
	uint8_t _i=0;
 80012be:	230f      	movs	r3, #15
 80012c0:	18fb      	adds	r3, r7, r3
 80012c2:	2200      	movs	r2, #0
 80012c4:	701a      	strb	r2, [r3, #0]
	Off_LEDs();
 80012c6:	f7ff ffdb 	bl	8001280 <Off_LEDs>
	while (_i<_cnt) {
 80012ca:	e018      	b.n	80012fe <BlinkLEDs+0x52>
		HAL_GPIO_TogglePin(BOARD_LED_GPIO_Port, BOARD_LED_Pin);
 80012cc:	2380      	movs	r3, #128	; 0x80
 80012ce:	005b      	lsls	r3, r3, #1
 80012d0:	4a11      	ldr	r2, [pc, #68]	; (8001318 <BlinkLEDs+0x6c>)
 80012d2:	0019      	movs	r1, r3
 80012d4:	0010      	movs	r0, r2
 80012d6:	f002 f85f 	bl	8003398 <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin(POLKA_LED_GPIO_Port, POLKA_LED_Pin);
 80012da:	2380      	movs	r3, #128	; 0x80
 80012dc:	009b      	lsls	r3, r3, #2
 80012de:	4a0e      	ldr	r2, [pc, #56]	; (8001318 <BlinkLEDs+0x6c>)
 80012e0:	0019      	movs	r1, r3
 80012e2:	0010      	movs	r0, r2
 80012e4:	f002 f858 	bl	8003398 <HAL_GPIO_TogglePin>
		HAL_Delay(_Delay);
 80012e8:	1dbb      	adds	r3, r7, #6
 80012ea:	781b      	ldrb	r3, [r3, #0]
 80012ec:	0018      	movs	r0, r3
 80012ee:	f000 fa5d 	bl	80017ac <HAL_Delay>
		_i++;
 80012f2:	210f      	movs	r1, #15
 80012f4:	187b      	adds	r3, r7, r1
 80012f6:	781a      	ldrb	r2, [r3, #0]
 80012f8:	187b      	adds	r3, r7, r1
 80012fa:	3201      	adds	r2, #1
 80012fc:	701a      	strb	r2, [r3, #0]
	while (_i<_cnt) {
 80012fe:	230f      	movs	r3, #15
 8001300:	18fa      	adds	r2, r7, r3
 8001302:	1dfb      	adds	r3, r7, #7
 8001304:	7812      	ldrb	r2, [r2, #0]
 8001306:	781b      	ldrb	r3, [r3, #0]
 8001308:	429a      	cmp	r2, r3
 800130a:	d3df      	bcc.n	80012cc <BlinkLEDs+0x20>
	}
	Off_LEDs();
 800130c:	f7ff ffb8 	bl	8001280 <Off_LEDs>
}
 8001310:	46c0      	nop			; (mov r8, r8)
 8001312:	46bd      	mov	sp, r7
 8001314:	b004      	add	sp, #16
 8001316:	bd80      	pop	{r7, pc}
 8001318:	48000800 	.word	0x48000800

0800131c <Check50Hz>:

void Check50Hz() {
 800131c:	b580      	push	{r7, lr}
 800131e:	af00      	add	r7, sp, #0
	if((BlockGenerator==0) && (IsGenerator==1)) {
 8001320:	4b33      	ldr	r3, [pc, #204]	; (80013f0 <Check50Hz+0xd4>)
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	2b00      	cmp	r3, #0
 8001326:	d13b      	bne.n	80013a0 <Check50Hz+0x84>
 8001328:	4b32      	ldr	r3, [pc, #200]	; (80013f4 <Check50Hz+0xd8>)
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	2b01      	cmp	r3, #1
 800132e:	d137      	bne.n	80013a0 <Check50Hz+0x84>
		if (TIM1->CNT==1000) {
 8001330:	4b31      	ldr	r3, [pc, #196]	; (80013f8 <Check50Hz+0xdc>)
 8001332:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001334:	23fa      	movs	r3, #250	; 0xfa
 8001336:	009b      	lsls	r3, r3, #2
 8001338:	429a      	cmp	r2, r3
 800133a:	d113      	bne.n	8001364 <Check50Hz+0x48>
						CalcAvg();
 800133c:	f7ff ff2e 	bl	800119c <CalcAvg>
						CurrentMargin=adcWienZero_Avg/41;
 8001340:	4b2e      	ldr	r3, [pc, #184]	; (80013fc <Check50Hz+0xe0>)
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	2129      	movs	r1, #41	; 0x29
 8001346:	0018      	movs	r0, r3
 8001348:	f7fe fede 	bl	8000108 <__udivsi3>
 800134c:	0003      	movs	r3, r0
 800134e:	b2da      	uxtb	r2, r3
 8001350:	4b2b      	ldr	r3, [pc, #172]	; (8001400 <Check50Hz+0xe4>)
 8001352:	701a      	strb	r2, [r3, #0]
						if (CurrentMargin<SINUS_MARGIN) {
 8001354:	4b2a      	ldr	r3, [pc, #168]	; (8001400 <Check50Hz+0xe4>)
 8001356:	781b      	ldrb	r3, [r3, #0]
 8001358:	b2db      	uxtb	r3, r3
 800135a:	2b02      	cmp	r3, #2
 800135c:	d802      	bhi.n	8001364 <Check50Hz+0x48>
							CurrentMargin=SINUS_MARGIN;
 800135e:	4b28      	ldr	r3, [pc, #160]	; (8001400 <Check50Hz+0xe4>)
 8001360:	2203      	movs	r2, #3
 8001362:	701a      	strb	r2, [r3, #0]
						}
		}
		if (((TIM1->CNT==1000) || (TIM1->CNT==0)) || ((sin_step>100) && (TIM1->CNT<10))) {
 8001364:	4b24      	ldr	r3, [pc, #144]	; (80013f8 <Check50Hz+0xdc>)
 8001366:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001368:	23fa      	movs	r3, #250	; 0xfa
 800136a:	009b      	lsls	r3, r3, #2
 800136c:	429a      	cmp	r2, r3
 800136e:	d00c      	beq.n	800138a <Check50Hz+0x6e>
 8001370:	4b21      	ldr	r3, [pc, #132]	; (80013f8 <Check50Hz+0xdc>)
 8001372:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001374:	2b00      	cmp	r3, #0
 8001376:	d008      	beq.n	800138a <Check50Hz+0x6e>
 8001378:	4b22      	ldr	r3, [pc, #136]	; (8001404 <Check50Hz+0xe8>)
 800137a:	881b      	ldrh	r3, [r3, #0]
 800137c:	b29b      	uxth	r3, r3
 800137e:	2b64      	cmp	r3, #100	; 0x64
 8001380:	d90e      	bls.n	80013a0 <Check50Hz+0x84>
 8001382:	4b1d      	ldr	r3, [pc, #116]	; (80013f8 <Check50Hz+0xdc>)
 8001384:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001386:	2b09      	cmp	r3, #9
 8001388:	d80a      	bhi.n	80013a0 <Check50Hz+0x84>
			sin_step=0;
 800138a:	4b1e      	ldr	r3, [pc, #120]	; (8001404 <Check50Hz+0xe8>)
 800138c:	2200      	movs	r2, #0
 800138e:	801a      	strh	r2, [r3, #0]
			//
			HAL_GPIO_TogglePin(BOARD_LED_GPIO_Port, BOARD_LED_Pin); // All is OK, blink
 8001390:	2380      	movs	r3, #128	; 0x80
 8001392:	005b      	lsls	r3, r3, #1
 8001394:	4a1c      	ldr	r2, [pc, #112]	; (8001408 <Check50Hz+0xec>)
 8001396:	0019      	movs	r1, r3
 8001398:	0010      	movs	r0, r2
 800139a:	f001 fffd 	bl	8003398 <HAL_GPIO_TogglePin>
			return;
 800139e:	e025      	b.n	80013ec <Check50Hz+0xd0>
		}
	}

	if((BlockGenerator==0) && (IsGenerator==0)) {
 80013a0:	4b13      	ldr	r3, [pc, #76]	; (80013f0 <Check50Hz+0xd4>)
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d10e      	bne.n	80013c6 <Check50Hz+0xaa>
 80013a8:	4b12      	ldr	r3, [pc, #72]	; (80013f4 <Check50Hz+0xd8>)
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d10a      	bne.n	80013c6 <Check50Hz+0xaa>
		TIM1->CCR3=0;
 80013b0:	4b11      	ldr	r3, [pc, #68]	; (80013f8 <Check50Hz+0xdc>)
 80013b2:	2200      	movs	r2, #0
 80013b4:	63da      	str	r2, [r3, #60]	; 0x3c
		TIM1->CNT=0;
 80013b6:	4b10      	ldr	r3, [pc, #64]	; (80013f8 <Check50Hz+0xdc>)
 80013b8:	2200      	movs	r2, #0
 80013ba:	625a      	str	r2, [r3, #36]	; 0x24
		PWM_50Hz_ON();
 80013bc:	f7ff fe9a 	bl	80010f4 <PWM_50Hz_ON>
		DAC_SINUS_ON();
 80013c0:	f000 f8a8 	bl	8001514 <DAC_SINUS_ON>
		return;
 80013c4:	e012      	b.n	80013ec <Check50Hz+0xd0>
	}

	if((BlockGenerator==1) && (IsGenerator==1)) {
 80013c6:	4b0a      	ldr	r3, [pc, #40]	; (80013f0 <Check50Hz+0xd4>)
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	2b01      	cmp	r3, #1
 80013cc:	d10e      	bne.n	80013ec <Check50Hz+0xd0>
 80013ce:	4b09      	ldr	r3, [pc, #36]	; (80013f4 <Check50Hz+0xd8>)
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	2b01      	cmp	r3, #1
 80013d4:	d10a      	bne.n	80013ec <Check50Hz+0xd0>
		TIM1->CCR3=0;
 80013d6:	4b08      	ldr	r3, [pc, #32]	; (80013f8 <Check50Hz+0xdc>)
 80013d8:	2200      	movs	r2, #0
 80013da:	63da      	str	r2, [r3, #60]	; 0x3c
		TIM1->CNT=0;
 80013dc:	4b06      	ldr	r3, [pc, #24]	; (80013f8 <Check50Hz+0xdc>)
 80013de:	2200      	movs	r2, #0
 80013e0:	625a      	str	r2, [r3, #36]	; 0x24
		PWM_50Hz_OFF();
 80013e2:	f7ff fea5 	bl	8001130 <PWM_50Hz_OFF>
		DAC_SINUS_OFF();
 80013e6:	f000 f8ab 	bl	8001540 <DAC_SINUS_OFF>
		return;
 80013ea:	46c0      	nop			; (mov r8, r8)
	}
}
 80013ec:	46bd      	mov	sp, r7
 80013ee:	bd80      	pop	{r7, pc}
 80013f0:	20000004 	.word	0x20000004
 80013f4:	200003ec 	.word	0x200003ec
 80013f8:	40012c00 	.word	0x40012c00
 80013fc:	20000654 	.word	0x20000654
 8001400:	20000008 	.word	0x20000008
 8001404:	200003f8 	.word	0x200003f8
 8001408:	48000800 	.word	0x48000800

0800140c <EnableDebugMode>:

void EnableDebugMode() {
 800140c:	b580      	push	{r7, lr}
 800140e:	b082      	sub	sp, #8
 8001410:	af00      	add	r7, sp, #0
				__HAL_RCC_DBGMCU_CLK_ENABLE();
 8001412:	4b17      	ldr	r3, [pc, #92]	; (8001470 <EnableDebugMode+0x64>)
 8001414:	699a      	ldr	r2, [r3, #24]
 8001416:	4b16      	ldr	r3, [pc, #88]	; (8001470 <EnableDebugMode+0x64>)
 8001418:	2180      	movs	r1, #128	; 0x80
 800141a:	03c9      	lsls	r1, r1, #15
 800141c:	430a      	orrs	r2, r1
 800141e:	619a      	str	r2, [r3, #24]
 8001420:	4b13      	ldr	r3, [pc, #76]	; (8001470 <EnableDebugMode+0x64>)
 8001422:	699a      	ldr	r2, [r3, #24]
 8001424:	2380      	movs	r3, #128	; 0x80
 8001426:	03db      	lsls	r3, r3, #15
 8001428:	4013      	ands	r3, r2
 800142a:	607b      	str	r3, [r7, #4]
 800142c:	687b      	ldr	r3, [r7, #4]
			    DBGMCU->APB1FZ |= DBGMCU_APB1_FZ_DBG_WWDG_STOP;
 800142e:	4b11      	ldr	r3, [pc, #68]	; (8001474 <EnableDebugMode+0x68>)
 8001430:	689a      	ldr	r2, [r3, #8]
 8001432:	4b10      	ldr	r3, [pc, #64]	; (8001474 <EnableDebugMode+0x68>)
 8001434:	2180      	movs	r1, #128	; 0x80
 8001436:	0109      	lsls	r1, r1, #4
 8001438:	430a      	orrs	r2, r1
 800143a:	609a      	str	r2, [r3, #8]
			    DBGMCU->APB2FZ = 0xFFFFFFFF;
 800143c:	4b0d      	ldr	r3, [pc, #52]	; (8001474 <EnableDebugMode+0x68>)
 800143e:	2201      	movs	r2, #1
 8001440:	4252      	negs	r2, r2
 8001442:	60da      	str	r2, [r3, #12]
			    DBGMCU->APB1FZ = 0xFFFFFFFF;
 8001444:	4b0b      	ldr	r3, [pc, #44]	; (8001474 <EnableDebugMode+0x68>)
 8001446:	2201      	movs	r2, #1
 8001448:	4252      	negs	r2, r2
 800144a:	609a      	str	r2, [r3, #8]
			    DBGMCU->CR |=DBGMCU_CR_DBG_STOP;
 800144c:	4b09      	ldr	r3, [pc, #36]	; (8001474 <EnableDebugMode+0x68>)
 800144e:	685a      	ldr	r2, [r3, #4]
 8001450:	4b08      	ldr	r3, [pc, #32]	; (8001474 <EnableDebugMode+0x68>)
 8001452:	2102      	movs	r1, #2
 8001454:	430a      	orrs	r2, r1
 8001456:	605a      	str	r2, [r3, #4]
			    __HAL_DBGMCU_FREEZE_IWDG();
 8001458:	4b06      	ldr	r3, [pc, #24]	; (8001474 <EnableDebugMode+0x68>)
 800145a:	689a      	ldr	r2, [r3, #8]
 800145c:	4b05      	ldr	r3, [pc, #20]	; (8001474 <EnableDebugMode+0x68>)
 800145e:	2180      	movs	r1, #128	; 0x80
 8001460:	0149      	lsls	r1, r1, #5
 8001462:	430a      	orrs	r2, r1
 8001464:	609a      	str	r2, [r3, #8]
}
 8001466:	46c0      	nop			; (mov r8, r8)
 8001468:	46bd      	mov	sp, r7
 800146a:	b002      	add	sp, #8
 800146c:	bd80      	pop	{r7, pc}
 800146e:	46c0      	nop			; (mov r8, r8)
 8001470:	40021000 	.word	0x40021000
 8001474:	40015800 	.word	0x40015800

08001478 <GetSinus>:
		 1363, 1340, 1316, 1293, 1269, 1246, 1222, 1199, 1175, 1152, 1128, 1104, 1080,
		 1056, 1032, 1009, 985, 960, 936, 912, 888, 864, 840, 815, 791, 767, 742, 718,
		 693, 669, 645, 620, 595, 571, 546, 522, 497, 472, 448, 423, 398, 373, 349, 324,
		 299, 274, 250, 225, 200, 175, 150, 125, 100, 76, 51, 26};

uint16_t GetSinus() {
 8001478:	b580      	push	{r7, lr}
 800147a:	af00      	add	r7, sp, #0
	if ((sin_step>=SinRes) || (sin_step<=CurrentMargin)|| (sin_step>=(SinRes-CurrentMargin))) {
 800147c:	4b14      	ldr	r3, [pc, #80]	; (80014d0 <GetSinus+0x58>)
 800147e:	881b      	ldrh	r3, [r3, #0]
 8001480:	b29a      	uxth	r2, r3
 8001482:	23e0      	movs	r3, #224	; 0xe0
 8001484:	33ff      	adds	r3, #255	; 0xff
 8001486:	429a      	cmp	r2, r3
 8001488:	d815      	bhi.n	80014b6 <GetSinus+0x3e>
 800148a:	4b12      	ldr	r3, [pc, #72]	; (80014d4 <GetSinus+0x5c>)
 800148c:	781b      	ldrb	r3, [r3, #0]
 800148e:	b2db      	uxtb	r3, r3
 8001490:	b29a      	uxth	r2, r3
 8001492:	4b0f      	ldr	r3, [pc, #60]	; (80014d0 <GetSinus+0x58>)
 8001494:	881b      	ldrh	r3, [r3, #0]
 8001496:	b29b      	uxth	r3, r3
 8001498:	429a      	cmp	r2, r3
 800149a:	d20c      	bcs.n	80014b6 <GetSinus+0x3e>
 800149c:	4b0c      	ldr	r3, [pc, #48]	; (80014d0 <GetSinus+0x58>)
 800149e:	881b      	ldrh	r3, [r3, #0]
 80014a0:	b29b      	uxth	r3, r3
 80014a2:	001a      	movs	r2, r3
 80014a4:	4b0b      	ldr	r3, [pc, #44]	; (80014d4 <GetSinus+0x5c>)
 80014a6:	781b      	ldrb	r3, [r3, #0]
 80014a8:	b2db      	uxtb	r3, r3
 80014aa:	0019      	movs	r1, r3
 80014ac:	23f0      	movs	r3, #240	; 0xf0
 80014ae:	005b      	lsls	r3, r3, #1
 80014b0:	1a5b      	subs	r3, r3, r1
 80014b2:	429a      	cmp	r2, r3
 80014b4:	db01      	blt.n	80014ba <GetSinus+0x42>

		return 0;
 80014b6:	2300      	movs	r3, #0
 80014b8:	e007      	b.n	80014ca <GetSinus+0x52>
	}

	return sin_data[sin_step];
 80014ba:	4b05      	ldr	r3, [pc, #20]	; (80014d0 <GetSinus+0x58>)
 80014bc:	881b      	ldrh	r3, [r3, #0]
 80014be:	b29b      	uxth	r3, r3
 80014c0:	001a      	movs	r2, r3
 80014c2:	4b05      	ldr	r3, [pc, #20]	; (80014d8 <GetSinus+0x60>)
 80014c4:	0052      	lsls	r2, r2, #1
 80014c6:	5ad3      	ldrh	r3, [r2, r3]
 80014c8:	b29b      	uxth	r3, r3
}
 80014ca:	0018      	movs	r0, r3
 80014cc:	46bd      	mov	sp, r7
 80014ce:	bd80      	pop	{r7, pc}
 80014d0:	200003f8 	.word	0x200003f8
 80014d4:	20000008 	.word	0x20000008
 80014d8:	2000000c 	.word	0x2000000c

080014dc <Set_DAC_SINUS_ZERO>:

 void Set_DAC_SINUS_ZERO() {
 80014dc:	b580      	push	{r7, lr}
 80014de:	af00      	add	r7, sp, #0
	 HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1,DAC_ALIGN_12B_R,0);
 80014e0:	4804      	ldr	r0, [pc, #16]	; (80014f4 <Set_DAC_SINUS_ZERO+0x18>)
 80014e2:	2300      	movs	r3, #0
 80014e4:	2200      	movs	r2, #0
 80014e6:	2100      	movs	r1, #0
 80014e8:	f001 f8f6 	bl	80026d8 <HAL_DAC_SetValue>
 }
 80014ec:	46c0      	nop			; (mov r8, r8)
 80014ee:	46bd      	mov	sp, r7
 80014f0:	bd80      	pop	{r7, pc}
 80014f2:	46c0      	nop			; (mov r8, r8)
 80014f4:	200004b0 	.word	0x200004b0

080014f8 <DAC_SINUS_INIT>:

 void DAC_SINUS_INIT() {
 80014f8:	b580      	push	{r7, lr}
 80014fa:	af00      	add	r7, sp, #0
	 HAL_DAC_Start(&hdac1, DAC_CHANNEL_1);
 80014fc:	4b04      	ldr	r3, [pc, #16]	; (8001510 <DAC_SINUS_INIT+0x18>)
 80014fe:	2100      	movs	r1, #0
 8001500:	0018      	movs	r0, r3
 8001502:	f001 f9d7 	bl	80028b4 <HAL_DAC_Start>
	 Set_DAC_SINUS_ZERO();
 8001506:	f7ff ffe9 	bl	80014dc <Set_DAC_SINUS_ZERO>
 }
 800150a:	46c0      	nop			; (mov r8, r8)
 800150c:	46bd      	mov	sp, r7
 800150e:	bd80      	pop	{r7, pc}
 8001510:	200004b0 	.word	0x200004b0

08001514 <DAC_SINUS_ON>:

void DAC_SINUS_ON() {
 8001514:	b580      	push	{r7, lr}
 8001516:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Start(&htim2);
 8001518:	4b07      	ldr	r3, [pc, #28]	; (8001538 <DAC_SINUS_ON+0x24>)
 800151a:	0018      	movs	r0, r3
 800151c:	f002 ff30 	bl	8004380 <HAL_TIM_Base_Start>
	HAL_TIM_Base_Start_IT(&htim2);
 8001520:	4b05      	ldr	r3, [pc, #20]	; (8001538 <DAC_SINUS_ON+0x24>)
 8001522:	0018      	movs	r0, r3
 8001524:	f002 fff0 	bl	8004508 <HAL_TIM_Base_Start_IT>
	Set_DAC_SINUS_ZERO();
 8001528:	f7ff ffd8 	bl	80014dc <Set_DAC_SINUS_ZERO>
	IsSinus=1;
 800152c:	4b03      	ldr	r3, [pc, #12]	; (800153c <DAC_SINUS_ON+0x28>)
 800152e:	2201      	movs	r2, #1
 8001530:	601a      	str	r2, [r3, #0]
 }
 8001532:	46c0      	nop			; (mov r8, r8)
 8001534:	46bd      	mov	sp, r7
 8001536:	bd80      	pop	{r7, pc}
 8001538:	20000514 	.word	0x20000514
 800153c:	200003f0 	.word	0x200003f0

08001540 <DAC_SINUS_OFF>:


void DAC_SINUS_OFF() {
 8001540:	b580      	push	{r7, lr}
 8001542:	af00      	add	r7, sp, #0
	Set_DAC_SINUS_ZERO();
 8001544:	f7ff ffca 	bl	80014dc <Set_DAC_SINUS_ZERO>
	HAL_TIM_Base_Stop(&htim2);
 8001548:	4b06      	ldr	r3, [pc, #24]	; (8001564 <DAC_SINUS_OFF+0x24>)
 800154a:	0018      	movs	r0, r3
 800154c:	f002 ff72 	bl	8004434 <HAL_TIM_Base_Stop>
	HAL_TIM_Base_Stop_IT(&htim2);
 8001550:	4b04      	ldr	r3, [pc, #16]	; (8001564 <DAC_SINUS_OFF+0x24>)
 8001552:	0018      	movs	r0, r3
 8001554:	f003 f832 	bl	80045bc <HAL_TIM_Base_Stop_IT>
	IsSinus=0;
 8001558:	4b03      	ldr	r3, [pc, #12]	; (8001568 <DAC_SINUS_OFF+0x28>)
 800155a:	2200      	movs	r2, #0
 800155c:	601a      	str	r2, [r3, #0]
 }
 800155e:	46c0      	nop			; (mov r8, r8)
 8001560:	46bd      	mov	sp, r7
 8001562:	bd80      	pop	{r7, pc}
 8001564:	20000514 	.word	0x20000514
 8001568:	200003f0 	.word	0x200003f0

0800156c <ResetWDG>:
#include "digiTOS-IWDG.h"

void ResetWDG() {
 800156c:	b580      	push	{r7, lr}
 800156e:	af00      	add	r7, sp, #0
	 HAL_IWDG_Refresh(&hiwdg);
 8001570:	4b03      	ldr	r3, [pc, #12]	; (8001580 <ResetWDG+0x14>)
 8001572:	0018      	movs	r0, r3
 8001574:	f001 ffe0 	bl	8003538 <HAL_IWDG_Refresh>
	 //IWDG->KR = 0x0000AAAAU;
}
 8001578:	46c0      	nop			; (mov r8, r8)
 800157a:	46bd      	mov	sp, r7
 800157c:	bd80      	pop	{r7, pc}
 800157e:	46c0      	nop			; (mov r8, r8)
 8001580:	200004c4 	.word	0x200004c4

08001584 <DigiTOS_IWDG_Init>:

uint8_t DigiTOS_IWDG_Init(DigiTOS_IWDG_Timeout_t timeout) {
 8001584:	b580      	push	{r7, lr}
 8001586:	b084      	sub	sp, #16
 8001588:	af00      	add	r7, sp, #0
 800158a:	0002      	movs	r2, r0
 800158c:	1dfb      	adds	r3, r7, #7
 800158e:	701a      	strb	r2, [r3, #0]
	uint8_t result = 0;
 8001590:	230f      	movs	r3, #15
 8001592:	18fb      	adds	r3, r7, r3
 8001594:	2200      	movs	r2, #0
 8001596:	701a      	strb	r2, [r3, #0]
	uint16_t reload = 0;
 8001598:	230c      	movs	r3, #12
 800159a:	18fb      	adds	r3, r7, r3
 800159c:	2200      	movs	r2, #0
 800159e:	801a      	strh	r2, [r3, #0]
	
	/* Check if the system has resumed from IWDG reset */
#if defined(STM32F4xx)
	if (RCC->CSR & RCC_CSR_WDGRSTF) {
#else
	if (RCC->CSR & RCC_CSR_IWDGRSTF) {	
 80015a0:	4b56      	ldr	r3, [pc, #344]	; (80016fc <DigiTOS_IWDG_Init+0x178>)
 80015a2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80015a4:	2380      	movs	r3, #128	; 0x80
 80015a6:	059b      	lsls	r3, r3, #22
 80015a8:	4013      	ands	r3, r2
 80015aa:	d00a      	beq.n	80015c2 <DigiTOS_IWDG_Init+0x3e>
#endif
		/* Reset by IWDG */
		result = 1;
 80015ac:	230f      	movs	r3, #15
 80015ae:	18fb      	adds	r3, r7, r3
 80015b0:	2201      	movs	r2, #1
 80015b2:	701a      	strb	r2, [r3, #0]
		
		/* Clear reset flags */
		RCC->CSR |= RCC_CSR_RMVF;
 80015b4:	4b51      	ldr	r3, [pc, #324]	; (80016fc <DigiTOS_IWDG_Init+0x178>)
 80015b6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80015b8:	4b50      	ldr	r3, [pc, #320]	; (80016fc <DigiTOS_IWDG_Init+0x178>)
 80015ba:	2180      	movs	r1, #128	; 0x80
 80015bc:	0449      	lsls	r1, r1, #17
 80015be:	430a      	orrs	r2, r1
 80015c0:	625a      	str	r2, [r3, #36]	; 0x24
	}

	/* Enable write access to IWDG_PR and IWDG_RLR registers */
	IWDG->KR = 0x5555;
 80015c2:	4b4f      	ldr	r3, [pc, #316]	; (8001700 <DigiTOS_IWDG_Init+0x17c>)
 80015c4:	4a4f      	ldr	r2, [pc, #316]	; (8001704 <DigiTOS_IWDG_Init+0x180>)
 80015c6:	601a      	str	r2, [r3, #0]

	/* Set proper clock depending on timeout user select */
	if (timeout >= DigiTOS_IWDG_Timeout_8s) {
 80015c8:	1dfb      	adds	r3, r7, #7
 80015ca:	781b      	ldrb	r3, [r3, #0]
 80015cc:	2b0a      	cmp	r3, #10
 80015ce:	d903      	bls.n	80015d8 <DigiTOS_IWDG_Init+0x54>
		/* IWDG counter clock: LSI/256 = 128Hz */
		IWDG->PR = 0x07;
 80015d0:	4b4b      	ldr	r3, [pc, #300]	; (8001700 <DigiTOS_IWDG_Init+0x17c>)
 80015d2:	2207      	movs	r2, #7
 80015d4:	605a      	str	r2, [r3, #4]
 80015d6:	e002      	b.n	80015de <DigiTOS_IWDG_Init+0x5a>
	} else {
		/* IWDG counter clock: LSI/32 = 1024Hz */
		IWDG->PR = 0x03;
 80015d8:	4b49      	ldr	r3, [pc, #292]	; (8001700 <DigiTOS_IWDG_Init+0x17c>)
 80015da:	2203      	movs	r2, #3
 80015dc:	605a      	str	r2, [r3, #4]
	}
	
	/* Set counter reload value */
	if (timeout == DigiTOS_IWDG_Timeout_5ms) {
 80015de:	1dfb      	adds	r3, r7, #7
 80015e0:	781b      	ldrb	r3, [r3, #0]
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d104      	bne.n	80015f0 <DigiTOS_IWDG_Init+0x6c>
		reload = 5; /* 1024 Hz IWDG ticking */
 80015e6:	230c      	movs	r3, #12
 80015e8:	18fb      	adds	r3, r7, r3
 80015ea:	2205      	movs	r2, #5
 80015ec:	801a      	strh	r2, [r3, #0]
 80015ee:	e073      	b.n	80016d8 <DigiTOS_IWDG_Init+0x154>
	} else if (timeout == DigiTOS_IWDG_Timeout_10ms) {
 80015f0:	1dfb      	adds	r3, r7, #7
 80015f2:	781b      	ldrb	r3, [r3, #0]
 80015f4:	2b01      	cmp	r3, #1
 80015f6:	d104      	bne.n	8001602 <DigiTOS_IWDG_Init+0x7e>
		reload = 10; /* 1024 Hz IWDG ticking */
 80015f8:	230c      	movs	r3, #12
 80015fa:	18fb      	adds	r3, r7, r3
 80015fc:	220a      	movs	r2, #10
 80015fe:	801a      	strh	r2, [r3, #0]
 8001600:	e06a      	b.n	80016d8 <DigiTOS_IWDG_Init+0x154>
	} else if (timeout == DigiTOS_IWDG_Timeout_15ms) {
 8001602:	1dfb      	adds	r3, r7, #7
 8001604:	781b      	ldrb	r3, [r3, #0]
 8001606:	2b02      	cmp	r3, #2
 8001608:	d104      	bne.n	8001614 <DigiTOS_IWDG_Init+0x90>
		reload = 15; /* 1024 Hz IWDG ticking */
 800160a:	230c      	movs	r3, #12
 800160c:	18fb      	adds	r3, r7, r3
 800160e:	220f      	movs	r2, #15
 8001610:	801a      	strh	r2, [r3, #0]
 8001612:	e061      	b.n	80016d8 <DigiTOS_IWDG_Init+0x154>
	} else if (timeout == DigiTOS_IWDG_Timeout_30ms) {
 8001614:	1dfb      	adds	r3, r7, #7
 8001616:	781b      	ldrb	r3, [r3, #0]
 8001618:	2b03      	cmp	r3, #3
 800161a:	d104      	bne.n	8001626 <DigiTOS_IWDG_Init+0xa2>
		reload = 31; /* 1024 Hz IWDG ticking */
 800161c:	230c      	movs	r3, #12
 800161e:	18fb      	adds	r3, r7, r3
 8001620:	221f      	movs	r2, #31
 8001622:	801a      	strh	r2, [r3, #0]
 8001624:	e058      	b.n	80016d8 <DigiTOS_IWDG_Init+0x154>
	} else if (timeout == DigiTOS_IWDG_Timeout_60ms) {
 8001626:	1dfb      	adds	r3, r7, #7
 8001628:	781b      	ldrb	r3, [r3, #0]
 800162a:	2b04      	cmp	r3, #4
 800162c:	d104      	bne.n	8001638 <DigiTOS_IWDG_Init+0xb4>
		reload = 61; /* 1024 Hz IWDG ticking */
 800162e:	230c      	movs	r3, #12
 8001630:	18fb      	adds	r3, r7, r3
 8001632:	223d      	movs	r2, #61	; 0x3d
 8001634:	801a      	strh	r2, [r3, #0]
 8001636:	e04f      	b.n	80016d8 <DigiTOS_IWDG_Init+0x154>
	} else if (timeout == DigiTOS_IWDG_Timeout_120ms) {
 8001638:	1dfb      	adds	r3, r7, #7
 800163a:	781b      	ldrb	r3, [r3, #0]
 800163c:	2b05      	cmp	r3, #5
 800163e:	d104      	bne.n	800164a <DigiTOS_IWDG_Init+0xc6>
		reload = 123; /* 1024 Hz IWDG ticking */
 8001640:	230c      	movs	r3, #12
 8001642:	18fb      	adds	r3, r7, r3
 8001644:	227b      	movs	r2, #123	; 0x7b
 8001646:	801a      	strh	r2, [r3, #0]
 8001648:	e046      	b.n	80016d8 <DigiTOS_IWDG_Init+0x154>
	} else if (timeout == DigiTOS_IWDG_Timeout_250ms) {
 800164a:	1dfb      	adds	r3, r7, #7
 800164c:	781b      	ldrb	r3, [r3, #0]
 800164e:	2b06      	cmp	r3, #6
 8001650:	d104      	bne.n	800165c <DigiTOS_IWDG_Init+0xd8>
		reload = 255; /* 1024 Hz IWDG ticking */
 8001652:	230c      	movs	r3, #12
 8001654:	18fb      	adds	r3, r7, r3
 8001656:	22ff      	movs	r2, #255	; 0xff
 8001658:	801a      	strh	r2, [r3, #0]
 800165a:	e03d      	b.n	80016d8 <DigiTOS_IWDG_Init+0x154>
	} else if (timeout == DigiTOS_IWDG_Timeout_500ms) {
 800165c:	1dfb      	adds	r3, r7, #7
 800165e:	781b      	ldrb	r3, [r3, #0]
 8001660:	2b07      	cmp	r3, #7
 8001662:	d104      	bne.n	800166e <DigiTOS_IWDG_Init+0xea>
		reload = 511; /* 1024 Hz IWDG ticking */
 8001664:	230c      	movs	r3, #12
 8001666:	18fb      	adds	r3, r7, r3
 8001668:	4a27      	ldr	r2, [pc, #156]	; (8001708 <DigiTOS_IWDG_Init+0x184>)
 800166a:	801a      	strh	r2, [r3, #0]
 800166c:	e034      	b.n	80016d8 <DigiTOS_IWDG_Init+0x154>
	} else if (timeout == DigiTOS_IWDG_Timeout_1s) {
 800166e:	1dfb      	adds	r3, r7, #7
 8001670:	781b      	ldrb	r3, [r3, #0]
 8001672:	2b08      	cmp	r3, #8
 8001674:	d104      	bne.n	8001680 <DigiTOS_IWDG_Init+0xfc>
		reload = 1023; /* 1024 Hz IWDG ticking */
 8001676:	230c      	movs	r3, #12
 8001678:	18fb      	adds	r3, r7, r3
 800167a:	4a24      	ldr	r2, [pc, #144]	; (800170c <DigiTOS_IWDG_Init+0x188>)
 800167c:	801a      	strh	r2, [r3, #0]
 800167e:	e02b      	b.n	80016d8 <DigiTOS_IWDG_Init+0x154>
	} else if (timeout == DigiTOS_IWDG_Timeout_2s) {
 8001680:	1dfb      	adds	r3, r7, #7
 8001682:	781b      	ldrb	r3, [r3, #0]
 8001684:	2b09      	cmp	r3, #9
 8001686:	d104      	bne.n	8001692 <DigiTOS_IWDG_Init+0x10e>
		reload = 2047; /* 1024 Hz IWDG ticking */
 8001688:	230c      	movs	r3, #12
 800168a:	18fb      	adds	r3, r7, r3
 800168c:	4a20      	ldr	r2, [pc, #128]	; (8001710 <DigiTOS_IWDG_Init+0x18c>)
 800168e:	801a      	strh	r2, [r3, #0]
 8001690:	e022      	b.n	80016d8 <DigiTOS_IWDG_Init+0x154>
	} else if (timeout == DigiTOS_IWDG_Timeout_4s) {
 8001692:	1dfb      	adds	r3, r7, #7
 8001694:	781b      	ldrb	r3, [r3, #0]
 8001696:	2b0a      	cmp	r3, #10
 8001698:	d104      	bne.n	80016a4 <DigiTOS_IWDG_Init+0x120>
		reload = 4095; /* 1024 Hz IWDG ticking */
 800169a:	230c      	movs	r3, #12
 800169c:	18fb      	adds	r3, r7, r3
 800169e:	4a1d      	ldr	r2, [pc, #116]	; (8001714 <DigiTOS_IWDG_Init+0x190>)
 80016a0:	801a      	strh	r2, [r3, #0]
 80016a2:	e019      	b.n	80016d8 <DigiTOS_IWDG_Init+0x154>
	} else if (timeout == DigiTOS_IWDG_Timeout_8s) {
 80016a4:	1dfb      	adds	r3, r7, #7
 80016a6:	781b      	ldrb	r3, [r3, #0]
 80016a8:	2b0b      	cmp	r3, #11
 80016aa:	d104      	bne.n	80016b6 <DigiTOS_IWDG_Init+0x132>
		reload = 1023; /* 128 Hz IWDG ticking */
 80016ac:	230c      	movs	r3, #12
 80016ae:	18fb      	adds	r3, r7, r3
 80016b0:	4a16      	ldr	r2, [pc, #88]	; (800170c <DigiTOS_IWDG_Init+0x188>)
 80016b2:	801a      	strh	r2, [r3, #0]
 80016b4:	e010      	b.n	80016d8 <DigiTOS_IWDG_Init+0x154>
	} else if (timeout == DigiTOS_IWDG_Timeout_16s) {
 80016b6:	1dfb      	adds	r3, r7, #7
 80016b8:	781b      	ldrb	r3, [r3, #0]
 80016ba:	2b0c      	cmp	r3, #12
 80016bc:	d104      	bne.n	80016c8 <DigiTOS_IWDG_Init+0x144>
		reload = 2047; /* 128 Hz IWDG ticking */
 80016be:	230c      	movs	r3, #12
 80016c0:	18fb      	adds	r3, r7, r3
 80016c2:	4a13      	ldr	r2, [pc, #76]	; (8001710 <DigiTOS_IWDG_Init+0x18c>)
 80016c4:	801a      	strh	r2, [r3, #0]
 80016c6:	e007      	b.n	80016d8 <DigiTOS_IWDG_Init+0x154>
	} else if (timeout == DigiTOS_IWDG_Timeout_32s) {
 80016c8:	1dfb      	adds	r3, r7, #7
 80016ca:	781b      	ldrb	r3, [r3, #0]
 80016cc:	2b0d      	cmp	r3, #13
 80016ce:	d103      	bne.n	80016d8 <DigiTOS_IWDG_Init+0x154>
		reload = 4095; /* 128 Hz IWDG ticking */
 80016d0:	230c      	movs	r3, #12
 80016d2:	18fb      	adds	r3, r7, r3
 80016d4:	4a0f      	ldr	r2, [pc, #60]	; (8001714 <DigiTOS_IWDG_Init+0x190>)
 80016d6:	801a      	strh	r2, [r3, #0]
	}
	
	/* Set reload */
	IWDG->RLR = reload;
 80016d8:	4b09      	ldr	r3, [pc, #36]	; (8001700 <DigiTOS_IWDG_Init+0x17c>)
 80016da:	220c      	movs	r2, #12
 80016dc:	18ba      	adds	r2, r7, r2
 80016de:	8812      	ldrh	r2, [r2, #0]
 80016e0:	609a      	str	r2, [r3, #8]

	/* Reload IWDG counter */
	IWDG->KR = 0xAAAA;
 80016e2:	4b07      	ldr	r3, [pc, #28]	; (8001700 <DigiTOS_IWDG_Init+0x17c>)
 80016e4:	4a0c      	ldr	r2, [pc, #48]	; (8001718 <DigiTOS_IWDG_Init+0x194>)
 80016e6:	601a      	str	r2, [r3, #0]

	/* Enable IWDG (the LSI oscillator will be enabled by hardware) */
	IWDG->KR = 0xCCCC;
 80016e8:	4b05      	ldr	r3, [pc, #20]	; (8001700 <DigiTOS_IWDG_Init+0x17c>)
 80016ea:	4a0c      	ldr	r2, [pc, #48]	; (800171c <DigiTOS_IWDG_Init+0x198>)
 80016ec:	601a      	str	r2, [r3, #0]
	
	/* Return status */
	return result;
 80016ee:	230f      	movs	r3, #15
 80016f0:	18fb      	adds	r3, r7, r3
 80016f2:	781b      	ldrb	r3, [r3, #0]
}
 80016f4:	0018      	movs	r0, r3
 80016f6:	46bd      	mov	sp, r7
 80016f8:	b004      	add	sp, #16
 80016fa:	bd80      	pop	{r7, pc}
 80016fc:	40021000 	.word	0x40021000
 8001700:	40003000 	.word	0x40003000
 8001704:	00005555 	.word	0x00005555
 8001708:	000001ff 	.word	0x000001ff
 800170c:	000003ff 	.word	0x000003ff
 8001710:	000007ff 	.word	0x000007ff
 8001714:	00000fff 	.word	0x00000fff
 8001718:	0000aaaa 	.word	0x0000aaaa
 800171c:	0000cccc 	.word	0x0000cccc

08001720 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001720:	b580      	push	{r7, lr}
 8001722:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001724:	4b07      	ldr	r3, [pc, #28]	; (8001744 <HAL_Init+0x24>)
 8001726:	681a      	ldr	r2, [r3, #0]
 8001728:	4b06      	ldr	r3, [pc, #24]	; (8001744 <HAL_Init+0x24>)
 800172a:	2110      	movs	r1, #16
 800172c:	430a      	orrs	r2, r1
 800172e:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8001730:	2000      	movs	r0, #0
 8001732:	f000 f809 	bl	8001748 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001736:	f7ff f925 	bl	8000984 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800173a:	2300      	movs	r3, #0
}
 800173c:	0018      	movs	r0, r3
 800173e:	46bd      	mov	sp, r7
 8001740:	bd80      	pop	{r7, pc}
 8001742:	46c0      	nop			; (mov r8, r8)
 8001744:	40022000 	.word	0x40022000

08001748 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001748:	b580      	push	{r7, lr}
 800174a:	b082      	sub	sp, #8
 800174c:	af00      	add	r7, sp, #0
 800174e:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000U);
 8001750:	f002 fd50 	bl	80041f4 <HAL_RCC_GetHCLKFreq>
 8001754:	0002      	movs	r2, r0
 8001756:	23fa      	movs	r3, #250	; 0xfa
 8001758:	0099      	lsls	r1, r3, #2
 800175a:	0010      	movs	r0, r2
 800175c:	f7fe fcd4 	bl	8000108 <__udivsi3>
 8001760:	0003      	movs	r3, r0
 8001762:	0018      	movs	r0, r3
 8001764:	f000 fece 	bl	8002504 <HAL_SYSTICK_Config>

  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority ,0U);
 8001768:	6879      	ldr	r1, [r7, #4]
 800176a:	2301      	movs	r3, #1
 800176c:	425b      	negs	r3, r3
 800176e:	2200      	movs	r2, #0
 8001770:	0018      	movs	r0, r3
 8001772:	f000 fe8b 	bl	800248c <HAL_NVIC_SetPriority>

   /* Return function status */
  return HAL_OK;
 8001776:	2300      	movs	r3, #0
}
 8001778:	0018      	movs	r0, r3
 800177a:	46bd      	mov	sp, r7
 800177c:	b002      	add	sp, #8
 800177e:	bd80      	pop	{r7, pc}

08001780 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001780:	b580      	push	{r7, lr}
 8001782:	af00      	add	r7, sp, #0
  uwTick++;
 8001784:	4b03      	ldr	r3, [pc, #12]	; (8001794 <HAL_IncTick+0x14>)
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	1c5a      	adds	r2, r3, #1
 800178a:	4b02      	ldr	r3, [pc, #8]	; (8001794 <HAL_IncTick+0x14>)
 800178c:	601a      	str	r2, [r3, #0]
}
 800178e:	46c0      	nop			; (mov r8, r8)
 8001790:	46bd      	mov	sp, r7
 8001792:	bd80      	pop	{r7, pc}
 8001794:	20000670 	.word	0x20000670

08001798 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001798:	b580      	push	{r7, lr}
 800179a:	af00      	add	r7, sp, #0
  return uwTick;
 800179c:	4b02      	ldr	r3, [pc, #8]	; (80017a8 <HAL_GetTick+0x10>)
 800179e:	681b      	ldr	r3, [r3, #0]
}
 80017a0:	0018      	movs	r0, r3
 80017a2:	46bd      	mov	sp, r7
 80017a4:	bd80      	pop	{r7, pc}
 80017a6:	46c0      	nop			; (mov r8, r8)
 80017a8:	20000670 	.word	0x20000670

080017ac <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(__IO uint32_t Delay)
{
 80017ac:	b580      	push	{r7, lr}
 80017ae:	b084      	sub	sp, #16
 80017b0:	af00      	add	r7, sp, #0
 80017b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80017b4:	f7ff fff0 	bl	8001798 <HAL_GetTick>
 80017b8:	0003      	movs	r3, r0
 80017ba:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	60fb      	str	r3, [r7, #12]
  
  /* Add a period to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80017c0:	68fb      	ldr	r3, [r7, #12]
 80017c2:	3301      	adds	r3, #1
 80017c4:	d002      	beq.n	80017cc <HAL_Delay+0x20>
  {
     wait++;
 80017c6:	68fb      	ldr	r3, [r7, #12]
 80017c8:	3301      	adds	r3, #1
 80017ca:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80017cc:	46c0      	nop			; (mov r8, r8)
 80017ce:	f7ff ffe3 	bl	8001798 <HAL_GetTick>
 80017d2:	0002      	movs	r2, r0
 80017d4:	68bb      	ldr	r3, [r7, #8]
 80017d6:	1ad3      	subs	r3, r2, r3
 80017d8:	68fa      	ldr	r2, [r7, #12]
 80017da:	429a      	cmp	r2, r3
 80017dc:	d8f7      	bhi.n	80017ce <HAL_Delay+0x22>
  {
  }
}
 80017de:	46c0      	nop			; (mov r8, r8)
 80017e0:	46bd      	mov	sp, r7
 80017e2:	b004      	add	sp, #16
 80017e4:	bd80      	pop	{r7, pc}
	...

080017e8 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80017e8:	b580      	push	{r7, lr}
 80017ea:	b084      	sub	sp, #16
 80017ec:	af00      	add	r7, sp, #0
 80017ee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80017f0:	230f      	movs	r3, #15
 80017f2:	18fb      	adds	r3, r7, r3
 80017f4:	2200      	movs	r2, #0
 80017f6:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0U;
 80017f8:	2300      	movs	r3, #0
 80017fa:	60bb      	str	r3, [r7, #8]

  /* Check ADC handle */
  if(hadc == NULL)
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d101      	bne.n	8001806 <HAL_ADC_Init+0x1e>
  {
    return HAL_ERROR;
 8001802:	2301      	movs	r3, #1
 8001804:	e234      	b.n	8001c70 <HAL_ADC_Init+0x488>
  }
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	4ac4      	ldr	r2, [pc, #784]	; (8001b1c <HAL_ADC_Init+0x334>)
 800180c:	4293      	cmp	r3, r2
 800180e:	d007      	beq.n	8001820 <HAL_ADC_Init+0x38>
 8001810:	2374      	movs	r3, #116	; 0x74
 8001812:	33ff      	adds	r3, #255	; 0xff
 8001814:	001a      	movs	r2, r3
 8001816:	4bc2      	ldr	r3, [pc, #776]	; (8001b20 <HAL_ADC_Init+0x338>)
 8001818:	0011      	movs	r1, r2
 800181a:	0018      	movs	r0, r3
 800181c:	f7ff f8a9 	bl	8000972 <assert_failed>
  assert_param(IS_ADC_CLOCKPRESCALER(hadc->Init.ClockPrescaler));
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	685b      	ldr	r3, [r3, #4]
 8001824:	2b00      	cmp	r3, #0
 8001826:	d012      	beq.n	800184e <HAL_ADC_Init+0x66>
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	685a      	ldr	r2, [r3, #4]
 800182c:	2380      	movs	r3, #128	; 0x80
 800182e:	05db      	lsls	r3, r3, #23
 8001830:	429a      	cmp	r2, r3
 8001832:	d00c      	beq.n	800184e <HAL_ADC_Init+0x66>
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	685a      	ldr	r2, [r3, #4]
 8001838:	2380      	movs	r3, #128	; 0x80
 800183a:	061b      	lsls	r3, r3, #24
 800183c:	429a      	cmp	r2, r3
 800183e:	d006      	beq.n	800184e <HAL_ADC_Init+0x66>
 8001840:	23ba      	movs	r3, #186	; 0xba
 8001842:	005a      	lsls	r2, r3, #1
 8001844:	4bb6      	ldr	r3, [pc, #728]	; (8001b20 <HAL_ADC_Init+0x338>)
 8001846:	0011      	movs	r1, r2
 8001848:	0018      	movs	r0, r3
 800184a:	f7ff f892 	bl	8000972 <assert_failed>
  assert_param(IS_ADC_RESOLUTION(hadc->Init.Resolution));
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	689b      	ldr	r3, [r3, #8]
 8001852:	2b00      	cmp	r3, #0
 8001854:	d013      	beq.n	800187e <HAL_ADC_Init+0x96>
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	689b      	ldr	r3, [r3, #8]
 800185a:	2b08      	cmp	r3, #8
 800185c:	d00f      	beq.n	800187e <HAL_ADC_Init+0x96>
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	689b      	ldr	r3, [r3, #8]
 8001862:	2b10      	cmp	r3, #16
 8001864:	d00b      	beq.n	800187e <HAL_ADC_Init+0x96>
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	689b      	ldr	r3, [r3, #8]
 800186a:	2b18      	cmp	r3, #24
 800186c:	d007      	beq.n	800187e <HAL_ADC_Init+0x96>
 800186e:	2376      	movs	r3, #118	; 0x76
 8001870:	33ff      	adds	r3, #255	; 0xff
 8001872:	001a      	movs	r2, r3
 8001874:	4baa      	ldr	r3, [pc, #680]	; (8001b20 <HAL_ADC_Init+0x338>)
 8001876:	0011      	movs	r1, r2
 8001878:	0018      	movs	r0, r3
 800187a:	f7ff f87a 	bl	8000972 <assert_failed>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign)); 
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	68db      	ldr	r3, [r3, #12]
 8001882:	2b00      	cmp	r3, #0
 8001884:	d00a      	beq.n	800189c <HAL_ADC_Init+0xb4>
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	68db      	ldr	r3, [r3, #12]
 800188a:	2b20      	cmp	r3, #32
 800188c:	d006      	beq.n	800189c <HAL_ADC_Init+0xb4>
 800188e:	23bb      	movs	r3, #187	; 0xbb
 8001890:	005a      	lsls	r2, r3, #1
 8001892:	4ba3      	ldr	r3, [pc, #652]	; (8001b20 <HAL_ADC_Init+0x338>)
 8001894:	0011      	movs	r1, r2
 8001896:	0018      	movs	r0, r3
 8001898:	f7ff f86b 	bl	8000972 <assert_failed>
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	691b      	ldr	r3, [r3, #16]
 80018a0:	2b01      	cmp	r3, #1
 80018a2:	d00b      	beq.n	80018bc <HAL_ADC_Init+0xd4>
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	691b      	ldr	r3, [r3, #16]
 80018a8:	2b02      	cmp	r3, #2
 80018aa:	d007      	beq.n	80018bc <HAL_ADC_Init+0xd4>
 80018ac:	2378      	movs	r3, #120	; 0x78
 80018ae:	33ff      	adds	r3, #255	; 0xff
 80018b0:	001a      	movs	r2, r3
 80018b2:	4b9b      	ldr	r3, [pc, #620]	; (8001b20 <HAL_ADC_Init+0x338>)
 80018b4:	0011      	movs	r1, r2
 80018b6:	0018      	movs	r0, r3
 80018b8:	f7ff f85b 	bl	8000972 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	6a1b      	ldr	r3, [r3, #32]
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d00a      	beq.n	80018da <HAL_ADC_Init+0xf2>
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	6a1b      	ldr	r3, [r3, #32]
 80018c8:	2b01      	cmp	r3, #1
 80018ca:	d006      	beq.n	80018da <HAL_ADC_Init+0xf2>
 80018cc:	23bc      	movs	r3, #188	; 0xbc
 80018ce:	005a      	lsls	r2, r3, #1
 80018d0:	4b93      	ldr	r3, [pc, #588]	; (8001b20 <HAL_ADC_Init+0x338>)
 80018d2:	0011      	movs	r1, r2
 80018d4:	0018      	movs	r0, r3
 80018d6:	f7ff f84c 	bl	8000972 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DiscontinuousConvMode));
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d00b      	beq.n	80018fa <HAL_ADC_Init+0x112>
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018e6:	2b01      	cmp	r3, #1
 80018e8:	d007      	beq.n	80018fa <HAL_ADC_Init+0x112>
 80018ea:	237a      	movs	r3, #122	; 0x7a
 80018ec:	33ff      	adds	r3, #255	; 0xff
 80018ee:	001a      	movs	r2, r3
 80018f0:	4b8b      	ldr	r3, [pc, #556]	; (8001b20 <HAL_ADC_Init+0x338>)
 80018f2:	0011      	movs	r1, r2
 80018f4:	0018      	movs	r0, r3
 80018f6:	f7ff f83c 	bl	8000972 <assert_failed>
  assert_param(IS_ADC_EXTTRIG_EDGE(hadc->Init.ExternalTrigConvEdge));   
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d018      	beq.n	8001934 <HAL_ADC_Init+0x14c>
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001906:	2380      	movs	r3, #128	; 0x80
 8001908:	00db      	lsls	r3, r3, #3
 800190a:	429a      	cmp	r2, r3
 800190c:	d012      	beq.n	8001934 <HAL_ADC_Init+0x14c>
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001912:	2380      	movs	r3, #128	; 0x80
 8001914:	011b      	lsls	r3, r3, #4
 8001916:	429a      	cmp	r2, r3
 8001918:	d00c      	beq.n	8001934 <HAL_ADC_Init+0x14c>
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800191e:	23c0      	movs	r3, #192	; 0xc0
 8001920:	011b      	lsls	r3, r3, #4
 8001922:	429a      	cmp	r2, r3
 8001924:	d006      	beq.n	8001934 <HAL_ADC_Init+0x14c>
 8001926:	23bd      	movs	r3, #189	; 0xbd
 8001928:	005a      	lsls	r2, r3, #1
 800192a:	4b7d      	ldr	r3, [pc, #500]	; (8001b20 <HAL_ADC_Init+0x338>)
 800192c:	0011      	movs	r1, r2
 800192e:	0018      	movs	r0, r3
 8001930:	f7ff f81f 	bl	8000972 <assert_failed>
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));   
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001938:	2b00      	cmp	r3, #0
 800193a:	d01f      	beq.n	800197c <HAL_ADC_Init+0x194>
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001940:	2b40      	cmp	r3, #64	; 0x40
 8001942:	d01b      	beq.n	800197c <HAL_ADC_Init+0x194>
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001948:	2b80      	cmp	r3, #128	; 0x80
 800194a:	d017      	beq.n	800197c <HAL_ADC_Init+0x194>
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001950:	2bc0      	cmp	r3, #192	; 0xc0
 8001952:	d013      	beq.n	800197c <HAL_ADC_Init+0x194>
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001958:	2380      	movs	r3, #128	; 0x80
 800195a:	005b      	lsls	r3, r3, #1
 800195c:	429a      	cmp	r2, r3
 800195e:	d00d      	beq.n	800197c <HAL_ADC_Init+0x194>
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001964:	23c2      	movs	r3, #194	; 0xc2
 8001966:	33ff      	adds	r3, #255	; 0xff
 8001968:	429a      	cmp	r2, r3
 800196a:	d007      	beq.n	800197c <HAL_ADC_Init+0x194>
 800196c:	237c      	movs	r3, #124	; 0x7c
 800196e:	33ff      	adds	r3, #255	; 0xff
 8001970:	001a      	movs	r2, r3
 8001972:	4b6b      	ldr	r3, [pc, #428]	; (8001b20 <HAL_ADC_Init+0x338>)
 8001974:	0011      	movs	r1, r2
 8001976:	0018      	movs	r0, r3
 8001978:	f7fe fffb 	bl	8000972 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001980:	2b00      	cmp	r3, #0
 8001982:	d00a      	beq.n	800199a <HAL_ADC_Init+0x1b2>
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001988:	2b01      	cmp	r3, #1
 800198a:	d006      	beq.n	800199a <HAL_ADC_Init+0x1b2>
 800198c:	23be      	movs	r3, #190	; 0xbe
 800198e:	005a      	lsls	r2, r3, #1
 8001990:	4b63      	ldr	r3, [pc, #396]	; (8001b20 <HAL_ADC_Init+0x338>)
 8001992:	0011      	movs	r1, r2
 8001994:	0018      	movs	r0, r3
 8001996:	f7fe ffec 	bl	8000972 <assert_failed>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	695b      	ldr	r3, [r3, #20]
 800199e:	2b04      	cmp	r3, #4
 80019a0:	d00b      	beq.n	80019ba <HAL_ADC_Init+0x1d2>
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	695b      	ldr	r3, [r3, #20]
 80019a6:	2b08      	cmp	r3, #8
 80019a8:	d007      	beq.n	80019ba <HAL_ADC_Init+0x1d2>
 80019aa:	237e      	movs	r3, #126	; 0x7e
 80019ac:	33ff      	adds	r3, #255	; 0xff
 80019ae:	001a      	movs	r2, r3
 80019b0:	4b5b      	ldr	r3, [pc, #364]	; (8001b20 <HAL_ADC_Init+0x338>)
 80019b2:	0011      	movs	r1, r2
 80019b4:	0018      	movs	r0, r3
 80019b6:	f7fe ffdc 	bl	8000972 <assert_failed>
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80019be:	2b01      	cmp	r3, #1
 80019c0:	d00a      	beq.n	80019d8 <HAL_ADC_Init+0x1f0>
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d006      	beq.n	80019d8 <HAL_ADC_Init+0x1f0>
 80019ca:	23bf      	movs	r3, #191	; 0xbf
 80019cc:	005a      	lsls	r2, r3, #1
 80019ce:	4b54      	ldr	r3, [pc, #336]	; (8001b20 <HAL_ADC_Init+0x338>)
 80019d0:	0011      	movs	r1, r2
 80019d2:	0018      	movs	r0, r3
 80019d4:	f7fe ffcd 	bl	8000972 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	699b      	ldr	r3, [r3, #24]
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d00b      	beq.n	80019f8 <HAL_ADC_Init+0x210>
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	699b      	ldr	r3, [r3, #24]
 80019e4:	2b01      	cmp	r3, #1
 80019e6:	d007      	beq.n	80019f8 <HAL_ADC_Init+0x210>
 80019e8:	2380      	movs	r3, #128	; 0x80
 80019ea:	33ff      	adds	r3, #255	; 0xff
 80019ec:	001a      	movs	r2, r3
 80019ee:	4b4c      	ldr	r3, [pc, #304]	; (8001b20 <HAL_ADC_Init+0x338>)
 80019f0:	0011      	movs	r1, r2
 80019f2:	0018      	movs	r0, r3
 80019f4:	f7fe ffbd 	bl	8000972 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoPowerOff));
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	69db      	ldr	r3, [r3, #28]
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d00a      	beq.n	8001a16 <HAL_ADC_Init+0x22e>
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	69db      	ldr	r3, [r3, #28]
 8001a04:	2b01      	cmp	r3, #1
 8001a06:	d006      	beq.n	8001a16 <HAL_ADC_Init+0x22e>
 8001a08:	23c0      	movs	r3, #192	; 0xc0
 8001a0a:	005a      	lsls	r2, r3, #1
 8001a0c:	4b44      	ldr	r3, [pc, #272]	; (8001b20 <HAL_ADC_Init+0x338>)
 8001a0e:	0011      	movs	r1, r2
 8001a10:	0018      	movs	r0, r3
 8001a12:	f7fe ffae 	bl	8000972 <assert_failed>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d10a      	bne.n	8001a34 <HAL_ADC_Init+0x24c>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	2200      	movs	r2, #0
 8001a22:	649a      	str	r2, [r3, #72]	; 0x48
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	2240      	movs	r2, #64	; 0x40
 8001a28:	2100      	movs	r1, #0
 8001a2a:	5499      	strb	r1, [r3, r2]
    
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	0018      	movs	r0, r3
 8001a30:	f7fe fc84 	bl	800033c <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */ 
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a38:	2210      	movs	r2, #16
 8001a3a:	4013      	ands	r3, r2
 8001a3c:	d000      	beq.n	8001a40 <HAL_ADC_Init+0x258>
 8001a3e:	e10a      	b.n	8001c56 <HAL_ADC_Init+0x46e>
 8001a40:	230f      	movs	r3, #15
 8001a42:	18fb      	adds	r3, r7, r3
 8001a44:	781b      	ldrb	r3, [r3, #0]
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d000      	beq.n	8001a4c <HAL_ADC_Init+0x264>
 8001a4a:	e104      	b.n	8001c56 <HAL_ADC_Init+0x46e>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	689b      	ldr	r3, [r3, #8]
 8001a52:	2204      	movs	r2, #4
 8001a54:	4013      	ands	r3, r2
      (tmp_hal_status == HAL_OK)                                &&
 8001a56:	d000      	beq.n	8001a5a <HAL_ADC_Init+0x272>
 8001a58:	e0fd      	b.n	8001c56 <HAL_ADC_Init+0x46e>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a5e:	4a31      	ldr	r2, [pc, #196]	; (8001b24 <HAL_ADC_Init+0x33c>)
 8001a60:	4013      	ands	r3, r2
 8001a62:	2202      	movs	r2, #2
 8001a64:	431a      	orrs	r2, r3
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	645a      	str	r2, [r3, #68]	; 0x44
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - ADC clock mode                                                      */
    /*  - ADC clock prescaler                                                 */
    /*  - ADC resolution                                                      */
    if (ADC_IS_ENABLE(hadc) == RESET)
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	689b      	ldr	r3, [r3, #8]
 8001a70:	2203      	movs	r2, #3
 8001a72:	4013      	ands	r3, r2
 8001a74:	2b01      	cmp	r3, #1
 8001a76:	d112      	bne.n	8001a9e <HAL_ADC_Init+0x2b6>
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	2201      	movs	r2, #1
 8001a80:	4013      	ands	r3, r2
 8001a82:	2b01      	cmp	r3, #1
 8001a84:	d009      	beq.n	8001a9a <HAL_ADC_Init+0x2b2>
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	68da      	ldr	r2, [r3, #12]
 8001a8c:	2380      	movs	r3, #128	; 0x80
 8001a8e:	021b      	lsls	r3, r3, #8
 8001a90:	401a      	ands	r2, r3
 8001a92:	2380      	movs	r3, #128	; 0x80
 8001a94:	021b      	lsls	r3, r3, #8
 8001a96:	429a      	cmp	r2, r3
 8001a98:	d101      	bne.n	8001a9e <HAL_ADC_Init+0x2b6>
 8001a9a:	2301      	movs	r3, #1
 8001a9c:	e000      	b.n	8001aa0 <HAL_ADC_Init+0x2b8>
 8001a9e:	2300      	movs	r3, #0
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d116      	bne.n	8001ad2 <HAL_ADC_Init+0x2ea>
      /* parameters):                                                         */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() )                              */
     
      /* Configuration of ADC resolution                                      */
      MODIFY_REG(hadc->Instance->CFGR1,
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	68db      	ldr	r3, [r3, #12]
 8001aaa:	2218      	movs	r2, #24
 8001aac:	4393      	bics	r3, r2
 8001aae:	0019      	movs	r1, r3
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	689a      	ldr	r2, [r3, #8]
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	430a      	orrs	r2, r1
 8001aba:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_RES        ,
                 hadc->Init.Resolution );
      
      /* Configuration of ADC clock mode: clock source AHB or HSI with        */
      /* selectable prescaler                                                 */
      MODIFY_REG(hadc->Instance->CFGR2    ,
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	691b      	ldr	r3, [r3, #16]
 8001ac2:	009b      	lsls	r3, r3, #2
 8001ac4:	0899      	lsrs	r1, r3, #2
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	685a      	ldr	r2, [r3, #4]
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	430a      	orrs	r2, r1
 8001ad0:	611a      	str	r2, [r3, #16]
    /*  - external trigger polarity                                           */
    /*  - data alignment                                                      */
    /*  - resolution                                                          */
    /*  - scan direction                                                      */
    /*  - DMA continuous request                                              */
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_DISCEN  |
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	68da      	ldr	r2, [r3, #12]
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	4912      	ldr	r1, [pc, #72]	; (8001b28 <HAL_ADC_Init+0x340>)
 8001ade:	400a      	ands	r2, r1
 8001ae0:	60da      	str	r2, [r3, #12]
                                ADC_CFGR1_EXTEN   |
                                ADC_CFGR1_ALIGN   |
                                ADC_CFGR1_SCANDIR |
                                ADC_CFGR1_DMACFG   );

    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT(hadc->Init.LowPowerAutoWait)        |
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	699b      	ldr	r3, [r3, #24]
 8001ae6:	039a      	lsls	r2, r3, #14
                 ADC_CFGR1_AUTOOFF(hadc->Init.LowPowerAutoPowerOff)     |
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	69db      	ldr	r3, [r3, #28]
 8001aec:	03db      	lsls	r3, r3, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT(hadc->Init.LowPowerAutoWait)        |
 8001aee:	431a      	orrs	r2, r3
                 ADC_CFGR1_CONTINUOUS(hadc->Init.ContinuousConvMode)    |
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	6a1b      	ldr	r3, [r3, #32]
 8001af4:	035b      	lsls	r3, r3, #13
                 ADC_CFGR1_AUTOOFF(hadc->Init.LowPowerAutoPowerOff)     |
 8001af6:	431a      	orrs	r2, r3
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                  |
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001afc:	2b01      	cmp	r3, #1
 8001afe:	d002      	beq.n	8001b06 <HAL_ADC_Init+0x31e>
 8001b00:	2380      	movs	r3, #128	; 0x80
 8001b02:	015b      	lsls	r3, r3, #5
 8001b04:	e000      	b.n	8001b08 <HAL_ADC_Init+0x320>
 8001b06:	2300      	movs	r3, #0
                 ADC_CFGR1_CONTINUOUS(hadc->Init.ContinuousConvMode)    |
 8001b08:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                   |
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	68db      	ldr	r3, [r3, #12]
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                  |
 8001b0e:	431a      	orrs	r2, r3
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                   |
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	691b      	ldr	r3, [r3, #16]
 8001b14:	2b02      	cmp	r3, #2
 8001b16:	d109      	bne.n	8001b2c <HAL_ADC_Init+0x344>
 8001b18:	2304      	movs	r3, #4
 8001b1a:	e008      	b.n	8001b2e <HAL_ADC_Init+0x346>
 8001b1c:	40012400 	.word	0x40012400
 8001b20:	08006efc 	.word	0x08006efc
 8001b24:	fffffefd 	.word	0xfffffefd
 8001b28:	fffe0219 	.word	0xfffe0219
 8001b2c:	2300      	movs	r3, #0
                 hadc->Init.DataAlign                                   |
 8001b2e:	431a      	orrs	r2, r3
                 ADC_CFGR1_DMACONTREQ(hadc->Init.DMAContinuousRequests)  );
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b34:	005b      	lsls	r3, r3, #1
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                   |
 8001b36:	4313      	orrs	r3, r2
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT(hadc->Init.LowPowerAutoWait)        |
 8001b38:	68ba      	ldr	r2, [r7, #8]
 8001b3a:	4313      	orrs	r3, r2
 8001b3c:	60bb      	str	r3, [r7, #8]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b42:	2b01      	cmp	r3, #1
 8001b44:	d115      	bne.n	8001b72 <HAL_ADC_Init+0x38a>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	6a1b      	ldr	r3, [r3, #32]
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d105      	bne.n	8001b5a <HAL_ADC_Init+0x372>
      {
        /* Enable the selected ADC group regular discontinuous mode */
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8001b4e:	68bb      	ldr	r3, [r7, #8]
 8001b50:	2280      	movs	r2, #128	; 0x80
 8001b52:	0252      	lsls	r2, r2, #9
 8001b54:	4313      	orrs	r3, r2
 8001b56:	60bb      	str	r3, [r7, #8]
 8001b58:	e00b      	b.n	8001b72 <HAL_ADC_Init+0x38a>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b5e:	2220      	movs	r2, #32
 8001b60:	431a      	orrs	r2, r3
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	645a      	str	r2, [r3, #68]	; 0x44
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001b6a:	2201      	movs	r2, #1
 8001b6c:	431a      	orrs	r2, r3
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	649a      	str	r2, [r3, #72]	; 0x48
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001b76:	23c2      	movs	r3, #194	; 0xc2
 8001b78:	33ff      	adds	r3, #255	; 0xff
 8001b7a:	429a      	cmp	r2, r3
 8001b7c:	d007      	beq.n	8001b8e <HAL_ADC_Init+0x3a6>
    {
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	6a9a      	ldr	r2, [r3, #40]	; 0x28
                    hadc->Init.ExternalTrigConvEdge );
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8001b86:	4313      	orrs	r3, r2
 8001b88:	68ba      	ldr	r2, [r7, #8]
 8001b8a:	4313      	orrs	r3, r2
 8001b8c:	60bb      	str	r3, [r7, #8]
    }
    
    /* Update ADC configuration register with previous settings */
    hadc->Instance->CFGR1 |= tmpCFGR1;
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	68d9      	ldr	r1, [r3, #12]
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	68ba      	ldr	r2, [r7, #8]
 8001b9a:	430a      	orrs	r2, r1
 8001b9c:	60da      	str	r2, [r3, #12]
    /* Management of parameters "SamplingTimeCommon" and "SamplingTime"       */
    /* (obsolete): sampling time set in this function if parameter            */
    /*  "SamplingTimeCommon" has been set to a valid sampling time.           */
    /* Otherwise, sampling time is set into ADC channel initialization        */
    /* structure with parameter "SamplingTime" (obsolete).                    */
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001ba2:	2380      	movs	r3, #128	; 0x80
 8001ba4:	055b      	lsls	r3, r3, #21
 8001ba6:	429a      	cmp	r2, r3
 8001ba8:	d01b      	beq.n	8001be2 <HAL_ADC_Init+0x3fa>
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001bae:	2b01      	cmp	r3, #1
 8001bb0:	d017      	beq.n	8001be2 <HAL_ADC_Init+0x3fa>
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001bb6:	2b02      	cmp	r3, #2
 8001bb8:	d013      	beq.n	8001be2 <HAL_ADC_Init+0x3fa>
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001bbe:	2b03      	cmp	r3, #3
 8001bc0:	d00f      	beq.n	8001be2 <HAL_ADC_Init+0x3fa>
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001bc6:	2b04      	cmp	r3, #4
 8001bc8:	d00b      	beq.n	8001be2 <HAL_ADC_Init+0x3fa>
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001bce:	2b05      	cmp	r3, #5
 8001bd0:	d007      	beq.n	8001be2 <HAL_ADC_Init+0x3fa>
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001bd6:	2b06      	cmp	r3, #6
 8001bd8:	d003      	beq.n	8001be2 <HAL_ADC_Init+0x3fa>
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001bde:	2b07      	cmp	r3, #7
 8001be0:	d112      	bne.n	8001c08 <HAL_ADC_Init+0x420>
    {
      /* Channel sampling time configuration */
      /* Clear the old sample time */
      hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	695a      	ldr	r2, [r3, #20]
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	2107      	movs	r1, #7
 8001bee:	438a      	bics	r2, r1
 8001bf0:	615a      	str	r2, [r3, #20]
      
      /* Set the new sample time */
      hadc->Instance->SMPR |= ADC_SMPR_SET(hadc->Init.SamplingTimeCommon);
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	6959      	ldr	r1, [r3, #20]
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001bfc:	2207      	movs	r2, #7
 8001bfe:	401a      	ands	r2, r3
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	430a      	orrs	r2, r1
 8001c06:	615a      	str	r2, [r3, #20]
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CFGR1 (excluding analog watchdog configuration: */
    /* set into separate dedicated function, and bits of ADC resolution set   */
    /* out of temporary variable 'tmpCFGR1').                                 */
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	68db      	ldr	r3, [r3, #12]
 8001c0e:	4a1a      	ldr	r2, [pc, #104]	; (8001c78 <HAL_ADC_Init+0x490>)
 8001c10:	4013      	ands	r3, r2
 8001c12:	68ba      	ldr	r2, [r7, #8]
 8001c14:	429a      	cmp	r2, r3
 8001c16:	d10b      	bne.n	8001c30 <HAL_ADC_Init+0x448>
         == tmpCFGR1)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	2200      	movs	r2, #0
 8001c1c:	649a      	str	r2, [r3, #72]	; 0x48
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c22:	2203      	movs	r2, #3
 8001c24:	4393      	bics	r3, r2
 8001c26:	2201      	movs	r2, #1
 8001c28:	431a      	orrs	r2, r3
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	645a      	str	r2, [r3, #68]	; 0x44
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8001c2e:	e01c      	b.n	8001c6a <HAL_ADC_Init+0x482>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c34:	2212      	movs	r2, #18
 8001c36:	4393      	bics	r3, r2
 8001c38:	2210      	movs	r2, #16
 8001c3a:	431a      	orrs	r2, r3
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	645a      	str	r2, [r3, #68]	; 0x44
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001c44:	2201      	movs	r2, #1
 8001c46:	431a      	orrs	r2, r3
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	649a      	str	r2, [r3, #72]	; 0x48
      
      tmp_hal_status = HAL_ERROR;
 8001c4c:	230f      	movs	r3, #15
 8001c4e:	18fb      	adds	r3, r7, r3
 8001c50:	2201      	movs	r2, #1
 8001c52:	701a      	strb	r2, [r3, #0]
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8001c54:	e009      	b.n	8001c6a <HAL_ADC_Init+0x482>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c5a:	2210      	movs	r2, #16
 8001c5c:	431a      	orrs	r2, r3
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	645a      	str	r2, [r3, #68]	; 0x44
        
    tmp_hal_status = HAL_ERROR;
 8001c62:	230f      	movs	r3, #15
 8001c64:	18fb      	adds	r3, r7, r3
 8001c66:	2201      	movs	r2, #1
 8001c68:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001c6a:	230f      	movs	r3, #15
 8001c6c:	18fb      	adds	r3, r7, r3
 8001c6e:	781b      	ldrb	r3, [r3, #0]
}
 8001c70:	0018      	movs	r0, r3
 8001c72:	46bd      	mov	sp, r7
 8001c74:	b004      	add	sp, #16
 8001c76:	bd80      	pop	{r7, pc}
 8001c78:	833fffe7 	.word	0x833fffe7

08001c7c <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8001c7c:	b590      	push	{r4, r7, lr}
 8001c7e:	b087      	sub	sp, #28
 8001c80:	af00      	add	r7, sp, #0
 8001c82:	60f8      	str	r0, [r7, #12]
 8001c84:	60b9      	str	r1, [r7, #8]
 8001c86:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001c88:	2317      	movs	r3, #23
 8001c8a:	18fb      	adds	r3, r7, r3
 8001c8c:	2200      	movs	r2, #0
 8001c8e:	701a      	strb	r2, [r3, #0]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	4a3c      	ldr	r2, [pc, #240]	; (8001d88 <HAL_ADC_Start_DMA+0x10c>)
 8001c96:	4293      	cmp	r3, r2
 8001c98:	d005      	beq.n	8001ca6 <HAL_ADC_Start_DMA+0x2a>
 8001c9a:	4a3c      	ldr	r2, [pc, #240]	; (8001d8c <HAL_ADC_Start_DMA+0x110>)
 8001c9c:	4b3c      	ldr	r3, [pc, #240]	; (8001d90 <HAL_ADC_Start_DMA+0x114>)
 8001c9e:	0011      	movs	r1, r2
 8001ca0:	0018      	movs	r0, r3
 8001ca2:	f7fe fe66 	bl	8000972 <assert_failed>

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	689b      	ldr	r3, [r3, #8]
 8001cac:	2204      	movs	r2, #4
 8001cae:	4013      	ands	r3, r2
 8001cb0:	d15e      	bne.n	8001d70 <HAL_ADC_Start_DMA+0xf4>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	2240      	movs	r2, #64	; 0x40
 8001cb6:	5c9b      	ldrb	r3, [r3, r2]
 8001cb8:	2b01      	cmp	r3, #1
 8001cba:	d101      	bne.n	8001cc0 <HAL_ADC_Start_DMA+0x44>
 8001cbc:	2302      	movs	r3, #2
 8001cbe:	e05e      	b.n	8001d7e <HAL_ADC_Start_DMA+0x102>
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	2240      	movs	r2, #64	; 0x40
 8001cc4:	2101      	movs	r1, #1
 8001cc6:	5499      	strb	r1, [r3, r2]

    /* Enable the ADC peripheral */
    /* If low power mode AutoPowerOff is enabled, power-on/off phases are       */
    /* performed automatically by hardware.                                     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	69db      	ldr	r3, [r3, #28]
 8001ccc:	2b01      	cmp	r3, #1
 8001cce:	d007      	beq.n	8001ce0 <HAL_ADC_Start_DMA+0x64>
    {
      tmp_hal_status = ADC_Enable(hadc);
 8001cd0:	2317      	movs	r3, #23
 8001cd2:	18fc      	adds	r4, r7, r3
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	0018      	movs	r0, r3
 8001cd8:	f000 fa30 	bl	800213c <ADC_Enable>
 8001cdc:	0003      	movs	r3, r0
 8001cde:	7023      	strb	r3, [r4, #0]
    }
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001ce0:	2317      	movs	r3, #23
 8001ce2:	18fb      	adds	r3, r7, r3
 8001ce4:	781b      	ldrb	r3, [r3, #0]
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d146      	bne.n	8001d78 <HAL_ADC_Start_DMA+0xfc>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cee:	4a29      	ldr	r2, [pc, #164]	; (8001d94 <HAL_ADC_Start_DMA+0x118>)
 8001cf0:	4013      	ands	r3, r2
 8001cf2:	2280      	movs	r2, #128	; 0x80
 8001cf4:	0052      	lsls	r2, r2, #1
 8001cf6:	431a      	orrs	r2, r3
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	645a      	str	r2, [r3, #68]	; 0x44
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	2200      	movs	r2, #0
 8001d00:	649a      	str	r2, [r3, #72]	; 0x48
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	2240      	movs	r2, #64	; 0x40
 8001d06:	2100      	movs	r1, #0
 8001d08:	5499      	strb	r1, [r3, r2]

      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d0e:	4a22      	ldr	r2, [pc, #136]	; (8001d98 <HAL_ADC_Start_DMA+0x11c>)
 8001d10:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d16:	4a21      	ldr	r2, [pc, #132]	; (8001d9c <HAL_ADC_Start_DMA+0x120>)
 8001d18:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d1e:	4a20      	ldr	r2, [pc, #128]	; (8001da0 <HAL_ADC_Start_DMA+0x124>)
 8001d20:	631a      	str	r2, [r3, #48]	; 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	221c      	movs	r2, #28
 8001d28:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC overrun interrupt */
      __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	685a      	ldr	r2, [r3, #4]
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	2110      	movs	r1, #16
 8001d36:	430a      	orrs	r2, r1
 8001d38:	605a      	str	r2, [r3, #4]
      
      /* Enable ADC DMA mode */
      hadc->Instance->CFGR1 |= ADC_CFGR1_DMAEN;
 8001d3a:	68fb      	ldr	r3, [r7, #12]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	68da      	ldr	r2, [r3, #12]
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	2101      	movs	r1, #1
 8001d46:	430a      	orrs	r2, r1
 8001d48:	60da      	str	r2, [r3, #12]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8001d4e:	68fb      	ldr	r3, [r7, #12]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	3340      	adds	r3, #64	; 0x40
 8001d54:	0019      	movs	r1, r3
 8001d56:	68ba      	ldr	r2, [r7, #8]
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	f000 ff25 	bl	8002ba8 <HAL_DMA_Start_IT>
           
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      hadc->Instance->CR |= ADC_CR_ADSTART;
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	689a      	ldr	r2, [r3, #8]
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	2104      	movs	r1, #4
 8001d6a:	430a      	orrs	r2, r1
 8001d6c:	609a      	str	r2, [r3, #8]
 8001d6e:	e003      	b.n	8001d78 <HAL_ADC_Start_DMA+0xfc>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001d70:	2317      	movs	r3, #23
 8001d72:	18fb      	adds	r3, r7, r3
 8001d74:	2202      	movs	r2, #2
 8001d76:	701a      	strb	r2, [r3, #0]
  }
    
  /* Return function status */
  return tmp_hal_status;
 8001d78:	2317      	movs	r3, #23
 8001d7a:	18fb      	adds	r3, r7, r3
 8001d7c:	781b      	ldrb	r3, [r3, #0]
}
 8001d7e:	0018      	movs	r0, r3
 8001d80:	46bd      	mov	sp, r7
 8001d82:	b007      	add	sp, #28
 8001d84:	bd90      	pop	{r4, r7, pc}
 8001d86:	46c0      	nop			; (mov r8, r8)
 8001d88:	40012400 	.word	0x40012400
 8001d8c:	000004bc 	.word	0x000004bc
 8001d90:	08006efc 	.word	0x08006efc
 8001d94:	fffff0fe 	.word	0xfffff0fe
 8001d98:	08002235 	.word	0x08002235
 8001d9c:	080022e9 	.word	0x080022e9
 8001da0:	08002307 	.word	0x08002307

08001da4 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001da4:	b580      	push	{r7, lr}
 8001da6:	b082      	sub	sp, #8
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8001dac:	46c0      	nop			; (mov r8, r8)
 8001dae:	46bd      	mov	sp, r7
 8001db0:	b002      	add	sp, #8
 8001db2:	bd80      	pop	{r7, pc}

08001db4 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001db4:	b580      	push	{r7, lr}
 8001db6:	b082      	sub	sp, #8
 8001db8:	af00      	add	r7, sp, #0
 8001dba:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8001dbc:	46c0      	nop			; (mov r8, r8)
 8001dbe:	46bd      	mov	sp, r7
 8001dc0:	b002      	add	sp, #8
 8001dc2:	bd80      	pop	{r7, pc}

08001dc4 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001dc4:	b580      	push	{r7, lr}
 8001dc6:	b084      	sub	sp, #16
 8001dc8:	af00      	add	r7, sp, #0
 8001dca:	6078      	str	r0, [r7, #4]
 8001dcc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001dce:	230f      	movs	r3, #15
 8001dd0:	18fb      	adds	r3, r7, r3
 8001dd2:	2200      	movs	r2, #0
 8001dd4:	701a      	strb	r2, [r3, #0]
  __IO uint32_t wait_loop_index = 0U;
 8001dd6:	2300      	movs	r3, #0
 8001dd8:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	4abc      	ldr	r2, [pc, #752]	; (80020d0 <HAL_ADC_ConfigChannel+0x30c>)
 8001de0:	4293      	cmp	r3, r2
 8001de2:	d005      	beq.n	8001df0 <HAL_ADC_ConfigChannel+0x2c>
 8001de4:	4abb      	ldr	r2, [pc, #748]	; (80020d4 <HAL_ADC_ConfigChannel+0x310>)
 8001de6:	4bbc      	ldr	r3, [pc, #752]	; (80020d8 <HAL_ADC_ConfigChannel+0x314>)
 8001de8:	0011      	movs	r1, r2
 8001dea:	0018      	movs	r0, r3
 8001dec:	f7fe fdc1 	bl	8000972 <assert_failed>
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
 8001df0:	683b      	ldr	r3, [r7, #0]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d04d      	beq.n	8001e94 <HAL_ADC_ConfigChannel+0xd0>
 8001df8:	683b      	ldr	r3, [r7, #0]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	2b01      	cmp	r3, #1
 8001dfe:	d049      	beq.n	8001e94 <HAL_ADC_ConfigChannel+0xd0>
 8001e00:	683b      	ldr	r3, [r7, #0]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	2b02      	cmp	r3, #2
 8001e06:	d045      	beq.n	8001e94 <HAL_ADC_ConfigChannel+0xd0>
 8001e08:	683b      	ldr	r3, [r7, #0]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	2b03      	cmp	r3, #3
 8001e0e:	d041      	beq.n	8001e94 <HAL_ADC_ConfigChannel+0xd0>
 8001e10:	683b      	ldr	r3, [r7, #0]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	2b04      	cmp	r3, #4
 8001e16:	d03d      	beq.n	8001e94 <HAL_ADC_ConfigChannel+0xd0>
 8001e18:	683b      	ldr	r3, [r7, #0]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	2b05      	cmp	r3, #5
 8001e1e:	d039      	beq.n	8001e94 <HAL_ADC_ConfigChannel+0xd0>
 8001e20:	683b      	ldr	r3, [r7, #0]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	2b06      	cmp	r3, #6
 8001e26:	d035      	beq.n	8001e94 <HAL_ADC_ConfigChannel+0xd0>
 8001e28:	683b      	ldr	r3, [r7, #0]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	2b07      	cmp	r3, #7
 8001e2e:	d031      	beq.n	8001e94 <HAL_ADC_ConfigChannel+0xd0>
 8001e30:	683b      	ldr	r3, [r7, #0]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	2b08      	cmp	r3, #8
 8001e36:	d02d      	beq.n	8001e94 <HAL_ADC_ConfigChannel+0xd0>
 8001e38:	683b      	ldr	r3, [r7, #0]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	2b09      	cmp	r3, #9
 8001e3e:	d029      	beq.n	8001e94 <HAL_ADC_ConfigChannel+0xd0>
 8001e40:	683b      	ldr	r3, [r7, #0]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	2b0a      	cmp	r3, #10
 8001e46:	d025      	beq.n	8001e94 <HAL_ADC_ConfigChannel+0xd0>
 8001e48:	683b      	ldr	r3, [r7, #0]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	2b0b      	cmp	r3, #11
 8001e4e:	d021      	beq.n	8001e94 <HAL_ADC_ConfigChannel+0xd0>
 8001e50:	683b      	ldr	r3, [r7, #0]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	2b0c      	cmp	r3, #12
 8001e56:	d01d      	beq.n	8001e94 <HAL_ADC_ConfigChannel+0xd0>
 8001e58:	683b      	ldr	r3, [r7, #0]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	2b0d      	cmp	r3, #13
 8001e5e:	d019      	beq.n	8001e94 <HAL_ADC_ConfigChannel+0xd0>
 8001e60:	683b      	ldr	r3, [r7, #0]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	2b0e      	cmp	r3, #14
 8001e66:	d015      	beq.n	8001e94 <HAL_ADC_ConfigChannel+0xd0>
 8001e68:	683b      	ldr	r3, [r7, #0]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	2b0f      	cmp	r3, #15
 8001e6e:	d011      	beq.n	8001e94 <HAL_ADC_ConfigChannel+0xd0>
 8001e70:	683b      	ldr	r3, [r7, #0]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	2b10      	cmp	r3, #16
 8001e76:	d00d      	beq.n	8001e94 <HAL_ADC_ConfigChannel+0xd0>
 8001e78:	683b      	ldr	r3, [r7, #0]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	2b11      	cmp	r3, #17
 8001e7e:	d009      	beq.n	8001e94 <HAL_ADC_ConfigChannel+0xd0>
 8001e80:	683b      	ldr	r3, [r7, #0]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	2b12      	cmp	r3, #18
 8001e86:	d005      	beq.n	8001e94 <HAL_ADC_ConfigChannel+0xd0>
 8001e88:	4a94      	ldr	r2, [pc, #592]	; (80020dc <HAL_ADC_ConfigChannel+0x318>)
 8001e8a:	4b93      	ldr	r3, [pc, #588]	; (80020d8 <HAL_ADC_ConfigChannel+0x314>)
 8001e8c:	0011      	movs	r1, r2
 8001e8e:	0018      	movs	r0, r3
 8001e90:	f7fe fd6f 	bl	8000972 <assert_failed>
  assert_param(IS_ADC_RANK(sConfig->Rank));
 8001e94:	683b      	ldr	r3, [r7, #0]
 8001e96:	685a      	ldr	r2, [r3, #4]
 8001e98:	2380      	movs	r3, #128	; 0x80
 8001e9a:	015b      	lsls	r3, r3, #5
 8001e9c:	429a      	cmp	r2, r3
 8001e9e:	d00a      	beq.n	8001eb6 <HAL_ADC_ConfigChannel+0xf2>
 8001ea0:	683b      	ldr	r3, [r7, #0]
 8001ea2:	685b      	ldr	r3, [r3, #4]
 8001ea4:	4a8e      	ldr	r2, [pc, #568]	; (80020e0 <HAL_ADC_ConfigChannel+0x31c>)
 8001ea6:	4293      	cmp	r3, r2
 8001ea8:	d005      	beq.n	8001eb6 <HAL_ADC_ConfigChannel+0xf2>
 8001eaa:	4a8e      	ldr	r2, [pc, #568]	; (80020e4 <HAL_ADC_ConfigChannel+0x320>)
 8001eac:	4b8a      	ldr	r3, [pc, #552]	; (80020d8 <HAL_ADC_ConfigChannel+0x314>)
 8001eae:	0011      	movs	r1, r2
 8001eb0:	0018      	movs	r0, r3
 8001eb2:	f7fe fd5e 	bl	8000972 <assert_failed>
  
  if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001eba:	2380      	movs	r3, #128	; 0x80
 8001ebc:	055b      	lsls	r3, r3, #21
 8001ebe:	429a      	cmp	r2, r3
 8001ec0:	d043      	beq.n	8001f4a <HAL_ADC_ConfigChannel+0x186>
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ec6:	2b01      	cmp	r3, #1
 8001ec8:	d03f      	beq.n	8001f4a <HAL_ADC_ConfigChannel+0x186>
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ece:	2b02      	cmp	r3, #2
 8001ed0:	d03b      	beq.n	8001f4a <HAL_ADC_ConfigChannel+0x186>
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ed6:	2b03      	cmp	r3, #3
 8001ed8:	d037      	beq.n	8001f4a <HAL_ADC_ConfigChannel+0x186>
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ede:	2b04      	cmp	r3, #4
 8001ee0:	d033      	beq.n	8001f4a <HAL_ADC_ConfigChannel+0x186>
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ee6:	2b05      	cmp	r3, #5
 8001ee8:	d02f      	beq.n	8001f4a <HAL_ADC_ConfigChannel+0x186>
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001eee:	2b06      	cmp	r3, #6
 8001ef0:	d02b      	beq.n	8001f4a <HAL_ADC_ConfigChannel+0x186>
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ef6:	2b07      	cmp	r3, #7
 8001ef8:	d027      	beq.n	8001f4a <HAL_ADC_ConfigChannel+0x186>
  {
    assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
 8001efa:	683b      	ldr	r3, [r7, #0]
 8001efc:	689a      	ldr	r2, [r3, #8]
 8001efe:	2380      	movs	r3, #128	; 0x80
 8001f00:	055b      	lsls	r3, r3, #21
 8001f02:	429a      	cmp	r2, r3
 8001f04:	d021      	beq.n	8001f4a <HAL_ADC_ConfigChannel+0x186>
 8001f06:	683b      	ldr	r3, [r7, #0]
 8001f08:	689b      	ldr	r3, [r3, #8]
 8001f0a:	2b01      	cmp	r3, #1
 8001f0c:	d01d      	beq.n	8001f4a <HAL_ADC_ConfigChannel+0x186>
 8001f0e:	683b      	ldr	r3, [r7, #0]
 8001f10:	689b      	ldr	r3, [r3, #8]
 8001f12:	2b02      	cmp	r3, #2
 8001f14:	d019      	beq.n	8001f4a <HAL_ADC_ConfigChannel+0x186>
 8001f16:	683b      	ldr	r3, [r7, #0]
 8001f18:	689b      	ldr	r3, [r3, #8]
 8001f1a:	2b03      	cmp	r3, #3
 8001f1c:	d015      	beq.n	8001f4a <HAL_ADC_ConfigChannel+0x186>
 8001f1e:	683b      	ldr	r3, [r7, #0]
 8001f20:	689b      	ldr	r3, [r3, #8]
 8001f22:	2b04      	cmp	r3, #4
 8001f24:	d011      	beq.n	8001f4a <HAL_ADC_ConfigChannel+0x186>
 8001f26:	683b      	ldr	r3, [r7, #0]
 8001f28:	689b      	ldr	r3, [r3, #8]
 8001f2a:	2b05      	cmp	r3, #5
 8001f2c:	d00d      	beq.n	8001f4a <HAL_ADC_ConfigChannel+0x186>
 8001f2e:	683b      	ldr	r3, [r7, #0]
 8001f30:	689b      	ldr	r3, [r3, #8]
 8001f32:	2b06      	cmp	r3, #6
 8001f34:	d009      	beq.n	8001f4a <HAL_ADC_ConfigChannel+0x186>
 8001f36:	683b      	ldr	r3, [r7, #0]
 8001f38:	689b      	ldr	r3, [r3, #8]
 8001f3a:	2b07      	cmp	r3, #7
 8001f3c:	d005      	beq.n	8001f4a <HAL_ADC_ConfigChannel+0x186>
 8001f3e:	4a6a      	ldr	r2, [pc, #424]	; (80020e8 <HAL_ADC_ConfigChannel+0x324>)
 8001f40:	4b65      	ldr	r3, [pc, #404]	; (80020d8 <HAL_ADC_ConfigChannel+0x314>)
 8001f42:	0011      	movs	r1, r2
 8001f44:	0018      	movs	r0, r3
 8001f46:	f7fe fd14 	bl	8000972 <assert_failed>
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	2240      	movs	r2, #64	; 0x40
 8001f4e:	5c9b      	ldrb	r3, [r3, r2]
 8001f50:	2b01      	cmp	r3, #1
 8001f52:	d101      	bne.n	8001f58 <HAL_ADC_ConfigChannel+0x194>
 8001f54:	2302      	movs	r3, #2
 8001f56:	e0e9      	b.n	800212c <HAL_ADC_ConfigChannel+0x368>
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	2240      	movs	r2, #64	; 0x40
 8001f5c:	2101      	movs	r1, #1
 8001f5e:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	689b      	ldr	r3, [r3, #8]
 8001f66:	2204      	movs	r2, #4
 8001f68:	4013      	ands	r3, r2
 8001f6a:	d000      	beq.n	8001f6e <HAL_ADC_ConfigChannel+0x1aa>
 8001f6c:	e0cd      	b.n	800210a <HAL_ADC_ConfigChannel+0x346>
  {
    /* Configure channel: depending on rank setting, add it or remove it from */
    /* ADC conversion sequencer.                                              */
    if (sConfig->Rank != ADC_RANK_NONE)
 8001f6e:	683b      	ldr	r3, [r7, #0]
 8001f70:	685b      	ldr	r3, [r3, #4]
 8001f72:	4a5b      	ldr	r2, [pc, #364]	; (80020e0 <HAL_ADC_ConfigChannel+0x31c>)
 8001f74:	4293      	cmp	r3, r2
 8001f76:	d100      	bne.n	8001f7a <HAL_ADC_ConfigChannel+0x1b6>
 8001f78:	e083      	b.n	8002082 <HAL_ADC_ConfigChannel+0x2be>
    {
      /* Regular sequence configuration */
      /* Set the channel selection register from the selected channel */
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8001f80:	683b      	ldr	r3, [r7, #0]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	2201      	movs	r2, #1
 8001f86:	409a      	lsls	r2, r3
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	430a      	orrs	r2, r1
 8001f8e:	629a      	str	r2, [r3, #40]	; 0x28
      /* Channel sampling time configuration */
      /* Management of parameters "SamplingTimeCommon" and "SamplingTime"     */
      /* (obsolete): sampling time set in this function with                  */
      /* parameter "SamplingTime" (obsolete) only if not already set into     */
      /* ADC initialization structure with parameter "SamplingTimeCommon".    */
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001f94:	2380      	movs	r3, #128	; 0x80
 8001f96:	055b      	lsls	r3, r3, #21
 8001f98:	429a      	cmp	r2, r3
 8001f9a:	d037      	beq.n	800200c <HAL_ADC_ConfigChannel+0x248>
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001fa0:	2b01      	cmp	r3, #1
 8001fa2:	d033      	beq.n	800200c <HAL_ADC_ConfigChannel+0x248>
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001fa8:	2b02      	cmp	r3, #2
 8001faa:	d02f      	beq.n	800200c <HAL_ADC_ConfigChannel+0x248>
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001fb0:	2b03      	cmp	r3, #3
 8001fb2:	d02b      	beq.n	800200c <HAL_ADC_ConfigChannel+0x248>
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001fb8:	2b04      	cmp	r3, #4
 8001fba:	d027      	beq.n	800200c <HAL_ADC_ConfigChannel+0x248>
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001fc0:	2b05      	cmp	r3, #5
 8001fc2:	d023      	beq.n	800200c <HAL_ADC_ConfigChannel+0x248>
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001fc8:	2b06      	cmp	r3, #6
 8001fca:	d01f      	beq.n	800200c <HAL_ADC_ConfigChannel+0x248>
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001fd0:	2b07      	cmp	r3, #7
 8001fd2:	d01b      	beq.n	800200c <HAL_ADC_ConfigChannel+0x248>
      {
        /* Modify sampling time if needed (not needed in case of reoccurrence */
        /* for several channels programmed consecutively into the sequencer)  */
        if (sConfig->SamplingTime != ADC_GET_SAMPLINGTIME(hadc))
 8001fd4:	683b      	ldr	r3, [r7, #0]
 8001fd6:	689a      	ldr	r2, [r3, #8]
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	695b      	ldr	r3, [r3, #20]
 8001fde:	2107      	movs	r1, #7
 8001fe0:	400b      	ands	r3, r1
 8001fe2:	429a      	cmp	r2, r3
 8001fe4:	d012      	beq.n	800200c <HAL_ADC_ConfigChannel+0x248>
        {
          /* Channel sampling time configuration */
          /* Clear the old sample time */
          hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	695a      	ldr	r2, [r3, #20]
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	2107      	movs	r1, #7
 8001ff2:	438a      	bics	r2, r1
 8001ff4:	615a      	str	r2, [r3, #20]
          
          /* Set the new sample time */
          hadc->Instance->SMPR |= ADC_SMPR_SET(sConfig->SamplingTime);
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	6959      	ldr	r1, [r3, #20]
 8001ffc:	683b      	ldr	r3, [r7, #0]
 8001ffe:	689b      	ldr	r3, [r3, #8]
 8002000:	2207      	movs	r2, #7
 8002002:	401a      	ands	r2, r3
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	430a      	orrs	r2, r1
 800200a:	615a      	str	r2, [r3, #20]
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800200c:	683b      	ldr	r3, [r7, #0]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	2b10      	cmp	r3, #16
 8002012:	d008      	beq.n	8002026 <HAL_ADC_ConfigChannel+0x262>
 8002014:	683b      	ldr	r3, [r7, #0]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	2b11      	cmp	r3, #17
 800201a:	d004      	beq.n	8002026 <HAL_ADC_ConfigChannel+0x262>
 800201c:	683b      	ldr	r3, [r7, #0]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	2b12      	cmp	r3, #18
 8002022:	d000      	beq.n	8002026 <HAL_ADC_ConfigChannel+0x262>
 8002024:	e07b      	b.n	800211e <HAL_ADC_ConfigChannel+0x35a>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path. */
        /* If Channel_17 is selected, enable VREFINT measurement path. */
        /* If Channel_18 is selected, enable VBAT measurement path. */
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8002026:	4b31      	ldr	r3, [pc, #196]	; (80020ec <HAL_ADC_ConfigChannel+0x328>)
 8002028:	6819      	ldr	r1, [r3, #0]
 800202a:	683b      	ldr	r3, [r7, #0]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	2b10      	cmp	r3, #16
 8002030:	d009      	beq.n	8002046 <HAL_ADC_ConfigChannel+0x282>
 8002032:	683b      	ldr	r3, [r7, #0]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	2b11      	cmp	r3, #17
 8002038:	d102      	bne.n	8002040 <HAL_ADC_ConfigChannel+0x27c>
 800203a:	2380      	movs	r3, #128	; 0x80
 800203c:	03db      	lsls	r3, r3, #15
 800203e:	e004      	b.n	800204a <HAL_ADC_ConfigChannel+0x286>
 8002040:	2380      	movs	r3, #128	; 0x80
 8002042:	045b      	lsls	r3, r3, #17
 8002044:	e001      	b.n	800204a <HAL_ADC_ConfigChannel+0x286>
 8002046:	2380      	movs	r3, #128	; 0x80
 8002048:	041b      	lsls	r3, r3, #16
 800204a:	4a28      	ldr	r2, [pc, #160]	; (80020ec <HAL_ADC_ConfigChannel+0x328>)
 800204c:	430b      	orrs	r3, r1
 800204e:	6013      	str	r3, [r2, #0]
        
        /* If Temp. sensor is selected, wait for stabilization delay */
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002050:	683b      	ldr	r3, [r7, #0]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	2b10      	cmp	r3, #16
 8002056:	d162      	bne.n	800211e <HAL_ADC_ConfigChannel+0x35a>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002058:	4b25      	ldr	r3, [pc, #148]	; (80020f0 <HAL_ADC_ConfigChannel+0x32c>)
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	4925      	ldr	r1, [pc, #148]	; (80020f4 <HAL_ADC_ConfigChannel+0x330>)
 800205e:	0018      	movs	r0, r3
 8002060:	f7fe f852 	bl	8000108 <__udivsi3>
 8002064:	0003      	movs	r3, r0
 8002066:	001a      	movs	r2, r3
 8002068:	0013      	movs	r3, r2
 800206a:	009b      	lsls	r3, r3, #2
 800206c:	189b      	adds	r3, r3, r2
 800206e:	005b      	lsls	r3, r3, #1
 8002070:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002072:	e002      	b.n	800207a <HAL_ADC_ConfigChannel+0x2b6>
          {
            wait_loop_index--;
 8002074:	68bb      	ldr	r3, [r7, #8]
 8002076:	3b01      	subs	r3, #1
 8002078:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800207a:	68bb      	ldr	r3, [r7, #8]
 800207c:	2b00      	cmp	r3, #0
 800207e:	d1f9      	bne.n	8002074 <HAL_ADC_ConfigChannel+0x2b0>
 8002080:	e04d      	b.n	800211e <HAL_ADC_ConfigChannel+0x35a>
    }
    else
    {
      /* Regular sequence configuration */
      /* Reset the channel selection register from the selected channel */
      hadc->Instance->CHSELR &= ~ADC_CHSELR_CHANNEL(sConfig->Channel);
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002088:	683b      	ldr	r3, [r7, #0]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	2101      	movs	r1, #1
 800208e:	4099      	lsls	r1, r3
 8002090:	000b      	movs	r3, r1
 8002092:	43d9      	mvns	r1, r3
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	400a      	ands	r2, r1
 800209a:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
      /* internal measurement paths disable: If internal channel selected,    */
      /* disable dedicated internal buffers and path.                         */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800209c:	683b      	ldr	r3, [r7, #0]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	2b10      	cmp	r3, #16
 80020a2:	d007      	beq.n	80020b4 <HAL_ADC_ConfigChannel+0x2f0>
 80020a4:	683b      	ldr	r3, [r7, #0]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	2b11      	cmp	r3, #17
 80020aa:	d003      	beq.n	80020b4 <HAL_ADC_ConfigChannel+0x2f0>
 80020ac:	683b      	ldr	r3, [r7, #0]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	2b12      	cmp	r3, #18
 80020b2:	d134      	bne.n	800211e <HAL_ADC_ConfigChannel+0x35a>
      {
        /* If Channel_16 is selected, disable Temp. sensor measurement path. */
        /* If Channel_17 is selected, disable VREFINT measurement path. */
        /* If Channel_18 is selected, disable VBAT measurement path. */
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 80020b4:	4b0d      	ldr	r3, [pc, #52]	; (80020ec <HAL_ADC_ConfigChannel+0x328>)
 80020b6:	6819      	ldr	r1, [r3, #0]
 80020b8:	683b      	ldr	r3, [r7, #0]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	2b10      	cmp	r3, #16
 80020be:	d01f      	beq.n	8002100 <HAL_ADC_ConfigChannel+0x33c>
 80020c0:	683b      	ldr	r3, [r7, #0]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	2b11      	cmp	r3, #17
 80020c6:	d101      	bne.n	80020cc <HAL_ADC_ConfigChannel+0x308>
 80020c8:	4b0b      	ldr	r3, [pc, #44]	; (80020f8 <HAL_ADC_ConfigChannel+0x334>)
 80020ca:	e01a      	b.n	8002102 <HAL_ADC_ConfigChannel+0x33e>
 80020cc:	4b0b      	ldr	r3, [pc, #44]	; (80020fc <HAL_ADC_ConfigChannel+0x338>)
 80020ce:	e018      	b.n	8002102 <HAL_ADC_ConfigChannel+0x33e>
 80020d0:	40012400 	.word	0x40012400
 80020d4:	00000651 	.word	0x00000651
 80020d8:	08006efc 	.word	0x08006efc
 80020dc:	00000652 	.word	0x00000652
 80020e0:	00001001 	.word	0x00001001
 80020e4:	00000653 	.word	0x00000653
 80020e8:	00000657 	.word	0x00000657
 80020ec:	40012708 	.word	0x40012708
 80020f0:	20000000 	.word	0x20000000
 80020f4:	000f4240 	.word	0x000f4240
 80020f8:	ffbfffff 	.word	0xffbfffff
 80020fc:	feffffff 	.word	0xfeffffff
 8002100:	4b0c      	ldr	r3, [pc, #48]	; (8002134 <HAL_ADC_ConfigChannel+0x370>)
 8002102:	4a0d      	ldr	r2, [pc, #52]	; (8002138 <HAL_ADC_ConfigChannel+0x374>)
 8002104:	400b      	ands	r3, r1
 8002106:	6013      	str	r3, [r2, #0]
 8002108:	e009      	b.n	800211e <HAL_ADC_ConfigChannel+0x35a>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800210e:	2220      	movs	r2, #32
 8002110:	431a      	orrs	r2, r3
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	645a      	str	r2, [r3, #68]	; 0x44
    
    tmp_hal_status = HAL_ERROR;
 8002116:	230f      	movs	r3, #15
 8002118:	18fb      	adds	r3, r7, r3
 800211a:	2201      	movs	r2, #1
 800211c:	701a      	strb	r2, [r3, #0]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	2240      	movs	r2, #64	; 0x40
 8002122:	2100      	movs	r1, #0
 8002124:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 8002126:	230f      	movs	r3, #15
 8002128:	18fb      	adds	r3, r7, r3
 800212a:	781b      	ldrb	r3, [r3, #0]
}
 800212c:	0018      	movs	r0, r3
 800212e:	46bd      	mov	sp, r7
 8002130:	b004      	add	sp, #16
 8002132:	bd80      	pop	{r7, pc}
 8002134:	ff7fffff 	.word	0xff7fffff
 8002138:	40012708 	.word	0x40012708

0800213c <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 800213c:	b580      	push	{r7, lr}
 800213e:	b084      	sub	sp, #16
 8002140:	af00      	add	r7, sp, #0
 8002142:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002144:	2300      	movs	r3, #0
 8002146:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8002148:	2300      	movs	r3, #0
 800214a:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	689b      	ldr	r3, [r3, #8]
 8002152:	2203      	movs	r2, #3
 8002154:	4013      	ands	r3, r2
 8002156:	2b01      	cmp	r3, #1
 8002158:	d112      	bne.n	8002180 <ADC_Enable+0x44>
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	2201      	movs	r2, #1
 8002162:	4013      	ands	r3, r2
 8002164:	2b01      	cmp	r3, #1
 8002166:	d009      	beq.n	800217c <ADC_Enable+0x40>
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	68da      	ldr	r2, [r3, #12]
 800216e:	2380      	movs	r3, #128	; 0x80
 8002170:	021b      	lsls	r3, r3, #8
 8002172:	401a      	ands	r2, r3
 8002174:	2380      	movs	r3, #128	; 0x80
 8002176:	021b      	lsls	r3, r3, #8
 8002178:	429a      	cmp	r2, r3
 800217a:	d101      	bne.n	8002180 <ADC_Enable+0x44>
 800217c:	2301      	movs	r3, #1
 800217e:	e000      	b.n	8002182 <ADC_Enable+0x46>
 8002180:	2300      	movs	r3, #0
 8002182:	2b00      	cmp	r3, #0
 8002184:	d14b      	bne.n	800221e <ADC_Enable+0xe2>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	689b      	ldr	r3, [r3, #8]
 800218c:	4a26      	ldr	r2, [pc, #152]	; (8002228 <ADC_Enable+0xec>)
 800218e:	4013      	ands	r3, r2
 8002190:	d00d      	beq.n	80021ae <ADC_Enable+0x72>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002196:	2210      	movs	r2, #16
 8002198:	431a      	orrs	r2, r3
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	645a      	str	r2, [r3, #68]	; 0x44
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80021a2:	2201      	movs	r2, #1
 80021a4:	431a      	orrs	r2, r3
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	649a      	str	r2, [r3, #72]	; 0x48
      
      return HAL_ERROR;
 80021aa:	2301      	movs	r3, #1
 80021ac:	e038      	b.n	8002220 <ADC_Enable+0xe4>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	689a      	ldr	r2, [r3, #8]
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	2101      	movs	r1, #1
 80021ba:	430a      	orrs	r2, r1
 80021bc:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80021be:	4b1b      	ldr	r3, [pc, #108]	; (800222c <ADC_Enable+0xf0>)
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	491b      	ldr	r1, [pc, #108]	; (8002230 <ADC_Enable+0xf4>)
 80021c4:	0018      	movs	r0, r3
 80021c6:	f7fd ff9f 	bl	8000108 <__udivsi3>
 80021ca:	0003      	movs	r3, r0
 80021cc:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80021ce:	e002      	b.n	80021d6 <ADC_Enable+0x9a>
    {
      wait_loop_index--;
 80021d0:	68bb      	ldr	r3, [r7, #8]
 80021d2:	3b01      	subs	r3, #1
 80021d4:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80021d6:	68bb      	ldr	r3, [r7, #8]
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d1f9      	bne.n	80021d0 <ADC_Enable+0x94>
    }

    /* Get tick count */
    tickstart = HAL_GetTick();
 80021dc:	f7ff fadc 	bl	8001798 <HAL_GetTick>
 80021e0:	0003      	movs	r3, r0
 80021e2:	60fb      	str	r3, [r7, #12]
    
    /* Wait for ADC effectively enabled */
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80021e4:	e014      	b.n	8002210 <ADC_Enable+0xd4>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80021e6:	f7ff fad7 	bl	8001798 <HAL_GetTick>
 80021ea:	0002      	movs	r2, r0
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	1ad3      	subs	r3, r2, r3
 80021f0:	2b02      	cmp	r3, #2
 80021f2:	d90d      	bls.n	8002210 <ADC_Enable+0xd4>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021f8:	2210      	movs	r2, #16
 80021fa:	431a      	orrs	r2, r3
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	645a      	str	r2, [r3, #68]	; 0x44
      
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002204:	2201      	movs	r2, #1
 8002206:	431a      	orrs	r2, r3
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	649a      	str	r2, [r3, #72]	; 0x48
      
        return HAL_ERROR;
 800220c:	2301      	movs	r3, #1
 800220e:	e007      	b.n	8002220 <ADC_Enable+0xe4>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	2201      	movs	r2, #1
 8002218:	4013      	ands	r3, r2
 800221a:	2b01      	cmp	r3, #1
 800221c:	d1e3      	bne.n	80021e6 <ADC_Enable+0xaa>
    }   
    
  }
   
  /* Return HAL status */
  return HAL_OK;
 800221e:	2300      	movs	r3, #0
}
 8002220:	0018      	movs	r0, r3
 8002222:	46bd      	mov	sp, r7
 8002224:	b004      	add	sp, #16
 8002226:	bd80      	pop	{r7, pc}
 8002228:	80000017 	.word	0x80000017
 800222c:	20000000 	.word	0x20000000
 8002230:	000f4240 	.word	0x000f4240

08002234 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8002234:	b580      	push	{r7, lr}
 8002236:	b084      	sub	sp, #16
 8002238:	af00      	add	r7, sp, #0
 800223a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002240:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002246:	2250      	movs	r2, #80	; 0x50
 8002248:	4013      	ands	r3, r2
 800224a:	d140      	bne.n	80022ce <ADC_DMAConvCplt+0x9a>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002250:	2280      	movs	r2, #128	; 0x80
 8002252:	0092      	lsls	r2, r2, #2
 8002254:	431a      	orrs	r2, r3
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	68da      	ldr	r2, [r3, #12]
 8002260:	23c0      	movs	r3, #192	; 0xc0
 8002262:	011b      	lsls	r3, r3, #4
 8002264:	4013      	ands	r3, r2
 8002266:	d12d      	bne.n	80022c4 <ADC_DMAConvCplt+0x90>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	6a1b      	ldr	r3, [r3, #32]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800226c:	2b00      	cmp	r3, #0
 800226e:	d129      	bne.n	80022c4 <ADC_DMAConvCplt+0x90>
    {
      /* If End of Sequence is reached, disable interrupts */
      if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	2208      	movs	r2, #8
 8002278:	4013      	ands	r3, r2
 800227a:	2b08      	cmp	r3, #8
 800227c:	d122      	bne.n	80022c4 <ADC_DMAConvCplt+0x90>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	689b      	ldr	r3, [r3, #8]
 8002284:	2204      	movs	r2, #4
 8002286:	4013      	ands	r3, r2
 8002288:	d110      	bne.n	80022ac <ADC_DMAConvCplt+0x78>
        {
          /* Disable ADC end of single conversion interrupt on group regular */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	685a      	ldr	r2, [r3, #4]
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	210c      	movs	r1, #12
 8002296:	438a      	bics	r2, r1
 8002298:	605a      	str	r2, [r3, #4]
          
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800229e:	4a11      	ldr	r2, [pc, #68]	; (80022e4 <ADC_DMAConvCplt+0xb0>)
 80022a0:	4013      	ands	r3, r2
 80022a2:	2201      	movs	r2, #1
 80022a4:	431a      	orrs	r2, r3
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	645a      	str	r2, [r3, #68]	; 0x44
 80022aa:	e00b      	b.n	80022c4 <ADC_DMAConvCplt+0x90>
                            HAL_ADC_STATE_READY);
        }
        else
        {
          /* Change ADC state to error state */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022b0:	2220      	movs	r2, #32
 80022b2:	431a      	orrs	r2, r3
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	645a      	str	r2, [r3, #68]	; 0x44
          
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80022bc:	2201      	movs	r2, #1
 80022be:	431a      	orrs	r2, r3
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	649a      	str	r2, [r3, #72]	; 0x48
        }
      }
    }

    /* Conversion complete callback */
    HAL_ADC_ConvCpltCallback(hadc); 
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	0018      	movs	r0, r3
 80022c8:	f7fe ff8c 	bl	80011e4 <HAL_ADC_ConvCpltCallback>
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }

}
 80022cc:	e005      	b.n	80022da <ADC_DMAConvCplt+0xa6>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022d4:	687a      	ldr	r2, [r7, #4]
 80022d6:	0010      	movs	r0, r2
 80022d8:	4798      	blx	r3
}
 80022da:	46c0      	nop			; (mov r8, r8)
 80022dc:	46bd      	mov	sp, r7
 80022de:	b004      	add	sp, #16
 80022e0:	bd80      	pop	{r7, pc}
 80022e2:	46c0      	nop			; (mov r8, r8)
 80022e4:	fffffefe 	.word	0xfffffefe

080022e8 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 80022e8:	b580      	push	{r7, lr}
 80022ea:	b084      	sub	sp, #16
 80022ec:	af00      	add	r7, sp, #0
 80022ee:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022f4:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
  HAL_ADC_ConvHalfCpltCallback(hadc); 
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	0018      	movs	r0, r3
 80022fa:	f7ff fd53 	bl	8001da4 <HAL_ADC_ConvHalfCpltCallback>
}
 80022fe:	46c0      	nop			; (mov r8, r8)
 8002300:	46bd      	mov	sp, r7
 8002302:	b004      	add	sp, #16
 8002304:	bd80      	pop	{r7, pc}

08002306 <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8002306:	b580      	push	{r7, lr}
 8002308:	b084      	sub	sp, #16
 800230a:	af00      	add	r7, sp, #0
 800230c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002312:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002318:	2240      	movs	r2, #64	; 0x40
 800231a:	431a      	orrs	r2, r3
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	645a      	str	r2, [r3, #68]	; 0x44
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002324:	2204      	movs	r2, #4
 8002326:	431a      	orrs	r2, r3
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	649a      	str	r2, [r3, #72]	; 0x48
  
  /* Error callback */
  HAL_ADC_ErrorCallback(hadc); 
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	0018      	movs	r0, r3
 8002330:	f7ff fd40 	bl	8001db4 <HAL_ADC_ErrorCallback>
}
 8002334:	46c0      	nop			; (mov r8, r8)
 8002336:	46bd      	mov	sp, r7
 8002338:	b004      	add	sp, #16
 800233a:	bd80      	pop	{r7, pc}

0800233c <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800233c:	b580      	push	{r7, lr}
 800233e:	b082      	sub	sp, #8
 8002340:	af00      	add	r7, sp, #0
 8002342:	0002      	movs	r2, r0
 8002344:	1dfb      	adds	r3, r7, #7
 8002346:	701a      	strb	r2, [r3, #0]
  NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8002348:	1dfb      	adds	r3, r7, #7
 800234a:	781b      	ldrb	r3, [r3, #0]
 800234c:	001a      	movs	r2, r3
 800234e:	231f      	movs	r3, #31
 8002350:	401a      	ands	r2, r3
 8002352:	4b04      	ldr	r3, [pc, #16]	; (8002364 <NVIC_EnableIRQ+0x28>)
 8002354:	2101      	movs	r1, #1
 8002356:	4091      	lsls	r1, r2
 8002358:	000a      	movs	r2, r1
 800235a:	601a      	str	r2, [r3, #0]
}
 800235c:	46c0      	nop			; (mov r8, r8)
 800235e:	46bd      	mov	sp, r7
 8002360:	b002      	add	sp, #8
 8002362:	bd80      	pop	{r7, pc}
 8002364:	e000e100 	.word	0xe000e100

08002368 <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002368:	b590      	push	{r4, r7, lr}
 800236a:	b083      	sub	sp, #12
 800236c:	af00      	add	r7, sp, #0
 800236e:	0002      	movs	r2, r0
 8002370:	6039      	str	r1, [r7, #0]
 8002372:	1dfb      	adds	r3, r7, #7
 8002374:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) < 0)
 8002376:	1dfb      	adds	r3, r7, #7
 8002378:	781b      	ldrb	r3, [r3, #0]
 800237a:	2b7f      	cmp	r3, #127	; 0x7f
 800237c:	d932      	bls.n	80023e4 <NVIC_SetPriority+0x7c>
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800237e:	4a2f      	ldr	r2, [pc, #188]	; (800243c <NVIC_SetPriority+0xd4>)
 8002380:	1dfb      	adds	r3, r7, #7
 8002382:	781b      	ldrb	r3, [r3, #0]
 8002384:	0019      	movs	r1, r3
 8002386:	230f      	movs	r3, #15
 8002388:	400b      	ands	r3, r1
 800238a:	3b08      	subs	r3, #8
 800238c:	089b      	lsrs	r3, r3, #2
 800238e:	3306      	adds	r3, #6
 8002390:	009b      	lsls	r3, r3, #2
 8002392:	18d3      	adds	r3, r2, r3
 8002394:	3304      	adds	r3, #4
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	1dfa      	adds	r2, r7, #7
 800239a:	7812      	ldrb	r2, [r2, #0]
 800239c:	0011      	movs	r1, r2
 800239e:	2203      	movs	r2, #3
 80023a0:	400a      	ands	r2, r1
 80023a2:	00d2      	lsls	r2, r2, #3
 80023a4:	21ff      	movs	r1, #255	; 0xff
 80023a6:	4091      	lsls	r1, r2
 80023a8:	000a      	movs	r2, r1
 80023aa:	43d2      	mvns	r2, r2
 80023ac:	401a      	ands	r2, r3
 80023ae:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80023b0:	683b      	ldr	r3, [r7, #0]
 80023b2:	019b      	lsls	r3, r3, #6
 80023b4:	22ff      	movs	r2, #255	; 0xff
 80023b6:	401a      	ands	r2, r3
 80023b8:	1dfb      	adds	r3, r7, #7
 80023ba:	781b      	ldrb	r3, [r3, #0]
 80023bc:	0018      	movs	r0, r3
 80023be:	2303      	movs	r3, #3
 80023c0:	4003      	ands	r3, r0
 80023c2:	00db      	lsls	r3, r3, #3
 80023c4:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80023c6:	481d      	ldr	r0, [pc, #116]	; (800243c <NVIC_SetPriority+0xd4>)
 80023c8:	1dfb      	adds	r3, r7, #7
 80023ca:	781b      	ldrb	r3, [r3, #0]
 80023cc:	001c      	movs	r4, r3
 80023ce:	230f      	movs	r3, #15
 80023d0:	4023      	ands	r3, r4
 80023d2:	3b08      	subs	r3, #8
 80023d4:	089b      	lsrs	r3, r3, #2
 80023d6:	430a      	orrs	r2, r1
 80023d8:	3306      	adds	r3, #6
 80023da:	009b      	lsls	r3, r3, #2
 80023dc:	18c3      	adds	r3, r0, r3
 80023de:	3304      	adds	r3, #4
 80023e0:	601a      	str	r2, [r3, #0]
  else
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80023e2:	e027      	b.n	8002434 <NVIC_SetPriority+0xcc>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80023e4:	4a16      	ldr	r2, [pc, #88]	; (8002440 <NVIC_SetPriority+0xd8>)
 80023e6:	1dfb      	adds	r3, r7, #7
 80023e8:	781b      	ldrb	r3, [r3, #0]
 80023ea:	b25b      	sxtb	r3, r3
 80023ec:	089b      	lsrs	r3, r3, #2
 80023ee:	33c0      	adds	r3, #192	; 0xc0
 80023f0:	009b      	lsls	r3, r3, #2
 80023f2:	589b      	ldr	r3, [r3, r2]
 80023f4:	1dfa      	adds	r2, r7, #7
 80023f6:	7812      	ldrb	r2, [r2, #0]
 80023f8:	0011      	movs	r1, r2
 80023fa:	2203      	movs	r2, #3
 80023fc:	400a      	ands	r2, r1
 80023fe:	00d2      	lsls	r2, r2, #3
 8002400:	21ff      	movs	r1, #255	; 0xff
 8002402:	4091      	lsls	r1, r2
 8002404:	000a      	movs	r2, r1
 8002406:	43d2      	mvns	r2, r2
 8002408:	401a      	ands	r2, r3
 800240a:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800240c:	683b      	ldr	r3, [r7, #0]
 800240e:	019b      	lsls	r3, r3, #6
 8002410:	22ff      	movs	r2, #255	; 0xff
 8002412:	401a      	ands	r2, r3
 8002414:	1dfb      	adds	r3, r7, #7
 8002416:	781b      	ldrb	r3, [r3, #0]
 8002418:	0018      	movs	r0, r3
 800241a:	2303      	movs	r3, #3
 800241c:	4003      	ands	r3, r0
 800241e:	00db      	lsls	r3, r3, #3
 8002420:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002422:	4807      	ldr	r0, [pc, #28]	; (8002440 <NVIC_SetPriority+0xd8>)
 8002424:	1dfb      	adds	r3, r7, #7
 8002426:	781b      	ldrb	r3, [r3, #0]
 8002428:	b25b      	sxtb	r3, r3
 800242a:	089b      	lsrs	r3, r3, #2
 800242c:	430a      	orrs	r2, r1
 800242e:	33c0      	adds	r3, #192	; 0xc0
 8002430:	009b      	lsls	r3, r3, #2
 8002432:	501a      	str	r2, [r3, r0]
}
 8002434:	46c0      	nop			; (mov r8, r8)
 8002436:	46bd      	mov	sp, r7
 8002438:	b003      	add	sp, #12
 800243a:	bd90      	pop	{r4, r7, pc}
 800243c:	e000ed00 	.word	0xe000ed00
 8002440:	e000e100 	.word	0xe000e100

08002444 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002444:	b580      	push	{r7, lr}
 8002446:	b082      	sub	sp, #8
 8002448:	af00      	add	r7, sp, #0
 800244a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	3b01      	subs	r3, #1
 8002450:	4a0c      	ldr	r2, [pc, #48]	; (8002484 <SysTick_Config+0x40>)
 8002452:	4293      	cmp	r3, r2
 8002454:	d901      	bls.n	800245a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002456:	2301      	movs	r3, #1
 8002458:	e010      	b.n	800247c <SysTick_Config+0x38>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800245a:	4b0b      	ldr	r3, [pc, #44]	; (8002488 <SysTick_Config+0x44>)
 800245c:	687a      	ldr	r2, [r7, #4]
 800245e:	3a01      	subs	r2, #1
 8002460:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002462:	2301      	movs	r3, #1
 8002464:	425b      	negs	r3, r3
 8002466:	2103      	movs	r1, #3
 8002468:	0018      	movs	r0, r3
 800246a:	f7ff ff7d 	bl	8002368 <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800246e:	4b06      	ldr	r3, [pc, #24]	; (8002488 <SysTick_Config+0x44>)
 8002470:	2200      	movs	r2, #0
 8002472:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002474:	4b04      	ldr	r3, [pc, #16]	; (8002488 <SysTick_Config+0x44>)
 8002476:	2207      	movs	r2, #7
 8002478:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800247a:	2300      	movs	r3, #0
}
 800247c:	0018      	movs	r0, r3
 800247e:	46bd      	mov	sp, r7
 8002480:	b002      	add	sp, #8
 8002482:	bd80      	pop	{r7, pc}
 8002484:	00ffffff 	.word	0x00ffffff
 8002488:	e000e010 	.word	0xe000e010

0800248c <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800248c:	b580      	push	{r7, lr}
 800248e:	b084      	sub	sp, #16
 8002490:	af00      	add	r7, sp, #0
 8002492:	60b9      	str	r1, [r7, #8]
 8002494:	607a      	str	r2, [r7, #4]
 8002496:	230f      	movs	r3, #15
 8002498:	18fb      	adds	r3, r7, r3
 800249a:	1c02      	adds	r2, r0, #0
 800249c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 800249e:	68bb      	ldr	r3, [r7, #8]
 80024a0:	2b03      	cmp	r3, #3
 80024a2:	d904      	bls.n	80024ae <HAL_NVIC_SetPriority+0x22>
 80024a4:	4b08      	ldr	r3, [pc, #32]	; (80024c8 <HAL_NVIC_SetPriority+0x3c>)
 80024a6:	219b      	movs	r1, #155	; 0x9b
 80024a8:	0018      	movs	r0, r3
 80024aa:	f7fe fa62 	bl	8000972 <assert_failed>
  NVIC_SetPriority(IRQn,PreemptPriority);
 80024ae:	68ba      	ldr	r2, [r7, #8]
 80024b0:	230f      	movs	r3, #15
 80024b2:	18fb      	adds	r3, r7, r3
 80024b4:	781b      	ldrb	r3, [r3, #0]
 80024b6:	b25b      	sxtb	r3, r3
 80024b8:	0011      	movs	r1, r2
 80024ba:	0018      	movs	r0, r3
 80024bc:	f7ff ff54 	bl	8002368 <NVIC_SetPriority>
}
 80024c0:	46c0      	nop			; (mov r8, r8)
 80024c2:	46bd      	mov	sp, r7
 80024c4:	b004      	add	sp, #16
 80024c6:	bd80      	pop	{r7, pc}
 80024c8:	08006f34 	.word	0x08006f34

080024cc <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80024cc:	b580      	push	{r7, lr}
 80024ce:	b082      	sub	sp, #8
 80024d0:	af00      	add	r7, sp, #0
 80024d2:	0002      	movs	r2, r0
 80024d4:	1dfb      	adds	r3, r7, #7
 80024d6:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 80024d8:	1dfb      	adds	r3, r7, #7
 80024da:	781b      	ldrb	r3, [r3, #0]
 80024dc:	2b7f      	cmp	r3, #127	; 0x7f
 80024de:	d904      	bls.n	80024ea <HAL_NVIC_EnableIRQ+0x1e>
 80024e0:	4b07      	ldr	r3, [pc, #28]	; (8002500 <HAL_NVIC_EnableIRQ+0x34>)
 80024e2:	21ab      	movs	r1, #171	; 0xab
 80024e4:	0018      	movs	r0, r3
 80024e6:	f7fe fa44 	bl	8000972 <assert_failed>
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80024ea:	1dfb      	adds	r3, r7, #7
 80024ec:	781b      	ldrb	r3, [r3, #0]
 80024ee:	b25b      	sxtb	r3, r3
 80024f0:	0018      	movs	r0, r3
 80024f2:	f7ff ff23 	bl	800233c <NVIC_EnableIRQ>
}
 80024f6:	46c0      	nop			; (mov r8, r8)
 80024f8:	46bd      	mov	sp, r7
 80024fa:	b002      	add	sp, #8
 80024fc:	bd80      	pop	{r7, pc}
 80024fe:	46c0      	nop			; (mov r8, r8)
 8002500:	08006f34 	.word	0x08006f34

08002504 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002504:	b580      	push	{r7, lr}
 8002506:	b082      	sub	sp, #8
 8002508:	af00      	add	r7, sp, #0
 800250a:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	0018      	movs	r0, r3
 8002510:	f7ff ff98 	bl	8002444 <SysTick_Config>
 8002514:	0003      	movs	r3, r0
}
 8002516:	0018      	movs	r0, r3
 8002518:	46bd      	mov	sp, r7
 800251a:	b002      	add	sp, #8
 800251c:	bd80      	pop	{r7, pc}
	...

08002520 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and initialize the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8002520:	b580      	push	{r7, lr}
 8002522:	b082      	sub	sp, #8
 8002524:	af00      	add	r7, sp, #0
 8002526:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if(hcrc == NULL)
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	2b00      	cmp	r3, #0
 800252c:	d101      	bne.n	8002532 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 800252e:	2301      	movs	r3, #1
 8002530:	e08b      	b.n	800264a <HAL_CRC_Init+0x12a>
  }
  
  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	4a47      	ldr	r2, [pc, #284]	; (8002654 <HAL_CRC_Init+0x134>)
 8002538:	4293      	cmp	r3, r2
 800253a:	d004      	beq.n	8002546 <HAL_CRC_Init+0x26>
 800253c:	4b46      	ldr	r3, [pc, #280]	; (8002658 <HAL_CRC_Init+0x138>)
 800253e:	2180      	movs	r1, #128	; 0x80
 8002540:	0018      	movs	r0, r3
 8002542:	f7fe fa16 	bl	8000972 <assert_failed>

  if(hcrc->State == HAL_CRC_STATE_RESET)
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	7f5b      	ldrb	r3, [r3, #29]
 800254a:	b2db      	uxtb	r3, r3
 800254c:	2b00      	cmp	r3, #0
 800254e:	d106      	bne.n	800255e <HAL_CRC_Init+0x3e>
  {   
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	2200      	movs	r2, #0
 8002554:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	0018      	movs	r0, r3
 800255a:	f7fd ff87 	bl	800046c <HAL_CRC_MspInit>
  }
  
  hcrc->State = HAL_CRC_STATE_BUSY; 
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	2202      	movs	r2, #2
 8002562:	775a      	strb	r2, [r3, #29]
  /* Extended initialization: if programmable polynomial feature is 
     applicable to device, set default or non-default generating 
     polynomial according to hcrc->Init parameters.
     If feature is non-applicable to device in use, HAL_CRCEx_Init straight 
     away reports HAL_OK. */
  if (HAL_CRCEx_Init(hcrc) != HAL_OK)
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	0018      	movs	r0, r3
 8002568:	f000 f878 	bl	800265c <HAL_CRCEx_Init>
 800256c:	1e03      	subs	r3, r0, #0
 800256e:	d001      	beq.n	8002574 <HAL_CRC_Init+0x54>
  {
    return HAL_ERROR;
 8002570:	2301      	movs	r3, #1
 8002572:	e06a      	b.n	800264a <HAL_CRC_Init+0x12a>
  }
  
  /* check whether or not non-default CRC initial value has been 
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	795b      	ldrb	r3, [r3, #5]
 8002578:	2b00      	cmp	r3, #0
 800257a:	d008      	beq.n	800258e <HAL_CRC_Init+0x6e>
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	795b      	ldrb	r3, [r3, #5]
 8002580:	2b01      	cmp	r3, #1
 8002582:	d004      	beq.n	800258e <HAL_CRC_Init+0x6e>
 8002584:	4b34      	ldr	r3, [pc, #208]	; (8002658 <HAL_CRC_Init+0x138>)
 8002586:	2199      	movs	r1, #153	; 0x99
 8002588:	0018      	movs	r0, r3
 800258a:	f7fe f9f2 	bl	8000972 <assert_failed>
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	795b      	ldrb	r3, [r3, #5]
 8002592:	2b00      	cmp	r3, #0
 8002594:	d105      	bne.n	80025a2 <HAL_CRC_Init+0x82>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);  
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	2201      	movs	r2, #1
 800259c:	4252      	negs	r2, r2
 800259e:	611a      	str	r2, [r3, #16]
 80025a0:	e004      	b.n	80025ac <HAL_CRC_Init+0x8c>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	687a      	ldr	r2, [r7, #4]
 80025a8:	6912      	ldr	r2, [r2, #16]
 80025aa:	611a      	str	r2, [r3, #16]
  }
  

  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode)); 
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	695b      	ldr	r3, [r3, #20]
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d010      	beq.n	80025d6 <HAL_CRC_Init+0xb6>
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	695b      	ldr	r3, [r3, #20]
 80025b8:	2b20      	cmp	r3, #32
 80025ba:	d00c      	beq.n	80025d6 <HAL_CRC_Init+0xb6>
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	695b      	ldr	r3, [r3, #20]
 80025c0:	2b40      	cmp	r3, #64	; 0x40
 80025c2:	d008      	beq.n	80025d6 <HAL_CRC_Init+0xb6>
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	695b      	ldr	r3, [r3, #20]
 80025c8:	2b60      	cmp	r3, #96	; 0x60
 80025ca:	d004      	beq.n	80025d6 <HAL_CRC_Init+0xb6>
 80025cc:	4b22      	ldr	r3, [pc, #136]	; (8002658 <HAL_CRC_Init+0x138>)
 80025ce:	21a5      	movs	r1, #165	; 0xa5
 80025d0:	0018      	movs	r0, r3
 80025d2:	f7fe f9ce 	bl	8000972 <assert_failed>
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode); 
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	689b      	ldr	r3, [r3, #8]
 80025dc:	2260      	movs	r2, #96	; 0x60
 80025de:	4393      	bics	r3, r2
 80025e0:	0019      	movs	r1, r3
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	695a      	ldr	r2, [r3, #20]
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	430a      	orrs	r2, r1
 80025ec:	609a      	str	r2, [r3, #8]
  
  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode)); 
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	699b      	ldr	r3, [r3, #24]
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d008      	beq.n	8002608 <HAL_CRC_Init+0xe8>
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	699b      	ldr	r3, [r3, #24]
 80025fa:	2b80      	cmp	r3, #128	; 0x80
 80025fc:	d004      	beq.n	8002608 <HAL_CRC_Init+0xe8>
 80025fe:	4b16      	ldr	r3, [pc, #88]	; (8002658 <HAL_CRC_Init+0x138>)
 8002600:	21a9      	movs	r1, #169	; 0xa9
 8002602:	0018      	movs	r0, r3
 8002604:	f7fe f9b5 	bl	8000972 <assert_failed>
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);  
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	689b      	ldr	r3, [r3, #8]
 800260e:	2280      	movs	r2, #128	; 0x80
 8002610:	4393      	bics	r3, r2
 8002612:	0019      	movs	r1, r3
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	699a      	ldr	r2, [r3, #24]
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	430a      	orrs	r2, r1
 800261e:	609a      	str	r2, [r3, #8]
  
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	6a1b      	ldr	r3, [r3, #32]
 8002624:	2b01      	cmp	r3, #1
 8002626:	d00c      	beq.n	8002642 <HAL_CRC_Init+0x122>
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	6a1b      	ldr	r3, [r3, #32]
 800262c:	2b02      	cmp	r3, #2
 800262e:	d008      	beq.n	8002642 <HAL_CRC_Init+0x122>
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	6a1b      	ldr	r3, [r3, #32]
 8002634:	2b03      	cmp	r3, #3
 8002636:	d004      	beq.n	8002642 <HAL_CRC_Init+0x122>
 8002638:	4b07      	ldr	r3, [pc, #28]	; (8002658 <HAL_CRC_Init+0x138>)
 800263a:	21ae      	movs	r1, #174	; 0xae
 800263c:	0018      	movs	r0, r3
 800263e:	f7fe f998 	bl	8000972 <assert_failed>

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	2201      	movs	r2, #1
 8002646:	775a      	strb	r2, [r3, #29]
  
  /* Return function status */
  return HAL_OK;
 8002648:	2300      	movs	r3, #0
}
 800264a:	0018      	movs	r0, r3
 800264c:	46bd      	mov	sp, r7
 800264e:	b002      	add	sp, #8
 8002650:	bd80      	pop	{r7, pc}
 8002652:	46c0      	nop			; (mov r8, r8)
 8002654:	40023000 	.word	0x40023000
 8002658:	08006f70 	.word	0x08006f70

0800265c <HAL_CRCEx_Init>:
  * @brief  Extended initialization to set generating polynomial
  * @param  hcrc CRC handle             
  * @retval HAL status
  */             
HAL_StatusTypeDef HAL_CRCEx_Init(CRC_HandleTypeDef *hcrc)
{
 800265c:	b580      	push	{r7, lr}
 800265e:	b082      	sub	sp, #8
 8002660:	af00      	add	r7, sp, #0
 8002662:	6078      	str	r0, [r7, #4]
      return HAL_ERROR;
    }
  }
#endif /* defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F091xC) || defined (STM32F098xx) */    

   return HAL_OK;
 8002664:	2300      	movs	r3, #0
}
 8002666:	0018      	movs	r0, r3
 8002668:	46bd      	mov	sp, r7
 800266a:	b002      	add	sp, #8
 800266c:	bd80      	pop	{r7, pc}
	...

08002670 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef* hdac)
{ 
 8002670:	b580      	push	{r7, lr}
 8002672:	b082      	sub	sp, #8
 8002674:	af00      	add	r7, sp, #0
 8002676:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if(hdac == NULL)
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	2b00      	cmp	r3, #0
 800267c:	d101      	bne.n	8002682 <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 800267e:	2301      	movs	r3, #1
 8002680:	e021      	b.n	80026c6 <HAL_DAC_Init+0x56>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	4a12      	ldr	r2, [pc, #72]	; (80026d0 <HAL_DAC_Init+0x60>)
 8002688:	4293      	cmp	r3, r2
 800268a:	d006      	beq.n	800269a <HAL_DAC_Init+0x2a>
 800268c:	2387      	movs	r3, #135	; 0x87
 800268e:	005a      	lsls	r2, r3, #1
 8002690:	4b10      	ldr	r3, [pc, #64]	; (80026d4 <HAL_DAC_Init+0x64>)
 8002692:	0011      	movs	r1, r2
 8002694:	0018      	movs	r0, r3
 8002696:	f7fe f96c 	bl	8000972 <assert_failed>
  
  if(hdac->State == HAL_DAC_STATE_RESET)
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	791b      	ldrb	r3, [r3, #4]
 800269e:	b2db      	uxtb	r3, r3
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d106      	bne.n	80026b2 <HAL_DAC_Init+0x42>
  {  
    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	2200      	movs	r2, #0
 80026a8:	715a      	strb	r2, [r3, #5]

    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	0018      	movs	r0, r3
 80026ae:	f7fd ff29 	bl	8000504 <HAL_DAC_MspInit>
  }
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	2202      	movs	r2, #2
 80026b6:	711a      	strb	r2, [r3, #4]
  
  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	2200      	movs	r2, #0
 80026bc:	611a      	str	r2, [r3, #16]
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	2201      	movs	r2, #1
 80026c2:	711a      	strb	r2, [r3, #4]
  
  /* Return function status */
  return HAL_OK;
 80026c4:	2300      	movs	r3, #0
}
 80026c6:	0018      	movs	r0, r3
 80026c8:	46bd      	mov	sp, r7
 80026ca:	b002      	add	sp, #8
 80026cc:	bd80      	pop	{r7, pc}
 80026ce:	46c0      	nop			; (mov r8, r8)
 80026d0:	40007400 	.word	0x40007400
 80026d4:	08006fa8 	.word	0x08006fa8

080026d8 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef* hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{  
 80026d8:	b580      	push	{r7, lr}
 80026da:	b086      	sub	sp, #24
 80026dc:	af00      	add	r7, sp, #0
 80026de:	60f8      	str	r0, [r7, #12]
 80026e0:	60b9      	str	r1, [r7, #8]
 80026e2:	607a      	str	r2, [r7, #4]
 80026e4:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0;
 80026e6:	2300      	movs	r3, #0
 80026e8:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
 80026ea:	68bb      	ldr	r3, [r7, #8]
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d005      	beq.n	80026fc <HAL_DAC_SetValue+0x24>
 80026f0:	4a1c      	ldr	r2, [pc, #112]	; (8002764 <HAL_DAC_SetValue+0x8c>)
 80026f2:	4b1d      	ldr	r3, [pc, #116]	; (8002768 <HAL_DAC_SetValue+0x90>)
 80026f4:	0011      	movs	r1, r2
 80026f6:	0018      	movs	r0, r3
 80026f8:	f7fe f93b 	bl	8000972 <assert_failed>
  assert_param(IS_DAC_ALIGN(Alignment));
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d00b      	beq.n	800271a <HAL_DAC_SetValue+0x42>
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	2b04      	cmp	r3, #4
 8002706:	d008      	beq.n	800271a <HAL_DAC_SetValue+0x42>
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	2b08      	cmp	r3, #8
 800270c:	d005      	beq.n	800271a <HAL_DAC_SetValue+0x42>
 800270e:	4a17      	ldr	r2, [pc, #92]	; (800276c <HAL_DAC_SetValue+0x94>)
 8002710:	4b15      	ldr	r3, [pc, #84]	; (8002768 <HAL_DAC_SetValue+0x90>)
 8002712:	0011      	movs	r1, r2
 8002714:	0018      	movs	r0, r3
 8002716:	f7fe f92c 	bl	8000972 <assert_failed>
  assert_param(IS_DAC_DATA(Data));
 800271a:	683b      	ldr	r3, [r7, #0]
 800271c:	4a14      	ldr	r2, [pc, #80]	; (8002770 <HAL_DAC_SetValue+0x98>)
 800271e:	4293      	cmp	r3, r2
 8002720:	d906      	bls.n	8002730 <HAL_DAC_SetValue+0x58>
 8002722:	238e      	movs	r3, #142	; 0x8e
 8002724:	009a      	lsls	r2, r3, #2
 8002726:	4b10      	ldr	r3, [pc, #64]	; (8002768 <HAL_DAC_SetValue+0x90>)
 8002728:	0011      	movs	r1, r2
 800272a:	0018      	movs	r0, r3
 800272c:	f7fe f921 	bl	8000972 <assert_failed>
  
  tmp = (uint32_t)hdac->Instance; 
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	617b      	str	r3, [r7, #20]
  if(Channel == DAC_CHANNEL_1)
 8002736:	68bb      	ldr	r3, [r7, #8]
 8002738:	2b00      	cmp	r3, #0
 800273a:	d105      	bne.n	8002748 <HAL_DAC_SetValue+0x70>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 800273c:	697a      	ldr	r2, [r7, #20]
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	18d3      	adds	r3, r2, r3
 8002742:	3308      	adds	r3, #8
 8002744:	617b      	str	r3, [r7, #20]
 8002746:	e004      	b.n	8002752 <HAL_DAC_SetValue+0x7a>
  }
  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 8002748:	697a      	ldr	r2, [r7, #20]
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	18d3      	adds	r3, r2, r3
 800274e:	3314      	adds	r3, #20
 8002750:	617b      	str	r3, [r7, #20]
  }

  /* Set the DAC channel1 selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8002752:	697b      	ldr	r3, [r7, #20]
 8002754:	683a      	ldr	r2, [r7, #0]
 8002756:	601a      	str	r2, [r3, #0]
  
  /* Return function status */
  return HAL_OK;
 8002758:	2300      	movs	r3, #0
}
 800275a:	0018      	movs	r0, r3
 800275c:	46bd      	mov	sp, r7
 800275e:	b006      	add	sp, #24
 8002760:	bd80      	pop	{r7, pc}
 8002762:	46c0      	nop			; (mov r8, r8)
 8002764:	00000236 	.word	0x00000236
 8002768:	08006fa8 	.word	0x08006fa8
 800276c:	00000237 	.word	0x00000237
 8002770:	0000fff0 	.word	0x0000fff0

08002774 <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8002774:	b580      	push	{r7, lr}
 8002776:	b082      	sub	sp, #8
 8002778:	af00      	add	r7, sp, #0
 800277a:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh1 could be implemented in the user file
   */
}
 800277c:	46c0      	nop			; (mov r8, r8)
 800277e:	46bd      	mov	sp, r7
 8002780:	b002      	add	sp, #8
 8002782:	bd80      	pop	{r7, pc}

08002784 <HAL_DAC_ConfigChannel>:
  *          This parameter can be one of the following values:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef* hdac, DAC_ChannelConfTypeDef* sConfig, uint32_t Channel)
{
 8002784:	b580      	push	{r7, lr}
 8002786:	b086      	sub	sp, #24
 8002788:	af00      	add	r7, sp, #0
 800278a:	60f8      	str	r0, [r7, #12]
 800278c:	60b9      	str	r1, [r7, #8]
 800278e:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1 = 0U, tmpreg2 = 0U;
 8002790:	2300      	movs	r3, #0
 8002792:	617b      	str	r3, [r7, #20]
 8002794:	2300      	movs	r3, #0
 8002796:	613b      	str	r3, [r7, #16]

  /* Check the DAC parameters */
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
 8002798:	68bb      	ldr	r3, [r7, #8]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	2b00      	cmp	r3, #0
 800279e:	d01c      	beq.n	80027da <HAL_DAC_ConfigChannel+0x56>
 80027a0:	68bb      	ldr	r3, [r7, #8]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	2b24      	cmp	r3, #36	; 0x24
 80027a6:	d018      	beq.n	80027da <HAL_DAC_ConfigChannel+0x56>
 80027a8:	68bb      	ldr	r3, [r7, #8]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	2b0c      	cmp	r3, #12
 80027ae:	d014      	beq.n	80027da <HAL_DAC_ConfigChannel+0x56>
 80027b0:	68bb      	ldr	r3, [r7, #8]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	2b04      	cmp	r3, #4
 80027b6:	d010      	beq.n	80027da <HAL_DAC_ConfigChannel+0x56>
 80027b8:	68bb      	ldr	r3, [r7, #8]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	2b1c      	cmp	r3, #28
 80027be:	d00c      	beq.n	80027da <HAL_DAC_ConfigChannel+0x56>
 80027c0:	68bb      	ldr	r3, [r7, #8]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	2b34      	cmp	r3, #52	; 0x34
 80027c6:	d008      	beq.n	80027da <HAL_DAC_ConfigChannel+0x56>
 80027c8:	68bb      	ldr	r3, [r7, #8]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	2b3c      	cmp	r3, #60	; 0x3c
 80027ce:	d004      	beq.n	80027da <HAL_DAC_ConfigChannel+0x56>
 80027d0:	4b37      	ldr	r3, [pc, #220]	; (80028b0 <HAL_DAC_ConfigChannel+0x12c>)
 80027d2:	21b9      	movs	r1, #185	; 0xb9
 80027d4:	0018      	movs	r0, r3
 80027d6:	f7fe f8cc 	bl	8000972 <assert_failed>
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
 80027da:	68bb      	ldr	r3, [r7, #8]
 80027dc:	685b      	ldr	r3, [r3, #4]
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d008      	beq.n	80027f4 <HAL_DAC_ConfigChannel+0x70>
 80027e2:	68bb      	ldr	r3, [r7, #8]
 80027e4:	685b      	ldr	r3, [r3, #4]
 80027e6:	2b02      	cmp	r3, #2
 80027e8:	d004      	beq.n	80027f4 <HAL_DAC_ConfigChannel+0x70>
 80027ea:	4b31      	ldr	r3, [pc, #196]	; (80028b0 <HAL_DAC_ConfigChannel+0x12c>)
 80027ec:	21ba      	movs	r1, #186	; 0xba
 80027ee:	0018      	movs	r0, r3
 80027f0:	f7fe f8bf 	bl	8000972 <assert_failed>
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
 80027f4:	68bb      	ldr	r3, [r7, #8]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d01c      	beq.n	8002836 <HAL_DAC_ConfigChannel+0xb2>
 80027fc:	68bb      	ldr	r3, [r7, #8]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	2b24      	cmp	r3, #36	; 0x24
 8002802:	d018      	beq.n	8002836 <HAL_DAC_ConfigChannel+0xb2>
 8002804:	68bb      	ldr	r3, [r7, #8]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	2b0c      	cmp	r3, #12
 800280a:	d014      	beq.n	8002836 <HAL_DAC_ConfigChannel+0xb2>
 800280c:	68bb      	ldr	r3, [r7, #8]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	2b04      	cmp	r3, #4
 8002812:	d010      	beq.n	8002836 <HAL_DAC_ConfigChannel+0xb2>
 8002814:	68bb      	ldr	r3, [r7, #8]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	2b1c      	cmp	r3, #28
 800281a:	d00c      	beq.n	8002836 <HAL_DAC_ConfigChannel+0xb2>
 800281c:	68bb      	ldr	r3, [r7, #8]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	2b34      	cmp	r3, #52	; 0x34
 8002822:	d008      	beq.n	8002836 <HAL_DAC_ConfigChannel+0xb2>
 8002824:	68bb      	ldr	r3, [r7, #8]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	2b3c      	cmp	r3, #60	; 0x3c
 800282a:	d004      	beq.n	8002836 <HAL_DAC_ConfigChannel+0xb2>
 800282c:	4b20      	ldr	r3, [pc, #128]	; (80028b0 <HAL_DAC_ConfigChannel+0x12c>)
 800282e:	21bb      	movs	r1, #187	; 0xbb
 8002830:	0018      	movs	r0, r3
 8002832:	f7fe f89e 	bl	8000972 <assert_failed>
  assert_param(IS_DAC_CHANNEL(Channel));
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	2b00      	cmp	r3, #0
 800283a:	d004      	beq.n	8002846 <HAL_DAC_ConfigChannel+0xc2>
 800283c:	4b1c      	ldr	r3, [pc, #112]	; (80028b0 <HAL_DAC_ConfigChannel+0x12c>)
 800283e:	21bc      	movs	r1, #188	; 0xbc
 8002840:	0018      	movs	r0, r3
 8002842:	f7fe f896 	bl	8000972 <assert_failed>
  
  /* Process locked */
  __HAL_LOCK(hdac);
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	795b      	ldrb	r3, [r3, #5]
 800284a:	2b01      	cmp	r3, #1
 800284c:	d101      	bne.n	8002852 <HAL_DAC_ConfigChannel+0xce>
 800284e:	2302      	movs	r3, #2
 8002850:	e029      	b.n	80028a6 <HAL_DAC_ConfigChannel+0x122>
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	2201      	movs	r2, #1
 8002856:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	2202      	movs	r2, #2
 800285c:	711a      	strb	r2, [r3, #4]
  
  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << Channel); 
 8002866:	223e      	movs	r2, #62	; 0x3e
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	409a      	lsls	r2, r3
 800286c:	0013      	movs	r3, r2
 800286e:	43da      	mvns	r2, r3
 8002870:	697b      	ldr	r3, [r7, #20]
 8002872:	4013      	ands	r3, r2
 8002874:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */   
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8002876:	68bb      	ldr	r3, [r7, #8]
 8002878:	681a      	ldr	r2, [r3, #0]
 800287a:	68bb      	ldr	r3, [r7, #8]
 800287c:	685b      	ldr	r3, [r3, #4]
 800287e:	4313      	orrs	r3, r2
 8002880:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << Channel;
 8002882:	693a      	ldr	r2, [r7, #16]
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	409a      	lsls	r2, r3
 8002888:	0013      	movs	r3, r2
 800288a:	697a      	ldr	r2, [r7, #20]
 800288c:	4313      	orrs	r3, r2
 800288e:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	697a      	ldr	r2, [r7, #20]
 8002896:	601a      	str	r2, [r3, #0]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	2201      	movs	r2, #1
 800289c:	711a      	strb	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	2200      	movs	r2, #0
 80028a2:	715a      	strb	r2, [r3, #5]
  
  /* Return function status */
  return HAL_OK;
 80028a4:	2300      	movs	r3, #0
}
 80028a6:	0018      	movs	r0, r3
 80028a8:	46bd      	mov	sp, r7
 80028aa:	b006      	add	sp, #24
 80028ac:	bd80      	pop	{r7, pc}
 80028ae:	46c0      	nop			; (mov r8, r8)
 80028b0:	08006fe0 	.word	0x08006fe0

080028b4 <HAL_DAC_Start>:
       /* STM32F091xC  STM32F098xx */

#if defined (STM32F051x8) || defined (STM32F058xx)

HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef* hdac, uint32_t Channel)
{
 80028b4:	b580      	push	{r7, lr}
 80028b6:	b082      	sub	sp, #8
 80028b8:	af00      	add	r7, sp, #0
 80028ba:	6078      	str	r0, [r7, #4]
 80028bc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
 80028be:	683b      	ldr	r3, [r7, #0]
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d006      	beq.n	80028d2 <HAL_DAC_Start+0x1e>
 80028c4:	23f0      	movs	r3, #240	; 0xf0
 80028c6:	005a      	lsls	r2, r3, #1
 80028c8:	4b1b      	ldr	r3, [pc, #108]	; (8002938 <HAL_DAC_Start+0x84>)
 80028ca:	0011      	movs	r1, r2
 80028cc:	0018      	movs	r0, r3
 80028ce:	f7fe f850 	bl	8000972 <assert_failed>
  
  /* Process locked */
  __HAL_LOCK(hdac);
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	795b      	ldrb	r3, [r3, #5]
 80028d6:	2b01      	cmp	r3, #1
 80028d8:	d101      	bne.n	80028de <HAL_DAC_Start+0x2a>
 80028da:	2302      	movs	r3, #2
 80028dc:	e028      	b.n	8002930 <HAL_DAC_Start+0x7c>
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	2201      	movs	r2, #1
 80028e2:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	2202      	movs	r2, #2
 80028e8:	711a      	strb	r2, [r3, #4]
  
  /* Enable the Peripharal */
  __HAL_DAC_ENABLE(hdac, Channel);
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	6819      	ldr	r1, [r3, #0]
 80028f0:	2201      	movs	r2, #1
 80028f2:	683b      	ldr	r3, [r7, #0]
 80028f4:	409a      	lsls	r2, r3
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	430a      	orrs	r2, r1
 80028fc:	601a      	str	r2, [r3, #0]
  
  if(Channel == DAC_CHANNEL_1)
 80028fe:	683b      	ldr	r3, [r7, #0]
 8002900:	2b00      	cmp	r3, #0
 8002902:	d10e      	bne.n	8002922 <HAL_DAC_Start+0x6e>
  {
    /* Check if software trigger enabled */
    if((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == (DAC_CR_TEN1 | DAC_CR_TSEL1))
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	223c      	movs	r2, #60	; 0x3c
 800290c:	4013      	ands	r3, r2
 800290e:	2b3c      	cmp	r3, #60	; 0x3c
 8002910:	d107      	bne.n	8002922 <HAL_DAC_Start+0x6e>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	685a      	ldr	r2, [r3, #4]
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	2101      	movs	r1, #1
 800291e:	430a      	orrs	r2, r1
 8002920:	605a      	str	r2, [r3, #4]
    }
  }
 
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	2201      	movs	r2, #1
 8002926:	711a      	strb	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	2200      	movs	r2, #0
 800292c:	715a      	strb	r2, [r3, #5]
    
  /* Return function status */
  return HAL_OK;
 800292e:	2300      	movs	r3, #0
}
 8002930:	0018      	movs	r0, r3
 8002932:	46bd      	mov	sp, r7
 8002934:	b002      	add	sp, #8
 8002936:	bd80      	pop	{r7, pc}
 8002938:	08006fe0 	.word	0x08006fe0

0800293c <HAL_DAC_IRQHandler>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
void HAL_DAC_IRQHandler(DAC_HandleTypeDef* hdac)
{
 800293c:	b580      	push	{r7, lr}
 800293e:	b082      	sub	sp, #8
 8002940:	af00      	add	r7, sp, #0
 8002942:	6078      	str	r0, [r7, #4]
  if(__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR1))
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	681a      	ldr	r2, [r3, #0]
 800294a:	2380      	movs	r3, #128	; 0x80
 800294c:	019b      	lsls	r3, r3, #6
 800294e:	401a      	ands	r2, r3
 8002950:	2380      	movs	r3, #128	; 0x80
 8002952:	019b      	lsls	r3, r3, #6
 8002954:	429a      	cmp	r2, r3
 8002956:	d123      	bne.n	80029a0 <HAL_DAC_IRQHandler+0x64>
  { 
  /* Check Overrun flag */
  if(__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR1))
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800295e:	2380      	movs	r3, #128	; 0x80
 8002960:	019b      	lsls	r3, r3, #6
 8002962:	401a      	ands	r2, r3
 8002964:	2380      	movs	r3, #128	; 0x80
 8002966:	019b      	lsls	r3, r3, #6
 8002968:	429a      	cmp	r2, r3
 800296a:	d119      	bne.n	80029a0 <HAL_DAC_IRQHandler+0x64>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	2204      	movs	r2, #4
 8002970:	711a      	strb	r2, [r3, #4]
    
      /* Set DAC error code to chanel1 DMA underrun error */
      hdac->ErrorCode |= HAL_DAC_ERROR_DMAUNDERRUNCH1;
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	691b      	ldr	r3, [r3, #16]
 8002976:	2201      	movs	r2, #1
 8002978:	431a      	orrs	r2, r3
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	611a      	str	r2, [r3, #16]
    
      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac,DAC_FLAG_DMAUDR1);
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	2280      	movs	r2, #128	; 0x80
 8002984:	0192      	lsls	r2, r2, #6
 8002986:	635a      	str	r2, [r3, #52]	; 0x34
    
      /* Disable the selected DAC channel1 DMA request */
      hdac->Instance->CR &= ~DAC_CR_DMAEN1;
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	681a      	ldr	r2, [r3, #0]
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	4905      	ldr	r1, [pc, #20]	; (80029a8 <HAL_DAC_IRQHandler+0x6c>)
 8002994:	400a      	ands	r2, r1
 8002996:	601a      	str	r2, [r3, #0]
    
      /* Error callback */ 
      HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	0018      	movs	r0, r3
 800299c:	f7ff feea 	bl	8002774 <HAL_DAC_DMAUnderrunCallbackCh1>
    }
  }
}
 80029a0:	46c0      	nop			; (mov r8, r8)
 80029a2:	46bd      	mov	sp, r7
 80029a4:	b002      	add	sp, #8
 80029a6:	bd80      	pop	{r7, pc}
 80029a8:	ffffefff 	.word	0xffffefff

080029ac <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 80029ac:	b580      	push	{r7, lr}
 80029ae:	b084      	sub	sp, #16
 80029b0:	af00      	add	r7, sp, #0
 80029b2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80029b4:	2300      	movs	r3, #0
 80029b6:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d101      	bne.n	80029c2 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 80029be:	2301      	movs	r3, #1
 80029c0:	e0df      	b.n	8002b82 <HAL_DMA_Init+0x1d6>
  }
  
  /* Check the parameters */
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	4a71      	ldr	r2, [pc, #452]	; (8002b8c <HAL_DMA_Init+0x1e0>)
 80029c8:	4293      	cmp	r3, r2
 80029ca:	d018      	beq.n	80029fe <HAL_DMA_Init+0x52>
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	4a6f      	ldr	r2, [pc, #444]	; (8002b90 <HAL_DMA_Init+0x1e4>)
 80029d2:	4293      	cmp	r3, r2
 80029d4:	d013      	beq.n	80029fe <HAL_DMA_Init+0x52>
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	4a6e      	ldr	r2, [pc, #440]	; (8002b94 <HAL_DMA_Init+0x1e8>)
 80029dc:	4293      	cmp	r3, r2
 80029de:	d00e      	beq.n	80029fe <HAL_DMA_Init+0x52>
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	4a6c      	ldr	r2, [pc, #432]	; (8002b98 <HAL_DMA_Init+0x1ec>)
 80029e6:	4293      	cmp	r3, r2
 80029e8:	d009      	beq.n	80029fe <HAL_DMA_Init+0x52>
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	4a6b      	ldr	r2, [pc, #428]	; (8002b9c <HAL_DMA_Init+0x1f0>)
 80029f0:	4293      	cmp	r3, r2
 80029f2:	d004      	beq.n	80029fe <HAL_DMA_Init+0x52>
 80029f4:	4b6a      	ldr	r3, [pc, #424]	; (8002ba0 <HAL_DMA_Init+0x1f4>)
 80029f6:	21a5      	movs	r1, #165	; 0xa5
 80029f8:	0018      	movs	r0, r3
 80029fa:	f7fd ffba 	bl	8000972 <assert_failed>
  assert_param(IS_DMA_DIRECTION(hdma->Init.Direction));
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	685b      	ldr	r3, [r3, #4]
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d00e      	beq.n	8002a24 <HAL_DMA_Init+0x78>
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	685b      	ldr	r3, [r3, #4]
 8002a0a:	2b10      	cmp	r3, #16
 8002a0c:	d00a      	beq.n	8002a24 <HAL_DMA_Init+0x78>
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	685a      	ldr	r2, [r3, #4]
 8002a12:	2380      	movs	r3, #128	; 0x80
 8002a14:	01db      	lsls	r3, r3, #7
 8002a16:	429a      	cmp	r2, r3
 8002a18:	d004      	beq.n	8002a24 <HAL_DMA_Init+0x78>
 8002a1a:	4b61      	ldr	r3, [pc, #388]	; (8002ba0 <HAL_DMA_Init+0x1f4>)
 8002a1c:	21a6      	movs	r1, #166	; 0xa6
 8002a1e:	0018      	movs	r0, r3
 8002a20:	f7fd ffa7 	bl	8000972 <assert_failed>
  assert_param(IS_DMA_PERIPHERAL_INC_STATE(hdma->Init.PeriphInc));
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	689b      	ldr	r3, [r3, #8]
 8002a28:	2b40      	cmp	r3, #64	; 0x40
 8002a2a:	d008      	beq.n	8002a3e <HAL_DMA_Init+0x92>
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	689b      	ldr	r3, [r3, #8]
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d004      	beq.n	8002a3e <HAL_DMA_Init+0x92>
 8002a34:	4b5a      	ldr	r3, [pc, #360]	; (8002ba0 <HAL_DMA_Init+0x1f4>)
 8002a36:	21a7      	movs	r1, #167	; 0xa7
 8002a38:	0018      	movs	r0, r3
 8002a3a:	f7fd ff9a 	bl	8000972 <assert_failed>
  assert_param(IS_DMA_MEMORY_INC_STATE(hdma->Init.MemInc));
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	68db      	ldr	r3, [r3, #12]
 8002a42:	2b80      	cmp	r3, #128	; 0x80
 8002a44:	d008      	beq.n	8002a58 <HAL_DMA_Init+0xac>
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	68db      	ldr	r3, [r3, #12]
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d004      	beq.n	8002a58 <HAL_DMA_Init+0xac>
 8002a4e:	4b54      	ldr	r3, [pc, #336]	; (8002ba0 <HAL_DMA_Init+0x1f4>)
 8002a50:	21a8      	movs	r1, #168	; 0xa8
 8002a52:	0018      	movs	r0, r3
 8002a54:	f7fd ff8d 	bl	8000972 <assert_failed>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	691b      	ldr	r3, [r3, #16]
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d010      	beq.n	8002a82 <HAL_DMA_Init+0xd6>
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	691a      	ldr	r2, [r3, #16]
 8002a64:	2380      	movs	r3, #128	; 0x80
 8002a66:	005b      	lsls	r3, r3, #1
 8002a68:	429a      	cmp	r2, r3
 8002a6a:	d00a      	beq.n	8002a82 <HAL_DMA_Init+0xd6>
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	691a      	ldr	r2, [r3, #16]
 8002a70:	2380      	movs	r3, #128	; 0x80
 8002a72:	009b      	lsls	r3, r3, #2
 8002a74:	429a      	cmp	r2, r3
 8002a76:	d004      	beq.n	8002a82 <HAL_DMA_Init+0xd6>
 8002a78:	4b49      	ldr	r3, [pc, #292]	; (8002ba0 <HAL_DMA_Init+0x1f4>)
 8002a7a:	21a9      	movs	r1, #169	; 0xa9
 8002a7c:	0018      	movs	r0, r3
 8002a7e:	f7fd ff78 	bl	8000972 <assert_failed>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	695b      	ldr	r3, [r3, #20]
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d010      	beq.n	8002aac <HAL_DMA_Init+0x100>
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	695a      	ldr	r2, [r3, #20]
 8002a8e:	2380      	movs	r3, #128	; 0x80
 8002a90:	00db      	lsls	r3, r3, #3
 8002a92:	429a      	cmp	r2, r3
 8002a94:	d00a      	beq.n	8002aac <HAL_DMA_Init+0x100>
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	695a      	ldr	r2, [r3, #20]
 8002a9a:	2380      	movs	r3, #128	; 0x80
 8002a9c:	011b      	lsls	r3, r3, #4
 8002a9e:	429a      	cmp	r2, r3
 8002aa0:	d004      	beq.n	8002aac <HAL_DMA_Init+0x100>
 8002aa2:	4b3f      	ldr	r3, [pc, #252]	; (8002ba0 <HAL_DMA_Init+0x1f4>)
 8002aa4:	21aa      	movs	r1, #170	; 0xaa
 8002aa6:	0018      	movs	r0, r3
 8002aa8:	f7fd ff63 	bl	8000972 <assert_failed>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	699b      	ldr	r3, [r3, #24]
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d008      	beq.n	8002ac6 <HAL_DMA_Init+0x11a>
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	699b      	ldr	r3, [r3, #24]
 8002ab8:	2b20      	cmp	r3, #32
 8002aba:	d004      	beq.n	8002ac6 <HAL_DMA_Init+0x11a>
 8002abc:	4b38      	ldr	r3, [pc, #224]	; (8002ba0 <HAL_DMA_Init+0x1f4>)
 8002abe:	21ab      	movs	r1, #171	; 0xab
 8002ac0:	0018      	movs	r0, r3
 8002ac2:	f7fd ff56 	bl	8000972 <assert_failed>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	69db      	ldr	r3, [r3, #28]
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d016      	beq.n	8002afc <HAL_DMA_Init+0x150>
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	69da      	ldr	r2, [r3, #28]
 8002ad2:	2380      	movs	r3, #128	; 0x80
 8002ad4:	015b      	lsls	r3, r3, #5
 8002ad6:	429a      	cmp	r2, r3
 8002ad8:	d010      	beq.n	8002afc <HAL_DMA_Init+0x150>
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	69da      	ldr	r2, [r3, #28]
 8002ade:	2380      	movs	r3, #128	; 0x80
 8002ae0:	019b      	lsls	r3, r3, #6
 8002ae2:	429a      	cmp	r2, r3
 8002ae4:	d00a      	beq.n	8002afc <HAL_DMA_Init+0x150>
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	69da      	ldr	r2, [r3, #28]
 8002aea:	23c0      	movs	r3, #192	; 0xc0
 8002aec:	019b      	lsls	r3, r3, #6
 8002aee:	429a      	cmp	r2, r3
 8002af0:	d004      	beq.n	8002afc <HAL_DMA_Init+0x150>
 8002af2:	4b2b      	ldr	r3, [pc, #172]	; (8002ba0 <HAL_DMA_Init+0x1f4>)
 8002af4:	21ac      	movs	r1, #172	; 0xac
 8002af6:	0018      	movs	r0, r3
 8002af8:	f7fd ff3b 	bl	8000972 <assert_failed>
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	2221      	movs	r2, #33	; 0x21
 8002b00:	2102      	movs	r1, #2
 8002b02:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	4a25      	ldr	r2, [pc, #148]	; (8002ba4 <HAL_DMA_Init+0x1f8>)
 8002b10:	4013      	ands	r3, r2
 8002b12:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8002b1c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	68db      	ldr	r3, [r3, #12]
 8002b22:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002b28:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	695b      	ldr	r3, [r3, #20]
 8002b2e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002b34:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	69db      	ldr	r3, [r3, #28]
 8002b3a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002b3c:	68fa      	ldr	r2, [r7, #12]
 8002b3e:	4313      	orrs	r3, r2
 8002b40:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	68fa      	ldr	r2, [r7, #12]
 8002b48:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	0018      	movs	r0, r3
 8002b4e:	f000 f971 	bl	8002e34 <DMA_CalcBaseAndBitshift>
  
  /* Clean callbacks */
  hdma->XferCpltCallback = NULL;
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	2200      	movs	r2, #0
 8002b56:	629a      	str	r2, [r3, #40]	; 0x28
  hdma->XferHalfCpltCallback = NULL;
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	2200      	movs	r2, #0
 8002b5c:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma->XferErrorCallback = NULL;
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	2200      	movs	r2, #0
 8002b62:	631a      	str	r2, [r3, #48]	; 0x30
  hdma->XferAbortCallback = NULL;
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	2200      	movs	r2, #0
 8002b68:	635a      	str	r2, [r3, #52]	; 0x34
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	2200      	movs	r2, #0
 8002b6e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	2221      	movs	r2, #33	; 0x21
 8002b74:	2101      	movs	r1, #1
 8002b76:	5499      	strb	r1, [r3, r2]
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	2220      	movs	r2, #32
 8002b7c:	2100      	movs	r1, #0
 8002b7e:	5499      	strb	r1, [r3, r2]
  
  return HAL_OK;
 8002b80:	2300      	movs	r3, #0
}  
 8002b82:	0018      	movs	r0, r3
 8002b84:	46bd      	mov	sp, r7
 8002b86:	b004      	add	sp, #16
 8002b88:	bd80      	pop	{r7, pc}
 8002b8a:	46c0      	nop			; (mov r8, r8)
 8002b8c:	40020008 	.word	0x40020008
 8002b90:	4002001c 	.word	0x4002001c
 8002b94:	40020030 	.word	0x40020030
 8002b98:	40020044 	.word	0x40020044
 8002b9c:	40020058 	.word	0x40020058
 8002ba0:	0800701c 	.word	0x0800701c
 8002ba4:	ffffc00f 	.word	0xffffc00f

08002ba8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002ba8:	b580      	push	{r7, lr}
 8002baa:	b086      	sub	sp, #24
 8002bac:	af00      	add	r7, sp, #0
 8002bae:	60f8      	str	r0, [r7, #12]
 8002bb0:	60b9      	str	r1, [r7, #8]
 8002bb2:	607a      	str	r2, [r7, #4]
 8002bb4:	603b      	str	r3, [r7, #0]
	HAL_StatusTypeDef status = HAL_OK;
 8002bb6:	2317      	movs	r3, #23
 8002bb8:	18fb      	adds	r3, r7, r3
 8002bba:	2200      	movs	r2, #0
 8002bbc:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 8002bbe:	683b      	ldr	r3, [r7, #0]
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d003      	beq.n	8002bcc <HAL_DMA_Start_IT+0x24>
 8002bc4:	683b      	ldr	r3, [r7, #0]
 8002bc6:	4a32      	ldr	r2, [pc, #200]	; (8002c90 <HAL_DMA_Start_IT+0xe8>)
 8002bc8:	4293      	cmp	r3, r2
 8002bca:	d906      	bls.n	8002bda <HAL_DMA_Start_IT+0x32>
 8002bcc:	23af      	movs	r3, #175	; 0xaf
 8002bce:	005a      	lsls	r2, r3, #1
 8002bd0:	4b30      	ldr	r3, [pc, #192]	; (8002c94 <HAL_DMA_Start_IT+0xec>)
 8002bd2:	0011      	movs	r1, r2
 8002bd4:	0018      	movs	r0, r3
 8002bd6:	f7fd fecc 	bl	8000972 <assert_failed>
  
  /* Process locked */
  __HAL_LOCK(hdma);
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	2220      	movs	r2, #32
 8002bde:	5c9b      	ldrb	r3, [r3, r2]
 8002be0:	2b01      	cmp	r3, #1
 8002be2:	d101      	bne.n	8002be8 <HAL_DMA_Start_IT+0x40>
 8002be4:	2302      	movs	r3, #2
 8002be6:	e04f      	b.n	8002c88 <HAL_DMA_Start_IT+0xe0>
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	2220      	movs	r2, #32
 8002bec:	2101      	movs	r1, #1
 8002bee:	5499      	strb	r1, [r3, r2]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	2221      	movs	r2, #33	; 0x21
 8002bf4:	5c9b      	ldrb	r3, [r3, r2]
 8002bf6:	b2db      	uxtb	r3, r3
 8002bf8:	2b01      	cmp	r3, #1
 8002bfa:	d13a      	bne.n	8002c72 <HAL_DMA_Start_IT+0xca>
  {
  	/* Change DMA peripheral state */  
  	hdma->State = HAL_DMA_STATE_BUSY;
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	2221      	movs	r2, #33	; 0x21
 8002c00:	2102      	movs	r1, #2
 8002c02:	5499      	strb	r1, [r3, r2]
  	
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	2200      	movs	r2, #0
 8002c08:	639a      	str	r2, [r3, #56]	; 0x38
  	
  	/* Disable the peripheral */
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	681a      	ldr	r2, [r3, #0]
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	2101      	movs	r1, #1
 8002c16:	438a      	bics	r2, r1
 8002c18:	601a      	str	r2, [r3, #0]
  	
  	/* Configure the source, destination address and the data length */  
  	DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002c1a:	683b      	ldr	r3, [r7, #0]
 8002c1c:	687a      	ldr	r2, [r7, #4]
 8002c1e:	68b9      	ldr	r1, [r7, #8]
 8002c20:	68f8      	ldr	r0, [r7, #12]
 8002c22:	f000 f8db 	bl	8002ddc <DMA_SetConfig>
  	
  	/* Enable the transfer complete, & transfer error interrupts */
  	/* Half transfer interrupt is optional: enable it only if associated callback is available */
    if(NULL != hdma->XferHalfCpltCallback )
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d008      	beq.n	8002c40 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	681a      	ldr	r2, [r3, #0]
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	210e      	movs	r1, #14
 8002c3a:	430a      	orrs	r2, r1
 8002c3c:	601a      	str	r2, [r3, #0]
 8002c3e:	e00f      	b.n	8002c60 <HAL_DMA_Start_IT+0xb8>
    }
  	else
  	{
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	681a      	ldr	r2, [r3, #0]
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	210a      	movs	r1, #10
 8002c4c:	430a      	orrs	r2, r1
 8002c4e:	601a      	str	r2, [r3, #0]
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	681a      	ldr	r2, [r3, #0]
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	2104      	movs	r1, #4
 8002c5c:	438a      	bics	r2, r1
 8002c5e:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Enable the Peripheral */
  	hdma->Instance->CCR |= DMA_CCR_EN;
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	681a      	ldr	r2, [r3, #0]
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	2101      	movs	r1, #1
 8002c6c:	430a      	orrs	r2, r1
 8002c6e:	601a      	str	r2, [r3, #0]
 8002c70:	e007      	b.n	8002c82 <HAL_DMA_Start_IT+0xda>
  }
  else
  {
  	/* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	2220      	movs	r2, #32
 8002c76:	2100      	movs	r1, #0
 8002c78:	5499      	strb	r1, [r3, r2]
  
    /* Remain BUSY */
    status = HAL_BUSY;
 8002c7a:	2317      	movs	r3, #23
 8002c7c:	18fb      	adds	r3, r7, r3
 8002c7e:	2202      	movs	r2, #2
 8002c80:	701a      	strb	r2, [r3, #0]
  }     
  
  return status;    
 8002c82:	2317      	movs	r3, #23
 8002c84:	18fb      	adds	r3, r7, r3
 8002c86:	781b      	ldrb	r3, [r3, #0]
} 
 8002c88:	0018      	movs	r0, r3
 8002c8a:	46bd      	mov	sp, r7
 8002c8c:	b006      	add	sp, #24
 8002c8e:	bd80      	pop	{r7, pc}
 8002c90:	0000ffff 	.word	0x0000ffff
 8002c94:	0800701c 	.word	0x0800701c

08002c98 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002c98:	b580      	push	{r7, lr}
 8002c9a:	b084      	sub	sp, #16
 8002c9c:	af00      	add	r7, sp, #0
 8002c9e:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cb4:	2204      	movs	r2, #4
 8002cb6:	409a      	lsls	r2, r3
 8002cb8:	0013      	movs	r3, r2
 8002cba:	68fa      	ldr	r2, [r7, #12]
 8002cbc:	4013      	ands	r3, r2
 8002cbe:	d024      	beq.n	8002d0a <HAL_DMA_IRQHandler+0x72>
 8002cc0:	68bb      	ldr	r3, [r7, #8]
 8002cc2:	2204      	movs	r2, #4
 8002cc4:	4013      	ands	r3, r2
 8002cc6:	d020      	beq.n	8002d0a <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	2220      	movs	r2, #32
 8002cd0:	4013      	ands	r3, r2
 8002cd2:	d107      	bne.n	8002ce4 <HAL_DMA_IRQHandler+0x4c>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	681a      	ldr	r2, [r3, #0]
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	2104      	movs	r1, #4
 8002ce0:	438a      	bics	r2, r1
 8002ce2:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002cec:	2104      	movs	r1, #4
 8002cee:	4091      	lsls	r1, r2
 8002cf0:	000a      	movs	r2, r1
 8002cf2:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d100      	bne.n	8002cfe <HAL_DMA_IRQHandler+0x66>
 8002cfc:	e06a      	b.n	8002dd4 <HAL_DMA_IRQHandler+0x13c>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d02:	687a      	ldr	r2, [r7, #4]
 8002d04:	0010      	movs	r0, r2
 8002d06:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 8002d08:	e064      	b.n	8002dd4 <HAL_DMA_IRQHandler+0x13c>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d0e:	2202      	movs	r2, #2
 8002d10:	409a      	lsls	r2, r3
 8002d12:	0013      	movs	r3, r2
 8002d14:	68fa      	ldr	r2, [r7, #12]
 8002d16:	4013      	ands	r3, r2
 8002d18:	d02b      	beq.n	8002d72 <HAL_DMA_IRQHandler+0xda>
 8002d1a:	68bb      	ldr	r3, [r7, #8]
 8002d1c:	2202      	movs	r2, #2
 8002d1e:	4013      	ands	r3, r2
 8002d20:	d027      	beq.n	8002d72 <HAL_DMA_IRQHandler+0xda>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	2220      	movs	r2, #32
 8002d2a:	4013      	ands	r3, r2
 8002d2c:	d10b      	bne.n	8002d46 <HAL_DMA_IRQHandler+0xae>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	681a      	ldr	r2, [r3, #0]
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	210a      	movs	r1, #10
 8002d3a:	438a      	bics	r2, r1
 8002d3c:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	2221      	movs	r2, #33	; 0x21
 8002d42:	2101      	movs	r1, #1
 8002d44:	5499      	strb	r1, [r3, r2]
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d4e:	2102      	movs	r1, #2
 8002d50:	4091      	lsls	r1, r2
 8002d52:	000a      	movs	r2, r1
 8002d54:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	2220      	movs	r2, #32
 8002d5a:	2100      	movs	r1, #0
 8002d5c:	5499      	strb	r1, [r3, r2]
  	
  	if(hdma->XferCpltCallback != NULL)
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d036      	beq.n	8002dd4 <HAL_DMA_IRQHandler+0x13c>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d6a:	687a      	ldr	r2, [r7, #4]
 8002d6c:	0010      	movs	r0, r2
 8002d6e:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 8002d70:	e030      	b.n	8002dd4 <HAL_DMA_IRQHandler+0x13c>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d76:	2208      	movs	r2, #8
 8002d78:	409a      	lsls	r2, r3
 8002d7a:	0013      	movs	r3, r2
 8002d7c:	68fa      	ldr	r2, [r7, #12]
 8002d7e:	4013      	ands	r3, r2
 8002d80:	d028      	beq.n	8002dd4 <HAL_DMA_IRQHandler+0x13c>
 8002d82:	68bb      	ldr	r3, [r7, #8]
 8002d84:	2208      	movs	r2, #8
 8002d86:	4013      	ands	r3, r2
 8002d88:	d024      	beq.n	8002dd4 <HAL_DMA_IRQHandler+0x13c>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	681a      	ldr	r2, [r3, #0]
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	210e      	movs	r1, #14
 8002d96:	438a      	bics	r2, r1
 8002d98:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002da2:	2101      	movs	r1, #1
 8002da4:	4091      	lsls	r1, r2
 8002da6:	000a      	movs	r2, r1
 8002da8:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	2201      	movs	r2, #1
 8002dae:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	2221      	movs	r2, #33	; 0x21
 8002db4:	2101      	movs	r1, #1
 8002db6:	5499      	strb	r1, [r3, r2]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	2220      	movs	r2, #32
 8002dbc:	2100      	movs	r1, #0
 8002dbe:	5499      	strb	r1, [r3, r2]
    
    if(hdma->XferErrorCallback != NULL)
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d005      	beq.n	8002dd4 <HAL_DMA_IRQHandler+0x13c>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dcc:	687a      	ldr	r2, [r7, #4]
 8002dce:	0010      	movs	r0, r2
 8002dd0:	4798      	blx	r3
    }
   }
}  
 8002dd2:	e7ff      	b.n	8002dd4 <HAL_DMA_IRQHandler+0x13c>
 8002dd4:	46c0      	nop			; (mov r8, r8)
 8002dd6:	46bd      	mov	sp, r7
 8002dd8:	b004      	add	sp, #16
 8002dda:	bd80      	pop	{r7, pc}

08002ddc <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002ddc:	b580      	push	{r7, lr}
 8002dde:	b084      	sub	sp, #16
 8002de0:	af00      	add	r7, sp, #0
 8002de2:	60f8      	str	r0, [r7, #12]
 8002de4:	60b9      	str	r1, [r7, #8]
 8002de6:	607a      	str	r2, [r7, #4]
 8002de8:	603b      	str	r3, [r7, #0]
	/* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002df2:	2101      	movs	r1, #1
 8002df4:	4091      	lsls	r1, r2
 8002df6:	000a      	movs	r2, r1
 8002df8:	605a      	str	r2, [r3, #4]
  
  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	683a      	ldr	r2, [r7, #0]
 8002e00:	605a      	str	r2, [r3, #4]
  
  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	685b      	ldr	r3, [r3, #4]
 8002e06:	2b10      	cmp	r3, #16
 8002e08:	d108      	bne.n	8002e1c <DMA_SetConfig+0x40>
  {   
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	687a      	ldr	r2, [r7, #4]
 8002e10:	609a      	str	r2, [r3, #8]
    
    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	68ba      	ldr	r2, [r7, #8]
 8002e18:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;
    
    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002e1a:	e007      	b.n	8002e2c <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	68ba      	ldr	r2, [r7, #8]
 8002e22:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	687a      	ldr	r2, [r7, #4]
 8002e2a:	60da      	str	r2, [r3, #12]
}
 8002e2c:	46c0      	nop			; (mov r8, r8)
 8002e2e:	46bd      	mov	sp, r7
 8002e30:	b004      	add	sp, #16
 8002e32:	bd80      	pop	{r7, pc}

08002e34 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002e34:	b580      	push	{r7, lr}
 8002e36:	b082      	sub	sp, #8
 8002e38:	af00      	add	r7, sp, #0
 8002e3a:	6078      	str	r0, [r7, #4]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	4a08      	ldr	r2, [pc, #32]	; (8002e64 <DMA_CalcBaseAndBitshift+0x30>)
 8002e42:	4694      	mov	ip, r2
 8002e44:	4463      	add	r3, ip
 8002e46:	2114      	movs	r1, #20
 8002e48:	0018      	movs	r0, r3
 8002e4a:	f7fd f95d 	bl	8000108 <__udivsi3>
 8002e4e:	0003      	movs	r3, r0
 8002e50:	009a      	lsls	r2, r3, #2
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	4a03      	ldr	r2, [pc, #12]	; (8002e68 <DMA_CalcBaseAndBitshift+0x34>)
 8002e5a:	63da      	str	r2, [r3, #60]	; 0x3c
#endif
}
 8002e5c:	46c0      	nop			; (mov r8, r8)
 8002e5e:	46bd      	mov	sp, r7
 8002e60:	b002      	add	sp, #8
 8002e62:	bd80      	pop	{r7, pc}
 8002e64:	bffdfff8 	.word	0xbffdfff8
 8002e68:	40020000 	.word	0x40020000

08002e6c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
 8002e6c:	b580      	push	{r7, lr}
 8002e6e:	b086      	sub	sp, #24
 8002e70:	af00      	add	r7, sp, #0
 8002e72:	6078      	str	r0, [r7, #4]
 8002e74:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002e76:	2300      	movs	r3, #0
 8002e78:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002e7a:	2300      	movs	r3, #0
 8002e7c:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 8002e7e:	2300      	movs	r3, #0
 8002e80:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 8002e82:	687a      	ldr	r2, [r7, #4]
 8002e84:	2390      	movs	r3, #144	; 0x90
 8002e86:	05db      	lsls	r3, r3, #23
 8002e88:	429a      	cmp	r2, r3
 8002e8a:	d014      	beq.n	8002eb6 <HAL_GPIO_Init+0x4a>
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	4ac2      	ldr	r2, [pc, #776]	; (8003198 <HAL_GPIO_Init+0x32c>)
 8002e90:	4293      	cmp	r3, r2
 8002e92:	d010      	beq.n	8002eb6 <HAL_GPIO_Init+0x4a>
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	4ac1      	ldr	r2, [pc, #772]	; (800319c <HAL_GPIO_Init+0x330>)
 8002e98:	4293      	cmp	r3, r2
 8002e9a:	d00c      	beq.n	8002eb6 <HAL_GPIO_Init+0x4a>
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	4ac0      	ldr	r2, [pc, #768]	; (80031a0 <HAL_GPIO_Init+0x334>)
 8002ea0:	4293      	cmp	r3, r2
 8002ea2:	d008      	beq.n	8002eb6 <HAL_GPIO_Init+0x4a>
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	4abf      	ldr	r2, [pc, #764]	; (80031a4 <HAL_GPIO_Init+0x338>)
 8002ea8:	4293      	cmp	r3, r2
 8002eaa:	d004      	beq.n	8002eb6 <HAL_GPIO_Init+0x4a>
 8002eac:	4bbe      	ldr	r3, [pc, #760]	; (80031a8 <HAL_GPIO_Init+0x33c>)
 8002eae:	21c1      	movs	r1, #193	; 0xc1
 8002eb0:	0018      	movs	r0, r3
 8002eb2:	f7fd fd5e 	bl	8000972 <assert_failed>
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
 8002eb6:	683b      	ldr	r3, [r7, #0]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	041b      	lsls	r3, r3, #16
 8002ebc:	0c1b      	lsrs	r3, r3, #16
 8002ebe:	d004      	beq.n	8002eca <HAL_GPIO_Init+0x5e>
 8002ec0:	683b      	ldr	r3, [r7, #0]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	0c1b      	lsrs	r3, r3, #16
 8002ec6:	041b      	lsls	r3, r3, #16
 8002ec8:	d004      	beq.n	8002ed4 <HAL_GPIO_Init+0x68>
 8002eca:	4bb7      	ldr	r3, [pc, #732]	; (80031a8 <HAL_GPIO_Init+0x33c>)
 8002ecc:	21c2      	movs	r1, #194	; 0xc2
 8002ece:	0018      	movs	r0, r3
 8002ed0:	f7fd fd4f 	bl	8000972 <assert_failed>
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
 8002ed4:	683b      	ldr	r3, [r7, #0]
 8002ed6:	685b      	ldr	r3, [r3, #4]
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d036      	beq.n	8002f4a <HAL_GPIO_Init+0xde>
 8002edc:	683b      	ldr	r3, [r7, #0]
 8002ede:	685b      	ldr	r3, [r3, #4]
 8002ee0:	2b01      	cmp	r3, #1
 8002ee2:	d032      	beq.n	8002f4a <HAL_GPIO_Init+0xde>
 8002ee4:	683b      	ldr	r3, [r7, #0]
 8002ee6:	685b      	ldr	r3, [r3, #4]
 8002ee8:	2b11      	cmp	r3, #17
 8002eea:	d02e      	beq.n	8002f4a <HAL_GPIO_Init+0xde>
 8002eec:	683b      	ldr	r3, [r7, #0]
 8002eee:	685b      	ldr	r3, [r3, #4]
 8002ef0:	2b02      	cmp	r3, #2
 8002ef2:	d02a      	beq.n	8002f4a <HAL_GPIO_Init+0xde>
 8002ef4:	683b      	ldr	r3, [r7, #0]
 8002ef6:	685b      	ldr	r3, [r3, #4]
 8002ef8:	2b12      	cmp	r3, #18
 8002efa:	d026      	beq.n	8002f4a <HAL_GPIO_Init+0xde>
 8002efc:	683b      	ldr	r3, [r7, #0]
 8002efe:	685b      	ldr	r3, [r3, #4]
 8002f00:	4aaa      	ldr	r2, [pc, #680]	; (80031ac <HAL_GPIO_Init+0x340>)
 8002f02:	4293      	cmp	r3, r2
 8002f04:	d021      	beq.n	8002f4a <HAL_GPIO_Init+0xde>
 8002f06:	683b      	ldr	r3, [r7, #0]
 8002f08:	685b      	ldr	r3, [r3, #4]
 8002f0a:	4aa9      	ldr	r2, [pc, #676]	; (80031b0 <HAL_GPIO_Init+0x344>)
 8002f0c:	4293      	cmp	r3, r2
 8002f0e:	d01c      	beq.n	8002f4a <HAL_GPIO_Init+0xde>
 8002f10:	683b      	ldr	r3, [r7, #0]
 8002f12:	685b      	ldr	r3, [r3, #4]
 8002f14:	4aa7      	ldr	r2, [pc, #668]	; (80031b4 <HAL_GPIO_Init+0x348>)
 8002f16:	4293      	cmp	r3, r2
 8002f18:	d017      	beq.n	8002f4a <HAL_GPIO_Init+0xde>
 8002f1a:	683b      	ldr	r3, [r7, #0]
 8002f1c:	685b      	ldr	r3, [r3, #4]
 8002f1e:	4aa6      	ldr	r2, [pc, #664]	; (80031b8 <HAL_GPIO_Init+0x34c>)
 8002f20:	4293      	cmp	r3, r2
 8002f22:	d012      	beq.n	8002f4a <HAL_GPIO_Init+0xde>
 8002f24:	683b      	ldr	r3, [r7, #0]
 8002f26:	685b      	ldr	r3, [r3, #4]
 8002f28:	4aa4      	ldr	r2, [pc, #656]	; (80031bc <HAL_GPIO_Init+0x350>)
 8002f2a:	4293      	cmp	r3, r2
 8002f2c:	d00d      	beq.n	8002f4a <HAL_GPIO_Init+0xde>
 8002f2e:	683b      	ldr	r3, [r7, #0]
 8002f30:	685b      	ldr	r3, [r3, #4]
 8002f32:	4aa3      	ldr	r2, [pc, #652]	; (80031c0 <HAL_GPIO_Init+0x354>)
 8002f34:	4293      	cmp	r3, r2
 8002f36:	d008      	beq.n	8002f4a <HAL_GPIO_Init+0xde>
 8002f38:	683b      	ldr	r3, [r7, #0]
 8002f3a:	685b      	ldr	r3, [r3, #4]
 8002f3c:	2b03      	cmp	r3, #3
 8002f3e:	d004      	beq.n	8002f4a <HAL_GPIO_Init+0xde>
 8002f40:	4b99      	ldr	r3, [pc, #612]	; (80031a8 <HAL_GPIO_Init+0x33c>)
 8002f42:	21c3      	movs	r1, #195	; 0xc3
 8002f44:	0018      	movs	r0, r3
 8002f46:	f7fd fd14 	bl	8000972 <assert_failed>
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull)); 
 8002f4a:	683b      	ldr	r3, [r7, #0]
 8002f4c:	689b      	ldr	r3, [r3, #8]
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d100      	bne.n	8002f54 <HAL_GPIO_Init+0xe8>
 8002f52:	e1a2      	b.n	800329a <HAL_GPIO_Init+0x42e>
 8002f54:	683b      	ldr	r3, [r7, #0]
 8002f56:	689b      	ldr	r3, [r3, #8]
 8002f58:	2b01      	cmp	r3, #1
 8002f5a:	d100      	bne.n	8002f5e <HAL_GPIO_Init+0xf2>
 8002f5c:	e19d      	b.n	800329a <HAL_GPIO_Init+0x42e>
 8002f5e:	683b      	ldr	r3, [r7, #0]
 8002f60:	689b      	ldr	r3, [r3, #8]
 8002f62:	2b02      	cmp	r3, #2
 8002f64:	d100      	bne.n	8002f68 <HAL_GPIO_Init+0xfc>
 8002f66:	e198      	b.n	800329a <HAL_GPIO_Init+0x42e>
 8002f68:	4b8f      	ldr	r3, [pc, #572]	; (80031a8 <HAL_GPIO_Init+0x33c>)
 8002f6a:	21c4      	movs	r1, #196	; 0xc4
 8002f6c:	0018      	movs	r0, r3
 8002f6e:	f7fd fd00 	bl	8000972 <assert_failed>

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != RESET)
 8002f72:	e192      	b.n	800329a <HAL_GPIO_Init+0x42e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8002f74:	683b      	ldr	r3, [r7, #0]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	2101      	movs	r1, #1
 8002f7a:	697a      	ldr	r2, [r7, #20]
 8002f7c:	4091      	lsls	r1, r2
 8002f7e:	000a      	movs	r2, r1
 8002f80:	4013      	ands	r3, r2
 8002f82:	60fb      	str	r3, [r7, #12]
    
    if(iocurrent)
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d100      	bne.n	8002f8c <HAL_GPIO_Init+0x120>
 8002f8a:	e183      	b.n	8003294 <HAL_GPIO_Init+0x428>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD)) 
 8002f8c:	683b      	ldr	r3, [r7, #0]
 8002f8e:	685b      	ldr	r3, [r3, #4]
 8002f90:	2b02      	cmp	r3, #2
 8002f92:	d003      	beq.n	8002f9c <HAL_GPIO_Init+0x130>
 8002f94:	683b      	ldr	r3, [r7, #0]
 8002f96:	685b      	ldr	r3, [r3, #4]
 8002f98:	2b12      	cmp	r3, #18
 8002f9a:	d13a      	bne.n	8003012 <HAL_GPIO_Init+0x1a6>
      {
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
 8002f9c:	687a      	ldr	r2, [r7, #4]
 8002f9e:	2390      	movs	r3, #144	; 0x90
 8002fa0:	05db      	lsls	r3, r3, #23
 8002fa2:	429a      	cmp	r2, r3
 8002fa4:	d008      	beq.n	8002fb8 <HAL_GPIO_Init+0x14c>
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	4a7b      	ldr	r2, [pc, #492]	; (8003198 <HAL_GPIO_Init+0x32c>)
 8002faa:	4293      	cmp	r3, r2
 8002fac:	d004      	beq.n	8002fb8 <HAL_GPIO_Init+0x14c>
 8002fae:	4b7e      	ldr	r3, [pc, #504]	; (80031a8 <HAL_GPIO_Init+0x33c>)
 8002fb0:	21d3      	movs	r1, #211	; 0xd3
 8002fb2:	0018      	movs	r0, r3
 8002fb4:	f7fd fcdd 	bl	8000972 <assert_failed>
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
 8002fb8:	683b      	ldr	r3, [r7, #0]
 8002fba:	691b      	ldr	r3, [r3, #16]
 8002fbc:	2b07      	cmp	r3, #7
 8002fbe:	d904      	bls.n	8002fca <HAL_GPIO_Init+0x15e>
 8002fc0:	4b79      	ldr	r3, [pc, #484]	; (80031a8 <HAL_GPIO_Init+0x33c>)
 8002fc2:	21d4      	movs	r1, #212	; 0xd4
 8002fc4:	0018      	movs	r0, r3
 8002fc6:	f7fd fcd4 	bl	8000972 <assert_failed>
        
        /* Configure Alternate function mapped with the current IO */ 
        temp = GPIOx->AFR[position >> 3];
 8002fca:	697b      	ldr	r3, [r7, #20]
 8002fcc:	08da      	lsrs	r2, r3, #3
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	3208      	adds	r2, #8
 8002fd2:	0092      	lsls	r2, r2, #2
 8002fd4:	58d3      	ldr	r3, [r2, r3]
 8002fd6:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;      
 8002fd8:	697b      	ldr	r3, [r7, #20]
 8002fda:	2207      	movs	r2, #7
 8002fdc:	4013      	ands	r3, r2
 8002fde:	009b      	lsls	r3, r3, #2
 8002fe0:	220f      	movs	r2, #15
 8002fe2:	409a      	lsls	r2, r3
 8002fe4:	0013      	movs	r3, r2
 8002fe6:	43da      	mvns	r2, r3
 8002fe8:	693b      	ldr	r3, [r7, #16]
 8002fea:	4013      	ands	r3, r2
 8002fec:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));       
 8002fee:	683b      	ldr	r3, [r7, #0]
 8002ff0:	691a      	ldr	r2, [r3, #16]
 8002ff2:	697b      	ldr	r3, [r7, #20]
 8002ff4:	2107      	movs	r1, #7
 8002ff6:	400b      	ands	r3, r1
 8002ff8:	009b      	lsls	r3, r3, #2
 8002ffa:	409a      	lsls	r2, r3
 8002ffc:	0013      	movs	r3, r2
 8002ffe:	693a      	ldr	r2, [r7, #16]
 8003000:	4313      	orrs	r3, r2
 8003002:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8003004:	697b      	ldr	r3, [r7, #20]
 8003006:	08da      	lsrs	r2, r3, #3
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	3208      	adds	r2, #8
 800300c:	0092      	lsls	r2, r2, #2
 800300e:	6939      	ldr	r1, [r7, #16]
 8003010:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2U));   
 8003018:	697b      	ldr	r3, [r7, #20]
 800301a:	005b      	lsls	r3, r3, #1
 800301c:	2203      	movs	r2, #3
 800301e:	409a      	lsls	r2, r3
 8003020:	0013      	movs	r3, r2
 8003022:	43da      	mvns	r2, r3
 8003024:	693b      	ldr	r3, [r7, #16]
 8003026:	4013      	ands	r3, r2
 8003028:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800302a:	683b      	ldr	r3, [r7, #0]
 800302c:	685b      	ldr	r3, [r3, #4]
 800302e:	2203      	movs	r2, #3
 8003030:	401a      	ands	r2, r3
 8003032:	697b      	ldr	r3, [r7, #20]
 8003034:	005b      	lsls	r3, r3, #1
 8003036:	409a      	lsls	r2, r3
 8003038:	0013      	movs	r3, r2
 800303a:	693a      	ldr	r2, [r7, #16]
 800303c:	4313      	orrs	r3, r2
 800303e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	693a      	ldr	r2, [r7, #16]
 8003044:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003046:	683b      	ldr	r3, [r7, #0]
 8003048:	685b      	ldr	r3, [r3, #4]
 800304a:	2b01      	cmp	r3, #1
 800304c:	d00b      	beq.n	8003066 <HAL_GPIO_Init+0x1fa>
 800304e:	683b      	ldr	r3, [r7, #0]
 8003050:	685b      	ldr	r3, [r3, #4]
 8003052:	2b02      	cmp	r3, #2
 8003054:	d007      	beq.n	8003066 <HAL_GPIO_Init+0x1fa>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003056:	683b      	ldr	r3, [r7, #0]
 8003058:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800305a:	2b11      	cmp	r3, #17
 800305c:	d003      	beq.n	8003066 <HAL_GPIO_Init+0x1fa>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800305e:	683b      	ldr	r3, [r7, #0]
 8003060:	685b      	ldr	r3, [r3, #4]
 8003062:	2b12      	cmp	r3, #18
 8003064:	d141      	bne.n	80030ea <HAL_GPIO_Init+0x27e>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 8003066:	683b      	ldr	r3, [r7, #0]
 8003068:	68db      	ldr	r3, [r3, #12]
 800306a:	2b00      	cmp	r3, #0
 800306c:	d00c      	beq.n	8003088 <HAL_GPIO_Init+0x21c>
 800306e:	683b      	ldr	r3, [r7, #0]
 8003070:	68db      	ldr	r3, [r3, #12]
 8003072:	2b01      	cmp	r3, #1
 8003074:	d008      	beq.n	8003088 <HAL_GPIO_Init+0x21c>
 8003076:	683b      	ldr	r3, [r7, #0]
 8003078:	68db      	ldr	r3, [r3, #12]
 800307a:	2b03      	cmp	r3, #3
 800307c:	d004      	beq.n	8003088 <HAL_GPIO_Init+0x21c>
 800307e:	4b4a      	ldr	r3, [pc, #296]	; (80031a8 <HAL_GPIO_Init+0x33c>)
 8003080:	21e8      	movs	r1, #232	; 0xe8
 8003082:	0018      	movs	r0, r3
 8003084:	f7fd fc75 	bl	8000972 <assert_failed>
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	689b      	ldr	r3, [r3, #8]
 800308c:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800308e:	697b      	ldr	r3, [r7, #20]
 8003090:	005b      	lsls	r3, r3, #1
 8003092:	2203      	movs	r2, #3
 8003094:	409a      	lsls	r2, r3
 8003096:	0013      	movs	r3, r2
 8003098:	43da      	mvns	r2, r3
 800309a:	693b      	ldr	r3, [r7, #16]
 800309c:	4013      	ands	r3, r2
 800309e:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, GPIO_Init->Speed << (position * 2U));
 80030a0:	683b      	ldr	r3, [r7, #0]
 80030a2:	68da      	ldr	r2, [r3, #12]
 80030a4:	697b      	ldr	r3, [r7, #20]
 80030a6:	005b      	lsls	r3, r3, #1
 80030a8:	409a      	lsls	r2, r3
 80030aa:	0013      	movs	r3, r2
 80030ac:	693a      	ldr	r2, [r7, #16]
 80030ae:	4313      	orrs	r3, r2
 80030b0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	693a      	ldr	r2, [r7, #16]
 80030b6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	685b      	ldr	r3, [r3, #4]
 80030bc:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 80030be:	2201      	movs	r2, #1
 80030c0:	697b      	ldr	r3, [r7, #20]
 80030c2:	409a      	lsls	r2, r3
 80030c4:	0013      	movs	r3, r2
 80030c6:	43da      	mvns	r2, r3
 80030c8:	693b      	ldr	r3, [r7, #16]
 80030ca:	4013      	ands	r3, r2
 80030cc:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, ((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80030ce:	683b      	ldr	r3, [r7, #0]
 80030d0:	685b      	ldr	r3, [r3, #4]
 80030d2:	091b      	lsrs	r3, r3, #4
 80030d4:	2201      	movs	r2, #1
 80030d6:	401a      	ands	r2, r3
 80030d8:	697b      	ldr	r3, [r7, #20]
 80030da:	409a      	lsls	r2, r3
 80030dc:	0013      	movs	r3, r2
 80030de:	693a      	ldr	r2, [r7, #16]
 80030e0:	4313      	orrs	r3, r2
 80030e2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	693a      	ldr	r2, [r7, #16]
 80030e8:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	68db      	ldr	r3, [r3, #12]
 80030ee:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2U));
 80030f0:	697b      	ldr	r3, [r7, #20]
 80030f2:	005b      	lsls	r3, r3, #1
 80030f4:	2203      	movs	r2, #3
 80030f6:	409a      	lsls	r2, r3
 80030f8:	0013      	movs	r3, r2
 80030fa:	43da      	mvns	r2, r3
 80030fc:	693b      	ldr	r3, [r7, #16]
 80030fe:	4013      	ands	r3, r2
 8003100:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Pull) << (position * 2U));
 8003102:	683b      	ldr	r3, [r7, #0]
 8003104:	689a      	ldr	r2, [r3, #8]
 8003106:	697b      	ldr	r3, [r7, #20]
 8003108:	005b      	lsls	r3, r3, #1
 800310a:	409a      	lsls	r2, r3
 800310c:	0013      	movs	r3, r2
 800310e:	693a      	ldr	r2, [r7, #16]
 8003110:	4313      	orrs	r3, r2
 8003112:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	693a      	ldr	r2, [r7, #16]
 8003118:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 800311a:	683b      	ldr	r3, [r7, #0]
 800311c:	685a      	ldr	r2, [r3, #4]
 800311e:	2380      	movs	r3, #128	; 0x80
 8003120:	055b      	lsls	r3, r3, #21
 8003122:	4013      	ands	r3, r2
 8003124:	d100      	bne.n	8003128 <HAL_GPIO_Init+0x2bc>
 8003126:	e0b5      	b.n	8003294 <HAL_GPIO_Init+0x428>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003128:	4b26      	ldr	r3, [pc, #152]	; (80031c4 <HAL_GPIO_Init+0x358>)
 800312a:	699a      	ldr	r2, [r3, #24]
 800312c:	4b25      	ldr	r3, [pc, #148]	; (80031c4 <HAL_GPIO_Init+0x358>)
 800312e:	2101      	movs	r1, #1
 8003130:	430a      	orrs	r2, r1
 8003132:	619a      	str	r2, [r3, #24]
 8003134:	4b23      	ldr	r3, [pc, #140]	; (80031c4 <HAL_GPIO_Init+0x358>)
 8003136:	699b      	ldr	r3, [r3, #24]
 8003138:	2201      	movs	r2, #1
 800313a:	4013      	ands	r3, r2
 800313c:	60bb      	str	r3, [r7, #8]
 800313e:	68bb      	ldr	r3, [r7, #8]
  
        temp = SYSCFG->EXTICR[position >> 2];
 8003140:	4a21      	ldr	r2, [pc, #132]	; (80031c8 <HAL_GPIO_Init+0x35c>)
 8003142:	697b      	ldr	r3, [r7, #20]
 8003144:	089b      	lsrs	r3, r3, #2
 8003146:	3302      	adds	r3, #2
 8003148:	009b      	lsls	r3, r3, #2
 800314a:	589b      	ldr	r3, [r3, r2]
 800314c:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 800314e:	697b      	ldr	r3, [r7, #20]
 8003150:	2203      	movs	r2, #3
 8003152:	4013      	ands	r3, r2
 8003154:	009b      	lsls	r3, r3, #2
 8003156:	220f      	movs	r2, #15
 8003158:	409a      	lsls	r2, r3
 800315a:	0013      	movs	r3, r2
 800315c:	43da      	mvns	r2, r3
 800315e:	693b      	ldr	r3, [r7, #16]
 8003160:	4013      	ands	r3, r2
 8003162:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003164:	687a      	ldr	r2, [r7, #4]
 8003166:	2390      	movs	r3, #144	; 0x90
 8003168:	05db      	lsls	r3, r3, #23
 800316a:	429a      	cmp	r2, r3
 800316c:	d02e      	beq.n	80031cc <HAL_GPIO_Init+0x360>
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	4a09      	ldr	r2, [pc, #36]	; (8003198 <HAL_GPIO_Init+0x32c>)
 8003172:	4293      	cmp	r3, r2
 8003174:	d00d      	beq.n	8003192 <HAL_GPIO_Init+0x326>
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	4a08      	ldr	r2, [pc, #32]	; (800319c <HAL_GPIO_Init+0x330>)
 800317a:	4293      	cmp	r3, r2
 800317c:	d007      	beq.n	800318e <HAL_GPIO_Init+0x322>
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	4a07      	ldr	r2, [pc, #28]	; (80031a0 <HAL_GPIO_Init+0x334>)
 8003182:	4293      	cmp	r3, r2
 8003184:	d101      	bne.n	800318a <HAL_GPIO_Init+0x31e>
 8003186:	2303      	movs	r3, #3
 8003188:	e021      	b.n	80031ce <HAL_GPIO_Init+0x362>
 800318a:	2305      	movs	r3, #5
 800318c:	e01f      	b.n	80031ce <HAL_GPIO_Init+0x362>
 800318e:	2302      	movs	r3, #2
 8003190:	e01d      	b.n	80031ce <HAL_GPIO_Init+0x362>
 8003192:	2301      	movs	r3, #1
 8003194:	e01b      	b.n	80031ce <HAL_GPIO_Init+0x362>
 8003196:	46c0      	nop			; (mov r8, r8)
 8003198:	48000400 	.word	0x48000400
 800319c:	48000800 	.word	0x48000800
 80031a0:	48000c00 	.word	0x48000c00
 80031a4:	48001400 	.word	0x48001400
 80031a8:	08007054 	.word	0x08007054
 80031ac:	10110000 	.word	0x10110000
 80031b0:	10210000 	.word	0x10210000
 80031b4:	10310000 	.word	0x10310000
 80031b8:	10120000 	.word	0x10120000
 80031bc:	10220000 	.word	0x10220000
 80031c0:	10320000 	.word	0x10320000
 80031c4:	40021000 	.word	0x40021000
 80031c8:	40010000 	.word	0x40010000
 80031cc:	2300      	movs	r3, #0
 80031ce:	697a      	ldr	r2, [r7, #20]
 80031d0:	2103      	movs	r1, #3
 80031d2:	400a      	ands	r2, r1
 80031d4:	0092      	lsls	r2, r2, #2
 80031d6:	4093      	lsls	r3, r2
 80031d8:	693a      	ldr	r2, [r7, #16]
 80031da:	4313      	orrs	r3, r2
 80031dc:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2] = temp;
 80031de:	4934      	ldr	r1, [pc, #208]	; (80032b0 <HAL_GPIO_Init+0x444>)
 80031e0:	697b      	ldr	r3, [r7, #20]
 80031e2:	089b      	lsrs	r3, r3, #2
 80031e4:	3302      	adds	r3, #2
 80031e6:	009b      	lsls	r3, r3, #2
 80031e8:	693a      	ldr	r2, [r7, #16]
 80031ea:	505a      	str	r2, [r3, r1]
                  
        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80031ec:	4b31      	ldr	r3, [pc, #196]	; (80032b4 <HAL_GPIO_Init+0x448>)
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	43da      	mvns	r2, r3
 80031f6:	693b      	ldr	r3, [r7, #16]
 80031f8:	4013      	ands	r3, r2
 80031fa:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80031fc:	683b      	ldr	r3, [r7, #0]
 80031fe:	685a      	ldr	r2, [r3, #4]
 8003200:	2380      	movs	r3, #128	; 0x80
 8003202:	025b      	lsls	r3, r3, #9
 8003204:	4013      	ands	r3, r2
 8003206:	d003      	beq.n	8003210 <HAL_GPIO_Init+0x3a4>
        {
          SET_BIT(temp, iocurrent); 
 8003208:	693a      	ldr	r2, [r7, #16]
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	4313      	orrs	r3, r2
 800320e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8003210:	4b28      	ldr	r3, [pc, #160]	; (80032b4 <HAL_GPIO_Init+0x448>)
 8003212:	693a      	ldr	r2, [r7, #16]
 8003214:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8003216:	4b27      	ldr	r3, [pc, #156]	; (80032b4 <HAL_GPIO_Init+0x448>)
 8003218:	685b      	ldr	r3, [r3, #4]
 800321a:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);      
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	43da      	mvns	r2, r3
 8003220:	693b      	ldr	r3, [r7, #16]
 8003222:	4013      	ands	r3, r2
 8003224:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003226:	683b      	ldr	r3, [r7, #0]
 8003228:	685a      	ldr	r2, [r3, #4]
 800322a:	2380      	movs	r3, #128	; 0x80
 800322c:	029b      	lsls	r3, r3, #10
 800322e:	4013      	ands	r3, r2
 8003230:	d003      	beq.n	800323a <HAL_GPIO_Init+0x3ce>
        { 
          SET_BIT(temp, iocurrent); 
 8003232:	693a      	ldr	r2, [r7, #16]
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	4313      	orrs	r3, r2
 8003238:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800323a:	4b1e      	ldr	r3, [pc, #120]	; (80032b4 <HAL_GPIO_Init+0x448>)
 800323c:	693a      	ldr	r2, [r7, #16]
 800323e:	605a      	str	r2, [r3, #4]
  
        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003240:	4b1c      	ldr	r3, [pc, #112]	; (80032b4 <HAL_GPIO_Init+0x448>)
 8003242:	689b      	ldr	r3, [r3, #8]
 8003244:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	43da      	mvns	r2, r3
 800324a:	693b      	ldr	r3, [r7, #16]
 800324c:	4013      	ands	r3, r2
 800324e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003250:	683b      	ldr	r3, [r7, #0]
 8003252:	685a      	ldr	r2, [r3, #4]
 8003254:	2380      	movs	r3, #128	; 0x80
 8003256:	035b      	lsls	r3, r3, #13
 8003258:	4013      	ands	r3, r2
 800325a:	d003      	beq.n	8003264 <HAL_GPIO_Init+0x3f8>
        {
          SET_BIT(temp, iocurrent); 
 800325c:	693a      	ldr	r2, [r7, #16]
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	4313      	orrs	r3, r2
 8003262:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8003264:	4b13      	ldr	r3, [pc, #76]	; (80032b4 <HAL_GPIO_Init+0x448>)
 8003266:	693a      	ldr	r2, [r7, #16]
 8003268:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 800326a:	4b12      	ldr	r3, [pc, #72]	; (80032b4 <HAL_GPIO_Init+0x448>)
 800326c:	68db      	ldr	r3, [r3, #12]
 800326e:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	43da      	mvns	r2, r3
 8003274:	693b      	ldr	r3, [r7, #16]
 8003276:	4013      	ands	r3, r2
 8003278:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800327a:	683b      	ldr	r3, [r7, #0]
 800327c:	685a      	ldr	r2, [r3, #4]
 800327e:	2380      	movs	r3, #128	; 0x80
 8003280:	039b      	lsls	r3, r3, #14
 8003282:	4013      	ands	r3, r2
 8003284:	d003      	beq.n	800328e <HAL_GPIO_Init+0x422>
        {
          SET_BIT(temp, iocurrent); 
 8003286:	693a      	ldr	r2, [r7, #16]
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	4313      	orrs	r3, r2
 800328c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800328e:	4b09      	ldr	r3, [pc, #36]	; (80032b4 <HAL_GPIO_Init+0x448>)
 8003290:	693a      	ldr	r2, [r7, #16]
 8003292:	60da      	str	r2, [r3, #12]
      }
    }
    
    position++;
 8003294:	697b      	ldr	r3, [r7, #20]
 8003296:	3301      	adds	r3, #1
 8003298:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != RESET)
 800329a:	683b      	ldr	r3, [r7, #0]
 800329c:	681a      	ldr	r2, [r3, #0]
 800329e:	697b      	ldr	r3, [r7, #20]
 80032a0:	40da      	lsrs	r2, r3
 80032a2:	1e13      	subs	r3, r2, #0
 80032a4:	d000      	beq.n	80032a8 <HAL_GPIO_Init+0x43c>
 80032a6:	e665      	b.n	8002f74 <HAL_GPIO_Init+0x108>
  } 
}
 80032a8:	46c0      	nop			; (mov r8, r8)
 80032aa:	46bd      	mov	sp, r7
 80032ac:	b006      	add	sp, #24
 80032ae:	bd80      	pop	{r7, pc}
 80032b0:	40010000 	.word	0x40010000
 80032b4:	40010400 	.word	0x40010400

080032b8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80032b8:	b580      	push	{r7, lr}
 80032ba:	b084      	sub	sp, #16
 80032bc:	af00      	add	r7, sp, #0
 80032be:	6078      	str	r0, [r7, #4]
 80032c0:	000a      	movs	r2, r1
 80032c2:	1cbb      	adds	r3, r7, #2
 80032c4:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 80032c6:	1cbb      	adds	r3, r7, #2
 80032c8:	881b      	ldrh	r3, [r3, #0]
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d004      	beq.n	80032d8 <HAL_GPIO_ReadPin+0x20>
 80032ce:	1cbb      	adds	r3, r7, #2
 80032d0:	881b      	ldrh	r3, [r3, #0]
 80032d2:	0c1b      	lsrs	r3, r3, #16
 80032d4:	041b      	lsls	r3, r3, #16
 80032d6:	d007      	beq.n	80032e8 <HAL_GPIO_ReadPin+0x30>
 80032d8:	238e      	movs	r3, #142	; 0x8e
 80032da:	33ff      	adds	r3, #255	; 0xff
 80032dc:	001a      	movs	r2, r3
 80032de:	4b0d      	ldr	r3, [pc, #52]	; (8003314 <HAL_GPIO_ReadPin+0x5c>)
 80032e0:	0011      	movs	r1, r2
 80032e2:	0018      	movs	r0, r3
 80032e4:	f7fd fb45 	bl	8000972 <assert_failed>

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	691b      	ldr	r3, [r3, #16]
 80032ec:	1cba      	adds	r2, r7, #2
 80032ee:	8812      	ldrh	r2, [r2, #0]
 80032f0:	4013      	ands	r3, r2
 80032f2:	d004      	beq.n	80032fe <HAL_GPIO_ReadPin+0x46>
  {
    bitstatus = GPIO_PIN_SET;
 80032f4:	230f      	movs	r3, #15
 80032f6:	18fb      	adds	r3, r7, r3
 80032f8:	2201      	movs	r2, #1
 80032fa:	701a      	strb	r2, [r3, #0]
 80032fc:	e003      	b.n	8003306 <HAL_GPIO_ReadPin+0x4e>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80032fe:	230f      	movs	r3, #15
 8003300:	18fb      	adds	r3, r7, r3
 8003302:	2200      	movs	r2, #0
 8003304:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8003306:	230f      	movs	r3, #15
 8003308:	18fb      	adds	r3, r7, r3
 800330a:	781b      	ldrb	r3, [r3, #0]
  }
 800330c:	0018      	movs	r0, r3
 800330e:	46bd      	mov	sp, r7
 8003310:	b004      	add	sp, #16
 8003312:	bd80      	pop	{r7, pc}
 8003314:	08007054 	.word	0x08007054

08003318 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003318:	b580      	push	{r7, lr}
 800331a:	b082      	sub	sp, #8
 800331c:	af00      	add	r7, sp, #0
 800331e:	6078      	str	r0, [r7, #4]
 8003320:	0008      	movs	r0, r1
 8003322:	0011      	movs	r1, r2
 8003324:	1cbb      	adds	r3, r7, #2
 8003326:	1c02      	adds	r2, r0, #0
 8003328:	801a      	strh	r2, [r3, #0]
 800332a:	1c7b      	adds	r3, r7, #1
 800332c:	1c0a      	adds	r2, r1, #0
 800332e:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 8003330:	1cbb      	adds	r3, r7, #2
 8003332:	881b      	ldrh	r3, [r3, #0]
 8003334:	2b00      	cmp	r3, #0
 8003336:	d004      	beq.n	8003342 <HAL_GPIO_WritePin+0x2a>
 8003338:	1cbb      	adds	r3, r7, #2
 800333a:	881b      	ldrh	r3, [r3, #0]
 800333c:	0c1b      	lsrs	r3, r3, #16
 800333e:	041b      	lsls	r3, r3, #16
 8003340:	d006      	beq.n	8003350 <HAL_GPIO_WritePin+0x38>
 8003342:	23d6      	movs	r3, #214	; 0xd6
 8003344:	005a      	lsls	r2, r3, #1
 8003346:	4b13      	ldr	r3, [pc, #76]	; (8003394 <HAL_GPIO_WritePin+0x7c>)
 8003348:	0011      	movs	r1, r2
 800334a:	0018      	movs	r0, r3
 800334c:	f7fd fb11 	bl	8000972 <assert_failed>
  assert_param(IS_GPIO_PIN_ACTION(PinState));
 8003350:	1c7b      	adds	r3, r7, #1
 8003352:	781b      	ldrb	r3, [r3, #0]
 8003354:	2b00      	cmp	r3, #0
 8003356:	d00b      	beq.n	8003370 <HAL_GPIO_WritePin+0x58>
 8003358:	1c7b      	adds	r3, r7, #1
 800335a:	781b      	ldrb	r3, [r3, #0]
 800335c:	2b01      	cmp	r3, #1
 800335e:	d007      	beq.n	8003370 <HAL_GPIO_WritePin+0x58>
 8003360:	23ae      	movs	r3, #174	; 0xae
 8003362:	33ff      	adds	r3, #255	; 0xff
 8003364:	001a      	movs	r2, r3
 8003366:	4b0b      	ldr	r3, [pc, #44]	; (8003394 <HAL_GPIO_WritePin+0x7c>)
 8003368:	0011      	movs	r1, r2
 800336a:	0018      	movs	r0, r3
 800336c:	f7fd fb01 	bl	8000972 <assert_failed>

  if (PinState != GPIO_PIN_RESET)
 8003370:	1c7b      	adds	r3, r7, #1
 8003372:	781b      	ldrb	r3, [r3, #0]
 8003374:	2b00      	cmp	r3, #0
 8003376:	d004      	beq.n	8003382 <HAL_GPIO_WritePin+0x6a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003378:	1cbb      	adds	r3, r7, #2
 800337a:	881a      	ldrh	r2, [r3, #0]
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003380:	e003      	b.n	800338a <HAL_GPIO_WritePin+0x72>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003382:	1cbb      	adds	r3, r7, #2
 8003384:	881a      	ldrh	r2, [r3, #0]
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	629a      	str	r2, [r3, #40]	; 0x28
}
 800338a:	46c0      	nop			; (mov r8, r8)
 800338c:	46bd      	mov	sp, r7
 800338e:	b002      	add	sp, #8
 8003390:	bd80      	pop	{r7, pc}
 8003392:	46c0      	nop			; (mov r8, r8)
 8003394:	08007054 	.word	0x08007054

08003398 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F0 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003398:	b580      	push	{r7, lr}
 800339a:	b082      	sub	sp, #8
 800339c:	af00      	add	r7, sp, #0
 800339e:	6078      	str	r0, [r7, #4]
 80033a0:	000a      	movs	r2, r1
 80033a2:	1cbb      	adds	r3, r7, #2
 80033a4:	801a      	strh	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 80033a6:	1cbb      	adds	r3, r7, #2
 80033a8:	881b      	ldrh	r3, [r3, #0]
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d004      	beq.n	80033b8 <HAL_GPIO_TogglePin+0x20>
 80033ae:	1cbb      	adds	r3, r7, #2
 80033b0:	881b      	ldrh	r3, [r3, #0]
 80033b2:	0c1b      	lsrs	r3, r3, #16
 80033b4:	041b      	lsls	r3, r3, #16
 80033b6:	d006      	beq.n	80033c6 <HAL_GPIO_TogglePin+0x2e>
 80033b8:	23e1      	movs	r3, #225	; 0xe1
 80033ba:	005a      	lsls	r2, r3, #1
 80033bc:	4b07      	ldr	r3, [pc, #28]	; (80033dc <HAL_GPIO_TogglePin+0x44>)
 80033be:	0011      	movs	r1, r2
 80033c0:	0018      	movs	r0, r3
 80033c2:	f7fd fad6 	bl	8000972 <assert_failed>

  GPIOx->ODR ^= GPIO_Pin;
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	695a      	ldr	r2, [r3, #20]
 80033ca:	1cbb      	adds	r3, r7, #2
 80033cc:	881b      	ldrh	r3, [r3, #0]
 80033ce:	405a      	eors	r2, r3
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	615a      	str	r2, [r3, #20]
}
 80033d4:	46c0      	nop			; (mov r8, r8)
 80033d6:	46bd      	mov	sp, r7
 80033d8:	b002      	add	sp, #8
 80033da:	bd80      	pop	{r7, pc}
 80033dc:	08007054 	.word	0x08007054

080033e0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80033e0:	b580      	push	{r7, lr}
 80033e2:	b082      	sub	sp, #8
 80033e4:	af00      	add	r7, sp, #0
 80033e6:	0002      	movs	r2, r0
 80033e8:	1dbb      	adds	r3, r7, #6
 80033ea:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET) 
 80033ec:	4b09      	ldr	r3, [pc, #36]	; (8003414 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 80033ee:	695b      	ldr	r3, [r3, #20]
 80033f0:	1dba      	adds	r2, r7, #6
 80033f2:	8812      	ldrh	r2, [r2, #0]
 80033f4:	4013      	ands	r3, r2
 80033f6:	d008      	beq.n	800340a <HAL_GPIO_EXTI_IRQHandler+0x2a>
  { 
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80033f8:	4b06      	ldr	r3, [pc, #24]	; (8003414 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 80033fa:	1dba      	adds	r2, r7, #6
 80033fc:	8812      	ldrh	r2, [r2, #0]
 80033fe:	615a      	str	r2, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003400:	1dbb      	adds	r3, r7, #6
 8003402:	881b      	ldrh	r3, [r3, #0]
 8003404:	0018      	movs	r0, r3
 8003406:	f7fd fa8f 	bl	8000928 <HAL_GPIO_EXTI_Callback>
  }
}
 800340a:	46c0      	nop			; (mov r8, r8)
 800340c:	46bd      	mov	sp, r7
 800340e:	b002      	add	sp, #8
 8003410:	bd80      	pop	{r7, pc}
 8003412:	46c0      	nop			; (mov r8, r8)
 8003414:	40010400 	.word	0x40010400

08003418 <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 8003418:	b580      	push	{r7, lr}
 800341a:	b084      	sub	sp, #16
 800341c:	af00      	add	r7, sp, #0
 800341e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if(hiwdg == NULL)
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	2b00      	cmp	r3, #0
 8003424:	d101      	bne.n	800342a <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
 8003426:	2301      	movs	r3, #1
 8003428:	e075      	b.n	8003516 <HAL_IWDG_Init+0xfe>
  }

  /* Check the parameters */
  assert_param(IS_IWDG_ALL_INSTANCE(hiwdg->Instance));
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	4a3c      	ldr	r2, [pc, #240]	; (8003520 <HAL_IWDG_Init+0x108>)
 8003430:	4293      	cmp	r3, r2
 8003432:	d004      	beq.n	800343e <HAL_IWDG_Init+0x26>
 8003434:	4b3b      	ldr	r3, [pc, #236]	; (8003524 <HAL_IWDG_Init+0x10c>)
 8003436:	21b5      	movs	r1, #181	; 0xb5
 8003438:	0018      	movs	r0, r3
 800343a:	f7fd fa9a 	bl	8000972 <assert_failed>
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	685b      	ldr	r3, [r3, #4]
 8003442:	2b00      	cmp	r3, #0
 8003444:	d01c      	beq.n	8003480 <HAL_IWDG_Init+0x68>
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	685b      	ldr	r3, [r3, #4]
 800344a:	2b01      	cmp	r3, #1
 800344c:	d018      	beq.n	8003480 <HAL_IWDG_Init+0x68>
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	685b      	ldr	r3, [r3, #4]
 8003452:	2b02      	cmp	r3, #2
 8003454:	d014      	beq.n	8003480 <HAL_IWDG_Init+0x68>
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	685b      	ldr	r3, [r3, #4]
 800345a:	2b03      	cmp	r3, #3
 800345c:	d010      	beq.n	8003480 <HAL_IWDG_Init+0x68>
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	685b      	ldr	r3, [r3, #4]
 8003462:	2b04      	cmp	r3, #4
 8003464:	d00c      	beq.n	8003480 <HAL_IWDG_Init+0x68>
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	685b      	ldr	r3, [r3, #4]
 800346a:	2b05      	cmp	r3, #5
 800346c:	d008      	beq.n	8003480 <HAL_IWDG_Init+0x68>
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	685b      	ldr	r3, [r3, #4]
 8003472:	2b06      	cmp	r3, #6
 8003474:	d004      	beq.n	8003480 <HAL_IWDG_Init+0x68>
 8003476:	4b2b      	ldr	r3, [pc, #172]	; (8003524 <HAL_IWDG_Init+0x10c>)
 8003478:	21b6      	movs	r1, #182	; 0xb6
 800347a:	0018      	movs	r0, r3
 800347c:	f7fd fa79 	bl	8000972 <assert_failed>
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	689b      	ldr	r3, [r3, #8]
 8003484:	4a28      	ldr	r2, [pc, #160]	; (8003528 <HAL_IWDG_Init+0x110>)
 8003486:	4293      	cmp	r3, r2
 8003488:	d904      	bls.n	8003494 <HAL_IWDG_Init+0x7c>
 800348a:	4b26      	ldr	r3, [pc, #152]	; (8003524 <HAL_IWDG_Init+0x10c>)
 800348c:	21b7      	movs	r1, #183	; 0xb7
 800348e:	0018      	movs	r0, r3
 8003490:	f7fd fa6f 	bl	8000972 <assert_failed>
  assert_param(IS_IWDG_WINDOW(hiwdg->Init.Window));
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	68db      	ldr	r3, [r3, #12]
 8003498:	4a23      	ldr	r2, [pc, #140]	; (8003528 <HAL_IWDG_Init+0x110>)
 800349a:	4293      	cmp	r3, r2
 800349c:	d904      	bls.n	80034a8 <HAL_IWDG_Init+0x90>
 800349e:	4b21      	ldr	r3, [pc, #132]	; (8003524 <HAL_IWDG_Init+0x10c>)
 80034a0:	21b8      	movs	r1, #184	; 0xb8
 80034a2:	0018      	movs	r0, r3
 80034a4:	f7fd fa65 	bl	8000972 <assert_failed>

  /* Enable IWDG. LSI is turned on automaticaly */
  __HAL_IWDG_START(hiwdg);
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	4a1f      	ldr	r2, [pc, #124]	; (800352c <HAL_IWDG_Init+0x114>)
 80034ae:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR, IWDG_RLR and IWDG_WINR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	4a1e      	ldr	r2, [pc, #120]	; (8003530 <HAL_IWDG_Init+0x118>)
 80034b6:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	687a      	ldr	r2, [r7, #4]
 80034be:	6852      	ldr	r2, [r2, #4]
 80034c0:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	687a      	ldr	r2, [r7, #4]
 80034c8:	6892      	ldr	r2, [r2, #8]
 80034ca:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 80034cc:	f7fe f964 	bl	8001798 <HAL_GetTick>
 80034d0:	0003      	movs	r3, r0
 80034d2:	60fb      	str	r3, [r7, #12]

   /* Wait for register to be updated */
  while(hiwdg->Instance->SR != RESET)
 80034d4:	e008      	b.n	80034e8 <HAL_IWDG_Init+0xd0>
  {
    if((HAL_GetTick() - tickstart ) > HAL_IWDG_DEFAULT_TIMEOUT)
 80034d6:	f7fe f95f 	bl	8001798 <HAL_GetTick>
 80034da:	0002      	movs	r2, r0
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	1ad3      	subs	r3, r2, r3
 80034e0:	2b27      	cmp	r3, #39	; 0x27
 80034e2:	d901      	bls.n	80034e8 <HAL_IWDG_Init+0xd0>
    {
      return HAL_TIMEOUT;
 80034e4:	2303      	movs	r3, #3
 80034e6:	e016      	b.n	8003516 <HAL_IWDG_Init+0xfe>
  while(hiwdg->Instance->SR != RESET)
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	68db      	ldr	r3, [r3, #12]
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d1f1      	bne.n	80034d6 <HAL_IWDG_Init+0xbe>
    }
  }

  /* If window parameter is different than current value, modify window 
  register */
  if(hiwdg->Instance->WINR != hiwdg->Init.Window)
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	691a      	ldr	r2, [r3, #16]
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	68db      	ldr	r3, [r3, #12]
 80034fc:	429a      	cmp	r2, r3
 80034fe:	d005      	beq.n	800350c <HAL_IWDG_Init+0xf4>
  {
    /* Write to IWDG WINR the IWDG_Window value to compare with. In any case,
    even if window feature is disabled, Watchdog will be reloaded by writing 
    windows register */
    hiwdg->Instance->WINR = hiwdg->Init.Window;
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	687a      	ldr	r2, [r7, #4]
 8003506:	68d2      	ldr	r2, [r2, #12]
 8003508:	611a      	str	r2, [r3, #16]
 800350a:	e003      	b.n	8003514 <HAL_IWDG_Init+0xfc>
  }
  else
  {
    /* Reload IWDG counter with value defined in the reload register */
    __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	4a08      	ldr	r2, [pc, #32]	; (8003534 <HAL_IWDG_Init+0x11c>)
 8003512:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003514:	2300      	movs	r3, #0
}
 8003516:	0018      	movs	r0, r3
 8003518:	46bd      	mov	sp, r7
 800351a:	b004      	add	sp, #16
 800351c:	bd80      	pop	{r7, pc}
 800351e:	46c0      	nop			; (mov r8, r8)
 8003520:	40003000 	.word	0x40003000
 8003524:	08007090 	.word	0x08007090
 8003528:	00000fff 	.word	0x00000fff
 800352c:	0000cccc 	.word	0x0000cccc
 8003530:	00005555 	.word	0x00005555
 8003534:	0000aaaa 	.word	0x0000aaaa

08003538 <HAL_IWDG_Refresh>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
 8003538:	b580      	push	{r7, lr}
 800353a:	b082      	sub	sp, #8
 800353c:	af00      	add	r7, sp, #0
 800353e:	6078      	str	r0, [r7, #4]
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	4a03      	ldr	r2, [pc, #12]	; (8003554 <HAL_IWDG_Refresh+0x1c>)
 8003546:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8003548:	2300      	movs	r3, #0
}
 800354a:	0018      	movs	r0, r3
 800354c:	46bd      	mov	sp, r7
 800354e:	b002      	add	sp, #8
 8003550:	bd80      	pop	{r7, pc}
 8003552:	46c0      	nop			; (mov r8, r8)
 8003554:	0000aaaa 	.word	0x0000aaaa

08003558 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003558:	b580      	push	{r7, lr}
 800355a:	b086      	sub	sp, #24
 800355c:	af00      	add	r7, sp, #0
 800355e:	6078      	str	r0, [r7, #4]
   uint32_t tickstart = 0U;
 8003560:	2300      	movs	r3, #0
 8003562:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	2b00      	cmp	r3, #0
 8003568:	d106      	bne.n	8003578 <HAL_RCC_OscConfig+0x20>
 800356a:	2389      	movs	r3, #137	; 0x89
 800356c:	005a      	lsls	r2, r3, #1
 800356e:	4bc6      	ldr	r3, [pc, #792]	; (8003888 <HAL_RCC_OscConfig+0x330>)
 8003570:	0011      	movs	r1, r2
 8003572:	0018      	movs	r0, r3
 8003574:	f7fd f9fd 	bl	8000972 <assert_failed>
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	2b00      	cmp	r3, #0
 800357e:	d020      	beq.n	80035c2 <HAL_RCC_OscConfig+0x6a>
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	2201      	movs	r2, #1
 8003586:	4013      	ands	r3, r2
 8003588:	d11b      	bne.n	80035c2 <HAL_RCC_OscConfig+0x6a>
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	2202      	movs	r2, #2
 8003590:	4013      	ands	r3, r2
 8003592:	d116      	bne.n	80035c2 <HAL_RCC_OscConfig+0x6a>
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	2208      	movs	r2, #8
 800359a:	4013      	ands	r3, r2
 800359c:	d111      	bne.n	80035c2 <HAL_RCC_OscConfig+0x6a>
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	2204      	movs	r2, #4
 80035a4:	4013      	ands	r3, r2
 80035a6:	d10c      	bne.n	80035c2 <HAL_RCC_OscConfig+0x6a>
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	2210      	movs	r2, #16
 80035ae:	4013      	ands	r3, r2
 80035b0:	d107      	bne.n	80035c2 <HAL_RCC_OscConfig+0x6a>
 80035b2:	2314      	movs	r3, #20
 80035b4:	33ff      	adds	r3, #255	; 0xff
 80035b6:	001a      	movs	r2, r3
 80035b8:	4bb3      	ldr	r3, [pc, #716]	; (8003888 <HAL_RCC_OscConfig+0x330>)
 80035ba:	0011      	movs	r1, r2
 80035bc:	0018      	movs	r0, r3
 80035be:	f7fd f9d8 	bl	8000972 <assert_failed>

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	2201      	movs	r2, #1
 80035c8:	4013      	ands	r3, r2
 80035ca:	d100      	bne.n	80035ce <HAL_RCC_OscConfig+0x76>
 80035cc:	e0a4      	b.n	8003718 <HAL_RCC_OscConfig+0x1c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	685b      	ldr	r3, [r3, #4]
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d00f      	beq.n	80035f6 <HAL_RCC_OscConfig+0x9e>
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	685b      	ldr	r3, [r3, #4]
 80035da:	2b01      	cmp	r3, #1
 80035dc:	d00b      	beq.n	80035f6 <HAL_RCC_OscConfig+0x9e>
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	685b      	ldr	r3, [r3, #4]
 80035e2:	2b05      	cmp	r3, #5
 80035e4:	d007      	beq.n	80035f6 <HAL_RCC_OscConfig+0x9e>
 80035e6:	231a      	movs	r3, #26
 80035e8:	33ff      	adds	r3, #255	; 0xff
 80035ea:	001a      	movs	r2, r3
 80035ec:	4ba6      	ldr	r3, [pc, #664]	; (8003888 <HAL_RCC_OscConfig+0x330>)
 80035ee:	0011      	movs	r1, r2
 80035f0:	0018      	movs	r0, r3
 80035f2:	f7fd f9be 	bl	8000972 <assert_failed>

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80035f6:	4ba5      	ldr	r3, [pc, #660]	; (800388c <HAL_RCC_OscConfig+0x334>)
 80035f8:	685b      	ldr	r3, [r3, #4]
 80035fa:	220c      	movs	r2, #12
 80035fc:	4013      	ands	r3, r2
 80035fe:	2b04      	cmp	r3, #4
 8003600:	d00e      	beq.n	8003620 <HAL_RCC_OscConfig+0xc8>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003602:	4ba2      	ldr	r3, [pc, #648]	; (800388c <HAL_RCC_OscConfig+0x334>)
 8003604:	685b      	ldr	r3, [r3, #4]
 8003606:	220c      	movs	r2, #12
 8003608:	4013      	ands	r3, r2
 800360a:	2b08      	cmp	r3, #8
 800360c:	d117      	bne.n	800363e <HAL_RCC_OscConfig+0xe6>
 800360e:	4b9f      	ldr	r3, [pc, #636]	; (800388c <HAL_RCC_OscConfig+0x334>)
 8003610:	685a      	ldr	r2, [r3, #4]
 8003612:	2380      	movs	r3, #128	; 0x80
 8003614:	025b      	lsls	r3, r3, #9
 8003616:	401a      	ands	r2, r3
 8003618:	2380      	movs	r3, #128	; 0x80
 800361a:	025b      	lsls	r3, r3, #9
 800361c:	429a      	cmp	r2, r3
 800361e:	d10e      	bne.n	800363e <HAL_RCC_OscConfig+0xe6>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003620:	4b9a      	ldr	r3, [pc, #616]	; (800388c <HAL_RCC_OscConfig+0x334>)
 8003622:	681a      	ldr	r2, [r3, #0]
 8003624:	2380      	movs	r3, #128	; 0x80
 8003626:	029b      	lsls	r3, r3, #10
 8003628:	4013      	ands	r3, r2
 800362a:	d100      	bne.n	800362e <HAL_RCC_OscConfig+0xd6>
 800362c:	e073      	b.n	8003716 <HAL_RCC_OscConfig+0x1be>
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	685b      	ldr	r3, [r3, #4]
 8003632:	2b00      	cmp	r3, #0
 8003634:	d000      	beq.n	8003638 <HAL_RCC_OscConfig+0xe0>
 8003636:	e06e      	b.n	8003716 <HAL_RCC_OscConfig+0x1be>
      {
        return HAL_ERROR;
 8003638:	2301      	movs	r3, #1
 800363a:	f000 fbe9 	bl	8003e10 <HAL_RCC_OscConfig+0x8b8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	685b      	ldr	r3, [r3, #4]
 8003642:	2b01      	cmp	r3, #1
 8003644:	d107      	bne.n	8003656 <HAL_RCC_OscConfig+0xfe>
 8003646:	4b91      	ldr	r3, [pc, #580]	; (800388c <HAL_RCC_OscConfig+0x334>)
 8003648:	681a      	ldr	r2, [r3, #0]
 800364a:	4b90      	ldr	r3, [pc, #576]	; (800388c <HAL_RCC_OscConfig+0x334>)
 800364c:	2180      	movs	r1, #128	; 0x80
 800364e:	0249      	lsls	r1, r1, #9
 8003650:	430a      	orrs	r2, r1
 8003652:	601a      	str	r2, [r3, #0]
 8003654:	e02f      	b.n	80036b6 <HAL_RCC_OscConfig+0x15e>
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	685b      	ldr	r3, [r3, #4]
 800365a:	2b00      	cmp	r3, #0
 800365c:	d10c      	bne.n	8003678 <HAL_RCC_OscConfig+0x120>
 800365e:	4b8b      	ldr	r3, [pc, #556]	; (800388c <HAL_RCC_OscConfig+0x334>)
 8003660:	681a      	ldr	r2, [r3, #0]
 8003662:	4b8a      	ldr	r3, [pc, #552]	; (800388c <HAL_RCC_OscConfig+0x334>)
 8003664:	498a      	ldr	r1, [pc, #552]	; (8003890 <HAL_RCC_OscConfig+0x338>)
 8003666:	400a      	ands	r2, r1
 8003668:	601a      	str	r2, [r3, #0]
 800366a:	4b88      	ldr	r3, [pc, #544]	; (800388c <HAL_RCC_OscConfig+0x334>)
 800366c:	681a      	ldr	r2, [r3, #0]
 800366e:	4b87      	ldr	r3, [pc, #540]	; (800388c <HAL_RCC_OscConfig+0x334>)
 8003670:	4988      	ldr	r1, [pc, #544]	; (8003894 <HAL_RCC_OscConfig+0x33c>)
 8003672:	400a      	ands	r2, r1
 8003674:	601a      	str	r2, [r3, #0]
 8003676:	e01e      	b.n	80036b6 <HAL_RCC_OscConfig+0x15e>
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	685b      	ldr	r3, [r3, #4]
 800367c:	2b05      	cmp	r3, #5
 800367e:	d10e      	bne.n	800369e <HAL_RCC_OscConfig+0x146>
 8003680:	4b82      	ldr	r3, [pc, #520]	; (800388c <HAL_RCC_OscConfig+0x334>)
 8003682:	681a      	ldr	r2, [r3, #0]
 8003684:	4b81      	ldr	r3, [pc, #516]	; (800388c <HAL_RCC_OscConfig+0x334>)
 8003686:	2180      	movs	r1, #128	; 0x80
 8003688:	02c9      	lsls	r1, r1, #11
 800368a:	430a      	orrs	r2, r1
 800368c:	601a      	str	r2, [r3, #0]
 800368e:	4b7f      	ldr	r3, [pc, #508]	; (800388c <HAL_RCC_OscConfig+0x334>)
 8003690:	681a      	ldr	r2, [r3, #0]
 8003692:	4b7e      	ldr	r3, [pc, #504]	; (800388c <HAL_RCC_OscConfig+0x334>)
 8003694:	2180      	movs	r1, #128	; 0x80
 8003696:	0249      	lsls	r1, r1, #9
 8003698:	430a      	orrs	r2, r1
 800369a:	601a      	str	r2, [r3, #0]
 800369c:	e00b      	b.n	80036b6 <HAL_RCC_OscConfig+0x15e>
 800369e:	4b7b      	ldr	r3, [pc, #492]	; (800388c <HAL_RCC_OscConfig+0x334>)
 80036a0:	681a      	ldr	r2, [r3, #0]
 80036a2:	4b7a      	ldr	r3, [pc, #488]	; (800388c <HAL_RCC_OscConfig+0x334>)
 80036a4:	497a      	ldr	r1, [pc, #488]	; (8003890 <HAL_RCC_OscConfig+0x338>)
 80036a6:	400a      	ands	r2, r1
 80036a8:	601a      	str	r2, [r3, #0]
 80036aa:	4b78      	ldr	r3, [pc, #480]	; (800388c <HAL_RCC_OscConfig+0x334>)
 80036ac:	681a      	ldr	r2, [r3, #0]
 80036ae:	4b77      	ldr	r3, [pc, #476]	; (800388c <HAL_RCC_OscConfig+0x334>)
 80036b0:	4978      	ldr	r1, [pc, #480]	; (8003894 <HAL_RCC_OscConfig+0x33c>)
 80036b2:	400a      	ands	r2, r1
 80036b4:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	685b      	ldr	r3, [r3, #4]
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d015      	beq.n	80036ea <HAL_RCC_OscConfig+0x192>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036be:	f7fe f86b 	bl	8001798 <HAL_GetTick>
 80036c2:	0003      	movs	r3, r0
 80036c4:	613b      	str	r3, [r7, #16]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80036c6:	e009      	b.n	80036dc <HAL_RCC_OscConfig+0x184>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80036c8:	f7fe f866 	bl	8001798 <HAL_GetTick>
 80036cc:	0002      	movs	r2, r0
 80036ce:	693b      	ldr	r3, [r7, #16]
 80036d0:	1ad3      	subs	r3, r2, r3
 80036d2:	2b64      	cmp	r3, #100	; 0x64
 80036d4:	d902      	bls.n	80036dc <HAL_RCC_OscConfig+0x184>
          {
            return HAL_TIMEOUT;
 80036d6:	2303      	movs	r3, #3
 80036d8:	f000 fb9a 	bl	8003e10 <HAL_RCC_OscConfig+0x8b8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80036dc:	4b6b      	ldr	r3, [pc, #428]	; (800388c <HAL_RCC_OscConfig+0x334>)
 80036de:	681a      	ldr	r2, [r3, #0]
 80036e0:	2380      	movs	r3, #128	; 0x80
 80036e2:	029b      	lsls	r3, r3, #10
 80036e4:	4013      	ands	r3, r2
 80036e6:	d0ef      	beq.n	80036c8 <HAL_RCC_OscConfig+0x170>
 80036e8:	e016      	b.n	8003718 <HAL_RCC_OscConfig+0x1c0>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036ea:	f7fe f855 	bl	8001798 <HAL_GetTick>
 80036ee:	0003      	movs	r3, r0
 80036f0:	613b      	str	r3, [r7, #16]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80036f2:	e009      	b.n	8003708 <HAL_RCC_OscConfig+0x1b0>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80036f4:	f7fe f850 	bl	8001798 <HAL_GetTick>
 80036f8:	0002      	movs	r2, r0
 80036fa:	693b      	ldr	r3, [r7, #16]
 80036fc:	1ad3      	subs	r3, r2, r3
 80036fe:	2b64      	cmp	r3, #100	; 0x64
 8003700:	d902      	bls.n	8003708 <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 8003702:	2303      	movs	r3, #3
 8003704:	f000 fb84 	bl	8003e10 <HAL_RCC_OscConfig+0x8b8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003708:	4b60      	ldr	r3, [pc, #384]	; (800388c <HAL_RCC_OscConfig+0x334>)
 800370a:	681a      	ldr	r2, [r3, #0]
 800370c:	2380      	movs	r3, #128	; 0x80
 800370e:	029b      	lsls	r3, r3, #10
 8003710:	4013      	ands	r3, r2
 8003712:	d1ef      	bne.n	80036f4 <HAL_RCC_OscConfig+0x19c>
 8003714:	e000      	b.n	8003718 <HAL_RCC_OscConfig+0x1c0>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003716:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	2202      	movs	r2, #2
 800371e:	4013      	ands	r3, r2
 8003720:	d100      	bne.n	8003724 <HAL_RCC_OscConfig+0x1cc>
 8003722:	e085      	b.n	8003830 <HAL_RCC_OscConfig+0x2d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	68db      	ldr	r3, [r3, #12]
 8003728:	2b00      	cmp	r3, #0
 800372a:	d00b      	beq.n	8003744 <HAL_RCC_OscConfig+0x1ec>
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	68db      	ldr	r3, [r3, #12]
 8003730:	2b01      	cmp	r3, #1
 8003732:	d007      	beq.n	8003744 <HAL_RCC_OscConfig+0x1ec>
 8003734:	234e      	movs	r3, #78	; 0x4e
 8003736:	33ff      	adds	r3, #255	; 0xff
 8003738:	001a      	movs	r2, r3
 800373a:	4b53      	ldr	r3, [pc, #332]	; (8003888 <HAL_RCC_OscConfig+0x330>)
 800373c:	0011      	movs	r1, r2
 800373e:	0018      	movs	r0, r3
 8003740:	f7fd f917 	bl	8000972 <assert_failed>
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	691b      	ldr	r3, [r3, #16]
 8003748:	2b1f      	cmp	r3, #31
 800374a:	d906      	bls.n	800375a <HAL_RCC_OscConfig+0x202>
 800374c:	23a7      	movs	r3, #167	; 0xa7
 800374e:	005a      	lsls	r2, r3, #1
 8003750:	4b4d      	ldr	r3, [pc, #308]	; (8003888 <HAL_RCC_OscConfig+0x330>)
 8003752:	0011      	movs	r1, r2
 8003754:	0018      	movs	r0, r3
 8003756:	f7fd f90c 	bl	8000972 <assert_failed>
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800375a:	4b4c      	ldr	r3, [pc, #304]	; (800388c <HAL_RCC_OscConfig+0x334>)
 800375c:	685b      	ldr	r3, [r3, #4]
 800375e:	220c      	movs	r2, #12
 8003760:	4013      	ands	r3, r2
 8003762:	d00b      	beq.n	800377c <HAL_RCC_OscConfig+0x224>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8003764:	4b49      	ldr	r3, [pc, #292]	; (800388c <HAL_RCC_OscConfig+0x334>)
 8003766:	685b      	ldr	r3, [r3, #4]
 8003768:	220c      	movs	r2, #12
 800376a:	4013      	ands	r3, r2
 800376c:	2b08      	cmp	r3, #8
 800376e:	d11d      	bne.n	80037ac <HAL_RCC_OscConfig+0x254>
 8003770:	4b46      	ldr	r3, [pc, #280]	; (800388c <HAL_RCC_OscConfig+0x334>)
 8003772:	685a      	ldr	r2, [r3, #4]
 8003774:	2380      	movs	r3, #128	; 0x80
 8003776:	025b      	lsls	r3, r3, #9
 8003778:	4013      	ands	r3, r2
 800377a:	d117      	bne.n	80037ac <HAL_RCC_OscConfig+0x254>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800377c:	4b43      	ldr	r3, [pc, #268]	; (800388c <HAL_RCC_OscConfig+0x334>)
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	2202      	movs	r2, #2
 8003782:	4013      	ands	r3, r2
 8003784:	d006      	beq.n	8003794 <HAL_RCC_OscConfig+0x23c>
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	68db      	ldr	r3, [r3, #12]
 800378a:	2b01      	cmp	r3, #1
 800378c:	d002      	beq.n	8003794 <HAL_RCC_OscConfig+0x23c>
      {
        return HAL_ERROR;
 800378e:	2301      	movs	r3, #1
 8003790:	f000 fb3e 	bl	8003e10 <HAL_RCC_OscConfig+0x8b8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003794:	4b3d      	ldr	r3, [pc, #244]	; (800388c <HAL_RCC_OscConfig+0x334>)
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	22f8      	movs	r2, #248	; 0xf8
 800379a:	4393      	bics	r3, r2
 800379c:	0019      	movs	r1, r3
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	691b      	ldr	r3, [r3, #16]
 80037a2:	00da      	lsls	r2, r3, #3
 80037a4:	4b39      	ldr	r3, [pc, #228]	; (800388c <HAL_RCC_OscConfig+0x334>)
 80037a6:	430a      	orrs	r2, r1
 80037a8:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80037aa:	e041      	b.n	8003830 <HAL_RCC_OscConfig+0x2d8>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	68db      	ldr	r3, [r3, #12]
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d024      	beq.n	80037fe <HAL_RCC_OscConfig+0x2a6>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80037b4:	4b35      	ldr	r3, [pc, #212]	; (800388c <HAL_RCC_OscConfig+0x334>)
 80037b6:	681a      	ldr	r2, [r3, #0]
 80037b8:	4b34      	ldr	r3, [pc, #208]	; (800388c <HAL_RCC_OscConfig+0x334>)
 80037ba:	2101      	movs	r1, #1
 80037bc:	430a      	orrs	r2, r1
 80037be:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037c0:	f7fd ffea 	bl	8001798 <HAL_GetTick>
 80037c4:	0003      	movs	r3, r0
 80037c6:	613b      	str	r3, [r7, #16]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80037c8:	e008      	b.n	80037dc <HAL_RCC_OscConfig+0x284>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80037ca:	f7fd ffe5 	bl	8001798 <HAL_GetTick>
 80037ce:	0002      	movs	r2, r0
 80037d0:	693b      	ldr	r3, [r7, #16]
 80037d2:	1ad3      	subs	r3, r2, r3
 80037d4:	2b02      	cmp	r3, #2
 80037d6:	d901      	bls.n	80037dc <HAL_RCC_OscConfig+0x284>
          {
            return HAL_TIMEOUT;
 80037d8:	2303      	movs	r3, #3
 80037da:	e319      	b.n	8003e10 <HAL_RCC_OscConfig+0x8b8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80037dc:	4b2b      	ldr	r3, [pc, #172]	; (800388c <HAL_RCC_OscConfig+0x334>)
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	2202      	movs	r2, #2
 80037e2:	4013      	ands	r3, r2
 80037e4:	d0f1      	beq.n	80037ca <HAL_RCC_OscConfig+0x272>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80037e6:	4b29      	ldr	r3, [pc, #164]	; (800388c <HAL_RCC_OscConfig+0x334>)
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	22f8      	movs	r2, #248	; 0xf8
 80037ec:	4393      	bics	r3, r2
 80037ee:	0019      	movs	r1, r3
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	691b      	ldr	r3, [r3, #16]
 80037f4:	00da      	lsls	r2, r3, #3
 80037f6:	4b25      	ldr	r3, [pc, #148]	; (800388c <HAL_RCC_OscConfig+0x334>)
 80037f8:	430a      	orrs	r2, r1
 80037fa:	601a      	str	r2, [r3, #0]
 80037fc:	e018      	b.n	8003830 <HAL_RCC_OscConfig+0x2d8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80037fe:	4b23      	ldr	r3, [pc, #140]	; (800388c <HAL_RCC_OscConfig+0x334>)
 8003800:	681a      	ldr	r2, [r3, #0]
 8003802:	4b22      	ldr	r3, [pc, #136]	; (800388c <HAL_RCC_OscConfig+0x334>)
 8003804:	2101      	movs	r1, #1
 8003806:	438a      	bics	r2, r1
 8003808:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800380a:	f7fd ffc5 	bl	8001798 <HAL_GetTick>
 800380e:	0003      	movs	r3, r0
 8003810:	613b      	str	r3, [r7, #16]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003812:	e008      	b.n	8003826 <HAL_RCC_OscConfig+0x2ce>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003814:	f7fd ffc0 	bl	8001798 <HAL_GetTick>
 8003818:	0002      	movs	r2, r0
 800381a:	693b      	ldr	r3, [r7, #16]
 800381c:	1ad3      	subs	r3, r2, r3
 800381e:	2b02      	cmp	r3, #2
 8003820:	d901      	bls.n	8003826 <HAL_RCC_OscConfig+0x2ce>
          {
            return HAL_TIMEOUT;
 8003822:	2303      	movs	r3, #3
 8003824:	e2f4      	b.n	8003e10 <HAL_RCC_OscConfig+0x8b8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003826:	4b19      	ldr	r3, [pc, #100]	; (800388c <HAL_RCC_OscConfig+0x334>)
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	2202      	movs	r2, #2
 800382c:	4013      	ands	r3, r2
 800382e:	d1f1      	bne.n	8003814 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	2208      	movs	r2, #8
 8003836:	4013      	ands	r3, r2
 8003838:	d04d      	beq.n	80038d6 <HAL_RCC_OscConfig+0x37e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	69db      	ldr	r3, [r3, #28]
 800383e:	2b00      	cmp	r3, #0
 8003840:	d00a      	beq.n	8003858 <HAL_RCC_OscConfig+0x300>
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	69db      	ldr	r3, [r3, #28]
 8003846:	2b01      	cmp	r3, #1
 8003848:	d006      	beq.n	8003858 <HAL_RCC_OscConfig+0x300>
 800384a:	23c7      	movs	r3, #199	; 0xc7
 800384c:	005a      	lsls	r2, r3, #1
 800384e:	4b0e      	ldr	r3, [pc, #56]	; (8003888 <HAL_RCC_OscConfig+0x330>)
 8003850:	0011      	movs	r1, r2
 8003852:	0018      	movs	r0, r3
 8003854:	f7fd f88d 	bl	8000972 <assert_failed>
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	69db      	ldr	r3, [r3, #28]
 800385c:	2b00      	cmp	r3, #0
 800385e:	d021      	beq.n	80038a4 <HAL_RCC_OscConfig+0x34c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003860:	4b0a      	ldr	r3, [pc, #40]	; (800388c <HAL_RCC_OscConfig+0x334>)
 8003862:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003864:	4b09      	ldr	r3, [pc, #36]	; (800388c <HAL_RCC_OscConfig+0x334>)
 8003866:	2101      	movs	r1, #1
 8003868:	430a      	orrs	r2, r1
 800386a:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800386c:	f7fd ff94 	bl	8001798 <HAL_GetTick>
 8003870:	0003      	movs	r3, r0
 8003872:	613b      	str	r3, [r7, #16]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003874:	e010      	b.n	8003898 <HAL_RCC_OscConfig+0x340>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003876:	f7fd ff8f 	bl	8001798 <HAL_GetTick>
 800387a:	0002      	movs	r2, r0
 800387c:	693b      	ldr	r3, [r7, #16]
 800387e:	1ad3      	subs	r3, r2, r3
 8003880:	2b02      	cmp	r3, #2
 8003882:	d909      	bls.n	8003898 <HAL_RCC_OscConfig+0x340>
        {
          return HAL_TIMEOUT;
 8003884:	2303      	movs	r3, #3
 8003886:	e2c3      	b.n	8003e10 <HAL_RCC_OscConfig+0x8b8>
 8003888:	080070cc 	.word	0x080070cc
 800388c:	40021000 	.word	0x40021000
 8003890:	fffeffff 	.word	0xfffeffff
 8003894:	fffbffff 	.word	0xfffbffff
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003898:	4bb3      	ldr	r3, [pc, #716]	; (8003b68 <HAL_RCC_OscConfig+0x610>)
 800389a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800389c:	2202      	movs	r2, #2
 800389e:	4013      	ands	r3, r2
 80038a0:	d0e9      	beq.n	8003876 <HAL_RCC_OscConfig+0x31e>
 80038a2:	e018      	b.n	80038d6 <HAL_RCC_OscConfig+0x37e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80038a4:	4bb0      	ldr	r3, [pc, #704]	; (8003b68 <HAL_RCC_OscConfig+0x610>)
 80038a6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80038a8:	4baf      	ldr	r3, [pc, #700]	; (8003b68 <HAL_RCC_OscConfig+0x610>)
 80038aa:	2101      	movs	r1, #1
 80038ac:	438a      	bics	r2, r1
 80038ae:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80038b0:	f7fd ff72 	bl	8001798 <HAL_GetTick>
 80038b4:	0003      	movs	r3, r0
 80038b6:	613b      	str	r3, [r7, #16]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80038b8:	e008      	b.n	80038cc <HAL_RCC_OscConfig+0x374>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80038ba:	f7fd ff6d 	bl	8001798 <HAL_GetTick>
 80038be:	0002      	movs	r2, r0
 80038c0:	693b      	ldr	r3, [r7, #16]
 80038c2:	1ad3      	subs	r3, r2, r3
 80038c4:	2b02      	cmp	r3, #2
 80038c6:	d901      	bls.n	80038cc <HAL_RCC_OscConfig+0x374>
        {
          return HAL_TIMEOUT;
 80038c8:	2303      	movs	r3, #3
 80038ca:	e2a1      	b.n	8003e10 <HAL_RCC_OscConfig+0x8b8>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80038cc:	4ba6      	ldr	r3, [pc, #664]	; (8003b68 <HAL_RCC_OscConfig+0x610>)
 80038ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038d0:	2202      	movs	r2, #2
 80038d2:	4013      	ands	r3, r2
 80038d4:	d1f1      	bne.n	80038ba <HAL_RCC_OscConfig+0x362>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	2204      	movs	r2, #4
 80038dc:	4013      	ands	r3, r2
 80038de:	d100      	bne.n	80038e2 <HAL_RCC_OscConfig+0x38a>
 80038e0:	e0c0      	b.n	8003a64 <HAL_RCC_OscConfig+0x50c>
  {
    FlagStatus       pwrclkchanged = RESET;
 80038e2:	2317      	movs	r3, #23
 80038e4:	18fb      	adds	r3, r7, r3
 80038e6:	2200      	movs	r2, #0
 80038e8:	701a      	strb	r2, [r3, #0]
    
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	689b      	ldr	r3, [r3, #8]
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d00e      	beq.n	8003910 <HAL_RCC_OscConfig+0x3b8>
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	689b      	ldr	r3, [r3, #8]
 80038f6:	2b01      	cmp	r3, #1
 80038f8:	d00a      	beq.n	8003910 <HAL_RCC_OscConfig+0x3b8>
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	689b      	ldr	r3, [r3, #8]
 80038fe:	2b05      	cmp	r3, #5
 8003900:	d006      	beq.n	8003910 <HAL_RCC_OscConfig+0x3b8>
 8003902:	23dd      	movs	r3, #221	; 0xdd
 8003904:	005a      	lsls	r2, r3, #1
 8003906:	4b99      	ldr	r3, [pc, #612]	; (8003b6c <HAL_RCC_OscConfig+0x614>)
 8003908:	0011      	movs	r1, r2
 800390a:	0018      	movs	r0, r3
 800390c:	f7fd f831 	bl	8000972 <assert_failed>

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003910:	4b95      	ldr	r3, [pc, #596]	; (8003b68 <HAL_RCC_OscConfig+0x610>)
 8003912:	69da      	ldr	r2, [r3, #28]
 8003914:	2380      	movs	r3, #128	; 0x80
 8003916:	055b      	lsls	r3, r3, #21
 8003918:	4013      	ands	r3, r2
 800391a:	d111      	bne.n	8003940 <HAL_RCC_OscConfig+0x3e8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800391c:	4b92      	ldr	r3, [pc, #584]	; (8003b68 <HAL_RCC_OscConfig+0x610>)
 800391e:	69da      	ldr	r2, [r3, #28]
 8003920:	4b91      	ldr	r3, [pc, #580]	; (8003b68 <HAL_RCC_OscConfig+0x610>)
 8003922:	2180      	movs	r1, #128	; 0x80
 8003924:	0549      	lsls	r1, r1, #21
 8003926:	430a      	orrs	r2, r1
 8003928:	61da      	str	r2, [r3, #28]
 800392a:	4b8f      	ldr	r3, [pc, #572]	; (8003b68 <HAL_RCC_OscConfig+0x610>)
 800392c:	69da      	ldr	r2, [r3, #28]
 800392e:	2380      	movs	r3, #128	; 0x80
 8003930:	055b      	lsls	r3, r3, #21
 8003932:	4013      	ands	r3, r2
 8003934:	60fb      	str	r3, [r7, #12]
 8003936:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8003938:	2317      	movs	r3, #23
 800393a:	18fb      	adds	r3, r7, r3
 800393c:	2201      	movs	r2, #1
 800393e:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003940:	4b8b      	ldr	r3, [pc, #556]	; (8003b70 <HAL_RCC_OscConfig+0x618>)
 8003942:	681a      	ldr	r2, [r3, #0]
 8003944:	2380      	movs	r3, #128	; 0x80
 8003946:	005b      	lsls	r3, r3, #1
 8003948:	4013      	ands	r3, r2
 800394a:	d11a      	bne.n	8003982 <HAL_RCC_OscConfig+0x42a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800394c:	4b88      	ldr	r3, [pc, #544]	; (8003b70 <HAL_RCC_OscConfig+0x618>)
 800394e:	681a      	ldr	r2, [r3, #0]
 8003950:	4b87      	ldr	r3, [pc, #540]	; (8003b70 <HAL_RCC_OscConfig+0x618>)
 8003952:	2180      	movs	r1, #128	; 0x80
 8003954:	0049      	lsls	r1, r1, #1
 8003956:	430a      	orrs	r2, r1
 8003958:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800395a:	f7fd ff1d 	bl	8001798 <HAL_GetTick>
 800395e:	0003      	movs	r3, r0
 8003960:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003962:	e008      	b.n	8003976 <HAL_RCC_OscConfig+0x41e>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003964:	f7fd ff18 	bl	8001798 <HAL_GetTick>
 8003968:	0002      	movs	r2, r0
 800396a:	693b      	ldr	r3, [r7, #16]
 800396c:	1ad3      	subs	r3, r2, r3
 800396e:	2b64      	cmp	r3, #100	; 0x64
 8003970:	d901      	bls.n	8003976 <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 8003972:	2303      	movs	r3, #3
 8003974:	e24c      	b.n	8003e10 <HAL_RCC_OscConfig+0x8b8>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003976:	4b7e      	ldr	r3, [pc, #504]	; (8003b70 <HAL_RCC_OscConfig+0x618>)
 8003978:	681a      	ldr	r2, [r3, #0]
 800397a:	2380      	movs	r3, #128	; 0x80
 800397c:	005b      	lsls	r3, r3, #1
 800397e:	4013      	ands	r3, r2
 8003980:	d0f0      	beq.n	8003964 <HAL_RCC_OscConfig+0x40c>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	689b      	ldr	r3, [r3, #8]
 8003986:	2b01      	cmp	r3, #1
 8003988:	d106      	bne.n	8003998 <HAL_RCC_OscConfig+0x440>
 800398a:	4b77      	ldr	r3, [pc, #476]	; (8003b68 <HAL_RCC_OscConfig+0x610>)
 800398c:	6a1a      	ldr	r2, [r3, #32]
 800398e:	4b76      	ldr	r3, [pc, #472]	; (8003b68 <HAL_RCC_OscConfig+0x610>)
 8003990:	2101      	movs	r1, #1
 8003992:	430a      	orrs	r2, r1
 8003994:	621a      	str	r2, [r3, #32]
 8003996:	e02d      	b.n	80039f4 <HAL_RCC_OscConfig+0x49c>
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	689b      	ldr	r3, [r3, #8]
 800399c:	2b00      	cmp	r3, #0
 800399e:	d10c      	bne.n	80039ba <HAL_RCC_OscConfig+0x462>
 80039a0:	4b71      	ldr	r3, [pc, #452]	; (8003b68 <HAL_RCC_OscConfig+0x610>)
 80039a2:	6a1a      	ldr	r2, [r3, #32]
 80039a4:	4b70      	ldr	r3, [pc, #448]	; (8003b68 <HAL_RCC_OscConfig+0x610>)
 80039a6:	2101      	movs	r1, #1
 80039a8:	438a      	bics	r2, r1
 80039aa:	621a      	str	r2, [r3, #32]
 80039ac:	4b6e      	ldr	r3, [pc, #440]	; (8003b68 <HAL_RCC_OscConfig+0x610>)
 80039ae:	6a1a      	ldr	r2, [r3, #32]
 80039b0:	4b6d      	ldr	r3, [pc, #436]	; (8003b68 <HAL_RCC_OscConfig+0x610>)
 80039b2:	2104      	movs	r1, #4
 80039b4:	438a      	bics	r2, r1
 80039b6:	621a      	str	r2, [r3, #32]
 80039b8:	e01c      	b.n	80039f4 <HAL_RCC_OscConfig+0x49c>
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	689b      	ldr	r3, [r3, #8]
 80039be:	2b05      	cmp	r3, #5
 80039c0:	d10c      	bne.n	80039dc <HAL_RCC_OscConfig+0x484>
 80039c2:	4b69      	ldr	r3, [pc, #420]	; (8003b68 <HAL_RCC_OscConfig+0x610>)
 80039c4:	6a1a      	ldr	r2, [r3, #32]
 80039c6:	4b68      	ldr	r3, [pc, #416]	; (8003b68 <HAL_RCC_OscConfig+0x610>)
 80039c8:	2104      	movs	r1, #4
 80039ca:	430a      	orrs	r2, r1
 80039cc:	621a      	str	r2, [r3, #32]
 80039ce:	4b66      	ldr	r3, [pc, #408]	; (8003b68 <HAL_RCC_OscConfig+0x610>)
 80039d0:	6a1a      	ldr	r2, [r3, #32]
 80039d2:	4b65      	ldr	r3, [pc, #404]	; (8003b68 <HAL_RCC_OscConfig+0x610>)
 80039d4:	2101      	movs	r1, #1
 80039d6:	430a      	orrs	r2, r1
 80039d8:	621a      	str	r2, [r3, #32]
 80039da:	e00b      	b.n	80039f4 <HAL_RCC_OscConfig+0x49c>
 80039dc:	4b62      	ldr	r3, [pc, #392]	; (8003b68 <HAL_RCC_OscConfig+0x610>)
 80039de:	6a1a      	ldr	r2, [r3, #32]
 80039e0:	4b61      	ldr	r3, [pc, #388]	; (8003b68 <HAL_RCC_OscConfig+0x610>)
 80039e2:	2101      	movs	r1, #1
 80039e4:	438a      	bics	r2, r1
 80039e6:	621a      	str	r2, [r3, #32]
 80039e8:	4b5f      	ldr	r3, [pc, #380]	; (8003b68 <HAL_RCC_OscConfig+0x610>)
 80039ea:	6a1a      	ldr	r2, [r3, #32]
 80039ec:	4b5e      	ldr	r3, [pc, #376]	; (8003b68 <HAL_RCC_OscConfig+0x610>)
 80039ee:	2104      	movs	r1, #4
 80039f0:	438a      	bics	r2, r1
 80039f2:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	689b      	ldr	r3, [r3, #8]
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d014      	beq.n	8003a26 <HAL_RCC_OscConfig+0x4ce>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80039fc:	f7fd fecc 	bl	8001798 <HAL_GetTick>
 8003a00:	0003      	movs	r3, r0
 8003a02:	613b      	str	r3, [r7, #16]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a04:	e009      	b.n	8003a1a <HAL_RCC_OscConfig+0x4c2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003a06:	f7fd fec7 	bl	8001798 <HAL_GetTick>
 8003a0a:	0002      	movs	r2, r0
 8003a0c:	693b      	ldr	r3, [r7, #16]
 8003a0e:	1ad3      	subs	r3, r2, r3
 8003a10:	4a58      	ldr	r2, [pc, #352]	; (8003b74 <HAL_RCC_OscConfig+0x61c>)
 8003a12:	4293      	cmp	r3, r2
 8003a14:	d901      	bls.n	8003a1a <HAL_RCC_OscConfig+0x4c2>
        {
          return HAL_TIMEOUT;
 8003a16:	2303      	movs	r3, #3
 8003a18:	e1fa      	b.n	8003e10 <HAL_RCC_OscConfig+0x8b8>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a1a:	4b53      	ldr	r3, [pc, #332]	; (8003b68 <HAL_RCC_OscConfig+0x610>)
 8003a1c:	6a1b      	ldr	r3, [r3, #32]
 8003a1e:	2202      	movs	r2, #2
 8003a20:	4013      	ands	r3, r2
 8003a22:	d0f0      	beq.n	8003a06 <HAL_RCC_OscConfig+0x4ae>
 8003a24:	e013      	b.n	8003a4e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003a26:	f7fd feb7 	bl	8001798 <HAL_GetTick>
 8003a2a:	0003      	movs	r3, r0
 8003a2c:	613b      	str	r3, [r7, #16]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003a2e:	e009      	b.n	8003a44 <HAL_RCC_OscConfig+0x4ec>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003a30:	f7fd feb2 	bl	8001798 <HAL_GetTick>
 8003a34:	0002      	movs	r2, r0
 8003a36:	693b      	ldr	r3, [r7, #16]
 8003a38:	1ad3      	subs	r3, r2, r3
 8003a3a:	4a4e      	ldr	r2, [pc, #312]	; (8003b74 <HAL_RCC_OscConfig+0x61c>)
 8003a3c:	4293      	cmp	r3, r2
 8003a3e:	d901      	bls.n	8003a44 <HAL_RCC_OscConfig+0x4ec>
        {
          return HAL_TIMEOUT;
 8003a40:	2303      	movs	r3, #3
 8003a42:	e1e5      	b.n	8003e10 <HAL_RCC_OscConfig+0x8b8>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003a44:	4b48      	ldr	r3, [pc, #288]	; (8003b68 <HAL_RCC_OscConfig+0x610>)
 8003a46:	6a1b      	ldr	r3, [r3, #32]
 8003a48:	2202      	movs	r2, #2
 8003a4a:	4013      	ands	r3, r2
 8003a4c:	d1f0      	bne.n	8003a30 <HAL_RCC_OscConfig+0x4d8>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003a4e:	2317      	movs	r3, #23
 8003a50:	18fb      	adds	r3, r7, r3
 8003a52:	781b      	ldrb	r3, [r3, #0]
 8003a54:	2b01      	cmp	r3, #1
 8003a56:	d105      	bne.n	8003a64 <HAL_RCC_OscConfig+0x50c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003a58:	4b43      	ldr	r3, [pc, #268]	; (8003b68 <HAL_RCC_OscConfig+0x610>)
 8003a5a:	69da      	ldr	r2, [r3, #28]
 8003a5c:	4b42      	ldr	r3, [pc, #264]	; (8003b68 <HAL_RCC_OscConfig+0x610>)
 8003a5e:	4946      	ldr	r1, [pc, #280]	; (8003b78 <HAL_RCC_OscConfig+0x620>)
 8003a60:	400a      	ands	r2, r1
 8003a62:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	2210      	movs	r2, #16
 8003a6a:	4013      	ands	r3, r2
 8003a6c:	d100      	bne.n	8003a70 <HAL_RCC_OscConfig+0x518>
 8003a6e:	e08c      	b.n	8003b8a <HAL_RCC_OscConfig+0x632>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	695b      	ldr	r3, [r3, #20]
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d00e      	beq.n	8003a96 <HAL_RCC_OscConfig+0x53e>
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	695b      	ldr	r3, [r3, #20]
 8003a7c:	2b01      	cmp	r3, #1
 8003a7e:	d00a      	beq.n	8003a96 <HAL_RCC_OscConfig+0x53e>
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	695b      	ldr	r3, [r3, #20]
 8003a84:	3305      	adds	r3, #5
 8003a86:	d006      	beq.n	8003a96 <HAL_RCC_OscConfig+0x53e>
 8003a88:	2380      	movs	r3, #128	; 0x80
 8003a8a:	009a      	lsls	r2, r3, #2
 8003a8c:	4b37      	ldr	r3, [pc, #220]	; (8003b6c <HAL_RCC_OscConfig+0x614>)
 8003a8e:	0011      	movs	r1, r2
 8003a90:	0018      	movs	r0, r3
 8003a92:	f7fc ff6e 	bl	8000972 <assert_failed>
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	699b      	ldr	r3, [r3, #24]
 8003a9a:	2b1f      	cmp	r3, #31
 8003a9c:	d905      	bls.n	8003aaa <HAL_RCC_OscConfig+0x552>
 8003a9e:	4a37      	ldr	r2, [pc, #220]	; (8003b7c <HAL_RCC_OscConfig+0x624>)
 8003aa0:	4b32      	ldr	r3, [pc, #200]	; (8003b6c <HAL_RCC_OscConfig+0x614>)
 8003aa2:	0011      	movs	r1, r2
 8003aa4:	0018      	movs	r0, r3
 8003aa6:	f7fc ff64 	bl	8000972 <assert_failed>

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	695b      	ldr	r3, [r3, #20]
 8003aae:	2b01      	cmp	r3, #1
 8003ab0:	d12a      	bne.n	8003b08 <HAL_RCC_OscConfig+0x5b0>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8003ab2:	4b2d      	ldr	r3, [pc, #180]	; (8003b68 <HAL_RCC_OscConfig+0x610>)
 8003ab4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003ab6:	4b2c      	ldr	r3, [pc, #176]	; (8003b68 <HAL_RCC_OscConfig+0x610>)
 8003ab8:	2104      	movs	r1, #4
 8003aba:	430a      	orrs	r2, r1
 8003abc:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8003abe:	4b2a      	ldr	r3, [pc, #168]	; (8003b68 <HAL_RCC_OscConfig+0x610>)
 8003ac0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003ac2:	4b29      	ldr	r3, [pc, #164]	; (8003b68 <HAL_RCC_OscConfig+0x610>)
 8003ac4:	2101      	movs	r1, #1
 8003ac6:	430a      	orrs	r2, r1
 8003ac8:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003aca:	f7fd fe65 	bl	8001798 <HAL_GetTick>
 8003ace:	0003      	movs	r3, r0
 8003ad0:	613b      	str	r3, [r7, #16]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8003ad2:	e008      	b.n	8003ae6 <HAL_RCC_OscConfig+0x58e>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8003ad4:	f7fd fe60 	bl	8001798 <HAL_GetTick>
 8003ad8:	0002      	movs	r2, r0
 8003ada:	693b      	ldr	r3, [r7, #16]
 8003adc:	1ad3      	subs	r3, r2, r3
 8003ade:	2b02      	cmp	r3, #2
 8003ae0:	d901      	bls.n	8003ae6 <HAL_RCC_OscConfig+0x58e>
        {
          return HAL_TIMEOUT;
 8003ae2:	2303      	movs	r3, #3
 8003ae4:	e194      	b.n	8003e10 <HAL_RCC_OscConfig+0x8b8>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8003ae6:	4b20      	ldr	r3, [pc, #128]	; (8003b68 <HAL_RCC_OscConfig+0x610>)
 8003ae8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003aea:	2202      	movs	r2, #2
 8003aec:	4013      	ands	r3, r2
 8003aee:	d0f1      	beq.n	8003ad4 <HAL_RCC_OscConfig+0x57c>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8003af0:	4b1d      	ldr	r3, [pc, #116]	; (8003b68 <HAL_RCC_OscConfig+0x610>)
 8003af2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003af4:	22f8      	movs	r2, #248	; 0xf8
 8003af6:	4393      	bics	r3, r2
 8003af8:	0019      	movs	r1, r3
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	699b      	ldr	r3, [r3, #24]
 8003afe:	00da      	lsls	r2, r3, #3
 8003b00:	4b19      	ldr	r3, [pc, #100]	; (8003b68 <HAL_RCC_OscConfig+0x610>)
 8003b02:	430a      	orrs	r2, r1
 8003b04:	635a      	str	r2, [r3, #52]	; 0x34
 8003b06:	e040      	b.n	8003b8a <HAL_RCC_OscConfig+0x632>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	695b      	ldr	r3, [r3, #20]
 8003b0c:	3305      	adds	r3, #5
 8003b0e:	d111      	bne.n	8003b34 <HAL_RCC_OscConfig+0x5dc>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8003b10:	4b15      	ldr	r3, [pc, #84]	; (8003b68 <HAL_RCC_OscConfig+0x610>)
 8003b12:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003b14:	4b14      	ldr	r3, [pc, #80]	; (8003b68 <HAL_RCC_OscConfig+0x610>)
 8003b16:	2104      	movs	r1, #4
 8003b18:	438a      	bics	r2, r1
 8003b1a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8003b1c:	4b12      	ldr	r3, [pc, #72]	; (8003b68 <HAL_RCC_OscConfig+0x610>)
 8003b1e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b20:	22f8      	movs	r2, #248	; 0xf8
 8003b22:	4393      	bics	r3, r2
 8003b24:	0019      	movs	r1, r3
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	699b      	ldr	r3, [r3, #24]
 8003b2a:	00da      	lsls	r2, r3, #3
 8003b2c:	4b0e      	ldr	r3, [pc, #56]	; (8003b68 <HAL_RCC_OscConfig+0x610>)
 8003b2e:	430a      	orrs	r2, r1
 8003b30:	635a      	str	r2, [r3, #52]	; 0x34
 8003b32:	e02a      	b.n	8003b8a <HAL_RCC_OscConfig+0x632>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8003b34:	4b0c      	ldr	r3, [pc, #48]	; (8003b68 <HAL_RCC_OscConfig+0x610>)
 8003b36:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003b38:	4b0b      	ldr	r3, [pc, #44]	; (8003b68 <HAL_RCC_OscConfig+0x610>)
 8003b3a:	2104      	movs	r1, #4
 8003b3c:	430a      	orrs	r2, r1
 8003b3e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8003b40:	4b09      	ldr	r3, [pc, #36]	; (8003b68 <HAL_RCC_OscConfig+0x610>)
 8003b42:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003b44:	4b08      	ldr	r3, [pc, #32]	; (8003b68 <HAL_RCC_OscConfig+0x610>)
 8003b46:	2101      	movs	r1, #1
 8003b48:	438a      	bics	r2, r1
 8003b4a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003b4c:	f7fd fe24 	bl	8001798 <HAL_GetTick>
 8003b50:	0003      	movs	r3, r0
 8003b52:	613b      	str	r3, [r7, #16]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8003b54:	e014      	b.n	8003b80 <HAL_RCC_OscConfig+0x628>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8003b56:	f7fd fe1f 	bl	8001798 <HAL_GetTick>
 8003b5a:	0002      	movs	r2, r0
 8003b5c:	693b      	ldr	r3, [r7, #16]
 8003b5e:	1ad3      	subs	r3, r2, r3
 8003b60:	2b02      	cmp	r3, #2
 8003b62:	d90d      	bls.n	8003b80 <HAL_RCC_OscConfig+0x628>
        {
          return HAL_TIMEOUT;
 8003b64:	2303      	movs	r3, #3
 8003b66:	e153      	b.n	8003e10 <HAL_RCC_OscConfig+0x8b8>
 8003b68:	40021000 	.word	0x40021000
 8003b6c:	080070cc 	.word	0x080070cc
 8003b70:	40007000 	.word	0x40007000
 8003b74:	00001388 	.word	0x00001388
 8003b78:	efffffff 	.word	0xefffffff
 8003b7c:	00000201 	.word	0x00000201
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8003b80:	4ba5      	ldr	r3, [pc, #660]	; (8003e18 <HAL_RCC_OscConfig+0x8c0>)
 8003b82:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b84:	2202      	movs	r2, #2
 8003b86:	4013      	ands	r3, r2
 8003b88:	d1e5      	bne.n	8003b56 <HAL_RCC_OscConfig+0x5fe>
  }
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	6a1b      	ldr	r3, [r3, #32]
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d00e      	beq.n	8003bb0 <HAL_RCC_OscConfig+0x658>
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	6a1b      	ldr	r3, [r3, #32]
 8003b96:	2b01      	cmp	r3, #1
 8003b98:	d00a      	beq.n	8003bb0 <HAL_RCC_OscConfig+0x658>
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	6a1b      	ldr	r3, [r3, #32]
 8003b9e:	2b02      	cmp	r3, #2
 8003ba0:	d006      	beq.n	8003bb0 <HAL_RCC_OscConfig+0x658>
 8003ba2:	239d      	movs	r3, #157	; 0x9d
 8003ba4:	009a      	lsls	r2, r3, #2
 8003ba6:	4b9d      	ldr	r3, [pc, #628]	; (8003e1c <HAL_RCC_OscConfig+0x8c4>)
 8003ba8:	0011      	movs	r1, r2
 8003baa:	0018      	movs	r0, r3
 8003bac:	f7fc fee1 	bl	8000972 <assert_failed>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	6a1b      	ldr	r3, [r3, #32]
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d100      	bne.n	8003bba <HAL_RCC_OscConfig+0x662>
 8003bb8:	e129      	b.n	8003e0e <HAL_RCC_OscConfig+0x8b6>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003bba:	4b97      	ldr	r3, [pc, #604]	; (8003e18 <HAL_RCC_OscConfig+0x8c0>)
 8003bbc:	685b      	ldr	r3, [r3, #4]
 8003bbe:	220c      	movs	r2, #12
 8003bc0:	4013      	ands	r3, r2
 8003bc2:	2b08      	cmp	r3, #8
 8003bc4:	d100      	bne.n	8003bc8 <HAL_RCC_OscConfig+0x670>
 8003bc6:	e120      	b.n	8003e0a <HAL_RCC_OscConfig+0x8b2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	6a1b      	ldr	r3, [r3, #32]
 8003bcc:	2b02      	cmp	r3, #2
 8003bce:	d000      	beq.n	8003bd2 <HAL_RCC_OscConfig+0x67a>
 8003bd0:	e100      	b.n	8003dd4 <HAL_RCC_OscConfig+0x87c>
      {
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d00b      	beq.n	8003bf2 <HAL_RCC_OscConfig+0x69a>
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003bde:	2380      	movs	r3, #128	; 0x80
 8003be0:	025b      	lsls	r3, r3, #9
 8003be2:	429a      	cmp	r2, r3
 8003be4:	d005      	beq.n	8003bf2 <HAL_RCC_OscConfig+0x69a>
 8003be6:	4a8e      	ldr	r2, [pc, #568]	; (8003e20 <HAL_RCC_OscConfig+0x8c8>)
 8003be8:	4b8c      	ldr	r3, [pc, #560]	; (8003e1c <HAL_RCC_OscConfig+0x8c4>)
 8003bea:	0011      	movs	r1, r2
 8003bec:	0018      	movs	r0, r3
 8003bee:	f7fc fec0 	bl	8000972 <assert_failed>
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d059      	beq.n	8003cae <HAL_RCC_OscConfig+0x756>
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003bfe:	2380      	movs	r3, #128	; 0x80
 8003c00:	02db      	lsls	r3, r3, #11
 8003c02:	429a      	cmp	r2, r3
 8003c04:	d053      	beq.n	8003cae <HAL_RCC_OscConfig+0x756>
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003c0a:	2380      	movs	r3, #128	; 0x80
 8003c0c:	031b      	lsls	r3, r3, #12
 8003c0e:	429a      	cmp	r2, r3
 8003c10:	d04d      	beq.n	8003cae <HAL_RCC_OscConfig+0x756>
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003c16:	23c0      	movs	r3, #192	; 0xc0
 8003c18:	031b      	lsls	r3, r3, #12
 8003c1a:	429a      	cmp	r2, r3
 8003c1c:	d047      	beq.n	8003cae <HAL_RCC_OscConfig+0x756>
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003c22:	2380      	movs	r3, #128	; 0x80
 8003c24:	035b      	lsls	r3, r3, #13
 8003c26:	429a      	cmp	r2, r3
 8003c28:	d041      	beq.n	8003cae <HAL_RCC_OscConfig+0x756>
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003c2e:	23a0      	movs	r3, #160	; 0xa0
 8003c30:	035b      	lsls	r3, r3, #13
 8003c32:	429a      	cmp	r2, r3
 8003c34:	d03b      	beq.n	8003cae <HAL_RCC_OscConfig+0x756>
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003c3a:	23c0      	movs	r3, #192	; 0xc0
 8003c3c:	035b      	lsls	r3, r3, #13
 8003c3e:	429a      	cmp	r2, r3
 8003c40:	d035      	beq.n	8003cae <HAL_RCC_OscConfig+0x756>
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003c46:	23e0      	movs	r3, #224	; 0xe0
 8003c48:	035b      	lsls	r3, r3, #13
 8003c4a:	429a      	cmp	r2, r3
 8003c4c:	d02f      	beq.n	8003cae <HAL_RCC_OscConfig+0x756>
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003c52:	2380      	movs	r3, #128	; 0x80
 8003c54:	039b      	lsls	r3, r3, #14
 8003c56:	429a      	cmp	r2, r3
 8003c58:	d029      	beq.n	8003cae <HAL_RCC_OscConfig+0x756>
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003c5e:	2390      	movs	r3, #144	; 0x90
 8003c60:	039b      	lsls	r3, r3, #14
 8003c62:	429a      	cmp	r2, r3
 8003c64:	d023      	beq.n	8003cae <HAL_RCC_OscConfig+0x756>
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003c6a:	23a0      	movs	r3, #160	; 0xa0
 8003c6c:	039b      	lsls	r3, r3, #14
 8003c6e:	429a      	cmp	r2, r3
 8003c70:	d01d      	beq.n	8003cae <HAL_RCC_OscConfig+0x756>
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003c76:	23b0      	movs	r3, #176	; 0xb0
 8003c78:	039b      	lsls	r3, r3, #14
 8003c7a:	429a      	cmp	r2, r3
 8003c7c:	d017      	beq.n	8003cae <HAL_RCC_OscConfig+0x756>
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003c82:	23c0      	movs	r3, #192	; 0xc0
 8003c84:	039b      	lsls	r3, r3, #14
 8003c86:	429a      	cmp	r2, r3
 8003c88:	d011      	beq.n	8003cae <HAL_RCC_OscConfig+0x756>
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003c8e:	23d0      	movs	r3, #208	; 0xd0
 8003c90:	039b      	lsls	r3, r3, #14
 8003c92:	429a      	cmp	r2, r3
 8003c94:	d00b      	beq.n	8003cae <HAL_RCC_OscConfig+0x756>
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003c9a:	23e0      	movs	r3, #224	; 0xe0
 8003c9c:	039b      	lsls	r3, r3, #14
 8003c9e:	429a      	cmp	r2, r3
 8003ca0:	d005      	beq.n	8003cae <HAL_RCC_OscConfig+0x756>
 8003ca2:	4a60      	ldr	r2, [pc, #384]	; (8003e24 <HAL_RCC_OscConfig+0x8cc>)
 8003ca4:	4b5d      	ldr	r3, [pc, #372]	; (8003e1c <HAL_RCC_OscConfig+0x8c4>)
 8003ca6:	0011      	movs	r1, r2
 8003ca8:	0018      	movs	r0, r3
 8003caa:	f7fc fe62 	bl	8000972 <assert_failed>
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d041      	beq.n	8003d3a <HAL_RCC_OscConfig+0x7e2>
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cba:	2b01      	cmp	r3, #1
 8003cbc:	d03d      	beq.n	8003d3a <HAL_RCC_OscConfig+0x7e2>
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cc2:	2b02      	cmp	r3, #2
 8003cc4:	d039      	beq.n	8003d3a <HAL_RCC_OscConfig+0x7e2>
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cca:	2b03      	cmp	r3, #3
 8003ccc:	d035      	beq.n	8003d3a <HAL_RCC_OscConfig+0x7e2>
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cd2:	2b04      	cmp	r3, #4
 8003cd4:	d031      	beq.n	8003d3a <HAL_RCC_OscConfig+0x7e2>
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cda:	2b05      	cmp	r3, #5
 8003cdc:	d02d      	beq.n	8003d3a <HAL_RCC_OscConfig+0x7e2>
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ce2:	2b06      	cmp	r3, #6
 8003ce4:	d029      	beq.n	8003d3a <HAL_RCC_OscConfig+0x7e2>
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cea:	2b07      	cmp	r3, #7
 8003cec:	d025      	beq.n	8003d3a <HAL_RCC_OscConfig+0x7e2>
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cf2:	2b08      	cmp	r3, #8
 8003cf4:	d021      	beq.n	8003d3a <HAL_RCC_OscConfig+0x7e2>
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cfa:	2b09      	cmp	r3, #9
 8003cfc:	d01d      	beq.n	8003d3a <HAL_RCC_OscConfig+0x7e2>
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d02:	2b0a      	cmp	r3, #10
 8003d04:	d019      	beq.n	8003d3a <HAL_RCC_OscConfig+0x7e2>
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d0a:	2b0b      	cmp	r3, #11
 8003d0c:	d015      	beq.n	8003d3a <HAL_RCC_OscConfig+0x7e2>
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d12:	2b0c      	cmp	r3, #12
 8003d14:	d011      	beq.n	8003d3a <HAL_RCC_OscConfig+0x7e2>
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d1a:	2b0d      	cmp	r3, #13
 8003d1c:	d00d      	beq.n	8003d3a <HAL_RCC_OscConfig+0x7e2>
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d22:	2b0e      	cmp	r3, #14
 8003d24:	d009      	beq.n	8003d3a <HAL_RCC_OscConfig+0x7e2>
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d2a:	2b0f      	cmp	r3, #15
 8003d2c:	d005      	beq.n	8003d3a <HAL_RCC_OscConfig+0x7e2>
 8003d2e:	4a3e      	ldr	r2, [pc, #248]	; (8003e28 <HAL_RCC_OscConfig+0x8d0>)
 8003d30:	4b3a      	ldr	r3, [pc, #232]	; (8003e1c <HAL_RCC_OscConfig+0x8c4>)
 8003d32:	0011      	movs	r1, r2
 8003d34:	0018      	movs	r0, r3
 8003d36:	f7fc fe1c 	bl	8000972 <assert_failed>
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003d3a:	4b37      	ldr	r3, [pc, #220]	; (8003e18 <HAL_RCC_OscConfig+0x8c0>)
 8003d3c:	681a      	ldr	r2, [r3, #0]
 8003d3e:	4b36      	ldr	r3, [pc, #216]	; (8003e18 <HAL_RCC_OscConfig+0x8c0>)
 8003d40:	493a      	ldr	r1, [pc, #232]	; (8003e2c <HAL_RCC_OscConfig+0x8d4>)
 8003d42:	400a      	ands	r2, r1
 8003d44:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d46:	f7fd fd27 	bl	8001798 <HAL_GetTick>
 8003d4a:	0003      	movs	r3, r0
 8003d4c:	613b      	str	r3, [r7, #16]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003d4e:	e008      	b.n	8003d62 <HAL_RCC_OscConfig+0x80a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003d50:	f7fd fd22 	bl	8001798 <HAL_GetTick>
 8003d54:	0002      	movs	r2, r0
 8003d56:	693b      	ldr	r3, [r7, #16]
 8003d58:	1ad3      	subs	r3, r2, r3
 8003d5a:	2b02      	cmp	r3, #2
 8003d5c:	d901      	bls.n	8003d62 <HAL_RCC_OscConfig+0x80a>
          {
            return HAL_TIMEOUT;
 8003d5e:	2303      	movs	r3, #3
 8003d60:	e056      	b.n	8003e10 <HAL_RCC_OscConfig+0x8b8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003d62:	4b2d      	ldr	r3, [pc, #180]	; (8003e18 <HAL_RCC_OscConfig+0x8c0>)
 8003d64:	681a      	ldr	r2, [r3, #0]
 8003d66:	2380      	movs	r3, #128	; 0x80
 8003d68:	049b      	lsls	r3, r3, #18
 8003d6a:	4013      	ands	r3, r2
 8003d6c:	d1f0      	bne.n	8003d50 <HAL_RCC_OscConfig+0x7f8>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003d6e:	4b2a      	ldr	r3, [pc, #168]	; (8003e18 <HAL_RCC_OscConfig+0x8c0>)
 8003d70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d72:	220f      	movs	r2, #15
 8003d74:	4393      	bics	r3, r2
 8003d76:	0019      	movs	r1, r3
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d7c:	4b26      	ldr	r3, [pc, #152]	; (8003e18 <HAL_RCC_OscConfig+0x8c0>)
 8003d7e:	430a      	orrs	r2, r1
 8003d80:	62da      	str	r2, [r3, #44]	; 0x2c
 8003d82:	4b25      	ldr	r3, [pc, #148]	; (8003e18 <HAL_RCC_OscConfig+0x8c0>)
 8003d84:	685b      	ldr	r3, [r3, #4]
 8003d86:	4a2a      	ldr	r2, [pc, #168]	; (8003e30 <HAL_RCC_OscConfig+0x8d8>)
 8003d88:	4013      	ands	r3, r2
 8003d8a:	0019      	movs	r1, r3
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d94:	431a      	orrs	r2, r3
 8003d96:	4b20      	ldr	r3, [pc, #128]	; (8003e18 <HAL_RCC_OscConfig+0x8c0>)
 8003d98:	430a      	orrs	r2, r1
 8003d9a:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003d9c:	4b1e      	ldr	r3, [pc, #120]	; (8003e18 <HAL_RCC_OscConfig+0x8c0>)
 8003d9e:	681a      	ldr	r2, [r3, #0]
 8003da0:	4b1d      	ldr	r3, [pc, #116]	; (8003e18 <HAL_RCC_OscConfig+0x8c0>)
 8003da2:	2180      	movs	r1, #128	; 0x80
 8003da4:	0449      	lsls	r1, r1, #17
 8003da6:	430a      	orrs	r2, r1
 8003da8:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003daa:	f7fd fcf5 	bl	8001798 <HAL_GetTick>
 8003dae:	0003      	movs	r3, r0
 8003db0:	613b      	str	r3, [r7, #16]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003db2:	e008      	b.n	8003dc6 <HAL_RCC_OscConfig+0x86e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003db4:	f7fd fcf0 	bl	8001798 <HAL_GetTick>
 8003db8:	0002      	movs	r2, r0
 8003dba:	693b      	ldr	r3, [r7, #16]
 8003dbc:	1ad3      	subs	r3, r2, r3
 8003dbe:	2b02      	cmp	r3, #2
 8003dc0:	d901      	bls.n	8003dc6 <HAL_RCC_OscConfig+0x86e>
          {
            return HAL_TIMEOUT;
 8003dc2:	2303      	movs	r3, #3
 8003dc4:	e024      	b.n	8003e10 <HAL_RCC_OscConfig+0x8b8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003dc6:	4b14      	ldr	r3, [pc, #80]	; (8003e18 <HAL_RCC_OscConfig+0x8c0>)
 8003dc8:	681a      	ldr	r2, [r3, #0]
 8003dca:	2380      	movs	r3, #128	; 0x80
 8003dcc:	049b      	lsls	r3, r3, #18
 8003dce:	4013      	ands	r3, r2
 8003dd0:	d0f0      	beq.n	8003db4 <HAL_RCC_OscConfig+0x85c>
 8003dd2:	e01c      	b.n	8003e0e <HAL_RCC_OscConfig+0x8b6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003dd4:	4b10      	ldr	r3, [pc, #64]	; (8003e18 <HAL_RCC_OscConfig+0x8c0>)
 8003dd6:	681a      	ldr	r2, [r3, #0]
 8003dd8:	4b0f      	ldr	r3, [pc, #60]	; (8003e18 <HAL_RCC_OscConfig+0x8c0>)
 8003dda:	4914      	ldr	r1, [pc, #80]	; (8003e2c <HAL_RCC_OscConfig+0x8d4>)
 8003ddc:	400a      	ands	r2, r1
 8003dde:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003de0:	f7fd fcda 	bl	8001798 <HAL_GetTick>
 8003de4:	0003      	movs	r3, r0
 8003de6:	613b      	str	r3, [r7, #16]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003de8:	e008      	b.n	8003dfc <HAL_RCC_OscConfig+0x8a4>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003dea:	f7fd fcd5 	bl	8001798 <HAL_GetTick>
 8003dee:	0002      	movs	r2, r0
 8003df0:	693b      	ldr	r3, [r7, #16]
 8003df2:	1ad3      	subs	r3, r2, r3
 8003df4:	2b02      	cmp	r3, #2
 8003df6:	d901      	bls.n	8003dfc <HAL_RCC_OscConfig+0x8a4>
          {
            return HAL_TIMEOUT;
 8003df8:	2303      	movs	r3, #3
 8003dfa:	e009      	b.n	8003e10 <HAL_RCC_OscConfig+0x8b8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003dfc:	4b06      	ldr	r3, [pc, #24]	; (8003e18 <HAL_RCC_OscConfig+0x8c0>)
 8003dfe:	681a      	ldr	r2, [r3, #0]
 8003e00:	2380      	movs	r3, #128	; 0x80
 8003e02:	049b      	lsls	r3, r3, #18
 8003e04:	4013      	ands	r3, r2
 8003e06:	d1f0      	bne.n	8003dea <HAL_RCC_OscConfig+0x892>
 8003e08:	e001      	b.n	8003e0e <HAL_RCC_OscConfig+0x8b6>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8003e0a:	2301      	movs	r3, #1
 8003e0c:	e000      	b.n	8003e10 <HAL_RCC_OscConfig+0x8b8>
    }
  }
  
  return HAL_OK;
 8003e0e:	2300      	movs	r3, #0
}
 8003e10:	0018      	movs	r0, r3
 8003e12:	46bd      	mov	sp, r7
 8003e14:	b006      	add	sp, #24
 8003e16:	bd80      	pop	{r7, pc}
 8003e18:	40021000 	.word	0x40021000
 8003e1c:	080070cc 	.word	0x080070cc
 8003e20:	0000027d 	.word	0x0000027d
 8003e24:	0000027e 	.word	0x0000027e
 8003e28:	0000027f 	.word	0x0000027f
 8003e2c:	feffffff 	.word	0xfeffffff
 8003e30:	ffc2ffff 	.word	0xffc2ffff

08003e34 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003e34:	b580      	push	{r7, lr}
 8003e36:	b084      	sub	sp, #16
 8003e38:	af00      	add	r7, sp, #0
 8003e3a:	6078      	str	r0, [r7, #4]
 8003e3c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8003e3e:	2300      	movs	r3, #0
 8003e40:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d105      	bne.n	8003e54 <HAL_RCC_ClockConfig+0x20>
 8003e48:	4aac      	ldr	r2, [pc, #688]	; (80040fc <HAL_RCC_ClockConfig+0x2c8>)
 8003e4a:	4bad      	ldr	r3, [pc, #692]	; (8004100 <HAL_RCC_ClockConfig+0x2cc>)
 8003e4c:	0011      	movs	r1, r2
 8003e4e:	0018      	movs	r0, r3
 8003e50:	f7fc fd8f 	bl	8000972 <assert_failed>
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	2201      	movs	r2, #1
 8003e5a:	4013      	ands	r3, r2
 8003e5c:	d10f      	bne.n	8003e7e <HAL_RCC_ClockConfig+0x4a>
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	2202      	movs	r2, #2
 8003e64:	4013      	ands	r3, r2
 8003e66:	d10a      	bne.n	8003e7e <HAL_RCC_ClockConfig+0x4a>
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	2204      	movs	r2, #4
 8003e6e:	4013      	ands	r3, r2
 8003e70:	d105      	bne.n	8003e7e <HAL_RCC_ClockConfig+0x4a>
 8003e72:	4aa4      	ldr	r2, [pc, #656]	; (8004104 <HAL_RCC_ClockConfig+0x2d0>)
 8003e74:	4ba2      	ldr	r3, [pc, #648]	; (8004100 <HAL_RCC_ClockConfig+0x2cc>)
 8003e76:	0011      	movs	r1, r2
 8003e78:	0018      	movs	r0, r3
 8003e7a:	f7fc fd7a 	bl	8000972 <assert_failed>
  assert_param(IS_FLASH_LATENCY(FLatency));
 8003e7e:	683b      	ldr	r3, [r7, #0]
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d009      	beq.n	8003e98 <HAL_RCC_ClockConfig+0x64>
 8003e84:	683b      	ldr	r3, [r7, #0]
 8003e86:	2b01      	cmp	r3, #1
 8003e88:	d006      	beq.n	8003e98 <HAL_RCC_ClockConfig+0x64>
 8003e8a:	23b7      	movs	r3, #183	; 0xb7
 8003e8c:	009a      	lsls	r2, r3, #2
 8003e8e:	4b9c      	ldr	r3, [pc, #624]	; (8004100 <HAL_RCC_ClockConfig+0x2cc>)
 8003e90:	0011      	movs	r1, r2
 8003e92:	0018      	movs	r0, r3
 8003e94:	f7fc fd6d 	bl	8000972 <assert_failed>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8003e98:	4b9b      	ldr	r3, [pc, #620]	; (8004108 <HAL_RCC_ClockConfig+0x2d4>)
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	2201      	movs	r2, #1
 8003e9e:	4013      	ands	r3, r2
 8003ea0:	683a      	ldr	r2, [r7, #0]
 8003ea2:	429a      	cmp	r2, r3
 8003ea4:	d911      	bls.n	8003eca <HAL_RCC_ClockConfig+0x96>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003ea6:	4b98      	ldr	r3, [pc, #608]	; (8004108 <HAL_RCC_ClockConfig+0x2d4>)
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	2201      	movs	r2, #1
 8003eac:	4393      	bics	r3, r2
 8003eae:	0019      	movs	r1, r3
 8003eb0:	4b95      	ldr	r3, [pc, #596]	; (8004108 <HAL_RCC_ClockConfig+0x2d4>)
 8003eb2:	683a      	ldr	r2, [r7, #0]
 8003eb4:	430a      	orrs	r2, r1
 8003eb6:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8003eb8:	4b93      	ldr	r3, [pc, #588]	; (8004108 <HAL_RCC_ClockConfig+0x2d4>)
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	2201      	movs	r2, #1
 8003ebe:	4013      	ands	r3, r2
 8003ec0:	683a      	ldr	r2, [r7, #0]
 8003ec2:	429a      	cmp	r2, r3
 8003ec4:	d001      	beq.n	8003eca <HAL_RCC_ClockConfig+0x96>
    {
      return HAL_ERROR;
 8003ec6:	2301      	movs	r3, #1
 8003ec8:	e114      	b.n	80040f4 <HAL_RCC_ClockConfig+0x2c0>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	2202      	movs	r2, #2
 8003ed0:	4013      	ands	r3, r2
 8003ed2:	d033      	beq.n	8003f3c <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	689b      	ldr	r3, [r3, #8]
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d025      	beq.n	8003f28 <HAL_RCC_ClockConfig+0xf4>
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	689b      	ldr	r3, [r3, #8]
 8003ee0:	2b80      	cmp	r3, #128	; 0x80
 8003ee2:	d021      	beq.n	8003f28 <HAL_RCC_ClockConfig+0xf4>
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	689b      	ldr	r3, [r3, #8]
 8003ee8:	2b90      	cmp	r3, #144	; 0x90
 8003eea:	d01d      	beq.n	8003f28 <HAL_RCC_ClockConfig+0xf4>
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	689b      	ldr	r3, [r3, #8]
 8003ef0:	2ba0      	cmp	r3, #160	; 0xa0
 8003ef2:	d019      	beq.n	8003f28 <HAL_RCC_ClockConfig+0xf4>
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	689b      	ldr	r3, [r3, #8]
 8003ef8:	2bb0      	cmp	r3, #176	; 0xb0
 8003efa:	d015      	beq.n	8003f28 <HAL_RCC_ClockConfig+0xf4>
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	689b      	ldr	r3, [r3, #8]
 8003f00:	2bc0      	cmp	r3, #192	; 0xc0
 8003f02:	d011      	beq.n	8003f28 <HAL_RCC_ClockConfig+0xf4>
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	689b      	ldr	r3, [r3, #8]
 8003f08:	2bd0      	cmp	r3, #208	; 0xd0
 8003f0a:	d00d      	beq.n	8003f28 <HAL_RCC_ClockConfig+0xf4>
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	689b      	ldr	r3, [r3, #8]
 8003f10:	2be0      	cmp	r3, #224	; 0xe0
 8003f12:	d009      	beq.n	8003f28 <HAL_RCC_ClockConfig+0xf4>
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	689b      	ldr	r3, [r3, #8]
 8003f18:	2bf0      	cmp	r3, #240	; 0xf0
 8003f1a:	d005      	beq.n	8003f28 <HAL_RCC_ClockConfig+0xf4>
 8003f1c:	4a7b      	ldr	r2, [pc, #492]	; (800410c <HAL_RCC_ClockConfig+0x2d8>)
 8003f1e:	4b78      	ldr	r3, [pc, #480]	; (8004100 <HAL_RCC_ClockConfig+0x2cc>)
 8003f20:	0011      	movs	r1, r2
 8003f22:	0018      	movs	r0, r3
 8003f24:	f7fc fd25 	bl	8000972 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003f28:	4b79      	ldr	r3, [pc, #484]	; (8004110 <HAL_RCC_ClockConfig+0x2dc>)
 8003f2a:	685b      	ldr	r3, [r3, #4]
 8003f2c:	22f0      	movs	r2, #240	; 0xf0
 8003f2e:	4393      	bics	r3, r2
 8003f30:	0019      	movs	r1, r3
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	689a      	ldr	r2, [r3, #8]
 8003f36:	4b76      	ldr	r3, [pc, #472]	; (8004110 <HAL_RCC_ClockConfig+0x2dc>)
 8003f38:	430a      	orrs	r2, r1
 8003f3a:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	2201      	movs	r2, #1
 8003f42:	4013      	ands	r3, r2
 8003f44:	d100      	bne.n	8003f48 <HAL_RCC_ClockConfig+0x114>
 8003f46:	e079      	b.n	800403c <HAL_RCC_ClockConfig+0x208>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	685b      	ldr	r3, [r3, #4]
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d00d      	beq.n	8003f6c <HAL_RCC_ClockConfig+0x138>
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	685b      	ldr	r3, [r3, #4]
 8003f54:	2b01      	cmp	r3, #1
 8003f56:	d009      	beq.n	8003f6c <HAL_RCC_ClockConfig+0x138>
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	685b      	ldr	r3, [r3, #4]
 8003f5c:	2b02      	cmp	r3, #2
 8003f5e:	d005      	beq.n	8003f6c <HAL_RCC_ClockConfig+0x138>
 8003f60:	4a6c      	ldr	r2, [pc, #432]	; (8004114 <HAL_RCC_ClockConfig+0x2e0>)
 8003f62:	4b67      	ldr	r3, [pc, #412]	; (8004100 <HAL_RCC_ClockConfig+0x2cc>)
 8003f64:	0011      	movs	r1, r2
 8003f66:	0018      	movs	r0, r3
 8003f68:	f7fc fd03 	bl	8000972 <assert_failed>
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	685b      	ldr	r3, [r3, #4]
 8003f70:	2b01      	cmp	r3, #1
 8003f72:	d107      	bne.n	8003f84 <HAL_RCC_ClockConfig+0x150>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003f74:	4b66      	ldr	r3, [pc, #408]	; (8004110 <HAL_RCC_ClockConfig+0x2dc>)
 8003f76:	681a      	ldr	r2, [r3, #0]
 8003f78:	2380      	movs	r3, #128	; 0x80
 8003f7a:	029b      	lsls	r3, r3, #10
 8003f7c:	4013      	ands	r3, r2
 8003f7e:	d114      	bne.n	8003faa <HAL_RCC_ClockConfig+0x176>
      {
        return HAL_ERROR;
 8003f80:	2301      	movs	r3, #1
 8003f82:	e0b7      	b.n	80040f4 <HAL_RCC_ClockConfig+0x2c0>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	685b      	ldr	r3, [r3, #4]
 8003f88:	2b02      	cmp	r3, #2
 8003f8a:	d107      	bne.n	8003f9c <HAL_RCC_ClockConfig+0x168>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003f8c:	4b60      	ldr	r3, [pc, #384]	; (8004110 <HAL_RCC_ClockConfig+0x2dc>)
 8003f8e:	681a      	ldr	r2, [r3, #0]
 8003f90:	2380      	movs	r3, #128	; 0x80
 8003f92:	049b      	lsls	r3, r3, #18
 8003f94:	4013      	ands	r3, r2
 8003f96:	d108      	bne.n	8003faa <HAL_RCC_ClockConfig+0x176>
      {
        return HAL_ERROR;
 8003f98:	2301      	movs	r3, #1
 8003f9a:	e0ab      	b.n	80040f4 <HAL_RCC_ClockConfig+0x2c0>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003f9c:	4b5c      	ldr	r3, [pc, #368]	; (8004110 <HAL_RCC_ClockConfig+0x2dc>)
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	2202      	movs	r2, #2
 8003fa2:	4013      	ands	r3, r2
 8003fa4:	d101      	bne.n	8003faa <HAL_RCC_ClockConfig+0x176>
      {
        return HAL_ERROR;
 8003fa6:	2301      	movs	r3, #1
 8003fa8:	e0a4      	b.n	80040f4 <HAL_RCC_ClockConfig+0x2c0>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003faa:	4b59      	ldr	r3, [pc, #356]	; (8004110 <HAL_RCC_ClockConfig+0x2dc>)
 8003fac:	685b      	ldr	r3, [r3, #4]
 8003fae:	2203      	movs	r2, #3
 8003fb0:	4393      	bics	r3, r2
 8003fb2:	0019      	movs	r1, r3
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	685a      	ldr	r2, [r3, #4]
 8003fb8:	4b55      	ldr	r3, [pc, #340]	; (8004110 <HAL_RCC_ClockConfig+0x2dc>)
 8003fba:	430a      	orrs	r2, r1
 8003fbc:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003fbe:	f7fd fbeb 	bl	8001798 <HAL_GetTick>
 8003fc2:	0003      	movs	r3, r0
 8003fc4:	60fb      	str	r3, [r7, #12]
    
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	685b      	ldr	r3, [r3, #4]
 8003fca:	2b01      	cmp	r3, #1
 8003fcc:	d111      	bne.n	8003ff2 <HAL_RCC_ClockConfig+0x1be>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8003fce:	e009      	b.n	8003fe4 <HAL_RCC_ClockConfig+0x1b0>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003fd0:	f7fd fbe2 	bl	8001798 <HAL_GetTick>
 8003fd4:	0002      	movs	r2, r0
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	1ad3      	subs	r3, r2, r3
 8003fda:	4a4f      	ldr	r2, [pc, #316]	; (8004118 <HAL_RCC_ClockConfig+0x2e4>)
 8003fdc:	4293      	cmp	r3, r2
 8003fde:	d901      	bls.n	8003fe4 <HAL_RCC_ClockConfig+0x1b0>
        {
          return HAL_TIMEOUT;
 8003fe0:	2303      	movs	r3, #3
 8003fe2:	e087      	b.n	80040f4 <HAL_RCC_ClockConfig+0x2c0>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8003fe4:	4b4a      	ldr	r3, [pc, #296]	; (8004110 <HAL_RCC_ClockConfig+0x2dc>)
 8003fe6:	685b      	ldr	r3, [r3, #4]
 8003fe8:	220c      	movs	r2, #12
 8003fea:	4013      	ands	r3, r2
 8003fec:	2b04      	cmp	r3, #4
 8003fee:	d1ef      	bne.n	8003fd0 <HAL_RCC_ClockConfig+0x19c>
 8003ff0:	e024      	b.n	800403c <HAL_RCC_ClockConfig+0x208>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	685b      	ldr	r3, [r3, #4]
 8003ff6:	2b02      	cmp	r3, #2
 8003ff8:	d11b      	bne.n	8004032 <HAL_RCC_ClockConfig+0x1fe>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003ffa:	e009      	b.n	8004010 <HAL_RCC_ClockConfig+0x1dc>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003ffc:	f7fd fbcc 	bl	8001798 <HAL_GetTick>
 8004000:	0002      	movs	r2, r0
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	1ad3      	subs	r3, r2, r3
 8004006:	4a44      	ldr	r2, [pc, #272]	; (8004118 <HAL_RCC_ClockConfig+0x2e4>)
 8004008:	4293      	cmp	r3, r2
 800400a:	d901      	bls.n	8004010 <HAL_RCC_ClockConfig+0x1dc>
        {
          return HAL_TIMEOUT;
 800400c:	2303      	movs	r3, #3
 800400e:	e071      	b.n	80040f4 <HAL_RCC_ClockConfig+0x2c0>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004010:	4b3f      	ldr	r3, [pc, #252]	; (8004110 <HAL_RCC_ClockConfig+0x2dc>)
 8004012:	685b      	ldr	r3, [r3, #4]
 8004014:	220c      	movs	r2, #12
 8004016:	4013      	ands	r3, r2
 8004018:	2b08      	cmp	r3, #8
 800401a:	d1ef      	bne.n	8003ffc <HAL_RCC_ClockConfig+0x1c8>
 800401c:	e00e      	b.n	800403c <HAL_RCC_ClockConfig+0x208>
#endif /* RCC_CFGR_SWS_HSI48 */
    else
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800401e:	f7fd fbbb 	bl	8001798 <HAL_GetTick>
 8004022:	0002      	movs	r2, r0
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	1ad3      	subs	r3, r2, r3
 8004028:	4a3b      	ldr	r2, [pc, #236]	; (8004118 <HAL_RCC_ClockConfig+0x2e4>)
 800402a:	4293      	cmp	r3, r2
 800402c:	d901      	bls.n	8004032 <HAL_RCC_ClockConfig+0x1fe>
        {
          return HAL_TIMEOUT;
 800402e:	2303      	movs	r3, #3
 8004030:	e060      	b.n	80040f4 <HAL_RCC_ClockConfig+0x2c0>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8004032:	4b37      	ldr	r3, [pc, #220]	; (8004110 <HAL_RCC_ClockConfig+0x2dc>)
 8004034:	685b      	ldr	r3, [r3, #4]
 8004036:	220c      	movs	r2, #12
 8004038:	4013      	ands	r3, r2
 800403a:	d1f0      	bne.n	800401e <HAL_RCC_ClockConfig+0x1ea>
        }
      }
    }      
  }    
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 800403c:	4b32      	ldr	r3, [pc, #200]	; (8004108 <HAL_RCC_ClockConfig+0x2d4>)
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	2201      	movs	r2, #1
 8004042:	4013      	ands	r3, r2
 8004044:	683a      	ldr	r2, [r7, #0]
 8004046:	429a      	cmp	r2, r3
 8004048:	d211      	bcs.n	800406e <HAL_RCC_ClockConfig+0x23a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800404a:	4b2f      	ldr	r3, [pc, #188]	; (8004108 <HAL_RCC_ClockConfig+0x2d4>)
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	2201      	movs	r2, #1
 8004050:	4393      	bics	r3, r2
 8004052:	0019      	movs	r1, r3
 8004054:	4b2c      	ldr	r3, [pc, #176]	; (8004108 <HAL_RCC_ClockConfig+0x2d4>)
 8004056:	683a      	ldr	r2, [r7, #0]
 8004058:	430a      	orrs	r2, r1
 800405a:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800405c:	4b2a      	ldr	r3, [pc, #168]	; (8004108 <HAL_RCC_ClockConfig+0x2d4>)
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	2201      	movs	r2, #1
 8004062:	4013      	ands	r3, r2
 8004064:	683a      	ldr	r2, [r7, #0]
 8004066:	429a      	cmp	r2, r3
 8004068:	d001      	beq.n	800406e <HAL_RCC_ClockConfig+0x23a>
    {
      return HAL_ERROR;
 800406a:	2301      	movs	r3, #1
 800406c:	e042      	b.n	80040f4 <HAL_RCC_ClockConfig+0x2c0>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	2204      	movs	r2, #4
 8004074:	4013      	ands	r3, r2
 8004076:	d02b      	beq.n	80040d0 <HAL_RCC_ClockConfig+0x29c>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	68db      	ldr	r3, [r3, #12]
 800407c:	2b00      	cmp	r3, #0
 800407e:	d01d      	beq.n	80040bc <HAL_RCC_ClockConfig+0x288>
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	68da      	ldr	r2, [r3, #12]
 8004084:	2380      	movs	r3, #128	; 0x80
 8004086:	00db      	lsls	r3, r3, #3
 8004088:	429a      	cmp	r2, r3
 800408a:	d017      	beq.n	80040bc <HAL_RCC_ClockConfig+0x288>
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	68da      	ldr	r2, [r3, #12]
 8004090:	23a0      	movs	r3, #160	; 0xa0
 8004092:	00db      	lsls	r3, r3, #3
 8004094:	429a      	cmp	r2, r3
 8004096:	d011      	beq.n	80040bc <HAL_RCC_ClockConfig+0x288>
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	68da      	ldr	r2, [r3, #12]
 800409c:	23c0      	movs	r3, #192	; 0xc0
 800409e:	00db      	lsls	r3, r3, #3
 80040a0:	429a      	cmp	r2, r3
 80040a2:	d00b      	beq.n	80040bc <HAL_RCC_ClockConfig+0x288>
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	68da      	ldr	r2, [r3, #12]
 80040a8:	23e0      	movs	r3, #224	; 0xe0
 80040aa:	00db      	lsls	r3, r3, #3
 80040ac:	429a      	cmp	r2, r3
 80040ae:	d005      	beq.n	80040bc <HAL_RCC_ClockConfig+0x288>
 80040b0:	4a1a      	ldr	r2, [pc, #104]	; (800411c <HAL_RCC_ClockConfig+0x2e8>)
 80040b2:	4b13      	ldr	r3, [pc, #76]	; (8004100 <HAL_RCC_ClockConfig+0x2cc>)
 80040b4:	0011      	movs	r1, r2
 80040b6:	0018      	movs	r0, r3
 80040b8:	f7fc fc5b 	bl	8000972 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80040bc:	4b14      	ldr	r3, [pc, #80]	; (8004110 <HAL_RCC_ClockConfig+0x2dc>)
 80040be:	685b      	ldr	r3, [r3, #4]
 80040c0:	4a17      	ldr	r2, [pc, #92]	; (8004120 <HAL_RCC_ClockConfig+0x2ec>)
 80040c2:	4013      	ands	r3, r2
 80040c4:	0019      	movs	r1, r3
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	68da      	ldr	r2, [r3, #12]
 80040ca:	4b11      	ldr	r3, [pc, #68]	; (8004110 <HAL_RCC_ClockConfig+0x2dc>)
 80040cc:	430a      	orrs	r2, r1
 80040ce:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80040d0:	f000 f82c 	bl	800412c <HAL_RCC_GetSysClockFreq>
 80040d4:	0001      	movs	r1, r0
 80040d6:	4b0e      	ldr	r3, [pc, #56]	; (8004110 <HAL_RCC_ClockConfig+0x2dc>)
 80040d8:	685b      	ldr	r3, [r3, #4]
 80040da:	091b      	lsrs	r3, r3, #4
 80040dc:	220f      	movs	r2, #15
 80040de:	4013      	ands	r3, r2
 80040e0:	4a10      	ldr	r2, [pc, #64]	; (8004124 <HAL_RCC_ClockConfig+0x2f0>)
 80040e2:	5cd3      	ldrb	r3, [r2, r3]
 80040e4:	000a      	movs	r2, r1
 80040e6:	40da      	lsrs	r2, r3
 80040e8:	4b0f      	ldr	r3, [pc, #60]	; (8004128 <HAL_RCC_ClockConfig+0x2f4>)
 80040ea:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 80040ec:	2000      	movs	r0, #0
 80040ee:	f7fd fb2b 	bl	8001748 <HAL_InitTick>
  
  return HAL_OK;
 80040f2:	2300      	movs	r3, #0
}
 80040f4:	0018      	movs	r0, r3
 80040f6:	46bd      	mov	sp, r7
 80040f8:	b004      	add	sp, #16
 80040fa:	bd80      	pop	{r7, pc}
 80040fc:	000002da 	.word	0x000002da
 8004100:	080070cc 	.word	0x080070cc
 8004104:	000002db 	.word	0x000002db
 8004108:	40022000 	.word	0x40022000
 800410c:	000002f3 	.word	0x000002f3
 8004110:	40021000 	.word	0x40021000
 8004114:	000002fa 	.word	0x000002fa
 8004118:	00001388 	.word	0x00001388
 800411c:	00000363 	.word	0x00000363
 8004120:	fffff8ff 	.word	0xfffff8ff
 8004124:	080071d4 	.word	0x080071d4
 8004128:	20000000 	.word	0x20000000

0800412c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800412c:	b590      	push	{r4, r7, lr}
 800412e:	b08f      	sub	sp, #60	; 0x3c
 8004130:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8004132:	2314      	movs	r3, #20
 8004134:	18fb      	adds	r3, r7, r3
 8004136:	4a2b      	ldr	r2, [pc, #172]	; (80041e4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004138:	ca13      	ldmia	r2!, {r0, r1, r4}
 800413a:	c313      	stmia	r3!, {r0, r1, r4}
 800413c:	6812      	ldr	r2, [r2, #0]
 800413e:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8004140:	1d3b      	adds	r3, r7, #4
 8004142:	4a29      	ldr	r2, [pc, #164]	; (80041e8 <HAL_RCC_GetSysClockFreq+0xbc>)
 8004144:	ca13      	ldmia	r2!, {r0, r1, r4}
 8004146:	c313      	stmia	r3!, {r0, r1, r4}
 8004148:	6812      	ldr	r2, [r2, #0]
 800414a:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800414c:	2300      	movs	r3, #0
 800414e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004150:	2300      	movs	r3, #0
 8004152:	62bb      	str	r3, [r7, #40]	; 0x28
 8004154:	2300      	movs	r3, #0
 8004156:	637b      	str	r3, [r7, #52]	; 0x34
 8004158:	2300      	movs	r3, #0
 800415a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 800415c:	2300      	movs	r3, #0
 800415e:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 8004160:	4b22      	ldr	r3, [pc, #136]	; (80041ec <HAL_RCC_GetSysClockFreq+0xc0>)
 8004162:	685b      	ldr	r3, [r3, #4]
 8004164:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004166:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004168:	220c      	movs	r2, #12
 800416a:	4013      	ands	r3, r2
 800416c:	2b04      	cmp	r3, #4
 800416e:	d002      	beq.n	8004176 <HAL_RCC_GetSysClockFreq+0x4a>
 8004170:	2b08      	cmp	r3, #8
 8004172:	d003      	beq.n	800417c <HAL_RCC_GetSysClockFreq+0x50>
 8004174:	e02d      	b.n	80041d2 <HAL_RCC_GetSysClockFreq+0xa6>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004176:	4b1e      	ldr	r3, [pc, #120]	; (80041f0 <HAL_RCC_GetSysClockFreq+0xc4>)
 8004178:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800417a:	e02d      	b.n	80041d8 <HAL_RCC_GetSysClockFreq+0xac>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 800417c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800417e:	0c9b      	lsrs	r3, r3, #18
 8004180:	220f      	movs	r2, #15
 8004182:	4013      	ands	r3, r2
 8004184:	2214      	movs	r2, #20
 8004186:	18ba      	adds	r2, r7, r2
 8004188:	5cd3      	ldrb	r3, [r2, r3]
 800418a:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 800418c:	4b17      	ldr	r3, [pc, #92]	; (80041ec <HAL_RCC_GetSysClockFreq+0xc0>)
 800418e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004190:	220f      	movs	r2, #15
 8004192:	4013      	ands	r3, r2
 8004194:	1d3a      	adds	r2, r7, #4
 8004196:	5cd3      	ldrb	r3, [r2, r3]
 8004198:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 800419a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800419c:	2380      	movs	r3, #128	; 0x80
 800419e:	025b      	lsls	r3, r3, #9
 80041a0:	4013      	ands	r3, r2
 80041a2:	d009      	beq.n	80041b8 <HAL_RCC_GetSysClockFreq+0x8c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (HSE_VALUE / prediv) * pllmul;
 80041a4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80041a6:	4812      	ldr	r0, [pc, #72]	; (80041f0 <HAL_RCC_GetSysClockFreq+0xc4>)
 80041a8:	f7fb ffae 	bl	8000108 <__udivsi3>
 80041ac:	0003      	movs	r3, r0
 80041ae:	001a      	movs	r2, r3
 80041b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041b2:	4353      	muls	r3, r2
 80041b4:	637b      	str	r3, [r7, #52]	; 0x34
 80041b6:	e009      	b.n	80041cc <HAL_RCC_GetSysClockFreq+0xa0>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (HSI_VALUE / prediv) * pllmul;
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1U) * pllmul);
 80041b8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80041ba:	000a      	movs	r2, r1
 80041bc:	0152      	lsls	r2, r2, #5
 80041be:	1a52      	subs	r2, r2, r1
 80041c0:	0193      	lsls	r3, r2, #6
 80041c2:	1a9b      	subs	r3, r3, r2
 80041c4:	00db      	lsls	r3, r3, #3
 80041c6:	185b      	adds	r3, r3, r1
 80041c8:	021b      	lsls	r3, r3, #8
 80041ca:	637b      	str	r3, [r7, #52]	; 0x34
#endif
      }
      sysclockfreq = pllclk;
 80041cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80041ce:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80041d0:	e002      	b.n	80041d8 <HAL_RCC_GetSysClockFreq+0xac>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80041d2:	4b07      	ldr	r3, [pc, #28]	; (80041f0 <HAL_RCC_GetSysClockFreq+0xc4>)
 80041d4:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80041d6:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 80041d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 80041da:	0018      	movs	r0, r3
 80041dc:	46bd      	mov	sp, r7
 80041de:	b00f      	add	sp, #60	; 0x3c
 80041e0:	bd90      	pop	{r4, r7, pc}
 80041e2:	46c0      	nop			; (mov r8, r8)
 80041e4:	08007104 	.word	0x08007104
 80041e8:	08007114 	.word	0x08007114
 80041ec:	40021000 	.word	0x40021000
 80041f0:	007a1200 	.word	0x007a1200

080041f4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80041f4:	b580      	push	{r7, lr}
 80041f6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80041f8:	4b02      	ldr	r3, [pc, #8]	; (8004204 <HAL_RCC_GetHCLKFreq+0x10>)
 80041fa:	681b      	ldr	r3, [r3, #0]
}
 80041fc:	0018      	movs	r0, r3
 80041fe:	46bd      	mov	sp, r7
 8004200:	bd80      	pop	{r7, pc}
 8004202:	46c0      	nop			; (mov r8, r8)
 8004204:	20000000 	.word	0x20000000

08004208 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004208:	b580      	push	{r7, lr}
 800420a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 800420c:	f7ff fff2 	bl	80041f4 <HAL_RCC_GetHCLKFreq>
 8004210:	0001      	movs	r1, r0
 8004212:	4b06      	ldr	r3, [pc, #24]	; (800422c <HAL_RCC_GetPCLK1Freq+0x24>)
 8004214:	685b      	ldr	r3, [r3, #4]
 8004216:	0a1b      	lsrs	r3, r3, #8
 8004218:	2207      	movs	r2, #7
 800421a:	4013      	ands	r3, r2
 800421c:	4a04      	ldr	r2, [pc, #16]	; (8004230 <HAL_RCC_GetPCLK1Freq+0x28>)
 800421e:	5cd3      	ldrb	r3, [r2, r3]
 8004220:	40d9      	lsrs	r1, r3
 8004222:	000b      	movs	r3, r1
}    
 8004224:	0018      	movs	r0, r3
 8004226:	46bd      	mov	sp, r7
 8004228:	bd80      	pop	{r7, pc}
 800422a:	46c0      	nop			; (mov r8, r8)
 800422c:	40021000 	.word	0x40021000
 8004230:	080071e4 	.word	0x080071e4

08004234 <HAL_TIM_Base_Init>:
  *         parameters in the TIM_HandleTypeDef and create the associated handle.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004234:	b580      	push	{r7, lr}
 8004236:	b082      	sub	sp, #8
 8004238:	af00      	add	r7, sp, #0
 800423a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if(htim == NULL)
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	2b00      	cmp	r3, #0
 8004240:	d101      	bne.n	8004246 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004242:	2301      	movs	r3, #1
 8004244:	e087      	b.n	8004356 <HAL_TIM_Base_Init+0x122>
  }

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	4a45      	ldr	r2, [pc, #276]	; (8004360 <HAL_TIM_Base_Init+0x12c>)
 800424c:	4293      	cmp	r3, r2
 800424e:	d028      	beq.n	80042a2 <HAL_TIM_Base_Init+0x6e>
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681a      	ldr	r2, [r3, #0]
 8004254:	2380      	movs	r3, #128	; 0x80
 8004256:	05db      	lsls	r3, r3, #23
 8004258:	429a      	cmp	r2, r3
 800425a:	d022      	beq.n	80042a2 <HAL_TIM_Base_Init+0x6e>
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	4a40      	ldr	r2, [pc, #256]	; (8004364 <HAL_TIM_Base_Init+0x130>)
 8004262:	4293      	cmp	r3, r2
 8004264:	d01d      	beq.n	80042a2 <HAL_TIM_Base_Init+0x6e>
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	4a3f      	ldr	r2, [pc, #252]	; (8004368 <HAL_TIM_Base_Init+0x134>)
 800426c:	4293      	cmp	r3, r2
 800426e:	d018      	beq.n	80042a2 <HAL_TIM_Base_Init+0x6e>
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	4a3d      	ldr	r2, [pc, #244]	; (800436c <HAL_TIM_Base_Init+0x138>)
 8004276:	4293      	cmp	r3, r2
 8004278:	d013      	beq.n	80042a2 <HAL_TIM_Base_Init+0x6e>
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	4a3c      	ldr	r2, [pc, #240]	; (8004370 <HAL_TIM_Base_Init+0x13c>)
 8004280:	4293      	cmp	r3, r2
 8004282:	d00e      	beq.n	80042a2 <HAL_TIM_Base_Init+0x6e>
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	4a3a      	ldr	r2, [pc, #232]	; (8004374 <HAL_TIM_Base_Init+0x140>)
 800428a:	4293      	cmp	r3, r2
 800428c:	d009      	beq.n	80042a2 <HAL_TIM_Base_Init+0x6e>
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	4a39      	ldr	r2, [pc, #228]	; (8004378 <HAL_TIM_Base_Init+0x144>)
 8004294:	4293      	cmp	r3, r2
 8004296:	d004      	beq.n	80042a2 <HAL_TIM_Base_Init+0x6e>
 8004298:	4b38      	ldr	r3, [pc, #224]	; (800437c <HAL_TIM_Base_Init+0x148>)
 800429a:	21d4      	movs	r1, #212	; 0xd4
 800429c:	0018      	movs	r0, r3
 800429e:	f7fc fb68 	bl	8000972 <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	689b      	ldr	r3, [r3, #8]
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d014      	beq.n	80042d4 <HAL_TIM_Base_Init+0xa0>
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	689b      	ldr	r3, [r3, #8]
 80042ae:	2b10      	cmp	r3, #16
 80042b0:	d010      	beq.n	80042d4 <HAL_TIM_Base_Init+0xa0>
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	689b      	ldr	r3, [r3, #8]
 80042b6:	2b20      	cmp	r3, #32
 80042b8:	d00c      	beq.n	80042d4 <HAL_TIM_Base_Init+0xa0>
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	689b      	ldr	r3, [r3, #8]
 80042be:	2b40      	cmp	r3, #64	; 0x40
 80042c0:	d008      	beq.n	80042d4 <HAL_TIM_Base_Init+0xa0>
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	689b      	ldr	r3, [r3, #8]
 80042c6:	2b60      	cmp	r3, #96	; 0x60
 80042c8:	d004      	beq.n	80042d4 <HAL_TIM_Base_Init+0xa0>
 80042ca:	4b2c      	ldr	r3, [pc, #176]	; (800437c <HAL_TIM_Base_Init+0x148>)
 80042cc:	21d5      	movs	r1, #213	; 0xd5
 80042ce:	0018      	movs	r0, r3
 80042d0:	f7fc fb4f 	bl	8000972 <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	691b      	ldr	r3, [r3, #16]
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d010      	beq.n	80042fe <HAL_TIM_Base_Init+0xca>
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	691a      	ldr	r2, [r3, #16]
 80042e0:	2380      	movs	r3, #128	; 0x80
 80042e2:	005b      	lsls	r3, r3, #1
 80042e4:	429a      	cmp	r2, r3
 80042e6:	d00a      	beq.n	80042fe <HAL_TIM_Base_Init+0xca>
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	691a      	ldr	r2, [r3, #16]
 80042ec:	2380      	movs	r3, #128	; 0x80
 80042ee:	009b      	lsls	r3, r3, #2
 80042f0:	429a      	cmp	r2, r3
 80042f2:	d004      	beq.n	80042fe <HAL_TIM_Base_Init+0xca>
 80042f4:	4b21      	ldr	r3, [pc, #132]	; (800437c <HAL_TIM_Base_Init+0x148>)
 80042f6:	21d6      	movs	r1, #214	; 0xd6
 80042f8:	0018      	movs	r0, r3
 80042fa:	f7fc fb3a 	bl	8000972 <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	699b      	ldr	r3, [r3, #24]
 8004302:	2b00      	cmp	r3, #0
 8004304:	d008      	beq.n	8004318 <HAL_TIM_Base_Init+0xe4>
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	699b      	ldr	r3, [r3, #24]
 800430a:	2b80      	cmp	r3, #128	; 0x80
 800430c:	d004      	beq.n	8004318 <HAL_TIM_Base_Init+0xe4>
 800430e:	4b1b      	ldr	r3, [pc, #108]	; (800437c <HAL_TIM_Base_Init+0x148>)
 8004310:	21d7      	movs	r1, #215	; 0xd7
 8004312:	0018      	movs	r0, r3
 8004314:	f7fc fb2d 	bl	8000972 <assert_failed>

  if(htim->State == HAL_TIM_STATE_RESET)
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	223d      	movs	r2, #61	; 0x3d
 800431c:	5c9b      	ldrb	r3, [r3, r2]
 800431e:	b2db      	uxtb	r3, r3
 8004320:	2b00      	cmp	r3, #0
 8004322:	d107      	bne.n	8004334 <HAL_TIM_Base_Init+0x100>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	223c      	movs	r2, #60	; 0x3c
 8004328:	2100      	movs	r1, #0
 800432a:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	0018      	movs	r0, r3
 8004330:	f7fc fd28 	bl	8000d84 <HAL_TIM_Base_MspInit>
  }

  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	223d      	movs	r2, #61	; 0x3d
 8004338:	2102      	movs	r1, #2
 800433a:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681a      	ldr	r2, [r3, #0]
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	3304      	adds	r3, #4
 8004344:	0019      	movs	r1, r3
 8004346:	0010      	movs	r0, r2
 8004348:	f001 f996 	bl	8005678 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	223d      	movs	r2, #61	; 0x3d
 8004350:	2101      	movs	r1, #1
 8004352:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004354:	2300      	movs	r3, #0
}
 8004356:	0018      	movs	r0, r3
 8004358:	46bd      	mov	sp, r7
 800435a:	b002      	add	sp, #8
 800435c:	bd80      	pop	{r7, pc}
 800435e:	46c0      	nop			; (mov r8, r8)
 8004360:	40012c00 	.word	0x40012c00
 8004364:	40000400 	.word	0x40000400
 8004368:	40001000 	.word	0x40001000
 800436c:	40002000 	.word	0x40002000
 8004370:	40014000 	.word	0x40014000
 8004374:	40014400 	.word	0x40014400
 8004378:	40014800 	.word	0x40014800
 800437c:	08007124 	.word	0x08007124

08004380 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM handle
  * @retval HAL status
*/
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8004380:	b580      	push	{r7, lr}
 8004382:	b082      	sub	sp, #8
 8004384:	af00      	add	r7, sp, #0
 8004386:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	4a21      	ldr	r2, [pc, #132]	; (8004414 <HAL_TIM_Base_Start+0x94>)
 800438e:	4293      	cmp	r3, r2
 8004390:	d02a      	beq.n	80043e8 <HAL_TIM_Base_Start+0x68>
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681a      	ldr	r2, [r3, #0]
 8004396:	2380      	movs	r3, #128	; 0x80
 8004398:	05db      	lsls	r3, r3, #23
 800439a:	429a      	cmp	r2, r3
 800439c:	d024      	beq.n	80043e8 <HAL_TIM_Base_Start+0x68>
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	4a1d      	ldr	r2, [pc, #116]	; (8004418 <HAL_TIM_Base_Start+0x98>)
 80043a4:	4293      	cmp	r3, r2
 80043a6:	d01f      	beq.n	80043e8 <HAL_TIM_Base_Start+0x68>
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	4a1b      	ldr	r2, [pc, #108]	; (800441c <HAL_TIM_Base_Start+0x9c>)
 80043ae:	4293      	cmp	r3, r2
 80043b0:	d01a      	beq.n	80043e8 <HAL_TIM_Base_Start+0x68>
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	4a1a      	ldr	r2, [pc, #104]	; (8004420 <HAL_TIM_Base_Start+0xa0>)
 80043b8:	4293      	cmp	r3, r2
 80043ba:	d015      	beq.n	80043e8 <HAL_TIM_Base_Start+0x68>
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	4a18      	ldr	r2, [pc, #96]	; (8004424 <HAL_TIM_Base_Start+0xa4>)
 80043c2:	4293      	cmp	r3, r2
 80043c4:	d010      	beq.n	80043e8 <HAL_TIM_Base_Start+0x68>
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	4a17      	ldr	r2, [pc, #92]	; (8004428 <HAL_TIM_Base_Start+0xa8>)
 80043cc:	4293      	cmp	r3, r2
 80043ce:	d00b      	beq.n	80043e8 <HAL_TIM_Base_Start+0x68>
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	4a15      	ldr	r2, [pc, #84]	; (800442c <HAL_TIM_Base_Start+0xac>)
 80043d6:	4293      	cmp	r3, r2
 80043d8:	d006      	beq.n	80043e8 <HAL_TIM_Base_Start+0x68>
 80043da:	2398      	movs	r3, #152	; 0x98
 80043dc:	005a      	lsls	r2, r3, #1
 80043de:	4b14      	ldr	r3, [pc, #80]	; (8004430 <HAL_TIM_Base_Start+0xb0>)
 80043e0:	0011      	movs	r1, r2
 80043e2:	0018      	movs	r0, r3
 80043e4:	f7fc fac5 	bl	8000972 <assert_failed>

  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	223d      	movs	r2, #61	; 0x3d
 80043ec:	2102      	movs	r1, #2
 80043ee:	5499      	strb	r1, [r3, r2]

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	681a      	ldr	r2, [r3, #0]
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	2101      	movs	r1, #1
 80043fc:	430a      	orrs	r2, r1
 80043fe:	601a      	str	r2, [r3, #0]

  /* Change the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	223d      	movs	r2, #61	; 0x3d
 8004404:	2101      	movs	r1, #1
 8004406:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8004408:	2300      	movs	r3, #0
}
 800440a:	0018      	movs	r0, r3
 800440c:	46bd      	mov	sp, r7
 800440e:	b002      	add	sp, #8
 8004410:	bd80      	pop	{r7, pc}
 8004412:	46c0      	nop			; (mov r8, r8)
 8004414:	40012c00 	.word	0x40012c00
 8004418:	40000400 	.word	0x40000400
 800441c:	40001000 	.word	0x40001000
 8004420:	40002000 	.word	0x40002000
 8004424:	40014000 	.word	0x40014000
 8004428:	40014400 	.word	0x40014400
 800442c:	40014800 	.word	0x40014800
 8004430:	08007124 	.word	0x08007124

08004434 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM handle
  * @retval HAL status
*/
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 8004434:	b580      	push	{r7, lr}
 8004436:	b082      	sub	sp, #8
 8004438:	af00      	add	r7, sp, #0
 800443a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	4a27      	ldr	r2, [pc, #156]	; (80044e0 <HAL_TIM_Base_Stop+0xac>)
 8004442:	4293      	cmp	r3, r2
 8004444:	d02b      	beq.n	800449e <HAL_TIM_Base_Stop+0x6a>
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681a      	ldr	r2, [r3, #0]
 800444a:	2380      	movs	r3, #128	; 0x80
 800444c:	05db      	lsls	r3, r3, #23
 800444e:	429a      	cmp	r2, r3
 8004450:	d025      	beq.n	800449e <HAL_TIM_Base_Stop+0x6a>
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	4a23      	ldr	r2, [pc, #140]	; (80044e4 <HAL_TIM_Base_Stop+0xb0>)
 8004458:	4293      	cmp	r3, r2
 800445a:	d020      	beq.n	800449e <HAL_TIM_Base_Stop+0x6a>
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	4a21      	ldr	r2, [pc, #132]	; (80044e8 <HAL_TIM_Base_Stop+0xb4>)
 8004462:	4293      	cmp	r3, r2
 8004464:	d01b      	beq.n	800449e <HAL_TIM_Base_Stop+0x6a>
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	4a20      	ldr	r2, [pc, #128]	; (80044ec <HAL_TIM_Base_Stop+0xb8>)
 800446c:	4293      	cmp	r3, r2
 800446e:	d016      	beq.n	800449e <HAL_TIM_Base_Stop+0x6a>
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	4a1e      	ldr	r2, [pc, #120]	; (80044f0 <HAL_TIM_Base_Stop+0xbc>)
 8004476:	4293      	cmp	r3, r2
 8004478:	d011      	beq.n	800449e <HAL_TIM_Base_Stop+0x6a>
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	4a1d      	ldr	r2, [pc, #116]	; (80044f4 <HAL_TIM_Base_Stop+0xc0>)
 8004480:	4293      	cmp	r3, r2
 8004482:	d00c      	beq.n	800449e <HAL_TIM_Base_Stop+0x6a>
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	4a1b      	ldr	r2, [pc, #108]	; (80044f8 <HAL_TIM_Base_Stop+0xc4>)
 800448a:	4293      	cmp	r3, r2
 800448c:	d007      	beq.n	800449e <HAL_TIM_Base_Stop+0x6a>
 800448e:	2348      	movs	r3, #72	; 0x48
 8004490:	33ff      	adds	r3, #255	; 0xff
 8004492:	001a      	movs	r2, r3
 8004494:	4b19      	ldr	r3, [pc, #100]	; (80044fc <HAL_TIM_Base_Stop+0xc8>)
 8004496:	0011      	movs	r1, r2
 8004498:	0018      	movs	r0, r3
 800449a:	f7fc fa6a 	bl	8000972 <assert_failed>

  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	223d      	movs	r2, #61	; 0x3d
 80044a2:	2102      	movs	r1, #2
 80044a4:	5499      	strb	r1, [r3, r2]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	6a1b      	ldr	r3, [r3, #32]
 80044ac:	4a14      	ldr	r2, [pc, #80]	; (8004500 <HAL_TIM_Base_Stop+0xcc>)
 80044ae:	4013      	ands	r3, r2
 80044b0:	d10d      	bne.n	80044ce <HAL_TIM_Base_Stop+0x9a>
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	6a1b      	ldr	r3, [r3, #32]
 80044b8:	4a12      	ldr	r2, [pc, #72]	; (8004504 <HAL_TIM_Base_Stop+0xd0>)
 80044ba:	4013      	ands	r3, r2
 80044bc:	d107      	bne.n	80044ce <HAL_TIM_Base_Stop+0x9a>
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	681a      	ldr	r2, [r3, #0]
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	2101      	movs	r1, #1
 80044ca:	438a      	bics	r2, r1
 80044cc:	601a      	str	r2, [r3, #0]

  /* Change the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	223d      	movs	r2, #61	; 0x3d
 80044d2:	2101      	movs	r1, #1
 80044d4:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 80044d6:	2300      	movs	r3, #0
}
 80044d8:	0018      	movs	r0, r3
 80044da:	46bd      	mov	sp, r7
 80044dc:	b002      	add	sp, #8
 80044de:	bd80      	pop	{r7, pc}
 80044e0:	40012c00 	.word	0x40012c00
 80044e4:	40000400 	.word	0x40000400
 80044e8:	40001000 	.word	0x40001000
 80044ec:	40002000 	.word	0x40002000
 80044f0:	40014000 	.word	0x40014000
 80044f4:	40014400 	.word	0x40014400
 80044f8:	40014800 	.word	0x40014800
 80044fc:	08007124 	.word	0x08007124
 8004500:	00001111 	.word	0x00001111
 8004504:	00000444 	.word	0x00000444

08004508 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM handle
  * @retval HAL status
*/
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004508:	b580      	push	{r7, lr}
 800450a:	b082      	sub	sp, #8
 800450c:	af00      	add	r7, sp, #0
 800450e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	4a21      	ldr	r2, [pc, #132]	; (800459c <HAL_TIM_Base_Start_IT+0x94>)
 8004516:	4293      	cmp	r3, r2
 8004518:	d02a      	beq.n	8004570 <HAL_TIM_Base_Start_IT+0x68>
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681a      	ldr	r2, [r3, #0]
 800451e:	2380      	movs	r3, #128	; 0x80
 8004520:	05db      	lsls	r3, r3, #23
 8004522:	429a      	cmp	r2, r3
 8004524:	d024      	beq.n	8004570 <HAL_TIM_Base_Start_IT+0x68>
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	4a1d      	ldr	r2, [pc, #116]	; (80045a0 <HAL_TIM_Base_Start_IT+0x98>)
 800452c:	4293      	cmp	r3, r2
 800452e:	d01f      	beq.n	8004570 <HAL_TIM_Base_Start_IT+0x68>
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	4a1b      	ldr	r2, [pc, #108]	; (80045a4 <HAL_TIM_Base_Start_IT+0x9c>)
 8004536:	4293      	cmp	r3, r2
 8004538:	d01a      	beq.n	8004570 <HAL_TIM_Base_Start_IT+0x68>
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	4a1a      	ldr	r2, [pc, #104]	; (80045a8 <HAL_TIM_Base_Start_IT+0xa0>)
 8004540:	4293      	cmp	r3, r2
 8004542:	d015      	beq.n	8004570 <HAL_TIM_Base_Start_IT+0x68>
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	4a18      	ldr	r2, [pc, #96]	; (80045ac <HAL_TIM_Base_Start_IT+0xa4>)
 800454a:	4293      	cmp	r3, r2
 800454c:	d010      	beq.n	8004570 <HAL_TIM_Base_Start_IT+0x68>
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	4a17      	ldr	r2, [pc, #92]	; (80045b0 <HAL_TIM_Base_Start_IT+0xa8>)
 8004554:	4293      	cmp	r3, r2
 8004556:	d00b      	beq.n	8004570 <HAL_TIM_Base_Start_IT+0x68>
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	4a15      	ldr	r2, [pc, #84]	; (80045b4 <HAL_TIM_Base_Start_IT+0xac>)
 800455e:	4293      	cmp	r3, r2
 8004560:	d006      	beq.n	8004570 <HAL_TIM_Base_Start_IT+0x68>
 8004562:	23af      	movs	r3, #175	; 0xaf
 8004564:	005a      	lsls	r2, r3, #1
 8004566:	4b14      	ldr	r3, [pc, #80]	; (80045b8 <HAL_TIM_Base_Start_IT+0xb0>)
 8004568:	0011      	movs	r1, r2
 800456a:	0018      	movs	r0, r3
 800456c:	f7fc fa01 	bl	8000972 <assert_failed>

   /* Enable the TIM Update interrupt */
   __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	68da      	ldr	r2, [r3, #12]
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	2101      	movs	r1, #1
 800457c:	430a      	orrs	r2, r1
 800457e:	60da      	str	r2, [r3, #12]

   /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	681a      	ldr	r2, [r3, #0]
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	2101      	movs	r1, #1
 800458c:	430a      	orrs	r2, r1
 800458e:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8004590:	2300      	movs	r3, #0
}
 8004592:	0018      	movs	r0, r3
 8004594:	46bd      	mov	sp, r7
 8004596:	b002      	add	sp, #8
 8004598:	bd80      	pop	{r7, pc}
 800459a:	46c0      	nop			; (mov r8, r8)
 800459c:	40012c00 	.word	0x40012c00
 80045a0:	40000400 	.word	0x40000400
 80045a4:	40001000 	.word	0x40001000
 80045a8:	40002000 	.word	0x40002000
 80045ac:	40014000 	.word	0x40014000
 80045b0:	40014400 	.word	0x40014400
 80045b4:	40014800 	.word	0x40014800
 80045b8:	08007124 	.word	0x08007124

080045bc <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM handle
  * @retval HAL status
*/
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 80045bc:	b580      	push	{r7, lr}
 80045be:	b082      	sub	sp, #8
 80045c0:	af00      	add	r7, sp, #0
 80045c2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	4a27      	ldr	r2, [pc, #156]	; (8004668 <HAL_TIM_Base_Stop_IT+0xac>)
 80045ca:	4293      	cmp	r3, r2
 80045cc:	d02a      	beq.n	8004624 <HAL_TIM_Base_Stop_IT+0x68>
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681a      	ldr	r2, [r3, #0]
 80045d2:	2380      	movs	r3, #128	; 0x80
 80045d4:	05db      	lsls	r3, r3, #23
 80045d6:	429a      	cmp	r2, r3
 80045d8:	d024      	beq.n	8004624 <HAL_TIM_Base_Stop_IT+0x68>
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	4a23      	ldr	r2, [pc, #140]	; (800466c <HAL_TIM_Base_Stop_IT+0xb0>)
 80045e0:	4293      	cmp	r3, r2
 80045e2:	d01f      	beq.n	8004624 <HAL_TIM_Base_Stop_IT+0x68>
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	4a21      	ldr	r2, [pc, #132]	; (8004670 <HAL_TIM_Base_Stop_IT+0xb4>)
 80045ea:	4293      	cmp	r3, r2
 80045ec:	d01a      	beq.n	8004624 <HAL_TIM_Base_Stop_IT+0x68>
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	4a20      	ldr	r2, [pc, #128]	; (8004674 <HAL_TIM_Base_Stop_IT+0xb8>)
 80045f4:	4293      	cmp	r3, r2
 80045f6:	d015      	beq.n	8004624 <HAL_TIM_Base_Stop_IT+0x68>
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	4a1e      	ldr	r2, [pc, #120]	; (8004678 <HAL_TIM_Base_Stop_IT+0xbc>)
 80045fe:	4293      	cmp	r3, r2
 8004600:	d010      	beq.n	8004624 <HAL_TIM_Base_Stop_IT+0x68>
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	4a1d      	ldr	r2, [pc, #116]	; (800467c <HAL_TIM_Base_Stop_IT+0xc0>)
 8004608:	4293      	cmp	r3, r2
 800460a:	d00b      	beq.n	8004624 <HAL_TIM_Base_Stop_IT+0x68>
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	4a1b      	ldr	r2, [pc, #108]	; (8004680 <HAL_TIM_Base_Stop_IT+0xc4>)
 8004612:	4293      	cmp	r3, r2
 8004614:	d006      	beq.n	8004624 <HAL_TIM_Base_Stop_IT+0x68>
 8004616:	23b9      	movs	r3, #185	; 0xb9
 8004618:	005a      	lsls	r2, r3, #1
 800461a:	4b1a      	ldr	r3, [pc, #104]	; (8004684 <HAL_TIM_Base_Stop_IT+0xc8>)
 800461c:	0011      	movs	r1, r2
 800461e:	0018      	movs	r0, r3
 8004620:	f7fc f9a7 	bl	8000972 <assert_failed>
  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	68da      	ldr	r2, [r3, #12]
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	2101      	movs	r1, #1
 8004630:	438a      	bics	r2, r1
 8004632:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	6a1b      	ldr	r3, [r3, #32]
 800463a:	4a13      	ldr	r2, [pc, #76]	; (8004688 <HAL_TIM_Base_Stop_IT+0xcc>)
 800463c:	4013      	ands	r3, r2
 800463e:	d10d      	bne.n	800465c <HAL_TIM_Base_Stop_IT+0xa0>
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	6a1b      	ldr	r3, [r3, #32]
 8004646:	4a11      	ldr	r2, [pc, #68]	; (800468c <HAL_TIM_Base_Stop_IT+0xd0>)
 8004648:	4013      	ands	r3, r2
 800464a:	d107      	bne.n	800465c <HAL_TIM_Base_Stop_IT+0xa0>
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	681a      	ldr	r2, [r3, #0]
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	2101      	movs	r1, #1
 8004658:	438a      	bics	r2, r1
 800465a:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800465c:	2300      	movs	r3, #0
}
 800465e:	0018      	movs	r0, r3
 8004660:	46bd      	mov	sp, r7
 8004662:	b002      	add	sp, #8
 8004664:	bd80      	pop	{r7, pc}
 8004666:	46c0      	nop			; (mov r8, r8)
 8004668:	40012c00 	.word	0x40012c00
 800466c:	40000400 	.word	0x40000400
 8004670:	40001000 	.word	0x40001000
 8004674:	40002000 	.word	0x40002000
 8004678:	40014000 	.word	0x40014000
 800467c:	40014400 	.word	0x40014400
 8004680:	40014800 	.word	0x40014800
 8004684:	08007124 	.word	0x08007124
 8004688:	00001111 	.word	0x00001111
 800468c:	00000444 	.word	0x00000444

08004690 <HAL_TIM_OC_Init>:
  *         parameters in the TIM_HandleTypeDef and create the associated handle.
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef* htim)
{
 8004690:	b580      	push	{r7, lr}
 8004692:	b082      	sub	sp, #8
 8004694:	af00      	add	r7, sp, #0
 8004696:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if(htim == NULL)
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	2b00      	cmp	r3, #0
 800469c:	d101      	bne.n	80046a2 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 800469e:	2301      	movs	r3, #1
 80046a0:	e091      	b.n	80047c6 <HAL_TIM_OC_Init+0x136>
  }

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	4a4a      	ldr	r2, [pc, #296]	; (80047d0 <HAL_TIM_OC_Init+0x140>)
 80046a8:	4293      	cmp	r3, r2
 80046aa:	d02a      	beq.n	8004702 <HAL_TIM_OC_Init+0x72>
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681a      	ldr	r2, [r3, #0]
 80046b0:	2380      	movs	r3, #128	; 0x80
 80046b2:	05db      	lsls	r3, r3, #23
 80046b4:	429a      	cmp	r2, r3
 80046b6:	d024      	beq.n	8004702 <HAL_TIM_OC_Init+0x72>
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	4a45      	ldr	r2, [pc, #276]	; (80047d4 <HAL_TIM_OC_Init+0x144>)
 80046be:	4293      	cmp	r3, r2
 80046c0:	d01f      	beq.n	8004702 <HAL_TIM_OC_Init+0x72>
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	4a44      	ldr	r2, [pc, #272]	; (80047d8 <HAL_TIM_OC_Init+0x148>)
 80046c8:	4293      	cmp	r3, r2
 80046ca:	d01a      	beq.n	8004702 <HAL_TIM_OC_Init+0x72>
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	4a42      	ldr	r2, [pc, #264]	; (80047dc <HAL_TIM_OC_Init+0x14c>)
 80046d2:	4293      	cmp	r3, r2
 80046d4:	d015      	beq.n	8004702 <HAL_TIM_OC_Init+0x72>
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	4a41      	ldr	r2, [pc, #260]	; (80047e0 <HAL_TIM_OC_Init+0x150>)
 80046dc:	4293      	cmp	r3, r2
 80046de:	d010      	beq.n	8004702 <HAL_TIM_OC_Init+0x72>
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	4a3f      	ldr	r2, [pc, #252]	; (80047e4 <HAL_TIM_OC_Init+0x154>)
 80046e6:	4293      	cmp	r3, r2
 80046e8:	d00b      	beq.n	8004702 <HAL_TIM_OC_Init+0x72>
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	4a3e      	ldr	r2, [pc, #248]	; (80047e8 <HAL_TIM_OC_Init+0x158>)
 80046f0:	4293      	cmp	r3, r2
 80046f2:	d006      	beq.n	8004702 <HAL_TIM_OC_Init+0x72>
 80046f4:	23f5      	movs	r3, #245	; 0xf5
 80046f6:	005a      	lsls	r2, r3, #1
 80046f8:	4b3c      	ldr	r3, [pc, #240]	; (80047ec <HAL_TIM_OC_Init+0x15c>)
 80046fa:	0011      	movs	r1, r2
 80046fc:	0018      	movs	r0, r3
 80046fe:	f7fc f938 	bl	8000972 <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	689b      	ldr	r3, [r3, #8]
 8004706:	2b00      	cmp	r3, #0
 8004708:	d017      	beq.n	800473a <HAL_TIM_OC_Init+0xaa>
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	689b      	ldr	r3, [r3, #8]
 800470e:	2b10      	cmp	r3, #16
 8004710:	d013      	beq.n	800473a <HAL_TIM_OC_Init+0xaa>
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	689b      	ldr	r3, [r3, #8]
 8004716:	2b20      	cmp	r3, #32
 8004718:	d00f      	beq.n	800473a <HAL_TIM_OC_Init+0xaa>
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	689b      	ldr	r3, [r3, #8]
 800471e:	2b40      	cmp	r3, #64	; 0x40
 8004720:	d00b      	beq.n	800473a <HAL_TIM_OC_Init+0xaa>
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	689b      	ldr	r3, [r3, #8]
 8004726:	2b60      	cmp	r3, #96	; 0x60
 8004728:	d007      	beq.n	800473a <HAL_TIM_OC_Init+0xaa>
 800472a:	23ec      	movs	r3, #236	; 0xec
 800472c:	33ff      	adds	r3, #255	; 0xff
 800472e:	001a      	movs	r2, r3
 8004730:	4b2e      	ldr	r3, [pc, #184]	; (80047ec <HAL_TIM_OC_Init+0x15c>)
 8004732:	0011      	movs	r1, r2
 8004734:	0018      	movs	r0, r3
 8004736:	f7fc f91c 	bl	8000972 <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	691b      	ldr	r3, [r3, #16]
 800473e:	2b00      	cmp	r3, #0
 8004740:	d012      	beq.n	8004768 <HAL_TIM_OC_Init+0xd8>
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	691a      	ldr	r2, [r3, #16]
 8004746:	2380      	movs	r3, #128	; 0x80
 8004748:	005b      	lsls	r3, r3, #1
 800474a:	429a      	cmp	r2, r3
 800474c:	d00c      	beq.n	8004768 <HAL_TIM_OC_Init+0xd8>
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	691a      	ldr	r2, [r3, #16]
 8004752:	2380      	movs	r3, #128	; 0x80
 8004754:	009b      	lsls	r3, r3, #2
 8004756:	429a      	cmp	r2, r3
 8004758:	d006      	beq.n	8004768 <HAL_TIM_OC_Init+0xd8>
 800475a:	23f6      	movs	r3, #246	; 0xf6
 800475c:	005a      	lsls	r2, r3, #1
 800475e:	4b23      	ldr	r3, [pc, #140]	; (80047ec <HAL_TIM_OC_Init+0x15c>)
 8004760:	0011      	movs	r1, r2
 8004762:	0018      	movs	r0, r3
 8004764:	f7fc f905 	bl	8000972 <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	699b      	ldr	r3, [r3, #24]
 800476c:	2b00      	cmp	r3, #0
 800476e:	d00b      	beq.n	8004788 <HAL_TIM_OC_Init+0xf8>
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	699b      	ldr	r3, [r3, #24]
 8004774:	2b80      	cmp	r3, #128	; 0x80
 8004776:	d007      	beq.n	8004788 <HAL_TIM_OC_Init+0xf8>
 8004778:	23ee      	movs	r3, #238	; 0xee
 800477a:	33ff      	adds	r3, #255	; 0xff
 800477c:	001a      	movs	r2, r3
 800477e:	4b1b      	ldr	r3, [pc, #108]	; (80047ec <HAL_TIM_OC_Init+0x15c>)
 8004780:	0011      	movs	r1, r2
 8004782:	0018      	movs	r0, r3
 8004784:	f7fc f8f5 	bl	8000972 <assert_failed>

  if(htim->State == HAL_TIM_STATE_RESET)
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	223d      	movs	r2, #61	; 0x3d
 800478c:	5c9b      	ldrb	r3, [r3, r2]
 800478e:	b2db      	uxtb	r3, r3
 8004790:	2b00      	cmp	r3, #0
 8004792:	d107      	bne.n	80047a4 <HAL_TIM_OC_Init+0x114>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	223c      	movs	r2, #60	; 0x3c
 8004798:	2100      	movs	r1, #0
 800479a:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	0018      	movs	r0, r3
 80047a0:	f000 f826 	bl	80047f0 <HAL_TIM_OC_MspInit>
  }

  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	223d      	movs	r2, #61	; 0x3d
 80047a8:	2102      	movs	r1, #2
 80047aa:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681a      	ldr	r2, [r3, #0]
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	3304      	adds	r3, #4
 80047b4:	0019      	movs	r1, r3
 80047b6:	0010      	movs	r0, r2
 80047b8:	f000 ff5e 	bl	8005678 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	223d      	movs	r2, #61	; 0x3d
 80047c0:	2101      	movs	r1, #1
 80047c2:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80047c4:	2300      	movs	r3, #0
}
 80047c6:	0018      	movs	r0, r3
 80047c8:	46bd      	mov	sp, r7
 80047ca:	b002      	add	sp, #8
 80047cc:	bd80      	pop	{r7, pc}
 80047ce:	46c0      	nop			; (mov r8, r8)
 80047d0:	40012c00 	.word	0x40012c00
 80047d4:	40000400 	.word	0x40000400
 80047d8:	40001000 	.word	0x40001000
 80047dc:	40002000 	.word	0x40002000
 80047e0:	40014000 	.word	0x40014000
 80047e4:	40014400 	.word	0x40014400
 80047e8:	40014800 	.word	0x40014800
 80047ec:	08007124 	.word	0x08007124

080047f0 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 80047f0:	b580      	push	{r7, lr}
 80047f2:	b082      	sub	sp, #8
 80047f4:	af00      	add	r7, sp, #0
 80047f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 80047f8:	46c0      	nop			; (mov r8, r8)
 80047fa:	46bd      	mov	sp, r7
 80047fc:	b002      	add	sp, #8
 80047fe:	bd80      	pop	{r7, pc}

08004800 <HAL_TIM_OC_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected 
  * @retval HAL status
*/
HAL_StatusTypeDef HAL_TIM_OC_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004800:	b580      	push	{r7, lr}
 8004802:	b082      	sub	sp, #8
 8004804:	af00      	add	r7, sp, #0
 8004806:	6078      	str	r0, [r7, #4]
 8004808:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	4a49      	ldr	r2, [pc, #292]	; (8004934 <HAL_TIM_OC_Start+0x134>)
 8004810:	4293      	cmp	r3, r2
 8004812:	d10c      	bne.n	800482e <HAL_TIM_OC_Start+0x2e>
 8004814:	683b      	ldr	r3, [r7, #0]
 8004816:	2b00      	cmp	r3, #0
 8004818:	d100      	bne.n	800481c <HAL_TIM_OC_Start+0x1c>
 800481a:	e054      	b.n	80048c6 <HAL_TIM_OC_Start+0xc6>
 800481c:	683b      	ldr	r3, [r7, #0]
 800481e:	2b04      	cmp	r3, #4
 8004820:	d051      	beq.n	80048c6 <HAL_TIM_OC_Start+0xc6>
 8004822:	683b      	ldr	r3, [r7, #0]
 8004824:	2b08      	cmp	r3, #8
 8004826:	d04e      	beq.n	80048c6 <HAL_TIM_OC_Start+0xc6>
 8004828:	683b      	ldr	r3, [r7, #0]
 800482a:	2b0c      	cmp	r3, #12
 800482c:	d04b      	beq.n	80048c6 <HAL_TIM_OC_Start+0xc6>
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681a      	ldr	r2, [r3, #0]
 8004832:	2380      	movs	r3, #128	; 0x80
 8004834:	05db      	lsls	r3, r3, #23
 8004836:	429a      	cmp	r2, r3
 8004838:	d10b      	bne.n	8004852 <HAL_TIM_OC_Start+0x52>
 800483a:	683b      	ldr	r3, [r7, #0]
 800483c:	2b00      	cmp	r3, #0
 800483e:	d042      	beq.n	80048c6 <HAL_TIM_OC_Start+0xc6>
 8004840:	683b      	ldr	r3, [r7, #0]
 8004842:	2b04      	cmp	r3, #4
 8004844:	d03f      	beq.n	80048c6 <HAL_TIM_OC_Start+0xc6>
 8004846:	683b      	ldr	r3, [r7, #0]
 8004848:	2b08      	cmp	r3, #8
 800484a:	d03c      	beq.n	80048c6 <HAL_TIM_OC_Start+0xc6>
 800484c:	683b      	ldr	r3, [r7, #0]
 800484e:	2b0c      	cmp	r3, #12
 8004850:	d039      	beq.n	80048c6 <HAL_TIM_OC_Start+0xc6>
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	4a38      	ldr	r2, [pc, #224]	; (8004938 <HAL_TIM_OC_Start+0x138>)
 8004858:	4293      	cmp	r3, r2
 800485a:	d10b      	bne.n	8004874 <HAL_TIM_OC_Start+0x74>
 800485c:	683b      	ldr	r3, [r7, #0]
 800485e:	2b00      	cmp	r3, #0
 8004860:	d031      	beq.n	80048c6 <HAL_TIM_OC_Start+0xc6>
 8004862:	683b      	ldr	r3, [r7, #0]
 8004864:	2b04      	cmp	r3, #4
 8004866:	d02e      	beq.n	80048c6 <HAL_TIM_OC_Start+0xc6>
 8004868:	683b      	ldr	r3, [r7, #0]
 800486a:	2b08      	cmp	r3, #8
 800486c:	d02b      	beq.n	80048c6 <HAL_TIM_OC_Start+0xc6>
 800486e:	683b      	ldr	r3, [r7, #0]
 8004870:	2b0c      	cmp	r3, #12
 8004872:	d028      	beq.n	80048c6 <HAL_TIM_OC_Start+0xc6>
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	4a30      	ldr	r2, [pc, #192]	; (800493c <HAL_TIM_OC_Start+0x13c>)
 800487a:	4293      	cmp	r3, r2
 800487c:	d102      	bne.n	8004884 <HAL_TIM_OC_Start+0x84>
 800487e:	683b      	ldr	r3, [r7, #0]
 8004880:	2b00      	cmp	r3, #0
 8004882:	d020      	beq.n	80048c6 <HAL_TIM_OC_Start+0xc6>
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	4a2d      	ldr	r2, [pc, #180]	; (8004940 <HAL_TIM_OC_Start+0x140>)
 800488a:	4293      	cmp	r3, r2
 800488c:	d105      	bne.n	800489a <HAL_TIM_OC_Start+0x9a>
 800488e:	683b      	ldr	r3, [r7, #0]
 8004890:	2b00      	cmp	r3, #0
 8004892:	d018      	beq.n	80048c6 <HAL_TIM_OC_Start+0xc6>
 8004894:	683b      	ldr	r3, [r7, #0]
 8004896:	2b04      	cmp	r3, #4
 8004898:	d015      	beq.n	80048c6 <HAL_TIM_OC_Start+0xc6>
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	4a29      	ldr	r2, [pc, #164]	; (8004944 <HAL_TIM_OC_Start+0x144>)
 80048a0:	4293      	cmp	r3, r2
 80048a2:	d102      	bne.n	80048aa <HAL_TIM_OC_Start+0xaa>
 80048a4:	683b      	ldr	r3, [r7, #0]
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d00d      	beq.n	80048c6 <HAL_TIM_OC_Start+0xc6>
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	4a26      	ldr	r2, [pc, #152]	; (8004948 <HAL_TIM_OC_Start+0x148>)
 80048b0:	4293      	cmp	r3, r2
 80048b2:	d102      	bne.n	80048ba <HAL_TIM_OC_Start+0xba>
 80048b4:	683b      	ldr	r3, [r7, #0]
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d005      	beq.n	80048c6 <HAL_TIM_OC_Start+0xc6>
 80048ba:	4a24      	ldr	r2, [pc, #144]	; (800494c <HAL_TIM_OC_Start+0x14c>)
 80048bc:	4b24      	ldr	r3, [pc, #144]	; (8004950 <HAL_TIM_OC_Start+0x150>)
 80048be:	0011      	movs	r1, r2
 80048c0:	0018      	movs	r0, r3
 80048c2:	f7fc f856 	bl	8000972 <assert_failed>

  /* Enable the Output compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	6839      	ldr	r1, [r7, #0]
 80048cc:	2201      	movs	r2, #1
 80048ce:	0018      	movs	r0, r3
 80048d0:	f001 fac8 	bl	8005e64 <TIM_CCxChannelCmd>

  if(IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	4a16      	ldr	r2, [pc, #88]	; (8004934 <HAL_TIM_OC_Start+0x134>)
 80048da:	4293      	cmp	r3, r2
 80048dc:	d00e      	beq.n	80048fc <HAL_TIM_OC_Start+0xfc>
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	4a17      	ldr	r2, [pc, #92]	; (8004940 <HAL_TIM_OC_Start+0x140>)
 80048e4:	4293      	cmp	r3, r2
 80048e6:	d009      	beq.n	80048fc <HAL_TIM_OC_Start+0xfc>
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	4a15      	ldr	r2, [pc, #84]	; (8004944 <HAL_TIM_OC_Start+0x144>)
 80048ee:	4293      	cmp	r3, r2
 80048f0:	d004      	beq.n	80048fc <HAL_TIM_OC_Start+0xfc>
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	4a14      	ldr	r2, [pc, #80]	; (8004948 <HAL_TIM_OC_Start+0x148>)
 80048f8:	4293      	cmp	r3, r2
 80048fa:	d101      	bne.n	8004900 <HAL_TIM_OC_Start+0x100>
 80048fc:	2301      	movs	r3, #1
 80048fe:	e000      	b.n	8004902 <HAL_TIM_OC_Start+0x102>
 8004900:	2300      	movs	r3, #0
 8004902:	2b00      	cmp	r3, #0
 8004904:	d008      	beq.n	8004918 <HAL_TIM_OC_Start+0x118>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	2180      	movs	r1, #128	; 0x80
 8004912:	0209      	lsls	r1, r1, #8
 8004914:	430a      	orrs	r2, r1
 8004916:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	681a      	ldr	r2, [r3, #0]
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	2101      	movs	r1, #1
 8004924:	430a      	orrs	r2, r1
 8004926:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8004928:	2300      	movs	r3, #0
}
 800492a:	0018      	movs	r0, r3
 800492c:	46bd      	mov	sp, r7
 800492e:	b002      	add	sp, #8
 8004930:	bd80      	pop	{r7, pc}
 8004932:	46c0      	nop			; (mov r8, r8)
 8004934:	40012c00 	.word	0x40012c00
 8004938:	40000400 	.word	0x40000400
 800493c:	40002000 	.word	0x40002000
 8004940:	40014000 	.word	0x40014000
 8004944:	40014400 	.word	0x40014400
 8004948:	40014800 	.word	0x40014800
 800494c:	0000024b 	.word	0x0000024b
 8004950:	08007124 	.word	0x08007124

08004954 <HAL_TIM_OC_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
*/
HAL_StatusTypeDef HAL_TIM_OC_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004954:	b580      	push	{r7, lr}
 8004956:	b082      	sub	sp, #8
 8004958:	af00      	add	r7, sp, #0
 800495a:	6078      	str	r0, [r7, #4]
 800495c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	4a54      	ldr	r2, [pc, #336]	; (8004ab4 <HAL_TIM_OC_Stop+0x160>)
 8004964:	4293      	cmp	r3, r2
 8004966:	d10c      	bne.n	8004982 <HAL_TIM_OC_Stop+0x2e>
 8004968:	683b      	ldr	r3, [r7, #0]
 800496a:	2b00      	cmp	r3, #0
 800496c:	d100      	bne.n	8004970 <HAL_TIM_OC_Stop+0x1c>
 800496e:	e054      	b.n	8004a1a <HAL_TIM_OC_Stop+0xc6>
 8004970:	683b      	ldr	r3, [r7, #0]
 8004972:	2b04      	cmp	r3, #4
 8004974:	d051      	beq.n	8004a1a <HAL_TIM_OC_Stop+0xc6>
 8004976:	683b      	ldr	r3, [r7, #0]
 8004978:	2b08      	cmp	r3, #8
 800497a:	d04e      	beq.n	8004a1a <HAL_TIM_OC_Stop+0xc6>
 800497c:	683b      	ldr	r3, [r7, #0]
 800497e:	2b0c      	cmp	r3, #12
 8004980:	d04b      	beq.n	8004a1a <HAL_TIM_OC_Stop+0xc6>
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	681a      	ldr	r2, [r3, #0]
 8004986:	2380      	movs	r3, #128	; 0x80
 8004988:	05db      	lsls	r3, r3, #23
 800498a:	429a      	cmp	r2, r3
 800498c:	d10b      	bne.n	80049a6 <HAL_TIM_OC_Stop+0x52>
 800498e:	683b      	ldr	r3, [r7, #0]
 8004990:	2b00      	cmp	r3, #0
 8004992:	d042      	beq.n	8004a1a <HAL_TIM_OC_Stop+0xc6>
 8004994:	683b      	ldr	r3, [r7, #0]
 8004996:	2b04      	cmp	r3, #4
 8004998:	d03f      	beq.n	8004a1a <HAL_TIM_OC_Stop+0xc6>
 800499a:	683b      	ldr	r3, [r7, #0]
 800499c:	2b08      	cmp	r3, #8
 800499e:	d03c      	beq.n	8004a1a <HAL_TIM_OC_Stop+0xc6>
 80049a0:	683b      	ldr	r3, [r7, #0]
 80049a2:	2b0c      	cmp	r3, #12
 80049a4:	d039      	beq.n	8004a1a <HAL_TIM_OC_Stop+0xc6>
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	4a43      	ldr	r2, [pc, #268]	; (8004ab8 <HAL_TIM_OC_Stop+0x164>)
 80049ac:	4293      	cmp	r3, r2
 80049ae:	d10b      	bne.n	80049c8 <HAL_TIM_OC_Stop+0x74>
 80049b0:	683b      	ldr	r3, [r7, #0]
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d031      	beq.n	8004a1a <HAL_TIM_OC_Stop+0xc6>
 80049b6:	683b      	ldr	r3, [r7, #0]
 80049b8:	2b04      	cmp	r3, #4
 80049ba:	d02e      	beq.n	8004a1a <HAL_TIM_OC_Stop+0xc6>
 80049bc:	683b      	ldr	r3, [r7, #0]
 80049be:	2b08      	cmp	r3, #8
 80049c0:	d02b      	beq.n	8004a1a <HAL_TIM_OC_Stop+0xc6>
 80049c2:	683b      	ldr	r3, [r7, #0]
 80049c4:	2b0c      	cmp	r3, #12
 80049c6:	d028      	beq.n	8004a1a <HAL_TIM_OC_Stop+0xc6>
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	4a3b      	ldr	r2, [pc, #236]	; (8004abc <HAL_TIM_OC_Stop+0x168>)
 80049ce:	4293      	cmp	r3, r2
 80049d0:	d102      	bne.n	80049d8 <HAL_TIM_OC_Stop+0x84>
 80049d2:	683b      	ldr	r3, [r7, #0]
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d020      	beq.n	8004a1a <HAL_TIM_OC_Stop+0xc6>
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	4a38      	ldr	r2, [pc, #224]	; (8004ac0 <HAL_TIM_OC_Stop+0x16c>)
 80049de:	4293      	cmp	r3, r2
 80049e0:	d105      	bne.n	80049ee <HAL_TIM_OC_Stop+0x9a>
 80049e2:	683b      	ldr	r3, [r7, #0]
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d018      	beq.n	8004a1a <HAL_TIM_OC_Stop+0xc6>
 80049e8:	683b      	ldr	r3, [r7, #0]
 80049ea:	2b04      	cmp	r3, #4
 80049ec:	d015      	beq.n	8004a1a <HAL_TIM_OC_Stop+0xc6>
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	4a34      	ldr	r2, [pc, #208]	; (8004ac4 <HAL_TIM_OC_Stop+0x170>)
 80049f4:	4293      	cmp	r3, r2
 80049f6:	d102      	bne.n	80049fe <HAL_TIM_OC_Stop+0xaa>
 80049f8:	683b      	ldr	r3, [r7, #0]
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d00d      	beq.n	8004a1a <HAL_TIM_OC_Stop+0xc6>
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	4a31      	ldr	r2, [pc, #196]	; (8004ac8 <HAL_TIM_OC_Stop+0x174>)
 8004a04:	4293      	cmp	r3, r2
 8004a06:	d102      	bne.n	8004a0e <HAL_TIM_OC_Stop+0xba>
 8004a08:	683b      	ldr	r3, [r7, #0]
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d005      	beq.n	8004a1a <HAL_TIM_OC_Stop+0xc6>
 8004a0e:	4a2f      	ldr	r2, [pc, #188]	; (8004acc <HAL_TIM_OC_Stop+0x178>)
 8004a10:	4b2f      	ldr	r3, [pc, #188]	; (8004ad0 <HAL_TIM_OC_Stop+0x17c>)
 8004a12:	0011      	movs	r1, r2
 8004a14:	0018      	movs	r0, r3
 8004a16:	f7fb ffac 	bl	8000972 <assert_failed>

  /* Disable the Output compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	6839      	ldr	r1, [r7, #0]
 8004a20:	2200      	movs	r2, #0
 8004a22:	0018      	movs	r0, r3
 8004a24:	f001 fa1e 	bl	8005e64 <TIM_CCxChannelCmd>

  if(IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	4a21      	ldr	r2, [pc, #132]	; (8004ab4 <HAL_TIM_OC_Stop+0x160>)
 8004a2e:	4293      	cmp	r3, r2
 8004a30:	d00e      	beq.n	8004a50 <HAL_TIM_OC_Stop+0xfc>
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	4a22      	ldr	r2, [pc, #136]	; (8004ac0 <HAL_TIM_OC_Stop+0x16c>)
 8004a38:	4293      	cmp	r3, r2
 8004a3a:	d009      	beq.n	8004a50 <HAL_TIM_OC_Stop+0xfc>
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	4a20      	ldr	r2, [pc, #128]	; (8004ac4 <HAL_TIM_OC_Stop+0x170>)
 8004a42:	4293      	cmp	r3, r2
 8004a44:	d004      	beq.n	8004a50 <HAL_TIM_OC_Stop+0xfc>
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	4a1f      	ldr	r2, [pc, #124]	; (8004ac8 <HAL_TIM_OC_Stop+0x174>)
 8004a4c:	4293      	cmp	r3, r2
 8004a4e:	d101      	bne.n	8004a54 <HAL_TIM_OC_Stop+0x100>
 8004a50:	2301      	movs	r3, #1
 8004a52:	e000      	b.n	8004a56 <HAL_TIM_OC_Stop+0x102>
 8004a54:	2300      	movs	r3, #0
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d013      	beq.n	8004a82 <HAL_TIM_OC_Stop+0x12e>
  {
    /* Disable the Main Ouput */
    __HAL_TIM_MOE_DISABLE(htim);
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	6a1b      	ldr	r3, [r3, #32]
 8004a60:	4a1c      	ldr	r2, [pc, #112]	; (8004ad4 <HAL_TIM_OC_Stop+0x180>)
 8004a62:	4013      	ands	r3, r2
 8004a64:	d10d      	bne.n	8004a82 <HAL_TIM_OC_Stop+0x12e>
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	6a1b      	ldr	r3, [r3, #32]
 8004a6c:	4a1a      	ldr	r2, [pc, #104]	; (8004ad8 <HAL_TIM_OC_Stop+0x184>)
 8004a6e:	4013      	ands	r3, r2
 8004a70:	d107      	bne.n	8004a82 <HAL_TIM_OC_Stop+0x12e>
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	4917      	ldr	r1, [pc, #92]	; (8004adc <HAL_TIM_OC_Stop+0x188>)
 8004a7e:	400a      	ands	r2, r1
 8004a80:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	6a1b      	ldr	r3, [r3, #32]
 8004a88:	4a12      	ldr	r2, [pc, #72]	; (8004ad4 <HAL_TIM_OC_Stop+0x180>)
 8004a8a:	4013      	ands	r3, r2
 8004a8c:	d10d      	bne.n	8004aaa <HAL_TIM_OC_Stop+0x156>
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	6a1b      	ldr	r3, [r3, #32]
 8004a94:	4a10      	ldr	r2, [pc, #64]	; (8004ad8 <HAL_TIM_OC_Stop+0x184>)
 8004a96:	4013      	ands	r3, r2
 8004a98:	d107      	bne.n	8004aaa <HAL_TIM_OC_Stop+0x156>
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	681a      	ldr	r2, [r3, #0]
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	2101      	movs	r1, #1
 8004aa6:	438a      	bics	r2, r1
 8004aa8:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8004aaa:	2300      	movs	r3, #0
}
 8004aac:	0018      	movs	r0, r3
 8004aae:	46bd      	mov	sp, r7
 8004ab0:	b002      	add	sp, #8
 8004ab2:	bd80      	pop	{r7, pc}
 8004ab4:	40012c00 	.word	0x40012c00
 8004ab8:	40000400 	.word	0x40000400
 8004abc:	40002000 	.word	0x40002000
 8004ac0:	40014000 	.word	0x40014000
 8004ac4:	40014400 	.word	0x40014400
 8004ac8:	40014800 	.word	0x40014800
 8004acc:	0000026b 	.word	0x0000026b
 8004ad0:	08007124 	.word	0x08007124
 8004ad4:	00001111 	.word	0x00001111
 8004ad8:	00000444 	.word	0x00000444
 8004adc:	ffff7fff 	.word	0xffff7fff

08004ae0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004ae0:	b580      	push	{r7, lr}
 8004ae2:	b082      	sub	sp, #8
 8004ae4:	af00      	add	r7, sp, #0
 8004ae6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	691b      	ldr	r3, [r3, #16]
 8004aee:	2202      	movs	r2, #2
 8004af0:	4013      	ands	r3, r2
 8004af2:	2b02      	cmp	r3, #2
 8004af4:	d124      	bne.n	8004b40 <HAL_TIM_IRQHandler+0x60>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	68db      	ldr	r3, [r3, #12]
 8004afc:	2202      	movs	r2, #2
 8004afe:	4013      	ands	r3, r2
 8004b00:	2b02      	cmp	r3, #2
 8004b02:	d11d      	bne.n	8004b40 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	2203      	movs	r2, #3
 8004b0a:	4252      	negs	r2, r2
 8004b0c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	2201      	movs	r2, #1
 8004b12:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	699b      	ldr	r3, [r3, #24]
 8004b1a:	2203      	movs	r2, #3
 8004b1c:	4013      	ands	r3, r2
 8004b1e:	d004      	beq.n	8004b2a <HAL_TIM_IRQHandler+0x4a>
        {
          HAL_TIM_IC_CaptureCallback(htim);
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	0018      	movs	r0, r3
 8004b24:	f000 fd90 	bl	8005648 <HAL_TIM_IC_CaptureCallback>
 8004b28:	e007      	b.n	8004b3a <HAL_TIM_IRQHandler+0x5a>
        }
        /* Output compare event */
        else
        {
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	0018      	movs	r0, r3
 8004b2e:	f000 fd83 	bl	8005638 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	0018      	movs	r0, r3
 8004b36:	f000 fd8f 	bl	8005658 <HAL_TIM_PWM_PulseFinishedCallback>
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	2200      	movs	r2, #0
 8004b3e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	691b      	ldr	r3, [r3, #16]
 8004b46:	2204      	movs	r2, #4
 8004b48:	4013      	ands	r3, r2
 8004b4a:	2b04      	cmp	r3, #4
 8004b4c:	d125      	bne.n	8004b9a <HAL_TIM_IRQHandler+0xba>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	68db      	ldr	r3, [r3, #12]
 8004b54:	2204      	movs	r2, #4
 8004b56:	4013      	ands	r3, r2
 8004b58:	2b04      	cmp	r3, #4
 8004b5a:	d11e      	bne.n	8004b9a <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	2205      	movs	r2, #5
 8004b62:	4252      	negs	r2, r2
 8004b64:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	2202      	movs	r2, #2
 8004b6a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	699a      	ldr	r2, [r3, #24]
 8004b72:	23c0      	movs	r3, #192	; 0xc0
 8004b74:	009b      	lsls	r3, r3, #2
 8004b76:	4013      	ands	r3, r2
 8004b78:	d004      	beq.n	8004b84 <HAL_TIM_IRQHandler+0xa4>
      {
        HAL_TIM_IC_CaptureCallback(htim);
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	0018      	movs	r0, r3
 8004b7e:	f000 fd63 	bl	8005648 <HAL_TIM_IC_CaptureCallback>
 8004b82:	e007      	b.n	8004b94 <HAL_TIM_IRQHandler+0xb4>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	0018      	movs	r0, r3
 8004b88:	f000 fd56 	bl	8005638 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	0018      	movs	r0, r3
 8004b90:	f000 fd62 	bl	8005658 <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	2200      	movs	r2, #0
 8004b98:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	691b      	ldr	r3, [r3, #16]
 8004ba0:	2208      	movs	r2, #8
 8004ba2:	4013      	ands	r3, r2
 8004ba4:	2b08      	cmp	r3, #8
 8004ba6:	d124      	bne.n	8004bf2 <HAL_TIM_IRQHandler+0x112>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	68db      	ldr	r3, [r3, #12]
 8004bae:	2208      	movs	r2, #8
 8004bb0:	4013      	ands	r3, r2
 8004bb2:	2b08      	cmp	r3, #8
 8004bb4:	d11d      	bne.n	8004bf2 <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	2209      	movs	r2, #9
 8004bbc:	4252      	negs	r2, r2
 8004bbe:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	2204      	movs	r2, #4
 8004bc4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	69db      	ldr	r3, [r3, #28]
 8004bcc:	2203      	movs	r2, #3
 8004bce:	4013      	ands	r3, r2
 8004bd0:	d004      	beq.n	8004bdc <HAL_TIM_IRQHandler+0xfc>
      {
        HAL_TIM_IC_CaptureCallback(htim);
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	0018      	movs	r0, r3
 8004bd6:	f000 fd37 	bl	8005648 <HAL_TIM_IC_CaptureCallback>
 8004bda:	e007      	b.n	8004bec <HAL_TIM_IRQHandler+0x10c>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	0018      	movs	r0, r3
 8004be0:	f000 fd2a 	bl	8005638 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	0018      	movs	r0, r3
 8004be8:	f000 fd36 	bl	8005658 <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	2200      	movs	r2, #0
 8004bf0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	691b      	ldr	r3, [r3, #16]
 8004bf8:	2210      	movs	r2, #16
 8004bfa:	4013      	ands	r3, r2
 8004bfc:	2b10      	cmp	r3, #16
 8004bfe:	d125      	bne.n	8004c4c <HAL_TIM_IRQHandler+0x16c>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	68db      	ldr	r3, [r3, #12]
 8004c06:	2210      	movs	r2, #16
 8004c08:	4013      	ands	r3, r2
 8004c0a:	2b10      	cmp	r3, #16
 8004c0c:	d11e      	bne.n	8004c4c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	2211      	movs	r2, #17
 8004c14:	4252      	negs	r2, r2
 8004c16:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	2208      	movs	r2, #8
 8004c1c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	69da      	ldr	r2, [r3, #28]
 8004c24:	23c0      	movs	r3, #192	; 0xc0
 8004c26:	009b      	lsls	r3, r3, #2
 8004c28:	4013      	ands	r3, r2
 8004c2a:	d004      	beq.n	8004c36 <HAL_TIM_IRQHandler+0x156>
      {
        HAL_TIM_IC_CaptureCallback(htim);
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	0018      	movs	r0, r3
 8004c30:	f000 fd0a 	bl	8005648 <HAL_TIM_IC_CaptureCallback>
 8004c34:	e007      	b.n	8004c46 <HAL_TIM_IRQHandler+0x166>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	0018      	movs	r0, r3
 8004c3a:	f000 fcfd 	bl	8005638 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	0018      	movs	r0, r3
 8004c42:	f000 fd09 	bl	8005658 <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	2200      	movs	r2, #0
 8004c4a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	691b      	ldr	r3, [r3, #16]
 8004c52:	2201      	movs	r2, #1
 8004c54:	4013      	ands	r3, r2
 8004c56:	2b01      	cmp	r3, #1
 8004c58:	d10f      	bne.n	8004c7a <HAL_TIM_IRQHandler+0x19a>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) !=RESET)
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	68db      	ldr	r3, [r3, #12]
 8004c60:	2201      	movs	r2, #1
 8004c62:	4013      	ands	r3, r2
 8004c64:	2b01      	cmp	r3, #1
 8004c66:	d108      	bne.n	8004c7a <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	2202      	movs	r2, #2
 8004c6e:	4252      	negs	r2, r2
 8004c70:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	0018      	movs	r0, r3
 8004c76:	f000 fcd7 	bl	8005628 <HAL_TIM_PeriodElapsedCallback>
    }
  }
  /* TIM Break input event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	691b      	ldr	r3, [r3, #16]
 8004c80:	2280      	movs	r2, #128	; 0x80
 8004c82:	4013      	ands	r3, r2
 8004c84:	2b80      	cmp	r3, #128	; 0x80
 8004c86:	d10f      	bne.n	8004ca8 <HAL_TIM_IRQHandler+0x1c8>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	68db      	ldr	r3, [r3, #12]
 8004c8e:	2280      	movs	r2, #128	; 0x80
 8004c90:	4013      	ands	r3, r2
 8004c92:	2b80      	cmp	r3, #128	; 0x80
 8004c94:	d108      	bne.n	8004ca8 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	2281      	movs	r2, #129	; 0x81
 8004c9c:	4252      	negs	r2, r2
 8004c9e:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	0018      	movs	r0, r3
 8004ca4:	f001 fbe4 	bl	8006470 <HAL_TIMEx_BreakCallback>
    }
  }
  /* TIM Trigger detection event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	691b      	ldr	r3, [r3, #16]
 8004cae:	2240      	movs	r2, #64	; 0x40
 8004cb0:	4013      	ands	r3, r2
 8004cb2:	2b40      	cmp	r3, #64	; 0x40
 8004cb4:	d10f      	bne.n	8004cd6 <HAL_TIM_IRQHandler+0x1f6>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) !=RESET)
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	68db      	ldr	r3, [r3, #12]
 8004cbc:	2240      	movs	r2, #64	; 0x40
 8004cbe:	4013      	ands	r3, r2
 8004cc0:	2b40      	cmp	r3, #64	; 0x40
 8004cc2:	d108      	bne.n	8004cd6 <HAL_TIM_IRQHandler+0x1f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	2241      	movs	r2, #65	; 0x41
 8004cca:	4252      	negs	r2, r2
 8004ccc:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	0018      	movs	r0, r3
 8004cd2:	f000 fcc9 	bl	8005668 <HAL_TIM_TriggerCallback>
    }
  }
  /* TIM commutation event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	691b      	ldr	r3, [r3, #16]
 8004cdc:	2220      	movs	r2, #32
 8004cde:	4013      	ands	r3, r2
 8004ce0:	2b20      	cmp	r3, #32
 8004ce2:	d10f      	bne.n	8004d04 <HAL_TIM_IRQHandler+0x224>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	68db      	ldr	r3, [r3, #12]
 8004cea:	2220      	movs	r2, #32
 8004cec:	4013      	ands	r3, r2
 8004cee:	2b20      	cmp	r3, #32
 8004cf0:	d108      	bne.n	8004d04 <HAL_TIM_IRQHandler+0x224>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	2221      	movs	r2, #33	; 0x21
 8004cf8:	4252      	negs	r2, r2
 8004cfa:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutationCallback(htim);
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	0018      	movs	r0, r3
 8004d00:	f001 fbae 	bl	8006460 <HAL_TIMEx_CommutationCallback>
    }
  }
}
 8004d04:	46c0      	nop			; (mov r8, r8)
 8004d06:	46bd      	mov	sp, r7
 8004d08:	b002      	add	sp, #8
 8004d0a:	bd80      	pop	{r7, pc}

08004d0c <HAL_TIM_OC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_OC_InitTypeDef* sConfig, uint32_t Channel)
{
 8004d0c:	b580      	push	{r7, lr}
 8004d0e:	b084      	sub	sp, #16
 8004d10:	af00      	add	r7, sp, #0
 8004d12:	60f8      	str	r0, [r7, #12]
 8004d14:	60b9      	str	r1, [r7, #8]
 8004d16:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_CHANNELS(Channel));
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d011      	beq.n	8004d42 <HAL_TIM_OC_ConfigChannel+0x36>
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	2b04      	cmp	r3, #4
 8004d22:	d00e      	beq.n	8004d42 <HAL_TIM_OC_ConfigChannel+0x36>
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	2b08      	cmp	r3, #8
 8004d28:	d00b      	beq.n	8004d42 <HAL_TIM_OC_ConfigChannel+0x36>
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	2b0c      	cmp	r3, #12
 8004d2e:	d008      	beq.n	8004d42 <HAL_TIM_OC_ConfigChannel+0x36>
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	2b18      	cmp	r3, #24
 8004d34:	d005      	beq.n	8004d42 <HAL_TIM_OC_ConfigChannel+0x36>
 8004d36:	4a76      	ldr	r2, [pc, #472]	; (8004f10 <HAL_TIM_OC_ConfigChannel+0x204>)
 8004d38:	4b76      	ldr	r3, [pc, #472]	; (8004f14 <HAL_TIM_OC_ConfigChannel+0x208>)
 8004d3a:	0011      	movs	r1, r2
 8004d3c:	0018      	movs	r0, r3
 8004d3e:	f7fb fe18 	bl	8000972 <assert_failed>
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
 8004d42:	68bb      	ldr	r3, [r7, #8]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d019      	beq.n	8004d7e <HAL_TIM_OC_ConfigChannel+0x72>
 8004d4a:	68bb      	ldr	r3, [r7, #8]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	2b10      	cmp	r3, #16
 8004d50:	d015      	beq.n	8004d7e <HAL_TIM_OC_ConfigChannel+0x72>
 8004d52:	68bb      	ldr	r3, [r7, #8]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	2b20      	cmp	r3, #32
 8004d58:	d011      	beq.n	8004d7e <HAL_TIM_OC_ConfigChannel+0x72>
 8004d5a:	68bb      	ldr	r3, [r7, #8]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	2b30      	cmp	r3, #48	; 0x30
 8004d60:	d00d      	beq.n	8004d7e <HAL_TIM_OC_ConfigChannel+0x72>
 8004d62:	68bb      	ldr	r3, [r7, #8]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	2b50      	cmp	r3, #80	; 0x50
 8004d68:	d009      	beq.n	8004d7e <HAL_TIM_OC_ConfigChannel+0x72>
 8004d6a:	68bb      	ldr	r3, [r7, #8]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	2b40      	cmp	r3, #64	; 0x40
 8004d70:	d005      	beq.n	8004d7e <HAL_TIM_OC_ConfigChannel+0x72>
 8004d72:	4a69      	ldr	r2, [pc, #420]	; (8004f18 <HAL_TIM_OC_ConfigChannel+0x20c>)
 8004d74:	4b67      	ldr	r3, [pc, #412]	; (8004f14 <HAL_TIM_OC_ConfigChannel+0x208>)
 8004d76:	0011      	movs	r1, r2
 8004d78:	0018      	movs	r0, r3
 8004d7a:	f7fb fdfa 	bl	8000972 <assert_failed>
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
 8004d7e:	68bb      	ldr	r3, [r7, #8]
 8004d80:	689b      	ldr	r3, [r3, #8]
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d009      	beq.n	8004d9a <HAL_TIM_OC_ConfigChannel+0x8e>
 8004d86:	68bb      	ldr	r3, [r7, #8]
 8004d88:	689b      	ldr	r3, [r3, #8]
 8004d8a:	2b02      	cmp	r3, #2
 8004d8c:	d005      	beq.n	8004d9a <HAL_TIM_OC_ConfigChannel+0x8e>
 8004d8e:	4a63      	ldr	r2, [pc, #396]	; (8004f1c <HAL_TIM_OC_ConfigChannel+0x210>)
 8004d90:	4b60      	ldr	r3, [pc, #384]	; (8004f14 <HAL_TIM_OC_ConfigChannel+0x208>)
 8004d92:	0011      	movs	r1, r2
 8004d94:	0018      	movs	r0, r3
 8004d96:	f7fb fdec 	bl	8000972 <assert_failed>

  /* Check input state */
  __HAL_LOCK(htim);
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	223c      	movs	r2, #60	; 0x3c
 8004d9e:	5c9b      	ldrb	r3, [r3, r2]
 8004da0:	2b01      	cmp	r3, #1
 8004da2:	d101      	bne.n	8004da8 <HAL_TIM_OC_ConfigChannel+0x9c>
 8004da4:	2302      	movs	r3, #2
 8004da6:	e0ae      	b.n	8004f06 <HAL_TIM_OC_ConfigChannel+0x1fa>
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	223c      	movs	r2, #60	; 0x3c
 8004dac:	2101      	movs	r1, #1
 8004dae:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	223d      	movs	r2, #61	; 0x3d
 8004db4:	2102      	movs	r1, #2
 8004db6:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	2b04      	cmp	r3, #4
 8004dbc:	d03b      	beq.n	8004e36 <HAL_TIM_OC_ConfigChannel+0x12a>
 8004dbe:	d802      	bhi.n	8004dc6 <HAL_TIM_OC_ConfigChannel+0xba>
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	d006      	beq.n	8004dd2 <HAL_TIM_OC_ConfigChannel+0xc6>
       TIM_OC4_SetConfig(htim->Instance, sConfig);
    }
    break;

    default:
    break;
 8004dc4:	e096      	b.n	8004ef4 <HAL_TIM_OC_ConfigChannel+0x1e8>
  switch (Channel)
 8004dc6:	2b08      	cmp	r3, #8
 8004dc8:	d058      	beq.n	8004e7c <HAL_TIM_OC_ConfigChannel+0x170>
 8004dca:	2b0c      	cmp	r3, #12
 8004dcc:	d100      	bne.n	8004dd0 <HAL_TIM_OC_ConfigChannel+0xc4>
 8004dce:	e073      	b.n	8004eb8 <HAL_TIM_OC_ConfigChannel+0x1ac>
    break;
 8004dd0:	e090      	b.n	8004ef4 <HAL_TIM_OC_ConfigChannel+0x1e8>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	4a52      	ldr	r2, [pc, #328]	; (8004f20 <HAL_TIM_OC_ConfigChannel+0x214>)
 8004dd8:	4293      	cmp	r3, r2
 8004dda:	d024      	beq.n	8004e26 <HAL_TIM_OC_ConfigChannel+0x11a>
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	681a      	ldr	r2, [r3, #0]
 8004de0:	2380      	movs	r3, #128	; 0x80
 8004de2:	05db      	lsls	r3, r3, #23
 8004de4:	429a      	cmp	r2, r3
 8004de6:	d01e      	beq.n	8004e26 <HAL_TIM_OC_ConfigChannel+0x11a>
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	4a4d      	ldr	r2, [pc, #308]	; (8004f24 <HAL_TIM_OC_ConfigChannel+0x218>)
 8004dee:	4293      	cmp	r3, r2
 8004df0:	d019      	beq.n	8004e26 <HAL_TIM_OC_ConfigChannel+0x11a>
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	4a4c      	ldr	r2, [pc, #304]	; (8004f28 <HAL_TIM_OC_ConfigChannel+0x21c>)
 8004df8:	4293      	cmp	r3, r2
 8004dfa:	d014      	beq.n	8004e26 <HAL_TIM_OC_ConfigChannel+0x11a>
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	4a4a      	ldr	r2, [pc, #296]	; (8004f2c <HAL_TIM_OC_ConfigChannel+0x220>)
 8004e02:	4293      	cmp	r3, r2
 8004e04:	d00f      	beq.n	8004e26 <HAL_TIM_OC_ConfigChannel+0x11a>
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	4a49      	ldr	r2, [pc, #292]	; (8004f30 <HAL_TIM_OC_ConfigChannel+0x224>)
 8004e0c:	4293      	cmp	r3, r2
 8004e0e:	d00a      	beq.n	8004e26 <HAL_TIM_OC_ConfigChannel+0x11a>
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	4a47      	ldr	r2, [pc, #284]	; (8004f34 <HAL_TIM_OC_ConfigChannel+0x228>)
 8004e16:	4293      	cmp	r3, r2
 8004e18:	d005      	beq.n	8004e26 <HAL_TIM_OC_ConfigChannel+0x11a>
 8004e1a:	4a47      	ldr	r2, [pc, #284]	; (8004f38 <HAL_TIM_OC_ConfigChannel+0x22c>)
 8004e1c:	4b3d      	ldr	r3, [pc, #244]	; (8004f14 <HAL_TIM_OC_ConfigChannel+0x208>)
 8004e1e:	0011      	movs	r1, r2
 8004e20:	0018      	movs	r0, r3
 8004e22:	f7fb fda6 	bl	8000972 <assert_failed>
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	68ba      	ldr	r2, [r7, #8]
 8004e2c:	0011      	movs	r1, r2
 8004e2e:	0018      	movs	r0, r3
 8004e30:	f000 fca4 	bl	800577c <TIM_OC1_SetConfig>
    break;
 8004e34:	e05e      	b.n	8004ef4 <HAL_TIM_OC_ConfigChannel+0x1e8>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	4a39      	ldr	r2, [pc, #228]	; (8004f20 <HAL_TIM_OC_ConfigChannel+0x214>)
 8004e3c:	4293      	cmp	r3, r2
 8004e3e:	d015      	beq.n	8004e6c <HAL_TIM_OC_ConfigChannel+0x160>
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	681a      	ldr	r2, [r3, #0]
 8004e44:	2380      	movs	r3, #128	; 0x80
 8004e46:	05db      	lsls	r3, r3, #23
 8004e48:	429a      	cmp	r2, r3
 8004e4a:	d00f      	beq.n	8004e6c <HAL_TIM_OC_ConfigChannel+0x160>
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	4a34      	ldr	r2, [pc, #208]	; (8004f24 <HAL_TIM_OC_ConfigChannel+0x218>)
 8004e52:	4293      	cmp	r3, r2
 8004e54:	d00a      	beq.n	8004e6c <HAL_TIM_OC_ConfigChannel+0x160>
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	4a34      	ldr	r2, [pc, #208]	; (8004f2c <HAL_TIM_OC_ConfigChannel+0x220>)
 8004e5c:	4293      	cmp	r3, r2
 8004e5e:	d005      	beq.n	8004e6c <HAL_TIM_OC_ConfigChannel+0x160>
 8004e60:	4a36      	ldr	r2, [pc, #216]	; (8004f3c <HAL_TIM_OC_ConfigChannel+0x230>)
 8004e62:	4b2c      	ldr	r3, [pc, #176]	; (8004f14 <HAL_TIM_OC_ConfigChannel+0x208>)
 8004e64:	0011      	movs	r1, r2
 8004e66:	0018      	movs	r0, r3
 8004e68:	f7fb fd83 	bl	8000972 <assert_failed>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	68ba      	ldr	r2, [r7, #8]
 8004e72:	0011      	movs	r1, r2
 8004e74:	0018      	movs	r0, r3
 8004e76:	f000 fd45 	bl	8005904 <TIM_OC2_SetConfig>
    break;
 8004e7a:	e03b      	b.n	8004ef4 <HAL_TIM_OC_ConfigChannel+0x1e8>
       assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	4a27      	ldr	r2, [pc, #156]	; (8004f20 <HAL_TIM_OC_ConfigChannel+0x214>)
 8004e82:	4293      	cmp	r3, r2
 8004e84:	d010      	beq.n	8004ea8 <HAL_TIM_OC_ConfigChannel+0x19c>
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	681a      	ldr	r2, [r3, #0]
 8004e8a:	2380      	movs	r3, #128	; 0x80
 8004e8c:	05db      	lsls	r3, r3, #23
 8004e8e:	429a      	cmp	r2, r3
 8004e90:	d00a      	beq.n	8004ea8 <HAL_TIM_OC_ConfigChannel+0x19c>
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	4a23      	ldr	r2, [pc, #140]	; (8004f24 <HAL_TIM_OC_ConfigChannel+0x218>)
 8004e98:	4293      	cmp	r3, r2
 8004e9a:	d005      	beq.n	8004ea8 <HAL_TIM_OC_ConfigChannel+0x19c>
 8004e9c:	4a28      	ldr	r2, [pc, #160]	; (8004f40 <HAL_TIM_OC_ConfigChannel+0x234>)
 8004e9e:	4b1d      	ldr	r3, [pc, #116]	; (8004f14 <HAL_TIM_OC_ConfigChannel+0x208>)
 8004ea0:	0011      	movs	r1, r2
 8004ea2:	0018      	movs	r0, r3
 8004ea4:	f7fb fd65 	bl	8000972 <assert_failed>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	68ba      	ldr	r2, [r7, #8]
 8004eae:	0011      	movs	r1, r2
 8004eb0:	0018      	movs	r0, r3
 8004eb2:	f000 fde7 	bl	8005a84 <TIM_OC3_SetConfig>
    break;
 8004eb6:	e01d      	b.n	8004ef4 <HAL_TIM_OC_ConfigChannel+0x1e8>
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	4a18      	ldr	r2, [pc, #96]	; (8004f20 <HAL_TIM_OC_ConfigChannel+0x214>)
 8004ebe:	4293      	cmp	r3, r2
 8004ec0:	d010      	beq.n	8004ee4 <HAL_TIM_OC_ConfigChannel+0x1d8>
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	681a      	ldr	r2, [r3, #0]
 8004ec6:	2380      	movs	r3, #128	; 0x80
 8004ec8:	05db      	lsls	r3, r3, #23
 8004eca:	429a      	cmp	r2, r3
 8004ecc:	d00a      	beq.n	8004ee4 <HAL_TIM_OC_ConfigChannel+0x1d8>
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	4a14      	ldr	r2, [pc, #80]	; (8004f24 <HAL_TIM_OC_ConfigChannel+0x218>)
 8004ed4:	4293      	cmp	r3, r2
 8004ed6:	d005      	beq.n	8004ee4 <HAL_TIM_OC_ConfigChannel+0x1d8>
 8004ed8:	4a1a      	ldr	r2, [pc, #104]	; (8004f44 <HAL_TIM_OC_ConfigChannel+0x238>)
 8004eda:	4b0e      	ldr	r3, [pc, #56]	; (8004f14 <HAL_TIM_OC_ConfigChannel+0x208>)
 8004edc:	0011      	movs	r1, r2
 8004ede:	0018      	movs	r0, r3
 8004ee0:	f7fb fd47 	bl	8000972 <assert_failed>
       TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	68ba      	ldr	r2, [r7, #8]
 8004eea:	0011      	movs	r1, r2
 8004eec:	0018      	movs	r0, r3
 8004eee:	f000 fe8b 	bl	8005c08 <TIM_OC4_SetConfig>
    break;
 8004ef2:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	223d      	movs	r2, #61	; 0x3d
 8004ef8:	2101      	movs	r1, #1
 8004efa:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	223c      	movs	r2, #60	; 0x3c
 8004f00:	2100      	movs	r1, #0
 8004f02:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004f04:	2300      	movs	r3, #0
}
 8004f06:	0018      	movs	r0, r3
 8004f08:	46bd      	mov	sp, r7
 8004f0a:	b004      	add	sp, #16
 8004f0c:	bd80      	pop	{r7, pc}
 8004f0e:	46c0      	nop			; (mov r8, r8)
 8004f10:	00000b77 	.word	0x00000b77
 8004f14:	08007124 	.word	0x08007124
 8004f18:	00000b78 	.word	0x00000b78
 8004f1c:	00000b79 	.word	0x00000b79
 8004f20:	40012c00 	.word	0x40012c00
 8004f24:	40000400 	.word	0x40000400
 8004f28:	40002000 	.word	0x40002000
 8004f2c:	40014000 	.word	0x40014000
 8004f30:	40014400 	.word	0x40014400
 8004f34:	40014800 	.word	0x40014800
 8004f38:	00000b84 	.word	0x00000b84
 8004f3c:	00000b8c 	.word	0x00000b8c
 8004f40:	00000b94 	.word	0x00000b94
 8004f44:	00000b9c 	.word	0x00000b9c

08004f48 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */ 
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef * sClockSourceConfig)
{
 8004f48:	b580      	push	{r7, lr}
 8004f4a:	b084      	sub	sp, #16
 8004f4c:	af00      	add	r7, sp, #0
 8004f4e:	6078      	str	r0, [r7, #4]
 8004f50:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr = 0U;
 8004f52:	2300      	movs	r3, #0
 8004f54:	60fb      	str	r3, [r7, #12]

  /* Process Locked */
  __HAL_LOCK(htim);
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	223c      	movs	r2, #60	; 0x3c
 8004f5a:	5c9b      	ldrb	r3, [r3, r2]
 8004f5c:	2b01      	cmp	r3, #1
 8004f5e:	d102      	bne.n	8004f66 <HAL_TIM_ConfigClockSource+0x1e>
 8004f60:	2302      	movs	r3, #2
 8004f62:	f000 fb52 	bl	800560a <HAL_TIM_ConfigClockSource+0x6c2>
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	223c      	movs	r2, #60	; 0x3c
 8004f6a:	2101      	movs	r1, #1
 8004f6c:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	223d      	movs	r2, #61	; 0x3d
 8004f72:	2102      	movs	r1, #2
 8004f74:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));
 8004f76:	683b      	ldr	r3, [r7, #0]
 8004f78:	681a      	ldr	r2, [r3, #0]
 8004f7a:	2380      	movs	r3, #128	; 0x80
 8004f7c:	015b      	lsls	r3, r3, #5
 8004f7e:	429a      	cmp	r2, r3
 8004f80:	d02b      	beq.n	8004fda <HAL_TIM_ConfigClockSource+0x92>
 8004f82:	683b      	ldr	r3, [r7, #0]
 8004f84:	681a      	ldr	r2, [r3, #0]
 8004f86:	2380      	movs	r3, #128	; 0x80
 8004f88:	019b      	lsls	r3, r3, #6
 8004f8a:	429a      	cmp	r2, r3
 8004f8c:	d025      	beq.n	8004fda <HAL_TIM_ConfigClockSource+0x92>
 8004f8e:	683b      	ldr	r3, [r7, #0]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d021      	beq.n	8004fda <HAL_TIM_ConfigClockSource+0x92>
 8004f96:	683b      	ldr	r3, [r7, #0]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	2b10      	cmp	r3, #16
 8004f9c:	d01d      	beq.n	8004fda <HAL_TIM_ConfigClockSource+0x92>
 8004f9e:	683b      	ldr	r3, [r7, #0]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	2b20      	cmp	r3, #32
 8004fa4:	d019      	beq.n	8004fda <HAL_TIM_ConfigClockSource+0x92>
 8004fa6:	683b      	ldr	r3, [r7, #0]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	2b30      	cmp	r3, #48	; 0x30
 8004fac:	d015      	beq.n	8004fda <HAL_TIM_ConfigClockSource+0x92>
 8004fae:	683b      	ldr	r3, [r7, #0]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	2b40      	cmp	r3, #64	; 0x40
 8004fb4:	d011      	beq.n	8004fda <HAL_TIM_ConfigClockSource+0x92>
 8004fb6:	683b      	ldr	r3, [r7, #0]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	2b50      	cmp	r3, #80	; 0x50
 8004fbc:	d00d      	beq.n	8004fda <HAL_TIM_ConfigClockSource+0x92>
 8004fbe:	683b      	ldr	r3, [r7, #0]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	2b60      	cmp	r3, #96	; 0x60
 8004fc4:	d009      	beq.n	8004fda <HAL_TIM_ConfigClockSource+0x92>
 8004fc6:	683b      	ldr	r3, [r7, #0]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	2b70      	cmp	r3, #112	; 0x70
 8004fcc:	d005      	beq.n	8004fda <HAL_TIM_ConfigClockSource+0x92>
 8004fce:	4aab      	ldr	r2, [pc, #684]	; (800527c <HAL_TIM_ConfigClockSource+0x334>)
 8004fd0:	4bab      	ldr	r3, [pc, #684]	; (8005280 <HAL_TIM_ConfigClockSource+0x338>)
 8004fd2:	0011      	movs	r1, r2
 8004fd4:	0018      	movs	r0, r3
 8004fd6:	f7fb fccc 	bl	8000972 <assert_failed>

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	689b      	ldr	r3, [r3, #8]
 8004fe0:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	2277      	movs	r2, #119	; 0x77
 8004fe6:	4393      	bics	r3, r2
 8004fe8:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	4aa5      	ldr	r2, [pc, #660]	; (8005284 <HAL_TIM_ConfigClockSource+0x33c>)
 8004fee:	4013      	ands	r3, r2
 8004ff0:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	68fa      	ldr	r2, [r7, #12]
 8004ff8:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004ffa:	683b      	ldr	r3, [r7, #0]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	2b40      	cmp	r3, #64	; 0x40
 8005000:	d100      	bne.n	8005004 <HAL_TIM_ConfigClockSource+0xbc>
 8005002:	e202      	b.n	800540a <HAL_TIM_ConfigClockSource+0x4c2>
 8005004:	d80e      	bhi.n	8005024 <HAL_TIM_ConfigClockSource+0xdc>
 8005006:	2b10      	cmp	r3, #16
 8005008:	d100      	bne.n	800500c <HAL_TIM_ConfigClockSource+0xc4>
 800500a:	e271      	b.n	80054f0 <HAL_TIM_ConfigClockSource+0x5a8>
 800500c:	d803      	bhi.n	8005016 <HAL_TIM_ConfigClockSource+0xce>
 800500e:	2b00      	cmp	r3, #0
 8005010:	d100      	bne.n	8005014 <HAL_TIM_ConfigClockSource+0xcc>
 8005012:	e24b      	b.n	80054ac <HAL_TIM_ConfigClockSource+0x564>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR3);
    }
    break;

  default:
    break;
 8005014:	e2f0      	b.n	80055f8 <HAL_TIM_ConfigClockSource+0x6b0>
  switch (sClockSourceConfig->ClockSource)
 8005016:	2b20      	cmp	r3, #32
 8005018:	d100      	bne.n	800501c <HAL_TIM_ConfigClockSource+0xd4>
 800501a:	e28b      	b.n	8005534 <HAL_TIM_ConfigClockSource+0x5ec>
 800501c:	2b30      	cmp	r3, #48	; 0x30
 800501e:	d100      	bne.n	8005022 <HAL_TIM_ConfigClockSource+0xda>
 8005020:	e2c8      	b.n	80055b4 <HAL_TIM_ConfigClockSource+0x66c>
    break;
 8005022:	e2e9      	b.n	80055f8 <HAL_TIM_ConfigClockSource+0x6b0>
  switch (sClockSourceConfig->ClockSource)
 8005024:	2b70      	cmp	r3, #112	; 0x70
 8005026:	d049      	beq.n	80050bc <HAL_TIM_ConfigClockSource+0x174>
 8005028:	d806      	bhi.n	8005038 <HAL_TIM_ConfigClockSource+0xf0>
 800502a:	2b50      	cmp	r3, #80	; 0x50
 800502c:	d100      	bne.n	8005030 <HAL_TIM_ConfigClockSource+0xe8>
 800502e:	e149      	b.n	80052c4 <HAL_TIM_ConfigClockSource+0x37c>
 8005030:	2b60      	cmp	r3, #96	; 0x60
 8005032:	d100      	bne.n	8005036 <HAL_TIM_ConfigClockSource+0xee>
 8005034:	e198      	b.n	8005368 <HAL_TIM_ConfigClockSource+0x420>
    break;
 8005036:	e2df      	b.n	80055f8 <HAL_TIM_ConfigClockSource+0x6b0>
  switch (sClockSourceConfig->ClockSource)
 8005038:	2280      	movs	r2, #128	; 0x80
 800503a:	0152      	lsls	r2, r2, #5
 800503c:	4293      	cmp	r3, r2
 800503e:	d005      	beq.n	800504c <HAL_TIM_ConfigClockSource+0x104>
 8005040:	2280      	movs	r2, #128	; 0x80
 8005042:	0192      	lsls	r2, r2, #6
 8005044:	4293      	cmp	r3, r2
 8005046:	d100      	bne.n	800504a <HAL_TIM_ConfigClockSource+0x102>
 8005048:	e0ab      	b.n	80051a2 <HAL_TIM_ConfigClockSource+0x25a>
    break;
 800504a:	e2d5      	b.n	80055f8 <HAL_TIM_ConfigClockSource+0x6b0>
      assert_param(IS_TIM_INSTANCE(htim->Instance));
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	4a8d      	ldr	r2, [pc, #564]	; (8005288 <HAL_TIM_ConfigClockSource+0x340>)
 8005052:	4293      	cmp	r3, r2
 8005054:	d029      	beq.n	80050aa <HAL_TIM_ConfigClockSource+0x162>
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	681a      	ldr	r2, [r3, #0]
 800505a:	2380      	movs	r3, #128	; 0x80
 800505c:	05db      	lsls	r3, r3, #23
 800505e:	429a      	cmp	r2, r3
 8005060:	d023      	beq.n	80050aa <HAL_TIM_ConfigClockSource+0x162>
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	4a89      	ldr	r2, [pc, #548]	; (800528c <HAL_TIM_ConfigClockSource+0x344>)
 8005068:	4293      	cmp	r3, r2
 800506a:	d01e      	beq.n	80050aa <HAL_TIM_ConfigClockSource+0x162>
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	4a87      	ldr	r2, [pc, #540]	; (8005290 <HAL_TIM_ConfigClockSource+0x348>)
 8005072:	4293      	cmp	r3, r2
 8005074:	d019      	beq.n	80050aa <HAL_TIM_ConfigClockSource+0x162>
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	4a86      	ldr	r2, [pc, #536]	; (8005294 <HAL_TIM_ConfigClockSource+0x34c>)
 800507c:	4293      	cmp	r3, r2
 800507e:	d014      	beq.n	80050aa <HAL_TIM_ConfigClockSource+0x162>
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	4a84      	ldr	r2, [pc, #528]	; (8005298 <HAL_TIM_ConfigClockSource+0x350>)
 8005086:	4293      	cmp	r3, r2
 8005088:	d00f      	beq.n	80050aa <HAL_TIM_ConfigClockSource+0x162>
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	4a83      	ldr	r2, [pc, #524]	; (800529c <HAL_TIM_ConfigClockSource+0x354>)
 8005090:	4293      	cmp	r3, r2
 8005092:	d00a      	beq.n	80050aa <HAL_TIM_ConfigClockSource+0x162>
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	4a81      	ldr	r2, [pc, #516]	; (80052a0 <HAL_TIM_ConfigClockSource+0x358>)
 800509a:	4293      	cmp	r3, r2
 800509c:	d005      	beq.n	80050aa <HAL_TIM_ConfigClockSource+0x162>
 800509e:	4a81      	ldr	r2, [pc, #516]	; (80052a4 <HAL_TIM_ConfigClockSource+0x35c>)
 80050a0:	4b77      	ldr	r3, [pc, #476]	; (8005280 <HAL_TIM_ConfigClockSource+0x338>)
 80050a2:	0011      	movs	r1, r2
 80050a4:	0018      	movs	r0, r3
 80050a6:	f7fb fc64 	bl	8000972 <assert_failed>
      htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	689a      	ldr	r2, [r3, #8]
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	2107      	movs	r1, #7
 80050b6:	438a      	bics	r2, r1
 80050b8:	609a      	str	r2, [r3, #8]
    break;
 80050ba:	e29d      	b.n	80055f8 <HAL_TIM_ConfigClockSource+0x6b0>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	4a71      	ldr	r2, [pc, #452]	; (8005288 <HAL_TIM_ConfigClockSource+0x340>)
 80050c2:	4293      	cmp	r3, r2
 80050c4:	d010      	beq.n	80050e8 <HAL_TIM_ConfigClockSource+0x1a0>
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	681a      	ldr	r2, [r3, #0]
 80050ca:	2380      	movs	r3, #128	; 0x80
 80050cc:	05db      	lsls	r3, r3, #23
 80050ce:	429a      	cmp	r2, r3
 80050d0:	d00a      	beq.n	80050e8 <HAL_TIM_ConfigClockSource+0x1a0>
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	4a6d      	ldr	r2, [pc, #436]	; (800528c <HAL_TIM_ConfigClockSource+0x344>)
 80050d8:	4293      	cmp	r3, r2
 80050da:	d005      	beq.n	80050e8 <HAL_TIM_ConfigClockSource+0x1a0>
 80050dc:	4a72      	ldr	r2, [pc, #456]	; (80052a8 <HAL_TIM_ConfigClockSource+0x360>)
 80050de:	4b68      	ldr	r3, [pc, #416]	; (8005280 <HAL_TIM_ConfigClockSource+0x338>)
 80050e0:	0011      	movs	r1, r2
 80050e2:	0018      	movs	r0, r3
 80050e4:	f7fb fc45 	bl	8000972 <assert_failed>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
 80050e8:	683b      	ldr	r3, [r7, #0]
 80050ea:	689b      	ldr	r3, [r3, #8]
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d017      	beq.n	8005120 <HAL_TIM_ConfigClockSource+0x1d8>
 80050f0:	683b      	ldr	r3, [r7, #0]
 80050f2:	689a      	ldr	r2, [r3, #8]
 80050f4:	2380      	movs	r3, #128	; 0x80
 80050f6:	015b      	lsls	r3, r3, #5
 80050f8:	429a      	cmp	r2, r3
 80050fa:	d011      	beq.n	8005120 <HAL_TIM_ConfigClockSource+0x1d8>
 80050fc:	683b      	ldr	r3, [r7, #0]
 80050fe:	689a      	ldr	r2, [r3, #8]
 8005100:	2380      	movs	r3, #128	; 0x80
 8005102:	019b      	lsls	r3, r3, #6
 8005104:	429a      	cmp	r2, r3
 8005106:	d00b      	beq.n	8005120 <HAL_TIM_ConfigClockSource+0x1d8>
 8005108:	683b      	ldr	r3, [r7, #0]
 800510a:	689a      	ldr	r2, [r3, #8]
 800510c:	23c0      	movs	r3, #192	; 0xc0
 800510e:	019b      	lsls	r3, r3, #6
 8005110:	429a      	cmp	r2, r3
 8005112:	d005      	beq.n	8005120 <HAL_TIM_ConfigClockSource+0x1d8>
 8005114:	4a65      	ldr	r2, [pc, #404]	; (80052ac <HAL_TIM_ConfigClockSource+0x364>)
 8005116:	4b5a      	ldr	r3, [pc, #360]	; (8005280 <HAL_TIM_ConfigClockSource+0x338>)
 8005118:	0011      	movs	r1, r2
 800511a:	0018      	movs	r0, r3
 800511c:	f7fb fc29 	bl	8000972 <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 8005120:	683b      	ldr	r3, [r7, #0]
 8005122:	685a      	ldr	r2, [r3, #4]
 8005124:	2380      	movs	r3, #128	; 0x80
 8005126:	021b      	lsls	r3, r3, #8
 8005128:	429a      	cmp	r2, r3
 800512a:	d015      	beq.n	8005158 <HAL_TIM_ConfigClockSource+0x210>
 800512c:	683b      	ldr	r3, [r7, #0]
 800512e:	685b      	ldr	r3, [r3, #4]
 8005130:	2b00      	cmp	r3, #0
 8005132:	d011      	beq.n	8005158 <HAL_TIM_ConfigClockSource+0x210>
 8005134:	683b      	ldr	r3, [r7, #0]
 8005136:	685b      	ldr	r3, [r3, #4]
 8005138:	2b00      	cmp	r3, #0
 800513a:	d00d      	beq.n	8005158 <HAL_TIM_ConfigClockSource+0x210>
 800513c:	683b      	ldr	r3, [r7, #0]
 800513e:	685b      	ldr	r3, [r3, #4]
 8005140:	2b02      	cmp	r3, #2
 8005142:	d009      	beq.n	8005158 <HAL_TIM_ConfigClockSource+0x210>
 8005144:	683b      	ldr	r3, [r7, #0]
 8005146:	685b      	ldr	r3, [r3, #4]
 8005148:	2b0a      	cmp	r3, #10
 800514a:	d005      	beq.n	8005158 <HAL_TIM_ConfigClockSource+0x210>
 800514c:	4a58      	ldr	r2, [pc, #352]	; (80052b0 <HAL_TIM_ConfigClockSource+0x368>)
 800514e:	4b4c      	ldr	r3, [pc, #304]	; (8005280 <HAL_TIM_ConfigClockSource+0x338>)
 8005150:	0011      	movs	r1, r2
 8005152:	0018      	movs	r0, r3
 8005154:	f7fb fc0d 	bl	8000972 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8005158:	683b      	ldr	r3, [r7, #0]
 800515a:	68db      	ldr	r3, [r3, #12]
 800515c:	2b0f      	cmp	r3, #15
 800515e:	d905      	bls.n	800516c <HAL_TIM_ConfigClockSource+0x224>
 8005160:	4a54      	ldr	r2, [pc, #336]	; (80052b4 <HAL_TIM_ConfigClockSource+0x36c>)
 8005162:	4b47      	ldr	r3, [pc, #284]	; (8005280 <HAL_TIM_ConfigClockSource+0x338>)
 8005164:	0011      	movs	r1, r2
 8005166:	0018      	movs	r0, r3
 8005168:	f7fb fc03 	bl	8000972 <assert_failed>
      TIM_ETR_SetConfig(htim->Instance,
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	6818      	ldr	r0, [r3, #0]
 8005170:	683b      	ldr	r3, [r7, #0]
 8005172:	6899      	ldr	r1, [r3, #8]
 8005174:	683b      	ldr	r3, [r7, #0]
 8005176:	685a      	ldr	r2, [r3, #4]
 8005178:	683b      	ldr	r3, [r7, #0]
 800517a:	68db      	ldr	r3, [r3, #12]
 800517c:	f000 fe50 	bl	8005e20 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	689b      	ldr	r3, [r3, #8]
 8005186:	60fb      	str	r3, [r7, #12]
      tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	2277      	movs	r2, #119	; 0x77
 800518c:	4393      	bics	r3, r2
 800518e:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	2277      	movs	r2, #119	; 0x77
 8005194:	4313      	orrs	r3, r2
 8005196:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	68fa      	ldr	r2, [r7, #12]
 800519e:	609a      	str	r2, [r3, #8]
    break;
 80051a0:	e22a      	b.n	80055f8 <HAL_TIM_ConfigClockSource+0x6b0>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE2_INSTANCE(htim->Instance));
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	4a38      	ldr	r2, [pc, #224]	; (8005288 <HAL_TIM_ConfigClockSource+0x340>)
 80051a8:	4293      	cmp	r3, r2
 80051aa:	d010      	beq.n	80051ce <HAL_TIM_ConfigClockSource+0x286>
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	681a      	ldr	r2, [r3, #0]
 80051b0:	2380      	movs	r3, #128	; 0x80
 80051b2:	05db      	lsls	r3, r3, #23
 80051b4:	429a      	cmp	r2, r3
 80051b6:	d00a      	beq.n	80051ce <HAL_TIM_ConfigClockSource+0x286>
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	4a33      	ldr	r2, [pc, #204]	; (800528c <HAL_TIM_ConfigClockSource+0x344>)
 80051be:	4293      	cmp	r3, r2
 80051c0:	d005      	beq.n	80051ce <HAL_TIM_ConfigClockSource+0x286>
 80051c2:	4a3d      	ldr	r2, [pc, #244]	; (80052b8 <HAL_TIM_ConfigClockSource+0x370>)
 80051c4:	4b2e      	ldr	r3, [pc, #184]	; (8005280 <HAL_TIM_ConfigClockSource+0x338>)
 80051c6:	0011      	movs	r1, r2
 80051c8:	0018      	movs	r0, r3
 80051ca:	f7fb fbd2 	bl	8000972 <assert_failed>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
 80051ce:	683b      	ldr	r3, [r7, #0]
 80051d0:	689b      	ldr	r3, [r3, #8]
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d017      	beq.n	8005206 <HAL_TIM_ConfigClockSource+0x2be>
 80051d6:	683b      	ldr	r3, [r7, #0]
 80051d8:	689a      	ldr	r2, [r3, #8]
 80051da:	2380      	movs	r3, #128	; 0x80
 80051dc:	015b      	lsls	r3, r3, #5
 80051de:	429a      	cmp	r2, r3
 80051e0:	d011      	beq.n	8005206 <HAL_TIM_ConfigClockSource+0x2be>
 80051e2:	683b      	ldr	r3, [r7, #0]
 80051e4:	689a      	ldr	r2, [r3, #8]
 80051e6:	2380      	movs	r3, #128	; 0x80
 80051e8:	019b      	lsls	r3, r3, #6
 80051ea:	429a      	cmp	r2, r3
 80051ec:	d00b      	beq.n	8005206 <HAL_TIM_ConfigClockSource+0x2be>
 80051ee:	683b      	ldr	r3, [r7, #0]
 80051f0:	689a      	ldr	r2, [r3, #8]
 80051f2:	23c0      	movs	r3, #192	; 0xc0
 80051f4:	019b      	lsls	r3, r3, #6
 80051f6:	429a      	cmp	r2, r3
 80051f8:	d005      	beq.n	8005206 <HAL_TIM_ConfigClockSource+0x2be>
 80051fa:	4a30      	ldr	r2, [pc, #192]	; (80052bc <HAL_TIM_ConfigClockSource+0x374>)
 80051fc:	4b20      	ldr	r3, [pc, #128]	; (8005280 <HAL_TIM_ConfigClockSource+0x338>)
 80051fe:	0011      	movs	r1, r2
 8005200:	0018      	movs	r0, r3
 8005202:	f7fb fbb6 	bl	8000972 <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 8005206:	683b      	ldr	r3, [r7, #0]
 8005208:	685a      	ldr	r2, [r3, #4]
 800520a:	2380      	movs	r3, #128	; 0x80
 800520c:	021b      	lsls	r3, r3, #8
 800520e:	429a      	cmp	r2, r3
 8005210:	d016      	beq.n	8005240 <HAL_TIM_ConfigClockSource+0x2f8>
 8005212:	683b      	ldr	r3, [r7, #0]
 8005214:	685b      	ldr	r3, [r3, #4]
 8005216:	2b00      	cmp	r3, #0
 8005218:	d012      	beq.n	8005240 <HAL_TIM_ConfigClockSource+0x2f8>
 800521a:	683b      	ldr	r3, [r7, #0]
 800521c:	685b      	ldr	r3, [r3, #4]
 800521e:	2b00      	cmp	r3, #0
 8005220:	d00e      	beq.n	8005240 <HAL_TIM_ConfigClockSource+0x2f8>
 8005222:	683b      	ldr	r3, [r7, #0]
 8005224:	685b      	ldr	r3, [r3, #4]
 8005226:	2b02      	cmp	r3, #2
 8005228:	d00a      	beq.n	8005240 <HAL_TIM_ConfigClockSource+0x2f8>
 800522a:	683b      	ldr	r3, [r7, #0]
 800522c:	685b      	ldr	r3, [r3, #4]
 800522e:	2b0a      	cmp	r3, #10
 8005230:	d006      	beq.n	8005240 <HAL_TIM_ConfigClockSource+0x2f8>
 8005232:	23ff      	movs	r3, #255	; 0xff
 8005234:	011a      	lsls	r2, r3, #4
 8005236:	4b12      	ldr	r3, [pc, #72]	; (8005280 <HAL_TIM_ConfigClockSource+0x338>)
 8005238:	0011      	movs	r1, r2
 800523a:	0018      	movs	r0, r3
 800523c:	f7fb fb99 	bl	8000972 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8005240:	683b      	ldr	r3, [r7, #0]
 8005242:	68db      	ldr	r3, [r3, #12]
 8005244:	2b0f      	cmp	r3, #15
 8005246:	d905      	bls.n	8005254 <HAL_TIM_ConfigClockSource+0x30c>
 8005248:	4a1d      	ldr	r2, [pc, #116]	; (80052c0 <HAL_TIM_ConfigClockSource+0x378>)
 800524a:	4b0d      	ldr	r3, [pc, #52]	; (8005280 <HAL_TIM_ConfigClockSource+0x338>)
 800524c:	0011      	movs	r1, r2
 800524e:	0018      	movs	r0, r3
 8005250:	f7fb fb8f 	bl	8000972 <assert_failed>
      TIM_ETR_SetConfig(htim->Instance,
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	6818      	ldr	r0, [r3, #0]
 8005258:	683b      	ldr	r3, [r7, #0]
 800525a:	6899      	ldr	r1, [r3, #8]
 800525c:	683b      	ldr	r3, [r7, #0]
 800525e:	685a      	ldr	r2, [r3, #4]
 8005260:	683b      	ldr	r3, [r7, #0]
 8005262:	68db      	ldr	r3, [r3, #12]
 8005264:	f000 fddc 	bl	8005e20 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	689a      	ldr	r2, [r3, #8]
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	2180      	movs	r1, #128	; 0x80
 8005274:	01c9      	lsls	r1, r1, #7
 8005276:	430a      	orrs	r2, r1
 8005278:	609a      	str	r2, [r3, #8]
    break;
 800527a:	e1bd      	b.n	80055f8 <HAL_TIM_ConfigClockSource+0x6b0>
 800527c:	00000fbd 	.word	0x00000fbd
 8005280:	08007124 	.word	0x08007124
 8005284:	ffff00ff 	.word	0xffff00ff
 8005288:	40012c00 	.word	0x40012c00
 800528c:	40000400 	.word	0x40000400
 8005290:	40001000 	.word	0x40001000
 8005294:	40002000 	.word	0x40002000
 8005298:	40014000 	.word	0x40014000
 800529c:	40014400 	.word	0x40014400
 80052a0:	40014800 	.word	0x40014800
 80052a4:	00000fc9 	.word	0x00000fc9
 80052a8:	00000fd2 	.word	0x00000fd2
 80052ac:	00000fd5 	.word	0x00000fd5
 80052b0:	00000fd6 	.word	0x00000fd6
 80052b4:	00000fd7 	.word	0x00000fd7
 80052b8:	00000fec 	.word	0x00000fec
 80052bc:	00000fef 	.word	0x00000fef
 80052c0:	00000ff1 	.word	0x00000ff1
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	4aab      	ldr	r2, [pc, #684]	; (8005578 <HAL_TIM_ConfigClockSource+0x630>)
 80052ca:	4293      	cmp	r3, r2
 80052cc:	d016      	beq.n	80052fc <HAL_TIM_ConfigClockSource+0x3b4>
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	681a      	ldr	r2, [r3, #0]
 80052d2:	2380      	movs	r3, #128	; 0x80
 80052d4:	05db      	lsls	r3, r3, #23
 80052d6:	429a      	cmp	r2, r3
 80052d8:	d010      	beq.n	80052fc <HAL_TIM_ConfigClockSource+0x3b4>
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	4aa7      	ldr	r2, [pc, #668]	; (800557c <HAL_TIM_ConfigClockSource+0x634>)
 80052e0:	4293      	cmp	r3, r2
 80052e2:	d00b      	beq.n	80052fc <HAL_TIM_ConfigClockSource+0x3b4>
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	4aa5      	ldr	r2, [pc, #660]	; (8005580 <HAL_TIM_ConfigClockSource+0x638>)
 80052ea:	4293      	cmp	r3, r2
 80052ec:	d006      	beq.n	80052fc <HAL_TIM_ConfigClockSource+0x3b4>
 80052ee:	2380      	movs	r3, #128	; 0x80
 80052f0:	015a      	lsls	r2, r3, #5
 80052f2:	4ba4      	ldr	r3, [pc, #656]	; (8005584 <HAL_TIM_ConfigClockSource+0x63c>)
 80052f4:	0011      	movs	r1, r2
 80052f6:	0018      	movs	r0, r3
 80052f8:	f7fb fb3b 	bl	8000972 <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 80052fc:	683b      	ldr	r3, [r7, #0]
 80052fe:	685a      	ldr	r2, [r3, #4]
 8005300:	2380      	movs	r3, #128	; 0x80
 8005302:	021b      	lsls	r3, r3, #8
 8005304:	429a      	cmp	r2, r3
 8005306:	d015      	beq.n	8005334 <HAL_TIM_ConfigClockSource+0x3ec>
 8005308:	683b      	ldr	r3, [r7, #0]
 800530a:	685b      	ldr	r3, [r3, #4]
 800530c:	2b00      	cmp	r3, #0
 800530e:	d011      	beq.n	8005334 <HAL_TIM_ConfigClockSource+0x3ec>
 8005310:	683b      	ldr	r3, [r7, #0]
 8005312:	685b      	ldr	r3, [r3, #4]
 8005314:	2b00      	cmp	r3, #0
 8005316:	d00d      	beq.n	8005334 <HAL_TIM_ConfigClockSource+0x3ec>
 8005318:	683b      	ldr	r3, [r7, #0]
 800531a:	685b      	ldr	r3, [r3, #4]
 800531c:	2b02      	cmp	r3, #2
 800531e:	d009      	beq.n	8005334 <HAL_TIM_ConfigClockSource+0x3ec>
 8005320:	683b      	ldr	r3, [r7, #0]
 8005322:	685b      	ldr	r3, [r3, #4]
 8005324:	2b0a      	cmp	r3, #10
 8005326:	d005      	beq.n	8005334 <HAL_TIM_ConfigClockSource+0x3ec>
 8005328:	4a97      	ldr	r2, [pc, #604]	; (8005588 <HAL_TIM_ConfigClockSource+0x640>)
 800532a:	4b96      	ldr	r3, [pc, #600]	; (8005584 <HAL_TIM_ConfigClockSource+0x63c>)
 800532c:	0011      	movs	r1, r2
 800532e:	0018      	movs	r0, r3
 8005330:	f7fb fb1f 	bl	8000972 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8005334:	683b      	ldr	r3, [r7, #0]
 8005336:	68db      	ldr	r3, [r3, #12]
 8005338:	2b0f      	cmp	r3, #15
 800533a:	d905      	bls.n	8005348 <HAL_TIM_ConfigClockSource+0x400>
 800533c:	4a93      	ldr	r2, [pc, #588]	; (800558c <HAL_TIM_ConfigClockSource+0x644>)
 800533e:	4b91      	ldr	r3, [pc, #580]	; (8005584 <HAL_TIM_ConfigClockSource+0x63c>)
 8005340:	0011      	movs	r1, r2
 8005342:	0018      	movs	r0, r3
 8005344:	f7fb fb15 	bl	8000972 <assert_failed>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	6818      	ldr	r0, [r3, #0]
 800534c:	683b      	ldr	r3, [r7, #0]
 800534e:	6859      	ldr	r1, [r3, #4]
 8005350:	683b      	ldr	r3, [r7, #0]
 8005352:	68db      	ldr	r3, [r3, #12]
 8005354:	001a      	movs	r2, r3
 8005356:	f000 fcdb 	bl	8005d10 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	2150      	movs	r1, #80	; 0x50
 8005360:	0018      	movs	r0, r3
 8005362:	f000 fd3d 	bl	8005de0 <TIM_ITRx_SetConfig>
    break;
 8005366:	e147      	b.n	80055f8 <HAL_TIM_ConfigClockSource+0x6b0>
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	4a82      	ldr	r2, [pc, #520]	; (8005578 <HAL_TIM_ConfigClockSource+0x630>)
 800536e:	4293      	cmp	r3, r2
 8005370:	d015      	beq.n	800539e <HAL_TIM_ConfigClockSource+0x456>
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	681a      	ldr	r2, [r3, #0]
 8005376:	2380      	movs	r3, #128	; 0x80
 8005378:	05db      	lsls	r3, r3, #23
 800537a:	429a      	cmp	r2, r3
 800537c:	d00f      	beq.n	800539e <HAL_TIM_ConfigClockSource+0x456>
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	4a7e      	ldr	r2, [pc, #504]	; (800557c <HAL_TIM_ConfigClockSource+0x634>)
 8005384:	4293      	cmp	r3, r2
 8005386:	d00a      	beq.n	800539e <HAL_TIM_ConfigClockSource+0x456>
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	4a7c      	ldr	r2, [pc, #496]	; (8005580 <HAL_TIM_ConfigClockSource+0x638>)
 800538e:	4293      	cmp	r3, r2
 8005390:	d005      	beq.n	800539e <HAL_TIM_ConfigClockSource+0x456>
 8005392:	4a7f      	ldr	r2, [pc, #508]	; (8005590 <HAL_TIM_ConfigClockSource+0x648>)
 8005394:	4b7b      	ldr	r3, [pc, #492]	; (8005584 <HAL_TIM_ConfigClockSource+0x63c>)
 8005396:	0011      	movs	r1, r2
 8005398:	0018      	movs	r0, r3
 800539a:	f7fb faea 	bl	8000972 <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 800539e:	683b      	ldr	r3, [r7, #0]
 80053a0:	685a      	ldr	r2, [r3, #4]
 80053a2:	2380      	movs	r3, #128	; 0x80
 80053a4:	021b      	lsls	r3, r3, #8
 80053a6:	429a      	cmp	r2, r3
 80053a8:	d015      	beq.n	80053d6 <HAL_TIM_ConfigClockSource+0x48e>
 80053aa:	683b      	ldr	r3, [r7, #0]
 80053ac:	685b      	ldr	r3, [r3, #4]
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d011      	beq.n	80053d6 <HAL_TIM_ConfigClockSource+0x48e>
 80053b2:	683b      	ldr	r3, [r7, #0]
 80053b4:	685b      	ldr	r3, [r3, #4]
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d00d      	beq.n	80053d6 <HAL_TIM_ConfigClockSource+0x48e>
 80053ba:	683b      	ldr	r3, [r7, #0]
 80053bc:	685b      	ldr	r3, [r3, #4]
 80053be:	2b02      	cmp	r3, #2
 80053c0:	d009      	beq.n	80053d6 <HAL_TIM_ConfigClockSource+0x48e>
 80053c2:	683b      	ldr	r3, [r7, #0]
 80053c4:	685b      	ldr	r3, [r3, #4]
 80053c6:	2b0a      	cmp	r3, #10
 80053c8:	d005      	beq.n	80053d6 <HAL_TIM_ConfigClockSource+0x48e>
 80053ca:	4a72      	ldr	r2, [pc, #456]	; (8005594 <HAL_TIM_ConfigClockSource+0x64c>)
 80053cc:	4b6d      	ldr	r3, [pc, #436]	; (8005584 <HAL_TIM_ConfigClockSource+0x63c>)
 80053ce:	0011      	movs	r1, r2
 80053d0:	0018      	movs	r0, r3
 80053d2:	f7fb face 	bl	8000972 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 80053d6:	683b      	ldr	r3, [r7, #0]
 80053d8:	68db      	ldr	r3, [r3, #12]
 80053da:	2b0f      	cmp	r3, #15
 80053dc:	d905      	bls.n	80053ea <HAL_TIM_ConfigClockSource+0x4a2>
 80053de:	4a6e      	ldr	r2, [pc, #440]	; (8005598 <HAL_TIM_ConfigClockSource+0x650>)
 80053e0:	4b68      	ldr	r3, [pc, #416]	; (8005584 <HAL_TIM_ConfigClockSource+0x63c>)
 80053e2:	0011      	movs	r1, r2
 80053e4:	0018      	movs	r0, r3
 80053e6:	f7fb fac4 	bl	8000972 <assert_failed>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	6818      	ldr	r0, [r3, #0]
 80053ee:	683b      	ldr	r3, [r7, #0]
 80053f0:	6859      	ldr	r1, [r3, #4]
 80053f2:	683b      	ldr	r3, [r7, #0]
 80053f4:	68db      	ldr	r3, [r3, #12]
 80053f6:	001a      	movs	r2, r3
 80053f8:	f000 fcbc 	bl	8005d74 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	2160      	movs	r1, #96	; 0x60
 8005402:	0018      	movs	r0, r3
 8005404:	f000 fcec 	bl	8005de0 <TIM_ITRx_SetConfig>
    break;
 8005408:	e0f6      	b.n	80055f8 <HAL_TIM_ConfigClockSource+0x6b0>
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	4a5a      	ldr	r2, [pc, #360]	; (8005578 <HAL_TIM_ConfigClockSource+0x630>)
 8005410:	4293      	cmp	r3, r2
 8005412:	d015      	beq.n	8005440 <HAL_TIM_ConfigClockSource+0x4f8>
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	681a      	ldr	r2, [r3, #0]
 8005418:	2380      	movs	r3, #128	; 0x80
 800541a:	05db      	lsls	r3, r3, #23
 800541c:	429a      	cmp	r2, r3
 800541e:	d00f      	beq.n	8005440 <HAL_TIM_ConfigClockSource+0x4f8>
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	4a55      	ldr	r2, [pc, #340]	; (800557c <HAL_TIM_ConfigClockSource+0x634>)
 8005426:	4293      	cmp	r3, r2
 8005428:	d00a      	beq.n	8005440 <HAL_TIM_ConfigClockSource+0x4f8>
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	4a54      	ldr	r2, [pc, #336]	; (8005580 <HAL_TIM_ConfigClockSource+0x638>)
 8005430:	4293      	cmp	r3, r2
 8005432:	d005      	beq.n	8005440 <HAL_TIM_ConfigClockSource+0x4f8>
 8005434:	4a59      	ldr	r2, [pc, #356]	; (800559c <HAL_TIM_ConfigClockSource+0x654>)
 8005436:	4b53      	ldr	r3, [pc, #332]	; (8005584 <HAL_TIM_ConfigClockSource+0x63c>)
 8005438:	0011      	movs	r1, r2
 800543a:	0018      	movs	r0, r3
 800543c:	f7fb fa99 	bl	8000972 <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 8005440:	683b      	ldr	r3, [r7, #0]
 8005442:	685a      	ldr	r2, [r3, #4]
 8005444:	2380      	movs	r3, #128	; 0x80
 8005446:	021b      	lsls	r3, r3, #8
 8005448:	429a      	cmp	r2, r3
 800544a:	d015      	beq.n	8005478 <HAL_TIM_ConfigClockSource+0x530>
 800544c:	683b      	ldr	r3, [r7, #0]
 800544e:	685b      	ldr	r3, [r3, #4]
 8005450:	2b00      	cmp	r3, #0
 8005452:	d011      	beq.n	8005478 <HAL_TIM_ConfigClockSource+0x530>
 8005454:	683b      	ldr	r3, [r7, #0]
 8005456:	685b      	ldr	r3, [r3, #4]
 8005458:	2b00      	cmp	r3, #0
 800545a:	d00d      	beq.n	8005478 <HAL_TIM_ConfigClockSource+0x530>
 800545c:	683b      	ldr	r3, [r7, #0]
 800545e:	685b      	ldr	r3, [r3, #4]
 8005460:	2b02      	cmp	r3, #2
 8005462:	d009      	beq.n	8005478 <HAL_TIM_ConfigClockSource+0x530>
 8005464:	683b      	ldr	r3, [r7, #0]
 8005466:	685b      	ldr	r3, [r3, #4]
 8005468:	2b0a      	cmp	r3, #10
 800546a:	d005      	beq.n	8005478 <HAL_TIM_ConfigClockSource+0x530>
 800546c:	4a4c      	ldr	r2, [pc, #304]	; (80055a0 <HAL_TIM_ConfigClockSource+0x658>)
 800546e:	4b45      	ldr	r3, [pc, #276]	; (8005584 <HAL_TIM_ConfigClockSource+0x63c>)
 8005470:	0011      	movs	r1, r2
 8005472:	0018      	movs	r0, r3
 8005474:	f7fb fa7d 	bl	8000972 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8005478:	683b      	ldr	r3, [r7, #0]
 800547a:	68db      	ldr	r3, [r3, #12]
 800547c:	2b0f      	cmp	r3, #15
 800547e:	d905      	bls.n	800548c <HAL_TIM_ConfigClockSource+0x544>
 8005480:	4a48      	ldr	r2, [pc, #288]	; (80055a4 <HAL_TIM_ConfigClockSource+0x65c>)
 8005482:	4b40      	ldr	r3, [pc, #256]	; (8005584 <HAL_TIM_ConfigClockSource+0x63c>)
 8005484:	0011      	movs	r1, r2
 8005486:	0018      	movs	r0, r3
 8005488:	f7fb fa73 	bl	8000972 <assert_failed>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	6818      	ldr	r0, [r3, #0]
 8005490:	683b      	ldr	r3, [r7, #0]
 8005492:	6859      	ldr	r1, [r3, #4]
 8005494:	683b      	ldr	r3, [r7, #0]
 8005496:	68db      	ldr	r3, [r3, #12]
 8005498:	001a      	movs	r2, r3
 800549a:	f000 fc39 	bl	8005d10 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	2140      	movs	r1, #64	; 0x40
 80054a4:	0018      	movs	r0, r3
 80054a6:	f000 fc9b 	bl	8005de0 <TIM_ITRx_SetConfig>
    break;
 80054aa:	e0a5      	b.n	80055f8 <HAL_TIM_ConfigClockSource+0x6b0>
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	4a31      	ldr	r2, [pc, #196]	; (8005578 <HAL_TIM_ConfigClockSource+0x630>)
 80054b2:	4293      	cmp	r3, r2
 80054b4:	d015      	beq.n	80054e2 <HAL_TIM_ConfigClockSource+0x59a>
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	681a      	ldr	r2, [r3, #0]
 80054ba:	2380      	movs	r3, #128	; 0x80
 80054bc:	05db      	lsls	r3, r3, #23
 80054be:	429a      	cmp	r2, r3
 80054c0:	d00f      	beq.n	80054e2 <HAL_TIM_ConfigClockSource+0x59a>
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	4a2d      	ldr	r2, [pc, #180]	; (800557c <HAL_TIM_ConfigClockSource+0x634>)
 80054c8:	4293      	cmp	r3, r2
 80054ca:	d00a      	beq.n	80054e2 <HAL_TIM_ConfigClockSource+0x59a>
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	4a2b      	ldr	r2, [pc, #172]	; (8005580 <HAL_TIM_ConfigClockSource+0x638>)
 80054d2:	4293      	cmp	r3, r2
 80054d4:	d005      	beq.n	80054e2 <HAL_TIM_ConfigClockSource+0x59a>
 80054d6:	4a34      	ldr	r2, [pc, #208]	; (80055a8 <HAL_TIM_ConfigClockSource+0x660>)
 80054d8:	4b2a      	ldr	r3, [pc, #168]	; (8005584 <HAL_TIM_ConfigClockSource+0x63c>)
 80054da:	0011      	movs	r1, r2
 80054dc:	0018      	movs	r0, r3
 80054de:	f7fb fa48 	bl	8000972 <assert_failed>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR0);
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	2100      	movs	r1, #0
 80054e8:	0018      	movs	r0, r3
 80054ea:	f000 fc79 	bl	8005de0 <TIM_ITRx_SetConfig>
    break;
 80054ee:	e083      	b.n	80055f8 <HAL_TIM_ConfigClockSource+0x6b0>
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	4a20      	ldr	r2, [pc, #128]	; (8005578 <HAL_TIM_ConfigClockSource+0x630>)
 80054f6:	4293      	cmp	r3, r2
 80054f8:	d015      	beq.n	8005526 <HAL_TIM_ConfigClockSource+0x5de>
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	681a      	ldr	r2, [r3, #0]
 80054fe:	2380      	movs	r3, #128	; 0x80
 8005500:	05db      	lsls	r3, r3, #23
 8005502:	429a      	cmp	r2, r3
 8005504:	d00f      	beq.n	8005526 <HAL_TIM_ConfigClockSource+0x5de>
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	4a1c      	ldr	r2, [pc, #112]	; (800557c <HAL_TIM_ConfigClockSource+0x634>)
 800550c:	4293      	cmp	r3, r2
 800550e:	d00a      	beq.n	8005526 <HAL_TIM_ConfigClockSource+0x5de>
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	4a1a      	ldr	r2, [pc, #104]	; (8005580 <HAL_TIM_ConfigClockSource+0x638>)
 8005516:	4293      	cmp	r3, r2
 8005518:	d005      	beq.n	8005526 <HAL_TIM_ConfigClockSource+0x5de>
 800551a:	4a24      	ldr	r2, [pc, #144]	; (80055ac <HAL_TIM_ConfigClockSource+0x664>)
 800551c:	4b19      	ldr	r3, [pc, #100]	; (8005584 <HAL_TIM_ConfigClockSource+0x63c>)
 800551e:	0011      	movs	r1, r2
 8005520:	0018      	movs	r0, r3
 8005522:	f7fb fa26 	bl	8000972 <assert_failed>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR1);
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	2110      	movs	r1, #16
 800552c:	0018      	movs	r0, r3
 800552e:	f000 fc57 	bl	8005de0 <TIM_ITRx_SetConfig>
    break;
 8005532:	e061      	b.n	80055f8 <HAL_TIM_ConfigClockSource+0x6b0>
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	4a0f      	ldr	r2, [pc, #60]	; (8005578 <HAL_TIM_ConfigClockSource+0x630>)
 800553a:	4293      	cmp	r3, r2
 800553c:	d015      	beq.n	800556a <HAL_TIM_ConfigClockSource+0x622>
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	681a      	ldr	r2, [r3, #0]
 8005542:	2380      	movs	r3, #128	; 0x80
 8005544:	05db      	lsls	r3, r3, #23
 8005546:	429a      	cmp	r2, r3
 8005548:	d00f      	beq.n	800556a <HAL_TIM_ConfigClockSource+0x622>
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	4a0b      	ldr	r2, [pc, #44]	; (800557c <HAL_TIM_ConfigClockSource+0x634>)
 8005550:	4293      	cmp	r3, r2
 8005552:	d00a      	beq.n	800556a <HAL_TIM_ConfigClockSource+0x622>
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	4a09      	ldr	r2, [pc, #36]	; (8005580 <HAL_TIM_ConfigClockSource+0x638>)
 800555a:	4293      	cmp	r3, r2
 800555c:	d005      	beq.n	800556a <HAL_TIM_ConfigClockSource+0x622>
 800555e:	4a14      	ldr	r2, [pc, #80]	; (80055b0 <HAL_TIM_ConfigClockSource+0x668>)
 8005560:	4b08      	ldr	r3, [pc, #32]	; (8005584 <HAL_TIM_ConfigClockSource+0x63c>)
 8005562:	0011      	movs	r1, r2
 8005564:	0018      	movs	r0, r3
 8005566:	f7fb fa04 	bl	8000972 <assert_failed>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR2);
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	2120      	movs	r1, #32
 8005570:	0018      	movs	r0, r3
 8005572:	f000 fc35 	bl	8005de0 <TIM_ITRx_SetConfig>
    break;
 8005576:	e03f      	b.n	80055f8 <HAL_TIM_ConfigClockSource+0x6b0>
 8005578:	40012c00 	.word	0x40012c00
 800557c:	40000400 	.word	0x40000400
 8005580:	40014000 	.word	0x40014000
 8005584:	08007124 	.word	0x08007124
 8005588:	00001003 	.word	0x00001003
 800558c:	00001004 	.word	0x00001004
 8005590:	0000100f 	.word	0x0000100f
 8005594:	00001012 	.word	0x00001012
 8005598:	00001013 	.word	0x00001013
 800559c:	0000101e 	.word	0x0000101e
 80055a0:	00001021 	.word	0x00001021
 80055a4:	00001022 	.word	0x00001022
 80055a8:	0000102d 	.word	0x0000102d
 80055ac:	00001035 	.word	0x00001035
 80055b0:	0000103d 	.word	0x0000103d
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	4a16      	ldr	r2, [pc, #88]	; (8005614 <HAL_TIM_ConfigClockSource+0x6cc>)
 80055ba:	4293      	cmp	r3, r2
 80055bc:	d015      	beq.n	80055ea <HAL_TIM_ConfigClockSource+0x6a2>
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	681a      	ldr	r2, [r3, #0]
 80055c2:	2380      	movs	r3, #128	; 0x80
 80055c4:	05db      	lsls	r3, r3, #23
 80055c6:	429a      	cmp	r2, r3
 80055c8:	d00f      	beq.n	80055ea <HAL_TIM_ConfigClockSource+0x6a2>
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	4a12      	ldr	r2, [pc, #72]	; (8005618 <HAL_TIM_ConfigClockSource+0x6d0>)
 80055d0:	4293      	cmp	r3, r2
 80055d2:	d00a      	beq.n	80055ea <HAL_TIM_ConfigClockSource+0x6a2>
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	4a10      	ldr	r2, [pc, #64]	; (800561c <HAL_TIM_ConfigClockSource+0x6d4>)
 80055da:	4293      	cmp	r3, r2
 80055dc:	d005      	beq.n	80055ea <HAL_TIM_ConfigClockSource+0x6a2>
 80055de:	4a10      	ldr	r2, [pc, #64]	; (8005620 <HAL_TIM_ConfigClockSource+0x6d8>)
 80055e0:	4b10      	ldr	r3, [pc, #64]	; (8005624 <HAL_TIM_ConfigClockSource+0x6dc>)
 80055e2:	0011      	movs	r1, r2
 80055e4:	0018      	movs	r0, r3
 80055e6:	f7fb f9c4 	bl	8000972 <assert_failed>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR3);
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	2130      	movs	r1, #48	; 0x30
 80055f0:	0018      	movs	r0, r3
 80055f2:	f000 fbf5 	bl	8005de0 <TIM_ITRx_SetConfig>
    break;
 80055f6:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	223d      	movs	r2, #61	; 0x3d
 80055fc:	2101      	movs	r1, #1
 80055fe:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	223c      	movs	r2, #60	; 0x3c
 8005604:	2100      	movs	r1, #0
 8005606:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005608:	2300      	movs	r3, #0
}
 800560a:	0018      	movs	r0, r3
 800560c:	46bd      	mov	sp, r7
 800560e:	b004      	add	sp, #16
 8005610:	bd80      	pop	{r7, pc}
 8005612:	46c0      	nop			; (mov r8, r8)
 8005614:	40012c00 	.word	0x40012c00
 8005618:	40000400 	.word	0x40000400
 800561c:	40014000 	.word	0x40014000
 8005620:	00001045 	.word	0x00001045
 8005624:	08007124 	.word	0x08007124

08005628 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non blocking mode 
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005628:	b580      	push	{r7, lr}
 800562a:	b082      	sub	sp, #8
 800562c:	af00      	add	r7, sp, #0
 800562e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the __HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */

}
 8005630:	46c0      	nop			; (mov r8, r8)
 8005632:	46bd      	mov	sp, r7
 8005634:	b002      	add	sp, #8
 8005636:	bd80      	pop	{r7, pc}

08005638 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non blocking mode 
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005638:	b580      	push	{r7, lr}
 800563a:	b082      	sub	sp, #8
 800563c:	af00      	add	r7, sp, #0
 800563e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the __HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005640:	46c0      	nop			; (mov r8, r8)
 8005642:	46bd      	mov	sp, r7
 8005644:	b002      	add	sp, #8
 8005646:	bd80      	pop	{r7, pc}

08005648 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non blocking mode 
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005648:	b580      	push	{r7, lr}
 800564a:	b082      	sub	sp, #8
 800564c:	af00      	add	r7, sp, #0
 800564e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the __HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005650:	46c0      	nop			; (mov r8, r8)
 8005652:	46bd      	mov	sp, r7
 8005654:	b002      	add	sp, #8
 8005656:	bd80      	pop	{r7, pc}

08005658 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non blocking mode 
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005658:	b580      	push	{r7, lr}
 800565a:	b082      	sub	sp, #8
 800565c:	af00      	add	r7, sp, #0
 800565e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the __HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005660:	46c0      	nop			; (mov r8, r8)
 8005662:	46bd      	mov	sp, r7
 8005664:	b002      	add	sp, #8
 8005666:	bd80      	pop	{r7, pc}

08005668 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non blocking mode 
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005668:	b580      	push	{r7, lr}
 800566a:	b082      	sub	sp, #8
 800566c:	af00      	add	r7, sp, #0
 800566e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005670:	46c0      	nop			; (mov r8, r8)
 8005672:	46bd      	mov	sp, r7
 8005674:	b002      	add	sp, #8
 8005676:	bd80      	pop	{r7, pc}

08005678 <TIM_Base_SetConfig>:
  * @param  TIMx TIM periheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005678:	b580      	push	{r7, lr}
 800567a:	b084      	sub	sp, #16
 800567c:	af00      	add	r7, sp, #0
 800567e:	6078      	str	r0, [r7, #4]
 8005680:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1 = 0U;
 8005682:	2300      	movs	r3, #0
 8005684:	60fb      	str	r3, [r7, #12]
  tmpcr1 = TIMx->CR1;
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	4a34      	ldr	r2, [pc, #208]	; (8005760 <TIM_Base_SetConfig+0xe8>)
 8005690:	4293      	cmp	r3, r2
 8005692:	d008      	beq.n	80056a6 <TIM_Base_SetConfig+0x2e>
 8005694:	687a      	ldr	r2, [r7, #4]
 8005696:	2380      	movs	r3, #128	; 0x80
 8005698:	05db      	lsls	r3, r3, #23
 800569a:	429a      	cmp	r2, r3
 800569c:	d003      	beq.n	80056a6 <TIM_Base_SetConfig+0x2e>
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	4a30      	ldr	r2, [pc, #192]	; (8005764 <TIM_Base_SetConfig+0xec>)
 80056a2:	4293      	cmp	r3, r2
 80056a4:	d108      	bne.n	80056b8 <TIM_Base_SetConfig+0x40>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	2270      	movs	r2, #112	; 0x70
 80056aa:	4393      	bics	r3, r2
 80056ac:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80056ae:	683b      	ldr	r3, [r7, #0]
 80056b0:	685b      	ldr	r3, [r3, #4]
 80056b2:	68fa      	ldr	r2, [r7, #12]
 80056b4:	4313      	orrs	r3, r2
 80056b6:	60fb      	str	r3, [r7, #12]
  }

  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	4a29      	ldr	r2, [pc, #164]	; (8005760 <TIM_Base_SetConfig+0xe8>)
 80056bc:	4293      	cmp	r3, r2
 80056be:	d018      	beq.n	80056f2 <TIM_Base_SetConfig+0x7a>
 80056c0:	687a      	ldr	r2, [r7, #4]
 80056c2:	2380      	movs	r3, #128	; 0x80
 80056c4:	05db      	lsls	r3, r3, #23
 80056c6:	429a      	cmp	r2, r3
 80056c8:	d013      	beq.n	80056f2 <TIM_Base_SetConfig+0x7a>
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	4a25      	ldr	r2, [pc, #148]	; (8005764 <TIM_Base_SetConfig+0xec>)
 80056ce:	4293      	cmp	r3, r2
 80056d0:	d00f      	beq.n	80056f2 <TIM_Base_SetConfig+0x7a>
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	4a24      	ldr	r2, [pc, #144]	; (8005768 <TIM_Base_SetConfig+0xf0>)
 80056d6:	4293      	cmp	r3, r2
 80056d8:	d00b      	beq.n	80056f2 <TIM_Base_SetConfig+0x7a>
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	4a23      	ldr	r2, [pc, #140]	; (800576c <TIM_Base_SetConfig+0xf4>)
 80056de:	4293      	cmp	r3, r2
 80056e0:	d007      	beq.n	80056f2 <TIM_Base_SetConfig+0x7a>
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	4a22      	ldr	r2, [pc, #136]	; (8005770 <TIM_Base_SetConfig+0xf8>)
 80056e6:	4293      	cmp	r3, r2
 80056e8:	d003      	beq.n	80056f2 <TIM_Base_SetConfig+0x7a>
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	4a21      	ldr	r2, [pc, #132]	; (8005774 <TIM_Base_SetConfig+0xfc>)
 80056ee:	4293      	cmp	r3, r2
 80056f0:	d108      	bne.n	8005704 <TIM_Base_SetConfig+0x8c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	4a20      	ldr	r2, [pc, #128]	; (8005778 <TIM_Base_SetConfig+0x100>)
 80056f6:	4013      	ands	r3, r2
 80056f8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80056fa:	683b      	ldr	r3, [r7, #0]
 80056fc:	68db      	ldr	r3, [r3, #12]
 80056fe:	68fa      	ldr	r2, [r7, #12]
 8005700:	4313      	orrs	r3, r2
 8005702:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	2280      	movs	r2, #128	; 0x80
 8005708:	4393      	bics	r3, r2
 800570a:	001a      	movs	r2, r3
 800570c:	683b      	ldr	r3, [r7, #0]
 800570e:	695b      	ldr	r3, [r3, #20]
 8005710:	4313      	orrs	r3, r2
 8005712:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	68fa      	ldr	r2, [r7, #12]
 8005718:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800571a:	683b      	ldr	r3, [r7, #0]
 800571c:	689a      	ldr	r2, [r3, #8]
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8005722:	683b      	ldr	r3, [r7, #0]
 8005724:	681a      	ldr	r2, [r3, #0]
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	4a0c      	ldr	r2, [pc, #48]	; (8005760 <TIM_Base_SetConfig+0xe8>)
 800572e:	4293      	cmp	r3, r2
 8005730:	d00b      	beq.n	800574a <TIM_Base_SetConfig+0xd2>
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	4a0d      	ldr	r2, [pc, #52]	; (800576c <TIM_Base_SetConfig+0xf4>)
 8005736:	4293      	cmp	r3, r2
 8005738:	d007      	beq.n	800574a <TIM_Base_SetConfig+0xd2>
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	4a0c      	ldr	r2, [pc, #48]	; (8005770 <TIM_Base_SetConfig+0xf8>)
 800573e:	4293      	cmp	r3, r2
 8005740:	d003      	beq.n	800574a <TIM_Base_SetConfig+0xd2>
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	4a0b      	ldr	r2, [pc, #44]	; (8005774 <TIM_Base_SetConfig+0xfc>)
 8005746:	4293      	cmp	r3, r2
 8005748:	d103      	bne.n	8005752 <TIM_Base_SetConfig+0xda>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800574a:	683b      	ldr	r3, [r7, #0]
 800574c:	691a      	ldr	r2, [r3, #16]
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediatly */
  TIMx->EGR = TIM_EGR_UG;
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	2201      	movs	r2, #1
 8005756:	615a      	str	r2, [r3, #20]
}
 8005758:	46c0      	nop			; (mov r8, r8)
 800575a:	46bd      	mov	sp, r7
 800575c:	b004      	add	sp, #16
 800575e:	bd80      	pop	{r7, pc}
 8005760:	40012c00 	.word	0x40012c00
 8005764:	40000400 	.word	0x40000400
 8005768:	40002000 	.word	0x40002000
 800576c:	40014000 	.word	0x40014000
 8005770:	40014400 	.word	0x40014400
 8005774:	40014800 	.word	0x40014800
 8005778:	fffffcff 	.word	0xfffffcff

0800577c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800577c:	b580      	push	{r7, lr}
 800577e:	b086      	sub	sp, #24
 8005780:	af00      	add	r7, sp, #0
 8005782:	6078      	str	r0, [r7, #4]
 8005784:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx = 0U;
 8005786:	2300      	movs	r3, #0
 8005788:	60fb      	str	r3, [r7, #12]
  uint32_t tmpccer = 0U;
 800578a:	2300      	movs	r3, #0
 800578c:	617b      	str	r3, [r7, #20]
  uint32_t tmpcr2 = 0U;
 800578e:	2300      	movs	r3, #0
 8005790:	613b      	str	r3, [r7, #16]

   /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	6a1b      	ldr	r3, [r3, #32]
 8005796:	2201      	movs	r2, #1
 8005798:	4393      	bics	r3, r2
 800579a:	001a      	movs	r2, r3
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	6a1b      	ldr	r3, [r3, #32]
 80057a4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	685b      	ldr	r3, [r3, #4]
 80057aa:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	699b      	ldr	r3, [r3, #24]
 80057b0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	2270      	movs	r2, #112	; 0x70
 80057b6:	4393      	bics	r3, r2
 80057b8:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	2203      	movs	r2, #3
 80057be:	4393      	bics	r3, r2
 80057c0:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80057c2:	683b      	ldr	r3, [r7, #0]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	68fa      	ldr	r2, [r7, #12]
 80057c8:	4313      	orrs	r3, r2
 80057ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80057cc:	697b      	ldr	r3, [r7, #20]
 80057ce:	2202      	movs	r2, #2
 80057d0:	4393      	bics	r3, r2
 80057d2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80057d4:	683b      	ldr	r3, [r7, #0]
 80057d6:	689b      	ldr	r3, [r3, #8]
 80057d8:	697a      	ldr	r2, [r7, #20]
 80057da:	4313      	orrs	r3, r2
 80057dc:	617b      	str	r3, [r7, #20]

  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	4a3e      	ldr	r2, [pc, #248]	; (80058dc <TIM_OC1_SetConfig+0x160>)
 80057e2:	4293      	cmp	r3, r2
 80057e4:	d00b      	beq.n	80057fe <TIM_OC1_SetConfig+0x82>
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	4a3d      	ldr	r2, [pc, #244]	; (80058e0 <TIM_OC1_SetConfig+0x164>)
 80057ea:	4293      	cmp	r3, r2
 80057ec:	d007      	beq.n	80057fe <TIM_OC1_SetConfig+0x82>
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	4a3c      	ldr	r2, [pc, #240]	; (80058e4 <TIM_OC1_SetConfig+0x168>)
 80057f2:	4293      	cmp	r3, r2
 80057f4:	d003      	beq.n	80057fe <TIM_OC1_SetConfig+0x82>
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	4a3b      	ldr	r2, [pc, #236]	; (80058e8 <TIM_OC1_SetConfig+0x16c>)
 80057fa:	4293      	cmp	r3, r2
 80057fc:	d11a      	bne.n	8005834 <TIM_OC1_SetConfig+0xb8>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 80057fe:	683b      	ldr	r3, [r7, #0]
 8005800:	68db      	ldr	r3, [r3, #12]
 8005802:	2b00      	cmp	r3, #0
 8005804:	d009      	beq.n	800581a <TIM_OC1_SetConfig+0x9e>
 8005806:	683b      	ldr	r3, [r7, #0]
 8005808:	68db      	ldr	r3, [r3, #12]
 800580a:	2b08      	cmp	r3, #8
 800580c:	d005      	beq.n	800581a <TIM_OC1_SetConfig+0x9e>
 800580e:	4a37      	ldr	r2, [pc, #220]	; (80058ec <TIM_OC1_SetConfig+0x170>)
 8005810:	4b37      	ldr	r3, [pc, #220]	; (80058f0 <TIM_OC1_SetConfig+0x174>)
 8005812:	0011      	movs	r1, r2
 8005814:	0018      	movs	r0, r3
 8005816:	f7fb f8ac 	bl	8000972 <assert_failed>

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800581a:	697b      	ldr	r3, [r7, #20]
 800581c:	2208      	movs	r2, #8
 800581e:	4393      	bics	r3, r2
 8005820:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005822:	683b      	ldr	r3, [r7, #0]
 8005824:	68db      	ldr	r3, [r3, #12]
 8005826:	697a      	ldr	r2, [r7, #20]
 8005828:	4313      	orrs	r3, r2
 800582a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800582c:	697b      	ldr	r3, [r7, #20]
 800582e:	2204      	movs	r2, #4
 8005830:	4393      	bics	r3, r2
 8005832:	617b      	str	r3, [r7, #20]
  }

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	4a29      	ldr	r2, [pc, #164]	; (80058dc <TIM_OC1_SetConfig+0x160>)
 8005838:	4293      	cmp	r3, r2
 800583a:	d00b      	beq.n	8005854 <TIM_OC1_SetConfig+0xd8>
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	4a28      	ldr	r2, [pc, #160]	; (80058e0 <TIM_OC1_SetConfig+0x164>)
 8005840:	4293      	cmp	r3, r2
 8005842:	d007      	beq.n	8005854 <TIM_OC1_SetConfig+0xd8>
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	4a27      	ldr	r2, [pc, #156]	; (80058e4 <TIM_OC1_SetConfig+0x168>)
 8005848:	4293      	cmp	r3, r2
 800584a:	d003      	beq.n	8005854 <TIM_OC1_SetConfig+0xd8>
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	4a26      	ldr	r2, [pc, #152]	; (80058e8 <TIM_OC1_SetConfig+0x16c>)
 8005850:	4293      	cmp	r3, r2
 8005852:	d131      	bne.n	80058b8 <TIM_OC1_SetConfig+0x13c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 8005854:	683b      	ldr	r3, [r7, #0]
 8005856:	699a      	ldr	r2, [r3, #24]
 8005858:	2380      	movs	r3, #128	; 0x80
 800585a:	009b      	lsls	r3, r3, #2
 800585c:	429a      	cmp	r2, r3
 800585e:	d009      	beq.n	8005874 <TIM_OC1_SetConfig+0xf8>
 8005860:	683b      	ldr	r3, [r7, #0]
 8005862:	699b      	ldr	r3, [r3, #24]
 8005864:	2b00      	cmp	r3, #0
 8005866:	d005      	beq.n	8005874 <TIM_OC1_SetConfig+0xf8>
 8005868:	4a22      	ldr	r2, [pc, #136]	; (80058f4 <TIM_OC1_SetConfig+0x178>)
 800586a:	4b21      	ldr	r3, [pc, #132]	; (80058f0 <TIM_OC1_SetConfig+0x174>)
 800586c:	0011      	movs	r1, r2
 800586e:	0018      	movs	r0, r3
 8005870:	f7fb f87f 	bl	8000972 <assert_failed>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 8005874:	683b      	ldr	r3, [r7, #0]
 8005876:	695a      	ldr	r2, [r3, #20]
 8005878:	2380      	movs	r3, #128	; 0x80
 800587a:	005b      	lsls	r3, r3, #1
 800587c:	429a      	cmp	r2, r3
 800587e:	d009      	beq.n	8005894 <TIM_OC1_SetConfig+0x118>
 8005880:	683b      	ldr	r3, [r7, #0]
 8005882:	695b      	ldr	r3, [r3, #20]
 8005884:	2b00      	cmp	r3, #0
 8005886:	d005      	beq.n	8005894 <TIM_OC1_SetConfig+0x118>
 8005888:	4a1b      	ldr	r2, [pc, #108]	; (80058f8 <TIM_OC1_SetConfig+0x17c>)
 800588a:	4b19      	ldr	r3, [pc, #100]	; (80058f0 <TIM_OC1_SetConfig+0x174>)
 800588c:	0011      	movs	r1, r2
 800588e:	0018      	movs	r0, r3
 8005890:	f7fb f86f 	bl	8000972 <assert_failed>

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005894:	693b      	ldr	r3, [r7, #16]
 8005896:	4a19      	ldr	r2, [pc, #100]	; (80058fc <TIM_OC1_SetConfig+0x180>)
 8005898:	4013      	ands	r3, r2
 800589a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800589c:	693b      	ldr	r3, [r7, #16]
 800589e:	4a18      	ldr	r2, [pc, #96]	; (8005900 <TIM_OC1_SetConfig+0x184>)
 80058a0:	4013      	ands	r3, r2
 80058a2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80058a4:	683b      	ldr	r3, [r7, #0]
 80058a6:	695b      	ldr	r3, [r3, #20]
 80058a8:	693a      	ldr	r2, [r7, #16]
 80058aa:	4313      	orrs	r3, r2
 80058ac:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80058ae:	683b      	ldr	r3, [r7, #0]
 80058b0:	699b      	ldr	r3, [r3, #24]
 80058b2:	693a      	ldr	r2, [r7, #16]
 80058b4:	4313      	orrs	r3, r2
 80058b6:	613b      	str	r3, [r7, #16]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	693a      	ldr	r2, [r7, #16]
 80058bc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	68fa      	ldr	r2, [r7, #12]
 80058c2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80058c4:	683b      	ldr	r3, [r7, #0]
 80058c6:	685a      	ldr	r2, [r3, #4]
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	697a      	ldr	r2, [r7, #20]
 80058d0:	621a      	str	r2, [r3, #32]
}
 80058d2:	46c0      	nop			; (mov r8, r8)
 80058d4:	46bd      	mov	sp, r7
 80058d6:	b006      	add	sp, #24
 80058d8:	bd80      	pop	{r7, pc}
 80058da:	46c0      	nop			; (mov r8, r8)
 80058dc:	40012c00 	.word	0x40012c00
 80058e0:	40014000 	.word	0x40014000
 80058e4:	40014400 	.word	0x40014400
 80058e8:	40014800 	.word	0x40014800
 80058ec:	00001290 	.word	0x00001290
 80058f0:	08007124 	.word	0x08007124
 80058f4:	0000129d 	.word	0x0000129d
 80058f8:	0000129e 	.word	0x0000129e
 80058fc:	fffffeff 	.word	0xfffffeff
 8005900:	fffffdff 	.word	0xfffffdff

08005904 <TIM_OC2_SetConfig>:
  * @param  TIMx  to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005904:	b580      	push	{r7, lr}
 8005906:	b086      	sub	sp, #24
 8005908:	af00      	add	r7, sp, #0
 800590a:	6078      	str	r0, [r7, #4]
 800590c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx = 0U;
 800590e:	2300      	movs	r3, #0
 8005910:	60fb      	str	r3, [r7, #12]
  uint32_t tmpccer = 0U;
 8005912:	2300      	movs	r3, #0
 8005914:	617b      	str	r3, [r7, #20]
  uint32_t tmpcr2 = 0U;
 8005916:	2300      	movs	r3, #0
 8005918:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	6a1b      	ldr	r3, [r3, #32]
 800591e:	2210      	movs	r2, #16
 8005920:	4393      	bics	r3, r2
 8005922:	001a      	movs	r2, r3
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	6a1b      	ldr	r3, [r3, #32]
 800592c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	685b      	ldr	r3, [r3, #4]
 8005932:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	699b      	ldr	r3, [r3, #24]
 8005938:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	4a45      	ldr	r2, [pc, #276]	; (8005a54 <TIM_OC2_SetConfig+0x150>)
 800593e:	4013      	ands	r3, r2
 8005940:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	4a44      	ldr	r2, [pc, #272]	; (8005a58 <TIM_OC2_SetConfig+0x154>)
 8005946:	4013      	ands	r3, r2
 8005948:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800594a:	683b      	ldr	r3, [r7, #0]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	021b      	lsls	r3, r3, #8
 8005950:	68fa      	ldr	r2, [r7, #12]
 8005952:	4313      	orrs	r3, r2
 8005954:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005956:	697b      	ldr	r3, [r7, #20]
 8005958:	2220      	movs	r2, #32
 800595a:	4393      	bics	r3, r2
 800595c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800595e:	683b      	ldr	r3, [r7, #0]
 8005960:	689b      	ldr	r3, [r3, #8]
 8005962:	011b      	lsls	r3, r3, #4
 8005964:	697a      	ldr	r2, [r7, #20]
 8005966:	4313      	orrs	r3, r2
 8005968:	617b      	str	r3, [r7, #20]

  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	4a3b      	ldr	r2, [pc, #236]	; (8005a5c <TIM_OC2_SetConfig+0x158>)
 800596e:	4293      	cmp	r3, r2
 8005970:	d11b      	bne.n	80059aa <TIM_OC2_SetConfig+0xa6>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 8005972:	683b      	ldr	r3, [r7, #0]
 8005974:	68db      	ldr	r3, [r3, #12]
 8005976:	2b00      	cmp	r3, #0
 8005978:	d009      	beq.n	800598e <TIM_OC2_SetConfig+0x8a>
 800597a:	683b      	ldr	r3, [r7, #0]
 800597c:	68db      	ldr	r3, [r3, #12]
 800597e:	2b08      	cmp	r3, #8
 8005980:	d005      	beq.n	800598e <TIM_OC2_SetConfig+0x8a>
 8005982:	4a37      	ldr	r2, [pc, #220]	; (8005a60 <TIM_OC2_SetConfig+0x15c>)
 8005984:	4b37      	ldr	r3, [pc, #220]	; (8005a64 <TIM_OC2_SetConfig+0x160>)
 8005986:	0011      	movs	r1, r2
 8005988:	0018      	movs	r0, r3
 800598a:	f7fa fff2 	bl	8000972 <assert_failed>

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800598e:	697b      	ldr	r3, [r7, #20]
 8005990:	2280      	movs	r2, #128	; 0x80
 8005992:	4393      	bics	r3, r2
 8005994:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005996:	683b      	ldr	r3, [r7, #0]
 8005998:	68db      	ldr	r3, [r3, #12]
 800599a:	011b      	lsls	r3, r3, #4
 800599c:	697a      	ldr	r2, [r7, #20]
 800599e:	4313      	orrs	r3, r2
 80059a0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80059a2:	697b      	ldr	r3, [r7, #20]
 80059a4:	2240      	movs	r2, #64	; 0x40
 80059a6:	4393      	bics	r3, r2
 80059a8:	617b      	str	r3, [r7, #20]

  }

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	4a2b      	ldr	r2, [pc, #172]	; (8005a5c <TIM_OC2_SetConfig+0x158>)
 80059ae:	4293      	cmp	r3, r2
 80059b0:	d00b      	beq.n	80059ca <TIM_OC2_SetConfig+0xc6>
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	4a2c      	ldr	r2, [pc, #176]	; (8005a68 <TIM_OC2_SetConfig+0x164>)
 80059b6:	4293      	cmp	r3, r2
 80059b8:	d007      	beq.n	80059ca <TIM_OC2_SetConfig+0xc6>
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	4a2b      	ldr	r2, [pc, #172]	; (8005a6c <TIM_OC2_SetConfig+0x168>)
 80059be:	4293      	cmp	r3, r2
 80059c0:	d003      	beq.n	80059ca <TIM_OC2_SetConfig+0xc6>
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	4a2a      	ldr	r2, [pc, #168]	; (8005a70 <TIM_OC2_SetConfig+0x16c>)
 80059c6:	4293      	cmp	r3, r2
 80059c8:	d133      	bne.n	8005a32 <TIM_OC2_SetConfig+0x12e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 80059ca:	683b      	ldr	r3, [r7, #0]
 80059cc:	699a      	ldr	r2, [r3, #24]
 80059ce:	2380      	movs	r3, #128	; 0x80
 80059d0:	009b      	lsls	r3, r3, #2
 80059d2:	429a      	cmp	r2, r3
 80059d4:	d009      	beq.n	80059ea <TIM_OC2_SetConfig+0xe6>
 80059d6:	683b      	ldr	r3, [r7, #0]
 80059d8:	699b      	ldr	r3, [r3, #24]
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d005      	beq.n	80059ea <TIM_OC2_SetConfig+0xe6>
 80059de:	4a25      	ldr	r2, [pc, #148]	; (8005a74 <TIM_OC2_SetConfig+0x170>)
 80059e0:	4b20      	ldr	r3, [pc, #128]	; (8005a64 <TIM_OC2_SetConfig+0x160>)
 80059e2:	0011      	movs	r1, r2
 80059e4:	0018      	movs	r0, r3
 80059e6:	f7fa ffc4 	bl	8000972 <assert_failed>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 80059ea:	683b      	ldr	r3, [r7, #0]
 80059ec:	695a      	ldr	r2, [r3, #20]
 80059ee:	2380      	movs	r3, #128	; 0x80
 80059f0:	005b      	lsls	r3, r3, #1
 80059f2:	429a      	cmp	r2, r3
 80059f4:	d009      	beq.n	8005a0a <TIM_OC2_SetConfig+0x106>
 80059f6:	683b      	ldr	r3, [r7, #0]
 80059f8:	695b      	ldr	r3, [r3, #20]
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d005      	beq.n	8005a0a <TIM_OC2_SetConfig+0x106>
 80059fe:	4a1e      	ldr	r2, [pc, #120]	; (8005a78 <TIM_OC2_SetConfig+0x174>)
 8005a00:	4b18      	ldr	r3, [pc, #96]	; (8005a64 <TIM_OC2_SetConfig+0x160>)
 8005a02:	0011      	movs	r1, r2
 8005a04:	0018      	movs	r0, r3
 8005a06:	f7fa ffb4 	bl	8000972 <assert_failed>

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005a0a:	693b      	ldr	r3, [r7, #16]
 8005a0c:	4a1b      	ldr	r2, [pc, #108]	; (8005a7c <TIM_OC2_SetConfig+0x178>)
 8005a0e:	4013      	ands	r3, r2
 8005a10:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005a12:	693b      	ldr	r3, [r7, #16]
 8005a14:	4a1a      	ldr	r2, [pc, #104]	; (8005a80 <TIM_OC2_SetConfig+0x17c>)
 8005a16:	4013      	ands	r3, r2
 8005a18:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005a1a:	683b      	ldr	r3, [r7, #0]
 8005a1c:	695b      	ldr	r3, [r3, #20]
 8005a1e:	009b      	lsls	r3, r3, #2
 8005a20:	693a      	ldr	r2, [r7, #16]
 8005a22:	4313      	orrs	r3, r2
 8005a24:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005a26:	683b      	ldr	r3, [r7, #0]
 8005a28:	699b      	ldr	r3, [r3, #24]
 8005a2a:	009b      	lsls	r3, r3, #2
 8005a2c:	693a      	ldr	r2, [r7, #16]
 8005a2e:	4313      	orrs	r3, r2
 8005a30:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	693a      	ldr	r2, [r7, #16]
 8005a36:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	68fa      	ldr	r2, [r7, #12]
 8005a3c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005a3e:	683b      	ldr	r3, [r7, #0]
 8005a40:	685a      	ldr	r2, [r3, #4]
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	697a      	ldr	r2, [r7, #20]
 8005a4a:	621a      	str	r2, [r3, #32]
}
 8005a4c:	46c0      	nop			; (mov r8, r8)
 8005a4e:	46bd      	mov	sp, r7
 8005a50:	b006      	add	sp, #24
 8005a52:	bd80      	pop	{r7, pc}
 8005a54:	ffff8fff 	.word	0xffff8fff
 8005a58:	fffffcff 	.word	0xfffffcff
 8005a5c:	40012c00 	.word	0x40012c00
 8005a60:	000012da 	.word	0x000012da
 8005a64:	08007124 	.word	0x08007124
 8005a68:	40014000 	.word	0x40014000
 8005a6c:	40014400 	.word	0x40014400
 8005a70:	40014800 	.word	0x40014800
 8005a74:	000012e8 	.word	0x000012e8
 8005a78:	000012e9 	.word	0x000012e9
 8005a7c:	fffffbff 	.word	0xfffffbff
 8005a80:	fffff7ff 	.word	0xfffff7ff

08005a84 <TIM_OC3_SetConfig>:
  * @param  TIMx  to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005a84:	b580      	push	{r7, lr}
 8005a86:	b086      	sub	sp, #24
 8005a88:	af00      	add	r7, sp, #0
 8005a8a:	6078      	str	r0, [r7, #4]
 8005a8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx = 0U;
 8005a8e:	2300      	movs	r3, #0
 8005a90:	60fb      	str	r3, [r7, #12]
  uint32_t tmpccer = 0U;
 8005a92:	2300      	movs	r3, #0
 8005a94:	617b      	str	r3, [r7, #20]
  uint32_t tmpcr2 = 0U;
 8005a96:	2300      	movs	r3, #0
 8005a98:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	6a1b      	ldr	r3, [r3, #32]
 8005a9e:	4a4c      	ldr	r2, [pc, #304]	; (8005bd0 <TIM_OC3_SetConfig+0x14c>)
 8005aa0:	401a      	ands	r2, r3
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	6a1b      	ldr	r3, [r3, #32]
 8005aaa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	685b      	ldr	r3, [r3, #4]
 8005ab0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	69db      	ldr	r3, [r3, #28]
 8005ab6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	2270      	movs	r2, #112	; 0x70
 8005abc:	4393      	bics	r3, r2
 8005abe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	2203      	movs	r2, #3
 8005ac4:	4393      	bics	r3, r2
 8005ac6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005ac8:	683b      	ldr	r3, [r7, #0]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	68fa      	ldr	r2, [r7, #12]
 8005ace:	4313      	orrs	r3, r2
 8005ad0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005ad2:	697b      	ldr	r3, [r7, #20]
 8005ad4:	4a3f      	ldr	r2, [pc, #252]	; (8005bd4 <TIM_OC3_SetConfig+0x150>)
 8005ad6:	4013      	ands	r3, r2
 8005ad8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005ada:	683b      	ldr	r3, [r7, #0]
 8005adc:	689b      	ldr	r3, [r3, #8]
 8005ade:	021b      	lsls	r3, r3, #8
 8005ae0:	697a      	ldr	r2, [r7, #20]
 8005ae2:	4313      	orrs	r3, r2
 8005ae4:	617b      	str	r3, [r7, #20]

  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	4a3b      	ldr	r2, [pc, #236]	; (8005bd8 <TIM_OC3_SetConfig+0x154>)
 8005aea:	4293      	cmp	r3, r2
 8005aec:	d11b      	bne.n	8005b26 <TIM_OC3_SetConfig+0xa2>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 8005aee:	683b      	ldr	r3, [r7, #0]
 8005af0:	68db      	ldr	r3, [r3, #12]
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	d009      	beq.n	8005b0a <TIM_OC3_SetConfig+0x86>
 8005af6:	683b      	ldr	r3, [r7, #0]
 8005af8:	68db      	ldr	r3, [r3, #12]
 8005afa:	2b08      	cmp	r3, #8
 8005afc:	d005      	beq.n	8005b0a <TIM_OC3_SetConfig+0x86>
 8005afe:	4a37      	ldr	r2, [pc, #220]	; (8005bdc <TIM_OC3_SetConfig+0x158>)
 8005b00:	4b37      	ldr	r3, [pc, #220]	; (8005be0 <TIM_OC3_SetConfig+0x15c>)
 8005b02:	0011      	movs	r1, r2
 8005b04:	0018      	movs	r0, r3
 8005b06:	f7fa ff34 	bl	8000972 <assert_failed>

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005b0a:	697b      	ldr	r3, [r7, #20]
 8005b0c:	4a35      	ldr	r2, [pc, #212]	; (8005be4 <TIM_OC3_SetConfig+0x160>)
 8005b0e:	4013      	ands	r3, r2
 8005b10:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005b12:	683b      	ldr	r3, [r7, #0]
 8005b14:	68db      	ldr	r3, [r3, #12]
 8005b16:	021b      	lsls	r3, r3, #8
 8005b18:	697a      	ldr	r2, [r7, #20]
 8005b1a:	4313      	orrs	r3, r2
 8005b1c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005b1e:	697b      	ldr	r3, [r7, #20]
 8005b20:	4a31      	ldr	r2, [pc, #196]	; (8005be8 <TIM_OC3_SetConfig+0x164>)
 8005b22:	4013      	ands	r3, r2
 8005b24:	617b      	str	r3, [r7, #20]
  }

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	4a2b      	ldr	r2, [pc, #172]	; (8005bd8 <TIM_OC3_SetConfig+0x154>)
 8005b2a:	4293      	cmp	r3, r2
 8005b2c:	d00b      	beq.n	8005b46 <TIM_OC3_SetConfig+0xc2>
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	4a2e      	ldr	r2, [pc, #184]	; (8005bec <TIM_OC3_SetConfig+0x168>)
 8005b32:	4293      	cmp	r3, r2
 8005b34:	d007      	beq.n	8005b46 <TIM_OC3_SetConfig+0xc2>
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	4a2d      	ldr	r2, [pc, #180]	; (8005bf0 <TIM_OC3_SetConfig+0x16c>)
 8005b3a:	4293      	cmp	r3, r2
 8005b3c:	d003      	beq.n	8005b46 <TIM_OC3_SetConfig+0xc2>
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	4a2c      	ldr	r2, [pc, #176]	; (8005bf4 <TIM_OC3_SetConfig+0x170>)
 8005b42:	4293      	cmp	r3, r2
 8005b44:	d133      	bne.n	8005bae <TIM_OC3_SetConfig+0x12a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 8005b46:	683b      	ldr	r3, [r7, #0]
 8005b48:	699a      	ldr	r2, [r3, #24]
 8005b4a:	2380      	movs	r3, #128	; 0x80
 8005b4c:	009b      	lsls	r3, r3, #2
 8005b4e:	429a      	cmp	r2, r3
 8005b50:	d009      	beq.n	8005b66 <TIM_OC3_SetConfig+0xe2>
 8005b52:	683b      	ldr	r3, [r7, #0]
 8005b54:	699b      	ldr	r3, [r3, #24]
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	d005      	beq.n	8005b66 <TIM_OC3_SetConfig+0xe2>
 8005b5a:	4a27      	ldr	r2, [pc, #156]	; (8005bf8 <TIM_OC3_SetConfig+0x174>)
 8005b5c:	4b20      	ldr	r3, [pc, #128]	; (8005be0 <TIM_OC3_SetConfig+0x15c>)
 8005b5e:	0011      	movs	r1, r2
 8005b60:	0018      	movs	r0, r3
 8005b62:	f7fa ff06 	bl	8000972 <assert_failed>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 8005b66:	683b      	ldr	r3, [r7, #0]
 8005b68:	695a      	ldr	r2, [r3, #20]
 8005b6a:	2380      	movs	r3, #128	; 0x80
 8005b6c:	005b      	lsls	r3, r3, #1
 8005b6e:	429a      	cmp	r2, r3
 8005b70:	d009      	beq.n	8005b86 <TIM_OC3_SetConfig+0x102>
 8005b72:	683b      	ldr	r3, [r7, #0]
 8005b74:	695b      	ldr	r3, [r3, #20]
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	d005      	beq.n	8005b86 <TIM_OC3_SetConfig+0x102>
 8005b7a:	4a20      	ldr	r2, [pc, #128]	; (8005bfc <TIM_OC3_SetConfig+0x178>)
 8005b7c:	4b18      	ldr	r3, [pc, #96]	; (8005be0 <TIM_OC3_SetConfig+0x15c>)
 8005b7e:	0011      	movs	r1, r2
 8005b80:	0018      	movs	r0, r3
 8005b82:	f7fa fef6 	bl	8000972 <assert_failed>

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005b86:	693b      	ldr	r3, [r7, #16]
 8005b88:	4a1d      	ldr	r2, [pc, #116]	; (8005c00 <TIM_OC3_SetConfig+0x17c>)
 8005b8a:	4013      	ands	r3, r2
 8005b8c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005b8e:	693b      	ldr	r3, [r7, #16]
 8005b90:	4a1c      	ldr	r2, [pc, #112]	; (8005c04 <TIM_OC3_SetConfig+0x180>)
 8005b92:	4013      	ands	r3, r2
 8005b94:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005b96:	683b      	ldr	r3, [r7, #0]
 8005b98:	695b      	ldr	r3, [r3, #20]
 8005b9a:	011b      	lsls	r3, r3, #4
 8005b9c:	693a      	ldr	r2, [r7, #16]
 8005b9e:	4313      	orrs	r3, r2
 8005ba0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005ba2:	683b      	ldr	r3, [r7, #0]
 8005ba4:	699b      	ldr	r3, [r3, #24]
 8005ba6:	011b      	lsls	r3, r3, #4
 8005ba8:	693a      	ldr	r2, [r7, #16]
 8005baa:	4313      	orrs	r3, r2
 8005bac:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	693a      	ldr	r2, [r7, #16]
 8005bb2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	68fa      	ldr	r2, [r7, #12]
 8005bb8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005bba:	683b      	ldr	r3, [r7, #0]
 8005bbc:	685a      	ldr	r2, [r3, #4]
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	697a      	ldr	r2, [r7, #20]
 8005bc6:	621a      	str	r2, [r3, #32]
}
 8005bc8:	46c0      	nop			; (mov r8, r8)
 8005bca:	46bd      	mov	sp, r7
 8005bcc:	b006      	add	sp, #24
 8005bce:	bd80      	pop	{r7, pc}
 8005bd0:	fffffeff 	.word	0xfffffeff
 8005bd4:	fffffdff 	.word	0xfffffdff
 8005bd8:	40012c00 	.word	0x40012c00
 8005bdc:	00001325 	.word	0x00001325
 8005be0:	08007124 	.word	0x08007124
 8005be4:	fffff7ff 	.word	0xfffff7ff
 8005be8:	fffffbff 	.word	0xfffffbff
 8005bec:	40014000 	.word	0x40014000
 8005bf0:	40014400 	.word	0x40014400
 8005bf4:	40014800 	.word	0x40014800
 8005bf8:	00001332 	.word	0x00001332
 8005bfc:	00001333 	.word	0x00001333
 8005c00:	ffffefff 	.word	0xffffefff
 8005c04:	ffffdfff 	.word	0xffffdfff

08005c08 <TIM_OC4_SetConfig>:
  * @param  TIMx  to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005c08:	b580      	push	{r7, lr}
 8005c0a:	b086      	sub	sp, #24
 8005c0c:	af00      	add	r7, sp, #0
 8005c0e:	6078      	str	r0, [r7, #4]
 8005c10:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx = 0U;
 8005c12:	2300      	movs	r3, #0
 8005c14:	613b      	str	r3, [r7, #16]
  uint32_t tmpccer = 0U;
 8005c16:	2300      	movs	r3, #0
 8005c18:	60fb      	str	r3, [r7, #12]
  uint32_t tmpcr2 = 0U;
 8005c1a:	2300      	movs	r3, #0
 8005c1c:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	6a1b      	ldr	r3, [r3, #32]
 8005c22:	4a30      	ldr	r2, [pc, #192]	; (8005ce4 <TIM_OC4_SetConfig+0xdc>)
 8005c24:	401a      	ands	r2, r3
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	6a1b      	ldr	r3, [r3, #32]
 8005c2e:	60fb      	str	r3, [r7, #12]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	685b      	ldr	r3, [r3, #4]
 8005c34:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	69db      	ldr	r3, [r3, #28]
 8005c3a:	613b      	str	r3, [r7, #16]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005c3c:	693b      	ldr	r3, [r7, #16]
 8005c3e:	4a2a      	ldr	r2, [pc, #168]	; (8005ce8 <TIM_OC4_SetConfig+0xe0>)
 8005c40:	4013      	ands	r3, r2
 8005c42:	613b      	str	r3, [r7, #16]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005c44:	693b      	ldr	r3, [r7, #16]
 8005c46:	4a29      	ldr	r2, [pc, #164]	; (8005cec <TIM_OC4_SetConfig+0xe4>)
 8005c48:	4013      	ands	r3, r2
 8005c4a:	613b      	str	r3, [r7, #16]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005c4c:	683b      	ldr	r3, [r7, #0]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	021b      	lsls	r3, r3, #8
 8005c52:	693a      	ldr	r2, [r7, #16]
 8005c54:	4313      	orrs	r3, r2
 8005c56:	613b      	str	r3, [r7, #16]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	4a25      	ldr	r2, [pc, #148]	; (8005cf0 <TIM_OC4_SetConfig+0xe8>)
 8005c5c:	4013      	ands	r3, r2
 8005c5e:	60fb      	str	r3, [r7, #12]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005c60:	683b      	ldr	r3, [r7, #0]
 8005c62:	689b      	ldr	r3, [r3, #8]
 8005c64:	031b      	lsls	r3, r3, #12
 8005c66:	68fa      	ldr	r2, [r7, #12]
 8005c68:	4313      	orrs	r3, r2
 8005c6a:	60fb      	str	r3, [r7, #12]

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	4a21      	ldr	r2, [pc, #132]	; (8005cf4 <TIM_OC4_SetConfig+0xec>)
 8005c70:	4293      	cmp	r3, r2
 8005c72:	d00b      	beq.n	8005c8c <TIM_OC4_SetConfig+0x84>
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	4a20      	ldr	r2, [pc, #128]	; (8005cf8 <TIM_OC4_SetConfig+0xf0>)
 8005c78:	4293      	cmp	r3, r2
 8005c7a:	d007      	beq.n	8005c8c <TIM_OC4_SetConfig+0x84>
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	4a1f      	ldr	r2, [pc, #124]	; (8005cfc <TIM_OC4_SetConfig+0xf4>)
 8005c80:	4293      	cmp	r3, r2
 8005c82:	d003      	beq.n	8005c8c <TIM_OC4_SetConfig+0x84>
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	4a1e      	ldr	r2, [pc, #120]	; (8005d00 <TIM_OC4_SetConfig+0xf8>)
 8005c88:	4293      	cmp	r3, r2
 8005c8a:	d119      	bne.n	8005cc0 <TIM_OC4_SetConfig+0xb8>
  {
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 8005c8c:	683b      	ldr	r3, [r7, #0]
 8005c8e:	695a      	ldr	r2, [r3, #20]
 8005c90:	2380      	movs	r3, #128	; 0x80
 8005c92:	005b      	lsls	r3, r3, #1
 8005c94:	429a      	cmp	r2, r3
 8005c96:	d009      	beq.n	8005cac <TIM_OC4_SetConfig+0xa4>
 8005c98:	683b      	ldr	r3, [r7, #0]
 8005c9a:	695b      	ldr	r3, [r3, #20]
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	d005      	beq.n	8005cac <TIM_OC4_SetConfig+0xa4>
 8005ca0:	4a18      	ldr	r2, [pc, #96]	; (8005d04 <TIM_OC4_SetConfig+0xfc>)
 8005ca2:	4b19      	ldr	r3, [pc, #100]	; (8005d08 <TIM_OC4_SetConfig+0x100>)
 8005ca4:	0011      	movs	r1, r2
 8005ca6:	0018      	movs	r0, r3
 8005ca8:	f7fa fe63 	bl	8000972 <assert_failed>

   /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005cac:	697b      	ldr	r3, [r7, #20]
 8005cae:	4a17      	ldr	r2, [pc, #92]	; (8005d0c <TIM_OC4_SetConfig+0x104>)
 8005cb0:	4013      	ands	r3, r2
 8005cb2:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005cb4:	683b      	ldr	r3, [r7, #0]
 8005cb6:	695b      	ldr	r3, [r3, #20]
 8005cb8:	019b      	lsls	r3, r3, #6
 8005cba:	697a      	ldr	r2, [r7, #20]
 8005cbc:	4313      	orrs	r3, r2
 8005cbe:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	697a      	ldr	r2, [r7, #20]
 8005cc4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	693a      	ldr	r2, [r7, #16]
 8005cca:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005ccc:	683b      	ldr	r3, [r7, #0]
 8005cce:	685a      	ldr	r2, [r3, #4]
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	68fa      	ldr	r2, [r7, #12]
 8005cd8:	621a      	str	r2, [r3, #32]
}
 8005cda:	46c0      	nop			; (mov r8, r8)
 8005cdc:	46bd      	mov	sp, r7
 8005cde:	b006      	add	sp, #24
 8005ce0:	bd80      	pop	{r7, pc}
 8005ce2:	46c0      	nop			; (mov r8, r8)
 8005ce4:	ffffefff 	.word	0xffffefff
 8005ce8:	ffff8fff 	.word	0xffff8fff
 8005cec:	fffffcff 	.word	0xfffffcff
 8005cf0:	ffffdfff 	.word	0xffffdfff
 8005cf4:	40012c00 	.word	0x40012c00
 8005cf8:	40014000 	.word	0x40014000
 8005cfc:	40014400 	.word	0x40014400
 8005d00:	40014800 	.word	0x40014800
 8005d04:	00001370 	.word	0x00001370
 8005d08:	08007124 	.word	0x08007124
 8005d0c:	ffffbfff 	.word	0xffffbfff

08005d10 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005d10:	b580      	push	{r7, lr}
 8005d12:	b086      	sub	sp, #24
 8005d14:	af00      	add	r7, sp, #0
 8005d16:	60f8      	str	r0, [r7, #12]
 8005d18:	60b9      	str	r1, [r7, #8]
 8005d1a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1 = 0U;
 8005d1c:	2300      	movs	r3, #0
 8005d1e:	617b      	str	r3, [r7, #20]
  uint32_t tmpccer = 0U;
 8005d20:	2300      	movs	r3, #0
 8005d22:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	6a1b      	ldr	r3, [r3, #32]
 8005d28:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	6a1b      	ldr	r3, [r3, #32]
 8005d2e:	2201      	movs	r2, #1
 8005d30:	4393      	bics	r3, r2
 8005d32:	001a      	movs	r2, r3
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	699b      	ldr	r3, [r3, #24]
 8005d3c:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005d3e:	697b      	ldr	r3, [r7, #20]
 8005d40:	22f0      	movs	r2, #240	; 0xf0
 8005d42:	4393      	bics	r3, r2
 8005d44:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	011b      	lsls	r3, r3, #4
 8005d4a:	697a      	ldr	r2, [r7, #20]
 8005d4c:	4313      	orrs	r3, r2
 8005d4e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005d50:	693b      	ldr	r3, [r7, #16]
 8005d52:	220a      	movs	r2, #10
 8005d54:	4393      	bics	r3, r2
 8005d56:	613b      	str	r3, [r7, #16]
  tmpccer |= TIM_ICPolarity;
 8005d58:	693a      	ldr	r2, [r7, #16]
 8005d5a:	68bb      	ldr	r3, [r7, #8]
 8005d5c:	4313      	orrs	r3, r2
 8005d5e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	697a      	ldr	r2, [r7, #20]
 8005d64:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	693a      	ldr	r2, [r7, #16]
 8005d6a:	621a      	str	r2, [r3, #32]
}
 8005d6c:	46c0      	nop			; (mov r8, r8)
 8005d6e:	46bd      	mov	sp, r7
 8005d70:	b006      	add	sp, #24
 8005d72:	bd80      	pop	{r7, pc}

08005d74 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005d74:	b580      	push	{r7, lr}
 8005d76:	b086      	sub	sp, #24
 8005d78:	af00      	add	r7, sp, #0
 8005d7a:	60f8      	str	r0, [r7, #12]
 8005d7c:	60b9      	str	r1, [r7, #8]
 8005d7e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1 = 0U;
 8005d80:	2300      	movs	r3, #0
 8005d82:	617b      	str	r3, [r7, #20]
  uint32_t tmpccer = 0U;
 8005d84:	2300      	movs	r3, #0
 8005d86:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	6a1b      	ldr	r3, [r3, #32]
 8005d8c:	2210      	movs	r2, #16
 8005d8e:	4393      	bics	r3, r2
 8005d90:	001a      	movs	r2, r3
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	699b      	ldr	r3, [r3, #24]
 8005d9a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	6a1b      	ldr	r3, [r3, #32]
 8005da0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005da2:	697b      	ldr	r3, [r7, #20]
 8005da4:	4a0d      	ldr	r2, [pc, #52]	; (8005ddc <TIM_TI2_ConfigInputStage+0x68>)
 8005da6:	4013      	ands	r3, r2
 8005da8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	031b      	lsls	r3, r3, #12
 8005dae:	697a      	ldr	r2, [r7, #20]
 8005db0:	4313      	orrs	r3, r2
 8005db2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005db4:	693b      	ldr	r3, [r7, #16]
 8005db6:	22a0      	movs	r2, #160	; 0xa0
 8005db8:	4393      	bics	r3, r2
 8005dba:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005dbc:	68bb      	ldr	r3, [r7, #8]
 8005dbe:	011b      	lsls	r3, r3, #4
 8005dc0:	693a      	ldr	r2, [r7, #16]
 8005dc2:	4313      	orrs	r3, r2
 8005dc4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	697a      	ldr	r2, [r7, #20]
 8005dca:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	693a      	ldr	r2, [r7, #16]
 8005dd0:	621a      	str	r2, [r3, #32]
}
 8005dd2:	46c0      	nop			; (mov r8, r8)
 8005dd4:	46bd      	mov	sp, r7
 8005dd6:	b006      	add	sp, #24
 8005dd8:	bd80      	pop	{r7, pc}
 8005dda:	46c0      	nop			; (mov r8, r8)
 8005ddc:	ffff0fff 	.word	0xffff0fff

08005de0 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2 : Filtered Timer Input 2
  *            @arg TIM_TS_ETRF : External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint16_t InputTriggerSource)
{
 8005de0:	b580      	push	{r7, lr}
 8005de2:	b084      	sub	sp, #16
 8005de4:	af00      	add	r7, sp, #0
 8005de6:	6078      	str	r0, [r7, #4]
 8005de8:	000a      	movs	r2, r1
 8005dea:	1cbb      	adds	r3, r7, #2
 8005dec:	801a      	strh	r2, [r3, #0]
  uint32_t tmpsmcr = 0U;
 8005dee:	2300      	movs	r3, #0
 8005df0:	60fb      	str	r3, [r7, #12]

   /* Get the TIMx SMCR register value */
   tmpsmcr = TIMx->SMCR;
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	689b      	ldr	r3, [r3, #8]
 8005df6:	60fb      	str	r3, [r7, #12]
   /* Reset the TS Bits */
   tmpsmcr &= ~TIM_SMCR_TS;
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	2270      	movs	r2, #112	; 0x70
 8005dfc:	4393      	bics	r3, r2
 8005dfe:	60fb      	str	r3, [r7, #12]
   /* Set the Input Trigger source and the slave mode*/
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8005e00:	1cbb      	adds	r3, r7, #2
 8005e02:	881b      	ldrh	r3, [r3, #0]
 8005e04:	2207      	movs	r2, #7
 8005e06:	4313      	orrs	r3, r2
 8005e08:	b29b      	uxth	r3, r3
 8005e0a:	001a      	movs	r2, r3
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	4313      	orrs	r3, r2
 8005e10:	60fb      	str	r3, [r7, #12]
   /* Write to TIMx SMCR */
   TIMx->SMCR = tmpsmcr;
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	68fa      	ldr	r2, [r7, #12]
 8005e16:	609a      	str	r2, [r3, #8]
}
 8005e18:	46c0      	nop			; (mov r8, r8)
 8005e1a:	46bd      	mov	sp, r7
 8005e1c:	b004      	add	sp, #16
 8005e1e:	bd80      	pop	{r7, pc}

08005e20 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef* TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005e20:	b580      	push	{r7, lr}
 8005e22:	b086      	sub	sp, #24
 8005e24:	af00      	add	r7, sp, #0
 8005e26:	60f8      	str	r0, [r7, #12]
 8005e28:	60b9      	str	r1, [r7, #8]
 8005e2a:	607a      	str	r2, [r7, #4]
 8005e2c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr = 0U;
 8005e2e:	2300      	movs	r3, #0
 8005e30:	617b      	str	r3, [r7, #20]

  tmpsmcr = TIMx->SMCR;
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	689b      	ldr	r3, [r3, #8]
 8005e36:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005e38:	697b      	ldr	r3, [r7, #20]
 8005e3a:	4a09      	ldr	r2, [pc, #36]	; (8005e60 <TIM_ETR_SetConfig+0x40>)
 8005e3c:	4013      	ands	r3, r2
 8005e3e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005e40:	683b      	ldr	r3, [r7, #0]
 8005e42:	021a      	lsls	r2, r3, #8
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	431a      	orrs	r2, r3
 8005e48:	68bb      	ldr	r3, [r7, #8]
 8005e4a:	4313      	orrs	r3, r2
 8005e4c:	697a      	ldr	r2, [r7, #20]
 8005e4e:	4313      	orrs	r3, r2
 8005e50:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	697a      	ldr	r2, [r7, #20]
 8005e56:	609a      	str	r2, [r3, #8]
}
 8005e58:	46c0      	nop			; (mov r8, r8)
 8005e5a:	46bd      	mov	sp, r7
 8005e5c:	b006      	add	sp, #24
 8005e5e:	bd80      	pop	{r7, pc}
 8005e60:	ffff00ff 	.word	0xffff00ff

08005e64 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_Disable.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef* TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005e64:	b580      	push	{r7, lr}
 8005e66:	b086      	sub	sp, #24
 8005e68:	af00      	add	r7, sp, #0
 8005e6a:	60f8      	str	r0, [r7, #12]
 8005e6c:	60b9      	str	r1, [r7, #8]
 8005e6e:	607a      	str	r2, [r7, #4]
  uint32_t tmp = 0U;
 8005e70:	2300      	movs	r3, #0
 8005e72:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	4a28      	ldr	r2, [pc, #160]	; (8005f18 <TIM_CCxChannelCmd+0xb4>)
 8005e78:	4293      	cmp	r3, r2
 8005e7a:	d01e      	beq.n	8005eba <TIM_CCxChannelCmd+0x56>
 8005e7c:	68fa      	ldr	r2, [r7, #12]
 8005e7e:	2380      	movs	r3, #128	; 0x80
 8005e80:	05db      	lsls	r3, r3, #23
 8005e82:	429a      	cmp	r2, r3
 8005e84:	d019      	beq.n	8005eba <TIM_CCxChannelCmd+0x56>
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	4a24      	ldr	r2, [pc, #144]	; (8005f1c <TIM_CCxChannelCmd+0xb8>)
 8005e8a:	4293      	cmp	r3, r2
 8005e8c:	d015      	beq.n	8005eba <TIM_CCxChannelCmd+0x56>
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	4a23      	ldr	r2, [pc, #140]	; (8005f20 <TIM_CCxChannelCmd+0xbc>)
 8005e92:	4293      	cmp	r3, r2
 8005e94:	d011      	beq.n	8005eba <TIM_CCxChannelCmd+0x56>
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	4a22      	ldr	r2, [pc, #136]	; (8005f24 <TIM_CCxChannelCmd+0xc0>)
 8005e9a:	4293      	cmp	r3, r2
 8005e9c:	d00d      	beq.n	8005eba <TIM_CCxChannelCmd+0x56>
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	4a21      	ldr	r2, [pc, #132]	; (8005f28 <TIM_CCxChannelCmd+0xc4>)
 8005ea2:	4293      	cmp	r3, r2
 8005ea4:	d009      	beq.n	8005eba <TIM_CCxChannelCmd+0x56>
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	4a20      	ldr	r2, [pc, #128]	; (8005f2c <TIM_CCxChannelCmd+0xc8>)
 8005eaa:	4293      	cmp	r3, r2
 8005eac:	d005      	beq.n	8005eba <TIM_CCxChannelCmd+0x56>
 8005eae:	4a20      	ldr	r2, [pc, #128]	; (8005f30 <TIM_CCxChannelCmd+0xcc>)
 8005eb0:	4b20      	ldr	r3, [pc, #128]	; (8005f34 <TIM_CCxChannelCmd+0xd0>)
 8005eb2:	0011      	movs	r1, r2
 8005eb4:	0018      	movs	r0, r3
 8005eb6:	f7fa fd5c 	bl	8000972 <assert_failed>
  assert_param(IS_TIM_CHANNELS(Channel));
 8005eba:	68bb      	ldr	r3, [r7, #8]
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	d011      	beq.n	8005ee4 <TIM_CCxChannelCmd+0x80>
 8005ec0:	68bb      	ldr	r3, [r7, #8]
 8005ec2:	2b04      	cmp	r3, #4
 8005ec4:	d00e      	beq.n	8005ee4 <TIM_CCxChannelCmd+0x80>
 8005ec6:	68bb      	ldr	r3, [r7, #8]
 8005ec8:	2b08      	cmp	r3, #8
 8005eca:	d00b      	beq.n	8005ee4 <TIM_CCxChannelCmd+0x80>
 8005ecc:	68bb      	ldr	r3, [r7, #8]
 8005ece:	2b0c      	cmp	r3, #12
 8005ed0:	d008      	beq.n	8005ee4 <TIM_CCxChannelCmd+0x80>
 8005ed2:	68bb      	ldr	r3, [r7, #8]
 8005ed4:	2b18      	cmp	r3, #24
 8005ed6:	d005      	beq.n	8005ee4 <TIM_CCxChannelCmd+0x80>
 8005ed8:	4a17      	ldr	r2, [pc, #92]	; (8005f38 <TIM_CCxChannelCmd+0xd4>)
 8005eda:	4b16      	ldr	r3, [pc, #88]	; (8005f34 <TIM_CCxChannelCmd+0xd0>)
 8005edc:	0011      	movs	r1, r2
 8005ede:	0018      	movs	r0, r3
 8005ee0:	f7fa fd47 	bl	8000972 <assert_failed>

  tmp = TIM_CCER_CC1E << Channel;
 8005ee4:	2201      	movs	r2, #1
 8005ee6:	68bb      	ldr	r3, [r7, #8]
 8005ee8:	409a      	lsls	r2, r3
 8005eea:	0013      	movs	r3, r2
 8005eec:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	6a1b      	ldr	r3, [r3, #32]
 8005ef2:	697a      	ldr	r2, [r7, #20]
 8005ef4:	43d2      	mvns	r2, r2
 8005ef6:	401a      	ands	r2, r3
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |=  (uint32_t)(ChannelState << Channel);
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	6a1a      	ldr	r2, [r3, #32]
 8005f00:	6879      	ldr	r1, [r7, #4]
 8005f02:	68bb      	ldr	r3, [r7, #8]
 8005f04:	4099      	lsls	r1, r3
 8005f06:	000b      	movs	r3, r1
 8005f08:	431a      	orrs	r2, r3
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	621a      	str	r2, [r3, #32]
}
 8005f0e:	46c0      	nop			; (mov r8, r8)
 8005f10:	46bd      	mov	sp, r7
 8005f12:	b006      	add	sp, #24
 8005f14:	bd80      	pop	{r7, pc}
 8005f16:	46c0      	nop			; (mov r8, r8)
 8005f18:	40012c00 	.word	0x40012c00
 8005f1c:	40000400 	.word	0x40000400
 8005f20:	40002000 	.word	0x40002000
 8005f24:	40014000 	.word	0x40014000
 8005f28:	40014400 	.word	0x40014400
 8005f2c:	40014800 	.word	0x40014800
 8005f30:	0000155e 	.word	0x0000155e
 8005f34:	08007124 	.word	0x08007124
 8005f38:	0000155f 	.word	0x0000155f

08005f3c <HAL_TIMEx_OCN_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_OCN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005f3c:	b580      	push	{r7, lr}
 8005f3e:	b082      	sub	sp, #8
 8005f40:	af00      	add	r7, sp, #0
 8005f42:	6078      	str	r0, [r7, #4]
 8005f44:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	4a24      	ldr	r2, [pc, #144]	; (8005fdc <HAL_TIMEx_OCN_Start+0xa0>)
 8005f4c:	4293      	cmp	r3, r2
 8005f4e:	d108      	bne.n	8005f62 <HAL_TIMEx_OCN_Start+0x26>
 8005f50:	683b      	ldr	r3, [r7, #0]
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	d024      	beq.n	8005fa0 <HAL_TIMEx_OCN_Start+0x64>
 8005f56:	683b      	ldr	r3, [r7, #0]
 8005f58:	2b04      	cmp	r3, #4
 8005f5a:	d021      	beq.n	8005fa0 <HAL_TIMEx_OCN_Start+0x64>
 8005f5c:	683b      	ldr	r3, [r7, #0]
 8005f5e:	2b08      	cmp	r3, #8
 8005f60:	d01e      	beq.n	8005fa0 <HAL_TIMEx_OCN_Start+0x64>
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	4a1e      	ldr	r2, [pc, #120]	; (8005fe0 <HAL_TIMEx_OCN_Start+0xa4>)
 8005f68:	4293      	cmp	r3, r2
 8005f6a:	d102      	bne.n	8005f72 <HAL_TIMEx_OCN_Start+0x36>
 8005f6c:	683b      	ldr	r3, [r7, #0]
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	d016      	beq.n	8005fa0 <HAL_TIMEx_OCN_Start+0x64>
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	4a1b      	ldr	r2, [pc, #108]	; (8005fe4 <HAL_TIMEx_OCN_Start+0xa8>)
 8005f78:	4293      	cmp	r3, r2
 8005f7a:	d102      	bne.n	8005f82 <HAL_TIMEx_OCN_Start+0x46>
 8005f7c:	683b      	ldr	r3, [r7, #0]
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	d00e      	beq.n	8005fa0 <HAL_TIMEx_OCN_Start+0x64>
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	4a18      	ldr	r2, [pc, #96]	; (8005fe8 <HAL_TIMEx_OCN_Start+0xac>)
 8005f88:	4293      	cmp	r3, r2
 8005f8a:	d102      	bne.n	8005f92 <HAL_TIMEx_OCN_Start+0x56>
 8005f8c:	683b      	ldr	r3, [r7, #0]
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	d006      	beq.n	8005fa0 <HAL_TIMEx_OCN_Start+0x64>
 8005f92:	23f6      	movs	r3, #246	; 0xf6
 8005f94:	005a      	lsls	r2, r3, #1
 8005f96:	4b15      	ldr	r3, [pc, #84]	; (8005fec <HAL_TIMEx_OCN_Start+0xb0>)
 8005f98:	0011      	movs	r1, r2
 8005f9a:	0018      	movs	r0, r3
 8005f9c:	f7fa fce9 	bl	8000972 <assert_failed>

     /* Enable the Capture compare channel N */
     TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	6839      	ldr	r1, [r7, #0]
 8005fa6:	2204      	movs	r2, #4
 8005fa8:	0018      	movs	r0, r3
 8005faa:	f000 fa69 	bl	8006480 <TIM_CCxNChannelCmd>

  /* Enable the Main Ouput */
    __HAL_TIM_MOE_ENABLE(htim);
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	2180      	movs	r1, #128	; 0x80
 8005fba:	0209      	lsls	r1, r1, #8
 8005fbc:	430a      	orrs	r2, r1
 8005fbe:	645a      	str	r2, [r3, #68]	; 0x44

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	681a      	ldr	r2, [r3, #0]
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	2101      	movs	r1, #1
 8005fcc:	430a      	orrs	r2, r1
 8005fce:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8005fd0:	2300      	movs	r3, #0
}
 8005fd2:	0018      	movs	r0, r3
 8005fd4:	46bd      	mov	sp, r7
 8005fd6:	b002      	add	sp, #8
 8005fd8:	bd80      	pop	{r7, pc}
 8005fda:	46c0      	nop			; (mov r8, r8)
 8005fdc:	40012c00 	.word	0x40012c00
 8005fe0:	40014000 	.word	0x40014000
 8005fe4:	40014400 	.word	0x40014400
 8005fe8:	40014800 	.word	0x40014800
 8005fec:	0800715c 	.word	0x0800715c

08005ff0 <HAL_TIMEx_OCN_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_OCN_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005ff0:	b580      	push	{r7, lr}
 8005ff2:	b082      	sub	sp, #8
 8005ff4:	af00      	add	r7, sp, #0
 8005ff6:	6078      	str	r0, [r7, #4]
 8005ff8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	4a2f      	ldr	r2, [pc, #188]	; (80060bc <HAL_TIMEx_OCN_Stop+0xcc>)
 8006000:	4293      	cmp	r3, r2
 8006002:	d108      	bne.n	8006016 <HAL_TIMEx_OCN_Stop+0x26>
 8006004:	683b      	ldr	r3, [r7, #0]
 8006006:	2b00      	cmp	r3, #0
 8006008:	d023      	beq.n	8006052 <HAL_TIMEx_OCN_Stop+0x62>
 800600a:	683b      	ldr	r3, [r7, #0]
 800600c:	2b04      	cmp	r3, #4
 800600e:	d020      	beq.n	8006052 <HAL_TIMEx_OCN_Stop+0x62>
 8006010:	683b      	ldr	r3, [r7, #0]
 8006012:	2b08      	cmp	r3, #8
 8006014:	d01d      	beq.n	8006052 <HAL_TIMEx_OCN_Stop+0x62>
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	4a29      	ldr	r2, [pc, #164]	; (80060c0 <HAL_TIMEx_OCN_Stop+0xd0>)
 800601c:	4293      	cmp	r3, r2
 800601e:	d102      	bne.n	8006026 <HAL_TIMEx_OCN_Stop+0x36>
 8006020:	683b      	ldr	r3, [r7, #0]
 8006022:	2b00      	cmp	r3, #0
 8006024:	d015      	beq.n	8006052 <HAL_TIMEx_OCN_Stop+0x62>
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	4a26      	ldr	r2, [pc, #152]	; (80060c4 <HAL_TIMEx_OCN_Stop+0xd4>)
 800602c:	4293      	cmp	r3, r2
 800602e:	d102      	bne.n	8006036 <HAL_TIMEx_OCN_Stop+0x46>
 8006030:	683b      	ldr	r3, [r7, #0]
 8006032:	2b00      	cmp	r3, #0
 8006034:	d00d      	beq.n	8006052 <HAL_TIMEx_OCN_Stop+0x62>
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	4a23      	ldr	r2, [pc, #140]	; (80060c8 <HAL_TIMEx_OCN_Stop+0xd8>)
 800603c:	4293      	cmp	r3, r2
 800603e:	d102      	bne.n	8006046 <HAL_TIMEx_OCN_Stop+0x56>
 8006040:	683b      	ldr	r3, [r7, #0]
 8006042:	2b00      	cmp	r3, #0
 8006044:	d005      	beq.n	8006052 <HAL_TIMEx_OCN_Stop+0x62>
 8006046:	4a21      	ldr	r2, [pc, #132]	; (80060cc <HAL_TIMEx_OCN_Stop+0xdc>)
 8006048:	4b21      	ldr	r3, [pc, #132]	; (80060d0 <HAL_TIMEx_OCN_Stop+0xe0>)
 800604a:	0011      	movs	r1, r2
 800604c:	0018      	movs	r0, r3
 800604e:	f7fa fc90 	bl	8000972 <assert_failed>

    /* Disable the Capture compare channel N */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_DISABLE);
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	6839      	ldr	r1, [r7, #0]
 8006058:	2200      	movs	r2, #0
 800605a:	0018      	movs	r0, r3
 800605c:	f000 fa10 	bl	8006480 <TIM_CCxNChannelCmd>

  /* Disable the Main Ouput */
    __HAL_TIM_MOE_DISABLE(htim);
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	6a1b      	ldr	r3, [r3, #32]
 8006066:	4a1b      	ldr	r2, [pc, #108]	; (80060d4 <HAL_TIMEx_OCN_Stop+0xe4>)
 8006068:	4013      	ands	r3, r2
 800606a:	d10d      	bne.n	8006088 <HAL_TIMEx_OCN_Stop+0x98>
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	6a1b      	ldr	r3, [r3, #32]
 8006072:	4a19      	ldr	r2, [pc, #100]	; (80060d8 <HAL_TIMEx_OCN_Stop+0xe8>)
 8006074:	4013      	ands	r3, r2
 8006076:	d107      	bne.n	8006088 <HAL_TIMEx_OCN_Stop+0x98>
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	4916      	ldr	r1, [pc, #88]	; (80060dc <HAL_TIMEx_OCN_Stop+0xec>)
 8006084:	400a      	ands	r2, r1
 8006086:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	6a1b      	ldr	r3, [r3, #32]
 800608e:	4a11      	ldr	r2, [pc, #68]	; (80060d4 <HAL_TIMEx_OCN_Stop+0xe4>)
 8006090:	4013      	ands	r3, r2
 8006092:	d10d      	bne.n	80060b0 <HAL_TIMEx_OCN_Stop+0xc0>
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	6a1b      	ldr	r3, [r3, #32]
 800609a:	4a0f      	ldr	r2, [pc, #60]	; (80060d8 <HAL_TIMEx_OCN_Stop+0xe8>)
 800609c:	4013      	ands	r3, r2
 800609e:	d107      	bne.n	80060b0 <HAL_TIMEx_OCN_Stop+0xc0>
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	681a      	ldr	r2, [r3, #0]
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	2101      	movs	r1, #1
 80060ac:	438a      	bics	r2, r1
 80060ae:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80060b0:	2300      	movs	r3, #0
}
 80060b2:	0018      	movs	r0, r3
 80060b4:	46bd      	mov	sp, r7
 80060b6:	b002      	add	sp, #8
 80060b8:	bd80      	pop	{r7, pc}
 80060ba:	46c0      	nop			; (mov r8, r8)
 80060bc:	40012c00 	.word	0x40012c00
 80060c0:	40014000 	.word	0x40014000
 80060c4:	40014400 	.word	0x40014400
 80060c8:	40014800 	.word	0x40014800
 80060cc:	0000020a 	.word	0x0000020a
 80060d0:	0800715c 	.word	0x0800715c
 80060d4:	00001111 	.word	0x00001111
 80060d8:	00000444 	.word	0x00000444
 80060dc:	ffff7fff 	.word	0xffff7fff

080060e0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         contains the selected trigger output (TRGO) and the Master/Slave 
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim, TIM_MasterConfigTypeDef * sMasterConfig)
{
 80060e0:	b580      	push	{r7, lr}
 80060e2:	b082      	sub	sp, #8
 80060e4:	af00      	add	r7, sp, #0
 80060e6:	6078      	str	r0, [r7, #4]
 80060e8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	4a48      	ldr	r2, [pc, #288]	; (8006210 <HAL_TIMEx_MasterConfigSynchronization+0x130>)
 80060f0:	4293      	cmp	r3, r2
 80060f2:	d01a      	beq.n	800612a <HAL_TIMEx_MasterConfigSynchronization+0x4a>
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	681a      	ldr	r2, [r3, #0]
 80060f8:	2380      	movs	r3, #128	; 0x80
 80060fa:	05db      	lsls	r3, r3, #23
 80060fc:	429a      	cmp	r2, r3
 80060fe:	d014      	beq.n	800612a <HAL_TIMEx_MasterConfigSynchronization+0x4a>
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	4a43      	ldr	r2, [pc, #268]	; (8006214 <HAL_TIMEx_MasterConfigSynchronization+0x134>)
 8006106:	4293      	cmp	r3, r2
 8006108:	d00f      	beq.n	800612a <HAL_TIMEx_MasterConfigSynchronization+0x4a>
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	4a42      	ldr	r2, [pc, #264]	; (8006218 <HAL_TIMEx_MasterConfigSynchronization+0x138>)
 8006110:	4293      	cmp	r3, r2
 8006112:	d00a      	beq.n	800612a <HAL_TIMEx_MasterConfigSynchronization+0x4a>
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	4a40      	ldr	r2, [pc, #256]	; (800621c <HAL_TIMEx_MasterConfigSynchronization+0x13c>)
 800611a:	4293      	cmp	r3, r2
 800611c:	d005      	beq.n	800612a <HAL_TIMEx_MasterConfigSynchronization+0x4a>
 800611e:	4a40      	ldr	r2, [pc, #256]	; (8006220 <HAL_TIMEx_MasterConfigSynchronization+0x140>)
 8006120:	4b40      	ldr	r3, [pc, #256]	; (8006224 <HAL_TIMEx_MasterConfigSynchronization+0x144>)
 8006122:	0011      	movs	r1, r2
 8006124:	0018      	movs	r0, r3
 8006126:	f7fa fc24 	bl	8000972 <assert_failed>
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
 800612a:	683b      	ldr	r3, [r7, #0]
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	2b00      	cmp	r3, #0
 8006130:	d021      	beq.n	8006176 <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8006132:	683b      	ldr	r3, [r7, #0]
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	2b10      	cmp	r3, #16
 8006138:	d01d      	beq.n	8006176 <HAL_TIMEx_MasterConfigSynchronization+0x96>
 800613a:	683b      	ldr	r3, [r7, #0]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	2b20      	cmp	r3, #32
 8006140:	d019      	beq.n	8006176 <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8006142:	683b      	ldr	r3, [r7, #0]
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	2b30      	cmp	r3, #48	; 0x30
 8006148:	d015      	beq.n	8006176 <HAL_TIMEx_MasterConfigSynchronization+0x96>
 800614a:	683b      	ldr	r3, [r7, #0]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	2b40      	cmp	r3, #64	; 0x40
 8006150:	d011      	beq.n	8006176 <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8006152:	683b      	ldr	r3, [r7, #0]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	2b50      	cmp	r3, #80	; 0x50
 8006158:	d00d      	beq.n	8006176 <HAL_TIMEx_MasterConfigSynchronization+0x96>
 800615a:	683b      	ldr	r3, [r7, #0]
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	2b60      	cmp	r3, #96	; 0x60
 8006160:	d009      	beq.n	8006176 <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8006162:	683b      	ldr	r3, [r7, #0]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	2b70      	cmp	r3, #112	; 0x70
 8006168:	d005      	beq.n	8006176 <HAL_TIMEx_MasterConfigSynchronization+0x96>
 800616a:	4a2f      	ldr	r2, [pc, #188]	; (8006228 <HAL_TIMEx_MasterConfigSynchronization+0x148>)
 800616c:	4b2d      	ldr	r3, [pc, #180]	; (8006224 <HAL_TIMEx_MasterConfigSynchronization+0x144>)
 800616e:	0011      	movs	r1, r2
 8006170:	0018      	movs	r0, r3
 8006172:	f7fa fbfe 	bl	8000972 <assert_failed>
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
 8006176:	683b      	ldr	r3, [r7, #0]
 8006178:	685b      	ldr	r3, [r3, #4]
 800617a:	2b80      	cmp	r3, #128	; 0x80
 800617c:	d009      	beq.n	8006192 <HAL_TIMEx_MasterConfigSynchronization+0xb2>
 800617e:	683b      	ldr	r3, [r7, #0]
 8006180:	685b      	ldr	r3, [r3, #4]
 8006182:	2b00      	cmp	r3, #0
 8006184:	d005      	beq.n	8006192 <HAL_TIMEx_MasterConfigSynchronization+0xb2>
 8006186:	4a29      	ldr	r2, [pc, #164]	; (800622c <HAL_TIMEx_MasterConfigSynchronization+0x14c>)
 8006188:	4b26      	ldr	r3, [pc, #152]	; (8006224 <HAL_TIMEx_MasterConfigSynchronization+0x144>)
 800618a:	0011      	movs	r1, r2
 800618c:	0018      	movs	r0, r3
 800618e:	f7fa fbf0 	bl	8000972 <assert_failed>

  __HAL_LOCK(htim);
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	223c      	movs	r2, #60	; 0x3c
 8006196:	5c9b      	ldrb	r3, [r3, r2]
 8006198:	2b01      	cmp	r3, #1
 800619a:	d101      	bne.n	80061a0 <HAL_TIMEx_MasterConfigSynchronization+0xc0>
 800619c:	2302      	movs	r3, #2
 800619e:	e032      	b.n	8006206 <HAL_TIMEx_MasterConfigSynchronization+0x126>
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	223c      	movs	r2, #60	; 0x3c
 80061a4:	2101      	movs	r1, #1
 80061a6:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	223d      	movs	r2, #61	; 0x3d
 80061ac:	2102      	movs	r1, #2
 80061ae:	5499      	strb	r1, [r3, r2]

  /* Reset the MMS Bits */
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	685a      	ldr	r2, [r3, #4]
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	2170      	movs	r1, #112	; 0x70
 80061bc:	438a      	bics	r2, r1
 80061be:	605a      	str	r2, [r3, #4]
  /* Select the TRGO source */
  htim->Instance->CR2 |=  sMasterConfig->MasterOutputTrigger;
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	6859      	ldr	r1, [r3, #4]
 80061c6:	683b      	ldr	r3, [r7, #0]
 80061c8:	681a      	ldr	r2, [r3, #0]
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	430a      	orrs	r2, r1
 80061d0:	605a      	str	r2, [r3, #4]

  /* Reset the MSM Bit */
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	689a      	ldr	r2, [r3, #8]
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	2180      	movs	r1, #128	; 0x80
 80061de:	438a      	bics	r2, r1
 80061e0:	609a      	str	r2, [r3, #8]
  /* Set or Reset the MSM Bit */
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	6899      	ldr	r1, [r3, #8]
 80061e8:	683b      	ldr	r3, [r7, #0]
 80061ea:	685a      	ldr	r2, [r3, #4]
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	430a      	orrs	r2, r1
 80061f2:	609a      	str	r2, [r3, #8]

  htim->State = HAL_TIM_STATE_READY;
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	223d      	movs	r2, #61	; 0x3d
 80061f8:	2101      	movs	r1, #1
 80061fa:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	223c      	movs	r2, #60	; 0x3c
 8006200:	2100      	movs	r1, #0
 8006202:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006204:	2300      	movs	r3, #0
}
 8006206:	0018      	movs	r0, r3
 8006208:	46bd      	mov	sp, r7
 800620a:	b002      	add	sp, #8
 800620c:	bd80      	pop	{r7, pc}
 800620e:	46c0      	nop			; (mov r8, r8)
 8006210:	40012c00 	.word	0x40012c00
 8006214:	40000400 	.word	0x40000400
 8006218:	40001000 	.word	0x40001000
 800621c:	40014000 	.word	0x40014000
 8006220:	00000649 	.word	0x00000649
 8006224:	0800715c 	.word	0x0800715c
 8006228:	0000064a 	.word	0x0000064a
 800622c:	0000064b 	.word	0x0000064b

08006230 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         contains the BDTR Register configuration  information for the TIM peripheral.
  * @retval HAL status
  */    
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8006230:	b580      	push	{r7, lr}
 8006232:	b084      	sub	sp, #16
 8006234:	af00      	add	r7, sp, #0
 8006236:	6078      	str	r0, [r7, #4]
 8006238:	6039      	str	r1, [r7, #0]
  uint32_t tmpbdtr = 0;
 800623a:	2300      	movs	r3, #0
 800623c:	60fb      	str	r3, [r7, #12]
   
  /* Check the parameters */
  assert_param(IS_TIM_BREAK_INSTANCE(htim->Instance));
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	4a74      	ldr	r2, [pc, #464]	; (8006414 <HAL_TIMEx_ConfigBreakDeadTime+0x1e4>)
 8006244:	4293      	cmp	r3, r2
 8006246:	d015      	beq.n	8006274 <HAL_TIMEx_ConfigBreakDeadTime+0x44>
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	4a72      	ldr	r2, [pc, #456]	; (8006418 <HAL_TIMEx_ConfigBreakDeadTime+0x1e8>)
 800624e:	4293      	cmp	r3, r2
 8006250:	d010      	beq.n	8006274 <HAL_TIMEx_ConfigBreakDeadTime+0x44>
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	4a71      	ldr	r2, [pc, #452]	; (800641c <HAL_TIMEx_ConfigBreakDeadTime+0x1ec>)
 8006258:	4293      	cmp	r3, r2
 800625a:	d00b      	beq.n	8006274 <HAL_TIMEx_ConfigBreakDeadTime+0x44>
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	4a6f      	ldr	r2, [pc, #444]	; (8006420 <HAL_TIMEx_ConfigBreakDeadTime+0x1f0>)
 8006262:	4293      	cmp	r3, r2
 8006264:	d006      	beq.n	8006274 <HAL_TIMEx_ConfigBreakDeadTime+0x44>
 8006266:	23ce      	movs	r3, #206	; 0xce
 8006268:	00da      	lsls	r2, r3, #3
 800626a:	4b6e      	ldr	r3, [pc, #440]	; (8006424 <HAL_TIMEx_ConfigBreakDeadTime+0x1f4>)
 800626c:	0011      	movs	r1, r2
 800626e:	0018      	movs	r0, r3
 8006270:	f7fa fb7f 	bl	8000972 <assert_failed>
  assert_param(IS_TIM_OSSR_STATE(sBreakDeadTimeConfig->OffStateRunMode));
 8006274:	683b      	ldr	r3, [r7, #0]
 8006276:	681a      	ldr	r2, [r3, #0]
 8006278:	2380      	movs	r3, #128	; 0x80
 800627a:	011b      	lsls	r3, r3, #4
 800627c:	429a      	cmp	r2, r3
 800627e:	d009      	beq.n	8006294 <HAL_TIMEx_ConfigBreakDeadTime+0x64>
 8006280:	683b      	ldr	r3, [r7, #0]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	2b00      	cmp	r3, #0
 8006286:	d005      	beq.n	8006294 <HAL_TIMEx_ConfigBreakDeadTime+0x64>
 8006288:	4a67      	ldr	r2, [pc, #412]	; (8006428 <HAL_TIMEx_ConfigBreakDeadTime+0x1f8>)
 800628a:	4b66      	ldr	r3, [pc, #408]	; (8006424 <HAL_TIMEx_ConfigBreakDeadTime+0x1f4>)
 800628c:	0011      	movs	r1, r2
 800628e:	0018      	movs	r0, r3
 8006290:	f7fa fb6f 	bl	8000972 <assert_failed>
  assert_param(IS_TIM_OSSI_STATE(sBreakDeadTimeConfig->OffStateIDLEMode));
 8006294:	683b      	ldr	r3, [r7, #0]
 8006296:	685a      	ldr	r2, [r3, #4]
 8006298:	2380      	movs	r3, #128	; 0x80
 800629a:	00db      	lsls	r3, r3, #3
 800629c:	429a      	cmp	r2, r3
 800629e:	d009      	beq.n	80062b4 <HAL_TIMEx_ConfigBreakDeadTime+0x84>
 80062a0:	683b      	ldr	r3, [r7, #0]
 80062a2:	685b      	ldr	r3, [r3, #4]
 80062a4:	2b00      	cmp	r3, #0
 80062a6:	d005      	beq.n	80062b4 <HAL_TIMEx_ConfigBreakDeadTime+0x84>
 80062a8:	4a60      	ldr	r2, [pc, #384]	; (800642c <HAL_TIMEx_ConfigBreakDeadTime+0x1fc>)
 80062aa:	4b5e      	ldr	r3, [pc, #376]	; (8006424 <HAL_TIMEx_ConfigBreakDeadTime+0x1f4>)
 80062ac:	0011      	movs	r1, r2
 80062ae:	0018      	movs	r0, r3
 80062b0:	f7fa fb5f 	bl	8000972 <assert_failed>
  assert_param(IS_TIM_LOCK_LEVEL(sBreakDeadTimeConfig->LockLevel));
 80062b4:	683b      	ldr	r3, [r7, #0]
 80062b6:	689b      	ldr	r3, [r3, #8]
 80062b8:	2b00      	cmp	r3, #0
 80062ba:	d017      	beq.n	80062ec <HAL_TIMEx_ConfigBreakDeadTime+0xbc>
 80062bc:	683b      	ldr	r3, [r7, #0]
 80062be:	689a      	ldr	r2, [r3, #8]
 80062c0:	2380      	movs	r3, #128	; 0x80
 80062c2:	005b      	lsls	r3, r3, #1
 80062c4:	429a      	cmp	r2, r3
 80062c6:	d011      	beq.n	80062ec <HAL_TIMEx_ConfigBreakDeadTime+0xbc>
 80062c8:	683b      	ldr	r3, [r7, #0]
 80062ca:	689a      	ldr	r2, [r3, #8]
 80062cc:	2380      	movs	r3, #128	; 0x80
 80062ce:	009b      	lsls	r3, r3, #2
 80062d0:	429a      	cmp	r2, r3
 80062d2:	d00b      	beq.n	80062ec <HAL_TIMEx_ConfigBreakDeadTime+0xbc>
 80062d4:	683b      	ldr	r3, [r7, #0]
 80062d6:	689a      	ldr	r2, [r3, #8]
 80062d8:	23c0      	movs	r3, #192	; 0xc0
 80062da:	009b      	lsls	r3, r3, #2
 80062dc:	429a      	cmp	r2, r3
 80062de:	d005      	beq.n	80062ec <HAL_TIMEx_ConfigBreakDeadTime+0xbc>
 80062e0:	4a53      	ldr	r2, [pc, #332]	; (8006430 <HAL_TIMEx_ConfigBreakDeadTime+0x200>)
 80062e2:	4b50      	ldr	r3, [pc, #320]	; (8006424 <HAL_TIMEx_ConfigBreakDeadTime+0x1f4>)
 80062e4:	0011      	movs	r1, r2
 80062e6:	0018      	movs	r0, r3
 80062e8:	f7fa fb43 	bl	8000972 <assert_failed>
  assert_param(IS_TIM_DEADTIME(sBreakDeadTimeConfig->DeadTime));
 80062ec:	683b      	ldr	r3, [r7, #0]
 80062ee:	68db      	ldr	r3, [r3, #12]
 80062f0:	2bff      	cmp	r3, #255	; 0xff
 80062f2:	d905      	bls.n	8006300 <HAL_TIMEx_ConfigBreakDeadTime+0xd0>
 80062f4:	4a4f      	ldr	r2, [pc, #316]	; (8006434 <HAL_TIMEx_ConfigBreakDeadTime+0x204>)
 80062f6:	4b4b      	ldr	r3, [pc, #300]	; (8006424 <HAL_TIMEx_ConfigBreakDeadTime+0x1f4>)
 80062f8:	0011      	movs	r1, r2
 80062fa:	0018      	movs	r0, r3
 80062fc:	f7fa fb39 	bl	8000972 <assert_failed>
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
 8006300:	683b      	ldr	r3, [r7, #0]
 8006302:	691a      	ldr	r2, [r3, #16]
 8006304:	2380      	movs	r3, #128	; 0x80
 8006306:	015b      	lsls	r3, r3, #5
 8006308:	429a      	cmp	r2, r3
 800630a:	d009      	beq.n	8006320 <HAL_TIMEx_ConfigBreakDeadTime+0xf0>
 800630c:	683b      	ldr	r3, [r7, #0]
 800630e:	691b      	ldr	r3, [r3, #16]
 8006310:	2b00      	cmp	r3, #0
 8006312:	d005      	beq.n	8006320 <HAL_TIMEx_ConfigBreakDeadTime+0xf0>
 8006314:	4a48      	ldr	r2, [pc, #288]	; (8006438 <HAL_TIMEx_ConfigBreakDeadTime+0x208>)
 8006316:	4b43      	ldr	r3, [pc, #268]	; (8006424 <HAL_TIMEx_ConfigBreakDeadTime+0x1f4>)
 8006318:	0011      	movs	r1, r2
 800631a:	0018      	movs	r0, r3
 800631c:	f7fa fb29 	bl	8000972 <assert_failed>
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
 8006320:	683b      	ldr	r3, [r7, #0]
 8006322:	695b      	ldr	r3, [r3, #20]
 8006324:	2b00      	cmp	r3, #0
 8006326:	d00b      	beq.n	8006340 <HAL_TIMEx_ConfigBreakDeadTime+0x110>
 8006328:	683b      	ldr	r3, [r7, #0]
 800632a:	695a      	ldr	r2, [r3, #20]
 800632c:	2380      	movs	r3, #128	; 0x80
 800632e:	019b      	lsls	r3, r3, #6
 8006330:	429a      	cmp	r2, r3
 8006332:	d005      	beq.n	8006340 <HAL_TIMEx_ConfigBreakDeadTime+0x110>
 8006334:	4a41      	ldr	r2, [pc, #260]	; (800643c <HAL_TIMEx_ConfigBreakDeadTime+0x20c>)
 8006336:	4b3b      	ldr	r3, [pc, #236]	; (8006424 <HAL_TIMEx_ConfigBreakDeadTime+0x1f4>)
 8006338:	0011      	movs	r1, r2
 800633a:	0018      	movs	r0, r3
 800633c:	f7fa fb19 	bl	8000972 <assert_failed>
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
 8006340:	683b      	ldr	r3, [r7, #0]
 8006342:	699a      	ldr	r2, [r3, #24]
 8006344:	2380      	movs	r3, #128	; 0x80
 8006346:	01db      	lsls	r3, r3, #7
 8006348:	429a      	cmp	r2, r3
 800634a:	d009      	beq.n	8006360 <HAL_TIMEx_ConfigBreakDeadTime+0x130>
 800634c:	683b      	ldr	r3, [r7, #0]
 800634e:	699b      	ldr	r3, [r3, #24]
 8006350:	2b00      	cmp	r3, #0
 8006352:	d005      	beq.n	8006360 <HAL_TIMEx_ConfigBreakDeadTime+0x130>
 8006354:	4a3a      	ldr	r2, [pc, #232]	; (8006440 <HAL_TIMEx_ConfigBreakDeadTime+0x210>)
 8006356:	4b33      	ldr	r3, [pc, #204]	; (8006424 <HAL_TIMEx_ConfigBreakDeadTime+0x1f4>)
 8006358:	0011      	movs	r1, r2
 800635a:	0018      	movs	r0, r3
 800635c:	f7fa fb09 	bl	8000972 <assert_failed>

  /* Process Locked */
  __HAL_LOCK(htim);
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	223c      	movs	r2, #60	; 0x3c
 8006364:	5c9b      	ldrb	r3, [r3, r2]
 8006366:	2b01      	cmp	r3, #1
 8006368:	d101      	bne.n	800636e <HAL_TIMEx_ConfigBreakDeadTime+0x13e>
 800636a:	2302      	movs	r3, #2
 800636c:	e04d      	b.n	800640a <HAL_TIMEx_ConfigBreakDeadTime+0x1da>
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	223c      	movs	r2, #60	; 0x3c
 8006372:	2101      	movs	r1, #1
 8006374:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	223d      	movs	r2, #61	; 0x3d
 800637a:	2102      	movs	r1, #2
 800637c:	5499      	strb	r1, [r3, r2]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */
  
  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	22ff      	movs	r2, #255	; 0xff
 8006382:	4393      	bics	r3, r2
 8006384:	001a      	movs	r2, r3
 8006386:	683b      	ldr	r3, [r7, #0]
 8006388:	68db      	ldr	r3, [r3, #12]
 800638a:	4313      	orrs	r3, r2
 800638c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	4a2c      	ldr	r2, [pc, #176]	; (8006444 <HAL_TIMEx_ConfigBreakDeadTime+0x214>)
 8006392:	401a      	ands	r2, r3
 8006394:	683b      	ldr	r3, [r7, #0]
 8006396:	689b      	ldr	r3, [r3, #8]
 8006398:	4313      	orrs	r3, r2
 800639a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	4a2a      	ldr	r2, [pc, #168]	; (8006448 <HAL_TIMEx_ConfigBreakDeadTime+0x218>)
 80063a0:	401a      	ands	r2, r3
 80063a2:	683b      	ldr	r3, [r7, #0]
 80063a4:	685b      	ldr	r3, [r3, #4]
 80063a6:	4313      	orrs	r3, r2
 80063a8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	4a27      	ldr	r2, [pc, #156]	; (800644c <HAL_TIMEx_ConfigBreakDeadTime+0x21c>)
 80063ae:	401a      	ands	r2, r3
 80063b0:	683b      	ldr	r3, [r7, #0]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	4313      	orrs	r3, r2
 80063b6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	4a25      	ldr	r2, [pc, #148]	; (8006450 <HAL_TIMEx_ConfigBreakDeadTime+0x220>)
 80063bc:	401a      	ands	r2, r3
 80063be:	683b      	ldr	r3, [r7, #0]
 80063c0:	691b      	ldr	r3, [r3, #16]
 80063c2:	4313      	orrs	r3, r2
 80063c4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	4a22      	ldr	r2, [pc, #136]	; (8006454 <HAL_TIMEx_ConfigBreakDeadTime+0x224>)
 80063ca:	401a      	ands	r2, r3
 80063cc:	683b      	ldr	r3, [r7, #0]
 80063ce:	695b      	ldr	r3, [r3, #20]
 80063d0:	4313      	orrs	r3, r2
 80063d2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	4a20      	ldr	r2, [pc, #128]	; (8006458 <HAL_TIMEx_ConfigBreakDeadTime+0x228>)
 80063d8:	401a      	ands	r2, r3
 80063da:	683b      	ldr	r3, [r7, #0]
 80063dc:	699b      	ldr	r3, [r3, #24]
 80063de:	4313      	orrs	r3, r2
 80063e0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_MOE, sBreakDeadTimeConfig->AutomaticOutput);
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	4a1d      	ldr	r2, [pc, #116]	; (800645c <HAL_TIMEx_ConfigBreakDeadTime+0x22c>)
 80063e6:	401a      	ands	r2, r3
 80063e8:	683b      	ldr	r3, [r7, #0]
 80063ea:	699b      	ldr	r3, [r3, #24]
 80063ec:	4313      	orrs	r3, r2
 80063ee:	60fb      	str	r3, [r7, #12]
  
  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	68fa      	ldr	r2, [r7, #12]
 80063f6:	645a      	str	r2, [r3, #68]	; 0x44
  
  htim->State = HAL_TIM_STATE_READY;
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	223d      	movs	r2, #61	; 0x3d
 80063fc:	2101      	movs	r1, #1
 80063fe:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	223c      	movs	r2, #60	; 0x3c
 8006404:	2100      	movs	r1, #0
 8006406:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006408:	2300      	movs	r3, #0
}
 800640a:	0018      	movs	r0, r3
 800640c:	46bd      	mov	sp, r7
 800640e:	b004      	add	sp, #16
 8006410:	bd80      	pop	{r7, pc}
 8006412:	46c0      	nop			; (mov r8, r8)
 8006414:	40012c00 	.word	0x40012c00
 8006418:	40014000 	.word	0x40014000
 800641c:	40014400 	.word	0x40014400
 8006420:	40014800 	.word	0x40014800
 8006424:	0800715c 	.word	0x0800715c
 8006428:	00000671 	.word	0x00000671
 800642c:	00000672 	.word	0x00000672
 8006430:	00000673 	.word	0x00000673
 8006434:	00000674 	.word	0x00000674
 8006438:	00000675 	.word	0x00000675
 800643c:	00000676 	.word	0x00000676
 8006440:	00000677 	.word	0x00000677
 8006444:	fffffcff 	.word	0xfffffcff
 8006448:	fffffbff 	.word	0xfffffbff
 800644c:	fffff7ff 	.word	0xfffff7ff
 8006450:	ffffefff 	.word	0xffffefff
 8006454:	ffffdfff 	.word	0xffffdfff
 8006458:	ffffbfff 	.word	0xffffbfff
 800645c:	ffff7fff 	.word	0xffff7fff

08006460 <HAL_TIMEx_CommutationCallback>:
  * @brief  Hall commutation changed callback in non blocking mode 
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutationCallback(TIM_HandleTypeDef *htim)
{
 8006460:	b580      	push	{r7, lr}
 8006462:	b082      	sub	sp, #8
 8006464:	af00      	add	r7, sp, #0
 8006466:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutationCallback could be implemented in the user file
   */
}
 8006468:	46c0      	nop			; (mov r8, r8)
 800646a:	46bd      	mov	sp, r7
 800646c:	b002      	add	sp, #8
 800646e:	bd80      	pop	{r7, pc}

08006470 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non blocking mode 
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006470:	b580      	push	{r7, lr}
 8006472:	b082      	sub	sp, #8
 8006474:	af00      	add	r7, sp, #0
 8006476:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006478:	46c0      	nop			; (mov r8, r8)
 800647a:	46bd      	mov	sp, r7
 800647c:	b002      	add	sp, #8
 800647e:	bd80      	pop	{r7, pc}

08006480 <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef* TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 8006480:	b580      	push	{r7, lr}
 8006482:	b086      	sub	sp, #24
 8006484:	af00      	add	r7, sp, #0
 8006486:	60f8      	str	r0, [r7, #12]
 8006488:	60b9      	str	r1, [r7, #8]
 800648a:	607a      	str	r2, [r7, #4]
  uint32_t tmp = 0U;
 800648c:	2300      	movs	r3, #0
 800648e:	617b      	str	r3, [r7, #20]

  tmp = TIM_CCER_CC1NE << Channel;
 8006490:	2204      	movs	r2, #4
 8006492:	68bb      	ldr	r3, [r7, #8]
 8006494:	409a      	lsls	r2, r3
 8006496:	0013      	movs	r3, r2
 8006498:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	6a1b      	ldr	r3, [r3, #32]
 800649e:	697a      	ldr	r2, [r7, #20]
 80064a0:	43d2      	mvns	r2, r2
 80064a2:	401a      	ands	r2, r3
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |=  (uint32_t)(ChannelNState << Channel);
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	6a1a      	ldr	r2, [r3, #32]
 80064ac:	6879      	ldr	r1, [r7, #4]
 80064ae:	68bb      	ldr	r3, [r7, #8]
 80064b0:	4099      	lsls	r1, r3
 80064b2:	000b      	movs	r3, r1
 80064b4:	431a      	orrs	r2, r3
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	621a      	str	r2, [r3, #32]
}
 80064ba:	46c0      	nop			; (mov r8, r8)
 80064bc:	46bd      	mov	sp, r7
 80064be:	b006      	add	sp, #24
 80064c0:	bd80      	pop	{r7, pc}
	...

080064c4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80064c4:	b580      	push	{r7, lr}
 80064c6:	b082      	sub	sp, #8
 80064c8:	af00      	add	r7, sp, #0
 80064ca:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if(huart == NULL)
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	d101      	bne.n	80064d6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80064d2:	2301      	movs	r3, #1
 80064d4:	e06f      	b.n	80065b6 <HAL_UART_Init+0xf2>
  }

  if(huart->Init.HwFlowCtl != UART_HWCONTROL_NONE)
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	699b      	ldr	r3, [r3, #24]
 80064da:	2b00      	cmp	r3, #0
 80064dc:	d011      	beq.n	8006502 <HAL_UART_Init+0x3e>
  {
    /* Check the parameters */
    assert_param(IS_UART_HWFLOW_INSTANCE(huart->Instance));
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	4a37      	ldr	r2, [pc, #220]	; (80065c0 <HAL_UART_Init+0xfc>)
 80064e4:	4293      	cmp	r3, r2
 80064e6:	d01e      	beq.n	8006526 <HAL_UART_Init+0x62>
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	4a35      	ldr	r2, [pc, #212]	; (80065c4 <HAL_UART_Init+0x100>)
 80064ee:	4293      	cmp	r3, r2
 80064f0:	d019      	beq.n	8006526 <HAL_UART_Init+0x62>
 80064f2:	2397      	movs	r3, #151	; 0x97
 80064f4:	005a      	lsls	r2, r3, #1
 80064f6:	4b34      	ldr	r3, [pc, #208]	; (80065c8 <HAL_UART_Init+0x104>)
 80064f8:	0011      	movs	r1, r2
 80064fa:	0018      	movs	r0, r3
 80064fc:	f7fa fa39 	bl	8000972 <assert_failed>
 8006500:	e011      	b.n	8006526 <HAL_UART_Init+0x62>
  }
  else
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	4a2e      	ldr	r2, [pc, #184]	; (80065c0 <HAL_UART_Init+0xfc>)
 8006508:	4293      	cmp	r3, r2
 800650a:	d00c      	beq.n	8006526 <HAL_UART_Init+0x62>
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	4a2c      	ldr	r2, [pc, #176]	; (80065c4 <HAL_UART_Init+0x100>)
 8006512:	4293      	cmp	r3, r2
 8006514:	d007      	beq.n	8006526 <HAL_UART_Init+0x62>
 8006516:	2334      	movs	r3, #52	; 0x34
 8006518:	33ff      	adds	r3, #255	; 0xff
 800651a:	001a      	movs	r2, r3
 800651c:	4b2a      	ldr	r3, [pc, #168]	; (80065c8 <HAL_UART_Init+0x104>)
 800651e:	0011      	movs	r1, r2
 8006520:	0018      	movs	r0, r3
 8006522:	f7fa fa26 	bl	8000972 <assert_failed>
  }

  if(huart->gState == HAL_UART_STATE_RESET)
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	2269      	movs	r2, #105	; 0x69
 800652a:	5c9b      	ldrb	r3, [r3, r2]
 800652c:	b2db      	uxtb	r3, r3
 800652e:	2b00      	cmp	r3, #0
 8006530:	d107      	bne.n	8006542 <HAL_UART_Init+0x7e>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	2268      	movs	r2, #104	; 0x68
 8006536:	2100      	movs	r1, #0
 8006538:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	0018      	movs	r0, r3
 800653e:	f7fa fd03 	bl	8000f48 <HAL_UART_MspInit>
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	2269      	movs	r2, #105	; 0x69
 8006546:	2124      	movs	r1, #36	; 0x24
 8006548:	5499      	strb	r1, [r3, r2]

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	681a      	ldr	r2, [r3, #0]
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	2101      	movs	r1, #1
 8006556:	438a      	bics	r2, r1
 8006558:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	0018      	movs	r0, r3
 800655e:	f000 f837 	bl	80065d0 <UART_SetConfig>
 8006562:	0003      	movs	r3, r0
 8006564:	2b01      	cmp	r3, #1
 8006566:	d101      	bne.n	800656c <HAL_UART_Init+0xa8>
  {
    return HAL_ERROR;
 8006568:	2301      	movs	r3, #1
 800656a:	e024      	b.n	80065b6 <HAL_UART_Init+0xf2>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006570:	2b00      	cmp	r3, #0
 8006572:	d003      	beq.n	800657c <HAL_UART_Init+0xb8>
  {
    UART_AdvFeatureConfig(huart);
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	0018      	movs	r0, r3
 8006578:	f000 fa4c 	bl	8006a14 <UART_AdvFeatureConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register. */
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	685a      	ldr	r2, [r3, #4]
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	4911      	ldr	r1, [pc, #68]	; (80065cc <HAL_UART_Init+0x108>)
 8006588:	400a      	ands	r2, r1
 800658a:	605a      	str	r2, [r3, #4]
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
#endif
#if defined (USART_CR3_SCEN)
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	689a      	ldr	r2, [r3, #8]
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	212a      	movs	r1, #42	; 0x2a
 8006598:	438a      	bics	r2, r1
 800659a:	609a      	str	r2, [r3, #8]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
#endif
#endif

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	681a      	ldr	r2, [r3, #0]
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	2101      	movs	r1, #1
 80065a8:	430a      	orrs	r2, r1
 80065aa:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	0018      	movs	r0, r3
 80065b0:	f000 fba4 	bl	8006cfc <UART_CheckIdleState>
 80065b4:	0003      	movs	r3, r0
}
 80065b6:	0018      	movs	r0, r3
 80065b8:	46bd      	mov	sp, r7
 80065ba:	b002      	add	sp, #8
 80065bc:	bd80      	pop	{r7, pc}
 80065be:	46c0      	nop			; (mov r8, r8)
 80065c0:	40013800 	.word	0x40013800
 80065c4:	40004400 	.word	0x40004400
 80065c8:	08007198 	.word	0x08007198
 80065cc:	ffffb7ff 	.word	0xffffb7ff

080065d0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80065d0:	b590      	push	{r4, r7, lr}
 80065d2:	b087      	sub	sp, #28
 80065d4:	af00      	add	r7, sp, #0
 80065d6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg                     = 0x00000000U;
 80065d8:	2300      	movs	r3, #0
 80065da:	60fb      	str	r3, [r7, #12]
  UART_ClockSourceTypeDef clocksource = UART_CLOCKSOURCE_UNDEFINED;
 80065dc:	2317      	movs	r3, #23
 80065de:	18fb      	adds	r3, r7, r3
 80065e0:	2210      	movs	r2, #16
 80065e2:	701a      	strb	r2, [r3, #0]
  uint16_t brrtemp                    = 0x0000U;
 80065e4:	230a      	movs	r3, #10
 80065e6:	18fb      	adds	r3, r7, r3
 80065e8:	2200      	movs	r2, #0
 80065ea:	801a      	strh	r2, [r3, #0]
  uint16_t usartdiv                   = 0x0000U;
 80065ec:	2314      	movs	r3, #20
 80065ee:	18fb      	adds	r3, r7, r3
 80065f0:	2200      	movs	r2, #0
 80065f2:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef ret               = HAL_OK;
 80065f4:	2313      	movs	r3, #19
 80065f6:	18fb      	adds	r3, r7, r3
 80065f8:	2200      	movs	r2, #0
 80065fa:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	685b      	ldr	r3, [r3, #4]
 8006600:	4ac7      	ldr	r2, [pc, #796]	; (8006920 <UART_SetConfig+0x350>)
 8006602:	4293      	cmp	r3, r2
 8006604:	d905      	bls.n	8006612 <UART_SetConfig+0x42>
 8006606:	4ac7      	ldr	r2, [pc, #796]	; (8006924 <UART_SetConfig+0x354>)
 8006608:	4bc7      	ldr	r3, [pc, #796]	; (8006928 <UART_SetConfig+0x358>)
 800660a:	0011      	movs	r1, r2
 800660c:	0018      	movs	r0, r3
 800660e:	f7fa f9b0 	bl	8000972 <assert_failed>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	689b      	ldr	r3, [r3, #8]
 8006616:	2b00      	cmp	r3, #0
 8006618:	d00b      	beq.n	8006632 <UART_SetConfig+0x62>
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	689a      	ldr	r2, [r3, #8]
 800661e:	2380      	movs	r3, #128	; 0x80
 8006620:	015b      	lsls	r3, r3, #5
 8006622:	429a      	cmp	r2, r3
 8006624:	d005      	beq.n	8006632 <UART_SetConfig+0x62>
 8006626:	4ac1      	ldr	r2, [pc, #772]	; (800692c <UART_SetConfig+0x35c>)
 8006628:	4bbf      	ldr	r3, [pc, #764]	; (8006928 <UART_SetConfig+0x358>)
 800662a:	0011      	movs	r1, r2
 800662c:	0018      	movs	r0, r3
 800662e:	f7fa f9a0 	bl	8000972 <assert_failed>
  assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	68da      	ldr	r2, [r3, #12]
 8006636:	2380      	movs	r3, #128	; 0x80
 8006638:	015b      	lsls	r3, r3, #5
 800663a:	429a      	cmp	r2, r3
 800663c:	d015      	beq.n	800666a <UART_SetConfig+0x9a>
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	68db      	ldr	r3, [r3, #12]
 8006642:	2b00      	cmp	r3, #0
 8006644:	d011      	beq.n	800666a <UART_SetConfig+0x9a>
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	68da      	ldr	r2, [r3, #12]
 800664a:	23c0      	movs	r3, #192	; 0xc0
 800664c:	019b      	lsls	r3, r3, #6
 800664e:	429a      	cmp	r2, r3
 8006650:	d00b      	beq.n	800666a <UART_SetConfig+0x9a>
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	68da      	ldr	r2, [r3, #12]
 8006656:	2380      	movs	r3, #128	; 0x80
 8006658:	019b      	lsls	r3, r3, #6
 800665a:	429a      	cmp	r2, r3
 800665c:	d005      	beq.n	800666a <UART_SetConfig+0x9a>
 800665e:	4ab4      	ldr	r2, [pc, #720]	; (8006930 <UART_SetConfig+0x360>)
 8006660:	4bb1      	ldr	r3, [pc, #708]	; (8006928 <UART_SetConfig+0x358>)
 8006662:	0011      	movs	r1, r2
 8006664:	0018      	movs	r0, r3
 8006666:	f7fa f984 	bl	8000972 <assert_failed>
  assert_param(IS_UART_PARITY(huart->Init.Parity));
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	691b      	ldr	r3, [r3, #16]
 800666e:	2b00      	cmp	r3, #0
 8006670:	d011      	beq.n	8006696 <UART_SetConfig+0xc6>
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	691a      	ldr	r2, [r3, #16]
 8006676:	2380      	movs	r3, #128	; 0x80
 8006678:	00db      	lsls	r3, r3, #3
 800667a:	429a      	cmp	r2, r3
 800667c:	d00b      	beq.n	8006696 <UART_SetConfig+0xc6>
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	691a      	ldr	r2, [r3, #16]
 8006682:	23c0      	movs	r3, #192	; 0xc0
 8006684:	00db      	lsls	r3, r3, #3
 8006686:	429a      	cmp	r2, r3
 8006688:	d005      	beq.n	8006696 <UART_SetConfig+0xc6>
 800668a:	4aaa      	ldr	r2, [pc, #680]	; (8006934 <UART_SetConfig+0x364>)
 800668c:	4ba6      	ldr	r3, [pc, #664]	; (8006928 <UART_SetConfig+0x358>)
 800668e:	0011      	movs	r1, r2
 8006690:	0018      	movs	r0, r3
 8006692:	f7fa f96e 	bl	8000972 <assert_failed>
  assert_param(IS_UART_MODE(huart->Init.Mode));
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	695b      	ldr	r3, [r3, #20]
 800669a:	220c      	movs	r2, #12
 800669c:	4393      	bics	r3, r2
 800669e:	d103      	bne.n	80066a8 <UART_SetConfig+0xd8>
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	695b      	ldr	r3, [r3, #20]
 80066a4:	2b00      	cmp	r3, #0
 80066a6:	d105      	bne.n	80066b4 <UART_SetConfig+0xe4>
 80066a8:	4aa3      	ldr	r2, [pc, #652]	; (8006938 <UART_SetConfig+0x368>)
 80066aa:	4b9f      	ldr	r3, [pc, #636]	; (8006928 <UART_SetConfig+0x358>)
 80066ac:	0011      	movs	r1, r2
 80066ae:	0018      	movs	r0, r3
 80066b0:	f7fa f95f 	bl	8000972 <assert_failed>
  assert_param(IS_UART_HARDWARE_FLOW_CONTROL(huart->Init.HwFlowCtl));
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	699b      	ldr	r3, [r3, #24]
 80066b8:	2b00      	cmp	r3, #0
 80066ba:	d017      	beq.n	80066ec <UART_SetConfig+0x11c>
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	699a      	ldr	r2, [r3, #24]
 80066c0:	2380      	movs	r3, #128	; 0x80
 80066c2:	005b      	lsls	r3, r3, #1
 80066c4:	429a      	cmp	r2, r3
 80066c6:	d011      	beq.n	80066ec <UART_SetConfig+0x11c>
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	699a      	ldr	r2, [r3, #24]
 80066cc:	2380      	movs	r3, #128	; 0x80
 80066ce:	009b      	lsls	r3, r3, #2
 80066d0:	429a      	cmp	r2, r3
 80066d2:	d00b      	beq.n	80066ec <UART_SetConfig+0x11c>
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	699a      	ldr	r2, [r3, #24]
 80066d8:	23c0      	movs	r3, #192	; 0xc0
 80066da:	009b      	lsls	r3, r3, #2
 80066dc:	429a      	cmp	r2, r3
 80066de:	d005      	beq.n	80066ec <UART_SetConfig+0x11c>
 80066e0:	4a96      	ldr	r2, [pc, #600]	; (800693c <UART_SetConfig+0x36c>)
 80066e2:	4b91      	ldr	r3, [pc, #580]	; (8006928 <UART_SetConfig+0x358>)
 80066e4:	0011      	movs	r1, r2
 80066e6:	0018      	movs	r0, r3
 80066e8:	f7fa f943 	bl	8000972 <assert_failed>
  assert_param(IS_UART_ONE_BIT_SAMPLE(huart->Init.OneBitSampling));
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	6a1b      	ldr	r3, [r3, #32]
 80066f0:	2b00      	cmp	r3, #0
 80066f2:	d00b      	beq.n	800670c <UART_SetConfig+0x13c>
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	6a1a      	ldr	r2, [r3, #32]
 80066f8:	2380      	movs	r3, #128	; 0x80
 80066fa:	011b      	lsls	r3, r3, #4
 80066fc:	429a      	cmp	r2, r3
 80066fe:	d005      	beq.n	800670c <UART_SetConfig+0x13c>
 8006700:	4a8f      	ldr	r2, [pc, #572]	; (8006940 <UART_SetConfig+0x370>)
 8006702:	4b89      	ldr	r3, [pc, #548]	; (8006928 <UART_SetConfig+0x358>)
 8006704:	0011      	movs	r1, r2
 8006706:	0018      	movs	r0, r3
 8006708:	f7fa f933 	bl	8000972 <assert_failed>
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	69db      	ldr	r3, [r3, #28]
 8006710:	2b00      	cmp	r3, #0
 8006712:	d00b      	beq.n	800672c <UART_SetConfig+0x15c>
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	69da      	ldr	r2, [r3, #28]
 8006718:	2380      	movs	r3, #128	; 0x80
 800671a:	021b      	lsls	r3, r3, #8
 800671c:	429a      	cmp	r2, r3
 800671e:	d005      	beq.n	800672c <UART_SetConfig+0x15c>
 8006720:	4a88      	ldr	r2, [pc, #544]	; (8006944 <UART_SetConfig+0x374>)
 8006722:	4b81      	ldr	r3, [pc, #516]	; (8006928 <UART_SetConfig+0x358>)
 8006724:	0011      	movs	r1, r2
 8006726:	0018      	movs	r0, r3
 8006728:	f7fa f923 	bl	8000972 <assert_failed>
   *  the UART Word Length, Parity, Mode and oversampling:
   *  set the M bits according to huart->Init.WordLength value
   *  set PCE and PS bits according to huart->Init.Parity value
   *  set TE and RE bits according to huart->Init.Mode value
   *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	689a      	ldr	r2, [r3, #8]
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	691b      	ldr	r3, [r3, #16]
 8006734:	431a      	orrs	r2, r3
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	695b      	ldr	r3, [r3, #20]
 800673a:	431a      	orrs	r2, r3
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	69db      	ldr	r3, [r3, #28]
 8006740:	4313      	orrs	r3, r2
 8006742:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	4a7f      	ldr	r2, [pc, #508]	; (8006948 <UART_SetConfig+0x378>)
 800674c:	4013      	ands	r3, r2
 800674e:	0019      	movs	r1, r3
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	68fa      	ldr	r2, [r7, #12]
 8006756:	430a      	orrs	r2, r1
 8006758:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
   * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	685b      	ldr	r3, [r3, #4]
 8006760:	4a7a      	ldr	r2, [pc, #488]	; (800694c <UART_SetConfig+0x37c>)
 8006762:	4013      	ands	r3, r2
 8006764:	0019      	movs	r1, r3
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	68da      	ldr	r2, [r3, #12]
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	430a      	orrs	r2, r1
 8006770:	605a      	str	r2, [r3, #4]
  /* Configure
   * - UART HardWare Flow Control: set CTSE and RTSE bits according
   *   to huart->Init.HwFlowCtl value
   * - one-bit sampling method versus three samples' majority rule according
   *   to huart->Init.OneBitSampling */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	699a      	ldr	r2, [r3, #24]
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	6a1b      	ldr	r3, [r3, #32]
 800677a:	4313      	orrs	r3, r2
 800677c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	689b      	ldr	r3, [r3, #8]
 8006784:	4a72      	ldr	r2, [pc, #456]	; (8006950 <UART_SetConfig+0x380>)
 8006786:	4013      	ands	r3, r2
 8006788:	0019      	movs	r1, r3
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	68fa      	ldr	r2, [r7, #12]
 8006790:	430a      	orrs	r2, r1
 8006792:	609a      	str	r2, [r3, #8]

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	4a6e      	ldr	r2, [pc, #440]	; (8006954 <UART_SetConfig+0x384>)
 800679a:	4293      	cmp	r3, r2
 800679c:	d125      	bne.n	80067ea <UART_SetConfig+0x21a>
 800679e:	4b6e      	ldr	r3, [pc, #440]	; (8006958 <UART_SetConfig+0x388>)
 80067a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80067a2:	2203      	movs	r2, #3
 80067a4:	4013      	ands	r3, r2
 80067a6:	2b01      	cmp	r3, #1
 80067a8:	d00f      	beq.n	80067ca <UART_SetConfig+0x1fa>
 80067aa:	d304      	bcc.n	80067b6 <UART_SetConfig+0x1e6>
 80067ac:	2b02      	cmp	r3, #2
 80067ae:	d011      	beq.n	80067d4 <UART_SetConfig+0x204>
 80067b0:	2b03      	cmp	r3, #3
 80067b2:	d005      	beq.n	80067c0 <UART_SetConfig+0x1f0>
 80067b4:	e013      	b.n	80067de <UART_SetConfig+0x20e>
 80067b6:	2317      	movs	r3, #23
 80067b8:	18fb      	adds	r3, r7, r3
 80067ba:	2200      	movs	r2, #0
 80067bc:	701a      	strb	r2, [r3, #0]
 80067be:	e022      	b.n	8006806 <UART_SetConfig+0x236>
 80067c0:	2317      	movs	r3, #23
 80067c2:	18fb      	adds	r3, r7, r3
 80067c4:	2202      	movs	r2, #2
 80067c6:	701a      	strb	r2, [r3, #0]
 80067c8:	e01d      	b.n	8006806 <UART_SetConfig+0x236>
 80067ca:	2317      	movs	r3, #23
 80067cc:	18fb      	adds	r3, r7, r3
 80067ce:	2204      	movs	r2, #4
 80067d0:	701a      	strb	r2, [r3, #0]
 80067d2:	e018      	b.n	8006806 <UART_SetConfig+0x236>
 80067d4:	2317      	movs	r3, #23
 80067d6:	18fb      	adds	r3, r7, r3
 80067d8:	2208      	movs	r2, #8
 80067da:	701a      	strb	r2, [r3, #0]
 80067dc:	e013      	b.n	8006806 <UART_SetConfig+0x236>
 80067de:	2317      	movs	r3, #23
 80067e0:	18fb      	adds	r3, r7, r3
 80067e2:	2210      	movs	r2, #16
 80067e4:	701a      	strb	r2, [r3, #0]
 80067e6:	46c0      	nop			; (mov r8, r8)
 80067e8:	e00d      	b.n	8006806 <UART_SetConfig+0x236>
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	4a5b      	ldr	r2, [pc, #364]	; (800695c <UART_SetConfig+0x38c>)
 80067f0:	4293      	cmp	r3, r2
 80067f2:	d104      	bne.n	80067fe <UART_SetConfig+0x22e>
 80067f4:	2317      	movs	r3, #23
 80067f6:	18fb      	adds	r3, r7, r3
 80067f8:	2200      	movs	r2, #0
 80067fa:	701a      	strb	r2, [r3, #0]
 80067fc:	e003      	b.n	8006806 <UART_SetConfig+0x236>
 80067fe:	2317      	movs	r3, #23
 8006800:	18fb      	adds	r3, r7, r3
 8006802:	2210      	movs	r2, #16
 8006804:	701a      	strb	r2, [r3, #0]
  
  /* Check UART Over Sampling to set Baud Rate Register */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	69da      	ldr	r2, [r3, #28]
 800680a:	2380      	movs	r3, #128	; 0x80
 800680c:	021b      	lsls	r3, r3, #8
 800680e:	429a      	cmp	r2, r3
 8006810:	d000      	beq.n	8006814 <UART_SetConfig+0x244>
 8006812:	e077      	b.n	8006904 <UART_SetConfig+0x334>
  {
    switch (clocksource)
 8006814:	2317      	movs	r3, #23
 8006816:	18fb      	adds	r3, r7, r3
 8006818:	781b      	ldrb	r3, [r3, #0]
 800681a:	2b02      	cmp	r3, #2
 800681c:	d01c      	beq.n	8006858 <UART_SetConfig+0x288>
 800681e:	dc02      	bgt.n	8006826 <UART_SetConfig+0x256>
 8006820:	2b00      	cmp	r3, #0
 8006822:	d005      	beq.n	8006830 <UART_SetConfig+0x260>
 8006824:	e04f      	b.n	80068c6 <UART_SetConfig+0x2f6>
 8006826:	2b04      	cmp	r3, #4
 8006828:	d027      	beq.n	800687a <UART_SetConfig+0x2aa>
 800682a:	2b08      	cmp	r3, #8
 800682c:	d039      	beq.n	80068a2 <UART_SetConfig+0x2d2>
 800682e:	e04a      	b.n	80068c6 <UART_SetConfig+0x2f6>
    {
      case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8006830:	f7fd fcea 	bl	8004208 <HAL_RCC_GetPCLK1Freq>
 8006834:	0003      	movs	r3, r0
 8006836:	005a      	lsls	r2, r3, #1
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	685b      	ldr	r3, [r3, #4]
 800683c:	085b      	lsrs	r3, r3, #1
 800683e:	18d2      	adds	r2, r2, r3
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	685b      	ldr	r3, [r3, #4]
 8006844:	0019      	movs	r1, r3
 8006846:	0010      	movs	r0, r2
 8006848:	f7f9 fc5e 	bl	8000108 <__udivsi3>
 800684c:	0003      	movs	r3, r0
 800684e:	001a      	movs	r2, r3
 8006850:	2314      	movs	r3, #20
 8006852:	18fb      	adds	r3, r7, r3
 8006854:	801a      	strh	r2, [r3, #0]
        break;
 8006856:	e03b      	b.n	80068d0 <UART_SetConfig+0x300>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	685b      	ldr	r3, [r3, #4]
 800685c:	085b      	lsrs	r3, r3, #1
 800685e:	4a40      	ldr	r2, [pc, #256]	; (8006960 <UART_SetConfig+0x390>)
 8006860:	189a      	adds	r2, r3, r2
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	685b      	ldr	r3, [r3, #4]
 8006866:	0019      	movs	r1, r3
 8006868:	0010      	movs	r0, r2
 800686a:	f7f9 fc4d 	bl	8000108 <__udivsi3>
 800686e:	0003      	movs	r3, r0
 8006870:	001a      	movs	r2, r3
 8006872:	2314      	movs	r3, #20
 8006874:	18fb      	adds	r3, r7, r3
 8006876:	801a      	strh	r2, [r3, #0]
        break;
 8006878:	e02a      	b.n	80068d0 <UART_SetConfig+0x300>
      case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 800687a:	f7fd fc57 	bl	800412c <HAL_RCC_GetSysClockFreq>
 800687e:	0003      	movs	r3, r0
 8006880:	005a      	lsls	r2, r3, #1
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	685b      	ldr	r3, [r3, #4]
 8006886:	085b      	lsrs	r3, r3, #1
 8006888:	18d2      	adds	r2, r2, r3
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	685b      	ldr	r3, [r3, #4]
 800688e:	0019      	movs	r1, r3
 8006890:	0010      	movs	r0, r2
 8006892:	f7f9 fc39 	bl	8000108 <__udivsi3>
 8006896:	0003      	movs	r3, r0
 8006898:	001a      	movs	r2, r3
 800689a:	2314      	movs	r3, #20
 800689c:	18fb      	adds	r3, r7, r3
 800689e:	801a      	strh	r2, [r3, #0]
        break;
 80068a0:	e016      	b.n	80068d0 <UART_SetConfig+0x300>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	685b      	ldr	r3, [r3, #4]
 80068a6:	085b      	lsrs	r3, r3, #1
 80068a8:	2280      	movs	r2, #128	; 0x80
 80068aa:	0252      	lsls	r2, r2, #9
 80068ac:	189a      	adds	r2, r3, r2
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	685b      	ldr	r3, [r3, #4]
 80068b2:	0019      	movs	r1, r3
 80068b4:	0010      	movs	r0, r2
 80068b6:	f7f9 fc27 	bl	8000108 <__udivsi3>
 80068ba:	0003      	movs	r3, r0
 80068bc:	001a      	movs	r2, r3
 80068be:	2314      	movs	r3, #20
 80068c0:	18fb      	adds	r3, r7, r3
 80068c2:	801a      	strh	r2, [r3, #0]
        break;
 80068c4:	e004      	b.n	80068d0 <UART_SetConfig+0x300>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 80068c6:	2313      	movs	r3, #19
 80068c8:	18fb      	adds	r3, r7, r3
 80068ca:	2201      	movs	r2, #1
 80068cc:	701a      	strb	r2, [r3, #0]
        break;
 80068ce:	46c0      	nop			; (mov r8, r8)
    }

    brrtemp = usartdiv & 0xFFF0U;
 80068d0:	200a      	movs	r0, #10
 80068d2:	183b      	adds	r3, r7, r0
 80068d4:	2414      	movs	r4, #20
 80068d6:	193a      	adds	r2, r7, r4
 80068d8:	8812      	ldrh	r2, [r2, #0]
 80068da:	210f      	movs	r1, #15
 80068dc:	438a      	bics	r2, r1
 80068de:	801a      	strh	r2, [r3, #0]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80068e0:	193b      	adds	r3, r7, r4
 80068e2:	881b      	ldrh	r3, [r3, #0]
 80068e4:	105b      	asrs	r3, r3, #1
 80068e6:	b29b      	uxth	r3, r3
 80068e8:	2207      	movs	r2, #7
 80068ea:	4013      	ands	r3, r2
 80068ec:	b299      	uxth	r1, r3
 80068ee:	183b      	adds	r3, r7, r0
 80068f0:	183a      	adds	r2, r7, r0
 80068f2:	8812      	ldrh	r2, [r2, #0]
 80068f4:	430a      	orrs	r2, r1
 80068f6:	801a      	strh	r2, [r3, #0]
    huart->Instance->BRR = brrtemp;
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	183a      	adds	r2, r7, r0
 80068fe:	8812      	ldrh	r2, [r2, #0]
 8006900:	60da      	str	r2, [r3, #12]
 8006902:	e07d      	b.n	8006a00 <UART_SetConfig+0x430>
  }
  else
  {
    switch (clocksource)
 8006904:	2317      	movs	r3, #23
 8006906:	18fb      	adds	r3, r7, r3
 8006908:	781b      	ldrb	r3, [r3, #0]
 800690a:	2b02      	cmp	r3, #2
 800690c:	d03d      	beq.n	800698a <UART_SetConfig+0x3ba>
 800690e:	dc02      	bgt.n	8006916 <UART_SetConfig+0x346>
 8006910:	2b00      	cmp	r3, #0
 8006912:	d027      	beq.n	8006964 <UART_SetConfig+0x394>
 8006914:	e06f      	b.n	80069f6 <UART_SetConfig+0x426>
 8006916:	2b04      	cmp	r3, #4
 8006918:	d048      	beq.n	80069ac <UART_SetConfig+0x3dc>
 800691a:	2b08      	cmp	r3, #8
 800691c:	d059      	beq.n	80069d2 <UART_SetConfig+0x402>
 800691e:	e06a      	b.n	80069f6 <UART_SetConfig+0x426>
 8006920:	005b8d80 	.word	0x005b8d80
 8006924:	00000846 	.word	0x00000846
 8006928:	08007198 	.word	0x08007198
 800692c:	00000847 	.word	0x00000847
 8006930:	00000848 	.word	0x00000848
 8006934:	00000849 	.word	0x00000849
 8006938:	0000084a 	.word	0x0000084a
 800693c:	0000084b 	.word	0x0000084b
 8006940:	0000084c 	.word	0x0000084c
 8006944:	0000084d 	.word	0x0000084d
 8006948:	ffff69f3 	.word	0xffff69f3
 800694c:	ffffcfff 	.word	0xffffcfff
 8006950:	fffff4ff 	.word	0xfffff4ff
 8006954:	40013800 	.word	0x40013800
 8006958:	40021000 	.word	0x40021000
 800695c:	40004400 	.word	0x40004400
 8006960:	00f42400 	.word	0x00f42400
    {
      case UART_CLOCKSOURCE_PCLK1:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8006964:	f7fd fc50 	bl	8004208 <HAL_RCC_GetPCLK1Freq>
 8006968:	0002      	movs	r2, r0
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	685b      	ldr	r3, [r3, #4]
 800696e:	085b      	lsrs	r3, r3, #1
 8006970:	18d2      	adds	r2, r2, r3
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	685b      	ldr	r3, [r3, #4]
 8006976:	0019      	movs	r1, r3
 8006978:	0010      	movs	r0, r2
 800697a:	f7f9 fbc5 	bl	8000108 <__udivsi3>
 800697e:	0003      	movs	r3, r0
 8006980:	b29a      	uxth	r2, r3
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	60da      	str	r2, [r3, #12]
        break;
 8006988:	e03a      	b.n	8006a00 <UART_SetConfig+0x430>
      case UART_CLOCKSOURCE_HSI:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	685b      	ldr	r3, [r3, #4]
 800698e:	085b      	lsrs	r3, r3, #1
 8006990:	4a1f      	ldr	r2, [pc, #124]	; (8006a10 <UART_SetConfig+0x440>)
 8006992:	189a      	adds	r2, r3, r2
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	685b      	ldr	r3, [r3, #4]
 8006998:	0019      	movs	r1, r3
 800699a:	0010      	movs	r0, r2
 800699c:	f7f9 fbb4 	bl	8000108 <__udivsi3>
 80069a0:	0003      	movs	r3, r0
 80069a2:	b29a      	uxth	r2, r3
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	60da      	str	r2, [r3, #12]
        break;
 80069aa:	e029      	b.n	8006a00 <UART_SetConfig+0x430>
      case UART_CLOCKSOURCE_SYSCLK:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 80069ac:	f7fd fbbe 	bl	800412c <HAL_RCC_GetSysClockFreq>
 80069b0:	0002      	movs	r2, r0
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	685b      	ldr	r3, [r3, #4]
 80069b6:	085b      	lsrs	r3, r3, #1
 80069b8:	18d2      	adds	r2, r2, r3
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	685b      	ldr	r3, [r3, #4]
 80069be:	0019      	movs	r1, r3
 80069c0:	0010      	movs	r0, r2
 80069c2:	f7f9 fba1 	bl	8000108 <__udivsi3>
 80069c6:	0003      	movs	r3, r0
 80069c8:	b29a      	uxth	r2, r3
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	60da      	str	r2, [r3, #12]
        break;
 80069d0:	e016      	b.n	8006a00 <UART_SetConfig+0x430>
      case UART_CLOCKSOURCE_LSE:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	685b      	ldr	r3, [r3, #4]
 80069d6:	085b      	lsrs	r3, r3, #1
 80069d8:	2280      	movs	r2, #128	; 0x80
 80069da:	0212      	lsls	r2, r2, #8
 80069dc:	189a      	adds	r2, r3, r2
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	685b      	ldr	r3, [r3, #4]
 80069e2:	0019      	movs	r1, r3
 80069e4:	0010      	movs	r0, r2
 80069e6:	f7f9 fb8f 	bl	8000108 <__udivsi3>
 80069ea:	0003      	movs	r3, r0
 80069ec:	b29a      	uxth	r2, r3
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	60da      	str	r2, [r3, #12]
        break;
 80069f4:	e004      	b.n	8006a00 <UART_SetConfig+0x430>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 80069f6:	2313      	movs	r3, #19
 80069f8:	18fb      	adds	r3, r7, r3
 80069fa:	2201      	movs	r2, #1
 80069fc:	701a      	strb	r2, [r3, #0]
        break;
 80069fe:	46c0      	nop			; (mov r8, r8)
    }
  }

  return ret;
 8006a00:	2313      	movs	r3, #19
 8006a02:	18fb      	adds	r3, r7, r3
 8006a04:	781b      	ldrb	r3, [r3, #0]

}
 8006a06:	0018      	movs	r0, r3
 8006a08:	46bd      	mov	sp, r7
 8006a0a:	b007      	add	sp, #28
 8006a0c:	bd90      	pop	{r4, r7, pc}
 8006a0e:	46c0      	nop			; (mov r8, r8)
 8006a10:	007a1200 	.word	0x007a1200

08006a14 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006a14:	b580      	push	{r7, lr}
 8006a16:	b082      	sub	sp, #8
 8006a18:	af00      	add	r7, sp, #0
 8006a1a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a20:	2bff      	cmp	r3, #255	; 0xff
 8006a22:	d905      	bls.n	8006a30 <UART_AdvFeatureConfig+0x1c>
 8006a24:	4a9f      	ldr	r2, [pc, #636]	; (8006ca4 <UART_AdvFeatureConfig+0x290>)
 8006a26:	4ba0      	ldr	r3, [pc, #640]	; (8006ca8 <UART_AdvFeatureConfig+0x294>)
 8006a28:	0011      	movs	r1, r2
 8006a2a:	0018      	movs	r0, r3
 8006a2c:	f7f9 ffa1 	bl	8000972 <assert_failed>

  /* if required, configure TX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a34:	2201      	movs	r2, #1
 8006a36:	4013      	ands	r3, r2
 8006a38:	d01b      	beq.n	8006a72 <UART_AdvFeatureConfig+0x5e>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a3e:	2b00      	cmp	r3, #0
 8006a40:	d00b      	beq.n	8006a5a <UART_AdvFeatureConfig+0x46>
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006a46:	2380      	movs	r3, #128	; 0x80
 8006a48:	029b      	lsls	r3, r3, #10
 8006a4a:	429a      	cmp	r2, r3
 8006a4c:	d005      	beq.n	8006a5a <UART_AdvFeatureConfig+0x46>
 8006a4e:	4a97      	ldr	r2, [pc, #604]	; (8006cac <UART_AdvFeatureConfig+0x298>)
 8006a50:	4b95      	ldr	r3, [pc, #596]	; (8006ca8 <UART_AdvFeatureConfig+0x294>)
 8006a52:	0011      	movs	r1, r2
 8006a54:	0018      	movs	r0, r3
 8006a56:	f7f9 ff8c 	bl	8000972 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	685b      	ldr	r3, [r3, #4]
 8006a60:	4a93      	ldr	r2, [pc, #588]	; (8006cb0 <UART_AdvFeatureConfig+0x29c>)
 8006a62:	4013      	ands	r3, r2
 8006a64:	0019      	movs	r1, r3
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	430a      	orrs	r2, r1
 8006a70:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a76:	2202      	movs	r2, #2
 8006a78:	4013      	ands	r3, r2
 8006a7a:	d01b      	beq.n	8006ab4 <UART_AdvFeatureConfig+0xa0>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a80:	2b00      	cmp	r3, #0
 8006a82:	d00b      	beq.n	8006a9c <UART_AdvFeatureConfig+0x88>
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006a88:	2380      	movs	r3, #128	; 0x80
 8006a8a:	025b      	lsls	r3, r3, #9
 8006a8c:	429a      	cmp	r2, r3
 8006a8e:	d005      	beq.n	8006a9c <UART_AdvFeatureConfig+0x88>
 8006a90:	4a88      	ldr	r2, [pc, #544]	; (8006cb4 <UART_AdvFeatureConfig+0x2a0>)
 8006a92:	4b85      	ldr	r3, [pc, #532]	; (8006ca8 <UART_AdvFeatureConfig+0x294>)
 8006a94:	0011      	movs	r1, r2
 8006a96:	0018      	movs	r0, r3
 8006a98:	f7f9 ff6b 	bl	8000972 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	685b      	ldr	r3, [r3, #4]
 8006aa2:	4a85      	ldr	r2, [pc, #532]	; (8006cb8 <UART_AdvFeatureConfig+0x2a4>)
 8006aa4:	4013      	ands	r3, r2
 8006aa6:	0019      	movs	r1, r3
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	430a      	orrs	r2, r1
 8006ab2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ab8:	2204      	movs	r2, #4
 8006aba:	4013      	ands	r3, r2
 8006abc:	d01b      	beq.n	8006af6 <UART_AdvFeatureConfig+0xe2>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ac2:	2b00      	cmp	r3, #0
 8006ac4:	d00b      	beq.n	8006ade <UART_AdvFeatureConfig+0xca>
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006aca:	2380      	movs	r3, #128	; 0x80
 8006acc:	02db      	lsls	r3, r3, #11
 8006ace:	429a      	cmp	r2, r3
 8006ad0:	d005      	beq.n	8006ade <UART_AdvFeatureConfig+0xca>
 8006ad2:	4a7a      	ldr	r2, [pc, #488]	; (8006cbc <UART_AdvFeatureConfig+0x2a8>)
 8006ad4:	4b74      	ldr	r3, [pc, #464]	; (8006ca8 <UART_AdvFeatureConfig+0x294>)
 8006ad6:	0011      	movs	r1, r2
 8006ad8:	0018      	movs	r0, r3
 8006ada:	f7f9 ff4a 	bl	8000972 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	685b      	ldr	r3, [r3, #4]
 8006ae4:	4a76      	ldr	r2, [pc, #472]	; (8006cc0 <UART_AdvFeatureConfig+0x2ac>)
 8006ae6:	4013      	ands	r3, r2
 8006ae8:	0019      	movs	r1, r3
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	430a      	orrs	r2, r1
 8006af4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006afa:	2208      	movs	r2, #8
 8006afc:	4013      	ands	r3, r2
 8006afe:	d01b      	beq.n	8006b38 <UART_AdvFeatureConfig+0x124>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006b04:	2b00      	cmp	r3, #0
 8006b06:	d00b      	beq.n	8006b20 <UART_AdvFeatureConfig+0x10c>
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006b0c:	2380      	movs	r3, #128	; 0x80
 8006b0e:	021b      	lsls	r3, r3, #8
 8006b10:	429a      	cmp	r2, r3
 8006b12:	d005      	beq.n	8006b20 <UART_AdvFeatureConfig+0x10c>
 8006b14:	4a6b      	ldr	r2, [pc, #428]	; (8006cc4 <UART_AdvFeatureConfig+0x2b0>)
 8006b16:	4b64      	ldr	r3, [pc, #400]	; (8006ca8 <UART_AdvFeatureConfig+0x294>)
 8006b18:	0011      	movs	r1, r2
 8006b1a:	0018      	movs	r0, r3
 8006b1c:	f7f9 ff29 	bl	8000972 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	685b      	ldr	r3, [r3, #4]
 8006b26:	4a68      	ldr	r2, [pc, #416]	; (8006cc8 <UART_AdvFeatureConfig+0x2b4>)
 8006b28:	4013      	ands	r3, r2
 8006b2a:	0019      	movs	r1, r3
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	430a      	orrs	r2, r1
 8006b36:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b3c:	2210      	movs	r2, #16
 8006b3e:	4013      	ands	r3, r2
 8006b40:	d01b      	beq.n	8006b7a <UART_AdvFeatureConfig+0x166>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	d00b      	beq.n	8006b62 <UART_AdvFeatureConfig+0x14e>
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006b4e:	2380      	movs	r3, #128	; 0x80
 8006b50:	015b      	lsls	r3, r3, #5
 8006b52:	429a      	cmp	r2, r3
 8006b54:	d005      	beq.n	8006b62 <UART_AdvFeatureConfig+0x14e>
 8006b56:	4a5d      	ldr	r2, [pc, #372]	; (8006ccc <UART_AdvFeatureConfig+0x2b8>)
 8006b58:	4b53      	ldr	r3, [pc, #332]	; (8006ca8 <UART_AdvFeatureConfig+0x294>)
 8006b5a:	0011      	movs	r1, r2
 8006b5c:	0018      	movs	r0, r3
 8006b5e:	f7f9 ff08 	bl	8000972 <assert_failed>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	689b      	ldr	r3, [r3, #8]
 8006b68:	4a59      	ldr	r2, [pc, #356]	; (8006cd0 <UART_AdvFeatureConfig+0x2bc>)
 8006b6a:	4013      	ands	r3, r2
 8006b6c:	0019      	movs	r1, r3
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	430a      	orrs	r2, r1
 8006b78:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b7e:	2220      	movs	r2, #32
 8006b80:	4013      	ands	r3, r2
 8006b82:	d01b      	beq.n	8006bbc <UART_AdvFeatureConfig+0x1a8>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006b88:	2b00      	cmp	r3, #0
 8006b8a:	d00b      	beq.n	8006ba4 <UART_AdvFeatureConfig+0x190>
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006b90:	2380      	movs	r3, #128	; 0x80
 8006b92:	019b      	lsls	r3, r3, #6
 8006b94:	429a      	cmp	r2, r3
 8006b96:	d005      	beq.n	8006ba4 <UART_AdvFeatureConfig+0x190>
 8006b98:	4a4e      	ldr	r2, [pc, #312]	; (8006cd4 <UART_AdvFeatureConfig+0x2c0>)
 8006b9a:	4b43      	ldr	r3, [pc, #268]	; (8006ca8 <UART_AdvFeatureConfig+0x294>)
 8006b9c:	0011      	movs	r1, r2
 8006b9e:	0018      	movs	r0, r3
 8006ba0:	f7f9 fee7 	bl	8000972 <assert_failed>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	689b      	ldr	r3, [r3, #8]
 8006baa:	4a4b      	ldr	r2, [pc, #300]	; (8006cd8 <UART_AdvFeatureConfig+0x2c4>)
 8006bac:	4013      	ands	r3, r2
 8006bae:	0019      	movs	r1, r3
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	430a      	orrs	r2, r1
 8006bba:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bc0:	2240      	movs	r2, #64	; 0x40
 8006bc2:	4013      	ands	r3, r2
 8006bc4:	d048      	beq.n	8006c58 <UART_AdvFeatureConfig+0x244>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	4a44      	ldr	r2, [pc, #272]	; (8006cdc <UART_AdvFeatureConfig+0x2c8>)
 8006bcc:	4293      	cmp	r3, r2
 8006bce:	d005      	beq.n	8006bdc <UART_AdvFeatureConfig+0x1c8>
 8006bd0:	4a43      	ldr	r2, [pc, #268]	; (8006ce0 <UART_AdvFeatureConfig+0x2cc>)
 8006bd2:	4b35      	ldr	r3, [pc, #212]	; (8006ca8 <UART_AdvFeatureConfig+0x294>)
 8006bd4:	0011      	movs	r1, r2
 8006bd6:	0018      	movs	r0, r3
 8006bd8:	f7f9 fecb 	bl	8000972 <assert_failed>
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006be0:	2b00      	cmp	r3, #0
 8006be2:	d00b      	beq.n	8006bfc <UART_AdvFeatureConfig+0x1e8>
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006be8:	2380      	movs	r3, #128	; 0x80
 8006bea:	035b      	lsls	r3, r3, #13
 8006bec:	429a      	cmp	r2, r3
 8006bee:	d005      	beq.n	8006bfc <UART_AdvFeatureConfig+0x1e8>
 8006bf0:	4a3c      	ldr	r2, [pc, #240]	; (8006ce4 <UART_AdvFeatureConfig+0x2d0>)
 8006bf2:	4b2d      	ldr	r3, [pc, #180]	; (8006ca8 <UART_AdvFeatureConfig+0x294>)
 8006bf4:	0011      	movs	r1, r2
 8006bf6:	0018      	movs	r0, r3
 8006bf8:	f7f9 febb 	bl	8000972 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	685b      	ldr	r3, [r3, #4]
 8006c02:	4a39      	ldr	r2, [pc, #228]	; (8006ce8 <UART_AdvFeatureConfig+0x2d4>)
 8006c04:	4013      	ands	r3, r2
 8006c06:	0019      	movs	r1, r3
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	430a      	orrs	r2, r1
 8006c12:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006c18:	2380      	movs	r3, #128	; 0x80
 8006c1a:	035b      	lsls	r3, r3, #13
 8006c1c:	429a      	cmp	r2, r3
 8006c1e:	d11b      	bne.n	8006c58 <UART_AdvFeatureConfig+0x244>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006c24:	2b00      	cmp	r3, #0
 8006c26:	d00b      	beq.n	8006c40 <UART_AdvFeatureConfig+0x22c>
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006c2c:	2380      	movs	r3, #128	; 0x80
 8006c2e:	039b      	lsls	r3, r3, #14
 8006c30:	429a      	cmp	r2, r3
 8006c32:	d005      	beq.n	8006c40 <UART_AdvFeatureConfig+0x22c>
 8006c34:	4a2d      	ldr	r2, [pc, #180]	; (8006cec <UART_AdvFeatureConfig+0x2d8>)
 8006c36:	4b1c      	ldr	r3, [pc, #112]	; (8006ca8 <UART_AdvFeatureConfig+0x294>)
 8006c38:	0011      	movs	r1, r2
 8006c3a:	0018      	movs	r0, r3
 8006c3c:	f7f9 fe99 	bl	8000972 <assert_failed>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	685b      	ldr	r3, [r3, #4]
 8006c46:	4a2a      	ldr	r2, [pc, #168]	; (8006cf0 <UART_AdvFeatureConfig+0x2dc>)
 8006c48:	4013      	ands	r3, r2
 8006c4a:	0019      	movs	r1, r3
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	430a      	orrs	r2, r1
 8006c56:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c5c:	2280      	movs	r2, #128	; 0x80
 8006c5e:	4013      	ands	r3, r2
 8006c60:	d01b      	beq.n	8006c9a <UART_AdvFeatureConfig+0x286>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006c66:	2b00      	cmp	r3, #0
 8006c68:	d00b      	beq.n	8006c82 <UART_AdvFeatureConfig+0x26e>
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006c6e:	2380      	movs	r3, #128	; 0x80
 8006c70:	031b      	lsls	r3, r3, #12
 8006c72:	429a      	cmp	r2, r3
 8006c74:	d005      	beq.n	8006c82 <UART_AdvFeatureConfig+0x26e>
 8006c76:	4a1f      	ldr	r2, [pc, #124]	; (8006cf4 <UART_AdvFeatureConfig+0x2e0>)
 8006c78:	4b0b      	ldr	r3, [pc, #44]	; (8006ca8 <UART_AdvFeatureConfig+0x294>)
 8006c7a:	0011      	movs	r1, r2
 8006c7c:	0018      	movs	r0, r3
 8006c7e:	f7f9 fe78 	bl	8000972 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	685b      	ldr	r3, [r3, #4]
 8006c88:	4a1b      	ldr	r2, [pc, #108]	; (8006cf8 <UART_AdvFeatureConfig+0x2e4>)
 8006c8a:	4013      	ands	r3, r2
 8006c8c:	0019      	movs	r1, r3
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	430a      	orrs	r2, r1
 8006c98:	605a      	str	r2, [r3, #4]
  }
}
 8006c9a:	46c0      	nop			; (mov r8, r8)
 8006c9c:	46bd      	mov	sp, r7
 8006c9e:	b002      	add	sp, #8
 8006ca0:	bd80      	pop	{r7, pc}
 8006ca2:	46c0      	nop			; (mov r8, r8)
 8006ca4:	000008a9 	.word	0x000008a9
 8006ca8:	08007198 	.word	0x08007198
 8006cac:	000008ae 	.word	0x000008ae
 8006cb0:	fffdffff 	.word	0xfffdffff
 8006cb4:	000008b5 	.word	0x000008b5
 8006cb8:	fffeffff 	.word	0xfffeffff
 8006cbc:	000008bc 	.word	0x000008bc
 8006cc0:	fffbffff 	.word	0xfffbffff
 8006cc4:	000008c3 	.word	0x000008c3
 8006cc8:	ffff7fff 	.word	0xffff7fff
 8006ccc:	000008ca 	.word	0x000008ca
 8006cd0:	ffffefff 	.word	0xffffefff
 8006cd4:	000008d1 	.word	0x000008d1
 8006cd8:	ffffdfff 	.word	0xffffdfff
 8006cdc:	40013800 	.word	0x40013800
 8006ce0:	000008d8 	.word	0x000008d8
 8006ce4:	000008d9 	.word	0x000008d9
 8006ce8:	ffefffff 	.word	0xffefffff
 8006cec:	000008de 	.word	0x000008de
 8006cf0:	ff9fffff 	.word	0xff9fffff
 8006cf4:	000008e6 	.word	0x000008e6
 8006cf8:	fff7ffff 	.word	0xfff7ffff

08006cfc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006cfc:	b580      	push	{r7, lr}
 8006cfe:	b086      	sub	sp, #24
 8006d00:	af02      	add	r7, sp, #8
 8006d02:	6078      	str	r0, [r7, #4]
#if !defined(STM32F030x6) && !defined(STM32F030x8)&& !defined(STM32F070xB)&& !defined(STM32F070x6)&& !defined(STM32F030xC)
  uint32_t tickstart = 0U;
 8006d04:	2300      	movs	r3, #0
 8006d06:	60fb      	str	r3, [r7, #12]
#endif /* !defined(STM32F030x6) && !defined(STM32F030x8)&& !defined(STM32F070xB)&& !defined(STM32F070x6)&& !defined(STM32F030xC) */

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	2200      	movs	r2, #0
 8006d0c:	66da      	str	r2, [r3, #108]	; 0x6c

#if !defined(STM32F030x6) && !defined(STM32F030x8)&& !defined(STM32F070xB)&& !defined(STM32F070x6)&& !defined(STM32F030xC)
  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8006d0e:	f7fa fd43 	bl	8001798 <HAL_GetTick>
 8006d12:	0003      	movs	r3, r0
 8006d14:	60fb      	str	r3, [r7, #12]

  /* TEACK and REACK bits in ISR are checked only when available (not available on all F0 devices).
     Bits are defined for some specific devices, and are available only for UART instances supporting WakeUp from Stop Mode feature. 
  */
  if (IS_UART_WAKEUP_FROMSTOP_INSTANCE(huart->Instance))
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	4a1f      	ldr	r2, [pc, #124]	; (8006d98 <UART_CheckIdleState+0x9c>)
 8006d1c:	4293      	cmp	r3, r2
 8006d1e:	d129      	bne.n	8006d74 <UART_CheckIdleState+0x78>
  {
    /* Check if the Transmitter is enabled */
    if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	2208      	movs	r2, #8
 8006d28:	4013      	ands	r3, r2
 8006d2a:	2b08      	cmp	r3, #8
 8006d2c:	d10d      	bne.n	8006d4a <UART_CheckIdleState+0x4e>
    {
      /* Wait until TEACK flag is set */
      if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006d2e:	68fa      	ldr	r2, [r7, #12]
 8006d30:	2380      	movs	r3, #128	; 0x80
 8006d32:	0399      	lsls	r1, r3, #14
 8006d34:	6878      	ldr	r0, [r7, #4]
 8006d36:	4b19      	ldr	r3, [pc, #100]	; (8006d9c <UART_CheckIdleState+0xa0>)
 8006d38:	9300      	str	r3, [sp, #0]
 8006d3a:	0013      	movs	r3, r2
 8006d3c:	2200      	movs	r2, #0
 8006d3e:	f000 f82f 	bl	8006da0 <UART_WaitOnFlagUntilTimeout>
 8006d42:	1e03      	subs	r3, r0, #0
 8006d44:	d001      	beq.n	8006d4a <UART_CheckIdleState+0x4e>
      {
        /* Timeout occurred */
        return HAL_TIMEOUT;
 8006d46:	2303      	movs	r3, #3
 8006d48:	e021      	b.n	8006d8e <UART_CheckIdleState+0x92>
      }
    }

    /* Check if the Receiver is enabled */
    if((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	2204      	movs	r2, #4
 8006d52:	4013      	ands	r3, r2
 8006d54:	2b04      	cmp	r3, #4
 8006d56:	d10d      	bne.n	8006d74 <UART_CheckIdleState+0x78>
    {
      /* Wait until REACK flag is set */
      if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006d58:	68fa      	ldr	r2, [r7, #12]
 8006d5a:	2380      	movs	r3, #128	; 0x80
 8006d5c:	03d9      	lsls	r1, r3, #15
 8006d5e:	6878      	ldr	r0, [r7, #4]
 8006d60:	4b0e      	ldr	r3, [pc, #56]	; (8006d9c <UART_CheckIdleState+0xa0>)
 8006d62:	9300      	str	r3, [sp, #0]
 8006d64:	0013      	movs	r3, r2
 8006d66:	2200      	movs	r2, #0
 8006d68:	f000 f81a 	bl	8006da0 <UART_WaitOnFlagUntilTimeout>
 8006d6c:	1e03      	subs	r3, r0, #0
 8006d6e:	d001      	beq.n	8006d74 <UART_CheckIdleState+0x78>
      {
        /* Timeout occurred */
        return HAL_TIMEOUT;
 8006d70:	2303      	movs	r3, #3
 8006d72:	e00c      	b.n	8006d8e <UART_CheckIdleState+0x92>
    }
  }
#endif /* !defined(STM32F030x6) && !defined(STM32F030x8)&& !defined(STM32F070xB)&& !defined(STM32F070x6)&& !defined(STM32F030xC) */

  /* Initialize the UART State */
  huart->gState  = HAL_UART_STATE_READY;
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	2269      	movs	r2, #105	; 0x69
 8006d78:	2120      	movs	r1, #32
 8006d7a:	5499      	strb	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	226a      	movs	r2, #106	; 0x6a
 8006d80:	2120      	movs	r1, #32
 8006d82:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	2268      	movs	r2, #104	; 0x68
 8006d88:	2100      	movs	r1, #0
 8006d8a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006d8c:	2300      	movs	r3, #0
}
 8006d8e:	0018      	movs	r0, r3
 8006d90:	46bd      	mov	sp, r7
 8006d92:	b004      	add	sp, #16
 8006d94:	bd80      	pop	{r7, pc}
 8006d96:	46c0      	nop			; (mov r8, r8)
 8006d98:	40013800 	.word	0x40013800
 8006d9c:	01ffffff 	.word	0x01ffffff

08006da0 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8006da0:	b580      	push	{r7, lr}
 8006da2:	b084      	sub	sp, #16
 8006da4:	af00      	add	r7, sp, #0
 8006da6:	60f8      	str	r0, [r7, #12]
 8006da8:	60b9      	str	r1, [r7, #8]
 8006daa:	603b      	str	r3, [r7, #0]
 8006dac:	1dfb      	adds	r3, r7, #7
 8006dae:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006db0:	e02b      	b.n	8006e0a <UART_WaitOnFlagUntilTimeout+0x6a>
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 8006db2:	69bb      	ldr	r3, [r7, #24]
 8006db4:	3301      	adds	r3, #1
 8006db6:	d028      	beq.n	8006e0a <UART_WaitOnFlagUntilTimeout+0x6a>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8006db8:	69bb      	ldr	r3, [r7, #24]
 8006dba:	2b00      	cmp	r3, #0
 8006dbc:	d007      	beq.n	8006dce <UART_WaitOnFlagUntilTimeout+0x2e>
 8006dbe:	f7fa fceb 	bl	8001798 <HAL_GetTick>
 8006dc2:	0002      	movs	r2, r0
 8006dc4:	683b      	ldr	r3, [r7, #0]
 8006dc6:	1ad3      	subs	r3, r2, r3
 8006dc8:	69ba      	ldr	r2, [r7, #24]
 8006dca:	429a      	cmp	r2, r3
 8006dcc:	d21d      	bcs.n	8006e0a <UART_WaitOnFlagUntilTimeout+0x6a>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006dce:	68fb      	ldr	r3, [r7, #12]
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	681a      	ldr	r2, [r3, #0]
 8006dd4:	68fb      	ldr	r3, [r7, #12]
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	4916      	ldr	r1, [pc, #88]	; (8006e34 <UART_WaitOnFlagUntilTimeout+0x94>)
 8006dda:	400a      	ands	r2, r1
 8006ddc:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006dde:	68fb      	ldr	r3, [r7, #12]
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	689a      	ldr	r2, [r3, #8]
 8006de4:	68fb      	ldr	r3, [r7, #12]
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	2101      	movs	r1, #1
 8006dea:	438a      	bics	r2, r1
 8006dec:	609a      	str	r2, [r3, #8]

        huart->gState  = HAL_UART_STATE_READY;
 8006dee:	68fb      	ldr	r3, [r7, #12]
 8006df0:	2269      	movs	r2, #105	; 0x69
 8006df2:	2120      	movs	r1, #32
 8006df4:	5499      	strb	r1, [r3, r2]
        huart->RxState = HAL_UART_STATE_READY;
 8006df6:	68fb      	ldr	r3, [r7, #12]
 8006df8:	226a      	movs	r2, #106	; 0x6a
 8006dfa:	2120      	movs	r1, #32
 8006dfc:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8006dfe:	68fb      	ldr	r3, [r7, #12]
 8006e00:	2268      	movs	r2, #104	; 0x68
 8006e02:	2100      	movs	r1, #0
 8006e04:	5499      	strb	r1, [r3, r2]
        return HAL_TIMEOUT;
 8006e06:	2303      	movs	r3, #3
 8006e08:	e00f      	b.n	8006e2a <UART_WaitOnFlagUntilTimeout+0x8a>
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006e0a:	68fb      	ldr	r3, [r7, #12]
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	69db      	ldr	r3, [r3, #28]
 8006e10:	68ba      	ldr	r2, [r7, #8]
 8006e12:	4013      	ands	r3, r2
 8006e14:	68ba      	ldr	r2, [r7, #8]
 8006e16:	1ad3      	subs	r3, r2, r3
 8006e18:	425a      	negs	r2, r3
 8006e1a:	4153      	adcs	r3, r2
 8006e1c:	b2db      	uxtb	r3, r3
 8006e1e:	001a      	movs	r2, r3
 8006e20:	1dfb      	adds	r3, r7, #7
 8006e22:	781b      	ldrb	r3, [r3, #0]
 8006e24:	429a      	cmp	r2, r3
 8006e26:	d0c4      	beq.n	8006db2 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006e28:	2300      	movs	r3, #0
}
 8006e2a:	0018      	movs	r0, r3
 8006e2c:	46bd      	mov	sp, r7
 8006e2e:	b004      	add	sp, #16
 8006e30:	bd80      	pop	{r7, pc}
 8006e32:	46c0      	nop			; (mov r8, r8)
 8006e34:	fffffe5f 	.word	0xfffffe5f

08006e38 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8006e38:	480d      	ldr	r0, [pc, #52]	; (8006e70 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8006e3a:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8006e3c:	480d      	ldr	r0, [pc, #52]	; (8006e74 <LoopForever+0x6>)
  ldr r1, =_edata
 8006e3e:	490e      	ldr	r1, [pc, #56]	; (8006e78 <LoopForever+0xa>)
  ldr r2, =_sidata
 8006e40:	4a0e      	ldr	r2, [pc, #56]	; (8006e7c <LoopForever+0xe>)
  movs r3, #0
 8006e42:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8006e44:	e002      	b.n	8006e4c <LoopCopyDataInit>

08006e46 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8006e46:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8006e48:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8006e4a:	3304      	adds	r3, #4

08006e4c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8006e4c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8006e4e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8006e50:	d3f9      	bcc.n	8006e46 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8006e52:	4a0b      	ldr	r2, [pc, #44]	; (8006e80 <LoopForever+0x12>)
  ldr r4, =_ebss
 8006e54:	4c0b      	ldr	r4, [pc, #44]	; (8006e84 <LoopForever+0x16>)
  movs r3, #0
 8006e56:	2300      	movs	r3, #0
  b LoopFillZerobss
 8006e58:	e001      	b.n	8006e5e <LoopFillZerobss>

08006e5a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8006e5a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8006e5c:	3204      	adds	r2, #4

08006e5e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8006e5e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8006e60:	d3fb      	bcc.n	8006e5a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8006e62:	f7f9 fe3d 	bl	8000ae0 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8006e66:	f000 f811 	bl	8006e8c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8006e6a:	f7f9 fcc7 	bl	80007fc <main>

08006e6e <LoopForever>:

LoopForever:
    b LoopForever
 8006e6e:	e7fe      	b.n	8006e6e <LoopForever>
  ldr   r0, =_estack
 8006e70:	20001fff 	.word	0x20001fff
  ldr r0, =_sdata
 8006e74:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8006e78:	200003cc 	.word	0x200003cc
  ldr r2, =_sidata
 8006e7c:	080071f4 	.word	0x080071f4
  ldr r2, =_sbss
 8006e80:	200003cc 	.word	0x200003cc
  ldr r4, =_ebss
 8006e84:	20000674 	.word	0x20000674

08006e88 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8006e88:	e7fe      	b.n	8006e88 <ADC1_COMP_IRQHandler>
	...

08006e8c <__libc_init_array>:
 8006e8c:	b570      	push	{r4, r5, r6, lr}
 8006e8e:	2600      	movs	r6, #0
 8006e90:	4d0c      	ldr	r5, [pc, #48]	; (8006ec4 <__libc_init_array+0x38>)
 8006e92:	4c0d      	ldr	r4, [pc, #52]	; (8006ec8 <__libc_init_array+0x3c>)
 8006e94:	1b64      	subs	r4, r4, r5
 8006e96:	10a4      	asrs	r4, r4, #2
 8006e98:	42a6      	cmp	r6, r4
 8006e9a:	d109      	bne.n	8006eb0 <__libc_init_array+0x24>
 8006e9c:	2600      	movs	r6, #0
 8006e9e:	f000 f821 	bl	8006ee4 <_init>
 8006ea2:	4d0a      	ldr	r5, [pc, #40]	; (8006ecc <__libc_init_array+0x40>)
 8006ea4:	4c0a      	ldr	r4, [pc, #40]	; (8006ed0 <__libc_init_array+0x44>)
 8006ea6:	1b64      	subs	r4, r4, r5
 8006ea8:	10a4      	asrs	r4, r4, #2
 8006eaa:	42a6      	cmp	r6, r4
 8006eac:	d105      	bne.n	8006eba <__libc_init_array+0x2e>
 8006eae:	bd70      	pop	{r4, r5, r6, pc}
 8006eb0:	00b3      	lsls	r3, r6, #2
 8006eb2:	58eb      	ldr	r3, [r5, r3]
 8006eb4:	4798      	blx	r3
 8006eb6:	3601      	adds	r6, #1
 8006eb8:	e7ee      	b.n	8006e98 <__libc_init_array+0xc>
 8006eba:	00b3      	lsls	r3, r6, #2
 8006ebc:	58eb      	ldr	r3, [r5, r3]
 8006ebe:	4798      	blx	r3
 8006ec0:	3601      	adds	r6, #1
 8006ec2:	e7f2      	b.n	8006eaa <__libc_init_array+0x1e>
 8006ec4:	080071ec 	.word	0x080071ec
 8006ec8:	080071ec 	.word	0x080071ec
 8006ecc:	080071ec 	.word	0x080071ec
 8006ed0:	080071f0 	.word	0x080071f0

08006ed4 <memset>:
 8006ed4:	0003      	movs	r3, r0
 8006ed6:	1812      	adds	r2, r2, r0
 8006ed8:	4293      	cmp	r3, r2
 8006eda:	d100      	bne.n	8006ede <memset+0xa>
 8006edc:	4770      	bx	lr
 8006ede:	7019      	strb	r1, [r3, #0]
 8006ee0:	3301      	adds	r3, #1
 8006ee2:	e7f9      	b.n	8006ed8 <memset+0x4>

08006ee4 <_init>:
 8006ee4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006ee6:	46c0      	nop			; (mov r8, r8)
 8006ee8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006eea:	bc08      	pop	{r3}
 8006eec:	469e      	mov	lr, r3
 8006eee:	4770      	bx	lr

08006ef0 <_fini>:
 8006ef0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006ef2:	46c0      	nop			; (mov r8, r8)
 8006ef4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006ef6:	bc08      	pop	{r3}
 8006ef8:	469e      	mov	lr, r3
 8006efa:	4770      	bx	lr
