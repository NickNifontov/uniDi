
uniDi.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006dd4  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002f0  08006e94  08006e94  00016e94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007184  08007184  000203c8  2**0
                  CONTENTS
  4 .ARM          00000000  08007184  08007184  000203c8  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007184  08007184  000203c8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007184  08007184  00017184  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007188  08007188  00017188  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000003c8  20000000  0800718c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002a4  200003c8  08007554  000203c8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000066c  08007554  0002066c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  000203c8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001f6e0  00000000  00000000  000203f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000400d  00000000  00000000  0003fad0  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000fb8  00000000  00000000  00043ae0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000dd0  00000000  00000000  00044a98  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000142ed  00000000  00000000  00045868  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00016f18  00000000  00000000  00059b55  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0005b5a8  00000000  00000000  00070a6d  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000cc015  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000346c  00000000  00000000  000cc090  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	200003c8 	.word	0x200003c8
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08006e7c 	.word	0x08006e7c

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	200003cc 	.word	0x200003cc
 8000104:	08006e7c 	.word	0x08006e7c

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <MX_ADC_Init>:
ADC_HandleTypeDef hadc;
DMA_HandleTypeDef hdma_adc;

/* ADC init function */
void MX_ADC_Init(void)
{
 8000220:	b580      	push	{r7, lr}
 8000222:	b084      	sub	sp, #16
 8000224:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 8000226:	1d3b      	adds	r3, r7, #4
 8000228:	0018      	movs	r0, r3
 800022a:	230c      	movs	r3, #12
 800022c:	001a      	movs	r2, r3
 800022e:	2100      	movs	r1, #0
 8000230:	f006 fe1c 	bl	8006e6c <memset>

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc.Instance = ADC1;
 8000234:	4b3f      	ldr	r3, [pc, #252]	; (8000334 <MX_ADC_Init+0x114>)
 8000236:	4a40      	ldr	r2, [pc, #256]	; (8000338 <MX_ADC_Init+0x118>)
 8000238:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800023a:	4b3e      	ldr	r3, [pc, #248]	; (8000334 <MX_ADC_Init+0x114>)
 800023c:	2200      	movs	r2, #0
 800023e:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8000240:	4b3c      	ldr	r3, [pc, #240]	; (8000334 <MX_ADC_Init+0x114>)
 8000242:	2200      	movs	r2, #0
 8000244:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000246:	4b3b      	ldr	r3, [pc, #236]	; (8000334 <MX_ADC_Init+0x114>)
 8000248:	2200      	movs	r2, #0
 800024a:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 800024c:	4b39      	ldr	r3, [pc, #228]	; (8000334 <MX_ADC_Init+0x114>)
 800024e:	2201      	movs	r2, #1
 8000250:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000252:	4b38      	ldr	r3, [pc, #224]	; (8000334 <MX_ADC_Init+0x114>)
 8000254:	2204      	movs	r2, #4
 8000256:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = DISABLE;
 8000258:	4b36      	ldr	r3, [pc, #216]	; (8000334 <MX_ADC_Init+0x114>)
 800025a:	2200      	movs	r2, #0
 800025c:	619a      	str	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 800025e:	4b35      	ldr	r3, [pc, #212]	; (8000334 <MX_ADC_Init+0x114>)
 8000260:	2200      	movs	r2, #0
 8000262:	61da      	str	r2, [r3, #28]
  hadc.Init.ContinuousConvMode = ENABLE;
 8000264:	4b33      	ldr	r3, [pc, #204]	; (8000334 <MX_ADC_Init+0x114>)
 8000266:	2201      	movs	r2, #1
 8000268:	621a      	str	r2, [r3, #32]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 800026a:	4b32      	ldr	r3, [pc, #200]	; (8000334 <MX_ADC_Init+0x114>)
 800026c:	2200      	movs	r2, #0
 800026e:	625a      	str	r2, [r3, #36]	; 0x24
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000270:	4b30      	ldr	r3, [pc, #192]	; (8000334 <MX_ADC_Init+0x114>)
 8000272:	22c2      	movs	r2, #194	; 0xc2
 8000274:	32ff      	adds	r2, #255	; 0xff
 8000276:	629a      	str	r2, [r3, #40]	; 0x28
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000278:	4b2e      	ldr	r3, [pc, #184]	; (8000334 <MX_ADC_Init+0x114>)
 800027a:	2200      	movs	r2, #0
 800027c:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc.Init.DMAContinuousRequests = ENABLE;
 800027e:	4b2d      	ldr	r3, [pc, #180]	; (8000334 <MX_ADC_Init+0x114>)
 8000280:	2201      	movs	r2, #1
 8000282:	631a      	str	r2, [r3, #48]	; 0x30
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000284:	4b2b      	ldr	r3, [pc, #172]	; (8000334 <MX_ADC_Init+0x114>)
 8000286:	2201      	movs	r2, #1
 8000288:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 800028a:	4b2a      	ldr	r3, [pc, #168]	; (8000334 <MX_ADC_Init+0x114>)
 800028c:	0018      	movs	r0, r3
 800028e:	f001 fa77 	bl	8001780 <HAL_ADC_Init>
 8000292:	1e03      	subs	r3, r0, #0
 8000294:	d001      	beq.n	800029a <MX_ADC_Init+0x7a>
  {
    Error_Handler();
 8000296:	f000 fb67 	bl	8000968 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted. 
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800029a:	1d3b      	adds	r3, r7, #4
 800029c:	2201      	movs	r2, #1
 800029e:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 80002a0:	1d3b      	adds	r3, r7, #4
 80002a2:	2280      	movs	r2, #128	; 0x80
 80002a4:	0152      	lsls	r2, r2, #5
 80002a6:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 80002a8:	1d3b      	adds	r3, r7, #4
 80002aa:	2207      	movs	r2, #7
 80002ac:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80002ae:	1d3a      	adds	r2, r7, #4
 80002b0:	4b20      	ldr	r3, [pc, #128]	; (8000334 <MX_ADC_Init+0x114>)
 80002b2:	0011      	movs	r1, r2
 80002b4:	0018      	movs	r0, r3
 80002b6:	f001 fd51 	bl	8001d5c <HAL_ADC_ConfigChannel>
 80002ba:	1e03      	subs	r3, r0, #0
 80002bc:	d001      	beq.n	80002c2 <MX_ADC_Init+0xa2>
  {
    Error_Handler();
 80002be:	f000 fb53 	bl	8000968 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted. 
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80002c2:	1d3b      	adds	r3, r7, #4
 80002c4:	2203      	movs	r2, #3
 80002c6:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80002c8:	1d3a      	adds	r2, r7, #4
 80002ca:	4b1a      	ldr	r3, [pc, #104]	; (8000334 <MX_ADC_Init+0x114>)
 80002cc:	0011      	movs	r1, r2
 80002ce:	0018      	movs	r0, r3
 80002d0:	f001 fd44 	bl	8001d5c <HAL_ADC_ConfigChannel>
 80002d4:	1e03      	subs	r3, r0, #0
 80002d6:	d001      	beq.n	80002dc <MX_ADC_Init+0xbc>
  {
    Error_Handler();
 80002d8:	f000 fb46 	bl	8000968 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted. 
  */
  sConfig.Channel = ADC_CHANNEL_5;
 80002dc:	1d3b      	adds	r3, r7, #4
 80002de:	2205      	movs	r2, #5
 80002e0:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80002e2:	1d3a      	adds	r2, r7, #4
 80002e4:	4b13      	ldr	r3, [pc, #76]	; (8000334 <MX_ADC_Init+0x114>)
 80002e6:	0011      	movs	r1, r2
 80002e8:	0018      	movs	r0, r3
 80002ea:	f001 fd37 	bl	8001d5c <HAL_ADC_ConfigChannel>
 80002ee:	1e03      	subs	r3, r0, #0
 80002f0:	d001      	beq.n	80002f6 <MX_ADC_Init+0xd6>
  {
    Error_Handler();
 80002f2:	f000 fb39 	bl	8000968 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted. 
  */
  sConfig.Channel = ADC_CHANNEL_6;
 80002f6:	1d3b      	adds	r3, r7, #4
 80002f8:	2206      	movs	r2, #6
 80002fa:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80002fc:	1d3a      	adds	r2, r7, #4
 80002fe:	4b0d      	ldr	r3, [pc, #52]	; (8000334 <MX_ADC_Init+0x114>)
 8000300:	0011      	movs	r1, r2
 8000302:	0018      	movs	r0, r3
 8000304:	f001 fd2a 	bl	8001d5c <HAL_ADC_ConfigChannel>
 8000308:	1e03      	subs	r3, r0, #0
 800030a:	d001      	beq.n	8000310 <MX_ADC_Init+0xf0>
  {
    Error_Handler();
 800030c:	f000 fb2c 	bl	8000968 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted. 
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8000310:	1d3b      	adds	r3, r7, #4
 8000312:	2207      	movs	r2, #7
 8000314:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000316:	1d3a      	adds	r2, r7, #4
 8000318:	4b06      	ldr	r3, [pc, #24]	; (8000334 <MX_ADC_Init+0x114>)
 800031a:	0011      	movs	r1, r2
 800031c:	0018      	movs	r0, r3
 800031e:	f001 fd1d 	bl	8001d5c <HAL_ADC_ConfigChannel>
 8000322:	1e03      	subs	r3, r0, #0
 8000324:	d001      	beq.n	800032a <MX_ADC_Init+0x10a>
  {
    Error_Handler();
 8000326:	f000 fb1f 	bl	8000968 <Error_Handler>
  }

}
 800032a:	46c0      	nop			; (mov r8, r8)
 800032c:	46bd      	mov	sp, r7
 800032e:	b004      	add	sp, #16
 8000330:	bd80      	pop	{r7, pc}
 8000332:	46c0      	nop			; (mov r8, r8)
 8000334:	2000043c 	.word	0x2000043c
 8000338:	40012400 	.word	0x40012400

0800033c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 800033c:	b580      	push	{r7, lr}
 800033e:	b08a      	sub	sp, #40	; 0x28
 8000340:	af00      	add	r7, sp, #0
 8000342:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000344:	2314      	movs	r3, #20
 8000346:	18fb      	adds	r3, r7, r3
 8000348:	0018      	movs	r0, r3
 800034a:	2314      	movs	r3, #20
 800034c:	001a      	movs	r2, r3
 800034e:	2100      	movs	r1, #0
 8000350:	f006 fd8c 	bl	8006e6c <memset>
  if(adcHandle->Instance==ADC1)
 8000354:	687b      	ldr	r3, [r7, #4]
 8000356:	681b      	ldr	r3, [r3, #0]
 8000358:	4a2e      	ldr	r2, [pc, #184]	; (8000414 <HAL_ADC_MspInit+0xd8>)
 800035a:	4293      	cmp	r3, r2
 800035c:	d155      	bne.n	800040a <HAL_ADC_MspInit+0xce>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800035e:	4b2e      	ldr	r3, [pc, #184]	; (8000418 <HAL_ADC_MspInit+0xdc>)
 8000360:	699a      	ldr	r2, [r3, #24]
 8000362:	4b2d      	ldr	r3, [pc, #180]	; (8000418 <HAL_ADC_MspInit+0xdc>)
 8000364:	2180      	movs	r1, #128	; 0x80
 8000366:	0089      	lsls	r1, r1, #2
 8000368:	430a      	orrs	r2, r1
 800036a:	619a      	str	r2, [r3, #24]
 800036c:	4b2a      	ldr	r3, [pc, #168]	; (8000418 <HAL_ADC_MspInit+0xdc>)
 800036e:	699a      	ldr	r2, [r3, #24]
 8000370:	2380      	movs	r3, #128	; 0x80
 8000372:	009b      	lsls	r3, r3, #2
 8000374:	4013      	ands	r3, r2
 8000376:	613b      	str	r3, [r7, #16]
 8000378:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800037a:	4b27      	ldr	r3, [pc, #156]	; (8000418 <HAL_ADC_MspInit+0xdc>)
 800037c:	695a      	ldr	r2, [r3, #20]
 800037e:	4b26      	ldr	r3, [pc, #152]	; (8000418 <HAL_ADC_MspInit+0xdc>)
 8000380:	2180      	movs	r1, #128	; 0x80
 8000382:	0289      	lsls	r1, r1, #10
 8000384:	430a      	orrs	r2, r1
 8000386:	615a      	str	r2, [r3, #20]
 8000388:	4b23      	ldr	r3, [pc, #140]	; (8000418 <HAL_ADC_MspInit+0xdc>)
 800038a:	695a      	ldr	r2, [r3, #20]
 800038c:	2380      	movs	r3, #128	; 0x80
 800038e:	029b      	lsls	r3, r3, #10
 8000390:	4013      	ands	r3, r2
 8000392:	60fb      	str	r3, [r7, #12]
 8000394:	68fb      	ldr	r3, [r7, #12]
    PA3     ------> ADC_IN3
    PA6     ------> ADC_IN6
    PA1     ------> ADC_IN1
    PA7     ------> ADC_IN7 
    */
    GPIO_InitStruct.Pin = POLKA_Pin|OC_I_Pin|KLAPAN_Pin|OC_V_Pin 
 8000396:	2114      	movs	r1, #20
 8000398:	187b      	adds	r3, r7, r1
 800039a:	22ea      	movs	r2, #234	; 0xea
 800039c:	601a      	str	r2, [r3, #0]
                          |ZERO_WIEN_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800039e:	187b      	adds	r3, r7, r1
 80003a0:	2203      	movs	r2, #3
 80003a2:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003a4:	187b      	adds	r3, r7, r1
 80003a6:	2200      	movs	r2, #0
 80003a8:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80003aa:	187a      	adds	r2, r7, r1
 80003ac:	2390      	movs	r3, #144	; 0x90
 80003ae:	05db      	lsls	r3, r3, #23
 80003b0:	0011      	movs	r1, r2
 80003b2:	0018      	movs	r0, r3
 80003b4:	f002 fd26 	bl	8002e04 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC Init */
    hdma_adc.Instance = DMA1_Channel1;
 80003b8:	4b18      	ldr	r3, [pc, #96]	; (800041c <HAL_ADC_MspInit+0xe0>)
 80003ba:	4a19      	ldr	r2, [pc, #100]	; (8000420 <HAL_ADC_MspInit+0xe4>)
 80003bc:	601a      	str	r2, [r3, #0]
    hdma_adc.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80003be:	4b17      	ldr	r3, [pc, #92]	; (800041c <HAL_ADC_MspInit+0xe0>)
 80003c0:	2200      	movs	r2, #0
 80003c2:	605a      	str	r2, [r3, #4]
    hdma_adc.Init.PeriphInc = DMA_PINC_DISABLE;
 80003c4:	4b15      	ldr	r3, [pc, #84]	; (800041c <HAL_ADC_MspInit+0xe0>)
 80003c6:	2200      	movs	r2, #0
 80003c8:	609a      	str	r2, [r3, #8]
    hdma_adc.Init.MemInc = DMA_MINC_ENABLE;
 80003ca:	4b14      	ldr	r3, [pc, #80]	; (800041c <HAL_ADC_MspInit+0xe0>)
 80003cc:	2280      	movs	r2, #128	; 0x80
 80003ce:	60da      	str	r2, [r3, #12]
    hdma_adc.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80003d0:	4b12      	ldr	r3, [pc, #72]	; (800041c <HAL_ADC_MspInit+0xe0>)
 80003d2:	2280      	movs	r2, #128	; 0x80
 80003d4:	0052      	lsls	r2, r2, #1
 80003d6:	611a      	str	r2, [r3, #16]
    hdma_adc.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80003d8:	4b10      	ldr	r3, [pc, #64]	; (800041c <HAL_ADC_MspInit+0xe0>)
 80003da:	2280      	movs	r2, #128	; 0x80
 80003dc:	00d2      	lsls	r2, r2, #3
 80003de:	615a      	str	r2, [r3, #20]
    hdma_adc.Init.Mode = DMA_NORMAL;
 80003e0:	4b0e      	ldr	r3, [pc, #56]	; (800041c <HAL_ADC_MspInit+0xe0>)
 80003e2:	2200      	movs	r2, #0
 80003e4:	619a      	str	r2, [r3, #24]
    hdma_adc.Init.Priority = DMA_PRIORITY_MEDIUM;
 80003e6:	4b0d      	ldr	r3, [pc, #52]	; (800041c <HAL_ADC_MspInit+0xe0>)
 80003e8:	2280      	movs	r2, #128	; 0x80
 80003ea:	0152      	lsls	r2, r2, #5
 80003ec:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc) != HAL_OK)
 80003ee:	4b0b      	ldr	r3, [pc, #44]	; (800041c <HAL_ADC_MspInit+0xe0>)
 80003f0:	0018      	movs	r0, r3
 80003f2:	f002 faa7 	bl	8002944 <HAL_DMA_Init>
 80003f6:	1e03      	subs	r3, r0, #0
 80003f8:	d001      	beq.n	80003fe <HAL_ADC_MspInit+0xc2>
    {
      Error_Handler();
 80003fa:	f000 fab5 	bl	8000968 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc);
 80003fe:	687b      	ldr	r3, [r7, #4]
 8000400:	4a06      	ldr	r2, [pc, #24]	; (800041c <HAL_ADC_MspInit+0xe0>)
 8000402:	63da      	str	r2, [r3, #60]	; 0x3c
 8000404:	4b05      	ldr	r3, [pc, #20]	; (800041c <HAL_ADC_MspInit+0xe0>)
 8000406:	687a      	ldr	r2, [r7, #4]
 8000408:	625a      	str	r2, [r3, #36]	; 0x24

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 800040a:	46c0      	nop			; (mov r8, r8)
 800040c:	46bd      	mov	sp, r7
 800040e:	b00a      	add	sp, #40	; 0x28
 8000410:	bd80      	pop	{r7, pc}
 8000412:	46c0      	nop			; (mov r8, r8)
 8000414:	40012400 	.word	0x40012400
 8000418:	40021000 	.word	0x40021000
 800041c:	200003f8 	.word	0x200003f8
 8000420:	40020008 	.word	0x40020008

08000424 <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 8000424:	b580      	push	{r7, lr}
 8000426:	af00      	add	r7, sp, #0

  hcrc.Instance = CRC;
 8000428:	4b0e      	ldr	r3, [pc, #56]	; (8000464 <MX_CRC_Init+0x40>)
 800042a:	4a0f      	ldr	r2, [pc, #60]	; (8000468 <MX_CRC_Init+0x44>)
 800042c:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 800042e:	4b0d      	ldr	r3, [pc, #52]	; (8000464 <MX_CRC_Init+0x40>)
 8000430:	2200      	movs	r2, #0
 8000432:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 8000434:	4b0b      	ldr	r3, [pc, #44]	; (8000464 <MX_CRC_Init+0x40>)
 8000436:	2200      	movs	r2, #0
 8000438:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 800043a:	4b0a      	ldr	r3, [pc, #40]	; (8000464 <MX_CRC_Init+0x40>)
 800043c:	2200      	movs	r2, #0
 800043e:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8000440:	4b08      	ldr	r3, [pc, #32]	; (8000464 <MX_CRC_Init+0x40>)
 8000442:	2200      	movs	r2, #0
 8000444:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8000446:	4b07      	ldr	r3, [pc, #28]	; (8000464 <MX_CRC_Init+0x40>)
 8000448:	2201      	movs	r2, #1
 800044a:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 800044c:	4b05      	ldr	r3, [pc, #20]	; (8000464 <MX_CRC_Init+0x40>)
 800044e:	0018      	movs	r0, r3
 8000450:	f002 f832 	bl	80024b8 <HAL_CRC_Init>
 8000454:	1e03      	subs	r3, r0, #0
 8000456:	d001      	beq.n	800045c <MX_CRC_Init+0x38>
  {
    Error_Handler();
 8000458:	f000 fa86 	bl	8000968 <Error_Handler>
  }

}
 800045c:	46c0      	nop			; (mov r8, r8)
 800045e:	46bd      	mov	sp, r7
 8000460:	bd80      	pop	{r7, pc}
 8000462:	46c0      	nop			; (mov r8, r8)
 8000464:	20000488 	.word	0x20000488
 8000468:	40023000 	.word	0x40023000

0800046c <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{
 800046c:	b580      	push	{r7, lr}
 800046e:	b084      	sub	sp, #16
 8000470:	af00      	add	r7, sp, #0
 8000472:	6078      	str	r0, [r7, #4]

  if(crcHandle->Instance==CRC)
 8000474:	687b      	ldr	r3, [r7, #4]
 8000476:	681b      	ldr	r3, [r3, #0]
 8000478:	4a09      	ldr	r2, [pc, #36]	; (80004a0 <HAL_CRC_MspInit+0x34>)
 800047a:	4293      	cmp	r3, r2
 800047c:	d10b      	bne.n	8000496 <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 800047e:	4b09      	ldr	r3, [pc, #36]	; (80004a4 <HAL_CRC_MspInit+0x38>)
 8000480:	695a      	ldr	r2, [r3, #20]
 8000482:	4b08      	ldr	r3, [pc, #32]	; (80004a4 <HAL_CRC_MspInit+0x38>)
 8000484:	2140      	movs	r1, #64	; 0x40
 8000486:	430a      	orrs	r2, r1
 8000488:	615a      	str	r2, [r3, #20]
 800048a:	4b06      	ldr	r3, [pc, #24]	; (80004a4 <HAL_CRC_MspInit+0x38>)
 800048c:	695b      	ldr	r3, [r3, #20]
 800048e:	2240      	movs	r2, #64	; 0x40
 8000490:	4013      	ands	r3, r2
 8000492:	60fb      	str	r3, [r7, #12]
 8000494:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 8000496:	46c0      	nop			; (mov r8, r8)
 8000498:	46bd      	mov	sp, r7
 800049a:	b004      	add	sp, #16
 800049c:	bd80      	pop	{r7, pc}
 800049e:	46c0      	nop			; (mov r8, r8)
 80004a0:	40023000 	.word	0x40023000
 80004a4:	40021000 	.word	0x40021000

080004a8 <MX_DAC1_Init>:

DAC_HandleTypeDef hdac1;

/* DAC1 init function */
void MX_DAC1_Init(void)
{
 80004a8:	b580      	push	{r7, lr}
 80004aa:	b082      	sub	sp, #8
 80004ac:	af00      	add	r7, sp, #0
  DAC_ChannelConfTypeDef sConfig = {0};
 80004ae:	003b      	movs	r3, r7
 80004b0:	0018      	movs	r0, r3
 80004b2:	2308      	movs	r3, #8
 80004b4:	001a      	movs	r2, r3
 80004b6:	2100      	movs	r1, #0
 80004b8:	f006 fcd8 	bl	8006e6c <memset>

  /** DAC Initialization 
  */
  hdac1.Instance = DAC;
 80004bc:	4b0f      	ldr	r3, [pc, #60]	; (80004fc <MX_DAC1_Init+0x54>)
 80004be:	4a10      	ldr	r2, [pc, #64]	; (8000500 <MX_DAC1_Init+0x58>)
 80004c0:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 80004c2:	4b0e      	ldr	r3, [pc, #56]	; (80004fc <MX_DAC1_Init+0x54>)
 80004c4:	0018      	movs	r0, r3
 80004c6:	f002 f89f 	bl	8002608 <HAL_DAC_Init>
 80004ca:	1e03      	subs	r3, r0, #0
 80004cc:	d001      	beq.n	80004d2 <MX_DAC1_Init+0x2a>
  {
    Error_Handler();
 80004ce:	f000 fa4b 	bl	8000968 <Error_Handler>
  }
  /** DAC channel OUT1 config 
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_T2_TRGO;
 80004d2:	003b      	movs	r3, r7
 80004d4:	2224      	movs	r2, #36	; 0x24
 80004d6:	601a      	str	r2, [r3, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 80004d8:	003b      	movs	r3, r7
 80004da:	2200      	movs	r2, #0
 80004dc:	605a      	str	r2, [r3, #4]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 80004de:	0039      	movs	r1, r7
 80004e0:	4b06      	ldr	r3, [pc, #24]	; (80004fc <MX_DAC1_Init+0x54>)
 80004e2:	2200      	movs	r2, #0
 80004e4:	0018      	movs	r0, r3
 80004e6:	f002 f919 	bl	800271c <HAL_DAC_ConfigChannel>
 80004ea:	1e03      	subs	r3, r0, #0
 80004ec:	d001      	beq.n	80004f2 <MX_DAC1_Init+0x4a>
  {
    Error_Handler();
 80004ee:	f000 fa3b 	bl	8000968 <Error_Handler>
  }

}
 80004f2:	46c0      	nop			; (mov r8, r8)
 80004f4:	46bd      	mov	sp, r7
 80004f6:	b002      	add	sp, #8
 80004f8:	bd80      	pop	{r7, pc}
 80004fa:	46c0      	nop			; (mov r8, r8)
 80004fc:	200004ac 	.word	0x200004ac
 8000500:	40007400 	.word	0x40007400

08000504 <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 8000504:	b580      	push	{r7, lr}
 8000506:	b08a      	sub	sp, #40	; 0x28
 8000508:	af00      	add	r7, sp, #0
 800050a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800050c:	2314      	movs	r3, #20
 800050e:	18fb      	adds	r3, r7, r3
 8000510:	0018      	movs	r0, r3
 8000512:	2314      	movs	r3, #20
 8000514:	001a      	movs	r2, r3
 8000516:	2100      	movs	r1, #0
 8000518:	f006 fca8 	bl	8006e6c <memset>
  if(dacHandle->Instance==DAC)
 800051c:	687b      	ldr	r3, [r7, #4]
 800051e:	681b      	ldr	r3, [r3, #0]
 8000520:	4a1d      	ldr	r2, [pc, #116]	; (8000598 <HAL_DAC_MspInit+0x94>)
 8000522:	4293      	cmp	r3, r2
 8000524:	d134      	bne.n	8000590 <HAL_DAC_MspInit+0x8c>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* DAC clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 8000526:	4b1d      	ldr	r3, [pc, #116]	; (800059c <HAL_DAC_MspInit+0x98>)
 8000528:	69da      	ldr	r2, [r3, #28]
 800052a:	4b1c      	ldr	r3, [pc, #112]	; (800059c <HAL_DAC_MspInit+0x98>)
 800052c:	2180      	movs	r1, #128	; 0x80
 800052e:	0589      	lsls	r1, r1, #22
 8000530:	430a      	orrs	r2, r1
 8000532:	61da      	str	r2, [r3, #28]
 8000534:	4b19      	ldr	r3, [pc, #100]	; (800059c <HAL_DAC_MspInit+0x98>)
 8000536:	69da      	ldr	r2, [r3, #28]
 8000538:	2380      	movs	r3, #128	; 0x80
 800053a:	059b      	lsls	r3, r3, #22
 800053c:	4013      	ands	r3, r2
 800053e:	613b      	str	r3, [r7, #16]
 8000540:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000542:	4b16      	ldr	r3, [pc, #88]	; (800059c <HAL_DAC_MspInit+0x98>)
 8000544:	695a      	ldr	r2, [r3, #20]
 8000546:	4b15      	ldr	r3, [pc, #84]	; (800059c <HAL_DAC_MspInit+0x98>)
 8000548:	2180      	movs	r1, #128	; 0x80
 800054a:	0289      	lsls	r1, r1, #10
 800054c:	430a      	orrs	r2, r1
 800054e:	615a      	str	r2, [r3, #20]
 8000550:	4b12      	ldr	r3, [pc, #72]	; (800059c <HAL_DAC_MspInit+0x98>)
 8000552:	695a      	ldr	r2, [r3, #20]
 8000554:	2380      	movs	r3, #128	; 0x80
 8000556:	029b      	lsls	r3, r3, #10
 8000558:	4013      	ands	r3, r2
 800055a:	60fb      	str	r3, [r7, #12]
 800055c:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration    
    PA4     ------> DAC1_OUT1 
    */
    GPIO_InitStruct.Pin = WIEN_Pin;
 800055e:	2114      	movs	r1, #20
 8000560:	187b      	adds	r3, r7, r1
 8000562:	2210      	movs	r2, #16
 8000564:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000566:	187b      	adds	r3, r7, r1
 8000568:	2203      	movs	r2, #3
 800056a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800056c:	187b      	adds	r3, r7, r1
 800056e:	2200      	movs	r2, #0
 8000570:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(WIEN_GPIO_Port, &GPIO_InitStruct);
 8000572:	187a      	adds	r2, r7, r1
 8000574:	2390      	movs	r3, #144	; 0x90
 8000576:	05db      	lsls	r3, r3, #23
 8000578:	0011      	movs	r1, r2
 800057a:	0018      	movs	r0, r3
 800057c:	f002 fc42 	bl	8002e04 <HAL_GPIO_Init>

    /* DAC interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8000580:	2200      	movs	r2, #0
 8000582:	2100      	movs	r1, #0
 8000584:	2011      	movs	r0, #17
 8000586:	f001 ff4d 	bl	8002424 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800058a:	2011      	movs	r0, #17
 800058c:	f001 ff6a 	bl	8002464 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }
}
 8000590:	46c0      	nop			; (mov r8, r8)
 8000592:	46bd      	mov	sp, r7
 8000594:	b00a      	add	sp, #40	; 0x28
 8000596:	bd80      	pop	{r7, pc}
 8000598:	40007400 	.word	0x40007400
 800059c:	40021000 	.word	0x40021000

080005a0 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
void MX_DMA_Init(void) 
{
 80005a0:	b580      	push	{r7, lr}
 80005a2:	b082      	sub	sp, #8
 80005a4:	af00      	add	r7, sp, #0
  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80005a6:	4b10      	ldr	r3, [pc, #64]	; (80005e8 <MX_DMA_Init+0x48>)
 80005a8:	695a      	ldr	r2, [r3, #20]
 80005aa:	4b0f      	ldr	r3, [pc, #60]	; (80005e8 <MX_DMA_Init+0x48>)
 80005ac:	2101      	movs	r1, #1
 80005ae:	430a      	orrs	r2, r1
 80005b0:	615a      	str	r2, [r3, #20]
 80005b2:	4b0d      	ldr	r3, [pc, #52]	; (80005e8 <MX_DMA_Init+0x48>)
 80005b4:	695b      	ldr	r3, [r3, #20]
 80005b6:	2201      	movs	r2, #1
 80005b8:	4013      	ands	r3, r2
 80005ba:	607b      	str	r3, [r7, #4]
 80005bc:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80005be:	2200      	movs	r2, #0
 80005c0:	2100      	movs	r1, #0
 80005c2:	2009      	movs	r0, #9
 80005c4:	f001 ff2e 	bl	8002424 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80005c8:	2009      	movs	r0, #9
 80005ca:	f001 ff4b 	bl	8002464 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_5_IRQn, 0, 0);
 80005ce:	2200      	movs	r2, #0
 80005d0:	2100      	movs	r1, #0
 80005d2:	200b      	movs	r0, #11
 80005d4:	f001 ff26 	bl	8002424 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_5_IRQn);
 80005d8:	200b      	movs	r0, #11
 80005da:	f001 ff43 	bl	8002464 <HAL_NVIC_EnableIRQ>

}
 80005de:	46c0      	nop			; (mov r8, r8)
 80005e0:	46bd      	mov	sp, r7
 80005e2:	b002      	add	sp, #8
 80005e4:	bd80      	pop	{r7, pc}
 80005e6:	46c0      	nop			; (mov r8, r8)
 80005e8:	40021000 	.word	0x40021000

080005ec <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through 
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 80005ec:	b590      	push	{r4, r7, lr}
 80005ee:	b08b      	sub	sp, #44	; 0x2c
 80005f0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005f2:	2414      	movs	r4, #20
 80005f4:	193b      	adds	r3, r7, r4
 80005f6:	0018      	movs	r0, r3
 80005f8:	2314      	movs	r3, #20
 80005fa:	001a      	movs	r2, r3
 80005fc:	2100      	movs	r1, #0
 80005fe:	f006 fc35 	bl	8006e6c <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000602:	4b66      	ldr	r3, [pc, #408]	; (800079c <MX_GPIO_Init+0x1b0>)
 8000604:	695a      	ldr	r2, [r3, #20]
 8000606:	4b65      	ldr	r3, [pc, #404]	; (800079c <MX_GPIO_Init+0x1b0>)
 8000608:	2180      	movs	r1, #128	; 0x80
 800060a:	0309      	lsls	r1, r1, #12
 800060c:	430a      	orrs	r2, r1
 800060e:	615a      	str	r2, [r3, #20]
 8000610:	4b62      	ldr	r3, [pc, #392]	; (800079c <MX_GPIO_Init+0x1b0>)
 8000612:	695a      	ldr	r2, [r3, #20]
 8000614:	2380      	movs	r3, #128	; 0x80
 8000616:	031b      	lsls	r3, r3, #12
 8000618:	4013      	ands	r3, r2
 800061a:	613b      	str	r3, [r7, #16]
 800061c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800061e:	4b5f      	ldr	r3, [pc, #380]	; (800079c <MX_GPIO_Init+0x1b0>)
 8000620:	695a      	ldr	r2, [r3, #20]
 8000622:	4b5e      	ldr	r3, [pc, #376]	; (800079c <MX_GPIO_Init+0x1b0>)
 8000624:	2180      	movs	r1, #128	; 0x80
 8000626:	02c9      	lsls	r1, r1, #11
 8000628:	430a      	orrs	r2, r1
 800062a:	615a      	str	r2, [r3, #20]
 800062c:	4b5b      	ldr	r3, [pc, #364]	; (800079c <MX_GPIO_Init+0x1b0>)
 800062e:	695a      	ldr	r2, [r3, #20]
 8000630:	2380      	movs	r3, #128	; 0x80
 8000632:	02db      	lsls	r3, r3, #11
 8000634:	4013      	ands	r3, r2
 8000636:	60fb      	str	r3, [r7, #12]
 8000638:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800063a:	4b58      	ldr	r3, [pc, #352]	; (800079c <MX_GPIO_Init+0x1b0>)
 800063c:	695a      	ldr	r2, [r3, #20]
 800063e:	4b57      	ldr	r3, [pc, #348]	; (800079c <MX_GPIO_Init+0x1b0>)
 8000640:	2180      	movs	r1, #128	; 0x80
 8000642:	0289      	lsls	r1, r1, #10
 8000644:	430a      	orrs	r2, r1
 8000646:	615a      	str	r2, [r3, #20]
 8000648:	4b54      	ldr	r3, [pc, #336]	; (800079c <MX_GPIO_Init+0x1b0>)
 800064a:	695a      	ldr	r2, [r3, #20]
 800064c:	2380      	movs	r3, #128	; 0x80
 800064e:	029b      	lsls	r3, r3, #10
 8000650:	4013      	ands	r3, r2
 8000652:	60bb      	str	r3, [r7, #8]
 8000654:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000656:	4b51      	ldr	r3, [pc, #324]	; (800079c <MX_GPIO_Init+0x1b0>)
 8000658:	695a      	ldr	r2, [r3, #20]
 800065a:	4b50      	ldr	r3, [pc, #320]	; (800079c <MX_GPIO_Init+0x1b0>)
 800065c:	2180      	movs	r1, #128	; 0x80
 800065e:	0349      	lsls	r1, r1, #13
 8000660:	430a      	orrs	r2, r1
 8000662:	615a      	str	r2, [r3, #20]
 8000664:	4b4d      	ldr	r3, [pc, #308]	; (800079c <MX_GPIO_Init+0x1b0>)
 8000666:	695a      	ldr	r2, [r3, #20]
 8000668:	2380      	movs	r3, #128	; 0x80
 800066a:	035b      	lsls	r3, r3, #13
 800066c:	4013      	ands	r3, r2
 800066e:	607b      	str	r3, [r7, #4]
 8000670:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000672:	4b4a      	ldr	r3, [pc, #296]	; (800079c <MX_GPIO_Init+0x1b0>)
 8000674:	695a      	ldr	r2, [r3, #20]
 8000676:	4b49      	ldr	r3, [pc, #292]	; (800079c <MX_GPIO_Init+0x1b0>)
 8000678:	2180      	movs	r1, #128	; 0x80
 800067a:	03c9      	lsls	r1, r1, #15
 800067c:	430a      	orrs	r2, r1
 800067e:	615a      	str	r2, [r3, #20]
 8000680:	4b46      	ldr	r3, [pc, #280]	; (800079c <MX_GPIO_Init+0x1b0>)
 8000682:	695a      	ldr	r2, [r3, #20]
 8000684:	2380      	movs	r3, #128	; 0x80
 8000686:	03db      	lsls	r3, r3, #15
 8000688:	4013      	ands	r3, r2
 800068a:	603b      	str	r3, [r7, #0]
 800068c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, POLKA_LED_Pin|BOARD_LED_Pin, GPIO_PIN_RESET);
 800068e:	23c0      	movs	r3, #192	; 0xc0
 8000690:	009b      	lsls	r3, r3, #2
 8000692:	4843      	ldr	r0, [pc, #268]	; (80007a0 <MX_GPIO_Init+0x1b4>)
 8000694:	2200      	movs	r2, #0
 8000696:	0019      	movs	r1, r3
 8000698:	f002 fe0a 	bl	80032b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC11 PC10 PC12 
                           PC1 PC0 PC7 PC2 
                           PC6 PC3 PC4 PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_11|GPIO_PIN_10|GPIO_PIN_12 
 800069c:	193b      	adds	r3, r7, r4
 800069e:	4a41      	ldr	r2, [pc, #260]	; (80007a4 <MX_GPIO_Init+0x1b8>)
 80006a0:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_7|GPIO_PIN_2 
                          |GPIO_PIN_6|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80006a2:	193b      	adds	r3, r7, r4
 80006a4:	2203      	movs	r2, #3
 80006a6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006a8:	193b      	adds	r3, r7, r4
 80006aa:	2200      	movs	r2, #0
 80006ac:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80006ae:	193b      	adds	r3, r7, r4
 80006b0:	4a3b      	ldr	r2, [pc, #236]	; (80007a0 <MX_GPIO_Init+0x1b4>)
 80006b2:	0019      	movs	r1, r3
 80006b4:	0010      	movs	r0, r2
 80006b6:	f002 fba5 	bl	8002e04 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB9 PB4 PB3 PB8 
                           PB7 PB5 PB6 PB0 
                           PB14 PB1 PB2 PB10 
                           PB13 PB11 PB12 */
  GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_4|GPIO_PIN_3|GPIO_PIN_8 
 80006ba:	193b      	adds	r3, r7, r4
 80006bc:	4a3a      	ldr	r2, [pc, #232]	; (80007a8 <MX_GPIO_Init+0x1bc>)
 80006be:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_7|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_0 
                          |GPIO_PIN_14|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10 
                          |GPIO_PIN_13|GPIO_PIN_11|GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80006c0:	193b      	adds	r3, r7, r4
 80006c2:	2203      	movs	r2, #3
 80006c4:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006c6:	193b      	adds	r3, r7, r4
 80006c8:	2200      	movs	r2, #0
 80006ca:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006cc:	193b      	adds	r3, r7, r4
 80006ce:	4a37      	ldr	r2, [pc, #220]	; (80007ac <MX_GPIO_Init+0x1c0>)
 80006d0:	0019      	movs	r1, r3
 80006d2:	0010      	movs	r0, r2
 80006d4:	f002 fb96 	bl	8002e04 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 80006d8:	193b      	adds	r3, r7, r4
 80006da:	2204      	movs	r2, #4
 80006dc:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80006de:	193b      	adds	r3, r7, r4
 80006e0:	2203      	movs	r2, #3
 80006e2:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006e4:	193b      	adds	r3, r7, r4
 80006e6:	2200      	movs	r2, #0
 80006e8:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80006ea:	193b      	adds	r3, r7, r4
 80006ec:	4a30      	ldr	r2, [pc, #192]	; (80007b0 <MX_GPIO_Init+0x1c4>)
 80006ee:	0019      	movs	r1, r3
 80006f0:	0010      	movs	r0, r2
 80006f2:	f002 fb87 	bl	8002e04 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA12 PA9 PA11 PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_9|GPIO_PIN_11|GPIO_PIN_8;
 80006f6:	193b      	adds	r3, r7, r4
 80006f8:	22d8      	movs	r2, #216	; 0xd8
 80006fa:	0152      	lsls	r2, r2, #5
 80006fc:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80006fe:	193b      	adds	r3, r7, r4
 8000700:	2203      	movs	r2, #3
 8000702:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000704:	193b      	adds	r3, r7, r4
 8000706:	2200      	movs	r2, #0
 8000708:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800070a:	193a      	adds	r2, r7, r4
 800070c:	2390      	movs	r3, #144	; 0x90
 800070e:	05db      	lsls	r3, r3, #23
 8000710:	0011      	movs	r1, r2
 8000712:	0018      	movs	r0, r3
 8000714:	f002 fb76 	bl	8002e04 <HAL_GPIO_Init>

  /*Configure GPIO pins : PF4 PF5 PF6 PF7 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000718:	193b      	adds	r3, r7, r4
 800071a:	22f0      	movs	r2, #240	; 0xf0
 800071c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800071e:	193b      	adds	r3, r7, r4
 8000720:	2203      	movs	r2, #3
 8000722:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000724:	193b      	adds	r3, r7, r4
 8000726:	2200      	movs	r2, #0
 8000728:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800072a:	193b      	adds	r3, r7, r4
 800072c:	4a21      	ldr	r2, [pc, #132]	; (80007b4 <MX_GPIO_Init+0x1c8>)
 800072e:	0019      	movs	r1, r3
 8000730:	0010      	movs	r0, r2
 8000732:	f002 fb67 	bl	8002e04 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = POLKA_LED_Pin|BOARD_LED_Pin;
 8000736:	0021      	movs	r1, r4
 8000738:	187b      	adds	r3, r7, r1
 800073a:	22c0      	movs	r2, #192	; 0xc0
 800073c:	0092      	lsls	r2, r2, #2
 800073e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000740:	187b      	adds	r3, r7, r1
 8000742:	2201      	movs	r2, #1
 8000744:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000746:	187b      	adds	r3, r7, r1
 8000748:	2200      	movs	r2, #0
 800074a:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800074c:	187b      	adds	r3, r7, r1
 800074e:	2203      	movs	r2, #3
 8000750:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000752:	000c      	movs	r4, r1
 8000754:	187b      	adds	r3, r7, r1
 8000756:	4a12      	ldr	r2, [pc, #72]	; (80007a0 <MX_GPIO_Init+0x1b4>)
 8000758:	0019      	movs	r1, r3
 800075a:	0010      	movs	r0, r2
 800075c:	f002 fb52 	bl	8002e04 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BLOCK_PU_Pin;
 8000760:	0021      	movs	r1, r4
 8000762:	187b      	adds	r3, r7, r1
 8000764:	2201      	movs	r2, #1
 8000766:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8000768:	187b      	adds	r3, r7, r1
 800076a:	4a13      	ldr	r2, [pc, #76]	; (80007b8 <MX_GPIO_Init+0x1cc>)
 800076c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800076e:	187b      	adds	r3, r7, r1
 8000770:	2201      	movs	r2, #1
 8000772:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(BLOCK_PU_GPIO_Port, &GPIO_InitStruct);
 8000774:	187a      	adds	r2, r7, r1
 8000776:	2390      	movs	r3, #144	; 0x90
 8000778:	05db      	lsls	r3, r3, #23
 800077a:	0011      	movs	r1, r2
 800077c:	0018      	movs	r0, r3
 800077e:	f002 fb41 	bl	8002e04 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_1_IRQn, 0, 0);
 8000782:	2200      	movs	r2, #0
 8000784:	2100      	movs	r1, #0
 8000786:	2005      	movs	r0, #5
 8000788:	f001 fe4c 	bl	8002424 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_1_IRQn);
 800078c:	2005      	movs	r0, #5
 800078e:	f001 fe69 	bl	8002464 <HAL_NVIC_EnableIRQ>

}
 8000792:	46c0      	nop			; (mov r8, r8)
 8000794:	46bd      	mov	sp, r7
 8000796:	b00b      	add	sp, #44	; 0x2c
 8000798:	bd90      	pop	{r4, r7, pc}
 800079a:	46c0      	nop			; (mov r8, r8)
 800079c:	40021000 	.word	0x40021000
 80007a0:	48000800 	.word	0x48000800
 80007a4:	00003cff 	.word	0x00003cff
 80007a8:	00007fff 	.word	0x00007fff
 80007ac:	48000400 	.word	0x48000400
 80007b0:	48000c00 	.word	0x48000c00
 80007b4:	48001400 	.word	0x48001400
 80007b8:	10310000 	.word	0x10310000

080007bc <MX_IWDG_Init>:

IWDG_HandleTypeDef hiwdg;

/* IWDG init function */
void MX_IWDG_Init(void)
{
 80007bc:	b580      	push	{r7, lr}
 80007be:	af00      	add	r7, sp, #0

  hiwdg.Instance = IWDG;
 80007c0:	4b0b      	ldr	r3, [pc, #44]	; (80007f0 <MX_IWDG_Init+0x34>)
 80007c2:	4a0c      	ldr	r2, [pc, #48]	; (80007f4 <MX_IWDG_Init+0x38>)
 80007c4:	601a      	str	r2, [r3, #0]
  hiwdg.Init.Prescaler = IWDG_PRESCALER_4;
 80007c6:	4b0a      	ldr	r3, [pc, #40]	; (80007f0 <MX_IWDG_Init+0x34>)
 80007c8:	2200      	movs	r2, #0
 80007ca:	605a      	str	r2, [r3, #4]
  hiwdg.Init.Window = 4095;
 80007cc:	4b08      	ldr	r3, [pc, #32]	; (80007f0 <MX_IWDG_Init+0x34>)
 80007ce:	4a0a      	ldr	r2, [pc, #40]	; (80007f8 <MX_IWDG_Init+0x3c>)
 80007d0:	60da      	str	r2, [r3, #12]
  hiwdg.Init.Reload = 4095;
 80007d2:	4b07      	ldr	r3, [pc, #28]	; (80007f0 <MX_IWDG_Init+0x34>)
 80007d4:	4a08      	ldr	r2, [pc, #32]	; (80007f8 <MX_IWDG_Init+0x3c>)
 80007d6:	609a      	str	r2, [r3, #8]
  if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 80007d8:	4b05      	ldr	r3, [pc, #20]	; (80007f0 <MX_IWDG_Init+0x34>)
 80007da:	0018      	movs	r0, r3
 80007dc:	f002 fde8 	bl	80033b0 <HAL_IWDG_Init>
 80007e0:	1e03      	subs	r3, r0, #0
 80007e2:	d001      	beq.n	80007e8 <MX_IWDG_Init+0x2c>
  {
    Error_Handler();
 80007e4:	f000 f8c0 	bl	8000968 <Error_Handler>
  }

}
 80007e8:	46c0      	nop			; (mov r8, r8)
 80007ea:	46bd      	mov	sp, r7
 80007ec:	bd80      	pop	{r7, pc}
 80007ee:	46c0      	nop			; (mov r8, r8)
 80007f0:	200004c0 	.word	0x200004c0
 80007f4:	40003000 	.word	0x40003000
 80007f8:	00000fff 	.word	0x00000fff

080007fc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007fc:	b580      	push	{r7, lr}
 80007fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

	// Enable Debug
	EnableDebugMode();
 8000800:	f000 fdd2 	bl	80013a8 <EnableDebugMode>
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000804:	f000 ff58 	bl	80016b8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000808:	f000 f83c 	bl	8000884 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800080c:	f7ff feee 	bl	80005ec <MX_GPIO_Init>
  MX_DMA_Init();
 8000810:	f7ff fec6 	bl	80005a0 <MX_DMA_Init>
  MX_ADC_Init();
 8000814:	f7ff fd04 	bl	8000220 <MX_ADC_Init>
  MX_CRC_Init();
 8000818:	f7ff fe04 	bl	8000424 <MX_CRC_Init>
  MX_DAC1_Init();
 800081c:	f7ff fe44 	bl	80004a8 <MX_DAC1_Init>
  MX_IWDG_Init();
 8000820:	f7ff ffcc 	bl	80007bc <MX_IWDG_Init>
  MX_TIM1_Init();
 8000824:	f000 f9a0 	bl	8000b68 <MX_TIM1_Init>
  MX_TIM2_Init();
 8000828:	f000 fa58 	bl	8000cdc <MX_TIM2_Init>
  MX_USART2_UART_Init();
 800082c:	f000 fb5c 	bl	8000ee8 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  	// Reset All to Default
    DigiTOS_IWDG_Init(DigiTOS_IWDG_Timeout_16s);// WatchDog
 8000830:	200c      	movs	r0, #12
 8000832:	f000 fe73 	bl	800151c <DigiTOS_IWDG_Init>

    BlinkLEDs(10,100);
 8000836:	2164      	movs	r1, #100	; 0x64
 8000838:	200a      	movs	r0, #10
 800083a:	f000 fd23 	bl	8001284 <BlinkLEDs>

    UseSoftStart=1;
 800083e:	4b0e      	ldr	r3, [pc, #56]	; (8000878 <main+0x7c>)
 8000840:	2201      	movs	r2, #1
 8000842:	601a      	str	r2, [r3, #0]
    HAL_GPIO_EXTI_Callback(BLOCK_PU_Pin); // Get State of Block Pin
 8000844:	2001      	movs	r0, #1
 8000846:	f000 f86f 	bl	8000928 <HAL_GPIO_EXTI_Callback>

    //PWM_50Hz_ON();
    //PWM_50Hz_OFF();

    DAC_SINUS_INIT();
 800084a:	f000 fe21 	bl	8001490 <DAC_SINUS_INIT>

    Set50Hz();
 800084e:	f000 fc1f 	bl	8001090 <Set50Hz>
    //Set505Hz();

    StartADC();
 8000852:	f000 fcf1 	bl	8001238 <StartADC>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  if (BlockGenerator==1) {
 8000856:	4b09      	ldr	r3, [pc, #36]	; (800087c <main+0x80>)
 8000858:	681b      	ldr	r3, [r3, #0]
 800085a:	2b01      	cmp	r3, #1
 800085c:	d106      	bne.n	800086c <main+0x70>
		  HAL_GPIO_WritePin(BOARD_LED_GPIO_Port, BOARD_LED_Pin,GPIO_PIN_SET); // LED Off
 800085e:	2380      	movs	r3, #128	; 0x80
 8000860:	005b      	lsls	r3, r3, #1
 8000862:	4807      	ldr	r0, [pc, #28]	; (8000880 <main+0x84>)
 8000864:	2201      	movs	r2, #1
 8000866:	0019      	movs	r1, r3
 8000868:	f002 fd22 	bl	80032b0 <HAL_GPIO_WritePin>
	  }

	  Check50Hz(); // Check if need to start\stop generator
 800086c:	f000 fd42 	bl	80012f4 <Check50Hz>

	  ResetWDG(); // Reset WatchDog
 8000870:	f000 fe48 	bl	8001504 <ResetWDG>
	  if (BlockGenerator==1) {
 8000874:	e7ef      	b.n	8000856 <main+0x5a>
 8000876:	46c0      	nop			; (mov r8, r8)
 8000878:	200003e4 	.word	0x200003e4
 800087c:	20000004 	.word	0x20000004
 8000880:	48000800 	.word	0x48000800

08000884 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000884:	b590      	push	{r4, r7, lr}
 8000886:	b091      	sub	sp, #68	; 0x44
 8000888:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800088a:	2410      	movs	r4, #16
 800088c:	193b      	adds	r3, r7, r4
 800088e:	0018      	movs	r0, r3
 8000890:	2330      	movs	r3, #48	; 0x30
 8000892:	001a      	movs	r2, r3
 8000894:	2100      	movs	r1, #0
 8000896:	f006 fae9 	bl	8006e6c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800089a:	003b      	movs	r3, r7
 800089c:	0018      	movs	r0, r3
 800089e:	2310      	movs	r3, #16
 80008a0:	001a      	movs	r2, r3
 80008a2:	2100      	movs	r1, #0
 80008a4:	f006 fae2 	bl	8006e6c <memset>

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI14|RCC_OSCILLATORTYPE_LSI
 80008a8:	0021      	movs	r1, r4
 80008aa:	187b      	adds	r3, r7, r1
 80008ac:	2219      	movs	r2, #25
 80008ae:	601a      	str	r2, [r3, #0]
                              |RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80008b0:	187b      	adds	r3, r7, r1
 80008b2:	2201      	movs	r2, #1
 80008b4:	605a      	str	r2, [r3, #4]
  RCC_OscInitStruct.HSI14State = RCC_HSI14_ON;
 80008b6:	187b      	adds	r3, r7, r1
 80008b8:	2201      	movs	r2, #1
 80008ba:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.HSI14CalibrationValue = 16;
 80008bc:	187b      	adds	r3, r7, r1
 80008be:	2210      	movs	r2, #16
 80008c0:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80008c2:	187b      	adds	r3, r7, r1
 80008c4:	2201      	movs	r2, #1
 80008c6:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80008c8:	187b      	adds	r3, r7, r1
 80008ca:	2202      	movs	r2, #2
 80008cc:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80008ce:	187b      	adds	r3, r7, r1
 80008d0:	2280      	movs	r2, #128	; 0x80
 80008d2:	0252      	lsls	r2, r2, #9
 80008d4:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 80008d6:	187b      	adds	r3, r7, r1
 80008d8:	2280      	movs	r2, #128	; 0x80
 80008da:	0352      	lsls	r2, r2, #13
 80008dc:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 80008de:	187b      	adds	r3, r7, r1
 80008e0:	2200      	movs	r2, #0
 80008e2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008e4:	187b      	adds	r3, r7, r1
 80008e6:	0018      	movs	r0, r3
 80008e8:	f002 fe02 	bl	80034f0 <HAL_RCC_OscConfig>
 80008ec:	1e03      	subs	r3, r0, #0
 80008ee:	d001      	beq.n	80008f4 <SystemClock_Config+0x70>
  {
    Error_Handler();
 80008f0:	f000 f83a 	bl	8000968 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008f4:	003b      	movs	r3, r7
 80008f6:	2207      	movs	r2, #7
 80008f8:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80008fa:	003b      	movs	r3, r7
 80008fc:	2202      	movs	r2, #2
 80008fe:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000900:	003b      	movs	r3, r7
 8000902:	2200      	movs	r2, #0
 8000904:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000906:	003b      	movs	r3, r7
 8000908:	2200      	movs	r2, #0
 800090a:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800090c:	003b      	movs	r3, r7
 800090e:	2101      	movs	r1, #1
 8000910:	0018      	movs	r0, r3
 8000912:	f003 fa5b 	bl	8003dcc <HAL_RCC_ClockConfig>
 8000916:	1e03      	subs	r3, r0, #0
 8000918:	d001      	beq.n	800091e <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800091a:	f000 f825 	bl	8000968 <Error_Handler>
  }
}
 800091e:	46c0      	nop			; (mov r8, r8)
 8000920:	46bd      	mov	sp, r7
 8000922:	b011      	add	sp, #68	; 0x44
 8000924:	bd90      	pop	{r4, r7, pc}
	...

08000928 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000928:	b580      	push	{r7, lr}
 800092a:	b082      	sub	sp, #8
 800092c:	af00      	add	r7, sp, #0
 800092e:	0002      	movs	r2, r0
 8000930:	1dbb      	adds	r3, r7, #6
 8000932:	801a      	strh	r2, [r3, #0]
  if(GPIO_Pin==BLOCK_PU_Pin) {
 8000934:	1dbb      	adds	r3, r7, #6
 8000936:	881b      	ldrh	r3, [r3, #0]
 8000938:	2b01      	cmp	r3, #1
 800093a:	d10e      	bne.n	800095a <HAL_GPIO_EXTI_Callback+0x32>
	  	  	  if (HAL_GPIO_ReadPin(BLOCK_PU_GPIO_Port, BLOCK_PU_Pin)==GPIO_PIN_RESET) {
 800093c:	2390      	movs	r3, #144	; 0x90
 800093e:	05db      	lsls	r3, r3, #23
 8000940:	2101      	movs	r1, #1
 8000942:	0018      	movs	r0, r3
 8000944:	f002 fc84 	bl	8003250 <HAL_GPIO_ReadPin>
 8000948:	1e03      	subs	r3, r0, #0
 800094a:	d103      	bne.n	8000954 <HAL_GPIO_EXTI_Callback+0x2c>
	  			  BlockGenerator=0; // Unblock Generator
 800094c:	4b05      	ldr	r3, [pc, #20]	; (8000964 <HAL_GPIO_EXTI_Callback+0x3c>)
 800094e:	2200      	movs	r2, #0
 8000950:	601a      	str	r2, [r3, #0]
	  		  } else {
	  			  BlockGenerator=1; //Block Generator
	  		  }
  }
}
 8000952:	e002      	b.n	800095a <HAL_GPIO_EXTI_Callback+0x32>
	  			  BlockGenerator=1; //Block Generator
 8000954:	4b03      	ldr	r3, [pc, #12]	; (8000964 <HAL_GPIO_EXTI_Callback+0x3c>)
 8000956:	2201      	movs	r2, #1
 8000958:	601a      	str	r2, [r3, #0]
}
 800095a:	46c0      	nop			; (mov r8, r8)
 800095c:	46bd      	mov	sp, r7
 800095e:	b002      	add	sp, #8
 8000960:	bd80      	pop	{r7, pc}
 8000962:	46c0      	nop			; (mov r8, r8)
 8000964:	20000004 	.word	0x20000004

08000968 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000968:	b580      	push	{r7, lr}
 800096a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800096c:	46c0      	nop			; (mov r8, r8)
 800096e:	46bd      	mov	sp, r7
 8000970:	bd80      	pop	{r7, pc}

08000972 <assert_failed>:
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(char *file, uint32_t line)
{ 
 8000972:	b580      	push	{r7, lr}
 8000974:	b082      	sub	sp, #8
 8000976:	af00      	add	r7, sp, #0
 8000978:	6078      	str	r0, [r7, #4]
 800097a:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     tex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
 800097c:	46c0      	nop			; (mov r8, r8)
 800097e:	46bd      	mov	sp, r7
 8000980:	b002      	add	sp, #8
 8000982:	bd80      	pop	{r7, pc}

08000984 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000984:	b580      	push	{r7, lr}
 8000986:	b082      	sub	sp, #8
 8000988:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800098a:	4b0f      	ldr	r3, [pc, #60]	; (80009c8 <HAL_MspInit+0x44>)
 800098c:	699a      	ldr	r2, [r3, #24]
 800098e:	4b0e      	ldr	r3, [pc, #56]	; (80009c8 <HAL_MspInit+0x44>)
 8000990:	2101      	movs	r1, #1
 8000992:	430a      	orrs	r2, r1
 8000994:	619a      	str	r2, [r3, #24]
 8000996:	4b0c      	ldr	r3, [pc, #48]	; (80009c8 <HAL_MspInit+0x44>)
 8000998:	699b      	ldr	r3, [r3, #24]
 800099a:	2201      	movs	r2, #1
 800099c:	4013      	ands	r3, r2
 800099e:	607b      	str	r3, [r7, #4]
 80009a0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009a2:	4b09      	ldr	r3, [pc, #36]	; (80009c8 <HAL_MspInit+0x44>)
 80009a4:	69da      	ldr	r2, [r3, #28]
 80009a6:	4b08      	ldr	r3, [pc, #32]	; (80009c8 <HAL_MspInit+0x44>)
 80009a8:	2180      	movs	r1, #128	; 0x80
 80009aa:	0549      	lsls	r1, r1, #21
 80009ac:	430a      	orrs	r2, r1
 80009ae:	61da      	str	r2, [r3, #28]
 80009b0:	4b05      	ldr	r3, [pc, #20]	; (80009c8 <HAL_MspInit+0x44>)
 80009b2:	69da      	ldr	r2, [r3, #28]
 80009b4:	2380      	movs	r3, #128	; 0x80
 80009b6:	055b      	lsls	r3, r3, #21
 80009b8:	4013      	ands	r3, r2
 80009ba:	603b      	str	r3, [r7, #0]
 80009bc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009be:	46c0      	nop			; (mov r8, r8)
 80009c0:	46bd      	mov	sp, r7
 80009c2:	b002      	add	sp, #8
 80009c4:	bd80      	pop	{r7, pc}
 80009c6:	46c0      	nop			; (mov r8, r8)
 80009c8:	40021000 	.word	0x40021000

080009cc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009cc:	b580      	push	{r7, lr}
 80009ce:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80009d0:	46c0      	nop			; (mov r8, r8)
 80009d2:	46bd      	mov	sp, r7
 80009d4:	bd80      	pop	{r7, pc}

080009d6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009d6:	b580      	push	{r7, lr}
 80009d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009da:	e7fe      	b.n	80009da <HardFault_Handler+0x4>

080009dc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80009dc:	b580      	push	{r7, lr}
 80009de:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80009e0:	46c0      	nop			; (mov r8, r8)
 80009e2:	46bd      	mov	sp, r7
 80009e4:	bd80      	pop	{r7, pc}

080009e6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80009e6:	b580      	push	{r7, lr}
 80009e8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80009ea:	46c0      	nop			; (mov r8, r8)
 80009ec:	46bd      	mov	sp, r7
 80009ee:	bd80      	pop	{r7, pc}

080009f0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80009f0:	b580      	push	{r7, lr}
 80009f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80009f4:	f000 fe90 	bl	8001718 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80009f8:	46c0      	nop			; (mov r8, r8)
 80009fa:	46bd      	mov	sp, r7
 80009fc:	bd80      	pop	{r7, pc}

080009fe <EXTI0_1_IRQHandler>:

/**
  * @brief This function handles EXTI line 0 and 1 interrupts.
  */
void EXTI0_1_IRQHandler(void)
{
 80009fe:	b580      	push	{r7, lr}
 8000a00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_1_IRQn 0 */

  /* USER CODE END EXTI0_1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BLOCK_PU_Pin);
 8000a02:	2001      	movs	r0, #1
 8000a04:	f002 fcb8 	bl	8003378 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_1_IRQn 1 */

  /* USER CODE END EXTI0_1_IRQn 1 */
}
 8000a08:	46c0      	nop			; (mov r8, r8)
 8000a0a:	46bd      	mov	sp, r7
 8000a0c:	bd80      	pop	{r7, pc}
	...

08000a10 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000a10:	b580      	push	{r7, lr}
 8000a12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc);
 8000a14:	4b03      	ldr	r3, [pc, #12]	; (8000a24 <DMA1_Channel1_IRQHandler+0x14>)
 8000a16:	0018      	movs	r0, r3
 8000a18:	f002 f90a 	bl	8002c30 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8000a1c:	46c0      	nop			; (mov r8, r8)
 8000a1e:	46bd      	mov	sp, r7
 8000a20:	bd80      	pop	{r7, pc}
 8000a22:	46c0      	nop			; (mov r8, r8)
 8000a24:	200003f8 	.word	0x200003f8

08000a28 <DMA1_Channel4_5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 4 and 5 interrupts.
  */
void DMA1_Channel4_5_IRQHandler(void)
{
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_5_IRQn 0 */

  /* USER CODE END DMA1_Channel4_5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8000a2c:	4b05      	ldr	r3, [pc, #20]	; (8000a44 <DMA1_Channel4_5_IRQHandler+0x1c>)
 8000a2e:	0018      	movs	r0, r3
 8000a30:	f002 f8fe 	bl	8002c30 <HAL_DMA_IRQHandler>
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8000a34:	4b04      	ldr	r3, [pc, #16]	; (8000a48 <DMA1_Channel4_5_IRQHandler+0x20>)
 8000a36:	0018      	movs	r0, r3
 8000a38:	f002 f8fa 	bl	8002c30 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_5_IRQn 1 */

  /* USER CODE END DMA1_Channel4_5_IRQn 1 */
}
 8000a3c:	46c0      	nop			; (mov r8, r8)
 8000a3e:	46bd      	mov	sp, r7
 8000a40:	bd80      	pop	{r7, pc}
 8000a42:	46c0      	nop			; (mov r8, r8)
 8000a44:	20000594 	.word	0x20000594
 8000a48:	20000550 	.word	0x20000550

08000a4c <TIM1_BRK_UP_TRG_COM_IRQHandler>:

/**
  * @brief This function handles TIM1 break, update, trigger and commutation interrupts.
  */
void TIM1_BRK_UP_TRG_COM_IRQHandler(void)
{
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_UP_TRG_COM_IRQn 0 */

  /* USER CODE END TIM1_BRK_UP_TRG_COM_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000a50:	4b03      	ldr	r3, [pc, #12]	; (8000a60 <TIM1_BRK_UP_TRG_COM_IRQHandler+0x14>)
 8000a52:	0018      	movs	r0, r3
 8000a54:	f004 f810 	bl	8004a78 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_UP_TRG_COM_IRQn 1 */

  /* USER CODE END TIM1_BRK_UP_TRG_COM_IRQn 1 */
}
 8000a58:	46c0      	nop			; (mov r8, r8)
 8000a5a:	46bd      	mov	sp, r7
 8000a5c:	bd80      	pop	{r7, pc}
 8000a5e:	46c0      	nop			; (mov r8, r8)
 8000a60:	200004d0 	.word	0x200004d0

08000a64 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8000a64:	b580      	push	{r7, lr}
 8000a66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000a68:	4b03      	ldr	r3, [pc, #12]	; (8000a78 <TIM1_CC_IRQHandler+0x14>)
 8000a6a:	0018      	movs	r0, r3
 8000a6c:	f004 f804 	bl	8004a78 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8000a70:	46c0      	nop			; (mov r8, r8)
 8000a72:	46bd      	mov	sp, r7
 8000a74:	bd80      	pop	{r7, pc}
 8000a76:	46c0      	nop			; (mov r8, r8)
 8000a78:	200004d0 	.word	0x200004d0

08000a7c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000a80:	4b0d      	ldr	r3, [pc, #52]	; (8000ab8 <TIM2_IRQHandler+0x3c>)
 8000a82:	0018      	movs	r0, r3
 8000a84:	f003 fff8 	bl	8004a78 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */


  	if (BlockGenerator==1) {
 8000a88:	4b0c      	ldr	r3, [pc, #48]	; (8000abc <TIM2_IRQHandler+0x40>)
 8000a8a:	681b      	ldr	r3, [r3, #0]
 8000a8c:	2b01      	cmp	r3, #1
 8000a8e:	d102      	bne.n	8000a96 <TIM2_IRQHandler+0x1a>
  	 Set_DAC_SINUS_ZERO();
 8000a90:	f000 fcf0 	bl	8001474 <Set_DAC_SINUS_ZERO>
  	 return;
 8000a94:	e00e      	b.n	8000ab4 <TIM2_IRQHandler+0x38>
    }

  	HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1,DAC_ALIGN_12B_R,GetSinus());
 8000a96:	f000 fcbd 	bl	8001414 <GetSinus>
 8000a9a:	0003      	movs	r3, r0
 8000a9c:	4808      	ldr	r0, [pc, #32]	; (8000ac0 <TIM2_IRQHandler+0x44>)
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	2100      	movs	r1, #0
 8000aa2:	f001 fde5 	bl	8002670 <HAL_DAC_SetValue>

  	sin_step++;
 8000aa6:	4b07      	ldr	r3, [pc, #28]	; (8000ac4 <TIM2_IRQHandler+0x48>)
 8000aa8:	881b      	ldrh	r3, [r3, #0]
 8000aaa:	b29b      	uxth	r3, r3
 8000aac:	3301      	adds	r3, #1
 8000aae:	b29a      	uxth	r2, r3
 8000ab0:	4b04      	ldr	r3, [pc, #16]	; (8000ac4 <TIM2_IRQHandler+0x48>)
 8000ab2:	801a      	strh	r2, [r3, #0]

  /* USER CODE END TIM2_IRQn 1 */
}
 8000ab4:	46bd      	mov	sp, r7
 8000ab6:	bd80      	pop	{r7, pc}
 8000ab8:	20000510 	.word	0x20000510
 8000abc:	20000004 	.word	0x20000004
 8000ac0:	200004ac 	.word	0x200004ac
 8000ac4:	200003f4 	.word	0x200003f4

08000ac8 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global and DAC underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_DAC_IRQHandler(&hdac1);
 8000acc:	4b03      	ldr	r3, [pc, #12]	; (8000adc <TIM6_DAC_IRQHandler+0x14>)
 8000ace:	0018      	movs	r0, r3
 8000ad0:	f001 ff00 	bl	80028d4 <HAL_DAC_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000ad4:	46c0      	nop			; (mov r8, r8)
 8000ad6:	46bd      	mov	sp, r7
 8000ad8:	bd80      	pop	{r7, pc}
 8000ada:	46c0      	nop			; (mov r8, r8)
 8000adc:	200004ac 	.word	0x200004ac

08000ae0 <SystemInit>:
  *         Initialize the default HSI clock source, vector table location and the PLL configuration is reset.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001U;
 8000ae4:	4b1a      	ldr	r3, [pc, #104]	; (8000b50 <SystemInit+0x70>)
 8000ae6:	681a      	ldr	r2, [r3, #0]
 8000ae8:	4b19      	ldr	r3, [pc, #100]	; (8000b50 <SystemInit+0x70>)
 8000aea:	2101      	movs	r1, #1
 8000aec:	430a      	orrs	r2, r1
 8000aee:	601a      	str	r2, [r3, #0]

#if defined (STM32F051x8) || defined (STM32F058x8)
  /* Reset SW[1:0], HPRE[3:0], PPRE[2:0], ADCPRE and MCOSEL[2:0] bits */
  RCC->CFGR &= (uint32_t)0xF8FFB80CU;
 8000af0:	4b17      	ldr	r3, [pc, #92]	; (8000b50 <SystemInit+0x70>)
 8000af2:	685a      	ldr	r2, [r3, #4]
 8000af4:	4b16      	ldr	r3, [pc, #88]	; (8000b50 <SystemInit+0x70>)
 8000af6:	4917      	ldr	r1, [pc, #92]	; (8000b54 <SystemInit+0x74>)
 8000af8:	400a      	ands	r2, r1
 8000afa:	605a      	str	r2, [r3, #4]
  /* Reset SW[1:0], HPRE[3:0], PPRE[2:0], ADCPRE, MCOSEL[2:0], MCOPRE[2:0] and PLLNODIV bits */
  RCC->CFGR &= (uint32_t)0x08FFB80CU;
#endif /* STM32F051x8 or STM32F058x8 */
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFFU;
 8000afc:	4b14      	ldr	r3, [pc, #80]	; (8000b50 <SystemInit+0x70>)
 8000afe:	681a      	ldr	r2, [r3, #0]
 8000b00:	4b13      	ldr	r3, [pc, #76]	; (8000b50 <SystemInit+0x70>)
 8000b02:	4915      	ldr	r1, [pc, #84]	; (8000b58 <SystemInit+0x78>)
 8000b04:	400a      	ands	r2, r1
 8000b06:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFFU;
 8000b08:	4b11      	ldr	r3, [pc, #68]	; (8000b50 <SystemInit+0x70>)
 8000b0a:	681a      	ldr	r2, [r3, #0]
 8000b0c:	4b10      	ldr	r3, [pc, #64]	; (8000b50 <SystemInit+0x70>)
 8000b0e:	4913      	ldr	r1, [pc, #76]	; (8000b5c <SystemInit+0x7c>)
 8000b10:	400a      	ands	r2, r1
 8000b12:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE and PLLMUL[3:0] bits */
  RCC->CFGR &= (uint32_t)0xFFC0FFFFU;
 8000b14:	4b0e      	ldr	r3, [pc, #56]	; (8000b50 <SystemInit+0x70>)
 8000b16:	685a      	ldr	r2, [r3, #4]
 8000b18:	4b0d      	ldr	r3, [pc, #52]	; (8000b50 <SystemInit+0x70>)
 8000b1a:	4911      	ldr	r1, [pc, #68]	; (8000b60 <SystemInit+0x80>)
 8000b1c:	400a      	ands	r2, r1
 8000b1e:	605a      	str	r2, [r3, #4]

  /* Reset PREDIV[3:0] bits */
  RCC->CFGR2 &= (uint32_t)0xFFFFFFF0U;
 8000b20:	4b0b      	ldr	r3, [pc, #44]	; (8000b50 <SystemInit+0x70>)
 8000b22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000b24:	4b0a      	ldr	r3, [pc, #40]	; (8000b50 <SystemInit+0x70>)
 8000b26:	210f      	movs	r1, #15
 8000b28:	438a      	bics	r2, r1
 8000b2a:	62da      	str	r2, [r3, #44]	; 0x2c
#elif defined (STM32F030x6) || defined (STM32F030x8) || defined (STM32F031x6) || defined (STM32F038xx) || defined (STM32F030xC)
  /* Reset USART1SW[1:0], I2C1SW and ADCSW bits */
  RCC->CFGR3 &= (uint32_t)0xFFFFFEECU;
#elif defined (STM32F051x8) || defined (STM32F058xx)
  /* Reset USART1SW[1:0], I2C1SW, CECSW and ADCSW bits */
  RCC->CFGR3 &= (uint32_t)0xFFFFFEACU;
 8000b2c:	4b08      	ldr	r3, [pc, #32]	; (8000b50 <SystemInit+0x70>)
 8000b2e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000b30:	4b07      	ldr	r3, [pc, #28]	; (8000b50 <SystemInit+0x70>)
 8000b32:	490c      	ldr	r1, [pc, #48]	; (8000b64 <SystemInit+0x84>)
 8000b34:	400a      	ands	r2, r1
 8000b36:	631a      	str	r2, [r3, #48]	; 0x30
#else
 #warning "No target selected"
#endif

  /* Reset HSI14 bit */
  RCC->CR2 &= (uint32_t)0xFFFFFFFEU;
 8000b38:	4b05      	ldr	r3, [pc, #20]	; (8000b50 <SystemInit+0x70>)
 8000b3a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000b3c:	4b04      	ldr	r3, [pc, #16]	; (8000b50 <SystemInit+0x70>)
 8000b3e:	2101      	movs	r1, #1
 8000b40:	438a      	bics	r2, r1
 8000b42:	635a      	str	r2, [r3, #52]	; 0x34

  /* Disable all interrupts */
  RCC->CIR = 0x00000000U;
 8000b44:	4b02      	ldr	r3, [pc, #8]	; (8000b50 <SystemInit+0x70>)
 8000b46:	2200      	movs	r2, #0
 8000b48:	609a      	str	r2, [r3, #8]

}
 8000b4a:	46c0      	nop			; (mov r8, r8)
 8000b4c:	46bd      	mov	sp, r7
 8000b4e:	bd80      	pop	{r7, pc}
 8000b50:	40021000 	.word	0x40021000
 8000b54:	f8ffb80c 	.word	0xf8ffb80c
 8000b58:	fef6ffff 	.word	0xfef6ffff
 8000b5c:	fffbffff 	.word	0xfffbffff
 8000b60:	ffc0ffff 	.word	0xffc0ffff
 8000b64:	fffffeac 	.word	0xfffffeac

08000b68 <MX_TIM1_Init>:
TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim2;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	b094      	sub	sp, #80	; 0x50
 8000b6c:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000b6e:	2340      	movs	r3, #64	; 0x40
 8000b70:	18fb      	adds	r3, r7, r3
 8000b72:	0018      	movs	r0, r3
 8000b74:	2310      	movs	r3, #16
 8000b76:	001a      	movs	r2, r3
 8000b78:	2100      	movs	r1, #0
 8000b7a:	f006 f977 	bl	8006e6c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b7e:	2338      	movs	r3, #56	; 0x38
 8000b80:	18fb      	adds	r3, r7, r3
 8000b82:	0018      	movs	r0, r3
 8000b84:	2308      	movs	r3, #8
 8000b86:	001a      	movs	r2, r3
 8000b88:	2100      	movs	r1, #0
 8000b8a:	f006 f96f 	bl	8006e6c <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000b8e:	231c      	movs	r3, #28
 8000b90:	18fb      	adds	r3, r7, r3
 8000b92:	0018      	movs	r0, r3
 8000b94:	231c      	movs	r3, #28
 8000b96:	001a      	movs	r2, r3
 8000b98:	2100      	movs	r1, #0
 8000b9a:	f006 f967 	bl	8006e6c <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000b9e:	003b      	movs	r3, r7
 8000ba0:	0018      	movs	r0, r3
 8000ba2:	231c      	movs	r3, #28
 8000ba4:	001a      	movs	r2, r3
 8000ba6:	2100      	movs	r1, #0
 8000ba8:	f006 f960 	bl	8006e6c <memset>

  htim1.Instance = TIM1;
 8000bac:	4b49      	ldr	r3, [pc, #292]	; (8000cd4 <MX_TIM1_Init+0x16c>)
 8000bae:	4a4a      	ldr	r2, [pc, #296]	; (8000cd8 <MX_TIM1_Init+0x170>)
 8000bb0:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 480;
 8000bb2:	4b48      	ldr	r3, [pc, #288]	; (8000cd4 <MX_TIM1_Init+0x16c>)
 8000bb4:	22f0      	movs	r2, #240	; 0xf0
 8000bb6:	0052      	lsls	r2, r2, #1
 8000bb8:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000bba:	4b46      	ldr	r3, [pc, #280]	; (8000cd4 <MX_TIM1_Init+0x16c>)
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000;
 8000bc0:	4b44      	ldr	r3, [pc, #272]	; (8000cd4 <MX_TIM1_Init+0x16c>)
 8000bc2:	22fa      	movs	r2, #250	; 0xfa
 8000bc4:	0092      	lsls	r2, r2, #2
 8000bc6:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000bc8:	4b42      	ldr	r3, [pc, #264]	; (8000cd4 <MX_TIM1_Init+0x16c>)
 8000bca:	2200      	movs	r2, #0
 8000bcc:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000bce:	4b41      	ldr	r3, [pc, #260]	; (8000cd4 <MX_TIM1_Init+0x16c>)
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000bd4:	4b3f      	ldr	r3, [pc, #252]	; (8000cd4 <MX_TIM1_Init+0x16c>)
 8000bd6:	2280      	movs	r2, #128	; 0x80
 8000bd8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000bda:	4b3e      	ldr	r3, [pc, #248]	; (8000cd4 <MX_TIM1_Init+0x16c>)
 8000bdc:	0018      	movs	r0, r3
 8000bde:	f003 faf5 	bl	80041cc <HAL_TIM_Base_Init>
 8000be2:	1e03      	subs	r3, r0, #0
 8000be4:	d001      	beq.n	8000bea <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 8000be6:	f7ff febf 	bl	8000968 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000bea:	2140      	movs	r1, #64	; 0x40
 8000bec:	187b      	adds	r3, r7, r1
 8000bee:	2280      	movs	r2, #128	; 0x80
 8000bf0:	0152      	lsls	r2, r2, #5
 8000bf2:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000bf4:	187a      	adds	r2, r7, r1
 8000bf6:	4b37      	ldr	r3, [pc, #220]	; (8000cd4 <MX_TIM1_Init+0x16c>)
 8000bf8:	0011      	movs	r1, r2
 8000bfa:	0018      	movs	r0, r3
 8000bfc:	f004 f970 	bl	8004ee0 <HAL_TIM_ConfigClockSource>
 8000c00:	1e03      	subs	r3, r0, #0
 8000c02:	d001      	beq.n	8000c08 <MX_TIM1_Init+0xa0>
  {
    Error_Handler();
 8000c04:	f7ff feb0 	bl	8000968 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim1) != HAL_OK)
 8000c08:	4b32      	ldr	r3, [pc, #200]	; (8000cd4 <MX_TIM1_Init+0x16c>)
 8000c0a:	0018      	movs	r0, r3
 8000c0c:	f003 fd0c 	bl	8004628 <HAL_TIM_OC_Init>
 8000c10:	1e03      	subs	r3, r0, #0
 8000c12:	d001      	beq.n	8000c18 <MX_TIM1_Init+0xb0>
  {
    Error_Handler();
 8000c14:	f7ff fea8 	bl	8000968 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c18:	2138      	movs	r1, #56	; 0x38
 8000c1a:	187b      	adds	r3, r7, r1
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c20:	187b      	adds	r3, r7, r1
 8000c22:	2200      	movs	r2, #0
 8000c24:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000c26:	187a      	adds	r2, r7, r1
 8000c28:	4b2a      	ldr	r3, [pc, #168]	; (8000cd4 <MX_TIM1_Init+0x16c>)
 8000c2a:	0011      	movs	r1, r2
 8000c2c:	0018      	movs	r0, r3
 8000c2e:	f005 fa23 	bl	8006078 <HAL_TIMEx_MasterConfigSynchronization>
 8000c32:	1e03      	subs	r3, r0, #0
 8000c34:	d001      	beq.n	8000c3a <MX_TIM1_Init+0xd2>
  {
    Error_Handler();
 8000c36:	f7ff fe97 	bl	8000968 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TOGGLE;
 8000c3a:	211c      	movs	r1, #28
 8000c3c:	187b      	adds	r3, r7, r1
 8000c3e:	2230      	movs	r2, #48	; 0x30
 8000c40:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 500;
 8000c42:	187b      	adds	r3, r7, r1
 8000c44:	22fa      	movs	r2, #250	; 0xfa
 8000c46:	0052      	lsls	r2, r2, #1
 8000c48:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000c4a:	187b      	adds	r3, r7, r1
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000c50:	187b      	adds	r3, r7, r1
 8000c52:	2200      	movs	r2, #0
 8000c54:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000c56:	187b      	adds	r3, r7, r1
 8000c58:	2200      	movs	r2, #0
 8000c5a:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000c5c:	187b      	adds	r3, r7, r1
 8000c5e:	2200      	movs	r2, #0
 8000c60:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000c62:	187b      	adds	r3, r7, r1
 8000c64:	2200      	movs	r2, #0
 8000c66:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000c68:	1879      	adds	r1, r7, r1
 8000c6a:	4b1a      	ldr	r3, [pc, #104]	; (8000cd4 <MX_TIM1_Init+0x16c>)
 8000c6c:	2208      	movs	r2, #8
 8000c6e:	0018      	movs	r0, r3
 8000c70:	f004 f818 	bl	8004ca4 <HAL_TIM_OC_ConfigChannel>
 8000c74:	1e03      	subs	r3, r0, #0
 8000c76:	d001      	beq.n	8000c7c <MX_TIM1_Init+0x114>
  {
    Error_Handler();
 8000c78:	f7ff fe76 	bl	8000968 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000c7c:	003b      	movs	r3, r7
 8000c7e:	2200      	movs	r2, #0
 8000c80:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000c82:	003b      	movs	r3, r7
 8000c84:	2200      	movs	r2, #0
 8000c86:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000c88:	003b      	movs	r3, r7
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	609a      	str	r2, [r3, #8]
  //sBreakDeadTimeConfig.DeadTime = 200;
  sBreakDeadTimeConfig.DeadTime = SetDeadTime();
 8000c8e:	f000 fa0b 	bl	80010a8 <SetDeadTime>
 8000c92:	0003      	movs	r3, r0
 8000c94:	001a      	movs	r2, r3
 8000c96:	003b      	movs	r3, r7
 8000c98:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000c9a:	003b      	movs	r3, r7
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000ca0:	003b      	movs	r3, r7
 8000ca2:	2280      	movs	r2, #128	; 0x80
 8000ca4:	0192      	lsls	r2, r2, #6
 8000ca6:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000ca8:	003b      	movs	r3, r7
 8000caa:	2200      	movs	r2, #0
 8000cac:	619a      	str	r2, [r3, #24]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000cae:	003a      	movs	r2, r7
 8000cb0:	4b08      	ldr	r3, [pc, #32]	; (8000cd4 <MX_TIM1_Init+0x16c>)
 8000cb2:	0011      	movs	r1, r2
 8000cb4:	0018      	movs	r0, r3
 8000cb6:	f005 fa87 	bl	80061c8 <HAL_TIMEx_ConfigBreakDeadTime>
 8000cba:	1e03      	subs	r3, r0, #0
 8000cbc:	d001      	beq.n	8000cc2 <MX_TIM1_Init+0x15a>
  {
    Error_Handler();
 8000cbe:	f7ff fe53 	bl	8000968 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim1);
 8000cc2:	4b04      	ldr	r3, [pc, #16]	; (8000cd4 <MX_TIM1_Init+0x16c>)
 8000cc4:	0018      	movs	r0, r3
 8000cc6:	f000 f8a7 	bl	8000e18 <HAL_TIM_MspPostInit>

}
 8000cca:	46c0      	nop			; (mov r8, r8)
 8000ccc:	46bd      	mov	sp, r7
 8000cce:	b014      	add	sp, #80	; 0x50
 8000cd0:	bd80      	pop	{r7, pc}
 8000cd2:	46c0      	nop			; (mov r8, r8)
 8000cd4:	200004d0 	.word	0x200004d0
 8000cd8:	40012c00 	.word	0x40012c00

08000cdc <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	b086      	sub	sp, #24
 8000ce0:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000ce2:	2308      	movs	r3, #8
 8000ce4:	18fb      	adds	r3, r7, r3
 8000ce6:	0018      	movs	r0, r3
 8000ce8:	2310      	movs	r3, #16
 8000cea:	001a      	movs	r2, r3
 8000cec:	2100      	movs	r1, #0
 8000cee:	f006 f8bd 	bl	8006e6c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000cf2:	003b      	movs	r3, r7
 8000cf4:	0018      	movs	r0, r3
 8000cf6:	2308      	movs	r3, #8
 8000cf8:	001a      	movs	r2, r3
 8000cfa:	2100      	movs	r1, #0
 8000cfc:	f006 f8b6 	bl	8006e6c <memset>

  htim2.Instance = TIM2;
 8000d00:	4b1f      	ldr	r3, [pc, #124]	; (8000d80 <MX_TIM2_Init+0xa4>)
 8000d02:	2280      	movs	r2, #128	; 0x80
 8000d04:	05d2      	lsls	r2, r2, #23
 8000d06:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000d08:	4b1d      	ldr	r3, [pc, #116]	; (8000d80 <MX_TIM2_Init+0xa4>)
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d0e:	4b1c      	ldr	r3, [pc, #112]	; (8000d80 <MX_TIM2_Init+0xa4>)
 8000d10:	2200      	movs	r2, #0
 8000d12:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000;
 8000d14:	4b1a      	ldr	r3, [pc, #104]	; (8000d80 <MX_TIM2_Init+0xa4>)
 8000d16:	22fa      	movs	r2, #250	; 0xfa
 8000d18:	0092      	lsls	r2, r2, #2
 8000d1a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d1c:	4b18      	ldr	r3, [pc, #96]	; (8000d80 <MX_TIM2_Init+0xa4>)
 8000d1e:	2200      	movs	r2, #0
 8000d20:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000d22:	4b17      	ldr	r3, [pc, #92]	; (8000d80 <MX_TIM2_Init+0xa4>)
 8000d24:	2280      	movs	r2, #128	; 0x80
 8000d26:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000d28:	4b15      	ldr	r3, [pc, #84]	; (8000d80 <MX_TIM2_Init+0xa4>)
 8000d2a:	0018      	movs	r0, r3
 8000d2c:	f003 fa4e 	bl	80041cc <HAL_TIM_Base_Init>
 8000d30:	1e03      	subs	r3, r0, #0
 8000d32:	d001      	beq.n	8000d38 <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 8000d34:	f7ff fe18 	bl	8000968 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000d38:	2108      	movs	r1, #8
 8000d3a:	187b      	adds	r3, r7, r1
 8000d3c:	2280      	movs	r2, #128	; 0x80
 8000d3e:	0152      	lsls	r2, r2, #5
 8000d40:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000d42:	187a      	adds	r2, r7, r1
 8000d44:	4b0e      	ldr	r3, [pc, #56]	; (8000d80 <MX_TIM2_Init+0xa4>)
 8000d46:	0011      	movs	r1, r2
 8000d48:	0018      	movs	r0, r3
 8000d4a:	f004 f8c9 	bl	8004ee0 <HAL_TIM_ConfigClockSource>
 8000d4e:	1e03      	subs	r3, r0, #0
 8000d50:	d001      	beq.n	8000d56 <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 8000d52:	f7ff fe09 	bl	8000968 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000d56:	003b      	movs	r3, r7
 8000d58:	2220      	movs	r2, #32
 8000d5a:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d5c:	003b      	movs	r3, r7
 8000d5e:	2200      	movs	r2, #0
 8000d60:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000d62:	003a      	movs	r2, r7
 8000d64:	4b06      	ldr	r3, [pc, #24]	; (8000d80 <MX_TIM2_Init+0xa4>)
 8000d66:	0011      	movs	r1, r2
 8000d68:	0018      	movs	r0, r3
 8000d6a:	f005 f985 	bl	8006078 <HAL_TIMEx_MasterConfigSynchronization>
 8000d6e:	1e03      	subs	r3, r0, #0
 8000d70:	d001      	beq.n	8000d76 <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8000d72:	f7ff fdf9 	bl	8000968 <Error_Handler>
  }

}
 8000d76:	46c0      	nop			; (mov r8, r8)
 8000d78:	46bd      	mov	sp, r7
 8000d7a:	b006      	add	sp, #24
 8000d7c:	bd80      	pop	{r7, pc}
 8000d7e:	46c0      	nop			; (mov r8, r8)
 8000d80:	20000510 	.word	0x20000510

08000d84 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000d84:	b580      	push	{r7, lr}
 8000d86:	b084      	sub	sp, #16
 8000d88:	af00      	add	r7, sp, #0
 8000d8a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	681b      	ldr	r3, [r3, #0]
 8000d90:	4a1f      	ldr	r2, [pc, #124]	; (8000e10 <HAL_TIM_Base_MspInit+0x8c>)
 8000d92:	4293      	cmp	r3, r2
 8000d94:	d11e      	bne.n	8000dd4 <HAL_TIM_Base_MspInit+0x50>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000d96:	4b1f      	ldr	r3, [pc, #124]	; (8000e14 <HAL_TIM_Base_MspInit+0x90>)
 8000d98:	699a      	ldr	r2, [r3, #24]
 8000d9a:	4b1e      	ldr	r3, [pc, #120]	; (8000e14 <HAL_TIM_Base_MspInit+0x90>)
 8000d9c:	2180      	movs	r1, #128	; 0x80
 8000d9e:	0109      	lsls	r1, r1, #4
 8000da0:	430a      	orrs	r2, r1
 8000da2:	619a      	str	r2, [r3, #24]
 8000da4:	4b1b      	ldr	r3, [pc, #108]	; (8000e14 <HAL_TIM_Base_MspInit+0x90>)
 8000da6:	699a      	ldr	r2, [r3, #24]
 8000da8:	2380      	movs	r3, #128	; 0x80
 8000daa:	011b      	lsls	r3, r3, #4
 8000dac:	4013      	ands	r3, r2
 8000dae:	60fb      	str	r3, [r7, #12]
 8000db0:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_UP_TRG_COM_IRQn, 0, 0);
 8000db2:	2200      	movs	r2, #0
 8000db4:	2100      	movs	r1, #0
 8000db6:	200d      	movs	r0, #13
 8000db8:	f001 fb34 	bl	8002424 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_UP_TRG_COM_IRQn);
 8000dbc:	200d      	movs	r0, #13
 8000dbe:	f001 fb51 	bl	8002464 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	2100      	movs	r1, #0
 8000dc6:	200e      	movs	r0, #14
 8000dc8:	f001 fb2c 	bl	8002424 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8000dcc:	200e      	movs	r0, #14
 8000dce:	f001 fb49 	bl	8002464 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8000dd2:	e019      	b.n	8000e08 <HAL_TIM_Base_MspInit+0x84>
  else if(tim_baseHandle->Instance==TIM2)
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	681a      	ldr	r2, [r3, #0]
 8000dd8:	2380      	movs	r3, #128	; 0x80
 8000dda:	05db      	lsls	r3, r3, #23
 8000ddc:	429a      	cmp	r2, r3
 8000dde:	d113      	bne.n	8000e08 <HAL_TIM_Base_MspInit+0x84>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000de0:	4b0c      	ldr	r3, [pc, #48]	; (8000e14 <HAL_TIM_Base_MspInit+0x90>)
 8000de2:	69da      	ldr	r2, [r3, #28]
 8000de4:	4b0b      	ldr	r3, [pc, #44]	; (8000e14 <HAL_TIM_Base_MspInit+0x90>)
 8000de6:	2101      	movs	r1, #1
 8000de8:	430a      	orrs	r2, r1
 8000dea:	61da      	str	r2, [r3, #28]
 8000dec:	4b09      	ldr	r3, [pc, #36]	; (8000e14 <HAL_TIM_Base_MspInit+0x90>)
 8000dee:	69db      	ldr	r3, [r3, #28]
 8000df0:	2201      	movs	r2, #1
 8000df2:	4013      	ands	r3, r2
 8000df4:	60bb      	str	r3, [r7, #8]
 8000df6:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000df8:	2200      	movs	r2, #0
 8000dfa:	2100      	movs	r1, #0
 8000dfc:	200f      	movs	r0, #15
 8000dfe:	f001 fb11 	bl	8002424 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000e02:	200f      	movs	r0, #15
 8000e04:	f001 fb2e 	bl	8002464 <HAL_NVIC_EnableIRQ>
}
 8000e08:	46c0      	nop			; (mov r8, r8)
 8000e0a:	46bd      	mov	sp, r7
 8000e0c:	b004      	add	sp, #16
 8000e0e:	bd80      	pop	{r7, pc}
 8000e10:	40012c00 	.word	0x40012c00
 8000e14:	40021000 	.word	0x40021000

08000e18 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8000e18:	b590      	push	{r4, r7, lr}
 8000e1a:	b08b      	sub	sp, #44	; 0x2c
 8000e1c:	af00      	add	r7, sp, #0
 8000e1e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e20:	2314      	movs	r3, #20
 8000e22:	18fb      	adds	r3, r7, r3
 8000e24:	0018      	movs	r0, r3
 8000e26:	2314      	movs	r3, #20
 8000e28:	001a      	movs	r2, r3
 8000e2a:	2100      	movs	r1, #0
 8000e2c:	f006 f81e 	bl	8006e6c <memset>
  if(timHandle->Instance==TIM1)
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	681b      	ldr	r3, [r3, #0]
 8000e34:	4a29      	ldr	r2, [pc, #164]	; (8000edc <HAL_TIM_MspPostInit+0xc4>)
 8000e36:	4293      	cmp	r3, r2
 8000e38:	d14b      	bne.n	8000ed2 <HAL_TIM_MspPostInit+0xba>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e3a:	4b29      	ldr	r3, [pc, #164]	; (8000ee0 <HAL_TIM_MspPostInit+0xc8>)
 8000e3c:	695a      	ldr	r2, [r3, #20]
 8000e3e:	4b28      	ldr	r3, [pc, #160]	; (8000ee0 <HAL_TIM_MspPostInit+0xc8>)
 8000e40:	2180      	movs	r1, #128	; 0x80
 8000e42:	0289      	lsls	r1, r1, #10
 8000e44:	430a      	orrs	r2, r1
 8000e46:	615a      	str	r2, [r3, #20]
 8000e48:	4b25      	ldr	r3, [pc, #148]	; (8000ee0 <HAL_TIM_MspPostInit+0xc8>)
 8000e4a:	695a      	ldr	r2, [r3, #20]
 8000e4c:	2380      	movs	r3, #128	; 0x80
 8000e4e:	029b      	lsls	r3, r3, #10
 8000e50:	4013      	ands	r3, r2
 8000e52:	613b      	str	r3, [r7, #16]
 8000e54:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e56:	4b22      	ldr	r3, [pc, #136]	; (8000ee0 <HAL_TIM_MspPostInit+0xc8>)
 8000e58:	695a      	ldr	r2, [r3, #20]
 8000e5a:	4b21      	ldr	r3, [pc, #132]	; (8000ee0 <HAL_TIM_MspPostInit+0xc8>)
 8000e5c:	2180      	movs	r1, #128	; 0x80
 8000e5e:	02c9      	lsls	r1, r1, #11
 8000e60:	430a      	orrs	r2, r1
 8000e62:	615a      	str	r2, [r3, #20]
 8000e64:	4b1e      	ldr	r3, [pc, #120]	; (8000ee0 <HAL_TIM_MspPostInit+0xc8>)
 8000e66:	695a      	ldr	r2, [r3, #20]
 8000e68:	2380      	movs	r3, #128	; 0x80
 8000e6a:	02db      	lsls	r3, r3, #11
 8000e6c:	4013      	ands	r3, r2
 8000e6e:	60fb      	str	r3, [r7, #12]
 8000e70:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration    
    PA10     ------> TIM1_CH3
    PB15     ------> TIM1_CH3N 
    */
    GPIO_InitStruct.Pin = CH1_Pin;
 8000e72:	2114      	movs	r1, #20
 8000e74:	187b      	adds	r3, r7, r1
 8000e76:	2280      	movs	r2, #128	; 0x80
 8000e78:	00d2      	lsls	r2, r2, #3
 8000e7a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e7c:	187b      	adds	r3, r7, r1
 8000e7e:	2202      	movs	r2, #2
 8000e80:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000e82:	187b      	adds	r3, r7, r1
 8000e84:	2202      	movs	r2, #2
 8000e86:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000e88:	187b      	adds	r3, r7, r1
 8000e8a:	2203      	movs	r2, #3
 8000e8c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8000e8e:	187b      	adds	r3, r7, r1
 8000e90:	2202      	movs	r2, #2
 8000e92:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(CH1_GPIO_Port, &GPIO_InitStruct);
 8000e94:	000c      	movs	r4, r1
 8000e96:	187a      	adds	r2, r7, r1
 8000e98:	2390      	movs	r3, #144	; 0x90
 8000e9a:	05db      	lsls	r3, r3, #23
 8000e9c:	0011      	movs	r1, r2
 8000e9e:	0018      	movs	r0, r3
 8000ea0:	f001 ffb0 	bl	8002e04 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = CH2_Pin;
 8000ea4:	0021      	movs	r1, r4
 8000ea6:	187b      	adds	r3, r7, r1
 8000ea8:	2280      	movs	r2, #128	; 0x80
 8000eaa:	0212      	lsls	r2, r2, #8
 8000eac:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000eae:	187b      	adds	r3, r7, r1
 8000eb0:	2202      	movs	r2, #2
 8000eb2:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000eb4:	187b      	adds	r3, r7, r1
 8000eb6:	2202      	movs	r2, #2
 8000eb8:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000eba:	187b      	adds	r3, r7, r1
 8000ebc:	2203      	movs	r2, #3
 8000ebe:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8000ec0:	187b      	adds	r3, r7, r1
 8000ec2:	2202      	movs	r2, #2
 8000ec4:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(CH2_GPIO_Port, &GPIO_InitStruct);
 8000ec6:	187b      	adds	r3, r7, r1
 8000ec8:	4a06      	ldr	r2, [pc, #24]	; (8000ee4 <HAL_TIM_MspPostInit+0xcc>)
 8000eca:	0019      	movs	r1, r3
 8000ecc:	0010      	movs	r0, r2
 8000ece:	f001 ff99 	bl	8002e04 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8000ed2:	46c0      	nop			; (mov r8, r8)
 8000ed4:	46bd      	mov	sp, r7
 8000ed6:	b00b      	add	sp, #44	; 0x2c
 8000ed8:	bd90      	pop	{r4, r7, pc}
 8000eda:	46c0      	nop			; (mov r8, r8)
 8000edc:	40012c00 	.word	0x40012c00
 8000ee0:	40021000 	.word	0x40021000
 8000ee4:	48000400 	.word	0x48000400

08000ee8 <MX_USART2_UART_Init>:
DMA_HandleTypeDef hdma_usart2_tx;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 8000eec:	4b14      	ldr	r3, [pc, #80]	; (8000f40 <MX_USART2_UART_Init+0x58>)
 8000eee:	4a15      	ldr	r2, [pc, #84]	; (8000f44 <MX_USART2_UART_Init+0x5c>)
 8000ef0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000ef2:	4b13      	ldr	r3, [pc, #76]	; (8000f40 <MX_USART2_UART_Init+0x58>)
 8000ef4:	22e1      	movs	r2, #225	; 0xe1
 8000ef6:	0252      	lsls	r2, r2, #9
 8000ef8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000efa:	4b11      	ldr	r3, [pc, #68]	; (8000f40 <MX_USART2_UART_Init+0x58>)
 8000efc:	2200      	movs	r2, #0
 8000efe:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000f00:	4b0f      	ldr	r3, [pc, #60]	; (8000f40 <MX_USART2_UART_Init+0x58>)
 8000f02:	2200      	movs	r2, #0
 8000f04:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000f06:	4b0e      	ldr	r3, [pc, #56]	; (8000f40 <MX_USART2_UART_Init+0x58>)
 8000f08:	2200      	movs	r2, #0
 8000f0a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000f0c:	4b0c      	ldr	r3, [pc, #48]	; (8000f40 <MX_USART2_UART_Init+0x58>)
 8000f0e:	220c      	movs	r2, #12
 8000f10:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f12:	4b0b      	ldr	r3, [pc, #44]	; (8000f40 <MX_USART2_UART_Init+0x58>)
 8000f14:	2200      	movs	r2, #0
 8000f16:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f18:	4b09      	ldr	r3, [pc, #36]	; (8000f40 <MX_USART2_UART_Init+0x58>)
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000f1e:	4b08      	ldr	r3, [pc, #32]	; (8000f40 <MX_USART2_UART_Init+0x58>)
 8000f20:	2200      	movs	r2, #0
 8000f22:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000f24:	4b06      	ldr	r3, [pc, #24]	; (8000f40 <MX_USART2_UART_Init+0x58>)
 8000f26:	2200      	movs	r2, #0
 8000f28:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000f2a:	4b05      	ldr	r3, [pc, #20]	; (8000f40 <MX_USART2_UART_Init+0x58>)
 8000f2c:	0018      	movs	r0, r3
 8000f2e:	f005 fa95 	bl	800645c <HAL_UART_Init>
 8000f32:	1e03      	subs	r3, r0, #0
 8000f34:	d001      	beq.n	8000f3a <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000f36:	f7ff fd17 	bl	8000968 <Error_Handler>
  }

}
 8000f3a:	46c0      	nop			; (mov r8, r8)
 8000f3c:	46bd      	mov	sp, r7
 8000f3e:	bd80      	pop	{r7, pc}
 8000f40:	200005d8 	.word	0x200005d8
 8000f44:	40004400 	.word	0x40004400

08000f48 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	b08a      	sub	sp, #40	; 0x28
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f50:	2314      	movs	r3, #20
 8000f52:	18fb      	adds	r3, r7, r3
 8000f54:	0018      	movs	r0, r3
 8000f56:	2314      	movs	r3, #20
 8000f58:	001a      	movs	r2, r3
 8000f5a:	2100      	movs	r1, #0
 8000f5c:	f005 ff86 	bl	8006e6c <memset>
  if(uartHandle->Instance==USART2)
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	4a43      	ldr	r2, [pc, #268]	; (8001074 <HAL_UART_MspInit+0x12c>)
 8000f66:	4293      	cmp	r3, r2
 8000f68:	d000      	beq.n	8000f6c <HAL_UART_MspInit+0x24>
 8000f6a:	e07e      	b.n	800106a <HAL_UART_MspInit+0x122>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000f6c:	4b42      	ldr	r3, [pc, #264]	; (8001078 <HAL_UART_MspInit+0x130>)
 8000f6e:	69da      	ldr	r2, [r3, #28]
 8000f70:	4b41      	ldr	r3, [pc, #260]	; (8001078 <HAL_UART_MspInit+0x130>)
 8000f72:	2180      	movs	r1, #128	; 0x80
 8000f74:	0289      	lsls	r1, r1, #10
 8000f76:	430a      	orrs	r2, r1
 8000f78:	61da      	str	r2, [r3, #28]
 8000f7a:	4b3f      	ldr	r3, [pc, #252]	; (8001078 <HAL_UART_MspInit+0x130>)
 8000f7c:	69da      	ldr	r2, [r3, #28]
 8000f7e:	2380      	movs	r3, #128	; 0x80
 8000f80:	029b      	lsls	r3, r3, #10
 8000f82:	4013      	ands	r3, r2
 8000f84:	613b      	str	r3, [r7, #16]
 8000f86:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f88:	4b3b      	ldr	r3, [pc, #236]	; (8001078 <HAL_UART_MspInit+0x130>)
 8000f8a:	695a      	ldr	r2, [r3, #20]
 8000f8c:	4b3a      	ldr	r3, [pc, #232]	; (8001078 <HAL_UART_MspInit+0x130>)
 8000f8e:	2180      	movs	r1, #128	; 0x80
 8000f90:	0289      	lsls	r1, r1, #10
 8000f92:	430a      	orrs	r2, r1
 8000f94:	615a      	str	r2, [r3, #20]
 8000f96:	4b38      	ldr	r3, [pc, #224]	; (8001078 <HAL_UART_MspInit+0x130>)
 8000f98:	695a      	ldr	r2, [r3, #20]
 8000f9a:	2380      	movs	r3, #128	; 0x80
 8000f9c:	029b      	lsls	r3, r3, #10
 8000f9e:	4013      	ands	r3, r2
 8000fa0:	60fb      	str	r3, [r7, #12]
 8000fa2:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration    
    PA15     ------> USART2_RX
    PA2     ------> USART2_TX 
    */
    GPIO_InitStruct.Pin = RX1_Pin|TX1_Pin;
 8000fa4:	2114      	movs	r1, #20
 8000fa6:	187b      	adds	r3, r7, r1
 8000fa8:	4a34      	ldr	r2, [pc, #208]	; (800107c <HAL_UART_MspInit+0x134>)
 8000faa:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fac:	187b      	adds	r3, r7, r1
 8000fae:	2202      	movs	r2, #2
 8000fb0:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fb2:	187b      	adds	r3, r7, r1
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000fb8:	187b      	adds	r3, r7, r1
 8000fba:	2203      	movs	r2, #3
 8000fbc:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8000fbe:	187b      	adds	r3, r7, r1
 8000fc0:	2201      	movs	r2, #1
 8000fc2:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fc4:	187a      	adds	r2, r7, r1
 8000fc6:	2390      	movs	r3, #144	; 0x90
 8000fc8:	05db      	lsls	r3, r3, #23
 8000fca:	0011      	movs	r1, r2
 8000fcc:	0018      	movs	r0, r3
 8000fce:	f001 ff19 	bl	8002e04 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Channel5;
 8000fd2:	4b2b      	ldr	r3, [pc, #172]	; (8001080 <HAL_UART_MspInit+0x138>)
 8000fd4:	4a2b      	ldr	r2, [pc, #172]	; (8001084 <HAL_UART_MspInit+0x13c>)
 8000fd6:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000fd8:	4b29      	ldr	r3, [pc, #164]	; (8001080 <HAL_UART_MspInit+0x138>)
 8000fda:	2200      	movs	r2, #0
 8000fdc:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000fde:	4b28      	ldr	r3, [pc, #160]	; (8001080 <HAL_UART_MspInit+0x138>)
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000fe4:	4b26      	ldr	r3, [pc, #152]	; (8001080 <HAL_UART_MspInit+0x138>)
 8000fe6:	2280      	movs	r2, #128	; 0x80
 8000fe8:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000fea:	4b25      	ldr	r3, [pc, #148]	; (8001080 <HAL_UART_MspInit+0x138>)
 8000fec:	2200      	movs	r2, #0
 8000fee:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000ff0:	4b23      	ldr	r3, [pc, #140]	; (8001080 <HAL_UART_MspInit+0x138>)
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 8000ff6:	4b22      	ldr	r3, [pc, #136]	; (8001080 <HAL_UART_MspInit+0x138>)
 8000ff8:	2220      	movs	r2, #32
 8000ffa:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000ffc:	4b20      	ldr	r3, [pc, #128]	; (8001080 <HAL_UART_MspInit+0x138>)
 8000ffe:	2200      	movs	r2, #0
 8001000:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8001002:	4b1f      	ldr	r3, [pc, #124]	; (8001080 <HAL_UART_MspInit+0x138>)
 8001004:	0018      	movs	r0, r3
 8001006:	f001 fc9d 	bl	8002944 <HAL_DMA_Init>
 800100a:	1e03      	subs	r3, r0, #0
 800100c:	d001      	beq.n	8001012 <HAL_UART_MspInit+0xca>
    {
      Error_Handler();
 800100e:	f7ff fcab 	bl	8000968 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	4a1a      	ldr	r2, [pc, #104]	; (8001080 <HAL_UART_MspInit+0x138>)
 8001016:	665a      	str	r2, [r3, #100]	; 0x64
 8001018:	4b19      	ldr	r3, [pc, #100]	; (8001080 <HAL_UART_MspInit+0x138>)
 800101a:	687a      	ldr	r2, [r7, #4]
 800101c:	625a      	str	r2, [r3, #36]	; 0x24

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Channel4;
 800101e:	4b1a      	ldr	r3, [pc, #104]	; (8001088 <HAL_UART_MspInit+0x140>)
 8001020:	4a1a      	ldr	r2, [pc, #104]	; (800108c <HAL_UART_MspInit+0x144>)
 8001022:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001024:	4b18      	ldr	r3, [pc, #96]	; (8001088 <HAL_UART_MspInit+0x140>)
 8001026:	2210      	movs	r2, #16
 8001028:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800102a:	4b17      	ldr	r3, [pc, #92]	; (8001088 <HAL_UART_MspInit+0x140>)
 800102c:	2200      	movs	r2, #0
 800102e:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001030:	4b15      	ldr	r3, [pc, #84]	; (8001088 <HAL_UART_MspInit+0x140>)
 8001032:	2280      	movs	r2, #128	; 0x80
 8001034:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001036:	4b14      	ldr	r3, [pc, #80]	; (8001088 <HAL_UART_MspInit+0x140>)
 8001038:	2200      	movs	r2, #0
 800103a:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800103c:	4b12      	ldr	r3, [pc, #72]	; (8001088 <HAL_UART_MspInit+0x140>)
 800103e:	2200      	movs	r2, #0
 8001040:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.Mode = DMA_CIRCULAR;
 8001042:	4b11      	ldr	r3, [pc, #68]	; (8001088 <HAL_UART_MspInit+0x140>)
 8001044:	2220      	movs	r2, #32
 8001046:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001048:	4b0f      	ldr	r3, [pc, #60]	; (8001088 <HAL_UART_MspInit+0x140>)
 800104a:	2200      	movs	r2, #0
 800104c:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 800104e:	4b0e      	ldr	r3, [pc, #56]	; (8001088 <HAL_UART_MspInit+0x140>)
 8001050:	0018      	movs	r0, r3
 8001052:	f001 fc77 	bl	8002944 <HAL_DMA_Init>
 8001056:	1e03      	subs	r3, r0, #0
 8001058:	d001      	beq.n	800105e <HAL_UART_MspInit+0x116>
    {
      Error_Handler();
 800105a:	f7ff fc85 	bl	8000968 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	4a09      	ldr	r2, [pc, #36]	; (8001088 <HAL_UART_MspInit+0x140>)
 8001062:	661a      	str	r2, [r3, #96]	; 0x60
 8001064:	4b08      	ldr	r3, [pc, #32]	; (8001088 <HAL_UART_MspInit+0x140>)
 8001066:	687a      	ldr	r2, [r7, #4]
 8001068:	625a      	str	r2, [r3, #36]	; 0x24

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 800106a:	46c0      	nop			; (mov r8, r8)
 800106c:	46bd      	mov	sp, r7
 800106e:	b00a      	add	sp, #40	; 0x28
 8001070:	bd80      	pop	{r7, pc}
 8001072:	46c0      	nop			; (mov r8, r8)
 8001074:	40004400 	.word	0x40004400
 8001078:	40021000 	.word	0x40021000
 800107c:	00008004 	.word	0x00008004
 8001080:	20000550 	.word	0x20000550
 8001084:	40020058 	.word	0x40020058
 8001088:	20000594 	.word	0x20000594
 800108c:	40020044 	.word	0x40020044

08001090 <Set50Hz>:
//#define DeadTime16X 				1 //332,8ns
//#define DeadTime32X 				1 //665,6ns
//#define DeadTime64X 				1 //1331,2ns
//#define DeadTime128X 				1 //2662,4ns

void Set50Hz() {
 8001090:	b580      	push	{r7, lr}
 8001092:	af00      	add	r7, sp, #0
	TIM1->PSC=479-1;
 8001094:	4b03      	ldr	r3, [pc, #12]	; (80010a4 <Set50Hz+0x14>)
 8001096:	22ef      	movs	r2, #239	; 0xef
 8001098:	0052      	lsls	r2, r2, #1
 800109a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800109c:	46c0      	nop			; (mov r8, r8)
 800109e:	46bd      	mov	sp, r7
 80010a0:	bd80      	pop	{r7, pc}
 80010a2:	46c0      	nop			; (mov r8, r8)
 80010a4:	40012c00 	.word	0x40012c00

080010a8 <SetDeadTime>:

void Set505Hz() {
	TIM1->PSC=475-1;
}

uint32_t SetDeadTime() {
 80010a8:	b580      	push	{r7, lr}
 80010aa:	b082      	sub	sp, #8
 80010ac:	af00      	add	r7, sp, #0
	uint32_t _DeadTime=0;
 80010ae:	2300      	movs	r3, #0
 80010b0:	607b      	str	r3, [r7, #4]

	//_DeadTime  |= TIM_BDTR_DTG_7;//128x //2662,4ns
	_DeadTime  |= TIM_BDTR_DTG_6;//64x //1331,2ns
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	2240      	movs	r2, #64	; 0x40
 80010b6:	4313      	orrs	r3, r2
 80010b8:	607b      	str	r3, [r7, #4]
	_DeadTime  |= TIM_BDTR_DTG_5;//32x //665,6ns
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	2220      	movs	r2, #32
 80010be:	4313      	orrs	r3, r2
 80010c0:	607b      	str	r3, [r7, #4]
	_DeadTime  |= TIM_BDTR_DTG_4;//16x //332,8ns
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	2210      	movs	r2, #16
 80010c6:	4313      	orrs	r3, r2
 80010c8:	607b      	str	r3, [r7, #4]
	_DeadTime  |= TIM_BDTR_DTG_3;//8x //166,4ns
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	2208      	movs	r2, #8
 80010ce:	4313      	orrs	r3, r2
 80010d0:	607b      	str	r3, [r7, #4]
	_DeadTime  |= TIM_BDTR_DTG_2;//4x //83,2ns
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	2204      	movs	r2, #4
 80010d6:	4313      	orrs	r3, r2
 80010d8:	607b      	str	r3, [r7, #4]
	_DeadTime  |= TIM_BDTR_DTG_1;//2x  //41,6ns
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	2202      	movs	r2, #2
 80010de:	4313      	orrs	r3, r2
 80010e0:	607b      	str	r3, [r7, #4]
	_DeadTime  |= TIM_BDTR_DTG_0;//1x // Dead time base value 1/Fosc=1/48000=20.8ns
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	2201      	movs	r2, #1
 80010e6:	4313      	orrs	r3, r2
 80010e8:	607b      	str	r3, [r7, #4]

	return _DeadTime;
 80010ea:	687b      	ldr	r3, [r7, #4]
}
 80010ec:	0018      	movs	r0, r3
 80010ee:	46bd      	mov	sp, r7
 80010f0:	b002      	add	sp, #8
 80010f2:	bd80      	pop	{r7, pc}

080010f4 <PWM_50Hz_ON>:
    //HAL_TIM_PWM_Stop(&htim1,TIM_CHANNEL_3);
}
*/


void PWM_50Hz_ON(void){
 80010f4:	b580      	push	{r7, lr}
 80010f6:	af00      	add	r7, sp, #0
	//PWM_50Hz_OUTEN(); // OUTPUT ENABLE
	//PWM_50Hz_START(); // start CNT
	HAL_TIM_Base_Start(&htim1);
 80010f8:	4b0b      	ldr	r3, [pc, #44]	; (8001128 <PWM_50Hz_ON+0x34>)
 80010fa:	0018      	movs	r0, r3
 80010fc:	f003 f90c 	bl	8004318 <HAL_TIM_Base_Start>
	HAL_TIM_Base_Start_IT(&htim1);
 8001100:	4b09      	ldr	r3, [pc, #36]	; (8001128 <PWM_50Hz_ON+0x34>)
 8001102:	0018      	movs	r0, r3
 8001104:	f003 f9cc 	bl	80044a0 <HAL_TIM_Base_Start_IT>
	HAL_TIM_OC_Start(&htim1, TIM_CHANNEL_3);
 8001108:	4b07      	ldr	r3, [pc, #28]	; (8001128 <PWM_50Hz_ON+0x34>)
 800110a:	2108      	movs	r1, #8
 800110c:	0018      	movs	r0, r3
 800110e:	f003 fb43 	bl	8004798 <HAL_TIM_OC_Start>
	HAL_TIMEx_OCN_Start(&htim1, TIM_CHANNEL_3);
 8001112:	4b05      	ldr	r3, [pc, #20]	; (8001128 <PWM_50Hz_ON+0x34>)
 8001114:	2108      	movs	r1, #8
 8001116:	0018      	movs	r0, r3
 8001118:	f004 fedc 	bl	8005ed4 <HAL_TIMEx_OCN_Start>

	IsGenerator=1;
 800111c:	4b03      	ldr	r3, [pc, #12]	; (800112c <PWM_50Hz_ON+0x38>)
 800111e:	2201      	movs	r2, #1
 8001120:	601a      	str	r2, [r3, #0]
}
 8001122:	46c0      	nop			; (mov r8, r8)
 8001124:	46bd      	mov	sp, r7
 8001126:	bd80      	pop	{r7, pc}
 8001128:	200004d0 	.word	0x200004d0
 800112c:	200003e8 	.word	0x200003e8

08001130 <PWM_50Hz_OFF>:

void PWM_50Hz_OFF(void){
 8001130:	b580      	push	{r7, lr}
 8001132:	af00      	add	r7, sp, #0
	//PWM_50Hz_OUTDIS(); // OUTPUT ENABLE
	//PWM_50Hz_STOP(); // stop CNT
	HAL_TIM_Base_Stop(&htim1);
 8001134:	4b0b      	ldr	r3, [pc, #44]	; (8001164 <PWM_50Hz_OFF+0x34>)
 8001136:	0018      	movs	r0, r3
 8001138:	f003 f948 	bl	80043cc <HAL_TIM_Base_Stop>
	HAL_TIM_Base_Stop_IT(&htim1);
 800113c:	4b09      	ldr	r3, [pc, #36]	; (8001164 <PWM_50Hz_OFF+0x34>)
 800113e:	0018      	movs	r0, r3
 8001140:	f003 fa08 	bl	8004554 <HAL_TIM_Base_Stop_IT>
	HAL_TIM_OC_Stop(&htim1, TIM_CHANNEL_3);
 8001144:	4b07      	ldr	r3, [pc, #28]	; (8001164 <PWM_50Hz_OFF+0x34>)
 8001146:	2108      	movs	r1, #8
 8001148:	0018      	movs	r0, r3
 800114a:	f003 fbcf 	bl	80048ec <HAL_TIM_OC_Stop>
	HAL_TIMEx_OCN_Stop(&htim1, TIM_CHANNEL_3);
 800114e:	4b05      	ldr	r3, [pc, #20]	; (8001164 <PWM_50Hz_OFF+0x34>)
 8001150:	2108      	movs	r1, #8
 8001152:	0018      	movs	r0, r3
 8001154:	f004 ff18 	bl	8005f88 <HAL_TIMEx_OCN_Stop>

	IsGenerator=0;
 8001158:	4b03      	ldr	r3, [pc, #12]	; (8001168 <PWM_50Hz_OFF+0x38>)
 800115a:	2200      	movs	r2, #0
 800115c:	601a      	str	r2, [r3, #0]
}
 800115e:	46c0      	nop			; (mov r8, r8)
 8001160:	46bd      	mov	sp, r7
 8001162:	bd80      	pop	{r7, pc}
 8001164:	200004d0 	.word	0x200004d0
 8001168:	200003e8 	.word	0x200003e8

0800116c <ResetADC_Buff>:
volatile uint32_t adcOC_I;
volatile uint32_t adcKlapan;
volatile uint32_t adcPolka;
volatile uint32_t adcWienZero;

void ResetADC_Buff() {
 800116c:	b580      	push	{r7, lr}
 800116e:	b082      	sub	sp, #8
 8001170:	af00      	add	r7, sp, #0
	for (int i=0;i<ADC_ChannelCnt;i++) {
 8001172:	2300      	movs	r3, #0
 8001174:	607b      	str	r3, [r7, #4]
 8001176:	e007      	b.n	8001188 <ResetADC_Buff+0x1c>
		ADC_Data[i]=0;
 8001178:	4b08      	ldr	r3, [pc, #32]	; (800119c <ResetADC_Buff+0x30>)
 800117a:	687a      	ldr	r2, [r7, #4]
 800117c:	0052      	lsls	r2, r2, #1
 800117e:	2100      	movs	r1, #0
 8001180:	52d1      	strh	r1, [r2, r3]
	for (int i=0;i<ADC_ChannelCnt;i++) {
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	3301      	adds	r3, #1
 8001186:	607b      	str	r3, [r7, #4]
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	2b04      	cmp	r3, #4
 800118c:	ddf4      	ble.n	8001178 <ResetADC_Buff+0xc>
	}
	ADC_Cnt=0;
 800118e:	4b04      	ldr	r3, [pc, #16]	; (80011a0 <ResetADC_Buff+0x34>)
 8001190:	2200      	movs	r2, #0
 8001192:	601a      	str	r2, [r3, #0]
}
 8001194:	46c0      	nop			; (mov r8, r8)
 8001196:	46bd      	mov	sp, r7
 8001198:	b002      	add	sp, #8
 800119a:	bd80      	pop	{r7, pc}
 800119c:	20000658 	.word	0x20000658
 80011a0:	200003f0 	.word	0x200003f0

080011a4 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc1)
{
 80011a4:	b580      	push	{r7, lr}
 80011a6:	b082      	sub	sp, #8
 80011a8:	af00      	add	r7, sp, #0
 80011aa:	6078      	str	r0, [r7, #4]
	adcOC_I=adcOC_I+ADC_Data[2];
	adcKlapan=adcKlapan+ADC_Data[3];
	adcPolka=adcPolka+ADC_Data[4];
	adcWienZero=adcWienZero+ADC_Data[5];*/
	//
		adcOC_V=ADC_Data[1];
 80011ac:	4b1b      	ldr	r3, [pc, #108]	; (800121c <HAL_ADC_ConvCpltCallback+0x78>)
 80011ae:	885b      	ldrh	r3, [r3, #2]
 80011b0:	b29b      	uxth	r3, r3
 80011b2:	001a      	movs	r2, r3
 80011b4:	4b1a      	ldr	r3, [pc, #104]	; (8001220 <HAL_ADC_ConvCpltCallback+0x7c>)
 80011b6:	601a      	str	r2, [r3, #0]
		adcOC_I=ADC_Data[2];
 80011b8:	4b18      	ldr	r3, [pc, #96]	; (800121c <HAL_ADC_ConvCpltCallback+0x78>)
 80011ba:	889b      	ldrh	r3, [r3, #4]
 80011bc:	b29b      	uxth	r3, r3
 80011be:	001a      	movs	r2, r3
 80011c0:	4b18      	ldr	r3, [pc, #96]	; (8001224 <HAL_ADC_ConvCpltCallback+0x80>)
 80011c2:	601a      	str	r2, [r3, #0]
		adcKlapan=ADC_Data[3];
 80011c4:	4b15      	ldr	r3, [pc, #84]	; (800121c <HAL_ADC_ConvCpltCallback+0x78>)
 80011c6:	88db      	ldrh	r3, [r3, #6]
 80011c8:	b29b      	uxth	r3, r3
 80011ca:	001a      	movs	r2, r3
 80011cc:	4b16      	ldr	r3, [pc, #88]	; (8001228 <HAL_ADC_ConvCpltCallback+0x84>)
 80011ce:	601a      	str	r2, [r3, #0]
		adcPolka=ADC_Data[4];
 80011d0:	4b12      	ldr	r3, [pc, #72]	; (800121c <HAL_ADC_ConvCpltCallback+0x78>)
 80011d2:	891b      	ldrh	r3, [r3, #8]
 80011d4:	b29b      	uxth	r3, r3
 80011d6:	001a      	movs	r2, r3
 80011d8:	4b14      	ldr	r3, [pc, #80]	; (800122c <HAL_ADC_ConvCpltCallback+0x88>)
 80011da:	601a      	str	r2, [r3, #0]
		adcWienZero=ADC_Data[5]/41;
 80011dc:	4b0f      	ldr	r3, [pc, #60]	; (800121c <HAL_ADC_ConvCpltCallback+0x78>)
 80011de:	895b      	ldrh	r3, [r3, #10]
 80011e0:	b29b      	uxth	r3, r3
 80011e2:	2129      	movs	r1, #41	; 0x29
 80011e4:	0018      	movs	r0, r3
 80011e6:	f7fe ff8f 	bl	8000108 <__udivsi3>
 80011ea:	0003      	movs	r3, r0
 80011ec:	b29b      	uxth	r3, r3
 80011ee:	001a      	movs	r2, r3
 80011f0:	4b0f      	ldr	r3, [pc, #60]	; (8001230 <HAL_ADC_ConvCpltCallback+0x8c>)
 80011f2:	601a      	str	r2, [r3, #0]
		//adcWienZero=10;

	//
	if (adcWienZero<SINUS_MARGIN) {
 80011f4:	4b0e      	ldr	r3, [pc, #56]	; (8001230 <HAL_ADC_ConvCpltCallback+0x8c>)
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	2b09      	cmp	r3, #9
 80011fa:	d802      	bhi.n	8001202 <HAL_ADC_ConvCpltCallback+0x5e>
		adcWienZero=SINUS_MARGIN;
 80011fc:	4b0c      	ldr	r3, [pc, #48]	; (8001230 <HAL_ADC_ConvCpltCallback+0x8c>)
 80011fe:	220a      	movs	r2, #10
 8001200:	601a      	str	r2, [r3, #0]
	}
	//
	ADC_Cnt++;
 8001202:	4b0c      	ldr	r3, [pc, #48]	; (8001234 <HAL_ADC_ConvCpltCallback+0x90>)
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	1c5a      	adds	r2, r3, #1
 8001208:	4b0a      	ldr	r3, [pc, #40]	; (8001234 <HAL_ADC_ConvCpltCallback+0x90>)
 800120a:	601a      	str	r2, [r3, #0]
	//
	ResetADC_Buff();
 800120c:	f7ff ffae 	bl	800116c <ResetADC_Buff>
	StartADC();
 8001210:	f000 f812 	bl	8001238 <StartADC>
}
 8001214:	46c0      	nop			; (mov r8, r8)
 8001216:	46bd      	mov	sp, r7
 8001218:	b002      	add	sp, #8
 800121a:	bd80      	pop	{r7, pc}
 800121c:	20000658 	.word	0x20000658
 8001220:	2000064c 	.word	0x2000064c
 8001224:	20000654 	.word	0x20000654
 8001228:	20000648 	.word	0x20000648
 800122c:	20000664 	.word	0x20000664
 8001230:	20000650 	.word	0x20000650
 8001234:	200003f0 	.word	0x200003f0

08001238 <StartADC>:



void StartADC(){
 8001238:	b580      	push	{r7, lr}
 800123a:	af00      	add	r7, sp, #0
	//HAL_ADC_Start_IT(&hadc);
	//ADC->CCR |= ADC_CCR_TSEN | ADC_CCR_VREFEN;
	HAL_ADC_Start_DMA(&hadc,(uint32_t*) &ADC_Data,ADC_ChannelCnt);
 800123c:	4904      	ldr	r1, [pc, #16]	; (8001250 <StartADC+0x18>)
 800123e:	4b05      	ldr	r3, [pc, #20]	; (8001254 <StartADC+0x1c>)
 8001240:	2205      	movs	r2, #5
 8001242:	0018      	movs	r0, r3
 8001244:	f000 fce6 	bl	8001c14 <HAL_ADC_Start_DMA>
}
 8001248:	46c0      	nop			; (mov r8, r8)
 800124a:	46bd      	mov	sp, r7
 800124c:	bd80      	pop	{r7, pc}
 800124e:	46c0      	nop			; (mov r8, r8)
 8001250:	20000658 	.word	0x20000658
 8001254:	2000043c 	.word	0x2000043c

08001258 <Off_LEDs>:
void On_LEDs() {
	HAL_GPIO_WritePin(BOARD_LED_GPIO_Port, BOARD_LED_Pin,GPIO_PIN_SET); // LED On
    HAL_GPIO_WritePin(POLKA_LED_GPIO_Port, POLKA_LED_Pin,GPIO_PIN_SET); // LED On
}

void Off_LEDs() {
 8001258:	b580      	push	{r7, lr}
 800125a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(BOARD_LED_GPIO_Port, BOARD_LED_Pin,GPIO_PIN_RESET); // LED Off
 800125c:	2380      	movs	r3, #128	; 0x80
 800125e:	005b      	lsls	r3, r3, #1
 8001260:	4807      	ldr	r0, [pc, #28]	; (8001280 <Off_LEDs+0x28>)
 8001262:	2200      	movs	r2, #0
 8001264:	0019      	movs	r1, r3
 8001266:	f002 f823 	bl	80032b0 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(POLKA_LED_GPIO_Port, POLKA_LED_Pin,GPIO_PIN_RESET); // LED Off
 800126a:	2380      	movs	r3, #128	; 0x80
 800126c:	009b      	lsls	r3, r3, #2
 800126e:	4804      	ldr	r0, [pc, #16]	; (8001280 <Off_LEDs+0x28>)
 8001270:	2200      	movs	r2, #0
 8001272:	0019      	movs	r1, r3
 8001274:	f002 f81c 	bl	80032b0 <HAL_GPIO_WritePin>
}
 8001278:	46c0      	nop			; (mov r8, r8)
 800127a:	46bd      	mov	sp, r7
 800127c:	bd80      	pop	{r7, pc}
 800127e:	46c0      	nop			; (mov r8, r8)
 8001280:	48000800 	.word	0x48000800

08001284 <BlinkLEDs>:

void BlinkLEDs(uint8_t _cnt, uint8_t _Delay) {
 8001284:	b580      	push	{r7, lr}
 8001286:	b084      	sub	sp, #16
 8001288:	af00      	add	r7, sp, #0
 800128a:	0002      	movs	r2, r0
 800128c:	1dfb      	adds	r3, r7, #7
 800128e:	701a      	strb	r2, [r3, #0]
 8001290:	1dbb      	adds	r3, r7, #6
 8001292:	1c0a      	adds	r2, r1, #0
 8001294:	701a      	strb	r2, [r3, #0]
	uint8_t _i=0;
 8001296:	230f      	movs	r3, #15
 8001298:	18fb      	adds	r3, r7, r3
 800129a:	2200      	movs	r2, #0
 800129c:	701a      	strb	r2, [r3, #0]
	Off_LEDs();
 800129e:	f7ff ffdb 	bl	8001258 <Off_LEDs>
	while (_i<_cnt) {
 80012a2:	e018      	b.n	80012d6 <BlinkLEDs+0x52>
		HAL_GPIO_TogglePin(BOARD_LED_GPIO_Port, BOARD_LED_Pin);
 80012a4:	2380      	movs	r3, #128	; 0x80
 80012a6:	005b      	lsls	r3, r3, #1
 80012a8:	4a11      	ldr	r2, [pc, #68]	; (80012f0 <BlinkLEDs+0x6c>)
 80012aa:	0019      	movs	r1, r3
 80012ac:	0010      	movs	r0, r2
 80012ae:	f002 f83f 	bl	8003330 <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin(POLKA_LED_GPIO_Port, POLKA_LED_Pin);
 80012b2:	2380      	movs	r3, #128	; 0x80
 80012b4:	009b      	lsls	r3, r3, #2
 80012b6:	4a0e      	ldr	r2, [pc, #56]	; (80012f0 <BlinkLEDs+0x6c>)
 80012b8:	0019      	movs	r1, r3
 80012ba:	0010      	movs	r0, r2
 80012bc:	f002 f838 	bl	8003330 <HAL_GPIO_TogglePin>
		HAL_Delay(_Delay);
 80012c0:	1dbb      	adds	r3, r7, #6
 80012c2:	781b      	ldrb	r3, [r3, #0]
 80012c4:	0018      	movs	r0, r3
 80012c6:	f000 fa3d 	bl	8001744 <HAL_Delay>
		_i++;
 80012ca:	210f      	movs	r1, #15
 80012cc:	187b      	adds	r3, r7, r1
 80012ce:	781a      	ldrb	r2, [r3, #0]
 80012d0:	187b      	adds	r3, r7, r1
 80012d2:	3201      	adds	r2, #1
 80012d4:	701a      	strb	r2, [r3, #0]
	while (_i<_cnt) {
 80012d6:	230f      	movs	r3, #15
 80012d8:	18fa      	adds	r2, r7, r3
 80012da:	1dfb      	adds	r3, r7, #7
 80012dc:	7812      	ldrb	r2, [r2, #0]
 80012de:	781b      	ldrb	r3, [r3, #0]
 80012e0:	429a      	cmp	r2, r3
 80012e2:	d3df      	bcc.n	80012a4 <BlinkLEDs+0x20>
	}
	Off_LEDs();
 80012e4:	f7ff ffb8 	bl	8001258 <Off_LEDs>
}
 80012e8:	46c0      	nop			; (mov r8, r8)
 80012ea:	46bd      	mov	sp, r7
 80012ec:	b004      	add	sp, #16
 80012ee:	bd80      	pop	{r7, pc}
 80012f0:	48000800 	.word	0x48000800

080012f4 <Check50Hz>:

void Check50Hz() {
 80012f4:	b580      	push	{r7, lr}
 80012f6:	af00      	add	r7, sp, #0
	if((BlockGenerator==0) && (IsGenerator==1)) {
 80012f8:	4b26      	ldr	r3, [pc, #152]	; (8001394 <Check50Hz+0xa0>)
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d121      	bne.n	8001344 <Check50Hz+0x50>
 8001300:	4b25      	ldr	r3, [pc, #148]	; (8001398 <Check50Hz+0xa4>)
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	2b01      	cmp	r3, #1
 8001306:	d11d      	bne.n	8001344 <Check50Hz+0x50>
		if (((TIM1->CNT==1000) || (TIM1->CNT==0)) || ((sin_step>100) && (TIM1->CNT<10))) {
 8001308:	4b24      	ldr	r3, [pc, #144]	; (800139c <Check50Hz+0xa8>)
 800130a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800130c:	23fa      	movs	r3, #250	; 0xfa
 800130e:	009b      	lsls	r3, r3, #2
 8001310:	429a      	cmp	r2, r3
 8001312:	d00c      	beq.n	800132e <Check50Hz+0x3a>
 8001314:	4b21      	ldr	r3, [pc, #132]	; (800139c <Check50Hz+0xa8>)
 8001316:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001318:	2b00      	cmp	r3, #0
 800131a:	d008      	beq.n	800132e <Check50Hz+0x3a>
 800131c:	4b20      	ldr	r3, [pc, #128]	; (80013a0 <Check50Hz+0xac>)
 800131e:	881b      	ldrh	r3, [r3, #0]
 8001320:	b29b      	uxth	r3, r3
 8001322:	2b64      	cmp	r3, #100	; 0x64
 8001324:	d90e      	bls.n	8001344 <Check50Hz+0x50>
 8001326:	4b1d      	ldr	r3, [pc, #116]	; (800139c <Check50Hz+0xa8>)
 8001328:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800132a:	2b09      	cmp	r3, #9
 800132c:	d80a      	bhi.n	8001344 <Check50Hz+0x50>
			sin_step=0;
 800132e:	4b1c      	ldr	r3, [pc, #112]	; (80013a0 <Check50Hz+0xac>)
 8001330:	2200      	movs	r2, #0
 8001332:	801a      	strh	r2, [r3, #0]
			HAL_GPIO_TogglePin(BOARD_LED_GPIO_Port, BOARD_LED_Pin); // All is OK, blink
 8001334:	2380      	movs	r3, #128	; 0x80
 8001336:	005b      	lsls	r3, r3, #1
 8001338:	4a1a      	ldr	r2, [pc, #104]	; (80013a4 <Check50Hz+0xb0>)
 800133a:	0019      	movs	r1, r3
 800133c:	0010      	movs	r0, r2
 800133e:	f001 fff7 	bl	8003330 <HAL_GPIO_TogglePin>
			return;
 8001342:	e025      	b.n	8001390 <Check50Hz+0x9c>
		}
	}

	if((BlockGenerator==0) && (IsGenerator==0)) {
 8001344:	4b13      	ldr	r3, [pc, #76]	; (8001394 <Check50Hz+0xa0>)
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	2b00      	cmp	r3, #0
 800134a:	d10e      	bne.n	800136a <Check50Hz+0x76>
 800134c:	4b12      	ldr	r3, [pc, #72]	; (8001398 <Check50Hz+0xa4>)
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	2b00      	cmp	r3, #0
 8001352:	d10a      	bne.n	800136a <Check50Hz+0x76>
		TIM1->CCR3=0;
 8001354:	4b11      	ldr	r3, [pc, #68]	; (800139c <Check50Hz+0xa8>)
 8001356:	2200      	movs	r2, #0
 8001358:	63da      	str	r2, [r3, #60]	; 0x3c
		TIM1->CNT=0;
 800135a:	4b10      	ldr	r3, [pc, #64]	; (800139c <Check50Hz+0xa8>)
 800135c:	2200      	movs	r2, #0
 800135e:	625a      	str	r2, [r3, #36]	; 0x24
		PWM_50Hz_ON();
 8001360:	f7ff fec8 	bl	80010f4 <PWM_50Hz_ON>
		DAC_SINUS_ON();
 8001364:	f000 f8a2 	bl	80014ac <DAC_SINUS_ON>
		return;
 8001368:	e012      	b.n	8001390 <Check50Hz+0x9c>
	}

	if((BlockGenerator==1) && (IsGenerator==1)) {
 800136a:	4b0a      	ldr	r3, [pc, #40]	; (8001394 <Check50Hz+0xa0>)
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	2b01      	cmp	r3, #1
 8001370:	d10e      	bne.n	8001390 <Check50Hz+0x9c>
 8001372:	4b09      	ldr	r3, [pc, #36]	; (8001398 <Check50Hz+0xa4>)
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	2b01      	cmp	r3, #1
 8001378:	d10a      	bne.n	8001390 <Check50Hz+0x9c>
		TIM1->CCR3=0;
 800137a:	4b08      	ldr	r3, [pc, #32]	; (800139c <Check50Hz+0xa8>)
 800137c:	2200      	movs	r2, #0
 800137e:	63da      	str	r2, [r3, #60]	; 0x3c
		TIM1->CNT=0;
 8001380:	4b06      	ldr	r3, [pc, #24]	; (800139c <Check50Hz+0xa8>)
 8001382:	2200      	movs	r2, #0
 8001384:	625a      	str	r2, [r3, #36]	; 0x24
		PWM_50Hz_OFF();
 8001386:	f7ff fed3 	bl	8001130 <PWM_50Hz_OFF>
		DAC_SINUS_OFF();
 800138a:	f000 f8a5 	bl	80014d8 <DAC_SINUS_OFF>
		return;
 800138e:	46c0      	nop			; (mov r8, r8)
	}
}
 8001390:	46bd      	mov	sp, r7
 8001392:	bd80      	pop	{r7, pc}
 8001394:	20000004 	.word	0x20000004
 8001398:	200003e8 	.word	0x200003e8
 800139c:	40012c00 	.word	0x40012c00
 80013a0:	200003f4 	.word	0x200003f4
 80013a4:	48000800 	.word	0x48000800

080013a8 <EnableDebugMode>:

void EnableDebugMode() {
 80013a8:	b580      	push	{r7, lr}
 80013aa:	b082      	sub	sp, #8
 80013ac:	af00      	add	r7, sp, #0
				__HAL_RCC_DBGMCU_CLK_ENABLE();
 80013ae:	4b17      	ldr	r3, [pc, #92]	; (800140c <EnableDebugMode+0x64>)
 80013b0:	699a      	ldr	r2, [r3, #24]
 80013b2:	4b16      	ldr	r3, [pc, #88]	; (800140c <EnableDebugMode+0x64>)
 80013b4:	2180      	movs	r1, #128	; 0x80
 80013b6:	03c9      	lsls	r1, r1, #15
 80013b8:	430a      	orrs	r2, r1
 80013ba:	619a      	str	r2, [r3, #24]
 80013bc:	4b13      	ldr	r3, [pc, #76]	; (800140c <EnableDebugMode+0x64>)
 80013be:	699a      	ldr	r2, [r3, #24]
 80013c0:	2380      	movs	r3, #128	; 0x80
 80013c2:	03db      	lsls	r3, r3, #15
 80013c4:	4013      	ands	r3, r2
 80013c6:	607b      	str	r3, [r7, #4]
 80013c8:	687b      	ldr	r3, [r7, #4]
			    DBGMCU->APB1FZ |= DBGMCU_APB1_FZ_DBG_WWDG_STOP;
 80013ca:	4b11      	ldr	r3, [pc, #68]	; (8001410 <EnableDebugMode+0x68>)
 80013cc:	689a      	ldr	r2, [r3, #8]
 80013ce:	4b10      	ldr	r3, [pc, #64]	; (8001410 <EnableDebugMode+0x68>)
 80013d0:	2180      	movs	r1, #128	; 0x80
 80013d2:	0109      	lsls	r1, r1, #4
 80013d4:	430a      	orrs	r2, r1
 80013d6:	609a      	str	r2, [r3, #8]
			    DBGMCU->APB2FZ = 0xFFFFFFFF;
 80013d8:	4b0d      	ldr	r3, [pc, #52]	; (8001410 <EnableDebugMode+0x68>)
 80013da:	2201      	movs	r2, #1
 80013dc:	4252      	negs	r2, r2
 80013de:	60da      	str	r2, [r3, #12]
			    DBGMCU->APB1FZ = 0xFFFFFFFF;
 80013e0:	4b0b      	ldr	r3, [pc, #44]	; (8001410 <EnableDebugMode+0x68>)
 80013e2:	2201      	movs	r2, #1
 80013e4:	4252      	negs	r2, r2
 80013e6:	609a      	str	r2, [r3, #8]
			    DBGMCU->CR |=DBGMCU_CR_DBG_STOP;
 80013e8:	4b09      	ldr	r3, [pc, #36]	; (8001410 <EnableDebugMode+0x68>)
 80013ea:	685a      	ldr	r2, [r3, #4]
 80013ec:	4b08      	ldr	r3, [pc, #32]	; (8001410 <EnableDebugMode+0x68>)
 80013ee:	2102      	movs	r1, #2
 80013f0:	430a      	orrs	r2, r1
 80013f2:	605a      	str	r2, [r3, #4]
			    __HAL_DBGMCU_FREEZE_IWDG();
 80013f4:	4b06      	ldr	r3, [pc, #24]	; (8001410 <EnableDebugMode+0x68>)
 80013f6:	689a      	ldr	r2, [r3, #8]
 80013f8:	4b05      	ldr	r3, [pc, #20]	; (8001410 <EnableDebugMode+0x68>)
 80013fa:	2180      	movs	r1, #128	; 0x80
 80013fc:	0149      	lsls	r1, r1, #5
 80013fe:	430a      	orrs	r2, r1
 8001400:	609a      	str	r2, [r3, #8]
}
 8001402:	46c0      	nop			; (mov r8, r8)
 8001404:	46bd      	mov	sp, r7
 8001406:	b002      	add	sp, #8
 8001408:	bd80      	pop	{r7, pc}
 800140a:	46c0      	nop			; (mov r8, r8)
 800140c:	40021000 	.word	0x40021000
 8001410:	40015800 	.word	0x40015800

08001414 <GetSinus>:
		 1363, 1340, 1316, 1293, 1269, 1246, 1222, 1199, 1175, 1152, 1128, 1104, 1080,
		 1056, 1032, 1009, 985, 960, 936, 912, 888, 864, 840, 815, 791, 767, 742, 718,
		 693, 669, 645, 620, 595, 571, 546, 522, 497, 472, 448, 423, 398, 373, 349, 324,
		 299, 274, 250, 225, 200, 175, 150, 125, 100, 76, 51, 26};

uint16_t GetSinus() {
 8001414:	b580      	push	{r7, lr}
 8001416:	af00      	add	r7, sp, #0
	if ((sin_step>=SinRes) || (sin_step<=adcWienZero)|| (sin_step>=(SinRes-adcWienZero))) {
 8001418:	4b13      	ldr	r3, [pc, #76]	; (8001468 <GetSinus+0x54>)
 800141a:	881b      	ldrh	r3, [r3, #0]
 800141c:	b29a      	uxth	r2, r3
 800141e:	23e0      	movs	r3, #224	; 0xe0
 8001420:	33ff      	adds	r3, #255	; 0xff
 8001422:	429a      	cmp	r2, r3
 8001424:	d812      	bhi.n	800144c <GetSinus+0x38>
 8001426:	4b10      	ldr	r3, [pc, #64]	; (8001468 <GetSinus+0x54>)
 8001428:	881b      	ldrh	r3, [r3, #0]
 800142a:	b29b      	uxth	r3, r3
 800142c:	001a      	movs	r2, r3
 800142e:	4b0f      	ldr	r3, [pc, #60]	; (800146c <GetSinus+0x58>)
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	429a      	cmp	r2, r3
 8001434:	d90a      	bls.n	800144c <GetSinus+0x38>
 8001436:	4b0c      	ldr	r3, [pc, #48]	; (8001468 <GetSinus+0x54>)
 8001438:	881b      	ldrh	r3, [r3, #0]
 800143a:	b29b      	uxth	r3, r3
 800143c:	0019      	movs	r1, r3
 800143e:	4b0b      	ldr	r3, [pc, #44]	; (800146c <GetSinus+0x58>)
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	22f0      	movs	r2, #240	; 0xf0
 8001444:	0052      	lsls	r2, r2, #1
 8001446:	1ad3      	subs	r3, r2, r3
 8001448:	4299      	cmp	r1, r3
 800144a:	d301      	bcc.n	8001450 <GetSinus+0x3c>

		return 0;
 800144c:	2300      	movs	r3, #0
 800144e:	e007      	b.n	8001460 <GetSinus+0x4c>
	}

	return sin_data[sin_step];
 8001450:	4b05      	ldr	r3, [pc, #20]	; (8001468 <GetSinus+0x54>)
 8001452:	881b      	ldrh	r3, [r3, #0]
 8001454:	b29b      	uxth	r3, r3
 8001456:	001a      	movs	r2, r3
 8001458:	4b05      	ldr	r3, [pc, #20]	; (8001470 <GetSinus+0x5c>)
 800145a:	0052      	lsls	r2, r2, #1
 800145c:	5ad3      	ldrh	r3, [r2, r3]
 800145e:	b29b      	uxth	r3, r3
}
 8001460:	0018      	movs	r0, r3
 8001462:	46bd      	mov	sp, r7
 8001464:	bd80      	pop	{r7, pc}
 8001466:	46c0      	nop			; (mov r8, r8)
 8001468:	200003f4 	.word	0x200003f4
 800146c:	20000650 	.word	0x20000650
 8001470:	20000008 	.word	0x20000008

08001474 <Set_DAC_SINUS_ZERO>:

 void Set_DAC_SINUS_ZERO() {
 8001474:	b580      	push	{r7, lr}
 8001476:	af00      	add	r7, sp, #0
	 HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1,DAC_ALIGN_12B_R,0);
 8001478:	4804      	ldr	r0, [pc, #16]	; (800148c <Set_DAC_SINUS_ZERO+0x18>)
 800147a:	2300      	movs	r3, #0
 800147c:	2200      	movs	r2, #0
 800147e:	2100      	movs	r1, #0
 8001480:	f001 f8f6 	bl	8002670 <HAL_DAC_SetValue>
 }
 8001484:	46c0      	nop			; (mov r8, r8)
 8001486:	46bd      	mov	sp, r7
 8001488:	bd80      	pop	{r7, pc}
 800148a:	46c0      	nop			; (mov r8, r8)
 800148c:	200004ac 	.word	0x200004ac

08001490 <DAC_SINUS_INIT>:

 void DAC_SINUS_INIT() {
 8001490:	b580      	push	{r7, lr}
 8001492:	af00      	add	r7, sp, #0
	 HAL_DAC_Start(&hdac1, DAC_CHANNEL_1);
 8001494:	4b04      	ldr	r3, [pc, #16]	; (80014a8 <DAC_SINUS_INIT+0x18>)
 8001496:	2100      	movs	r1, #0
 8001498:	0018      	movs	r0, r3
 800149a:	f001 f9d7 	bl	800284c <HAL_DAC_Start>
	 Set_DAC_SINUS_ZERO();
 800149e:	f7ff ffe9 	bl	8001474 <Set_DAC_SINUS_ZERO>
 }
 80014a2:	46c0      	nop			; (mov r8, r8)
 80014a4:	46bd      	mov	sp, r7
 80014a6:	bd80      	pop	{r7, pc}
 80014a8:	200004ac 	.word	0x200004ac

080014ac <DAC_SINUS_ON>:

void DAC_SINUS_ON() {
 80014ac:	b580      	push	{r7, lr}
 80014ae:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Start(&htim2);
 80014b0:	4b07      	ldr	r3, [pc, #28]	; (80014d0 <DAC_SINUS_ON+0x24>)
 80014b2:	0018      	movs	r0, r3
 80014b4:	f002 ff30 	bl	8004318 <HAL_TIM_Base_Start>
	HAL_TIM_Base_Start_IT(&htim2);
 80014b8:	4b05      	ldr	r3, [pc, #20]	; (80014d0 <DAC_SINUS_ON+0x24>)
 80014ba:	0018      	movs	r0, r3
 80014bc:	f002 fff0 	bl	80044a0 <HAL_TIM_Base_Start_IT>
	Set_DAC_SINUS_ZERO();
 80014c0:	f7ff ffd8 	bl	8001474 <Set_DAC_SINUS_ZERO>
	IsSinus=1;
 80014c4:	4b03      	ldr	r3, [pc, #12]	; (80014d4 <DAC_SINUS_ON+0x28>)
 80014c6:	2201      	movs	r2, #1
 80014c8:	601a      	str	r2, [r3, #0]
 }
 80014ca:	46c0      	nop			; (mov r8, r8)
 80014cc:	46bd      	mov	sp, r7
 80014ce:	bd80      	pop	{r7, pc}
 80014d0:	20000510 	.word	0x20000510
 80014d4:	200003ec 	.word	0x200003ec

080014d8 <DAC_SINUS_OFF>:


void DAC_SINUS_OFF() {
 80014d8:	b580      	push	{r7, lr}
 80014da:	af00      	add	r7, sp, #0
	Set_DAC_SINUS_ZERO();
 80014dc:	f7ff ffca 	bl	8001474 <Set_DAC_SINUS_ZERO>
	HAL_TIM_Base_Stop(&htim2);
 80014e0:	4b06      	ldr	r3, [pc, #24]	; (80014fc <DAC_SINUS_OFF+0x24>)
 80014e2:	0018      	movs	r0, r3
 80014e4:	f002 ff72 	bl	80043cc <HAL_TIM_Base_Stop>
	HAL_TIM_Base_Stop_IT(&htim2);
 80014e8:	4b04      	ldr	r3, [pc, #16]	; (80014fc <DAC_SINUS_OFF+0x24>)
 80014ea:	0018      	movs	r0, r3
 80014ec:	f003 f832 	bl	8004554 <HAL_TIM_Base_Stop_IT>
	IsSinus=0;
 80014f0:	4b03      	ldr	r3, [pc, #12]	; (8001500 <DAC_SINUS_OFF+0x28>)
 80014f2:	2200      	movs	r2, #0
 80014f4:	601a      	str	r2, [r3, #0]
 }
 80014f6:	46c0      	nop			; (mov r8, r8)
 80014f8:	46bd      	mov	sp, r7
 80014fa:	bd80      	pop	{r7, pc}
 80014fc:	20000510 	.word	0x20000510
 8001500:	200003ec 	.word	0x200003ec

08001504 <ResetWDG>:
#include "digiTOS-IWDG.h"

void ResetWDG() {
 8001504:	b580      	push	{r7, lr}
 8001506:	af00      	add	r7, sp, #0
	 HAL_IWDG_Refresh(&hiwdg);
 8001508:	4b03      	ldr	r3, [pc, #12]	; (8001518 <ResetWDG+0x14>)
 800150a:	0018      	movs	r0, r3
 800150c:	f001 ffe0 	bl	80034d0 <HAL_IWDG_Refresh>
	 //IWDG->KR = 0x0000AAAAU;
}
 8001510:	46c0      	nop			; (mov r8, r8)
 8001512:	46bd      	mov	sp, r7
 8001514:	bd80      	pop	{r7, pc}
 8001516:	46c0      	nop			; (mov r8, r8)
 8001518:	200004c0 	.word	0x200004c0

0800151c <DigiTOS_IWDG_Init>:

uint8_t DigiTOS_IWDG_Init(DigiTOS_IWDG_Timeout_t timeout) {
 800151c:	b580      	push	{r7, lr}
 800151e:	b084      	sub	sp, #16
 8001520:	af00      	add	r7, sp, #0
 8001522:	0002      	movs	r2, r0
 8001524:	1dfb      	adds	r3, r7, #7
 8001526:	701a      	strb	r2, [r3, #0]
	uint8_t result = 0;
 8001528:	230f      	movs	r3, #15
 800152a:	18fb      	adds	r3, r7, r3
 800152c:	2200      	movs	r2, #0
 800152e:	701a      	strb	r2, [r3, #0]
	uint16_t reload = 0;
 8001530:	230c      	movs	r3, #12
 8001532:	18fb      	adds	r3, r7, r3
 8001534:	2200      	movs	r2, #0
 8001536:	801a      	strh	r2, [r3, #0]
	
	/* Check if the system has resumed from IWDG reset */
#if defined(STM32F4xx)
	if (RCC->CSR & RCC_CSR_WDGRSTF) {
#else
	if (RCC->CSR & RCC_CSR_IWDGRSTF) {	
 8001538:	4b56      	ldr	r3, [pc, #344]	; (8001694 <DigiTOS_IWDG_Init+0x178>)
 800153a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800153c:	2380      	movs	r3, #128	; 0x80
 800153e:	059b      	lsls	r3, r3, #22
 8001540:	4013      	ands	r3, r2
 8001542:	d00a      	beq.n	800155a <DigiTOS_IWDG_Init+0x3e>
#endif
		/* Reset by IWDG */
		result = 1;
 8001544:	230f      	movs	r3, #15
 8001546:	18fb      	adds	r3, r7, r3
 8001548:	2201      	movs	r2, #1
 800154a:	701a      	strb	r2, [r3, #0]
		
		/* Clear reset flags */
		RCC->CSR |= RCC_CSR_RMVF;
 800154c:	4b51      	ldr	r3, [pc, #324]	; (8001694 <DigiTOS_IWDG_Init+0x178>)
 800154e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001550:	4b50      	ldr	r3, [pc, #320]	; (8001694 <DigiTOS_IWDG_Init+0x178>)
 8001552:	2180      	movs	r1, #128	; 0x80
 8001554:	0449      	lsls	r1, r1, #17
 8001556:	430a      	orrs	r2, r1
 8001558:	625a      	str	r2, [r3, #36]	; 0x24
	}

	/* Enable write access to IWDG_PR and IWDG_RLR registers */
	IWDG->KR = 0x5555;
 800155a:	4b4f      	ldr	r3, [pc, #316]	; (8001698 <DigiTOS_IWDG_Init+0x17c>)
 800155c:	4a4f      	ldr	r2, [pc, #316]	; (800169c <DigiTOS_IWDG_Init+0x180>)
 800155e:	601a      	str	r2, [r3, #0]

	/* Set proper clock depending on timeout user select */
	if (timeout >= DigiTOS_IWDG_Timeout_8s) {
 8001560:	1dfb      	adds	r3, r7, #7
 8001562:	781b      	ldrb	r3, [r3, #0]
 8001564:	2b0a      	cmp	r3, #10
 8001566:	d903      	bls.n	8001570 <DigiTOS_IWDG_Init+0x54>
		/* IWDG counter clock: LSI/256 = 128Hz */
		IWDG->PR = 0x07;
 8001568:	4b4b      	ldr	r3, [pc, #300]	; (8001698 <DigiTOS_IWDG_Init+0x17c>)
 800156a:	2207      	movs	r2, #7
 800156c:	605a      	str	r2, [r3, #4]
 800156e:	e002      	b.n	8001576 <DigiTOS_IWDG_Init+0x5a>
	} else {
		/* IWDG counter clock: LSI/32 = 1024Hz */
		IWDG->PR = 0x03;
 8001570:	4b49      	ldr	r3, [pc, #292]	; (8001698 <DigiTOS_IWDG_Init+0x17c>)
 8001572:	2203      	movs	r2, #3
 8001574:	605a      	str	r2, [r3, #4]
	}
	
	/* Set counter reload value */
	if (timeout == DigiTOS_IWDG_Timeout_5ms) {
 8001576:	1dfb      	adds	r3, r7, #7
 8001578:	781b      	ldrb	r3, [r3, #0]
 800157a:	2b00      	cmp	r3, #0
 800157c:	d104      	bne.n	8001588 <DigiTOS_IWDG_Init+0x6c>
		reload = 5; /* 1024 Hz IWDG ticking */
 800157e:	230c      	movs	r3, #12
 8001580:	18fb      	adds	r3, r7, r3
 8001582:	2205      	movs	r2, #5
 8001584:	801a      	strh	r2, [r3, #0]
 8001586:	e073      	b.n	8001670 <DigiTOS_IWDG_Init+0x154>
	} else if (timeout == DigiTOS_IWDG_Timeout_10ms) {
 8001588:	1dfb      	adds	r3, r7, #7
 800158a:	781b      	ldrb	r3, [r3, #0]
 800158c:	2b01      	cmp	r3, #1
 800158e:	d104      	bne.n	800159a <DigiTOS_IWDG_Init+0x7e>
		reload = 10; /* 1024 Hz IWDG ticking */
 8001590:	230c      	movs	r3, #12
 8001592:	18fb      	adds	r3, r7, r3
 8001594:	220a      	movs	r2, #10
 8001596:	801a      	strh	r2, [r3, #0]
 8001598:	e06a      	b.n	8001670 <DigiTOS_IWDG_Init+0x154>
	} else if (timeout == DigiTOS_IWDG_Timeout_15ms) {
 800159a:	1dfb      	adds	r3, r7, #7
 800159c:	781b      	ldrb	r3, [r3, #0]
 800159e:	2b02      	cmp	r3, #2
 80015a0:	d104      	bne.n	80015ac <DigiTOS_IWDG_Init+0x90>
		reload = 15; /* 1024 Hz IWDG ticking */
 80015a2:	230c      	movs	r3, #12
 80015a4:	18fb      	adds	r3, r7, r3
 80015a6:	220f      	movs	r2, #15
 80015a8:	801a      	strh	r2, [r3, #0]
 80015aa:	e061      	b.n	8001670 <DigiTOS_IWDG_Init+0x154>
	} else if (timeout == DigiTOS_IWDG_Timeout_30ms) {
 80015ac:	1dfb      	adds	r3, r7, #7
 80015ae:	781b      	ldrb	r3, [r3, #0]
 80015b0:	2b03      	cmp	r3, #3
 80015b2:	d104      	bne.n	80015be <DigiTOS_IWDG_Init+0xa2>
		reload = 31; /* 1024 Hz IWDG ticking */
 80015b4:	230c      	movs	r3, #12
 80015b6:	18fb      	adds	r3, r7, r3
 80015b8:	221f      	movs	r2, #31
 80015ba:	801a      	strh	r2, [r3, #0]
 80015bc:	e058      	b.n	8001670 <DigiTOS_IWDG_Init+0x154>
	} else if (timeout == DigiTOS_IWDG_Timeout_60ms) {
 80015be:	1dfb      	adds	r3, r7, #7
 80015c0:	781b      	ldrb	r3, [r3, #0]
 80015c2:	2b04      	cmp	r3, #4
 80015c4:	d104      	bne.n	80015d0 <DigiTOS_IWDG_Init+0xb4>
		reload = 61; /* 1024 Hz IWDG ticking */
 80015c6:	230c      	movs	r3, #12
 80015c8:	18fb      	adds	r3, r7, r3
 80015ca:	223d      	movs	r2, #61	; 0x3d
 80015cc:	801a      	strh	r2, [r3, #0]
 80015ce:	e04f      	b.n	8001670 <DigiTOS_IWDG_Init+0x154>
	} else if (timeout == DigiTOS_IWDG_Timeout_120ms) {
 80015d0:	1dfb      	adds	r3, r7, #7
 80015d2:	781b      	ldrb	r3, [r3, #0]
 80015d4:	2b05      	cmp	r3, #5
 80015d6:	d104      	bne.n	80015e2 <DigiTOS_IWDG_Init+0xc6>
		reload = 123; /* 1024 Hz IWDG ticking */
 80015d8:	230c      	movs	r3, #12
 80015da:	18fb      	adds	r3, r7, r3
 80015dc:	227b      	movs	r2, #123	; 0x7b
 80015de:	801a      	strh	r2, [r3, #0]
 80015e0:	e046      	b.n	8001670 <DigiTOS_IWDG_Init+0x154>
	} else if (timeout == DigiTOS_IWDG_Timeout_250ms) {
 80015e2:	1dfb      	adds	r3, r7, #7
 80015e4:	781b      	ldrb	r3, [r3, #0]
 80015e6:	2b06      	cmp	r3, #6
 80015e8:	d104      	bne.n	80015f4 <DigiTOS_IWDG_Init+0xd8>
		reload = 255; /* 1024 Hz IWDG ticking */
 80015ea:	230c      	movs	r3, #12
 80015ec:	18fb      	adds	r3, r7, r3
 80015ee:	22ff      	movs	r2, #255	; 0xff
 80015f0:	801a      	strh	r2, [r3, #0]
 80015f2:	e03d      	b.n	8001670 <DigiTOS_IWDG_Init+0x154>
	} else if (timeout == DigiTOS_IWDG_Timeout_500ms) {
 80015f4:	1dfb      	adds	r3, r7, #7
 80015f6:	781b      	ldrb	r3, [r3, #0]
 80015f8:	2b07      	cmp	r3, #7
 80015fa:	d104      	bne.n	8001606 <DigiTOS_IWDG_Init+0xea>
		reload = 511; /* 1024 Hz IWDG ticking */
 80015fc:	230c      	movs	r3, #12
 80015fe:	18fb      	adds	r3, r7, r3
 8001600:	4a27      	ldr	r2, [pc, #156]	; (80016a0 <DigiTOS_IWDG_Init+0x184>)
 8001602:	801a      	strh	r2, [r3, #0]
 8001604:	e034      	b.n	8001670 <DigiTOS_IWDG_Init+0x154>
	} else if (timeout == DigiTOS_IWDG_Timeout_1s) {
 8001606:	1dfb      	adds	r3, r7, #7
 8001608:	781b      	ldrb	r3, [r3, #0]
 800160a:	2b08      	cmp	r3, #8
 800160c:	d104      	bne.n	8001618 <DigiTOS_IWDG_Init+0xfc>
		reload = 1023; /* 1024 Hz IWDG ticking */
 800160e:	230c      	movs	r3, #12
 8001610:	18fb      	adds	r3, r7, r3
 8001612:	4a24      	ldr	r2, [pc, #144]	; (80016a4 <DigiTOS_IWDG_Init+0x188>)
 8001614:	801a      	strh	r2, [r3, #0]
 8001616:	e02b      	b.n	8001670 <DigiTOS_IWDG_Init+0x154>
	} else if (timeout == DigiTOS_IWDG_Timeout_2s) {
 8001618:	1dfb      	adds	r3, r7, #7
 800161a:	781b      	ldrb	r3, [r3, #0]
 800161c:	2b09      	cmp	r3, #9
 800161e:	d104      	bne.n	800162a <DigiTOS_IWDG_Init+0x10e>
		reload = 2047; /* 1024 Hz IWDG ticking */
 8001620:	230c      	movs	r3, #12
 8001622:	18fb      	adds	r3, r7, r3
 8001624:	4a20      	ldr	r2, [pc, #128]	; (80016a8 <DigiTOS_IWDG_Init+0x18c>)
 8001626:	801a      	strh	r2, [r3, #0]
 8001628:	e022      	b.n	8001670 <DigiTOS_IWDG_Init+0x154>
	} else if (timeout == DigiTOS_IWDG_Timeout_4s) {
 800162a:	1dfb      	adds	r3, r7, #7
 800162c:	781b      	ldrb	r3, [r3, #0]
 800162e:	2b0a      	cmp	r3, #10
 8001630:	d104      	bne.n	800163c <DigiTOS_IWDG_Init+0x120>
		reload = 4095; /* 1024 Hz IWDG ticking */
 8001632:	230c      	movs	r3, #12
 8001634:	18fb      	adds	r3, r7, r3
 8001636:	4a1d      	ldr	r2, [pc, #116]	; (80016ac <DigiTOS_IWDG_Init+0x190>)
 8001638:	801a      	strh	r2, [r3, #0]
 800163a:	e019      	b.n	8001670 <DigiTOS_IWDG_Init+0x154>
	} else if (timeout == DigiTOS_IWDG_Timeout_8s) {
 800163c:	1dfb      	adds	r3, r7, #7
 800163e:	781b      	ldrb	r3, [r3, #0]
 8001640:	2b0b      	cmp	r3, #11
 8001642:	d104      	bne.n	800164e <DigiTOS_IWDG_Init+0x132>
		reload = 1023; /* 128 Hz IWDG ticking */
 8001644:	230c      	movs	r3, #12
 8001646:	18fb      	adds	r3, r7, r3
 8001648:	4a16      	ldr	r2, [pc, #88]	; (80016a4 <DigiTOS_IWDG_Init+0x188>)
 800164a:	801a      	strh	r2, [r3, #0]
 800164c:	e010      	b.n	8001670 <DigiTOS_IWDG_Init+0x154>
	} else if (timeout == DigiTOS_IWDG_Timeout_16s) {
 800164e:	1dfb      	adds	r3, r7, #7
 8001650:	781b      	ldrb	r3, [r3, #0]
 8001652:	2b0c      	cmp	r3, #12
 8001654:	d104      	bne.n	8001660 <DigiTOS_IWDG_Init+0x144>
		reload = 2047; /* 128 Hz IWDG ticking */
 8001656:	230c      	movs	r3, #12
 8001658:	18fb      	adds	r3, r7, r3
 800165a:	4a13      	ldr	r2, [pc, #76]	; (80016a8 <DigiTOS_IWDG_Init+0x18c>)
 800165c:	801a      	strh	r2, [r3, #0]
 800165e:	e007      	b.n	8001670 <DigiTOS_IWDG_Init+0x154>
	} else if (timeout == DigiTOS_IWDG_Timeout_32s) {
 8001660:	1dfb      	adds	r3, r7, #7
 8001662:	781b      	ldrb	r3, [r3, #0]
 8001664:	2b0d      	cmp	r3, #13
 8001666:	d103      	bne.n	8001670 <DigiTOS_IWDG_Init+0x154>
		reload = 4095; /* 128 Hz IWDG ticking */
 8001668:	230c      	movs	r3, #12
 800166a:	18fb      	adds	r3, r7, r3
 800166c:	4a0f      	ldr	r2, [pc, #60]	; (80016ac <DigiTOS_IWDG_Init+0x190>)
 800166e:	801a      	strh	r2, [r3, #0]
	}
	
	/* Set reload */
	IWDG->RLR = reload;
 8001670:	4b09      	ldr	r3, [pc, #36]	; (8001698 <DigiTOS_IWDG_Init+0x17c>)
 8001672:	220c      	movs	r2, #12
 8001674:	18ba      	adds	r2, r7, r2
 8001676:	8812      	ldrh	r2, [r2, #0]
 8001678:	609a      	str	r2, [r3, #8]

	/* Reload IWDG counter */
	IWDG->KR = 0xAAAA;
 800167a:	4b07      	ldr	r3, [pc, #28]	; (8001698 <DigiTOS_IWDG_Init+0x17c>)
 800167c:	4a0c      	ldr	r2, [pc, #48]	; (80016b0 <DigiTOS_IWDG_Init+0x194>)
 800167e:	601a      	str	r2, [r3, #0]

	/* Enable IWDG (the LSI oscillator will be enabled by hardware) */
	IWDG->KR = 0xCCCC;
 8001680:	4b05      	ldr	r3, [pc, #20]	; (8001698 <DigiTOS_IWDG_Init+0x17c>)
 8001682:	4a0c      	ldr	r2, [pc, #48]	; (80016b4 <DigiTOS_IWDG_Init+0x198>)
 8001684:	601a      	str	r2, [r3, #0]
	
	/* Return status */
	return result;
 8001686:	230f      	movs	r3, #15
 8001688:	18fb      	adds	r3, r7, r3
 800168a:	781b      	ldrb	r3, [r3, #0]
}
 800168c:	0018      	movs	r0, r3
 800168e:	46bd      	mov	sp, r7
 8001690:	b004      	add	sp, #16
 8001692:	bd80      	pop	{r7, pc}
 8001694:	40021000 	.word	0x40021000
 8001698:	40003000 	.word	0x40003000
 800169c:	00005555 	.word	0x00005555
 80016a0:	000001ff 	.word	0x000001ff
 80016a4:	000003ff 	.word	0x000003ff
 80016a8:	000007ff 	.word	0x000007ff
 80016ac:	00000fff 	.word	0x00000fff
 80016b0:	0000aaaa 	.word	0x0000aaaa
 80016b4:	0000cccc 	.word	0x0000cccc

080016b8 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80016b8:	b580      	push	{r7, lr}
 80016ba:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80016bc:	4b07      	ldr	r3, [pc, #28]	; (80016dc <HAL_Init+0x24>)
 80016be:	681a      	ldr	r2, [r3, #0]
 80016c0:	4b06      	ldr	r3, [pc, #24]	; (80016dc <HAL_Init+0x24>)
 80016c2:	2110      	movs	r1, #16
 80016c4:	430a      	orrs	r2, r1
 80016c6:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 80016c8:	2000      	movs	r0, #0
 80016ca:	f000 f809 	bl	80016e0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80016ce:	f7ff f959 	bl	8000984 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80016d2:	2300      	movs	r3, #0
}
 80016d4:	0018      	movs	r0, r3
 80016d6:	46bd      	mov	sp, r7
 80016d8:	bd80      	pop	{r7, pc}
 80016da:	46c0      	nop			; (mov r8, r8)
 80016dc:	40022000 	.word	0x40022000

080016e0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80016e0:	b580      	push	{r7, lr}
 80016e2:	b082      	sub	sp, #8
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000U);
 80016e8:	f002 fd50 	bl	800418c <HAL_RCC_GetHCLKFreq>
 80016ec:	0002      	movs	r2, r0
 80016ee:	23fa      	movs	r3, #250	; 0xfa
 80016f0:	0099      	lsls	r1, r3, #2
 80016f2:	0010      	movs	r0, r2
 80016f4:	f7fe fd08 	bl	8000108 <__udivsi3>
 80016f8:	0003      	movs	r3, r0
 80016fa:	0018      	movs	r0, r3
 80016fc:	f000 fece 	bl	800249c <HAL_SYSTICK_Config>

  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority ,0U);
 8001700:	6879      	ldr	r1, [r7, #4]
 8001702:	2301      	movs	r3, #1
 8001704:	425b      	negs	r3, r3
 8001706:	2200      	movs	r2, #0
 8001708:	0018      	movs	r0, r3
 800170a:	f000 fe8b 	bl	8002424 <HAL_NVIC_SetPriority>

   /* Return function status */
  return HAL_OK;
 800170e:	2300      	movs	r3, #0
}
 8001710:	0018      	movs	r0, r3
 8001712:	46bd      	mov	sp, r7
 8001714:	b002      	add	sp, #8
 8001716:	bd80      	pop	{r7, pc}

08001718 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001718:	b580      	push	{r7, lr}
 800171a:	af00      	add	r7, sp, #0
  uwTick++;
 800171c:	4b03      	ldr	r3, [pc, #12]	; (800172c <HAL_IncTick+0x14>)
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	1c5a      	adds	r2, r3, #1
 8001722:	4b02      	ldr	r3, [pc, #8]	; (800172c <HAL_IncTick+0x14>)
 8001724:	601a      	str	r2, [r3, #0]
}
 8001726:	46c0      	nop			; (mov r8, r8)
 8001728:	46bd      	mov	sp, r7
 800172a:	bd80      	pop	{r7, pc}
 800172c:	20000668 	.word	0x20000668

08001730 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001730:	b580      	push	{r7, lr}
 8001732:	af00      	add	r7, sp, #0
  return uwTick;
 8001734:	4b02      	ldr	r3, [pc, #8]	; (8001740 <HAL_GetTick+0x10>)
 8001736:	681b      	ldr	r3, [r3, #0]
}
 8001738:	0018      	movs	r0, r3
 800173a:	46bd      	mov	sp, r7
 800173c:	bd80      	pop	{r7, pc}
 800173e:	46c0      	nop			; (mov r8, r8)
 8001740:	20000668 	.word	0x20000668

08001744 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(__IO uint32_t Delay)
{
 8001744:	b580      	push	{r7, lr}
 8001746:	b084      	sub	sp, #16
 8001748:	af00      	add	r7, sp, #0
 800174a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800174c:	f7ff fff0 	bl	8001730 <HAL_GetTick>
 8001750:	0003      	movs	r3, r0
 8001752:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	60fb      	str	r3, [r7, #12]
  
  /* Add a period to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001758:	68fb      	ldr	r3, [r7, #12]
 800175a:	3301      	adds	r3, #1
 800175c:	d002      	beq.n	8001764 <HAL_Delay+0x20>
  {
     wait++;
 800175e:	68fb      	ldr	r3, [r7, #12]
 8001760:	3301      	adds	r3, #1
 8001762:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8001764:	46c0      	nop			; (mov r8, r8)
 8001766:	f7ff ffe3 	bl	8001730 <HAL_GetTick>
 800176a:	0002      	movs	r2, r0
 800176c:	68bb      	ldr	r3, [r7, #8]
 800176e:	1ad3      	subs	r3, r2, r3
 8001770:	68fa      	ldr	r2, [r7, #12]
 8001772:	429a      	cmp	r2, r3
 8001774:	d8f7      	bhi.n	8001766 <HAL_Delay+0x22>
  {
  }
}
 8001776:	46c0      	nop			; (mov r8, r8)
 8001778:	46bd      	mov	sp, r7
 800177a:	b004      	add	sp, #16
 800177c:	bd80      	pop	{r7, pc}
	...

08001780 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001780:	b580      	push	{r7, lr}
 8001782:	b084      	sub	sp, #16
 8001784:	af00      	add	r7, sp, #0
 8001786:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001788:	230f      	movs	r3, #15
 800178a:	18fb      	adds	r3, r7, r3
 800178c:	2200      	movs	r2, #0
 800178e:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0U;
 8001790:	2300      	movs	r3, #0
 8001792:	60bb      	str	r3, [r7, #8]

  /* Check ADC handle */
  if(hadc == NULL)
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	2b00      	cmp	r3, #0
 8001798:	d101      	bne.n	800179e <HAL_ADC_Init+0x1e>
  {
    return HAL_ERROR;
 800179a:	2301      	movs	r3, #1
 800179c:	e234      	b.n	8001c08 <HAL_ADC_Init+0x488>
  }
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	4ac4      	ldr	r2, [pc, #784]	; (8001ab4 <HAL_ADC_Init+0x334>)
 80017a4:	4293      	cmp	r3, r2
 80017a6:	d007      	beq.n	80017b8 <HAL_ADC_Init+0x38>
 80017a8:	2374      	movs	r3, #116	; 0x74
 80017aa:	33ff      	adds	r3, #255	; 0xff
 80017ac:	001a      	movs	r2, r3
 80017ae:	4bc2      	ldr	r3, [pc, #776]	; (8001ab8 <HAL_ADC_Init+0x338>)
 80017b0:	0011      	movs	r1, r2
 80017b2:	0018      	movs	r0, r3
 80017b4:	f7ff f8dd 	bl	8000972 <assert_failed>
  assert_param(IS_ADC_CLOCKPRESCALER(hadc->Init.ClockPrescaler));
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	685b      	ldr	r3, [r3, #4]
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d012      	beq.n	80017e6 <HAL_ADC_Init+0x66>
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	685a      	ldr	r2, [r3, #4]
 80017c4:	2380      	movs	r3, #128	; 0x80
 80017c6:	05db      	lsls	r3, r3, #23
 80017c8:	429a      	cmp	r2, r3
 80017ca:	d00c      	beq.n	80017e6 <HAL_ADC_Init+0x66>
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	685a      	ldr	r2, [r3, #4]
 80017d0:	2380      	movs	r3, #128	; 0x80
 80017d2:	061b      	lsls	r3, r3, #24
 80017d4:	429a      	cmp	r2, r3
 80017d6:	d006      	beq.n	80017e6 <HAL_ADC_Init+0x66>
 80017d8:	23ba      	movs	r3, #186	; 0xba
 80017da:	005a      	lsls	r2, r3, #1
 80017dc:	4bb6      	ldr	r3, [pc, #728]	; (8001ab8 <HAL_ADC_Init+0x338>)
 80017de:	0011      	movs	r1, r2
 80017e0:	0018      	movs	r0, r3
 80017e2:	f7ff f8c6 	bl	8000972 <assert_failed>
  assert_param(IS_ADC_RESOLUTION(hadc->Init.Resolution));
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	689b      	ldr	r3, [r3, #8]
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d013      	beq.n	8001816 <HAL_ADC_Init+0x96>
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	689b      	ldr	r3, [r3, #8]
 80017f2:	2b08      	cmp	r3, #8
 80017f4:	d00f      	beq.n	8001816 <HAL_ADC_Init+0x96>
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	689b      	ldr	r3, [r3, #8]
 80017fa:	2b10      	cmp	r3, #16
 80017fc:	d00b      	beq.n	8001816 <HAL_ADC_Init+0x96>
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	689b      	ldr	r3, [r3, #8]
 8001802:	2b18      	cmp	r3, #24
 8001804:	d007      	beq.n	8001816 <HAL_ADC_Init+0x96>
 8001806:	2376      	movs	r3, #118	; 0x76
 8001808:	33ff      	adds	r3, #255	; 0xff
 800180a:	001a      	movs	r2, r3
 800180c:	4baa      	ldr	r3, [pc, #680]	; (8001ab8 <HAL_ADC_Init+0x338>)
 800180e:	0011      	movs	r1, r2
 8001810:	0018      	movs	r0, r3
 8001812:	f7ff f8ae 	bl	8000972 <assert_failed>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign)); 
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	68db      	ldr	r3, [r3, #12]
 800181a:	2b00      	cmp	r3, #0
 800181c:	d00a      	beq.n	8001834 <HAL_ADC_Init+0xb4>
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	68db      	ldr	r3, [r3, #12]
 8001822:	2b20      	cmp	r3, #32
 8001824:	d006      	beq.n	8001834 <HAL_ADC_Init+0xb4>
 8001826:	23bb      	movs	r3, #187	; 0xbb
 8001828:	005a      	lsls	r2, r3, #1
 800182a:	4ba3      	ldr	r3, [pc, #652]	; (8001ab8 <HAL_ADC_Init+0x338>)
 800182c:	0011      	movs	r1, r2
 800182e:	0018      	movs	r0, r3
 8001830:	f7ff f89f 	bl	8000972 <assert_failed>
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	691b      	ldr	r3, [r3, #16]
 8001838:	2b01      	cmp	r3, #1
 800183a:	d00b      	beq.n	8001854 <HAL_ADC_Init+0xd4>
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	691b      	ldr	r3, [r3, #16]
 8001840:	2b02      	cmp	r3, #2
 8001842:	d007      	beq.n	8001854 <HAL_ADC_Init+0xd4>
 8001844:	2378      	movs	r3, #120	; 0x78
 8001846:	33ff      	adds	r3, #255	; 0xff
 8001848:	001a      	movs	r2, r3
 800184a:	4b9b      	ldr	r3, [pc, #620]	; (8001ab8 <HAL_ADC_Init+0x338>)
 800184c:	0011      	movs	r1, r2
 800184e:	0018      	movs	r0, r3
 8001850:	f7ff f88f 	bl	8000972 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	6a1b      	ldr	r3, [r3, #32]
 8001858:	2b00      	cmp	r3, #0
 800185a:	d00a      	beq.n	8001872 <HAL_ADC_Init+0xf2>
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	6a1b      	ldr	r3, [r3, #32]
 8001860:	2b01      	cmp	r3, #1
 8001862:	d006      	beq.n	8001872 <HAL_ADC_Init+0xf2>
 8001864:	23bc      	movs	r3, #188	; 0xbc
 8001866:	005a      	lsls	r2, r3, #1
 8001868:	4b93      	ldr	r3, [pc, #588]	; (8001ab8 <HAL_ADC_Init+0x338>)
 800186a:	0011      	movs	r1, r2
 800186c:	0018      	movs	r0, r3
 800186e:	f7ff f880 	bl	8000972 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DiscontinuousConvMode));
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001876:	2b00      	cmp	r3, #0
 8001878:	d00b      	beq.n	8001892 <HAL_ADC_Init+0x112>
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800187e:	2b01      	cmp	r3, #1
 8001880:	d007      	beq.n	8001892 <HAL_ADC_Init+0x112>
 8001882:	237a      	movs	r3, #122	; 0x7a
 8001884:	33ff      	adds	r3, #255	; 0xff
 8001886:	001a      	movs	r2, r3
 8001888:	4b8b      	ldr	r3, [pc, #556]	; (8001ab8 <HAL_ADC_Init+0x338>)
 800188a:	0011      	movs	r1, r2
 800188c:	0018      	movs	r0, r3
 800188e:	f7ff f870 	bl	8000972 <assert_failed>
  assert_param(IS_ADC_EXTTRIG_EDGE(hadc->Init.ExternalTrigConvEdge));   
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001896:	2b00      	cmp	r3, #0
 8001898:	d018      	beq.n	80018cc <HAL_ADC_Init+0x14c>
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800189e:	2380      	movs	r3, #128	; 0x80
 80018a0:	00db      	lsls	r3, r3, #3
 80018a2:	429a      	cmp	r2, r3
 80018a4:	d012      	beq.n	80018cc <HAL_ADC_Init+0x14c>
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80018aa:	2380      	movs	r3, #128	; 0x80
 80018ac:	011b      	lsls	r3, r3, #4
 80018ae:	429a      	cmp	r2, r3
 80018b0:	d00c      	beq.n	80018cc <HAL_ADC_Init+0x14c>
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80018b6:	23c0      	movs	r3, #192	; 0xc0
 80018b8:	011b      	lsls	r3, r3, #4
 80018ba:	429a      	cmp	r2, r3
 80018bc:	d006      	beq.n	80018cc <HAL_ADC_Init+0x14c>
 80018be:	23bd      	movs	r3, #189	; 0xbd
 80018c0:	005a      	lsls	r2, r3, #1
 80018c2:	4b7d      	ldr	r3, [pc, #500]	; (8001ab8 <HAL_ADC_Init+0x338>)
 80018c4:	0011      	movs	r1, r2
 80018c6:	0018      	movs	r0, r3
 80018c8:	f7ff f853 	bl	8000972 <assert_failed>
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));   
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d01f      	beq.n	8001914 <HAL_ADC_Init+0x194>
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018d8:	2b40      	cmp	r3, #64	; 0x40
 80018da:	d01b      	beq.n	8001914 <HAL_ADC_Init+0x194>
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018e0:	2b80      	cmp	r3, #128	; 0x80
 80018e2:	d017      	beq.n	8001914 <HAL_ADC_Init+0x194>
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018e8:	2bc0      	cmp	r3, #192	; 0xc0
 80018ea:	d013      	beq.n	8001914 <HAL_ADC_Init+0x194>
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80018f0:	2380      	movs	r3, #128	; 0x80
 80018f2:	005b      	lsls	r3, r3, #1
 80018f4:	429a      	cmp	r2, r3
 80018f6:	d00d      	beq.n	8001914 <HAL_ADC_Init+0x194>
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80018fc:	23c2      	movs	r3, #194	; 0xc2
 80018fe:	33ff      	adds	r3, #255	; 0xff
 8001900:	429a      	cmp	r2, r3
 8001902:	d007      	beq.n	8001914 <HAL_ADC_Init+0x194>
 8001904:	237c      	movs	r3, #124	; 0x7c
 8001906:	33ff      	adds	r3, #255	; 0xff
 8001908:	001a      	movs	r2, r3
 800190a:	4b6b      	ldr	r3, [pc, #428]	; (8001ab8 <HAL_ADC_Init+0x338>)
 800190c:	0011      	movs	r1, r2
 800190e:	0018      	movs	r0, r3
 8001910:	f7ff f82f 	bl	8000972 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001918:	2b00      	cmp	r3, #0
 800191a:	d00a      	beq.n	8001932 <HAL_ADC_Init+0x1b2>
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001920:	2b01      	cmp	r3, #1
 8001922:	d006      	beq.n	8001932 <HAL_ADC_Init+0x1b2>
 8001924:	23be      	movs	r3, #190	; 0xbe
 8001926:	005a      	lsls	r2, r3, #1
 8001928:	4b63      	ldr	r3, [pc, #396]	; (8001ab8 <HAL_ADC_Init+0x338>)
 800192a:	0011      	movs	r1, r2
 800192c:	0018      	movs	r0, r3
 800192e:	f7ff f820 	bl	8000972 <assert_failed>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	695b      	ldr	r3, [r3, #20]
 8001936:	2b04      	cmp	r3, #4
 8001938:	d00b      	beq.n	8001952 <HAL_ADC_Init+0x1d2>
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	695b      	ldr	r3, [r3, #20]
 800193e:	2b08      	cmp	r3, #8
 8001940:	d007      	beq.n	8001952 <HAL_ADC_Init+0x1d2>
 8001942:	237e      	movs	r3, #126	; 0x7e
 8001944:	33ff      	adds	r3, #255	; 0xff
 8001946:	001a      	movs	r2, r3
 8001948:	4b5b      	ldr	r3, [pc, #364]	; (8001ab8 <HAL_ADC_Init+0x338>)
 800194a:	0011      	movs	r1, r2
 800194c:	0018      	movs	r0, r3
 800194e:	f7ff f810 	bl	8000972 <assert_failed>
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001956:	2b01      	cmp	r3, #1
 8001958:	d00a      	beq.n	8001970 <HAL_ADC_Init+0x1f0>
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800195e:	2b00      	cmp	r3, #0
 8001960:	d006      	beq.n	8001970 <HAL_ADC_Init+0x1f0>
 8001962:	23bf      	movs	r3, #191	; 0xbf
 8001964:	005a      	lsls	r2, r3, #1
 8001966:	4b54      	ldr	r3, [pc, #336]	; (8001ab8 <HAL_ADC_Init+0x338>)
 8001968:	0011      	movs	r1, r2
 800196a:	0018      	movs	r0, r3
 800196c:	f7ff f801 	bl	8000972 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	699b      	ldr	r3, [r3, #24]
 8001974:	2b00      	cmp	r3, #0
 8001976:	d00b      	beq.n	8001990 <HAL_ADC_Init+0x210>
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	699b      	ldr	r3, [r3, #24]
 800197c:	2b01      	cmp	r3, #1
 800197e:	d007      	beq.n	8001990 <HAL_ADC_Init+0x210>
 8001980:	2380      	movs	r3, #128	; 0x80
 8001982:	33ff      	adds	r3, #255	; 0xff
 8001984:	001a      	movs	r2, r3
 8001986:	4b4c      	ldr	r3, [pc, #304]	; (8001ab8 <HAL_ADC_Init+0x338>)
 8001988:	0011      	movs	r1, r2
 800198a:	0018      	movs	r0, r3
 800198c:	f7fe fff1 	bl	8000972 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoPowerOff));
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	69db      	ldr	r3, [r3, #28]
 8001994:	2b00      	cmp	r3, #0
 8001996:	d00a      	beq.n	80019ae <HAL_ADC_Init+0x22e>
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	69db      	ldr	r3, [r3, #28]
 800199c:	2b01      	cmp	r3, #1
 800199e:	d006      	beq.n	80019ae <HAL_ADC_Init+0x22e>
 80019a0:	23c0      	movs	r3, #192	; 0xc0
 80019a2:	005a      	lsls	r2, r3, #1
 80019a4:	4b44      	ldr	r3, [pc, #272]	; (8001ab8 <HAL_ADC_Init+0x338>)
 80019a6:	0011      	movs	r1, r2
 80019a8:	0018      	movs	r0, r3
 80019aa:	f7fe ffe2 	bl	8000972 <assert_failed>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d10a      	bne.n	80019cc <HAL_ADC_Init+0x24c>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	2200      	movs	r2, #0
 80019ba:	649a      	str	r2, [r3, #72]	; 0x48
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	2240      	movs	r2, #64	; 0x40
 80019c0:	2100      	movs	r1, #0
 80019c2:	5499      	strb	r1, [r3, r2]
    
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	0018      	movs	r0, r3
 80019c8:	f7fe fcb8 	bl	800033c <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */ 
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019d0:	2210      	movs	r2, #16
 80019d2:	4013      	ands	r3, r2
 80019d4:	d000      	beq.n	80019d8 <HAL_ADC_Init+0x258>
 80019d6:	e10a      	b.n	8001bee <HAL_ADC_Init+0x46e>
 80019d8:	230f      	movs	r3, #15
 80019da:	18fb      	adds	r3, r7, r3
 80019dc:	781b      	ldrb	r3, [r3, #0]
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d000      	beq.n	80019e4 <HAL_ADC_Init+0x264>
 80019e2:	e104      	b.n	8001bee <HAL_ADC_Init+0x46e>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	689b      	ldr	r3, [r3, #8]
 80019ea:	2204      	movs	r2, #4
 80019ec:	4013      	ands	r3, r2
      (tmp_hal_status == HAL_OK)                                &&
 80019ee:	d000      	beq.n	80019f2 <HAL_ADC_Init+0x272>
 80019f0:	e0fd      	b.n	8001bee <HAL_ADC_Init+0x46e>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019f6:	4a31      	ldr	r2, [pc, #196]	; (8001abc <HAL_ADC_Init+0x33c>)
 80019f8:	4013      	ands	r3, r2
 80019fa:	2202      	movs	r2, #2
 80019fc:	431a      	orrs	r2, r3
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	645a      	str	r2, [r3, #68]	; 0x44
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - ADC clock mode                                                      */
    /*  - ADC clock prescaler                                                 */
    /*  - ADC resolution                                                      */
    if (ADC_IS_ENABLE(hadc) == RESET)
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	689b      	ldr	r3, [r3, #8]
 8001a08:	2203      	movs	r2, #3
 8001a0a:	4013      	ands	r3, r2
 8001a0c:	2b01      	cmp	r3, #1
 8001a0e:	d112      	bne.n	8001a36 <HAL_ADC_Init+0x2b6>
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	2201      	movs	r2, #1
 8001a18:	4013      	ands	r3, r2
 8001a1a:	2b01      	cmp	r3, #1
 8001a1c:	d009      	beq.n	8001a32 <HAL_ADC_Init+0x2b2>
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	68da      	ldr	r2, [r3, #12]
 8001a24:	2380      	movs	r3, #128	; 0x80
 8001a26:	021b      	lsls	r3, r3, #8
 8001a28:	401a      	ands	r2, r3
 8001a2a:	2380      	movs	r3, #128	; 0x80
 8001a2c:	021b      	lsls	r3, r3, #8
 8001a2e:	429a      	cmp	r2, r3
 8001a30:	d101      	bne.n	8001a36 <HAL_ADC_Init+0x2b6>
 8001a32:	2301      	movs	r3, #1
 8001a34:	e000      	b.n	8001a38 <HAL_ADC_Init+0x2b8>
 8001a36:	2300      	movs	r3, #0
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d116      	bne.n	8001a6a <HAL_ADC_Init+0x2ea>
      /* parameters):                                                         */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() )                              */
     
      /* Configuration of ADC resolution                                      */
      MODIFY_REG(hadc->Instance->CFGR1,
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	68db      	ldr	r3, [r3, #12]
 8001a42:	2218      	movs	r2, #24
 8001a44:	4393      	bics	r3, r2
 8001a46:	0019      	movs	r1, r3
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	689a      	ldr	r2, [r3, #8]
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	430a      	orrs	r2, r1
 8001a52:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_RES        ,
                 hadc->Init.Resolution );
      
      /* Configuration of ADC clock mode: clock source AHB or HSI with        */
      /* selectable prescaler                                                 */
      MODIFY_REG(hadc->Instance->CFGR2    ,
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	691b      	ldr	r3, [r3, #16]
 8001a5a:	009b      	lsls	r3, r3, #2
 8001a5c:	0899      	lsrs	r1, r3, #2
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	685a      	ldr	r2, [r3, #4]
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	430a      	orrs	r2, r1
 8001a68:	611a      	str	r2, [r3, #16]
    /*  - external trigger polarity                                           */
    /*  - data alignment                                                      */
    /*  - resolution                                                          */
    /*  - scan direction                                                      */
    /*  - DMA continuous request                                              */
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_DISCEN  |
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	68da      	ldr	r2, [r3, #12]
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	4912      	ldr	r1, [pc, #72]	; (8001ac0 <HAL_ADC_Init+0x340>)
 8001a76:	400a      	ands	r2, r1
 8001a78:	60da      	str	r2, [r3, #12]
                                ADC_CFGR1_EXTEN   |
                                ADC_CFGR1_ALIGN   |
                                ADC_CFGR1_SCANDIR |
                                ADC_CFGR1_DMACFG   );

    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT(hadc->Init.LowPowerAutoWait)        |
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	699b      	ldr	r3, [r3, #24]
 8001a7e:	039a      	lsls	r2, r3, #14
                 ADC_CFGR1_AUTOOFF(hadc->Init.LowPowerAutoPowerOff)     |
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	69db      	ldr	r3, [r3, #28]
 8001a84:	03db      	lsls	r3, r3, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT(hadc->Init.LowPowerAutoWait)        |
 8001a86:	431a      	orrs	r2, r3
                 ADC_CFGR1_CONTINUOUS(hadc->Init.ContinuousConvMode)    |
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	6a1b      	ldr	r3, [r3, #32]
 8001a8c:	035b      	lsls	r3, r3, #13
                 ADC_CFGR1_AUTOOFF(hadc->Init.LowPowerAutoPowerOff)     |
 8001a8e:	431a      	orrs	r2, r3
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                  |
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001a94:	2b01      	cmp	r3, #1
 8001a96:	d002      	beq.n	8001a9e <HAL_ADC_Init+0x31e>
 8001a98:	2380      	movs	r3, #128	; 0x80
 8001a9a:	015b      	lsls	r3, r3, #5
 8001a9c:	e000      	b.n	8001aa0 <HAL_ADC_Init+0x320>
 8001a9e:	2300      	movs	r3, #0
                 ADC_CFGR1_CONTINUOUS(hadc->Init.ContinuousConvMode)    |
 8001aa0:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                   |
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	68db      	ldr	r3, [r3, #12]
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                  |
 8001aa6:	431a      	orrs	r2, r3
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                   |
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	691b      	ldr	r3, [r3, #16]
 8001aac:	2b02      	cmp	r3, #2
 8001aae:	d109      	bne.n	8001ac4 <HAL_ADC_Init+0x344>
 8001ab0:	2304      	movs	r3, #4
 8001ab2:	e008      	b.n	8001ac6 <HAL_ADC_Init+0x346>
 8001ab4:	40012400 	.word	0x40012400
 8001ab8:	08006e94 	.word	0x08006e94
 8001abc:	fffffefd 	.word	0xfffffefd
 8001ac0:	fffe0219 	.word	0xfffe0219
 8001ac4:	2300      	movs	r3, #0
                 hadc->Init.DataAlign                                   |
 8001ac6:	431a      	orrs	r2, r3
                 ADC_CFGR1_DMACONTREQ(hadc->Init.DMAContinuousRequests)  );
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001acc:	005b      	lsls	r3, r3, #1
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                   |
 8001ace:	4313      	orrs	r3, r2
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT(hadc->Init.LowPowerAutoWait)        |
 8001ad0:	68ba      	ldr	r2, [r7, #8]
 8001ad2:	4313      	orrs	r3, r2
 8001ad4:	60bb      	str	r3, [r7, #8]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ada:	2b01      	cmp	r3, #1
 8001adc:	d115      	bne.n	8001b0a <HAL_ADC_Init+0x38a>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	6a1b      	ldr	r3, [r3, #32]
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d105      	bne.n	8001af2 <HAL_ADC_Init+0x372>
      {
        /* Enable the selected ADC group regular discontinuous mode */
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8001ae6:	68bb      	ldr	r3, [r7, #8]
 8001ae8:	2280      	movs	r2, #128	; 0x80
 8001aea:	0252      	lsls	r2, r2, #9
 8001aec:	4313      	orrs	r3, r2
 8001aee:	60bb      	str	r3, [r7, #8]
 8001af0:	e00b      	b.n	8001b0a <HAL_ADC_Init+0x38a>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001af6:	2220      	movs	r2, #32
 8001af8:	431a      	orrs	r2, r3
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	645a      	str	r2, [r3, #68]	; 0x44
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001b02:	2201      	movs	r2, #1
 8001b04:	431a      	orrs	r2, r3
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	649a      	str	r2, [r3, #72]	; 0x48
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001b0e:	23c2      	movs	r3, #194	; 0xc2
 8001b10:	33ff      	adds	r3, #255	; 0xff
 8001b12:	429a      	cmp	r2, r3
 8001b14:	d007      	beq.n	8001b26 <HAL_ADC_Init+0x3a6>
    {
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	6a9a      	ldr	r2, [r3, #40]	; 0x28
                    hadc->Init.ExternalTrigConvEdge );
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8001b1e:	4313      	orrs	r3, r2
 8001b20:	68ba      	ldr	r2, [r7, #8]
 8001b22:	4313      	orrs	r3, r2
 8001b24:	60bb      	str	r3, [r7, #8]
    }
    
    /* Update ADC configuration register with previous settings */
    hadc->Instance->CFGR1 |= tmpCFGR1;
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	68d9      	ldr	r1, [r3, #12]
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	68ba      	ldr	r2, [r7, #8]
 8001b32:	430a      	orrs	r2, r1
 8001b34:	60da      	str	r2, [r3, #12]
    /* Management of parameters "SamplingTimeCommon" and "SamplingTime"       */
    /* (obsolete): sampling time set in this function if parameter            */
    /*  "SamplingTimeCommon" has been set to a valid sampling time.           */
    /* Otherwise, sampling time is set into ADC channel initialization        */
    /* structure with parameter "SamplingTime" (obsolete).                    */
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001b3a:	2380      	movs	r3, #128	; 0x80
 8001b3c:	055b      	lsls	r3, r3, #21
 8001b3e:	429a      	cmp	r2, r3
 8001b40:	d01b      	beq.n	8001b7a <HAL_ADC_Init+0x3fa>
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b46:	2b01      	cmp	r3, #1
 8001b48:	d017      	beq.n	8001b7a <HAL_ADC_Init+0x3fa>
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b4e:	2b02      	cmp	r3, #2
 8001b50:	d013      	beq.n	8001b7a <HAL_ADC_Init+0x3fa>
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b56:	2b03      	cmp	r3, #3
 8001b58:	d00f      	beq.n	8001b7a <HAL_ADC_Init+0x3fa>
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b5e:	2b04      	cmp	r3, #4
 8001b60:	d00b      	beq.n	8001b7a <HAL_ADC_Init+0x3fa>
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b66:	2b05      	cmp	r3, #5
 8001b68:	d007      	beq.n	8001b7a <HAL_ADC_Init+0x3fa>
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b6e:	2b06      	cmp	r3, #6
 8001b70:	d003      	beq.n	8001b7a <HAL_ADC_Init+0x3fa>
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b76:	2b07      	cmp	r3, #7
 8001b78:	d112      	bne.n	8001ba0 <HAL_ADC_Init+0x420>
    {
      /* Channel sampling time configuration */
      /* Clear the old sample time */
      hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	695a      	ldr	r2, [r3, #20]
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	2107      	movs	r1, #7
 8001b86:	438a      	bics	r2, r1
 8001b88:	615a      	str	r2, [r3, #20]
      
      /* Set the new sample time */
      hadc->Instance->SMPR |= ADC_SMPR_SET(hadc->Init.SamplingTimeCommon);
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	6959      	ldr	r1, [r3, #20]
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b94:	2207      	movs	r2, #7
 8001b96:	401a      	ands	r2, r3
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	430a      	orrs	r2, r1
 8001b9e:	615a      	str	r2, [r3, #20]
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CFGR1 (excluding analog watchdog configuration: */
    /* set into separate dedicated function, and bits of ADC resolution set   */
    /* out of temporary variable 'tmpCFGR1').                                 */
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	68db      	ldr	r3, [r3, #12]
 8001ba6:	4a1a      	ldr	r2, [pc, #104]	; (8001c10 <HAL_ADC_Init+0x490>)
 8001ba8:	4013      	ands	r3, r2
 8001baa:	68ba      	ldr	r2, [r7, #8]
 8001bac:	429a      	cmp	r2, r3
 8001bae:	d10b      	bne.n	8001bc8 <HAL_ADC_Init+0x448>
         == tmpCFGR1)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	2200      	movs	r2, #0
 8001bb4:	649a      	str	r2, [r3, #72]	; 0x48
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bba:	2203      	movs	r2, #3
 8001bbc:	4393      	bics	r3, r2
 8001bbe:	2201      	movs	r2, #1
 8001bc0:	431a      	orrs	r2, r3
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	645a      	str	r2, [r3, #68]	; 0x44
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8001bc6:	e01c      	b.n	8001c02 <HAL_ADC_Init+0x482>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bcc:	2212      	movs	r2, #18
 8001bce:	4393      	bics	r3, r2
 8001bd0:	2210      	movs	r2, #16
 8001bd2:	431a      	orrs	r2, r3
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	645a      	str	r2, [r3, #68]	; 0x44
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001bdc:	2201      	movs	r2, #1
 8001bde:	431a      	orrs	r2, r3
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	649a      	str	r2, [r3, #72]	; 0x48
      
      tmp_hal_status = HAL_ERROR;
 8001be4:	230f      	movs	r3, #15
 8001be6:	18fb      	adds	r3, r7, r3
 8001be8:	2201      	movs	r2, #1
 8001bea:	701a      	strb	r2, [r3, #0]
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8001bec:	e009      	b.n	8001c02 <HAL_ADC_Init+0x482>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bf2:	2210      	movs	r2, #16
 8001bf4:	431a      	orrs	r2, r3
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	645a      	str	r2, [r3, #68]	; 0x44
        
    tmp_hal_status = HAL_ERROR;
 8001bfa:	230f      	movs	r3, #15
 8001bfc:	18fb      	adds	r3, r7, r3
 8001bfe:	2201      	movs	r2, #1
 8001c00:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001c02:	230f      	movs	r3, #15
 8001c04:	18fb      	adds	r3, r7, r3
 8001c06:	781b      	ldrb	r3, [r3, #0]
}
 8001c08:	0018      	movs	r0, r3
 8001c0a:	46bd      	mov	sp, r7
 8001c0c:	b004      	add	sp, #16
 8001c0e:	bd80      	pop	{r7, pc}
 8001c10:	833fffe7 	.word	0x833fffe7

08001c14 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8001c14:	b590      	push	{r4, r7, lr}
 8001c16:	b087      	sub	sp, #28
 8001c18:	af00      	add	r7, sp, #0
 8001c1a:	60f8      	str	r0, [r7, #12]
 8001c1c:	60b9      	str	r1, [r7, #8]
 8001c1e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001c20:	2317      	movs	r3, #23
 8001c22:	18fb      	adds	r3, r7, r3
 8001c24:	2200      	movs	r2, #0
 8001c26:	701a      	strb	r2, [r3, #0]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	4a3c      	ldr	r2, [pc, #240]	; (8001d20 <HAL_ADC_Start_DMA+0x10c>)
 8001c2e:	4293      	cmp	r3, r2
 8001c30:	d005      	beq.n	8001c3e <HAL_ADC_Start_DMA+0x2a>
 8001c32:	4a3c      	ldr	r2, [pc, #240]	; (8001d24 <HAL_ADC_Start_DMA+0x110>)
 8001c34:	4b3c      	ldr	r3, [pc, #240]	; (8001d28 <HAL_ADC_Start_DMA+0x114>)
 8001c36:	0011      	movs	r1, r2
 8001c38:	0018      	movs	r0, r3
 8001c3a:	f7fe fe9a 	bl	8000972 <assert_failed>

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001c3e:	68fb      	ldr	r3, [r7, #12]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	689b      	ldr	r3, [r3, #8]
 8001c44:	2204      	movs	r2, #4
 8001c46:	4013      	ands	r3, r2
 8001c48:	d15e      	bne.n	8001d08 <HAL_ADC_Start_DMA+0xf4>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001c4a:	68fb      	ldr	r3, [r7, #12]
 8001c4c:	2240      	movs	r2, #64	; 0x40
 8001c4e:	5c9b      	ldrb	r3, [r3, r2]
 8001c50:	2b01      	cmp	r3, #1
 8001c52:	d101      	bne.n	8001c58 <HAL_ADC_Start_DMA+0x44>
 8001c54:	2302      	movs	r3, #2
 8001c56:	e05e      	b.n	8001d16 <HAL_ADC_Start_DMA+0x102>
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	2240      	movs	r2, #64	; 0x40
 8001c5c:	2101      	movs	r1, #1
 8001c5e:	5499      	strb	r1, [r3, r2]

    /* Enable the ADC peripheral */
    /* If low power mode AutoPowerOff is enabled, power-on/off phases are       */
    /* performed automatically by hardware.                                     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	69db      	ldr	r3, [r3, #28]
 8001c64:	2b01      	cmp	r3, #1
 8001c66:	d007      	beq.n	8001c78 <HAL_ADC_Start_DMA+0x64>
    {
      tmp_hal_status = ADC_Enable(hadc);
 8001c68:	2317      	movs	r3, #23
 8001c6a:	18fc      	adds	r4, r7, r3
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	0018      	movs	r0, r3
 8001c70:	f000 fa30 	bl	80020d4 <ADC_Enable>
 8001c74:	0003      	movs	r3, r0
 8001c76:	7023      	strb	r3, [r4, #0]
    }
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001c78:	2317      	movs	r3, #23
 8001c7a:	18fb      	adds	r3, r7, r3
 8001c7c:	781b      	ldrb	r3, [r3, #0]
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d146      	bne.n	8001d10 <HAL_ADC_Start_DMA+0xfc>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001c82:	68fb      	ldr	r3, [r7, #12]
 8001c84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c86:	4a29      	ldr	r2, [pc, #164]	; (8001d2c <HAL_ADC_Start_DMA+0x118>)
 8001c88:	4013      	ands	r3, r2
 8001c8a:	2280      	movs	r2, #128	; 0x80
 8001c8c:	0052      	lsls	r2, r2, #1
 8001c8e:	431a      	orrs	r2, r3
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	645a      	str	r2, [r3, #68]	; 0x44
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	2200      	movs	r2, #0
 8001c98:	649a      	str	r2, [r3, #72]	; 0x48
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	2240      	movs	r2, #64	; 0x40
 8001c9e:	2100      	movs	r1, #0
 8001ca0:	5499      	strb	r1, [r3, r2]

      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001ca2:	68fb      	ldr	r3, [r7, #12]
 8001ca4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ca6:	4a22      	ldr	r2, [pc, #136]	; (8001d30 <HAL_ADC_Start_DMA+0x11c>)
 8001ca8:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001caa:	68fb      	ldr	r3, [r7, #12]
 8001cac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001cae:	4a21      	ldr	r2, [pc, #132]	; (8001d34 <HAL_ADC_Start_DMA+0x120>)
 8001cb0:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001cb6:	4a20      	ldr	r2, [pc, #128]	; (8001d38 <HAL_ADC_Start_DMA+0x124>)
 8001cb8:	631a      	str	r2, [r3, #48]	; 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001cba:	68fb      	ldr	r3, [r7, #12]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	221c      	movs	r2, #28
 8001cc0:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC overrun interrupt */
      __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	685a      	ldr	r2, [r3, #4]
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	2110      	movs	r1, #16
 8001cce:	430a      	orrs	r2, r1
 8001cd0:	605a      	str	r2, [r3, #4]
      
      /* Enable ADC DMA mode */
      hadc->Instance->CFGR1 |= ADC_CFGR1_DMAEN;
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	68da      	ldr	r2, [r3, #12]
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	2101      	movs	r1, #1
 8001cde:	430a      	orrs	r2, r1
 8001ce0:	60da      	str	r2, [r3, #12]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	3340      	adds	r3, #64	; 0x40
 8001cec:	0019      	movs	r1, r3
 8001cee:	68ba      	ldr	r2, [r7, #8]
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	f000 ff25 	bl	8002b40 <HAL_DMA_Start_IT>
           
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      hadc->Instance->CR |= ADC_CR_ADSTART;
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	689a      	ldr	r2, [r3, #8]
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	2104      	movs	r1, #4
 8001d02:	430a      	orrs	r2, r1
 8001d04:	609a      	str	r2, [r3, #8]
 8001d06:	e003      	b.n	8001d10 <HAL_ADC_Start_DMA+0xfc>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001d08:	2317      	movs	r3, #23
 8001d0a:	18fb      	adds	r3, r7, r3
 8001d0c:	2202      	movs	r2, #2
 8001d0e:	701a      	strb	r2, [r3, #0]
  }
    
  /* Return function status */
  return tmp_hal_status;
 8001d10:	2317      	movs	r3, #23
 8001d12:	18fb      	adds	r3, r7, r3
 8001d14:	781b      	ldrb	r3, [r3, #0]
}
 8001d16:	0018      	movs	r0, r3
 8001d18:	46bd      	mov	sp, r7
 8001d1a:	b007      	add	sp, #28
 8001d1c:	bd90      	pop	{r4, r7, pc}
 8001d1e:	46c0      	nop			; (mov r8, r8)
 8001d20:	40012400 	.word	0x40012400
 8001d24:	000004bc 	.word	0x000004bc
 8001d28:	08006e94 	.word	0x08006e94
 8001d2c:	fffff0fe 	.word	0xfffff0fe
 8001d30:	080021cd 	.word	0x080021cd
 8001d34:	08002281 	.word	0x08002281
 8001d38:	0800229f 	.word	0x0800229f

08001d3c <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001d3c:	b580      	push	{r7, lr}
 8001d3e:	b082      	sub	sp, #8
 8001d40:	af00      	add	r7, sp, #0
 8001d42:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8001d44:	46c0      	nop			; (mov r8, r8)
 8001d46:	46bd      	mov	sp, r7
 8001d48:	b002      	add	sp, #8
 8001d4a:	bd80      	pop	{r7, pc}

08001d4c <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001d4c:	b580      	push	{r7, lr}
 8001d4e:	b082      	sub	sp, #8
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8001d54:	46c0      	nop			; (mov r8, r8)
 8001d56:	46bd      	mov	sp, r7
 8001d58:	b002      	add	sp, #8
 8001d5a:	bd80      	pop	{r7, pc}

08001d5c <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001d5c:	b580      	push	{r7, lr}
 8001d5e:	b084      	sub	sp, #16
 8001d60:	af00      	add	r7, sp, #0
 8001d62:	6078      	str	r0, [r7, #4]
 8001d64:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001d66:	230f      	movs	r3, #15
 8001d68:	18fb      	adds	r3, r7, r3
 8001d6a:	2200      	movs	r2, #0
 8001d6c:	701a      	strb	r2, [r3, #0]
  __IO uint32_t wait_loop_index = 0U;
 8001d6e:	2300      	movs	r3, #0
 8001d70:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	4abc      	ldr	r2, [pc, #752]	; (8002068 <HAL_ADC_ConfigChannel+0x30c>)
 8001d78:	4293      	cmp	r3, r2
 8001d7a:	d005      	beq.n	8001d88 <HAL_ADC_ConfigChannel+0x2c>
 8001d7c:	4abb      	ldr	r2, [pc, #748]	; (800206c <HAL_ADC_ConfigChannel+0x310>)
 8001d7e:	4bbc      	ldr	r3, [pc, #752]	; (8002070 <HAL_ADC_ConfigChannel+0x314>)
 8001d80:	0011      	movs	r1, r2
 8001d82:	0018      	movs	r0, r3
 8001d84:	f7fe fdf5 	bl	8000972 <assert_failed>
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
 8001d88:	683b      	ldr	r3, [r7, #0]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d04d      	beq.n	8001e2c <HAL_ADC_ConfigChannel+0xd0>
 8001d90:	683b      	ldr	r3, [r7, #0]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	2b01      	cmp	r3, #1
 8001d96:	d049      	beq.n	8001e2c <HAL_ADC_ConfigChannel+0xd0>
 8001d98:	683b      	ldr	r3, [r7, #0]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	2b02      	cmp	r3, #2
 8001d9e:	d045      	beq.n	8001e2c <HAL_ADC_ConfigChannel+0xd0>
 8001da0:	683b      	ldr	r3, [r7, #0]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	2b03      	cmp	r3, #3
 8001da6:	d041      	beq.n	8001e2c <HAL_ADC_ConfigChannel+0xd0>
 8001da8:	683b      	ldr	r3, [r7, #0]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	2b04      	cmp	r3, #4
 8001dae:	d03d      	beq.n	8001e2c <HAL_ADC_ConfigChannel+0xd0>
 8001db0:	683b      	ldr	r3, [r7, #0]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	2b05      	cmp	r3, #5
 8001db6:	d039      	beq.n	8001e2c <HAL_ADC_ConfigChannel+0xd0>
 8001db8:	683b      	ldr	r3, [r7, #0]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	2b06      	cmp	r3, #6
 8001dbe:	d035      	beq.n	8001e2c <HAL_ADC_ConfigChannel+0xd0>
 8001dc0:	683b      	ldr	r3, [r7, #0]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	2b07      	cmp	r3, #7
 8001dc6:	d031      	beq.n	8001e2c <HAL_ADC_ConfigChannel+0xd0>
 8001dc8:	683b      	ldr	r3, [r7, #0]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	2b08      	cmp	r3, #8
 8001dce:	d02d      	beq.n	8001e2c <HAL_ADC_ConfigChannel+0xd0>
 8001dd0:	683b      	ldr	r3, [r7, #0]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	2b09      	cmp	r3, #9
 8001dd6:	d029      	beq.n	8001e2c <HAL_ADC_ConfigChannel+0xd0>
 8001dd8:	683b      	ldr	r3, [r7, #0]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	2b0a      	cmp	r3, #10
 8001dde:	d025      	beq.n	8001e2c <HAL_ADC_ConfigChannel+0xd0>
 8001de0:	683b      	ldr	r3, [r7, #0]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	2b0b      	cmp	r3, #11
 8001de6:	d021      	beq.n	8001e2c <HAL_ADC_ConfigChannel+0xd0>
 8001de8:	683b      	ldr	r3, [r7, #0]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	2b0c      	cmp	r3, #12
 8001dee:	d01d      	beq.n	8001e2c <HAL_ADC_ConfigChannel+0xd0>
 8001df0:	683b      	ldr	r3, [r7, #0]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	2b0d      	cmp	r3, #13
 8001df6:	d019      	beq.n	8001e2c <HAL_ADC_ConfigChannel+0xd0>
 8001df8:	683b      	ldr	r3, [r7, #0]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	2b0e      	cmp	r3, #14
 8001dfe:	d015      	beq.n	8001e2c <HAL_ADC_ConfigChannel+0xd0>
 8001e00:	683b      	ldr	r3, [r7, #0]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	2b0f      	cmp	r3, #15
 8001e06:	d011      	beq.n	8001e2c <HAL_ADC_ConfigChannel+0xd0>
 8001e08:	683b      	ldr	r3, [r7, #0]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	2b10      	cmp	r3, #16
 8001e0e:	d00d      	beq.n	8001e2c <HAL_ADC_ConfigChannel+0xd0>
 8001e10:	683b      	ldr	r3, [r7, #0]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	2b11      	cmp	r3, #17
 8001e16:	d009      	beq.n	8001e2c <HAL_ADC_ConfigChannel+0xd0>
 8001e18:	683b      	ldr	r3, [r7, #0]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	2b12      	cmp	r3, #18
 8001e1e:	d005      	beq.n	8001e2c <HAL_ADC_ConfigChannel+0xd0>
 8001e20:	4a94      	ldr	r2, [pc, #592]	; (8002074 <HAL_ADC_ConfigChannel+0x318>)
 8001e22:	4b93      	ldr	r3, [pc, #588]	; (8002070 <HAL_ADC_ConfigChannel+0x314>)
 8001e24:	0011      	movs	r1, r2
 8001e26:	0018      	movs	r0, r3
 8001e28:	f7fe fda3 	bl	8000972 <assert_failed>
  assert_param(IS_ADC_RANK(sConfig->Rank));
 8001e2c:	683b      	ldr	r3, [r7, #0]
 8001e2e:	685a      	ldr	r2, [r3, #4]
 8001e30:	2380      	movs	r3, #128	; 0x80
 8001e32:	015b      	lsls	r3, r3, #5
 8001e34:	429a      	cmp	r2, r3
 8001e36:	d00a      	beq.n	8001e4e <HAL_ADC_ConfigChannel+0xf2>
 8001e38:	683b      	ldr	r3, [r7, #0]
 8001e3a:	685b      	ldr	r3, [r3, #4]
 8001e3c:	4a8e      	ldr	r2, [pc, #568]	; (8002078 <HAL_ADC_ConfigChannel+0x31c>)
 8001e3e:	4293      	cmp	r3, r2
 8001e40:	d005      	beq.n	8001e4e <HAL_ADC_ConfigChannel+0xf2>
 8001e42:	4a8e      	ldr	r2, [pc, #568]	; (800207c <HAL_ADC_ConfigChannel+0x320>)
 8001e44:	4b8a      	ldr	r3, [pc, #552]	; (8002070 <HAL_ADC_ConfigChannel+0x314>)
 8001e46:	0011      	movs	r1, r2
 8001e48:	0018      	movs	r0, r3
 8001e4a:	f7fe fd92 	bl	8000972 <assert_failed>
  
  if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001e52:	2380      	movs	r3, #128	; 0x80
 8001e54:	055b      	lsls	r3, r3, #21
 8001e56:	429a      	cmp	r2, r3
 8001e58:	d043      	beq.n	8001ee2 <HAL_ADC_ConfigChannel+0x186>
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e5e:	2b01      	cmp	r3, #1
 8001e60:	d03f      	beq.n	8001ee2 <HAL_ADC_ConfigChannel+0x186>
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e66:	2b02      	cmp	r3, #2
 8001e68:	d03b      	beq.n	8001ee2 <HAL_ADC_ConfigChannel+0x186>
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e6e:	2b03      	cmp	r3, #3
 8001e70:	d037      	beq.n	8001ee2 <HAL_ADC_ConfigChannel+0x186>
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e76:	2b04      	cmp	r3, #4
 8001e78:	d033      	beq.n	8001ee2 <HAL_ADC_ConfigChannel+0x186>
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e7e:	2b05      	cmp	r3, #5
 8001e80:	d02f      	beq.n	8001ee2 <HAL_ADC_ConfigChannel+0x186>
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e86:	2b06      	cmp	r3, #6
 8001e88:	d02b      	beq.n	8001ee2 <HAL_ADC_ConfigChannel+0x186>
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e8e:	2b07      	cmp	r3, #7
 8001e90:	d027      	beq.n	8001ee2 <HAL_ADC_ConfigChannel+0x186>
  {
    assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
 8001e92:	683b      	ldr	r3, [r7, #0]
 8001e94:	689a      	ldr	r2, [r3, #8]
 8001e96:	2380      	movs	r3, #128	; 0x80
 8001e98:	055b      	lsls	r3, r3, #21
 8001e9a:	429a      	cmp	r2, r3
 8001e9c:	d021      	beq.n	8001ee2 <HAL_ADC_ConfigChannel+0x186>
 8001e9e:	683b      	ldr	r3, [r7, #0]
 8001ea0:	689b      	ldr	r3, [r3, #8]
 8001ea2:	2b01      	cmp	r3, #1
 8001ea4:	d01d      	beq.n	8001ee2 <HAL_ADC_ConfigChannel+0x186>
 8001ea6:	683b      	ldr	r3, [r7, #0]
 8001ea8:	689b      	ldr	r3, [r3, #8]
 8001eaa:	2b02      	cmp	r3, #2
 8001eac:	d019      	beq.n	8001ee2 <HAL_ADC_ConfigChannel+0x186>
 8001eae:	683b      	ldr	r3, [r7, #0]
 8001eb0:	689b      	ldr	r3, [r3, #8]
 8001eb2:	2b03      	cmp	r3, #3
 8001eb4:	d015      	beq.n	8001ee2 <HAL_ADC_ConfigChannel+0x186>
 8001eb6:	683b      	ldr	r3, [r7, #0]
 8001eb8:	689b      	ldr	r3, [r3, #8]
 8001eba:	2b04      	cmp	r3, #4
 8001ebc:	d011      	beq.n	8001ee2 <HAL_ADC_ConfigChannel+0x186>
 8001ebe:	683b      	ldr	r3, [r7, #0]
 8001ec0:	689b      	ldr	r3, [r3, #8]
 8001ec2:	2b05      	cmp	r3, #5
 8001ec4:	d00d      	beq.n	8001ee2 <HAL_ADC_ConfigChannel+0x186>
 8001ec6:	683b      	ldr	r3, [r7, #0]
 8001ec8:	689b      	ldr	r3, [r3, #8]
 8001eca:	2b06      	cmp	r3, #6
 8001ecc:	d009      	beq.n	8001ee2 <HAL_ADC_ConfigChannel+0x186>
 8001ece:	683b      	ldr	r3, [r7, #0]
 8001ed0:	689b      	ldr	r3, [r3, #8]
 8001ed2:	2b07      	cmp	r3, #7
 8001ed4:	d005      	beq.n	8001ee2 <HAL_ADC_ConfigChannel+0x186>
 8001ed6:	4a6a      	ldr	r2, [pc, #424]	; (8002080 <HAL_ADC_ConfigChannel+0x324>)
 8001ed8:	4b65      	ldr	r3, [pc, #404]	; (8002070 <HAL_ADC_ConfigChannel+0x314>)
 8001eda:	0011      	movs	r1, r2
 8001edc:	0018      	movs	r0, r3
 8001ede:	f7fe fd48 	bl	8000972 <assert_failed>
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	2240      	movs	r2, #64	; 0x40
 8001ee6:	5c9b      	ldrb	r3, [r3, r2]
 8001ee8:	2b01      	cmp	r3, #1
 8001eea:	d101      	bne.n	8001ef0 <HAL_ADC_ConfigChannel+0x194>
 8001eec:	2302      	movs	r3, #2
 8001eee:	e0e9      	b.n	80020c4 <HAL_ADC_ConfigChannel+0x368>
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	2240      	movs	r2, #64	; 0x40
 8001ef4:	2101      	movs	r1, #1
 8001ef6:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	689b      	ldr	r3, [r3, #8]
 8001efe:	2204      	movs	r2, #4
 8001f00:	4013      	ands	r3, r2
 8001f02:	d000      	beq.n	8001f06 <HAL_ADC_ConfigChannel+0x1aa>
 8001f04:	e0cd      	b.n	80020a2 <HAL_ADC_ConfigChannel+0x346>
  {
    /* Configure channel: depending on rank setting, add it or remove it from */
    /* ADC conversion sequencer.                                              */
    if (sConfig->Rank != ADC_RANK_NONE)
 8001f06:	683b      	ldr	r3, [r7, #0]
 8001f08:	685b      	ldr	r3, [r3, #4]
 8001f0a:	4a5b      	ldr	r2, [pc, #364]	; (8002078 <HAL_ADC_ConfigChannel+0x31c>)
 8001f0c:	4293      	cmp	r3, r2
 8001f0e:	d100      	bne.n	8001f12 <HAL_ADC_ConfigChannel+0x1b6>
 8001f10:	e083      	b.n	800201a <HAL_ADC_ConfigChannel+0x2be>
    {
      /* Regular sequence configuration */
      /* Set the channel selection register from the selected channel */
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8001f18:	683b      	ldr	r3, [r7, #0]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	2201      	movs	r2, #1
 8001f1e:	409a      	lsls	r2, r3
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	430a      	orrs	r2, r1
 8001f26:	629a      	str	r2, [r3, #40]	; 0x28
      /* Channel sampling time configuration */
      /* Management of parameters "SamplingTimeCommon" and "SamplingTime"     */
      /* (obsolete): sampling time set in this function with                  */
      /* parameter "SamplingTime" (obsolete) only if not already set into     */
      /* ADC initialization structure with parameter "SamplingTimeCommon".    */
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001f2c:	2380      	movs	r3, #128	; 0x80
 8001f2e:	055b      	lsls	r3, r3, #21
 8001f30:	429a      	cmp	r2, r3
 8001f32:	d037      	beq.n	8001fa4 <HAL_ADC_ConfigChannel+0x248>
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f38:	2b01      	cmp	r3, #1
 8001f3a:	d033      	beq.n	8001fa4 <HAL_ADC_ConfigChannel+0x248>
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f40:	2b02      	cmp	r3, #2
 8001f42:	d02f      	beq.n	8001fa4 <HAL_ADC_ConfigChannel+0x248>
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f48:	2b03      	cmp	r3, #3
 8001f4a:	d02b      	beq.n	8001fa4 <HAL_ADC_ConfigChannel+0x248>
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f50:	2b04      	cmp	r3, #4
 8001f52:	d027      	beq.n	8001fa4 <HAL_ADC_ConfigChannel+0x248>
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f58:	2b05      	cmp	r3, #5
 8001f5a:	d023      	beq.n	8001fa4 <HAL_ADC_ConfigChannel+0x248>
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f60:	2b06      	cmp	r3, #6
 8001f62:	d01f      	beq.n	8001fa4 <HAL_ADC_ConfigChannel+0x248>
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f68:	2b07      	cmp	r3, #7
 8001f6a:	d01b      	beq.n	8001fa4 <HAL_ADC_ConfigChannel+0x248>
      {
        /* Modify sampling time if needed (not needed in case of reoccurrence */
        /* for several channels programmed consecutively into the sequencer)  */
        if (sConfig->SamplingTime != ADC_GET_SAMPLINGTIME(hadc))
 8001f6c:	683b      	ldr	r3, [r7, #0]
 8001f6e:	689a      	ldr	r2, [r3, #8]
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	695b      	ldr	r3, [r3, #20]
 8001f76:	2107      	movs	r1, #7
 8001f78:	400b      	ands	r3, r1
 8001f7a:	429a      	cmp	r2, r3
 8001f7c:	d012      	beq.n	8001fa4 <HAL_ADC_ConfigChannel+0x248>
        {
          /* Channel sampling time configuration */
          /* Clear the old sample time */
          hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	695a      	ldr	r2, [r3, #20]
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	2107      	movs	r1, #7
 8001f8a:	438a      	bics	r2, r1
 8001f8c:	615a      	str	r2, [r3, #20]
          
          /* Set the new sample time */
          hadc->Instance->SMPR |= ADC_SMPR_SET(sConfig->SamplingTime);
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	6959      	ldr	r1, [r3, #20]
 8001f94:	683b      	ldr	r3, [r7, #0]
 8001f96:	689b      	ldr	r3, [r3, #8]
 8001f98:	2207      	movs	r2, #7
 8001f9a:	401a      	ands	r2, r3
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	430a      	orrs	r2, r1
 8001fa2:	615a      	str	r2, [r3, #20]
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8001fa4:	683b      	ldr	r3, [r7, #0]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	2b10      	cmp	r3, #16
 8001faa:	d008      	beq.n	8001fbe <HAL_ADC_ConfigChannel+0x262>
 8001fac:	683b      	ldr	r3, [r7, #0]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	2b11      	cmp	r3, #17
 8001fb2:	d004      	beq.n	8001fbe <HAL_ADC_ConfigChannel+0x262>
 8001fb4:	683b      	ldr	r3, [r7, #0]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	2b12      	cmp	r3, #18
 8001fba:	d000      	beq.n	8001fbe <HAL_ADC_ConfigChannel+0x262>
 8001fbc:	e07b      	b.n	80020b6 <HAL_ADC_ConfigChannel+0x35a>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path. */
        /* If Channel_17 is selected, enable VREFINT measurement path. */
        /* If Channel_18 is selected, enable VBAT measurement path. */
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8001fbe:	4b31      	ldr	r3, [pc, #196]	; (8002084 <HAL_ADC_ConfigChannel+0x328>)
 8001fc0:	6819      	ldr	r1, [r3, #0]
 8001fc2:	683b      	ldr	r3, [r7, #0]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	2b10      	cmp	r3, #16
 8001fc8:	d009      	beq.n	8001fde <HAL_ADC_ConfigChannel+0x282>
 8001fca:	683b      	ldr	r3, [r7, #0]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	2b11      	cmp	r3, #17
 8001fd0:	d102      	bne.n	8001fd8 <HAL_ADC_ConfigChannel+0x27c>
 8001fd2:	2380      	movs	r3, #128	; 0x80
 8001fd4:	03db      	lsls	r3, r3, #15
 8001fd6:	e004      	b.n	8001fe2 <HAL_ADC_ConfigChannel+0x286>
 8001fd8:	2380      	movs	r3, #128	; 0x80
 8001fda:	045b      	lsls	r3, r3, #17
 8001fdc:	e001      	b.n	8001fe2 <HAL_ADC_ConfigChannel+0x286>
 8001fde:	2380      	movs	r3, #128	; 0x80
 8001fe0:	041b      	lsls	r3, r3, #16
 8001fe2:	4a28      	ldr	r2, [pc, #160]	; (8002084 <HAL_ADC_ConfigChannel+0x328>)
 8001fe4:	430b      	orrs	r3, r1
 8001fe6:	6013      	str	r3, [r2, #0]
        
        /* If Temp. sensor is selected, wait for stabilization delay */
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001fe8:	683b      	ldr	r3, [r7, #0]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	2b10      	cmp	r3, #16
 8001fee:	d162      	bne.n	80020b6 <HAL_ADC_ConfigChannel+0x35a>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001ff0:	4b25      	ldr	r3, [pc, #148]	; (8002088 <HAL_ADC_ConfigChannel+0x32c>)
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	4925      	ldr	r1, [pc, #148]	; (800208c <HAL_ADC_ConfigChannel+0x330>)
 8001ff6:	0018      	movs	r0, r3
 8001ff8:	f7fe f886 	bl	8000108 <__udivsi3>
 8001ffc:	0003      	movs	r3, r0
 8001ffe:	001a      	movs	r2, r3
 8002000:	0013      	movs	r3, r2
 8002002:	009b      	lsls	r3, r3, #2
 8002004:	189b      	adds	r3, r3, r2
 8002006:	005b      	lsls	r3, r3, #1
 8002008:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800200a:	e002      	b.n	8002012 <HAL_ADC_ConfigChannel+0x2b6>
          {
            wait_loop_index--;
 800200c:	68bb      	ldr	r3, [r7, #8]
 800200e:	3b01      	subs	r3, #1
 8002010:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002012:	68bb      	ldr	r3, [r7, #8]
 8002014:	2b00      	cmp	r3, #0
 8002016:	d1f9      	bne.n	800200c <HAL_ADC_ConfigChannel+0x2b0>
 8002018:	e04d      	b.n	80020b6 <HAL_ADC_ConfigChannel+0x35a>
    }
    else
    {
      /* Regular sequence configuration */
      /* Reset the channel selection register from the selected channel */
      hadc->Instance->CHSELR &= ~ADC_CHSELR_CHANNEL(sConfig->Channel);
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002020:	683b      	ldr	r3, [r7, #0]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	2101      	movs	r1, #1
 8002026:	4099      	lsls	r1, r3
 8002028:	000b      	movs	r3, r1
 800202a:	43d9      	mvns	r1, r3
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	400a      	ands	r2, r1
 8002032:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
      /* internal measurement paths disable: If internal channel selected,    */
      /* disable dedicated internal buffers and path.                         */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002034:	683b      	ldr	r3, [r7, #0]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	2b10      	cmp	r3, #16
 800203a:	d007      	beq.n	800204c <HAL_ADC_ConfigChannel+0x2f0>
 800203c:	683b      	ldr	r3, [r7, #0]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	2b11      	cmp	r3, #17
 8002042:	d003      	beq.n	800204c <HAL_ADC_ConfigChannel+0x2f0>
 8002044:	683b      	ldr	r3, [r7, #0]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	2b12      	cmp	r3, #18
 800204a:	d134      	bne.n	80020b6 <HAL_ADC_ConfigChannel+0x35a>
      {
        /* If Channel_16 is selected, disable Temp. sensor measurement path. */
        /* If Channel_17 is selected, disable VREFINT measurement path. */
        /* If Channel_18 is selected, disable VBAT measurement path. */
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 800204c:	4b0d      	ldr	r3, [pc, #52]	; (8002084 <HAL_ADC_ConfigChannel+0x328>)
 800204e:	6819      	ldr	r1, [r3, #0]
 8002050:	683b      	ldr	r3, [r7, #0]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	2b10      	cmp	r3, #16
 8002056:	d01f      	beq.n	8002098 <HAL_ADC_ConfigChannel+0x33c>
 8002058:	683b      	ldr	r3, [r7, #0]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	2b11      	cmp	r3, #17
 800205e:	d101      	bne.n	8002064 <HAL_ADC_ConfigChannel+0x308>
 8002060:	4b0b      	ldr	r3, [pc, #44]	; (8002090 <HAL_ADC_ConfigChannel+0x334>)
 8002062:	e01a      	b.n	800209a <HAL_ADC_ConfigChannel+0x33e>
 8002064:	4b0b      	ldr	r3, [pc, #44]	; (8002094 <HAL_ADC_ConfigChannel+0x338>)
 8002066:	e018      	b.n	800209a <HAL_ADC_ConfigChannel+0x33e>
 8002068:	40012400 	.word	0x40012400
 800206c:	00000651 	.word	0x00000651
 8002070:	08006e94 	.word	0x08006e94
 8002074:	00000652 	.word	0x00000652
 8002078:	00001001 	.word	0x00001001
 800207c:	00000653 	.word	0x00000653
 8002080:	00000657 	.word	0x00000657
 8002084:	40012708 	.word	0x40012708
 8002088:	20000000 	.word	0x20000000
 800208c:	000f4240 	.word	0x000f4240
 8002090:	ffbfffff 	.word	0xffbfffff
 8002094:	feffffff 	.word	0xfeffffff
 8002098:	4b0c      	ldr	r3, [pc, #48]	; (80020cc <HAL_ADC_ConfigChannel+0x370>)
 800209a:	4a0d      	ldr	r2, [pc, #52]	; (80020d0 <HAL_ADC_ConfigChannel+0x374>)
 800209c:	400b      	ands	r3, r1
 800209e:	6013      	str	r3, [r2, #0]
 80020a0:	e009      	b.n	80020b6 <HAL_ADC_ConfigChannel+0x35a>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020a6:	2220      	movs	r2, #32
 80020a8:	431a      	orrs	r2, r3
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	645a      	str	r2, [r3, #68]	; 0x44
    
    tmp_hal_status = HAL_ERROR;
 80020ae:	230f      	movs	r3, #15
 80020b0:	18fb      	adds	r3, r7, r3
 80020b2:	2201      	movs	r2, #1
 80020b4:	701a      	strb	r2, [r3, #0]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	2240      	movs	r2, #64	; 0x40
 80020ba:	2100      	movs	r1, #0
 80020bc:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 80020be:	230f      	movs	r3, #15
 80020c0:	18fb      	adds	r3, r7, r3
 80020c2:	781b      	ldrb	r3, [r3, #0]
}
 80020c4:	0018      	movs	r0, r3
 80020c6:	46bd      	mov	sp, r7
 80020c8:	b004      	add	sp, #16
 80020ca:	bd80      	pop	{r7, pc}
 80020cc:	ff7fffff 	.word	0xff7fffff
 80020d0:	40012708 	.word	0x40012708

080020d4 <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80020d4:	b580      	push	{r7, lr}
 80020d6:	b084      	sub	sp, #16
 80020d8:	af00      	add	r7, sp, #0
 80020da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80020dc:	2300      	movs	r3, #0
 80020de:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 80020e0:	2300      	movs	r3, #0
 80020e2:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	689b      	ldr	r3, [r3, #8]
 80020ea:	2203      	movs	r2, #3
 80020ec:	4013      	ands	r3, r2
 80020ee:	2b01      	cmp	r3, #1
 80020f0:	d112      	bne.n	8002118 <ADC_Enable+0x44>
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	2201      	movs	r2, #1
 80020fa:	4013      	ands	r3, r2
 80020fc:	2b01      	cmp	r3, #1
 80020fe:	d009      	beq.n	8002114 <ADC_Enable+0x40>
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	68da      	ldr	r2, [r3, #12]
 8002106:	2380      	movs	r3, #128	; 0x80
 8002108:	021b      	lsls	r3, r3, #8
 800210a:	401a      	ands	r2, r3
 800210c:	2380      	movs	r3, #128	; 0x80
 800210e:	021b      	lsls	r3, r3, #8
 8002110:	429a      	cmp	r2, r3
 8002112:	d101      	bne.n	8002118 <ADC_Enable+0x44>
 8002114:	2301      	movs	r3, #1
 8002116:	e000      	b.n	800211a <ADC_Enable+0x46>
 8002118:	2300      	movs	r3, #0
 800211a:	2b00      	cmp	r3, #0
 800211c:	d14b      	bne.n	80021b6 <ADC_Enable+0xe2>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	689b      	ldr	r3, [r3, #8]
 8002124:	4a26      	ldr	r2, [pc, #152]	; (80021c0 <ADC_Enable+0xec>)
 8002126:	4013      	ands	r3, r2
 8002128:	d00d      	beq.n	8002146 <ADC_Enable+0x72>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800212e:	2210      	movs	r2, #16
 8002130:	431a      	orrs	r2, r3
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	645a      	str	r2, [r3, #68]	; 0x44
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800213a:	2201      	movs	r2, #1
 800213c:	431a      	orrs	r2, r3
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	649a      	str	r2, [r3, #72]	; 0x48
      
      return HAL_ERROR;
 8002142:	2301      	movs	r3, #1
 8002144:	e038      	b.n	80021b8 <ADC_Enable+0xe4>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	689a      	ldr	r2, [r3, #8]
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	2101      	movs	r1, #1
 8002152:	430a      	orrs	r2, r1
 8002154:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002156:	4b1b      	ldr	r3, [pc, #108]	; (80021c4 <ADC_Enable+0xf0>)
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	491b      	ldr	r1, [pc, #108]	; (80021c8 <ADC_Enable+0xf4>)
 800215c:	0018      	movs	r0, r3
 800215e:	f7fd ffd3 	bl	8000108 <__udivsi3>
 8002162:	0003      	movs	r3, r0
 8002164:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002166:	e002      	b.n	800216e <ADC_Enable+0x9a>
    {
      wait_loop_index--;
 8002168:	68bb      	ldr	r3, [r7, #8]
 800216a:	3b01      	subs	r3, #1
 800216c:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 800216e:	68bb      	ldr	r3, [r7, #8]
 8002170:	2b00      	cmp	r3, #0
 8002172:	d1f9      	bne.n	8002168 <ADC_Enable+0x94>
    }

    /* Get tick count */
    tickstart = HAL_GetTick();
 8002174:	f7ff fadc 	bl	8001730 <HAL_GetTick>
 8002178:	0003      	movs	r3, r0
 800217a:	60fb      	str	r3, [r7, #12]
    
    /* Wait for ADC effectively enabled */
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800217c:	e014      	b.n	80021a8 <ADC_Enable+0xd4>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800217e:	f7ff fad7 	bl	8001730 <HAL_GetTick>
 8002182:	0002      	movs	r2, r0
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	1ad3      	subs	r3, r2, r3
 8002188:	2b02      	cmp	r3, #2
 800218a:	d90d      	bls.n	80021a8 <ADC_Enable+0xd4>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002190:	2210      	movs	r2, #16
 8002192:	431a      	orrs	r2, r3
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	645a      	str	r2, [r3, #68]	; 0x44
      
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800219c:	2201      	movs	r2, #1
 800219e:	431a      	orrs	r2, r3
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	649a      	str	r2, [r3, #72]	; 0x48
      
        return HAL_ERROR;
 80021a4:	2301      	movs	r3, #1
 80021a6:	e007      	b.n	80021b8 <ADC_Enable+0xe4>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	2201      	movs	r2, #1
 80021b0:	4013      	ands	r3, r2
 80021b2:	2b01      	cmp	r3, #1
 80021b4:	d1e3      	bne.n	800217e <ADC_Enable+0xaa>
    }   
    
  }
   
  /* Return HAL status */
  return HAL_OK;
 80021b6:	2300      	movs	r3, #0
}
 80021b8:	0018      	movs	r0, r3
 80021ba:	46bd      	mov	sp, r7
 80021bc:	b004      	add	sp, #16
 80021be:	bd80      	pop	{r7, pc}
 80021c0:	80000017 	.word	0x80000017
 80021c4:	20000000 	.word	0x20000000
 80021c8:	000f4240 	.word	0x000f4240

080021cc <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80021cc:	b580      	push	{r7, lr}
 80021ce:	b084      	sub	sp, #16
 80021d0:	af00      	add	r7, sp, #0
 80021d2:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021d8:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021de:	2250      	movs	r2, #80	; 0x50
 80021e0:	4013      	ands	r3, r2
 80021e2:	d140      	bne.n	8002266 <ADC_DMAConvCplt+0x9a>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021e8:	2280      	movs	r2, #128	; 0x80
 80021ea:	0092      	lsls	r2, r2, #2
 80021ec:	431a      	orrs	r2, r3
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	68da      	ldr	r2, [r3, #12]
 80021f8:	23c0      	movs	r3, #192	; 0xc0
 80021fa:	011b      	lsls	r3, r3, #4
 80021fc:	4013      	ands	r3, r2
 80021fe:	d12d      	bne.n	800225c <ADC_DMAConvCplt+0x90>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	6a1b      	ldr	r3, [r3, #32]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002204:	2b00      	cmp	r3, #0
 8002206:	d129      	bne.n	800225c <ADC_DMAConvCplt+0x90>
    {
      /* If End of Sequence is reached, disable interrupts */
      if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	2208      	movs	r2, #8
 8002210:	4013      	ands	r3, r2
 8002212:	2b08      	cmp	r3, #8
 8002214:	d122      	bne.n	800225c <ADC_DMAConvCplt+0x90>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	689b      	ldr	r3, [r3, #8]
 800221c:	2204      	movs	r2, #4
 800221e:	4013      	ands	r3, r2
 8002220:	d110      	bne.n	8002244 <ADC_DMAConvCplt+0x78>
        {
          /* Disable ADC end of single conversion interrupt on group regular */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	685a      	ldr	r2, [r3, #4]
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	210c      	movs	r1, #12
 800222e:	438a      	bics	r2, r1
 8002230:	605a      	str	r2, [r3, #4]
          
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002236:	4a11      	ldr	r2, [pc, #68]	; (800227c <ADC_DMAConvCplt+0xb0>)
 8002238:	4013      	ands	r3, r2
 800223a:	2201      	movs	r2, #1
 800223c:	431a      	orrs	r2, r3
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	645a      	str	r2, [r3, #68]	; 0x44
 8002242:	e00b      	b.n	800225c <ADC_DMAConvCplt+0x90>
                            HAL_ADC_STATE_READY);
        }
        else
        {
          /* Change ADC state to error state */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002248:	2220      	movs	r2, #32
 800224a:	431a      	orrs	r2, r3
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	645a      	str	r2, [r3, #68]	; 0x44
          
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002254:	2201      	movs	r2, #1
 8002256:	431a      	orrs	r2, r3
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	649a      	str	r2, [r3, #72]	; 0x48
        }
      }
    }

    /* Conversion complete callback */
    HAL_ADC_ConvCpltCallback(hadc); 
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	0018      	movs	r0, r3
 8002260:	f7fe ffa0 	bl	80011a4 <HAL_ADC_ConvCpltCallback>
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }

}
 8002264:	e005      	b.n	8002272 <ADC_DMAConvCplt+0xa6>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800226a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800226c:	687a      	ldr	r2, [r7, #4]
 800226e:	0010      	movs	r0, r2
 8002270:	4798      	blx	r3
}
 8002272:	46c0      	nop			; (mov r8, r8)
 8002274:	46bd      	mov	sp, r7
 8002276:	b004      	add	sp, #16
 8002278:	bd80      	pop	{r7, pc}
 800227a:	46c0      	nop			; (mov r8, r8)
 800227c:	fffffefe 	.word	0xfffffefe

08002280 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002280:	b580      	push	{r7, lr}
 8002282:	b084      	sub	sp, #16
 8002284:	af00      	add	r7, sp, #0
 8002286:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800228c:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
  HAL_ADC_ConvHalfCpltCallback(hadc); 
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	0018      	movs	r0, r3
 8002292:	f7ff fd53 	bl	8001d3c <HAL_ADC_ConvHalfCpltCallback>
}
 8002296:	46c0      	nop			; (mov r8, r8)
 8002298:	46bd      	mov	sp, r7
 800229a:	b004      	add	sp, #16
 800229c:	bd80      	pop	{r7, pc}

0800229e <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 800229e:	b580      	push	{r7, lr}
 80022a0:	b084      	sub	sp, #16
 80022a2:	af00      	add	r7, sp, #0
 80022a4:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022aa:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022b0:	2240      	movs	r2, #64	; 0x40
 80022b2:	431a      	orrs	r2, r3
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	645a      	str	r2, [r3, #68]	; 0x44
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80022bc:	2204      	movs	r2, #4
 80022be:	431a      	orrs	r2, r3
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	649a      	str	r2, [r3, #72]	; 0x48
  
  /* Error callback */
  HAL_ADC_ErrorCallback(hadc); 
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	0018      	movs	r0, r3
 80022c8:	f7ff fd40 	bl	8001d4c <HAL_ADC_ErrorCallback>
}
 80022cc:	46c0      	nop			; (mov r8, r8)
 80022ce:	46bd      	mov	sp, r7
 80022d0:	b004      	add	sp, #16
 80022d2:	bd80      	pop	{r7, pc}

080022d4 <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80022d4:	b580      	push	{r7, lr}
 80022d6:	b082      	sub	sp, #8
 80022d8:	af00      	add	r7, sp, #0
 80022da:	0002      	movs	r2, r0
 80022dc:	1dfb      	adds	r3, r7, #7
 80022de:	701a      	strb	r2, [r3, #0]
  NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 80022e0:	1dfb      	adds	r3, r7, #7
 80022e2:	781b      	ldrb	r3, [r3, #0]
 80022e4:	001a      	movs	r2, r3
 80022e6:	231f      	movs	r3, #31
 80022e8:	401a      	ands	r2, r3
 80022ea:	4b04      	ldr	r3, [pc, #16]	; (80022fc <NVIC_EnableIRQ+0x28>)
 80022ec:	2101      	movs	r1, #1
 80022ee:	4091      	lsls	r1, r2
 80022f0:	000a      	movs	r2, r1
 80022f2:	601a      	str	r2, [r3, #0]
}
 80022f4:	46c0      	nop			; (mov r8, r8)
 80022f6:	46bd      	mov	sp, r7
 80022f8:	b002      	add	sp, #8
 80022fa:	bd80      	pop	{r7, pc}
 80022fc:	e000e100 	.word	0xe000e100

08002300 <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002300:	b590      	push	{r4, r7, lr}
 8002302:	b083      	sub	sp, #12
 8002304:	af00      	add	r7, sp, #0
 8002306:	0002      	movs	r2, r0
 8002308:	6039      	str	r1, [r7, #0]
 800230a:	1dfb      	adds	r3, r7, #7
 800230c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) < 0)
 800230e:	1dfb      	adds	r3, r7, #7
 8002310:	781b      	ldrb	r3, [r3, #0]
 8002312:	2b7f      	cmp	r3, #127	; 0x7f
 8002314:	d932      	bls.n	800237c <NVIC_SetPriority+0x7c>
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002316:	4a2f      	ldr	r2, [pc, #188]	; (80023d4 <NVIC_SetPriority+0xd4>)
 8002318:	1dfb      	adds	r3, r7, #7
 800231a:	781b      	ldrb	r3, [r3, #0]
 800231c:	0019      	movs	r1, r3
 800231e:	230f      	movs	r3, #15
 8002320:	400b      	ands	r3, r1
 8002322:	3b08      	subs	r3, #8
 8002324:	089b      	lsrs	r3, r3, #2
 8002326:	3306      	adds	r3, #6
 8002328:	009b      	lsls	r3, r3, #2
 800232a:	18d3      	adds	r3, r2, r3
 800232c:	3304      	adds	r3, #4
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	1dfa      	adds	r2, r7, #7
 8002332:	7812      	ldrb	r2, [r2, #0]
 8002334:	0011      	movs	r1, r2
 8002336:	2203      	movs	r2, #3
 8002338:	400a      	ands	r2, r1
 800233a:	00d2      	lsls	r2, r2, #3
 800233c:	21ff      	movs	r1, #255	; 0xff
 800233e:	4091      	lsls	r1, r2
 8002340:	000a      	movs	r2, r1
 8002342:	43d2      	mvns	r2, r2
 8002344:	401a      	ands	r2, r3
 8002346:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002348:	683b      	ldr	r3, [r7, #0]
 800234a:	019b      	lsls	r3, r3, #6
 800234c:	22ff      	movs	r2, #255	; 0xff
 800234e:	401a      	ands	r2, r3
 8002350:	1dfb      	adds	r3, r7, #7
 8002352:	781b      	ldrb	r3, [r3, #0]
 8002354:	0018      	movs	r0, r3
 8002356:	2303      	movs	r3, #3
 8002358:	4003      	ands	r3, r0
 800235a:	00db      	lsls	r3, r3, #3
 800235c:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800235e:	481d      	ldr	r0, [pc, #116]	; (80023d4 <NVIC_SetPriority+0xd4>)
 8002360:	1dfb      	adds	r3, r7, #7
 8002362:	781b      	ldrb	r3, [r3, #0]
 8002364:	001c      	movs	r4, r3
 8002366:	230f      	movs	r3, #15
 8002368:	4023      	ands	r3, r4
 800236a:	3b08      	subs	r3, #8
 800236c:	089b      	lsrs	r3, r3, #2
 800236e:	430a      	orrs	r2, r1
 8002370:	3306      	adds	r3, #6
 8002372:	009b      	lsls	r3, r3, #2
 8002374:	18c3      	adds	r3, r0, r3
 8002376:	3304      	adds	r3, #4
 8002378:	601a      	str	r2, [r3, #0]
  else
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800237a:	e027      	b.n	80023cc <NVIC_SetPriority+0xcc>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800237c:	4a16      	ldr	r2, [pc, #88]	; (80023d8 <NVIC_SetPriority+0xd8>)
 800237e:	1dfb      	adds	r3, r7, #7
 8002380:	781b      	ldrb	r3, [r3, #0]
 8002382:	b25b      	sxtb	r3, r3
 8002384:	089b      	lsrs	r3, r3, #2
 8002386:	33c0      	adds	r3, #192	; 0xc0
 8002388:	009b      	lsls	r3, r3, #2
 800238a:	589b      	ldr	r3, [r3, r2]
 800238c:	1dfa      	adds	r2, r7, #7
 800238e:	7812      	ldrb	r2, [r2, #0]
 8002390:	0011      	movs	r1, r2
 8002392:	2203      	movs	r2, #3
 8002394:	400a      	ands	r2, r1
 8002396:	00d2      	lsls	r2, r2, #3
 8002398:	21ff      	movs	r1, #255	; 0xff
 800239a:	4091      	lsls	r1, r2
 800239c:	000a      	movs	r2, r1
 800239e:	43d2      	mvns	r2, r2
 80023a0:	401a      	ands	r2, r3
 80023a2:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80023a4:	683b      	ldr	r3, [r7, #0]
 80023a6:	019b      	lsls	r3, r3, #6
 80023a8:	22ff      	movs	r2, #255	; 0xff
 80023aa:	401a      	ands	r2, r3
 80023ac:	1dfb      	adds	r3, r7, #7
 80023ae:	781b      	ldrb	r3, [r3, #0]
 80023b0:	0018      	movs	r0, r3
 80023b2:	2303      	movs	r3, #3
 80023b4:	4003      	ands	r3, r0
 80023b6:	00db      	lsls	r3, r3, #3
 80023b8:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80023ba:	4807      	ldr	r0, [pc, #28]	; (80023d8 <NVIC_SetPriority+0xd8>)
 80023bc:	1dfb      	adds	r3, r7, #7
 80023be:	781b      	ldrb	r3, [r3, #0]
 80023c0:	b25b      	sxtb	r3, r3
 80023c2:	089b      	lsrs	r3, r3, #2
 80023c4:	430a      	orrs	r2, r1
 80023c6:	33c0      	adds	r3, #192	; 0xc0
 80023c8:	009b      	lsls	r3, r3, #2
 80023ca:	501a      	str	r2, [r3, r0]
}
 80023cc:	46c0      	nop			; (mov r8, r8)
 80023ce:	46bd      	mov	sp, r7
 80023d0:	b003      	add	sp, #12
 80023d2:	bd90      	pop	{r4, r7, pc}
 80023d4:	e000ed00 	.word	0xe000ed00
 80023d8:	e000e100 	.word	0xe000e100

080023dc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80023dc:	b580      	push	{r7, lr}
 80023de:	b082      	sub	sp, #8
 80023e0:	af00      	add	r7, sp, #0
 80023e2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	3b01      	subs	r3, #1
 80023e8:	4a0c      	ldr	r2, [pc, #48]	; (800241c <SysTick_Config+0x40>)
 80023ea:	4293      	cmp	r3, r2
 80023ec:	d901      	bls.n	80023f2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80023ee:	2301      	movs	r3, #1
 80023f0:	e010      	b.n	8002414 <SysTick_Config+0x38>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80023f2:	4b0b      	ldr	r3, [pc, #44]	; (8002420 <SysTick_Config+0x44>)
 80023f4:	687a      	ldr	r2, [r7, #4]
 80023f6:	3a01      	subs	r2, #1
 80023f8:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80023fa:	2301      	movs	r3, #1
 80023fc:	425b      	negs	r3, r3
 80023fe:	2103      	movs	r1, #3
 8002400:	0018      	movs	r0, r3
 8002402:	f7ff ff7d 	bl	8002300 <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002406:	4b06      	ldr	r3, [pc, #24]	; (8002420 <SysTick_Config+0x44>)
 8002408:	2200      	movs	r2, #0
 800240a:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800240c:	4b04      	ldr	r3, [pc, #16]	; (8002420 <SysTick_Config+0x44>)
 800240e:	2207      	movs	r2, #7
 8002410:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002412:	2300      	movs	r3, #0
}
 8002414:	0018      	movs	r0, r3
 8002416:	46bd      	mov	sp, r7
 8002418:	b002      	add	sp, #8
 800241a:	bd80      	pop	{r7, pc}
 800241c:	00ffffff 	.word	0x00ffffff
 8002420:	e000e010 	.word	0xe000e010

08002424 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002424:	b580      	push	{r7, lr}
 8002426:	b084      	sub	sp, #16
 8002428:	af00      	add	r7, sp, #0
 800242a:	60b9      	str	r1, [r7, #8]
 800242c:	607a      	str	r2, [r7, #4]
 800242e:	230f      	movs	r3, #15
 8002430:	18fb      	adds	r3, r7, r3
 8002432:	1c02      	adds	r2, r0, #0
 8002434:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 8002436:	68bb      	ldr	r3, [r7, #8]
 8002438:	2b03      	cmp	r3, #3
 800243a:	d904      	bls.n	8002446 <HAL_NVIC_SetPriority+0x22>
 800243c:	4b08      	ldr	r3, [pc, #32]	; (8002460 <HAL_NVIC_SetPriority+0x3c>)
 800243e:	219b      	movs	r1, #155	; 0x9b
 8002440:	0018      	movs	r0, r3
 8002442:	f7fe fa96 	bl	8000972 <assert_failed>
  NVIC_SetPriority(IRQn,PreemptPriority);
 8002446:	68ba      	ldr	r2, [r7, #8]
 8002448:	230f      	movs	r3, #15
 800244a:	18fb      	adds	r3, r7, r3
 800244c:	781b      	ldrb	r3, [r3, #0]
 800244e:	b25b      	sxtb	r3, r3
 8002450:	0011      	movs	r1, r2
 8002452:	0018      	movs	r0, r3
 8002454:	f7ff ff54 	bl	8002300 <NVIC_SetPriority>
}
 8002458:	46c0      	nop			; (mov r8, r8)
 800245a:	46bd      	mov	sp, r7
 800245c:	b004      	add	sp, #16
 800245e:	bd80      	pop	{r7, pc}
 8002460:	08006ecc 	.word	0x08006ecc

08002464 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002464:	b580      	push	{r7, lr}
 8002466:	b082      	sub	sp, #8
 8002468:	af00      	add	r7, sp, #0
 800246a:	0002      	movs	r2, r0
 800246c:	1dfb      	adds	r3, r7, #7
 800246e:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 8002470:	1dfb      	adds	r3, r7, #7
 8002472:	781b      	ldrb	r3, [r3, #0]
 8002474:	2b7f      	cmp	r3, #127	; 0x7f
 8002476:	d904      	bls.n	8002482 <HAL_NVIC_EnableIRQ+0x1e>
 8002478:	4b07      	ldr	r3, [pc, #28]	; (8002498 <HAL_NVIC_EnableIRQ+0x34>)
 800247a:	21ab      	movs	r1, #171	; 0xab
 800247c:	0018      	movs	r0, r3
 800247e:	f7fe fa78 	bl	8000972 <assert_failed>
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002482:	1dfb      	adds	r3, r7, #7
 8002484:	781b      	ldrb	r3, [r3, #0]
 8002486:	b25b      	sxtb	r3, r3
 8002488:	0018      	movs	r0, r3
 800248a:	f7ff ff23 	bl	80022d4 <NVIC_EnableIRQ>
}
 800248e:	46c0      	nop			; (mov r8, r8)
 8002490:	46bd      	mov	sp, r7
 8002492:	b002      	add	sp, #8
 8002494:	bd80      	pop	{r7, pc}
 8002496:	46c0      	nop			; (mov r8, r8)
 8002498:	08006ecc 	.word	0x08006ecc

0800249c <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800249c:	b580      	push	{r7, lr}
 800249e:	b082      	sub	sp, #8
 80024a0:	af00      	add	r7, sp, #0
 80024a2:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	0018      	movs	r0, r3
 80024a8:	f7ff ff98 	bl	80023dc <SysTick_Config>
 80024ac:	0003      	movs	r3, r0
}
 80024ae:	0018      	movs	r0, r3
 80024b0:	46bd      	mov	sp, r7
 80024b2:	b002      	add	sp, #8
 80024b4:	bd80      	pop	{r7, pc}
	...

080024b8 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and initialize the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 80024b8:	b580      	push	{r7, lr}
 80024ba:	b082      	sub	sp, #8
 80024bc:	af00      	add	r7, sp, #0
 80024be:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if(hcrc == NULL)
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d101      	bne.n	80024ca <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 80024c6:	2301      	movs	r3, #1
 80024c8:	e08b      	b.n	80025e2 <HAL_CRC_Init+0x12a>
  }
  
  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	4a47      	ldr	r2, [pc, #284]	; (80025ec <HAL_CRC_Init+0x134>)
 80024d0:	4293      	cmp	r3, r2
 80024d2:	d004      	beq.n	80024de <HAL_CRC_Init+0x26>
 80024d4:	4b46      	ldr	r3, [pc, #280]	; (80025f0 <HAL_CRC_Init+0x138>)
 80024d6:	2180      	movs	r1, #128	; 0x80
 80024d8:	0018      	movs	r0, r3
 80024da:	f7fe fa4a 	bl	8000972 <assert_failed>

  if(hcrc->State == HAL_CRC_STATE_RESET)
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	7f5b      	ldrb	r3, [r3, #29]
 80024e2:	b2db      	uxtb	r3, r3
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d106      	bne.n	80024f6 <HAL_CRC_Init+0x3e>
  {   
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	2200      	movs	r2, #0
 80024ec:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	0018      	movs	r0, r3
 80024f2:	f7fd ffbb 	bl	800046c <HAL_CRC_MspInit>
  }
  
  hcrc->State = HAL_CRC_STATE_BUSY; 
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	2202      	movs	r2, #2
 80024fa:	775a      	strb	r2, [r3, #29]
  /* Extended initialization: if programmable polynomial feature is 
     applicable to device, set default or non-default generating 
     polynomial according to hcrc->Init parameters.
     If feature is non-applicable to device in use, HAL_CRCEx_Init straight 
     away reports HAL_OK. */
  if (HAL_CRCEx_Init(hcrc) != HAL_OK)
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	0018      	movs	r0, r3
 8002500:	f000 f878 	bl	80025f4 <HAL_CRCEx_Init>
 8002504:	1e03      	subs	r3, r0, #0
 8002506:	d001      	beq.n	800250c <HAL_CRC_Init+0x54>
  {
    return HAL_ERROR;
 8002508:	2301      	movs	r3, #1
 800250a:	e06a      	b.n	80025e2 <HAL_CRC_Init+0x12a>
  }
  
  /* check whether or not non-default CRC initial value has been 
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	795b      	ldrb	r3, [r3, #5]
 8002510:	2b00      	cmp	r3, #0
 8002512:	d008      	beq.n	8002526 <HAL_CRC_Init+0x6e>
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	795b      	ldrb	r3, [r3, #5]
 8002518:	2b01      	cmp	r3, #1
 800251a:	d004      	beq.n	8002526 <HAL_CRC_Init+0x6e>
 800251c:	4b34      	ldr	r3, [pc, #208]	; (80025f0 <HAL_CRC_Init+0x138>)
 800251e:	2199      	movs	r1, #153	; 0x99
 8002520:	0018      	movs	r0, r3
 8002522:	f7fe fa26 	bl	8000972 <assert_failed>
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	795b      	ldrb	r3, [r3, #5]
 800252a:	2b00      	cmp	r3, #0
 800252c:	d105      	bne.n	800253a <HAL_CRC_Init+0x82>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);  
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	2201      	movs	r2, #1
 8002534:	4252      	negs	r2, r2
 8002536:	611a      	str	r2, [r3, #16]
 8002538:	e004      	b.n	8002544 <HAL_CRC_Init+0x8c>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	687a      	ldr	r2, [r7, #4]
 8002540:	6912      	ldr	r2, [r2, #16]
 8002542:	611a      	str	r2, [r3, #16]
  }
  

  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode)); 
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	695b      	ldr	r3, [r3, #20]
 8002548:	2b00      	cmp	r3, #0
 800254a:	d010      	beq.n	800256e <HAL_CRC_Init+0xb6>
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	695b      	ldr	r3, [r3, #20]
 8002550:	2b20      	cmp	r3, #32
 8002552:	d00c      	beq.n	800256e <HAL_CRC_Init+0xb6>
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	695b      	ldr	r3, [r3, #20]
 8002558:	2b40      	cmp	r3, #64	; 0x40
 800255a:	d008      	beq.n	800256e <HAL_CRC_Init+0xb6>
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	695b      	ldr	r3, [r3, #20]
 8002560:	2b60      	cmp	r3, #96	; 0x60
 8002562:	d004      	beq.n	800256e <HAL_CRC_Init+0xb6>
 8002564:	4b22      	ldr	r3, [pc, #136]	; (80025f0 <HAL_CRC_Init+0x138>)
 8002566:	21a5      	movs	r1, #165	; 0xa5
 8002568:	0018      	movs	r0, r3
 800256a:	f7fe fa02 	bl	8000972 <assert_failed>
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode); 
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	689b      	ldr	r3, [r3, #8]
 8002574:	2260      	movs	r2, #96	; 0x60
 8002576:	4393      	bics	r3, r2
 8002578:	0019      	movs	r1, r3
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	695a      	ldr	r2, [r3, #20]
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	430a      	orrs	r2, r1
 8002584:	609a      	str	r2, [r3, #8]
  
  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode)); 
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	699b      	ldr	r3, [r3, #24]
 800258a:	2b00      	cmp	r3, #0
 800258c:	d008      	beq.n	80025a0 <HAL_CRC_Init+0xe8>
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	699b      	ldr	r3, [r3, #24]
 8002592:	2b80      	cmp	r3, #128	; 0x80
 8002594:	d004      	beq.n	80025a0 <HAL_CRC_Init+0xe8>
 8002596:	4b16      	ldr	r3, [pc, #88]	; (80025f0 <HAL_CRC_Init+0x138>)
 8002598:	21a9      	movs	r1, #169	; 0xa9
 800259a:	0018      	movs	r0, r3
 800259c:	f7fe f9e9 	bl	8000972 <assert_failed>
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);  
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	689b      	ldr	r3, [r3, #8]
 80025a6:	2280      	movs	r2, #128	; 0x80
 80025a8:	4393      	bics	r3, r2
 80025aa:	0019      	movs	r1, r3
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	699a      	ldr	r2, [r3, #24]
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	430a      	orrs	r2, r1
 80025b6:	609a      	str	r2, [r3, #8]
  
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	6a1b      	ldr	r3, [r3, #32]
 80025bc:	2b01      	cmp	r3, #1
 80025be:	d00c      	beq.n	80025da <HAL_CRC_Init+0x122>
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	6a1b      	ldr	r3, [r3, #32]
 80025c4:	2b02      	cmp	r3, #2
 80025c6:	d008      	beq.n	80025da <HAL_CRC_Init+0x122>
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	6a1b      	ldr	r3, [r3, #32]
 80025cc:	2b03      	cmp	r3, #3
 80025ce:	d004      	beq.n	80025da <HAL_CRC_Init+0x122>
 80025d0:	4b07      	ldr	r3, [pc, #28]	; (80025f0 <HAL_CRC_Init+0x138>)
 80025d2:	21ae      	movs	r1, #174	; 0xae
 80025d4:	0018      	movs	r0, r3
 80025d6:	f7fe f9cc 	bl	8000972 <assert_failed>

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	2201      	movs	r2, #1
 80025de:	775a      	strb	r2, [r3, #29]
  
  /* Return function status */
  return HAL_OK;
 80025e0:	2300      	movs	r3, #0
}
 80025e2:	0018      	movs	r0, r3
 80025e4:	46bd      	mov	sp, r7
 80025e6:	b002      	add	sp, #8
 80025e8:	bd80      	pop	{r7, pc}
 80025ea:	46c0      	nop			; (mov r8, r8)
 80025ec:	40023000 	.word	0x40023000
 80025f0:	08006f08 	.word	0x08006f08

080025f4 <HAL_CRCEx_Init>:
  * @brief  Extended initialization to set generating polynomial
  * @param  hcrc CRC handle             
  * @retval HAL status
  */             
HAL_StatusTypeDef HAL_CRCEx_Init(CRC_HandleTypeDef *hcrc)
{
 80025f4:	b580      	push	{r7, lr}
 80025f6:	b082      	sub	sp, #8
 80025f8:	af00      	add	r7, sp, #0
 80025fa:	6078      	str	r0, [r7, #4]
      return HAL_ERROR;
    }
  }
#endif /* defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F091xC) || defined (STM32F098xx) */    

   return HAL_OK;
 80025fc:	2300      	movs	r3, #0
}
 80025fe:	0018      	movs	r0, r3
 8002600:	46bd      	mov	sp, r7
 8002602:	b002      	add	sp, #8
 8002604:	bd80      	pop	{r7, pc}
	...

08002608 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef* hdac)
{ 
 8002608:	b580      	push	{r7, lr}
 800260a:	b082      	sub	sp, #8
 800260c:	af00      	add	r7, sp, #0
 800260e:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if(hdac == NULL)
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	2b00      	cmp	r3, #0
 8002614:	d101      	bne.n	800261a <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 8002616:	2301      	movs	r3, #1
 8002618:	e021      	b.n	800265e <HAL_DAC_Init+0x56>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	4a12      	ldr	r2, [pc, #72]	; (8002668 <HAL_DAC_Init+0x60>)
 8002620:	4293      	cmp	r3, r2
 8002622:	d006      	beq.n	8002632 <HAL_DAC_Init+0x2a>
 8002624:	2387      	movs	r3, #135	; 0x87
 8002626:	005a      	lsls	r2, r3, #1
 8002628:	4b10      	ldr	r3, [pc, #64]	; (800266c <HAL_DAC_Init+0x64>)
 800262a:	0011      	movs	r1, r2
 800262c:	0018      	movs	r0, r3
 800262e:	f7fe f9a0 	bl	8000972 <assert_failed>
  
  if(hdac->State == HAL_DAC_STATE_RESET)
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	791b      	ldrb	r3, [r3, #4]
 8002636:	b2db      	uxtb	r3, r3
 8002638:	2b00      	cmp	r3, #0
 800263a:	d106      	bne.n	800264a <HAL_DAC_Init+0x42>
  {  
    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	2200      	movs	r2, #0
 8002640:	715a      	strb	r2, [r3, #5]

    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	0018      	movs	r0, r3
 8002646:	f7fd ff5d 	bl	8000504 <HAL_DAC_MspInit>
  }
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	2202      	movs	r2, #2
 800264e:	711a      	strb	r2, [r3, #4]
  
  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	2200      	movs	r2, #0
 8002654:	611a      	str	r2, [r3, #16]
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	2201      	movs	r2, #1
 800265a:	711a      	strb	r2, [r3, #4]
  
  /* Return function status */
  return HAL_OK;
 800265c:	2300      	movs	r3, #0
}
 800265e:	0018      	movs	r0, r3
 8002660:	46bd      	mov	sp, r7
 8002662:	b002      	add	sp, #8
 8002664:	bd80      	pop	{r7, pc}
 8002666:	46c0      	nop			; (mov r8, r8)
 8002668:	40007400 	.word	0x40007400
 800266c:	08006f40 	.word	0x08006f40

08002670 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef* hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{  
 8002670:	b580      	push	{r7, lr}
 8002672:	b086      	sub	sp, #24
 8002674:	af00      	add	r7, sp, #0
 8002676:	60f8      	str	r0, [r7, #12]
 8002678:	60b9      	str	r1, [r7, #8]
 800267a:	607a      	str	r2, [r7, #4]
 800267c:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0;
 800267e:	2300      	movs	r3, #0
 8002680:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
 8002682:	68bb      	ldr	r3, [r7, #8]
 8002684:	2b00      	cmp	r3, #0
 8002686:	d005      	beq.n	8002694 <HAL_DAC_SetValue+0x24>
 8002688:	4a1c      	ldr	r2, [pc, #112]	; (80026fc <HAL_DAC_SetValue+0x8c>)
 800268a:	4b1d      	ldr	r3, [pc, #116]	; (8002700 <HAL_DAC_SetValue+0x90>)
 800268c:	0011      	movs	r1, r2
 800268e:	0018      	movs	r0, r3
 8002690:	f7fe f96f 	bl	8000972 <assert_failed>
  assert_param(IS_DAC_ALIGN(Alignment));
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	2b00      	cmp	r3, #0
 8002698:	d00b      	beq.n	80026b2 <HAL_DAC_SetValue+0x42>
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	2b04      	cmp	r3, #4
 800269e:	d008      	beq.n	80026b2 <HAL_DAC_SetValue+0x42>
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	2b08      	cmp	r3, #8
 80026a4:	d005      	beq.n	80026b2 <HAL_DAC_SetValue+0x42>
 80026a6:	4a17      	ldr	r2, [pc, #92]	; (8002704 <HAL_DAC_SetValue+0x94>)
 80026a8:	4b15      	ldr	r3, [pc, #84]	; (8002700 <HAL_DAC_SetValue+0x90>)
 80026aa:	0011      	movs	r1, r2
 80026ac:	0018      	movs	r0, r3
 80026ae:	f7fe f960 	bl	8000972 <assert_failed>
  assert_param(IS_DAC_DATA(Data));
 80026b2:	683b      	ldr	r3, [r7, #0]
 80026b4:	4a14      	ldr	r2, [pc, #80]	; (8002708 <HAL_DAC_SetValue+0x98>)
 80026b6:	4293      	cmp	r3, r2
 80026b8:	d906      	bls.n	80026c8 <HAL_DAC_SetValue+0x58>
 80026ba:	238e      	movs	r3, #142	; 0x8e
 80026bc:	009a      	lsls	r2, r3, #2
 80026be:	4b10      	ldr	r3, [pc, #64]	; (8002700 <HAL_DAC_SetValue+0x90>)
 80026c0:	0011      	movs	r1, r2
 80026c2:	0018      	movs	r0, r3
 80026c4:	f7fe f955 	bl	8000972 <assert_failed>
  
  tmp = (uint32_t)hdac->Instance; 
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	617b      	str	r3, [r7, #20]
  if(Channel == DAC_CHANNEL_1)
 80026ce:	68bb      	ldr	r3, [r7, #8]
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d105      	bne.n	80026e0 <HAL_DAC_SetValue+0x70>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 80026d4:	697a      	ldr	r2, [r7, #20]
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	18d3      	adds	r3, r2, r3
 80026da:	3308      	adds	r3, #8
 80026dc:	617b      	str	r3, [r7, #20]
 80026de:	e004      	b.n	80026ea <HAL_DAC_SetValue+0x7a>
  }
  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 80026e0:	697a      	ldr	r2, [r7, #20]
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	18d3      	adds	r3, r2, r3
 80026e6:	3314      	adds	r3, #20
 80026e8:	617b      	str	r3, [r7, #20]
  }

  /* Set the DAC channel1 selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 80026ea:	697b      	ldr	r3, [r7, #20]
 80026ec:	683a      	ldr	r2, [r7, #0]
 80026ee:	601a      	str	r2, [r3, #0]
  
  /* Return function status */
  return HAL_OK;
 80026f0:	2300      	movs	r3, #0
}
 80026f2:	0018      	movs	r0, r3
 80026f4:	46bd      	mov	sp, r7
 80026f6:	b006      	add	sp, #24
 80026f8:	bd80      	pop	{r7, pc}
 80026fa:	46c0      	nop			; (mov r8, r8)
 80026fc:	00000236 	.word	0x00000236
 8002700:	08006f40 	.word	0x08006f40
 8002704:	00000237 	.word	0x00000237
 8002708:	0000fff0 	.word	0x0000fff0

0800270c <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 800270c:	b580      	push	{r7, lr}
 800270e:	b082      	sub	sp, #8
 8002710:	af00      	add	r7, sp, #0
 8002712:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh1 could be implemented in the user file
   */
}
 8002714:	46c0      	nop			; (mov r8, r8)
 8002716:	46bd      	mov	sp, r7
 8002718:	b002      	add	sp, #8
 800271a:	bd80      	pop	{r7, pc}

0800271c <HAL_DAC_ConfigChannel>:
  *          This parameter can be one of the following values:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef* hdac, DAC_ChannelConfTypeDef* sConfig, uint32_t Channel)
{
 800271c:	b580      	push	{r7, lr}
 800271e:	b086      	sub	sp, #24
 8002720:	af00      	add	r7, sp, #0
 8002722:	60f8      	str	r0, [r7, #12]
 8002724:	60b9      	str	r1, [r7, #8]
 8002726:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1 = 0U, tmpreg2 = 0U;
 8002728:	2300      	movs	r3, #0
 800272a:	617b      	str	r3, [r7, #20]
 800272c:	2300      	movs	r3, #0
 800272e:	613b      	str	r3, [r7, #16]

  /* Check the DAC parameters */
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
 8002730:	68bb      	ldr	r3, [r7, #8]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	2b00      	cmp	r3, #0
 8002736:	d01c      	beq.n	8002772 <HAL_DAC_ConfigChannel+0x56>
 8002738:	68bb      	ldr	r3, [r7, #8]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	2b24      	cmp	r3, #36	; 0x24
 800273e:	d018      	beq.n	8002772 <HAL_DAC_ConfigChannel+0x56>
 8002740:	68bb      	ldr	r3, [r7, #8]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	2b0c      	cmp	r3, #12
 8002746:	d014      	beq.n	8002772 <HAL_DAC_ConfigChannel+0x56>
 8002748:	68bb      	ldr	r3, [r7, #8]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	2b04      	cmp	r3, #4
 800274e:	d010      	beq.n	8002772 <HAL_DAC_ConfigChannel+0x56>
 8002750:	68bb      	ldr	r3, [r7, #8]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	2b1c      	cmp	r3, #28
 8002756:	d00c      	beq.n	8002772 <HAL_DAC_ConfigChannel+0x56>
 8002758:	68bb      	ldr	r3, [r7, #8]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	2b34      	cmp	r3, #52	; 0x34
 800275e:	d008      	beq.n	8002772 <HAL_DAC_ConfigChannel+0x56>
 8002760:	68bb      	ldr	r3, [r7, #8]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	2b3c      	cmp	r3, #60	; 0x3c
 8002766:	d004      	beq.n	8002772 <HAL_DAC_ConfigChannel+0x56>
 8002768:	4b37      	ldr	r3, [pc, #220]	; (8002848 <HAL_DAC_ConfigChannel+0x12c>)
 800276a:	21b9      	movs	r1, #185	; 0xb9
 800276c:	0018      	movs	r0, r3
 800276e:	f7fe f900 	bl	8000972 <assert_failed>
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
 8002772:	68bb      	ldr	r3, [r7, #8]
 8002774:	685b      	ldr	r3, [r3, #4]
 8002776:	2b00      	cmp	r3, #0
 8002778:	d008      	beq.n	800278c <HAL_DAC_ConfigChannel+0x70>
 800277a:	68bb      	ldr	r3, [r7, #8]
 800277c:	685b      	ldr	r3, [r3, #4]
 800277e:	2b02      	cmp	r3, #2
 8002780:	d004      	beq.n	800278c <HAL_DAC_ConfigChannel+0x70>
 8002782:	4b31      	ldr	r3, [pc, #196]	; (8002848 <HAL_DAC_ConfigChannel+0x12c>)
 8002784:	21ba      	movs	r1, #186	; 0xba
 8002786:	0018      	movs	r0, r3
 8002788:	f7fe f8f3 	bl	8000972 <assert_failed>
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
 800278c:	68bb      	ldr	r3, [r7, #8]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	2b00      	cmp	r3, #0
 8002792:	d01c      	beq.n	80027ce <HAL_DAC_ConfigChannel+0xb2>
 8002794:	68bb      	ldr	r3, [r7, #8]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	2b24      	cmp	r3, #36	; 0x24
 800279a:	d018      	beq.n	80027ce <HAL_DAC_ConfigChannel+0xb2>
 800279c:	68bb      	ldr	r3, [r7, #8]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	2b0c      	cmp	r3, #12
 80027a2:	d014      	beq.n	80027ce <HAL_DAC_ConfigChannel+0xb2>
 80027a4:	68bb      	ldr	r3, [r7, #8]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	2b04      	cmp	r3, #4
 80027aa:	d010      	beq.n	80027ce <HAL_DAC_ConfigChannel+0xb2>
 80027ac:	68bb      	ldr	r3, [r7, #8]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	2b1c      	cmp	r3, #28
 80027b2:	d00c      	beq.n	80027ce <HAL_DAC_ConfigChannel+0xb2>
 80027b4:	68bb      	ldr	r3, [r7, #8]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	2b34      	cmp	r3, #52	; 0x34
 80027ba:	d008      	beq.n	80027ce <HAL_DAC_ConfigChannel+0xb2>
 80027bc:	68bb      	ldr	r3, [r7, #8]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	2b3c      	cmp	r3, #60	; 0x3c
 80027c2:	d004      	beq.n	80027ce <HAL_DAC_ConfigChannel+0xb2>
 80027c4:	4b20      	ldr	r3, [pc, #128]	; (8002848 <HAL_DAC_ConfigChannel+0x12c>)
 80027c6:	21bb      	movs	r1, #187	; 0xbb
 80027c8:	0018      	movs	r0, r3
 80027ca:	f7fe f8d2 	bl	8000972 <assert_failed>
  assert_param(IS_DAC_CHANNEL(Channel));
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d004      	beq.n	80027de <HAL_DAC_ConfigChannel+0xc2>
 80027d4:	4b1c      	ldr	r3, [pc, #112]	; (8002848 <HAL_DAC_ConfigChannel+0x12c>)
 80027d6:	21bc      	movs	r1, #188	; 0xbc
 80027d8:	0018      	movs	r0, r3
 80027da:	f7fe f8ca 	bl	8000972 <assert_failed>
  
  /* Process locked */
  __HAL_LOCK(hdac);
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	795b      	ldrb	r3, [r3, #5]
 80027e2:	2b01      	cmp	r3, #1
 80027e4:	d101      	bne.n	80027ea <HAL_DAC_ConfigChannel+0xce>
 80027e6:	2302      	movs	r3, #2
 80027e8:	e029      	b.n	800283e <HAL_DAC_ConfigChannel+0x122>
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	2201      	movs	r2, #1
 80027ee:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	2202      	movs	r2, #2
 80027f4:	711a      	strb	r2, [r3, #4]
  
  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << Channel); 
 80027fe:	223e      	movs	r2, #62	; 0x3e
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	409a      	lsls	r2, r3
 8002804:	0013      	movs	r3, r2
 8002806:	43da      	mvns	r2, r3
 8002808:	697b      	ldr	r3, [r7, #20]
 800280a:	4013      	ands	r3, r2
 800280c:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */   
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 800280e:	68bb      	ldr	r3, [r7, #8]
 8002810:	681a      	ldr	r2, [r3, #0]
 8002812:	68bb      	ldr	r3, [r7, #8]
 8002814:	685b      	ldr	r3, [r3, #4]
 8002816:	4313      	orrs	r3, r2
 8002818:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << Channel;
 800281a:	693a      	ldr	r2, [r7, #16]
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	409a      	lsls	r2, r3
 8002820:	0013      	movs	r3, r2
 8002822:	697a      	ldr	r2, [r7, #20]
 8002824:	4313      	orrs	r3, r2
 8002826:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	697a      	ldr	r2, [r7, #20]
 800282e:	601a      	str	r2, [r3, #0]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	2201      	movs	r2, #1
 8002834:	711a      	strb	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	2200      	movs	r2, #0
 800283a:	715a      	strb	r2, [r3, #5]
  
  /* Return function status */
  return HAL_OK;
 800283c:	2300      	movs	r3, #0
}
 800283e:	0018      	movs	r0, r3
 8002840:	46bd      	mov	sp, r7
 8002842:	b006      	add	sp, #24
 8002844:	bd80      	pop	{r7, pc}
 8002846:	46c0      	nop			; (mov r8, r8)
 8002848:	08006f78 	.word	0x08006f78

0800284c <HAL_DAC_Start>:
       /* STM32F091xC  STM32F098xx */

#if defined (STM32F051x8) || defined (STM32F058xx)

HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef* hdac, uint32_t Channel)
{
 800284c:	b580      	push	{r7, lr}
 800284e:	b082      	sub	sp, #8
 8002850:	af00      	add	r7, sp, #0
 8002852:	6078      	str	r0, [r7, #4]
 8002854:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
 8002856:	683b      	ldr	r3, [r7, #0]
 8002858:	2b00      	cmp	r3, #0
 800285a:	d006      	beq.n	800286a <HAL_DAC_Start+0x1e>
 800285c:	23f0      	movs	r3, #240	; 0xf0
 800285e:	005a      	lsls	r2, r3, #1
 8002860:	4b1b      	ldr	r3, [pc, #108]	; (80028d0 <HAL_DAC_Start+0x84>)
 8002862:	0011      	movs	r1, r2
 8002864:	0018      	movs	r0, r3
 8002866:	f7fe f884 	bl	8000972 <assert_failed>
  
  /* Process locked */
  __HAL_LOCK(hdac);
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	795b      	ldrb	r3, [r3, #5]
 800286e:	2b01      	cmp	r3, #1
 8002870:	d101      	bne.n	8002876 <HAL_DAC_Start+0x2a>
 8002872:	2302      	movs	r3, #2
 8002874:	e028      	b.n	80028c8 <HAL_DAC_Start+0x7c>
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	2201      	movs	r2, #1
 800287a:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	2202      	movs	r2, #2
 8002880:	711a      	strb	r2, [r3, #4]
  
  /* Enable the Peripharal */
  __HAL_DAC_ENABLE(hdac, Channel);
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	6819      	ldr	r1, [r3, #0]
 8002888:	2201      	movs	r2, #1
 800288a:	683b      	ldr	r3, [r7, #0]
 800288c:	409a      	lsls	r2, r3
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	430a      	orrs	r2, r1
 8002894:	601a      	str	r2, [r3, #0]
  
  if(Channel == DAC_CHANNEL_1)
 8002896:	683b      	ldr	r3, [r7, #0]
 8002898:	2b00      	cmp	r3, #0
 800289a:	d10e      	bne.n	80028ba <HAL_DAC_Start+0x6e>
  {
    /* Check if software trigger enabled */
    if((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == (DAC_CR_TEN1 | DAC_CR_TSEL1))
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	223c      	movs	r2, #60	; 0x3c
 80028a4:	4013      	ands	r3, r2
 80028a6:	2b3c      	cmp	r3, #60	; 0x3c
 80028a8:	d107      	bne.n	80028ba <HAL_DAC_Start+0x6e>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	685a      	ldr	r2, [r3, #4]
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	2101      	movs	r1, #1
 80028b6:	430a      	orrs	r2, r1
 80028b8:	605a      	str	r2, [r3, #4]
    }
  }
 
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	2201      	movs	r2, #1
 80028be:	711a      	strb	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	2200      	movs	r2, #0
 80028c4:	715a      	strb	r2, [r3, #5]
    
  /* Return function status */
  return HAL_OK;
 80028c6:	2300      	movs	r3, #0
}
 80028c8:	0018      	movs	r0, r3
 80028ca:	46bd      	mov	sp, r7
 80028cc:	b002      	add	sp, #8
 80028ce:	bd80      	pop	{r7, pc}
 80028d0:	08006f78 	.word	0x08006f78

080028d4 <HAL_DAC_IRQHandler>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
void HAL_DAC_IRQHandler(DAC_HandleTypeDef* hdac)
{
 80028d4:	b580      	push	{r7, lr}
 80028d6:	b082      	sub	sp, #8
 80028d8:	af00      	add	r7, sp, #0
 80028da:	6078      	str	r0, [r7, #4]
  if(__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR1))
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	681a      	ldr	r2, [r3, #0]
 80028e2:	2380      	movs	r3, #128	; 0x80
 80028e4:	019b      	lsls	r3, r3, #6
 80028e6:	401a      	ands	r2, r3
 80028e8:	2380      	movs	r3, #128	; 0x80
 80028ea:	019b      	lsls	r3, r3, #6
 80028ec:	429a      	cmp	r2, r3
 80028ee:	d123      	bne.n	8002938 <HAL_DAC_IRQHandler+0x64>
  { 
  /* Check Overrun flag */
  if(__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR1))
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80028f6:	2380      	movs	r3, #128	; 0x80
 80028f8:	019b      	lsls	r3, r3, #6
 80028fa:	401a      	ands	r2, r3
 80028fc:	2380      	movs	r3, #128	; 0x80
 80028fe:	019b      	lsls	r3, r3, #6
 8002900:	429a      	cmp	r2, r3
 8002902:	d119      	bne.n	8002938 <HAL_DAC_IRQHandler+0x64>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	2204      	movs	r2, #4
 8002908:	711a      	strb	r2, [r3, #4]
    
      /* Set DAC error code to chanel1 DMA underrun error */
      hdac->ErrorCode |= HAL_DAC_ERROR_DMAUNDERRUNCH1;
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	691b      	ldr	r3, [r3, #16]
 800290e:	2201      	movs	r2, #1
 8002910:	431a      	orrs	r2, r3
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	611a      	str	r2, [r3, #16]
    
      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac,DAC_FLAG_DMAUDR1);
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	2280      	movs	r2, #128	; 0x80
 800291c:	0192      	lsls	r2, r2, #6
 800291e:	635a      	str	r2, [r3, #52]	; 0x34
    
      /* Disable the selected DAC channel1 DMA request */
      hdac->Instance->CR &= ~DAC_CR_DMAEN1;
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	681a      	ldr	r2, [r3, #0]
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	4905      	ldr	r1, [pc, #20]	; (8002940 <HAL_DAC_IRQHandler+0x6c>)
 800292c:	400a      	ands	r2, r1
 800292e:	601a      	str	r2, [r3, #0]
    
      /* Error callback */ 
      HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	0018      	movs	r0, r3
 8002934:	f7ff feea 	bl	800270c <HAL_DAC_DMAUnderrunCallbackCh1>
    }
  }
}
 8002938:	46c0      	nop			; (mov r8, r8)
 800293a:	46bd      	mov	sp, r7
 800293c:	b002      	add	sp, #8
 800293e:	bd80      	pop	{r7, pc}
 8002940:	ffffefff 	.word	0xffffefff

08002944 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 8002944:	b580      	push	{r7, lr}
 8002946:	b084      	sub	sp, #16
 8002948:	af00      	add	r7, sp, #0
 800294a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800294c:	2300      	movs	r3, #0
 800294e:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	2b00      	cmp	r3, #0
 8002954:	d101      	bne.n	800295a <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8002956:	2301      	movs	r3, #1
 8002958:	e0df      	b.n	8002b1a <HAL_DMA_Init+0x1d6>
  }
  
  /* Check the parameters */
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	4a71      	ldr	r2, [pc, #452]	; (8002b24 <HAL_DMA_Init+0x1e0>)
 8002960:	4293      	cmp	r3, r2
 8002962:	d018      	beq.n	8002996 <HAL_DMA_Init+0x52>
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	4a6f      	ldr	r2, [pc, #444]	; (8002b28 <HAL_DMA_Init+0x1e4>)
 800296a:	4293      	cmp	r3, r2
 800296c:	d013      	beq.n	8002996 <HAL_DMA_Init+0x52>
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	4a6e      	ldr	r2, [pc, #440]	; (8002b2c <HAL_DMA_Init+0x1e8>)
 8002974:	4293      	cmp	r3, r2
 8002976:	d00e      	beq.n	8002996 <HAL_DMA_Init+0x52>
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	4a6c      	ldr	r2, [pc, #432]	; (8002b30 <HAL_DMA_Init+0x1ec>)
 800297e:	4293      	cmp	r3, r2
 8002980:	d009      	beq.n	8002996 <HAL_DMA_Init+0x52>
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	4a6b      	ldr	r2, [pc, #428]	; (8002b34 <HAL_DMA_Init+0x1f0>)
 8002988:	4293      	cmp	r3, r2
 800298a:	d004      	beq.n	8002996 <HAL_DMA_Init+0x52>
 800298c:	4b6a      	ldr	r3, [pc, #424]	; (8002b38 <HAL_DMA_Init+0x1f4>)
 800298e:	21a5      	movs	r1, #165	; 0xa5
 8002990:	0018      	movs	r0, r3
 8002992:	f7fd ffee 	bl	8000972 <assert_failed>
  assert_param(IS_DMA_DIRECTION(hdma->Init.Direction));
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	685b      	ldr	r3, [r3, #4]
 800299a:	2b00      	cmp	r3, #0
 800299c:	d00e      	beq.n	80029bc <HAL_DMA_Init+0x78>
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	685b      	ldr	r3, [r3, #4]
 80029a2:	2b10      	cmp	r3, #16
 80029a4:	d00a      	beq.n	80029bc <HAL_DMA_Init+0x78>
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	685a      	ldr	r2, [r3, #4]
 80029aa:	2380      	movs	r3, #128	; 0x80
 80029ac:	01db      	lsls	r3, r3, #7
 80029ae:	429a      	cmp	r2, r3
 80029b0:	d004      	beq.n	80029bc <HAL_DMA_Init+0x78>
 80029b2:	4b61      	ldr	r3, [pc, #388]	; (8002b38 <HAL_DMA_Init+0x1f4>)
 80029b4:	21a6      	movs	r1, #166	; 0xa6
 80029b6:	0018      	movs	r0, r3
 80029b8:	f7fd ffdb 	bl	8000972 <assert_failed>
  assert_param(IS_DMA_PERIPHERAL_INC_STATE(hdma->Init.PeriphInc));
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	689b      	ldr	r3, [r3, #8]
 80029c0:	2b40      	cmp	r3, #64	; 0x40
 80029c2:	d008      	beq.n	80029d6 <HAL_DMA_Init+0x92>
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	689b      	ldr	r3, [r3, #8]
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d004      	beq.n	80029d6 <HAL_DMA_Init+0x92>
 80029cc:	4b5a      	ldr	r3, [pc, #360]	; (8002b38 <HAL_DMA_Init+0x1f4>)
 80029ce:	21a7      	movs	r1, #167	; 0xa7
 80029d0:	0018      	movs	r0, r3
 80029d2:	f7fd ffce 	bl	8000972 <assert_failed>
  assert_param(IS_DMA_MEMORY_INC_STATE(hdma->Init.MemInc));
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	68db      	ldr	r3, [r3, #12]
 80029da:	2b80      	cmp	r3, #128	; 0x80
 80029dc:	d008      	beq.n	80029f0 <HAL_DMA_Init+0xac>
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	68db      	ldr	r3, [r3, #12]
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d004      	beq.n	80029f0 <HAL_DMA_Init+0xac>
 80029e6:	4b54      	ldr	r3, [pc, #336]	; (8002b38 <HAL_DMA_Init+0x1f4>)
 80029e8:	21a8      	movs	r1, #168	; 0xa8
 80029ea:	0018      	movs	r0, r3
 80029ec:	f7fd ffc1 	bl	8000972 <assert_failed>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	691b      	ldr	r3, [r3, #16]
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d010      	beq.n	8002a1a <HAL_DMA_Init+0xd6>
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	691a      	ldr	r2, [r3, #16]
 80029fc:	2380      	movs	r3, #128	; 0x80
 80029fe:	005b      	lsls	r3, r3, #1
 8002a00:	429a      	cmp	r2, r3
 8002a02:	d00a      	beq.n	8002a1a <HAL_DMA_Init+0xd6>
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	691a      	ldr	r2, [r3, #16]
 8002a08:	2380      	movs	r3, #128	; 0x80
 8002a0a:	009b      	lsls	r3, r3, #2
 8002a0c:	429a      	cmp	r2, r3
 8002a0e:	d004      	beq.n	8002a1a <HAL_DMA_Init+0xd6>
 8002a10:	4b49      	ldr	r3, [pc, #292]	; (8002b38 <HAL_DMA_Init+0x1f4>)
 8002a12:	21a9      	movs	r1, #169	; 0xa9
 8002a14:	0018      	movs	r0, r3
 8002a16:	f7fd ffac 	bl	8000972 <assert_failed>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	695b      	ldr	r3, [r3, #20]
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d010      	beq.n	8002a44 <HAL_DMA_Init+0x100>
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	695a      	ldr	r2, [r3, #20]
 8002a26:	2380      	movs	r3, #128	; 0x80
 8002a28:	00db      	lsls	r3, r3, #3
 8002a2a:	429a      	cmp	r2, r3
 8002a2c:	d00a      	beq.n	8002a44 <HAL_DMA_Init+0x100>
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	695a      	ldr	r2, [r3, #20]
 8002a32:	2380      	movs	r3, #128	; 0x80
 8002a34:	011b      	lsls	r3, r3, #4
 8002a36:	429a      	cmp	r2, r3
 8002a38:	d004      	beq.n	8002a44 <HAL_DMA_Init+0x100>
 8002a3a:	4b3f      	ldr	r3, [pc, #252]	; (8002b38 <HAL_DMA_Init+0x1f4>)
 8002a3c:	21aa      	movs	r1, #170	; 0xaa
 8002a3e:	0018      	movs	r0, r3
 8002a40:	f7fd ff97 	bl	8000972 <assert_failed>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	699b      	ldr	r3, [r3, #24]
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d008      	beq.n	8002a5e <HAL_DMA_Init+0x11a>
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	699b      	ldr	r3, [r3, #24]
 8002a50:	2b20      	cmp	r3, #32
 8002a52:	d004      	beq.n	8002a5e <HAL_DMA_Init+0x11a>
 8002a54:	4b38      	ldr	r3, [pc, #224]	; (8002b38 <HAL_DMA_Init+0x1f4>)
 8002a56:	21ab      	movs	r1, #171	; 0xab
 8002a58:	0018      	movs	r0, r3
 8002a5a:	f7fd ff8a 	bl	8000972 <assert_failed>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	69db      	ldr	r3, [r3, #28]
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d016      	beq.n	8002a94 <HAL_DMA_Init+0x150>
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	69da      	ldr	r2, [r3, #28]
 8002a6a:	2380      	movs	r3, #128	; 0x80
 8002a6c:	015b      	lsls	r3, r3, #5
 8002a6e:	429a      	cmp	r2, r3
 8002a70:	d010      	beq.n	8002a94 <HAL_DMA_Init+0x150>
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	69da      	ldr	r2, [r3, #28]
 8002a76:	2380      	movs	r3, #128	; 0x80
 8002a78:	019b      	lsls	r3, r3, #6
 8002a7a:	429a      	cmp	r2, r3
 8002a7c:	d00a      	beq.n	8002a94 <HAL_DMA_Init+0x150>
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	69da      	ldr	r2, [r3, #28]
 8002a82:	23c0      	movs	r3, #192	; 0xc0
 8002a84:	019b      	lsls	r3, r3, #6
 8002a86:	429a      	cmp	r2, r3
 8002a88:	d004      	beq.n	8002a94 <HAL_DMA_Init+0x150>
 8002a8a:	4b2b      	ldr	r3, [pc, #172]	; (8002b38 <HAL_DMA_Init+0x1f4>)
 8002a8c:	21ac      	movs	r1, #172	; 0xac
 8002a8e:	0018      	movs	r0, r3
 8002a90:	f7fd ff6f 	bl	8000972 <assert_failed>
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	2221      	movs	r2, #33	; 0x21
 8002a98:	2102      	movs	r1, #2
 8002a9a:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	4a25      	ldr	r2, [pc, #148]	; (8002b3c <HAL_DMA_Init+0x1f8>)
 8002aa8:	4013      	ands	r3, r2
 8002aaa:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8002ab4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	68db      	ldr	r3, [r3, #12]
 8002aba:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002ac0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	695b      	ldr	r3, [r3, #20]
 8002ac6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002acc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	69db      	ldr	r3, [r3, #28]
 8002ad2:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002ad4:	68fa      	ldr	r2, [r7, #12]
 8002ad6:	4313      	orrs	r3, r2
 8002ad8:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	68fa      	ldr	r2, [r7, #12]
 8002ae0:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	0018      	movs	r0, r3
 8002ae6:	f000 f971 	bl	8002dcc <DMA_CalcBaseAndBitshift>
  
  /* Clean callbacks */
  hdma->XferCpltCallback = NULL;
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	2200      	movs	r2, #0
 8002aee:	629a      	str	r2, [r3, #40]	; 0x28
  hdma->XferHalfCpltCallback = NULL;
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	2200      	movs	r2, #0
 8002af4:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma->XferErrorCallback = NULL;
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	2200      	movs	r2, #0
 8002afa:	631a      	str	r2, [r3, #48]	; 0x30
  hdma->XferAbortCallback = NULL;
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	2200      	movs	r2, #0
 8002b00:	635a      	str	r2, [r3, #52]	; 0x34
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	2200      	movs	r2, #0
 8002b06:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	2221      	movs	r2, #33	; 0x21
 8002b0c:	2101      	movs	r1, #1
 8002b0e:	5499      	strb	r1, [r3, r2]
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	2220      	movs	r2, #32
 8002b14:	2100      	movs	r1, #0
 8002b16:	5499      	strb	r1, [r3, r2]
  
  return HAL_OK;
 8002b18:	2300      	movs	r3, #0
}  
 8002b1a:	0018      	movs	r0, r3
 8002b1c:	46bd      	mov	sp, r7
 8002b1e:	b004      	add	sp, #16
 8002b20:	bd80      	pop	{r7, pc}
 8002b22:	46c0      	nop			; (mov r8, r8)
 8002b24:	40020008 	.word	0x40020008
 8002b28:	4002001c 	.word	0x4002001c
 8002b2c:	40020030 	.word	0x40020030
 8002b30:	40020044 	.word	0x40020044
 8002b34:	40020058 	.word	0x40020058
 8002b38:	08006fb4 	.word	0x08006fb4
 8002b3c:	ffffc00f 	.word	0xffffc00f

08002b40 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002b40:	b580      	push	{r7, lr}
 8002b42:	b086      	sub	sp, #24
 8002b44:	af00      	add	r7, sp, #0
 8002b46:	60f8      	str	r0, [r7, #12]
 8002b48:	60b9      	str	r1, [r7, #8]
 8002b4a:	607a      	str	r2, [r7, #4]
 8002b4c:	603b      	str	r3, [r7, #0]
	HAL_StatusTypeDef status = HAL_OK;
 8002b4e:	2317      	movs	r3, #23
 8002b50:	18fb      	adds	r3, r7, r3
 8002b52:	2200      	movs	r2, #0
 8002b54:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 8002b56:	683b      	ldr	r3, [r7, #0]
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d003      	beq.n	8002b64 <HAL_DMA_Start_IT+0x24>
 8002b5c:	683b      	ldr	r3, [r7, #0]
 8002b5e:	4a32      	ldr	r2, [pc, #200]	; (8002c28 <HAL_DMA_Start_IT+0xe8>)
 8002b60:	4293      	cmp	r3, r2
 8002b62:	d906      	bls.n	8002b72 <HAL_DMA_Start_IT+0x32>
 8002b64:	23af      	movs	r3, #175	; 0xaf
 8002b66:	005a      	lsls	r2, r3, #1
 8002b68:	4b30      	ldr	r3, [pc, #192]	; (8002c2c <HAL_DMA_Start_IT+0xec>)
 8002b6a:	0011      	movs	r1, r2
 8002b6c:	0018      	movs	r0, r3
 8002b6e:	f7fd ff00 	bl	8000972 <assert_failed>
  
  /* Process locked */
  __HAL_LOCK(hdma);
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	2220      	movs	r2, #32
 8002b76:	5c9b      	ldrb	r3, [r3, r2]
 8002b78:	2b01      	cmp	r3, #1
 8002b7a:	d101      	bne.n	8002b80 <HAL_DMA_Start_IT+0x40>
 8002b7c:	2302      	movs	r3, #2
 8002b7e:	e04f      	b.n	8002c20 <HAL_DMA_Start_IT+0xe0>
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	2220      	movs	r2, #32
 8002b84:	2101      	movs	r1, #1
 8002b86:	5499      	strb	r1, [r3, r2]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	2221      	movs	r2, #33	; 0x21
 8002b8c:	5c9b      	ldrb	r3, [r3, r2]
 8002b8e:	b2db      	uxtb	r3, r3
 8002b90:	2b01      	cmp	r3, #1
 8002b92:	d13a      	bne.n	8002c0a <HAL_DMA_Start_IT+0xca>
  {
  	/* Change DMA peripheral state */  
  	hdma->State = HAL_DMA_STATE_BUSY;
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	2221      	movs	r2, #33	; 0x21
 8002b98:	2102      	movs	r1, #2
 8002b9a:	5499      	strb	r1, [r3, r2]
  	
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	2200      	movs	r2, #0
 8002ba0:	639a      	str	r2, [r3, #56]	; 0x38
  	
  	/* Disable the peripheral */
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	681a      	ldr	r2, [r3, #0]
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	2101      	movs	r1, #1
 8002bae:	438a      	bics	r2, r1
 8002bb0:	601a      	str	r2, [r3, #0]
  	
  	/* Configure the source, destination address and the data length */  
  	DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002bb2:	683b      	ldr	r3, [r7, #0]
 8002bb4:	687a      	ldr	r2, [r7, #4]
 8002bb6:	68b9      	ldr	r1, [r7, #8]
 8002bb8:	68f8      	ldr	r0, [r7, #12]
 8002bba:	f000 f8db 	bl	8002d74 <DMA_SetConfig>
  	
  	/* Enable the transfer complete, & transfer error interrupts */
  	/* Half transfer interrupt is optional: enable it only if associated callback is available */
    if(NULL != hdma->XferHalfCpltCallback )
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d008      	beq.n	8002bd8 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	681a      	ldr	r2, [r3, #0]
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	210e      	movs	r1, #14
 8002bd2:	430a      	orrs	r2, r1
 8002bd4:	601a      	str	r2, [r3, #0]
 8002bd6:	e00f      	b.n	8002bf8 <HAL_DMA_Start_IT+0xb8>
    }
  	else
  	{
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	681a      	ldr	r2, [r3, #0]
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	210a      	movs	r1, #10
 8002be4:	430a      	orrs	r2, r1
 8002be6:	601a      	str	r2, [r3, #0]
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	681a      	ldr	r2, [r3, #0]
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	2104      	movs	r1, #4
 8002bf4:	438a      	bics	r2, r1
 8002bf6:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Enable the Peripheral */
  	hdma->Instance->CCR |= DMA_CCR_EN;
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	681a      	ldr	r2, [r3, #0]
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	2101      	movs	r1, #1
 8002c04:	430a      	orrs	r2, r1
 8002c06:	601a      	str	r2, [r3, #0]
 8002c08:	e007      	b.n	8002c1a <HAL_DMA_Start_IT+0xda>
  }
  else
  {
  	/* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	2220      	movs	r2, #32
 8002c0e:	2100      	movs	r1, #0
 8002c10:	5499      	strb	r1, [r3, r2]
  
    /* Remain BUSY */
    status = HAL_BUSY;
 8002c12:	2317      	movs	r3, #23
 8002c14:	18fb      	adds	r3, r7, r3
 8002c16:	2202      	movs	r2, #2
 8002c18:	701a      	strb	r2, [r3, #0]
  }     
  
  return status;    
 8002c1a:	2317      	movs	r3, #23
 8002c1c:	18fb      	adds	r3, r7, r3
 8002c1e:	781b      	ldrb	r3, [r3, #0]
} 
 8002c20:	0018      	movs	r0, r3
 8002c22:	46bd      	mov	sp, r7
 8002c24:	b006      	add	sp, #24
 8002c26:	bd80      	pop	{r7, pc}
 8002c28:	0000ffff 	.word	0x0000ffff
 8002c2c:	08006fb4 	.word	0x08006fb4

08002c30 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002c30:	b580      	push	{r7, lr}
 8002c32:	b084      	sub	sp, #16
 8002c34:	af00      	add	r7, sp, #0
 8002c36:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c4c:	2204      	movs	r2, #4
 8002c4e:	409a      	lsls	r2, r3
 8002c50:	0013      	movs	r3, r2
 8002c52:	68fa      	ldr	r2, [r7, #12]
 8002c54:	4013      	ands	r3, r2
 8002c56:	d024      	beq.n	8002ca2 <HAL_DMA_IRQHandler+0x72>
 8002c58:	68bb      	ldr	r3, [r7, #8]
 8002c5a:	2204      	movs	r2, #4
 8002c5c:	4013      	ands	r3, r2
 8002c5e:	d020      	beq.n	8002ca2 <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	2220      	movs	r2, #32
 8002c68:	4013      	ands	r3, r2
 8002c6a:	d107      	bne.n	8002c7c <HAL_DMA_IRQHandler+0x4c>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	681a      	ldr	r2, [r3, #0]
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	2104      	movs	r1, #4
 8002c78:	438a      	bics	r2, r1
 8002c7a:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c84:	2104      	movs	r1, #4
 8002c86:	4091      	lsls	r1, r2
 8002c88:	000a      	movs	r2, r1
 8002c8a:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d100      	bne.n	8002c96 <HAL_DMA_IRQHandler+0x66>
 8002c94:	e06a      	b.n	8002d6c <HAL_DMA_IRQHandler+0x13c>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c9a:	687a      	ldr	r2, [r7, #4]
 8002c9c:	0010      	movs	r0, r2
 8002c9e:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 8002ca0:	e064      	b.n	8002d6c <HAL_DMA_IRQHandler+0x13c>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ca6:	2202      	movs	r2, #2
 8002ca8:	409a      	lsls	r2, r3
 8002caa:	0013      	movs	r3, r2
 8002cac:	68fa      	ldr	r2, [r7, #12]
 8002cae:	4013      	ands	r3, r2
 8002cb0:	d02b      	beq.n	8002d0a <HAL_DMA_IRQHandler+0xda>
 8002cb2:	68bb      	ldr	r3, [r7, #8]
 8002cb4:	2202      	movs	r2, #2
 8002cb6:	4013      	ands	r3, r2
 8002cb8:	d027      	beq.n	8002d0a <HAL_DMA_IRQHandler+0xda>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	2220      	movs	r2, #32
 8002cc2:	4013      	ands	r3, r2
 8002cc4:	d10b      	bne.n	8002cde <HAL_DMA_IRQHandler+0xae>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	681a      	ldr	r2, [r3, #0]
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	210a      	movs	r1, #10
 8002cd2:	438a      	bics	r2, r1
 8002cd4:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	2221      	movs	r2, #33	; 0x21
 8002cda:	2101      	movs	r1, #1
 8002cdc:	5499      	strb	r1, [r3, r2]
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ce6:	2102      	movs	r1, #2
 8002ce8:	4091      	lsls	r1, r2
 8002cea:	000a      	movs	r2, r1
 8002cec:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	2220      	movs	r2, #32
 8002cf2:	2100      	movs	r1, #0
 8002cf4:	5499      	strb	r1, [r3, r2]
  	
  	if(hdma->XferCpltCallback != NULL)
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d036      	beq.n	8002d6c <HAL_DMA_IRQHandler+0x13c>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d02:	687a      	ldr	r2, [r7, #4]
 8002d04:	0010      	movs	r0, r2
 8002d06:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 8002d08:	e030      	b.n	8002d6c <HAL_DMA_IRQHandler+0x13c>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d0e:	2208      	movs	r2, #8
 8002d10:	409a      	lsls	r2, r3
 8002d12:	0013      	movs	r3, r2
 8002d14:	68fa      	ldr	r2, [r7, #12]
 8002d16:	4013      	ands	r3, r2
 8002d18:	d028      	beq.n	8002d6c <HAL_DMA_IRQHandler+0x13c>
 8002d1a:	68bb      	ldr	r3, [r7, #8]
 8002d1c:	2208      	movs	r2, #8
 8002d1e:	4013      	ands	r3, r2
 8002d20:	d024      	beq.n	8002d6c <HAL_DMA_IRQHandler+0x13c>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	681a      	ldr	r2, [r3, #0]
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	210e      	movs	r1, #14
 8002d2e:	438a      	bics	r2, r1
 8002d30:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d3a:	2101      	movs	r1, #1
 8002d3c:	4091      	lsls	r1, r2
 8002d3e:	000a      	movs	r2, r1
 8002d40:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	2201      	movs	r2, #1
 8002d46:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	2221      	movs	r2, #33	; 0x21
 8002d4c:	2101      	movs	r1, #1
 8002d4e:	5499      	strb	r1, [r3, r2]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	2220      	movs	r2, #32
 8002d54:	2100      	movs	r1, #0
 8002d56:	5499      	strb	r1, [r3, r2]
    
    if(hdma->XferErrorCallback != NULL)
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d005      	beq.n	8002d6c <HAL_DMA_IRQHandler+0x13c>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d64:	687a      	ldr	r2, [r7, #4]
 8002d66:	0010      	movs	r0, r2
 8002d68:	4798      	blx	r3
    }
   }
}  
 8002d6a:	e7ff      	b.n	8002d6c <HAL_DMA_IRQHandler+0x13c>
 8002d6c:	46c0      	nop			; (mov r8, r8)
 8002d6e:	46bd      	mov	sp, r7
 8002d70:	b004      	add	sp, #16
 8002d72:	bd80      	pop	{r7, pc}

08002d74 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002d74:	b580      	push	{r7, lr}
 8002d76:	b084      	sub	sp, #16
 8002d78:	af00      	add	r7, sp, #0
 8002d7a:	60f8      	str	r0, [r7, #12]
 8002d7c:	60b9      	str	r1, [r7, #8]
 8002d7e:	607a      	str	r2, [r7, #4]
 8002d80:	603b      	str	r3, [r7, #0]
	/* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d8a:	2101      	movs	r1, #1
 8002d8c:	4091      	lsls	r1, r2
 8002d8e:	000a      	movs	r2, r1
 8002d90:	605a      	str	r2, [r3, #4]
  
  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	683a      	ldr	r2, [r7, #0]
 8002d98:	605a      	str	r2, [r3, #4]
  
  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	685b      	ldr	r3, [r3, #4]
 8002d9e:	2b10      	cmp	r3, #16
 8002da0:	d108      	bne.n	8002db4 <DMA_SetConfig+0x40>
  {   
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	687a      	ldr	r2, [r7, #4]
 8002da8:	609a      	str	r2, [r3, #8]
    
    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	68ba      	ldr	r2, [r7, #8]
 8002db0:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;
    
    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002db2:	e007      	b.n	8002dc4 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	68ba      	ldr	r2, [r7, #8]
 8002dba:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	687a      	ldr	r2, [r7, #4]
 8002dc2:	60da      	str	r2, [r3, #12]
}
 8002dc4:	46c0      	nop			; (mov r8, r8)
 8002dc6:	46bd      	mov	sp, r7
 8002dc8:	b004      	add	sp, #16
 8002dca:	bd80      	pop	{r7, pc}

08002dcc <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002dcc:	b580      	push	{r7, lr}
 8002dce:	b082      	sub	sp, #8
 8002dd0:	af00      	add	r7, sp, #0
 8002dd2:	6078      	str	r0, [r7, #4]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	4a08      	ldr	r2, [pc, #32]	; (8002dfc <DMA_CalcBaseAndBitshift+0x30>)
 8002dda:	4694      	mov	ip, r2
 8002ddc:	4463      	add	r3, ip
 8002dde:	2114      	movs	r1, #20
 8002de0:	0018      	movs	r0, r3
 8002de2:	f7fd f991 	bl	8000108 <__udivsi3>
 8002de6:	0003      	movs	r3, r0
 8002de8:	009a      	lsls	r2, r3, #2
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	4a03      	ldr	r2, [pc, #12]	; (8002e00 <DMA_CalcBaseAndBitshift+0x34>)
 8002df2:	63da      	str	r2, [r3, #60]	; 0x3c
#endif
}
 8002df4:	46c0      	nop			; (mov r8, r8)
 8002df6:	46bd      	mov	sp, r7
 8002df8:	b002      	add	sp, #8
 8002dfa:	bd80      	pop	{r7, pc}
 8002dfc:	bffdfff8 	.word	0xbffdfff8
 8002e00:	40020000 	.word	0x40020000

08002e04 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
 8002e04:	b580      	push	{r7, lr}
 8002e06:	b086      	sub	sp, #24
 8002e08:	af00      	add	r7, sp, #0
 8002e0a:	6078      	str	r0, [r7, #4]
 8002e0c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002e0e:	2300      	movs	r3, #0
 8002e10:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002e12:	2300      	movs	r3, #0
 8002e14:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 8002e16:	2300      	movs	r3, #0
 8002e18:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 8002e1a:	687a      	ldr	r2, [r7, #4]
 8002e1c:	2390      	movs	r3, #144	; 0x90
 8002e1e:	05db      	lsls	r3, r3, #23
 8002e20:	429a      	cmp	r2, r3
 8002e22:	d014      	beq.n	8002e4e <HAL_GPIO_Init+0x4a>
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	4ac2      	ldr	r2, [pc, #776]	; (8003130 <HAL_GPIO_Init+0x32c>)
 8002e28:	4293      	cmp	r3, r2
 8002e2a:	d010      	beq.n	8002e4e <HAL_GPIO_Init+0x4a>
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	4ac1      	ldr	r2, [pc, #772]	; (8003134 <HAL_GPIO_Init+0x330>)
 8002e30:	4293      	cmp	r3, r2
 8002e32:	d00c      	beq.n	8002e4e <HAL_GPIO_Init+0x4a>
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	4ac0      	ldr	r2, [pc, #768]	; (8003138 <HAL_GPIO_Init+0x334>)
 8002e38:	4293      	cmp	r3, r2
 8002e3a:	d008      	beq.n	8002e4e <HAL_GPIO_Init+0x4a>
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	4abf      	ldr	r2, [pc, #764]	; (800313c <HAL_GPIO_Init+0x338>)
 8002e40:	4293      	cmp	r3, r2
 8002e42:	d004      	beq.n	8002e4e <HAL_GPIO_Init+0x4a>
 8002e44:	4bbe      	ldr	r3, [pc, #760]	; (8003140 <HAL_GPIO_Init+0x33c>)
 8002e46:	21c1      	movs	r1, #193	; 0xc1
 8002e48:	0018      	movs	r0, r3
 8002e4a:	f7fd fd92 	bl	8000972 <assert_failed>
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
 8002e4e:	683b      	ldr	r3, [r7, #0]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	041b      	lsls	r3, r3, #16
 8002e54:	0c1b      	lsrs	r3, r3, #16
 8002e56:	d004      	beq.n	8002e62 <HAL_GPIO_Init+0x5e>
 8002e58:	683b      	ldr	r3, [r7, #0]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	0c1b      	lsrs	r3, r3, #16
 8002e5e:	041b      	lsls	r3, r3, #16
 8002e60:	d004      	beq.n	8002e6c <HAL_GPIO_Init+0x68>
 8002e62:	4bb7      	ldr	r3, [pc, #732]	; (8003140 <HAL_GPIO_Init+0x33c>)
 8002e64:	21c2      	movs	r1, #194	; 0xc2
 8002e66:	0018      	movs	r0, r3
 8002e68:	f7fd fd83 	bl	8000972 <assert_failed>
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
 8002e6c:	683b      	ldr	r3, [r7, #0]
 8002e6e:	685b      	ldr	r3, [r3, #4]
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d036      	beq.n	8002ee2 <HAL_GPIO_Init+0xde>
 8002e74:	683b      	ldr	r3, [r7, #0]
 8002e76:	685b      	ldr	r3, [r3, #4]
 8002e78:	2b01      	cmp	r3, #1
 8002e7a:	d032      	beq.n	8002ee2 <HAL_GPIO_Init+0xde>
 8002e7c:	683b      	ldr	r3, [r7, #0]
 8002e7e:	685b      	ldr	r3, [r3, #4]
 8002e80:	2b11      	cmp	r3, #17
 8002e82:	d02e      	beq.n	8002ee2 <HAL_GPIO_Init+0xde>
 8002e84:	683b      	ldr	r3, [r7, #0]
 8002e86:	685b      	ldr	r3, [r3, #4]
 8002e88:	2b02      	cmp	r3, #2
 8002e8a:	d02a      	beq.n	8002ee2 <HAL_GPIO_Init+0xde>
 8002e8c:	683b      	ldr	r3, [r7, #0]
 8002e8e:	685b      	ldr	r3, [r3, #4]
 8002e90:	2b12      	cmp	r3, #18
 8002e92:	d026      	beq.n	8002ee2 <HAL_GPIO_Init+0xde>
 8002e94:	683b      	ldr	r3, [r7, #0]
 8002e96:	685b      	ldr	r3, [r3, #4]
 8002e98:	4aaa      	ldr	r2, [pc, #680]	; (8003144 <HAL_GPIO_Init+0x340>)
 8002e9a:	4293      	cmp	r3, r2
 8002e9c:	d021      	beq.n	8002ee2 <HAL_GPIO_Init+0xde>
 8002e9e:	683b      	ldr	r3, [r7, #0]
 8002ea0:	685b      	ldr	r3, [r3, #4]
 8002ea2:	4aa9      	ldr	r2, [pc, #676]	; (8003148 <HAL_GPIO_Init+0x344>)
 8002ea4:	4293      	cmp	r3, r2
 8002ea6:	d01c      	beq.n	8002ee2 <HAL_GPIO_Init+0xde>
 8002ea8:	683b      	ldr	r3, [r7, #0]
 8002eaa:	685b      	ldr	r3, [r3, #4]
 8002eac:	4aa7      	ldr	r2, [pc, #668]	; (800314c <HAL_GPIO_Init+0x348>)
 8002eae:	4293      	cmp	r3, r2
 8002eb0:	d017      	beq.n	8002ee2 <HAL_GPIO_Init+0xde>
 8002eb2:	683b      	ldr	r3, [r7, #0]
 8002eb4:	685b      	ldr	r3, [r3, #4]
 8002eb6:	4aa6      	ldr	r2, [pc, #664]	; (8003150 <HAL_GPIO_Init+0x34c>)
 8002eb8:	4293      	cmp	r3, r2
 8002eba:	d012      	beq.n	8002ee2 <HAL_GPIO_Init+0xde>
 8002ebc:	683b      	ldr	r3, [r7, #0]
 8002ebe:	685b      	ldr	r3, [r3, #4]
 8002ec0:	4aa4      	ldr	r2, [pc, #656]	; (8003154 <HAL_GPIO_Init+0x350>)
 8002ec2:	4293      	cmp	r3, r2
 8002ec4:	d00d      	beq.n	8002ee2 <HAL_GPIO_Init+0xde>
 8002ec6:	683b      	ldr	r3, [r7, #0]
 8002ec8:	685b      	ldr	r3, [r3, #4]
 8002eca:	4aa3      	ldr	r2, [pc, #652]	; (8003158 <HAL_GPIO_Init+0x354>)
 8002ecc:	4293      	cmp	r3, r2
 8002ece:	d008      	beq.n	8002ee2 <HAL_GPIO_Init+0xde>
 8002ed0:	683b      	ldr	r3, [r7, #0]
 8002ed2:	685b      	ldr	r3, [r3, #4]
 8002ed4:	2b03      	cmp	r3, #3
 8002ed6:	d004      	beq.n	8002ee2 <HAL_GPIO_Init+0xde>
 8002ed8:	4b99      	ldr	r3, [pc, #612]	; (8003140 <HAL_GPIO_Init+0x33c>)
 8002eda:	21c3      	movs	r1, #195	; 0xc3
 8002edc:	0018      	movs	r0, r3
 8002ede:	f7fd fd48 	bl	8000972 <assert_failed>
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull)); 
 8002ee2:	683b      	ldr	r3, [r7, #0]
 8002ee4:	689b      	ldr	r3, [r3, #8]
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d100      	bne.n	8002eec <HAL_GPIO_Init+0xe8>
 8002eea:	e1a2      	b.n	8003232 <HAL_GPIO_Init+0x42e>
 8002eec:	683b      	ldr	r3, [r7, #0]
 8002eee:	689b      	ldr	r3, [r3, #8]
 8002ef0:	2b01      	cmp	r3, #1
 8002ef2:	d100      	bne.n	8002ef6 <HAL_GPIO_Init+0xf2>
 8002ef4:	e19d      	b.n	8003232 <HAL_GPIO_Init+0x42e>
 8002ef6:	683b      	ldr	r3, [r7, #0]
 8002ef8:	689b      	ldr	r3, [r3, #8]
 8002efa:	2b02      	cmp	r3, #2
 8002efc:	d100      	bne.n	8002f00 <HAL_GPIO_Init+0xfc>
 8002efe:	e198      	b.n	8003232 <HAL_GPIO_Init+0x42e>
 8002f00:	4b8f      	ldr	r3, [pc, #572]	; (8003140 <HAL_GPIO_Init+0x33c>)
 8002f02:	21c4      	movs	r1, #196	; 0xc4
 8002f04:	0018      	movs	r0, r3
 8002f06:	f7fd fd34 	bl	8000972 <assert_failed>

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != RESET)
 8002f0a:	e192      	b.n	8003232 <HAL_GPIO_Init+0x42e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8002f0c:	683b      	ldr	r3, [r7, #0]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	2101      	movs	r1, #1
 8002f12:	697a      	ldr	r2, [r7, #20]
 8002f14:	4091      	lsls	r1, r2
 8002f16:	000a      	movs	r2, r1
 8002f18:	4013      	ands	r3, r2
 8002f1a:	60fb      	str	r3, [r7, #12]
    
    if(iocurrent)
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d100      	bne.n	8002f24 <HAL_GPIO_Init+0x120>
 8002f22:	e183      	b.n	800322c <HAL_GPIO_Init+0x428>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD)) 
 8002f24:	683b      	ldr	r3, [r7, #0]
 8002f26:	685b      	ldr	r3, [r3, #4]
 8002f28:	2b02      	cmp	r3, #2
 8002f2a:	d003      	beq.n	8002f34 <HAL_GPIO_Init+0x130>
 8002f2c:	683b      	ldr	r3, [r7, #0]
 8002f2e:	685b      	ldr	r3, [r3, #4]
 8002f30:	2b12      	cmp	r3, #18
 8002f32:	d13a      	bne.n	8002faa <HAL_GPIO_Init+0x1a6>
      {
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
 8002f34:	687a      	ldr	r2, [r7, #4]
 8002f36:	2390      	movs	r3, #144	; 0x90
 8002f38:	05db      	lsls	r3, r3, #23
 8002f3a:	429a      	cmp	r2, r3
 8002f3c:	d008      	beq.n	8002f50 <HAL_GPIO_Init+0x14c>
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	4a7b      	ldr	r2, [pc, #492]	; (8003130 <HAL_GPIO_Init+0x32c>)
 8002f42:	4293      	cmp	r3, r2
 8002f44:	d004      	beq.n	8002f50 <HAL_GPIO_Init+0x14c>
 8002f46:	4b7e      	ldr	r3, [pc, #504]	; (8003140 <HAL_GPIO_Init+0x33c>)
 8002f48:	21d3      	movs	r1, #211	; 0xd3
 8002f4a:	0018      	movs	r0, r3
 8002f4c:	f7fd fd11 	bl	8000972 <assert_failed>
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
 8002f50:	683b      	ldr	r3, [r7, #0]
 8002f52:	691b      	ldr	r3, [r3, #16]
 8002f54:	2b07      	cmp	r3, #7
 8002f56:	d904      	bls.n	8002f62 <HAL_GPIO_Init+0x15e>
 8002f58:	4b79      	ldr	r3, [pc, #484]	; (8003140 <HAL_GPIO_Init+0x33c>)
 8002f5a:	21d4      	movs	r1, #212	; 0xd4
 8002f5c:	0018      	movs	r0, r3
 8002f5e:	f7fd fd08 	bl	8000972 <assert_failed>
        
        /* Configure Alternate function mapped with the current IO */ 
        temp = GPIOx->AFR[position >> 3];
 8002f62:	697b      	ldr	r3, [r7, #20]
 8002f64:	08da      	lsrs	r2, r3, #3
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	3208      	adds	r2, #8
 8002f6a:	0092      	lsls	r2, r2, #2
 8002f6c:	58d3      	ldr	r3, [r2, r3]
 8002f6e:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;      
 8002f70:	697b      	ldr	r3, [r7, #20]
 8002f72:	2207      	movs	r2, #7
 8002f74:	4013      	ands	r3, r2
 8002f76:	009b      	lsls	r3, r3, #2
 8002f78:	220f      	movs	r2, #15
 8002f7a:	409a      	lsls	r2, r3
 8002f7c:	0013      	movs	r3, r2
 8002f7e:	43da      	mvns	r2, r3
 8002f80:	693b      	ldr	r3, [r7, #16]
 8002f82:	4013      	ands	r3, r2
 8002f84:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));       
 8002f86:	683b      	ldr	r3, [r7, #0]
 8002f88:	691a      	ldr	r2, [r3, #16]
 8002f8a:	697b      	ldr	r3, [r7, #20]
 8002f8c:	2107      	movs	r1, #7
 8002f8e:	400b      	ands	r3, r1
 8002f90:	009b      	lsls	r3, r3, #2
 8002f92:	409a      	lsls	r2, r3
 8002f94:	0013      	movs	r3, r2
 8002f96:	693a      	ldr	r2, [r7, #16]
 8002f98:	4313      	orrs	r3, r2
 8002f9a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8002f9c:	697b      	ldr	r3, [r7, #20]
 8002f9e:	08da      	lsrs	r2, r3, #3
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	3208      	adds	r2, #8
 8002fa4:	0092      	lsls	r2, r2, #2
 8002fa6:	6939      	ldr	r1, [r7, #16]
 8002fa8:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2U));   
 8002fb0:	697b      	ldr	r3, [r7, #20]
 8002fb2:	005b      	lsls	r3, r3, #1
 8002fb4:	2203      	movs	r2, #3
 8002fb6:	409a      	lsls	r2, r3
 8002fb8:	0013      	movs	r3, r2
 8002fba:	43da      	mvns	r2, r3
 8002fbc:	693b      	ldr	r3, [r7, #16]
 8002fbe:	4013      	ands	r3, r2
 8002fc0:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002fc2:	683b      	ldr	r3, [r7, #0]
 8002fc4:	685b      	ldr	r3, [r3, #4]
 8002fc6:	2203      	movs	r2, #3
 8002fc8:	401a      	ands	r2, r3
 8002fca:	697b      	ldr	r3, [r7, #20]
 8002fcc:	005b      	lsls	r3, r3, #1
 8002fce:	409a      	lsls	r2, r3
 8002fd0:	0013      	movs	r3, r2
 8002fd2:	693a      	ldr	r2, [r7, #16]
 8002fd4:	4313      	orrs	r3, r2
 8002fd6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	693a      	ldr	r2, [r7, #16]
 8002fdc:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002fde:	683b      	ldr	r3, [r7, #0]
 8002fe0:	685b      	ldr	r3, [r3, #4]
 8002fe2:	2b01      	cmp	r3, #1
 8002fe4:	d00b      	beq.n	8002ffe <HAL_GPIO_Init+0x1fa>
 8002fe6:	683b      	ldr	r3, [r7, #0]
 8002fe8:	685b      	ldr	r3, [r3, #4]
 8002fea:	2b02      	cmp	r3, #2
 8002fec:	d007      	beq.n	8002ffe <HAL_GPIO_Init+0x1fa>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002fee:	683b      	ldr	r3, [r7, #0]
 8002ff0:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002ff2:	2b11      	cmp	r3, #17
 8002ff4:	d003      	beq.n	8002ffe <HAL_GPIO_Init+0x1fa>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002ff6:	683b      	ldr	r3, [r7, #0]
 8002ff8:	685b      	ldr	r3, [r3, #4]
 8002ffa:	2b12      	cmp	r3, #18
 8002ffc:	d141      	bne.n	8003082 <HAL_GPIO_Init+0x27e>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 8002ffe:	683b      	ldr	r3, [r7, #0]
 8003000:	68db      	ldr	r3, [r3, #12]
 8003002:	2b00      	cmp	r3, #0
 8003004:	d00c      	beq.n	8003020 <HAL_GPIO_Init+0x21c>
 8003006:	683b      	ldr	r3, [r7, #0]
 8003008:	68db      	ldr	r3, [r3, #12]
 800300a:	2b01      	cmp	r3, #1
 800300c:	d008      	beq.n	8003020 <HAL_GPIO_Init+0x21c>
 800300e:	683b      	ldr	r3, [r7, #0]
 8003010:	68db      	ldr	r3, [r3, #12]
 8003012:	2b03      	cmp	r3, #3
 8003014:	d004      	beq.n	8003020 <HAL_GPIO_Init+0x21c>
 8003016:	4b4a      	ldr	r3, [pc, #296]	; (8003140 <HAL_GPIO_Init+0x33c>)
 8003018:	21e8      	movs	r1, #232	; 0xe8
 800301a:	0018      	movs	r0, r3
 800301c:	f7fd fca9 	bl	8000972 <assert_failed>
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	689b      	ldr	r3, [r3, #8]
 8003024:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003026:	697b      	ldr	r3, [r7, #20]
 8003028:	005b      	lsls	r3, r3, #1
 800302a:	2203      	movs	r2, #3
 800302c:	409a      	lsls	r2, r3
 800302e:	0013      	movs	r3, r2
 8003030:	43da      	mvns	r2, r3
 8003032:	693b      	ldr	r3, [r7, #16]
 8003034:	4013      	ands	r3, r2
 8003036:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, GPIO_Init->Speed << (position * 2U));
 8003038:	683b      	ldr	r3, [r7, #0]
 800303a:	68da      	ldr	r2, [r3, #12]
 800303c:	697b      	ldr	r3, [r7, #20]
 800303e:	005b      	lsls	r3, r3, #1
 8003040:	409a      	lsls	r2, r3
 8003042:	0013      	movs	r3, r2
 8003044:	693a      	ldr	r2, [r7, #16]
 8003046:	4313      	orrs	r3, r2
 8003048:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	693a      	ldr	r2, [r7, #16]
 800304e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	685b      	ldr	r3, [r3, #4]
 8003054:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 8003056:	2201      	movs	r2, #1
 8003058:	697b      	ldr	r3, [r7, #20]
 800305a:	409a      	lsls	r2, r3
 800305c:	0013      	movs	r3, r2
 800305e:	43da      	mvns	r2, r3
 8003060:	693b      	ldr	r3, [r7, #16]
 8003062:	4013      	ands	r3, r2
 8003064:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, ((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8003066:	683b      	ldr	r3, [r7, #0]
 8003068:	685b      	ldr	r3, [r3, #4]
 800306a:	091b      	lsrs	r3, r3, #4
 800306c:	2201      	movs	r2, #1
 800306e:	401a      	ands	r2, r3
 8003070:	697b      	ldr	r3, [r7, #20]
 8003072:	409a      	lsls	r2, r3
 8003074:	0013      	movs	r3, r2
 8003076:	693a      	ldr	r2, [r7, #16]
 8003078:	4313      	orrs	r3, r2
 800307a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	693a      	ldr	r2, [r7, #16]
 8003080:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	68db      	ldr	r3, [r3, #12]
 8003086:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003088:	697b      	ldr	r3, [r7, #20]
 800308a:	005b      	lsls	r3, r3, #1
 800308c:	2203      	movs	r2, #3
 800308e:	409a      	lsls	r2, r3
 8003090:	0013      	movs	r3, r2
 8003092:	43da      	mvns	r2, r3
 8003094:	693b      	ldr	r3, [r7, #16]
 8003096:	4013      	ands	r3, r2
 8003098:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Pull) << (position * 2U));
 800309a:	683b      	ldr	r3, [r7, #0]
 800309c:	689a      	ldr	r2, [r3, #8]
 800309e:	697b      	ldr	r3, [r7, #20]
 80030a0:	005b      	lsls	r3, r3, #1
 80030a2:	409a      	lsls	r2, r3
 80030a4:	0013      	movs	r3, r2
 80030a6:	693a      	ldr	r2, [r7, #16]
 80030a8:	4313      	orrs	r3, r2
 80030aa:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	693a      	ldr	r2, [r7, #16]
 80030b0:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 80030b2:	683b      	ldr	r3, [r7, #0]
 80030b4:	685a      	ldr	r2, [r3, #4]
 80030b6:	2380      	movs	r3, #128	; 0x80
 80030b8:	055b      	lsls	r3, r3, #21
 80030ba:	4013      	ands	r3, r2
 80030bc:	d100      	bne.n	80030c0 <HAL_GPIO_Init+0x2bc>
 80030be:	e0b5      	b.n	800322c <HAL_GPIO_Init+0x428>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80030c0:	4b26      	ldr	r3, [pc, #152]	; (800315c <HAL_GPIO_Init+0x358>)
 80030c2:	699a      	ldr	r2, [r3, #24]
 80030c4:	4b25      	ldr	r3, [pc, #148]	; (800315c <HAL_GPIO_Init+0x358>)
 80030c6:	2101      	movs	r1, #1
 80030c8:	430a      	orrs	r2, r1
 80030ca:	619a      	str	r2, [r3, #24]
 80030cc:	4b23      	ldr	r3, [pc, #140]	; (800315c <HAL_GPIO_Init+0x358>)
 80030ce:	699b      	ldr	r3, [r3, #24]
 80030d0:	2201      	movs	r2, #1
 80030d2:	4013      	ands	r3, r2
 80030d4:	60bb      	str	r3, [r7, #8]
 80030d6:	68bb      	ldr	r3, [r7, #8]
  
        temp = SYSCFG->EXTICR[position >> 2];
 80030d8:	4a21      	ldr	r2, [pc, #132]	; (8003160 <HAL_GPIO_Init+0x35c>)
 80030da:	697b      	ldr	r3, [r7, #20]
 80030dc:	089b      	lsrs	r3, r3, #2
 80030de:	3302      	adds	r3, #2
 80030e0:	009b      	lsls	r3, r3, #2
 80030e2:	589b      	ldr	r3, [r3, r2]
 80030e4:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 80030e6:	697b      	ldr	r3, [r7, #20]
 80030e8:	2203      	movs	r2, #3
 80030ea:	4013      	ands	r3, r2
 80030ec:	009b      	lsls	r3, r3, #2
 80030ee:	220f      	movs	r2, #15
 80030f0:	409a      	lsls	r2, r3
 80030f2:	0013      	movs	r3, r2
 80030f4:	43da      	mvns	r2, r3
 80030f6:	693b      	ldr	r3, [r7, #16]
 80030f8:	4013      	ands	r3, r2
 80030fa:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80030fc:	687a      	ldr	r2, [r7, #4]
 80030fe:	2390      	movs	r3, #144	; 0x90
 8003100:	05db      	lsls	r3, r3, #23
 8003102:	429a      	cmp	r2, r3
 8003104:	d02e      	beq.n	8003164 <HAL_GPIO_Init+0x360>
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	4a09      	ldr	r2, [pc, #36]	; (8003130 <HAL_GPIO_Init+0x32c>)
 800310a:	4293      	cmp	r3, r2
 800310c:	d00d      	beq.n	800312a <HAL_GPIO_Init+0x326>
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	4a08      	ldr	r2, [pc, #32]	; (8003134 <HAL_GPIO_Init+0x330>)
 8003112:	4293      	cmp	r3, r2
 8003114:	d007      	beq.n	8003126 <HAL_GPIO_Init+0x322>
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	4a07      	ldr	r2, [pc, #28]	; (8003138 <HAL_GPIO_Init+0x334>)
 800311a:	4293      	cmp	r3, r2
 800311c:	d101      	bne.n	8003122 <HAL_GPIO_Init+0x31e>
 800311e:	2303      	movs	r3, #3
 8003120:	e021      	b.n	8003166 <HAL_GPIO_Init+0x362>
 8003122:	2305      	movs	r3, #5
 8003124:	e01f      	b.n	8003166 <HAL_GPIO_Init+0x362>
 8003126:	2302      	movs	r3, #2
 8003128:	e01d      	b.n	8003166 <HAL_GPIO_Init+0x362>
 800312a:	2301      	movs	r3, #1
 800312c:	e01b      	b.n	8003166 <HAL_GPIO_Init+0x362>
 800312e:	46c0      	nop			; (mov r8, r8)
 8003130:	48000400 	.word	0x48000400
 8003134:	48000800 	.word	0x48000800
 8003138:	48000c00 	.word	0x48000c00
 800313c:	48001400 	.word	0x48001400
 8003140:	08006fec 	.word	0x08006fec
 8003144:	10110000 	.word	0x10110000
 8003148:	10210000 	.word	0x10210000
 800314c:	10310000 	.word	0x10310000
 8003150:	10120000 	.word	0x10120000
 8003154:	10220000 	.word	0x10220000
 8003158:	10320000 	.word	0x10320000
 800315c:	40021000 	.word	0x40021000
 8003160:	40010000 	.word	0x40010000
 8003164:	2300      	movs	r3, #0
 8003166:	697a      	ldr	r2, [r7, #20]
 8003168:	2103      	movs	r1, #3
 800316a:	400a      	ands	r2, r1
 800316c:	0092      	lsls	r2, r2, #2
 800316e:	4093      	lsls	r3, r2
 8003170:	693a      	ldr	r2, [r7, #16]
 8003172:	4313      	orrs	r3, r2
 8003174:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2] = temp;
 8003176:	4934      	ldr	r1, [pc, #208]	; (8003248 <HAL_GPIO_Init+0x444>)
 8003178:	697b      	ldr	r3, [r7, #20]
 800317a:	089b      	lsrs	r3, r3, #2
 800317c:	3302      	adds	r3, #2
 800317e:	009b      	lsls	r3, r3, #2
 8003180:	693a      	ldr	r2, [r7, #16]
 8003182:	505a      	str	r2, [r3, r1]
                  
        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003184:	4b31      	ldr	r3, [pc, #196]	; (800324c <HAL_GPIO_Init+0x448>)
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	43da      	mvns	r2, r3
 800318e:	693b      	ldr	r3, [r7, #16]
 8003190:	4013      	ands	r3, r2
 8003192:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003194:	683b      	ldr	r3, [r7, #0]
 8003196:	685a      	ldr	r2, [r3, #4]
 8003198:	2380      	movs	r3, #128	; 0x80
 800319a:	025b      	lsls	r3, r3, #9
 800319c:	4013      	ands	r3, r2
 800319e:	d003      	beq.n	80031a8 <HAL_GPIO_Init+0x3a4>
        {
          SET_BIT(temp, iocurrent); 
 80031a0:	693a      	ldr	r2, [r7, #16]
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	4313      	orrs	r3, r2
 80031a6:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80031a8:	4b28      	ldr	r3, [pc, #160]	; (800324c <HAL_GPIO_Init+0x448>)
 80031aa:	693a      	ldr	r2, [r7, #16]
 80031ac:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 80031ae:	4b27      	ldr	r3, [pc, #156]	; (800324c <HAL_GPIO_Init+0x448>)
 80031b0:	685b      	ldr	r3, [r3, #4]
 80031b2:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);      
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	43da      	mvns	r2, r3
 80031b8:	693b      	ldr	r3, [r7, #16]
 80031ba:	4013      	ands	r3, r2
 80031bc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80031be:	683b      	ldr	r3, [r7, #0]
 80031c0:	685a      	ldr	r2, [r3, #4]
 80031c2:	2380      	movs	r3, #128	; 0x80
 80031c4:	029b      	lsls	r3, r3, #10
 80031c6:	4013      	ands	r3, r2
 80031c8:	d003      	beq.n	80031d2 <HAL_GPIO_Init+0x3ce>
        { 
          SET_BIT(temp, iocurrent); 
 80031ca:	693a      	ldr	r2, [r7, #16]
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	4313      	orrs	r3, r2
 80031d0:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80031d2:	4b1e      	ldr	r3, [pc, #120]	; (800324c <HAL_GPIO_Init+0x448>)
 80031d4:	693a      	ldr	r2, [r7, #16]
 80031d6:	605a      	str	r2, [r3, #4]
  
        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80031d8:	4b1c      	ldr	r3, [pc, #112]	; (800324c <HAL_GPIO_Init+0x448>)
 80031da:	689b      	ldr	r3, [r3, #8]
 80031dc:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	43da      	mvns	r2, r3
 80031e2:	693b      	ldr	r3, [r7, #16]
 80031e4:	4013      	ands	r3, r2
 80031e6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80031e8:	683b      	ldr	r3, [r7, #0]
 80031ea:	685a      	ldr	r2, [r3, #4]
 80031ec:	2380      	movs	r3, #128	; 0x80
 80031ee:	035b      	lsls	r3, r3, #13
 80031f0:	4013      	ands	r3, r2
 80031f2:	d003      	beq.n	80031fc <HAL_GPIO_Init+0x3f8>
        {
          SET_BIT(temp, iocurrent); 
 80031f4:	693a      	ldr	r2, [r7, #16]
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	4313      	orrs	r3, r2
 80031fa:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80031fc:	4b13      	ldr	r3, [pc, #76]	; (800324c <HAL_GPIO_Init+0x448>)
 80031fe:	693a      	ldr	r2, [r7, #16]
 8003200:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8003202:	4b12      	ldr	r3, [pc, #72]	; (800324c <HAL_GPIO_Init+0x448>)
 8003204:	68db      	ldr	r3, [r3, #12]
 8003206:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	43da      	mvns	r2, r3
 800320c:	693b      	ldr	r3, [r7, #16]
 800320e:	4013      	ands	r3, r2
 8003210:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003212:	683b      	ldr	r3, [r7, #0]
 8003214:	685a      	ldr	r2, [r3, #4]
 8003216:	2380      	movs	r3, #128	; 0x80
 8003218:	039b      	lsls	r3, r3, #14
 800321a:	4013      	ands	r3, r2
 800321c:	d003      	beq.n	8003226 <HAL_GPIO_Init+0x422>
        {
          SET_BIT(temp, iocurrent); 
 800321e:	693a      	ldr	r2, [r7, #16]
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	4313      	orrs	r3, r2
 8003224:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8003226:	4b09      	ldr	r3, [pc, #36]	; (800324c <HAL_GPIO_Init+0x448>)
 8003228:	693a      	ldr	r2, [r7, #16]
 800322a:	60da      	str	r2, [r3, #12]
      }
    }
    
    position++;
 800322c:	697b      	ldr	r3, [r7, #20]
 800322e:	3301      	adds	r3, #1
 8003230:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != RESET)
 8003232:	683b      	ldr	r3, [r7, #0]
 8003234:	681a      	ldr	r2, [r3, #0]
 8003236:	697b      	ldr	r3, [r7, #20]
 8003238:	40da      	lsrs	r2, r3
 800323a:	1e13      	subs	r3, r2, #0
 800323c:	d000      	beq.n	8003240 <HAL_GPIO_Init+0x43c>
 800323e:	e665      	b.n	8002f0c <HAL_GPIO_Init+0x108>
  } 
}
 8003240:	46c0      	nop			; (mov r8, r8)
 8003242:	46bd      	mov	sp, r7
 8003244:	b006      	add	sp, #24
 8003246:	bd80      	pop	{r7, pc}
 8003248:	40010000 	.word	0x40010000
 800324c:	40010400 	.word	0x40010400

08003250 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003250:	b580      	push	{r7, lr}
 8003252:	b084      	sub	sp, #16
 8003254:	af00      	add	r7, sp, #0
 8003256:	6078      	str	r0, [r7, #4]
 8003258:	000a      	movs	r2, r1
 800325a:	1cbb      	adds	r3, r7, #2
 800325c:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 800325e:	1cbb      	adds	r3, r7, #2
 8003260:	881b      	ldrh	r3, [r3, #0]
 8003262:	2b00      	cmp	r3, #0
 8003264:	d004      	beq.n	8003270 <HAL_GPIO_ReadPin+0x20>
 8003266:	1cbb      	adds	r3, r7, #2
 8003268:	881b      	ldrh	r3, [r3, #0]
 800326a:	0c1b      	lsrs	r3, r3, #16
 800326c:	041b      	lsls	r3, r3, #16
 800326e:	d007      	beq.n	8003280 <HAL_GPIO_ReadPin+0x30>
 8003270:	238e      	movs	r3, #142	; 0x8e
 8003272:	33ff      	adds	r3, #255	; 0xff
 8003274:	001a      	movs	r2, r3
 8003276:	4b0d      	ldr	r3, [pc, #52]	; (80032ac <HAL_GPIO_ReadPin+0x5c>)
 8003278:	0011      	movs	r1, r2
 800327a:	0018      	movs	r0, r3
 800327c:	f7fd fb79 	bl	8000972 <assert_failed>

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	691b      	ldr	r3, [r3, #16]
 8003284:	1cba      	adds	r2, r7, #2
 8003286:	8812      	ldrh	r2, [r2, #0]
 8003288:	4013      	ands	r3, r2
 800328a:	d004      	beq.n	8003296 <HAL_GPIO_ReadPin+0x46>
  {
    bitstatus = GPIO_PIN_SET;
 800328c:	230f      	movs	r3, #15
 800328e:	18fb      	adds	r3, r7, r3
 8003290:	2201      	movs	r2, #1
 8003292:	701a      	strb	r2, [r3, #0]
 8003294:	e003      	b.n	800329e <HAL_GPIO_ReadPin+0x4e>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003296:	230f      	movs	r3, #15
 8003298:	18fb      	adds	r3, r7, r3
 800329a:	2200      	movs	r2, #0
 800329c:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 800329e:	230f      	movs	r3, #15
 80032a0:	18fb      	adds	r3, r7, r3
 80032a2:	781b      	ldrb	r3, [r3, #0]
  }
 80032a4:	0018      	movs	r0, r3
 80032a6:	46bd      	mov	sp, r7
 80032a8:	b004      	add	sp, #16
 80032aa:	bd80      	pop	{r7, pc}
 80032ac:	08006fec 	.word	0x08006fec

080032b0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80032b0:	b580      	push	{r7, lr}
 80032b2:	b082      	sub	sp, #8
 80032b4:	af00      	add	r7, sp, #0
 80032b6:	6078      	str	r0, [r7, #4]
 80032b8:	0008      	movs	r0, r1
 80032ba:	0011      	movs	r1, r2
 80032bc:	1cbb      	adds	r3, r7, #2
 80032be:	1c02      	adds	r2, r0, #0
 80032c0:	801a      	strh	r2, [r3, #0]
 80032c2:	1c7b      	adds	r3, r7, #1
 80032c4:	1c0a      	adds	r2, r1, #0
 80032c6:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 80032c8:	1cbb      	adds	r3, r7, #2
 80032ca:	881b      	ldrh	r3, [r3, #0]
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d004      	beq.n	80032da <HAL_GPIO_WritePin+0x2a>
 80032d0:	1cbb      	adds	r3, r7, #2
 80032d2:	881b      	ldrh	r3, [r3, #0]
 80032d4:	0c1b      	lsrs	r3, r3, #16
 80032d6:	041b      	lsls	r3, r3, #16
 80032d8:	d006      	beq.n	80032e8 <HAL_GPIO_WritePin+0x38>
 80032da:	23d6      	movs	r3, #214	; 0xd6
 80032dc:	005a      	lsls	r2, r3, #1
 80032de:	4b13      	ldr	r3, [pc, #76]	; (800332c <HAL_GPIO_WritePin+0x7c>)
 80032e0:	0011      	movs	r1, r2
 80032e2:	0018      	movs	r0, r3
 80032e4:	f7fd fb45 	bl	8000972 <assert_failed>
  assert_param(IS_GPIO_PIN_ACTION(PinState));
 80032e8:	1c7b      	adds	r3, r7, #1
 80032ea:	781b      	ldrb	r3, [r3, #0]
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d00b      	beq.n	8003308 <HAL_GPIO_WritePin+0x58>
 80032f0:	1c7b      	adds	r3, r7, #1
 80032f2:	781b      	ldrb	r3, [r3, #0]
 80032f4:	2b01      	cmp	r3, #1
 80032f6:	d007      	beq.n	8003308 <HAL_GPIO_WritePin+0x58>
 80032f8:	23ae      	movs	r3, #174	; 0xae
 80032fa:	33ff      	adds	r3, #255	; 0xff
 80032fc:	001a      	movs	r2, r3
 80032fe:	4b0b      	ldr	r3, [pc, #44]	; (800332c <HAL_GPIO_WritePin+0x7c>)
 8003300:	0011      	movs	r1, r2
 8003302:	0018      	movs	r0, r3
 8003304:	f7fd fb35 	bl	8000972 <assert_failed>

  if (PinState != GPIO_PIN_RESET)
 8003308:	1c7b      	adds	r3, r7, #1
 800330a:	781b      	ldrb	r3, [r3, #0]
 800330c:	2b00      	cmp	r3, #0
 800330e:	d004      	beq.n	800331a <HAL_GPIO_WritePin+0x6a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003310:	1cbb      	adds	r3, r7, #2
 8003312:	881a      	ldrh	r2, [r3, #0]
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003318:	e003      	b.n	8003322 <HAL_GPIO_WritePin+0x72>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800331a:	1cbb      	adds	r3, r7, #2
 800331c:	881a      	ldrh	r2, [r3, #0]
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003322:	46c0      	nop			; (mov r8, r8)
 8003324:	46bd      	mov	sp, r7
 8003326:	b002      	add	sp, #8
 8003328:	bd80      	pop	{r7, pc}
 800332a:	46c0      	nop			; (mov r8, r8)
 800332c:	08006fec 	.word	0x08006fec

08003330 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F0 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003330:	b580      	push	{r7, lr}
 8003332:	b082      	sub	sp, #8
 8003334:	af00      	add	r7, sp, #0
 8003336:	6078      	str	r0, [r7, #4]
 8003338:	000a      	movs	r2, r1
 800333a:	1cbb      	adds	r3, r7, #2
 800333c:	801a      	strh	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 800333e:	1cbb      	adds	r3, r7, #2
 8003340:	881b      	ldrh	r3, [r3, #0]
 8003342:	2b00      	cmp	r3, #0
 8003344:	d004      	beq.n	8003350 <HAL_GPIO_TogglePin+0x20>
 8003346:	1cbb      	adds	r3, r7, #2
 8003348:	881b      	ldrh	r3, [r3, #0]
 800334a:	0c1b      	lsrs	r3, r3, #16
 800334c:	041b      	lsls	r3, r3, #16
 800334e:	d006      	beq.n	800335e <HAL_GPIO_TogglePin+0x2e>
 8003350:	23e1      	movs	r3, #225	; 0xe1
 8003352:	005a      	lsls	r2, r3, #1
 8003354:	4b07      	ldr	r3, [pc, #28]	; (8003374 <HAL_GPIO_TogglePin+0x44>)
 8003356:	0011      	movs	r1, r2
 8003358:	0018      	movs	r0, r3
 800335a:	f7fd fb0a 	bl	8000972 <assert_failed>

  GPIOx->ODR ^= GPIO_Pin;
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	695a      	ldr	r2, [r3, #20]
 8003362:	1cbb      	adds	r3, r7, #2
 8003364:	881b      	ldrh	r3, [r3, #0]
 8003366:	405a      	eors	r2, r3
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	615a      	str	r2, [r3, #20]
}
 800336c:	46c0      	nop			; (mov r8, r8)
 800336e:	46bd      	mov	sp, r7
 8003370:	b002      	add	sp, #8
 8003372:	bd80      	pop	{r7, pc}
 8003374:	08006fec 	.word	0x08006fec

08003378 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003378:	b580      	push	{r7, lr}
 800337a:	b082      	sub	sp, #8
 800337c:	af00      	add	r7, sp, #0
 800337e:	0002      	movs	r2, r0
 8003380:	1dbb      	adds	r3, r7, #6
 8003382:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET) 
 8003384:	4b09      	ldr	r3, [pc, #36]	; (80033ac <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8003386:	695b      	ldr	r3, [r3, #20]
 8003388:	1dba      	adds	r2, r7, #6
 800338a:	8812      	ldrh	r2, [r2, #0]
 800338c:	4013      	ands	r3, r2
 800338e:	d008      	beq.n	80033a2 <HAL_GPIO_EXTI_IRQHandler+0x2a>
  { 
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003390:	4b06      	ldr	r3, [pc, #24]	; (80033ac <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8003392:	1dba      	adds	r2, r7, #6
 8003394:	8812      	ldrh	r2, [r2, #0]
 8003396:	615a      	str	r2, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003398:	1dbb      	adds	r3, r7, #6
 800339a:	881b      	ldrh	r3, [r3, #0]
 800339c:	0018      	movs	r0, r3
 800339e:	f7fd fac3 	bl	8000928 <HAL_GPIO_EXTI_Callback>
  }
}
 80033a2:	46c0      	nop			; (mov r8, r8)
 80033a4:	46bd      	mov	sp, r7
 80033a6:	b002      	add	sp, #8
 80033a8:	bd80      	pop	{r7, pc}
 80033aa:	46c0      	nop			; (mov r8, r8)
 80033ac:	40010400 	.word	0x40010400

080033b0 <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 80033b0:	b580      	push	{r7, lr}
 80033b2:	b084      	sub	sp, #16
 80033b4:	af00      	add	r7, sp, #0
 80033b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if(hiwdg == NULL)
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d101      	bne.n	80033c2 <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
 80033be:	2301      	movs	r3, #1
 80033c0:	e075      	b.n	80034ae <HAL_IWDG_Init+0xfe>
  }

  /* Check the parameters */
  assert_param(IS_IWDG_ALL_INSTANCE(hiwdg->Instance));
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	4a3c      	ldr	r2, [pc, #240]	; (80034b8 <HAL_IWDG_Init+0x108>)
 80033c8:	4293      	cmp	r3, r2
 80033ca:	d004      	beq.n	80033d6 <HAL_IWDG_Init+0x26>
 80033cc:	4b3b      	ldr	r3, [pc, #236]	; (80034bc <HAL_IWDG_Init+0x10c>)
 80033ce:	21b5      	movs	r1, #181	; 0xb5
 80033d0:	0018      	movs	r0, r3
 80033d2:	f7fd face 	bl	8000972 <assert_failed>
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	685b      	ldr	r3, [r3, #4]
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d01c      	beq.n	8003418 <HAL_IWDG_Init+0x68>
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	685b      	ldr	r3, [r3, #4]
 80033e2:	2b01      	cmp	r3, #1
 80033e4:	d018      	beq.n	8003418 <HAL_IWDG_Init+0x68>
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	685b      	ldr	r3, [r3, #4]
 80033ea:	2b02      	cmp	r3, #2
 80033ec:	d014      	beq.n	8003418 <HAL_IWDG_Init+0x68>
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	685b      	ldr	r3, [r3, #4]
 80033f2:	2b03      	cmp	r3, #3
 80033f4:	d010      	beq.n	8003418 <HAL_IWDG_Init+0x68>
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	685b      	ldr	r3, [r3, #4]
 80033fa:	2b04      	cmp	r3, #4
 80033fc:	d00c      	beq.n	8003418 <HAL_IWDG_Init+0x68>
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	685b      	ldr	r3, [r3, #4]
 8003402:	2b05      	cmp	r3, #5
 8003404:	d008      	beq.n	8003418 <HAL_IWDG_Init+0x68>
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	685b      	ldr	r3, [r3, #4]
 800340a:	2b06      	cmp	r3, #6
 800340c:	d004      	beq.n	8003418 <HAL_IWDG_Init+0x68>
 800340e:	4b2b      	ldr	r3, [pc, #172]	; (80034bc <HAL_IWDG_Init+0x10c>)
 8003410:	21b6      	movs	r1, #182	; 0xb6
 8003412:	0018      	movs	r0, r3
 8003414:	f7fd faad 	bl	8000972 <assert_failed>
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	689b      	ldr	r3, [r3, #8]
 800341c:	4a28      	ldr	r2, [pc, #160]	; (80034c0 <HAL_IWDG_Init+0x110>)
 800341e:	4293      	cmp	r3, r2
 8003420:	d904      	bls.n	800342c <HAL_IWDG_Init+0x7c>
 8003422:	4b26      	ldr	r3, [pc, #152]	; (80034bc <HAL_IWDG_Init+0x10c>)
 8003424:	21b7      	movs	r1, #183	; 0xb7
 8003426:	0018      	movs	r0, r3
 8003428:	f7fd faa3 	bl	8000972 <assert_failed>
  assert_param(IS_IWDG_WINDOW(hiwdg->Init.Window));
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	68db      	ldr	r3, [r3, #12]
 8003430:	4a23      	ldr	r2, [pc, #140]	; (80034c0 <HAL_IWDG_Init+0x110>)
 8003432:	4293      	cmp	r3, r2
 8003434:	d904      	bls.n	8003440 <HAL_IWDG_Init+0x90>
 8003436:	4b21      	ldr	r3, [pc, #132]	; (80034bc <HAL_IWDG_Init+0x10c>)
 8003438:	21b8      	movs	r1, #184	; 0xb8
 800343a:	0018      	movs	r0, r3
 800343c:	f7fd fa99 	bl	8000972 <assert_failed>

  /* Enable IWDG. LSI is turned on automaticaly */
  __HAL_IWDG_START(hiwdg);
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	4a1f      	ldr	r2, [pc, #124]	; (80034c4 <HAL_IWDG_Init+0x114>)
 8003446:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR, IWDG_RLR and IWDG_WINR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	4a1e      	ldr	r2, [pc, #120]	; (80034c8 <HAL_IWDG_Init+0x118>)
 800344e:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	687a      	ldr	r2, [r7, #4]
 8003456:	6852      	ldr	r2, [r2, #4]
 8003458:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	687a      	ldr	r2, [r7, #4]
 8003460:	6892      	ldr	r2, [r2, #8]
 8003462:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 8003464:	f7fe f964 	bl	8001730 <HAL_GetTick>
 8003468:	0003      	movs	r3, r0
 800346a:	60fb      	str	r3, [r7, #12]

   /* Wait for register to be updated */
  while(hiwdg->Instance->SR != RESET)
 800346c:	e008      	b.n	8003480 <HAL_IWDG_Init+0xd0>
  {
    if((HAL_GetTick() - tickstart ) > HAL_IWDG_DEFAULT_TIMEOUT)
 800346e:	f7fe f95f 	bl	8001730 <HAL_GetTick>
 8003472:	0002      	movs	r2, r0
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	1ad3      	subs	r3, r2, r3
 8003478:	2b27      	cmp	r3, #39	; 0x27
 800347a:	d901      	bls.n	8003480 <HAL_IWDG_Init+0xd0>
    {
      return HAL_TIMEOUT;
 800347c:	2303      	movs	r3, #3
 800347e:	e016      	b.n	80034ae <HAL_IWDG_Init+0xfe>
  while(hiwdg->Instance->SR != RESET)
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	68db      	ldr	r3, [r3, #12]
 8003486:	2b00      	cmp	r3, #0
 8003488:	d1f1      	bne.n	800346e <HAL_IWDG_Init+0xbe>
    }
  }

  /* If window parameter is different than current value, modify window 
  register */
  if(hiwdg->Instance->WINR != hiwdg->Init.Window)
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	691a      	ldr	r2, [r3, #16]
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	68db      	ldr	r3, [r3, #12]
 8003494:	429a      	cmp	r2, r3
 8003496:	d005      	beq.n	80034a4 <HAL_IWDG_Init+0xf4>
  {
    /* Write to IWDG WINR the IWDG_Window value to compare with. In any case,
    even if window feature is disabled, Watchdog will be reloaded by writing 
    windows register */
    hiwdg->Instance->WINR = hiwdg->Init.Window;
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	687a      	ldr	r2, [r7, #4]
 800349e:	68d2      	ldr	r2, [r2, #12]
 80034a0:	611a      	str	r2, [r3, #16]
 80034a2:	e003      	b.n	80034ac <HAL_IWDG_Init+0xfc>
  }
  else
  {
    /* Reload IWDG counter with value defined in the reload register */
    __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	4a08      	ldr	r2, [pc, #32]	; (80034cc <HAL_IWDG_Init+0x11c>)
 80034aa:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80034ac:	2300      	movs	r3, #0
}
 80034ae:	0018      	movs	r0, r3
 80034b0:	46bd      	mov	sp, r7
 80034b2:	b004      	add	sp, #16
 80034b4:	bd80      	pop	{r7, pc}
 80034b6:	46c0      	nop			; (mov r8, r8)
 80034b8:	40003000 	.word	0x40003000
 80034bc:	08007028 	.word	0x08007028
 80034c0:	00000fff 	.word	0x00000fff
 80034c4:	0000cccc 	.word	0x0000cccc
 80034c8:	00005555 	.word	0x00005555
 80034cc:	0000aaaa 	.word	0x0000aaaa

080034d0 <HAL_IWDG_Refresh>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
 80034d0:	b580      	push	{r7, lr}
 80034d2:	b082      	sub	sp, #8
 80034d4:	af00      	add	r7, sp, #0
 80034d6:	6078      	str	r0, [r7, #4]
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	4a03      	ldr	r2, [pc, #12]	; (80034ec <HAL_IWDG_Refresh+0x1c>)
 80034de:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80034e0:	2300      	movs	r3, #0
}
 80034e2:	0018      	movs	r0, r3
 80034e4:	46bd      	mov	sp, r7
 80034e6:	b002      	add	sp, #8
 80034e8:	bd80      	pop	{r7, pc}
 80034ea:	46c0      	nop			; (mov r8, r8)
 80034ec:	0000aaaa 	.word	0x0000aaaa

080034f0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80034f0:	b580      	push	{r7, lr}
 80034f2:	b086      	sub	sp, #24
 80034f4:	af00      	add	r7, sp, #0
 80034f6:	6078      	str	r0, [r7, #4]
   uint32_t tickstart = 0U;
 80034f8:	2300      	movs	r3, #0
 80034fa:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d106      	bne.n	8003510 <HAL_RCC_OscConfig+0x20>
 8003502:	2389      	movs	r3, #137	; 0x89
 8003504:	005a      	lsls	r2, r3, #1
 8003506:	4bc6      	ldr	r3, [pc, #792]	; (8003820 <HAL_RCC_OscConfig+0x330>)
 8003508:	0011      	movs	r1, r2
 800350a:	0018      	movs	r0, r3
 800350c:	f7fd fa31 	bl	8000972 <assert_failed>
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	2b00      	cmp	r3, #0
 8003516:	d020      	beq.n	800355a <HAL_RCC_OscConfig+0x6a>
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	2201      	movs	r2, #1
 800351e:	4013      	ands	r3, r2
 8003520:	d11b      	bne.n	800355a <HAL_RCC_OscConfig+0x6a>
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	2202      	movs	r2, #2
 8003528:	4013      	ands	r3, r2
 800352a:	d116      	bne.n	800355a <HAL_RCC_OscConfig+0x6a>
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	2208      	movs	r2, #8
 8003532:	4013      	ands	r3, r2
 8003534:	d111      	bne.n	800355a <HAL_RCC_OscConfig+0x6a>
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	2204      	movs	r2, #4
 800353c:	4013      	ands	r3, r2
 800353e:	d10c      	bne.n	800355a <HAL_RCC_OscConfig+0x6a>
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	2210      	movs	r2, #16
 8003546:	4013      	ands	r3, r2
 8003548:	d107      	bne.n	800355a <HAL_RCC_OscConfig+0x6a>
 800354a:	2314      	movs	r3, #20
 800354c:	33ff      	adds	r3, #255	; 0xff
 800354e:	001a      	movs	r2, r3
 8003550:	4bb3      	ldr	r3, [pc, #716]	; (8003820 <HAL_RCC_OscConfig+0x330>)
 8003552:	0011      	movs	r1, r2
 8003554:	0018      	movs	r0, r3
 8003556:	f7fd fa0c 	bl	8000972 <assert_failed>

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	2201      	movs	r2, #1
 8003560:	4013      	ands	r3, r2
 8003562:	d100      	bne.n	8003566 <HAL_RCC_OscConfig+0x76>
 8003564:	e0a4      	b.n	80036b0 <HAL_RCC_OscConfig+0x1c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	685b      	ldr	r3, [r3, #4]
 800356a:	2b00      	cmp	r3, #0
 800356c:	d00f      	beq.n	800358e <HAL_RCC_OscConfig+0x9e>
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	685b      	ldr	r3, [r3, #4]
 8003572:	2b01      	cmp	r3, #1
 8003574:	d00b      	beq.n	800358e <HAL_RCC_OscConfig+0x9e>
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	685b      	ldr	r3, [r3, #4]
 800357a:	2b05      	cmp	r3, #5
 800357c:	d007      	beq.n	800358e <HAL_RCC_OscConfig+0x9e>
 800357e:	231a      	movs	r3, #26
 8003580:	33ff      	adds	r3, #255	; 0xff
 8003582:	001a      	movs	r2, r3
 8003584:	4ba6      	ldr	r3, [pc, #664]	; (8003820 <HAL_RCC_OscConfig+0x330>)
 8003586:	0011      	movs	r1, r2
 8003588:	0018      	movs	r0, r3
 800358a:	f7fd f9f2 	bl	8000972 <assert_failed>

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800358e:	4ba5      	ldr	r3, [pc, #660]	; (8003824 <HAL_RCC_OscConfig+0x334>)
 8003590:	685b      	ldr	r3, [r3, #4]
 8003592:	220c      	movs	r2, #12
 8003594:	4013      	ands	r3, r2
 8003596:	2b04      	cmp	r3, #4
 8003598:	d00e      	beq.n	80035b8 <HAL_RCC_OscConfig+0xc8>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800359a:	4ba2      	ldr	r3, [pc, #648]	; (8003824 <HAL_RCC_OscConfig+0x334>)
 800359c:	685b      	ldr	r3, [r3, #4]
 800359e:	220c      	movs	r2, #12
 80035a0:	4013      	ands	r3, r2
 80035a2:	2b08      	cmp	r3, #8
 80035a4:	d117      	bne.n	80035d6 <HAL_RCC_OscConfig+0xe6>
 80035a6:	4b9f      	ldr	r3, [pc, #636]	; (8003824 <HAL_RCC_OscConfig+0x334>)
 80035a8:	685a      	ldr	r2, [r3, #4]
 80035aa:	2380      	movs	r3, #128	; 0x80
 80035ac:	025b      	lsls	r3, r3, #9
 80035ae:	401a      	ands	r2, r3
 80035b0:	2380      	movs	r3, #128	; 0x80
 80035b2:	025b      	lsls	r3, r3, #9
 80035b4:	429a      	cmp	r2, r3
 80035b6:	d10e      	bne.n	80035d6 <HAL_RCC_OscConfig+0xe6>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80035b8:	4b9a      	ldr	r3, [pc, #616]	; (8003824 <HAL_RCC_OscConfig+0x334>)
 80035ba:	681a      	ldr	r2, [r3, #0]
 80035bc:	2380      	movs	r3, #128	; 0x80
 80035be:	029b      	lsls	r3, r3, #10
 80035c0:	4013      	ands	r3, r2
 80035c2:	d100      	bne.n	80035c6 <HAL_RCC_OscConfig+0xd6>
 80035c4:	e073      	b.n	80036ae <HAL_RCC_OscConfig+0x1be>
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	685b      	ldr	r3, [r3, #4]
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d000      	beq.n	80035d0 <HAL_RCC_OscConfig+0xe0>
 80035ce:	e06e      	b.n	80036ae <HAL_RCC_OscConfig+0x1be>
      {
        return HAL_ERROR;
 80035d0:	2301      	movs	r3, #1
 80035d2:	f000 fbe9 	bl	8003da8 <HAL_RCC_OscConfig+0x8b8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	685b      	ldr	r3, [r3, #4]
 80035da:	2b01      	cmp	r3, #1
 80035dc:	d107      	bne.n	80035ee <HAL_RCC_OscConfig+0xfe>
 80035de:	4b91      	ldr	r3, [pc, #580]	; (8003824 <HAL_RCC_OscConfig+0x334>)
 80035e0:	681a      	ldr	r2, [r3, #0]
 80035e2:	4b90      	ldr	r3, [pc, #576]	; (8003824 <HAL_RCC_OscConfig+0x334>)
 80035e4:	2180      	movs	r1, #128	; 0x80
 80035e6:	0249      	lsls	r1, r1, #9
 80035e8:	430a      	orrs	r2, r1
 80035ea:	601a      	str	r2, [r3, #0]
 80035ec:	e02f      	b.n	800364e <HAL_RCC_OscConfig+0x15e>
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	685b      	ldr	r3, [r3, #4]
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d10c      	bne.n	8003610 <HAL_RCC_OscConfig+0x120>
 80035f6:	4b8b      	ldr	r3, [pc, #556]	; (8003824 <HAL_RCC_OscConfig+0x334>)
 80035f8:	681a      	ldr	r2, [r3, #0]
 80035fa:	4b8a      	ldr	r3, [pc, #552]	; (8003824 <HAL_RCC_OscConfig+0x334>)
 80035fc:	498a      	ldr	r1, [pc, #552]	; (8003828 <HAL_RCC_OscConfig+0x338>)
 80035fe:	400a      	ands	r2, r1
 8003600:	601a      	str	r2, [r3, #0]
 8003602:	4b88      	ldr	r3, [pc, #544]	; (8003824 <HAL_RCC_OscConfig+0x334>)
 8003604:	681a      	ldr	r2, [r3, #0]
 8003606:	4b87      	ldr	r3, [pc, #540]	; (8003824 <HAL_RCC_OscConfig+0x334>)
 8003608:	4988      	ldr	r1, [pc, #544]	; (800382c <HAL_RCC_OscConfig+0x33c>)
 800360a:	400a      	ands	r2, r1
 800360c:	601a      	str	r2, [r3, #0]
 800360e:	e01e      	b.n	800364e <HAL_RCC_OscConfig+0x15e>
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	685b      	ldr	r3, [r3, #4]
 8003614:	2b05      	cmp	r3, #5
 8003616:	d10e      	bne.n	8003636 <HAL_RCC_OscConfig+0x146>
 8003618:	4b82      	ldr	r3, [pc, #520]	; (8003824 <HAL_RCC_OscConfig+0x334>)
 800361a:	681a      	ldr	r2, [r3, #0]
 800361c:	4b81      	ldr	r3, [pc, #516]	; (8003824 <HAL_RCC_OscConfig+0x334>)
 800361e:	2180      	movs	r1, #128	; 0x80
 8003620:	02c9      	lsls	r1, r1, #11
 8003622:	430a      	orrs	r2, r1
 8003624:	601a      	str	r2, [r3, #0]
 8003626:	4b7f      	ldr	r3, [pc, #508]	; (8003824 <HAL_RCC_OscConfig+0x334>)
 8003628:	681a      	ldr	r2, [r3, #0]
 800362a:	4b7e      	ldr	r3, [pc, #504]	; (8003824 <HAL_RCC_OscConfig+0x334>)
 800362c:	2180      	movs	r1, #128	; 0x80
 800362e:	0249      	lsls	r1, r1, #9
 8003630:	430a      	orrs	r2, r1
 8003632:	601a      	str	r2, [r3, #0]
 8003634:	e00b      	b.n	800364e <HAL_RCC_OscConfig+0x15e>
 8003636:	4b7b      	ldr	r3, [pc, #492]	; (8003824 <HAL_RCC_OscConfig+0x334>)
 8003638:	681a      	ldr	r2, [r3, #0]
 800363a:	4b7a      	ldr	r3, [pc, #488]	; (8003824 <HAL_RCC_OscConfig+0x334>)
 800363c:	497a      	ldr	r1, [pc, #488]	; (8003828 <HAL_RCC_OscConfig+0x338>)
 800363e:	400a      	ands	r2, r1
 8003640:	601a      	str	r2, [r3, #0]
 8003642:	4b78      	ldr	r3, [pc, #480]	; (8003824 <HAL_RCC_OscConfig+0x334>)
 8003644:	681a      	ldr	r2, [r3, #0]
 8003646:	4b77      	ldr	r3, [pc, #476]	; (8003824 <HAL_RCC_OscConfig+0x334>)
 8003648:	4978      	ldr	r1, [pc, #480]	; (800382c <HAL_RCC_OscConfig+0x33c>)
 800364a:	400a      	ands	r2, r1
 800364c:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	685b      	ldr	r3, [r3, #4]
 8003652:	2b00      	cmp	r3, #0
 8003654:	d015      	beq.n	8003682 <HAL_RCC_OscConfig+0x192>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003656:	f7fe f86b 	bl	8001730 <HAL_GetTick>
 800365a:	0003      	movs	r3, r0
 800365c:	613b      	str	r3, [r7, #16]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800365e:	e009      	b.n	8003674 <HAL_RCC_OscConfig+0x184>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003660:	f7fe f866 	bl	8001730 <HAL_GetTick>
 8003664:	0002      	movs	r2, r0
 8003666:	693b      	ldr	r3, [r7, #16]
 8003668:	1ad3      	subs	r3, r2, r3
 800366a:	2b64      	cmp	r3, #100	; 0x64
 800366c:	d902      	bls.n	8003674 <HAL_RCC_OscConfig+0x184>
          {
            return HAL_TIMEOUT;
 800366e:	2303      	movs	r3, #3
 8003670:	f000 fb9a 	bl	8003da8 <HAL_RCC_OscConfig+0x8b8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003674:	4b6b      	ldr	r3, [pc, #428]	; (8003824 <HAL_RCC_OscConfig+0x334>)
 8003676:	681a      	ldr	r2, [r3, #0]
 8003678:	2380      	movs	r3, #128	; 0x80
 800367a:	029b      	lsls	r3, r3, #10
 800367c:	4013      	ands	r3, r2
 800367e:	d0ef      	beq.n	8003660 <HAL_RCC_OscConfig+0x170>
 8003680:	e016      	b.n	80036b0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003682:	f7fe f855 	bl	8001730 <HAL_GetTick>
 8003686:	0003      	movs	r3, r0
 8003688:	613b      	str	r3, [r7, #16]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800368a:	e009      	b.n	80036a0 <HAL_RCC_OscConfig+0x1b0>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800368c:	f7fe f850 	bl	8001730 <HAL_GetTick>
 8003690:	0002      	movs	r2, r0
 8003692:	693b      	ldr	r3, [r7, #16]
 8003694:	1ad3      	subs	r3, r2, r3
 8003696:	2b64      	cmp	r3, #100	; 0x64
 8003698:	d902      	bls.n	80036a0 <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 800369a:	2303      	movs	r3, #3
 800369c:	f000 fb84 	bl	8003da8 <HAL_RCC_OscConfig+0x8b8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80036a0:	4b60      	ldr	r3, [pc, #384]	; (8003824 <HAL_RCC_OscConfig+0x334>)
 80036a2:	681a      	ldr	r2, [r3, #0]
 80036a4:	2380      	movs	r3, #128	; 0x80
 80036a6:	029b      	lsls	r3, r3, #10
 80036a8:	4013      	ands	r3, r2
 80036aa:	d1ef      	bne.n	800368c <HAL_RCC_OscConfig+0x19c>
 80036ac:	e000      	b.n	80036b0 <HAL_RCC_OscConfig+0x1c0>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80036ae:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	2202      	movs	r2, #2
 80036b6:	4013      	ands	r3, r2
 80036b8:	d100      	bne.n	80036bc <HAL_RCC_OscConfig+0x1cc>
 80036ba:	e085      	b.n	80037c8 <HAL_RCC_OscConfig+0x2d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	68db      	ldr	r3, [r3, #12]
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d00b      	beq.n	80036dc <HAL_RCC_OscConfig+0x1ec>
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	68db      	ldr	r3, [r3, #12]
 80036c8:	2b01      	cmp	r3, #1
 80036ca:	d007      	beq.n	80036dc <HAL_RCC_OscConfig+0x1ec>
 80036cc:	234e      	movs	r3, #78	; 0x4e
 80036ce:	33ff      	adds	r3, #255	; 0xff
 80036d0:	001a      	movs	r2, r3
 80036d2:	4b53      	ldr	r3, [pc, #332]	; (8003820 <HAL_RCC_OscConfig+0x330>)
 80036d4:	0011      	movs	r1, r2
 80036d6:	0018      	movs	r0, r3
 80036d8:	f7fd f94b 	bl	8000972 <assert_failed>
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	691b      	ldr	r3, [r3, #16]
 80036e0:	2b1f      	cmp	r3, #31
 80036e2:	d906      	bls.n	80036f2 <HAL_RCC_OscConfig+0x202>
 80036e4:	23a7      	movs	r3, #167	; 0xa7
 80036e6:	005a      	lsls	r2, r3, #1
 80036e8:	4b4d      	ldr	r3, [pc, #308]	; (8003820 <HAL_RCC_OscConfig+0x330>)
 80036ea:	0011      	movs	r1, r2
 80036ec:	0018      	movs	r0, r3
 80036ee:	f7fd f940 	bl	8000972 <assert_failed>
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80036f2:	4b4c      	ldr	r3, [pc, #304]	; (8003824 <HAL_RCC_OscConfig+0x334>)
 80036f4:	685b      	ldr	r3, [r3, #4]
 80036f6:	220c      	movs	r2, #12
 80036f8:	4013      	ands	r3, r2
 80036fa:	d00b      	beq.n	8003714 <HAL_RCC_OscConfig+0x224>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80036fc:	4b49      	ldr	r3, [pc, #292]	; (8003824 <HAL_RCC_OscConfig+0x334>)
 80036fe:	685b      	ldr	r3, [r3, #4]
 8003700:	220c      	movs	r2, #12
 8003702:	4013      	ands	r3, r2
 8003704:	2b08      	cmp	r3, #8
 8003706:	d11d      	bne.n	8003744 <HAL_RCC_OscConfig+0x254>
 8003708:	4b46      	ldr	r3, [pc, #280]	; (8003824 <HAL_RCC_OscConfig+0x334>)
 800370a:	685a      	ldr	r2, [r3, #4]
 800370c:	2380      	movs	r3, #128	; 0x80
 800370e:	025b      	lsls	r3, r3, #9
 8003710:	4013      	ands	r3, r2
 8003712:	d117      	bne.n	8003744 <HAL_RCC_OscConfig+0x254>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003714:	4b43      	ldr	r3, [pc, #268]	; (8003824 <HAL_RCC_OscConfig+0x334>)
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	2202      	movs	r2, #2
 800371a:	4013      	ands	r3, r2
 800371c:	d006      	beq.n	800372c <HAL_RCC_OscConfig+0x23c>
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	68db      	ldr	r3, [r3, #12]
 8003722:	2b01      	cmp	r3, #1
 8003724:	d002      	beq.n	800372c <HAL_RCC_OscConfig+0x23c>
      {
        return HAL_ERROR;
 8003726:	2301      	movs	r3, #1
 8003728:	f000 fb3e 	bl	8003da8 <HAL_RCC_OscConfig+0x8b8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800372c:	4b3d      	ldr	r3, [pc, #244]	; (8003824 <HAL_RCC_OscConfig+0x334>)
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	22f8      	movs	r2, #248	; 0xf8
 8003732:	4393      	bics	r3, r2
 8003734:	0019      	movs	r1, r3
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	691b      	ldr	r3, [r3, #16]
 800373a:	00da      	lsls	r2, r3, #3
 800373c:	4b39      	ldr	r3, [pc, #228]	; (8003824 <HAL_RCC_OscConfig+0x334>)
 800373e:	430a      	orrs	r2, r1
 8003740:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003742:	e041      	b.n	80037c8 <HAL_RCC_OscConfig+0x2d8>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	68db      	ldr	r3, [r3, #12]
 8003748:	2b00      	cmp	r3, #0
 800374a:	d024      	beq.n	8003796 <HAL_RCC_OscConfig+0x2a6>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800374c:	4b35      	ldr	r3, [pc, #212]	; (8003824 <HAL_RCC_OscConfig+0x334>)
 800374e:	681a      	ldr	r2, [r3, #0]
 8003750:	4b34      	ldr	r3, [pc, #208]	; (8003824 <HAL_RCC_OscConfig+0x334>)
 8003752:	2101      	movs	r1, #1
 8003754:	430a      	orrs	r2, r1
 8003756:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003758:	f7fd ffea 	bl	8001730 <HAL_GetTick>
 800375c:	0003      	movs	r3, r0
 800375e:	613b      	str	r3, [r7, #16]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003760:	e008      	b.n	8003774 <HAL_RCC_OscConfig+0x284>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003762:	f7fd ffe5 	bl	8001730 <HAL_GetTick>
 8003766:	0002      	movs	r2, r0
 8003768:	693b      	ldr	r3, [r7, #16]
 800376a:	1ad3      	subs	r3, r2, r3
 800376c:	2b02      	cmp	r3, #2
 800376e:	d901      	bls.n	8003774 <HAL_RCC_OscConfig+0x284>
          {
            return HAL_TIMEOUT;
 8003770:	2303      	movs	r3, #3
 8003772:	e319      	b.n	8003da8 <HAL_RCC_OscConfig+0x8b8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003774:	4b2b      	ldr	r3, [pc, #172]	; (8003824 <HAL_RCC_OscConfig+0x334>)
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	2202      	movs	r2, #2
 800377a:	4013      	ands	r3, r2
 800377c:	d0f1      	beq.n	8003762 <HAL_RCC_OscConfig+0x272>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800377e:	4b29      	ldr	r3, [pc, #164]	; (8003824 <HAL_RCC_OscConfig+0x334>)
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	22f8      	movs	r2, #248	; 0xf8
 8003784:	4393      	bics	r3, r2
 8003786:	0019      	movs	r1, r3
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	691b      	ldr	r3, [r3, #16]
 800378c:	00da      	lsls	r2, r3, #3
 800378e:	4b25      	ldr	r3, [pc, #148]	; (8003824 <HAL_RCC_OscConfig+0x334>)
 8003790:	430a      	orrs	r2, r1
 8003792:	601a      	str	r2, [r3, #0]
 8003794:	e018      	b.n	80037c8 <HAL_RCC_OscConfig+0x2d8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003796:	4b23      	ldr	r3, [pc, #140]	; (8003824 <HAL_RCC_OscConfig+0x334>)
 8003798:	681a      	ldr	r2, [r3, #0]
 800379a:	4b22      	ldr	r3, [pc, #136]	; (8003824 <HAL_RCC_OscConfig+0x334>)
 800379c:	2101      	movs	r1, #1
 800379e:	438a      	bics	r2, r1
 80037a0:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037a2:	f7fd ffc5 	bl	8001730 <HAL_GetTick>
 80037a6:	0003      	movs	r3, r0
 80037a8:	613b      	str	r3, [r7, #16]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80037aa:	e008      	b.n	80037be <HAL_RCC_OscConfig+0x2ce>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80037ac:	f7fd ffc0 	bl	8001730 <HAL_GetTick>
 80037b0:	0002      	movs	r2, r0
 80037b2:	693b      	ldr	r3, [r7, #16]
 80037b4:	1ad3      	subs	r3, r2, r3
 80037b6:	2b02      	cmp	r3, #2
 80037b8:	d901      	bls.n	80037be <HAL_RCC_OscConfig+0x2ce>
          {
            return HAL_TIMEOUT;
 80037ba:	2303      	movs	r3, #3
 80037bc:	e2f4      	b.n	8003da8 <HAL_RCC_OscConfig+0x8b8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80037be:	4b19      	ldr	r3, [pc, #100]	; (8003824 <HAL_RCC_OscConfig+0x334>)
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	2202      	movs	r2, #2
 80037c4:	4013      	ands	r3, r2
 80037c6:	d1f1      	bne.n	80037ac <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	2208      	movs	r2, #8
 80037ce:	4013      	ands	r3, r2
 80037d0:	d04d      	beq.n	800386e <HAL_RCC_OscConfig+0x37e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	69db      	ldr	r3, [r3, #28]
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d00a      	beq.n	80037f0 <HAL_RCC_OscConfig+0x300>
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	69db      	ldr	r3, [r3, #28]
 80037de:	2b01      	cmp	r3, #1
 80037e0:	d006      	beq.n	80037f0 <HAL_RCC_OscConfig+0x300>
 80037e2:	23c7      	movs	r3, #199	; 0xc7
 80037e4:	005a      	lsls	r2, r3, #1
 80037e6:	4b0e      	ldr	r3, [pc, #56]	; (8003820 <HAL_RCC_OscConfig+0x330>)
 80037e8:	0011      	movs	r1, r2
 80037ea:	0018      	movs	r0, r3
 80037ec:	f7fd f8c1 	bl	8000972 <assert_failed>
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	69db      	ldr	r3, [r3, #28]
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d021      	beq.n	800383c <HAL_RCC_OscConfig+0x34c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80037f8:	4b0a      	ldr	r3, [pc, #40]	; (8003824 <HAL_RCC_OscConfig+0x334>)
 80037fa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80037fc:	4b09      	ldr	r3, [pc, #36]	; (8003824 <HAL_RCC_OscConfig+0x334>)
 80037fe:	2101      	movs	r1, #1
 8003800:	430a      	orrs	r2, r1
 8003802:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003804:	f7fd ff94 	bl	8001730 <HAL_GetTick>
 8003808:	0003      	movs	r3, r0
 800380a:	613b      	str	r3, [r7, #16]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800380c:	e010      	b.n	8003830 <HAL_RCC_OscConfig+0x340>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800380e:	f7fd ff8f 	bl	8001730 <HAL_GetTick>
 8003812:	0002      	movs	r2, r0
 8003814:	693b      	ldr	r3, [r7, #16]
 8003816:	1ad3      	subs	r3, r2, r3
 8003818:	2b02      	cmp	r3, #2
 800381a:	d909      	bls.n	8003830 <HAL_RCC_OscConfig+0x340>
        {
          return HAL_TIMEOUT;
 800381c:	2303      	movs	r3, #3
 800381e:	e2c3      	b.n	8003da8 <HAL_RCC_OscConfig+0x8b8>
 8003820:	08007064 	.word	0x08007064
 8003824:	40021000 	.word	0x40021000
 8003828:	fffeffff 	.word	0xfffeffff
 800382c:	fffbffff 	.word	0xfffbffff
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003830:	4bb3      	ldr	r3, [pc, #716]	; (8003b00 <HAL_RCC_OscConfig+0x610>)
 8003832:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003834:	2202      	movs	r2, #2
 8003836:	4013      	ands	r3, r2
 8003838:	d0e9      	beq.n	800380e <HAL_RCC_OscConfig+0x31e>
 800383a:	e018      	b.n	800386e <HAL_RCC_OscConfig+0x37e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800383c:	4bb0      	ldr	r3, [pc, #704]	; (8003b00 <HAL_RCC_OscConfig+0x610>)
 800383e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003840:	4baf      	ldr	r3, [pc, #700]	; (8003b00 <HAL_RCC_OscConfig+0x610>)
 8003842:	2101      	movs	r1, #1
 8003844:	438a      	bics	r2, r1
 8003846:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003848:	f7fd ff72 	bl	8001730 <HAL_GetTick>
 800384c:	0003      	movs	r3, r0
 800384e:	613b      	str	r3, [r7, #16]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003850:	e008      	b.n	8003864 <HAL_RCC_OscConfig+0x374>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003852:	f7fd ff6d 	bl	8001730 <HAL_GetTick>
 8003856:	0002      	movs	r2, r0
 8003858:	693b      	ldr	r3, [r7, #16]
 800385a:	1ad3      	subs	r3, r2, r3
 800385c:	2b02      	cmp	r3, #2
 800385e:	d901      	bls.n	8003864 <HAL_RCC_OscConfig+0x374>
        {
          return HAL_TIMEOUT;
 8003860:	2303      	movs	r3, #3
 8003862:	e2a1      	b.n	8003da8 <HAL_RCC_OscConfig+0x8b8>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003864:	4ba6      	ldr	r3, [pc, #664]	; (8003b00 <HAL_RCC_OscConfig+0x610>)
 8003866:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003868:	2202      	movs	r2, #2
 800386a:	4013      	ands	r3, r2
 800386c:	d1f1      	bne.n	8003852 <HAL_RCC_OscConfig+0x362>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	2204      	movs	r2, #4
 8003874:	4013      	ands	r3, r2
 8003876:	d100      	bne.n	800387a <HAL_RCC_OscConfig+0x38a>
 8003878:	e0c0      	b.n	80039fc <HAL_RCC_OscConfig+0x50c>
  {
    FlagStatus       pwrclkchanged = RESET;
 800387a:	2317      	movs	r3, #23
 800387c:	18fb      	adds	r3, r7, r3
 800387e:	2200      	movs	r2, #0
 8003880:	701a      	strb	r2, [r3, #0]
    
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	689b      	ldr	r3, [r3, #8]
 8003886:	2b00      	cmp	r3, #0
 8003888:	d00e      	beq.n	80038a8 <HAL_RCC_OscConfig+0x3b8>
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	689b      	ldr	r3, [r3, #8]
 800388e:	2b01      	cmp	r3, #1
 8003890:	d00a      	beq.n	80038a8 <HAL_RCC_OscConfig+0x3b8>
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	689b      	ldr	r3, [r3, #8]
 8003896:	2b05      	cmp	r3, #5
 8003898:	d006      	beq.n	80038a8 <HAL_RCC_OscConfig+0x3b8>
 800389a:	23dd      	movs	r3, #221	; 0xdd
 800389c:	005a      	lsls	r2, r3, #1
 800389e:	4b99      	ldr	r3, [pc, #612]	; (8003b04 <HAL_RCC_OscConfig+0x614>)
 80038a0:	0011      	movs	r1, r2
 80038a2:	0018      	movs	r0, r3
 80038a4:	f7fd f865 	bl	8000972 <assert_failed>

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80038a8:	4b95      	ldr	r3, [pc, #596]	; (8003b00 <HAL_RCC_OscConfig+0x610>)
 80038aa:	69da      	ldr	r2, [r3, #28]
 80038ac:	2380      	movs	r3, #128	; 0x80
 80038ae:	055b      	lsls	r3, r3, #21
 80038b0:	4013      	ands	r3, r2
 80038b2:	d111      	bne.n	80038d8 <HAL_RCC_OscConfig+0x3e8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80038b4:	4b92      	ldr	r3, [pc, #584]	; (8003b00 <HAL_RCC_OscConfig+0x610>)
 80038b6:	69da      	ldr	r2, [r3, #28]
 80038b8:	4b91      	ldr	r3, [pc, #580]	; (8003b00 <HAL_RCC_OscConfig+0x610>)
 80038ba:	2180      	movs	r1, #128	; 0x80
 80038bc:	0549      	lsls	r1, r1, #21
 80038be:	430a      	orrs	r2, r1
 80038c0:	61da      	str	r2, [r3, #28]
 80038c2:	4b8f      	ldr	r3, [pc, #572]	; (8003b00 <HAL_RCC_OscConfig+0x610>)
 80038c4:	69da      	ldr	r2, [r3, #28]
 80038c6:	2380      	movs	r3, #128	; 0x80
 80038c8:	055b      	lsls	r3, r3, #21
 80038ca:	4013      	ands	r3, r2
 80038cc:	60fb      	str	r3, [r7, #12]
 80038ce:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80038d0:	2317      	movs	r3, #23
 80038d2:	18fb      	adds	r3, r7, r3
 80038d4:	2201      	movs	r2, #1
 80038d6:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80038d8:	4b8b      	ldr	r3, [pc, #556]	; (8003b08 <HAL_RCC_OscConfig+0x618>)
 80038da:	681a      	ldr	r2, [r3, #0]
 80038dc:	2380      	movs	r3, #128	; 0x80
 80038de:	005b      	lsls	r3, r3, #1
 80038e0:	4013      	ands	r3, r2
 80038e2:	d11a      	bne.n	800391a <HAL_RCC_OscConfig+0x42a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80038e4:	4b88      	ldr	r3, [pc, #544]	; (8003b08 <HAL_RCC_OscConfig+0x618>)
 80038e6:	681a      	ldr	r2, [r3, #0]
 80038e8:	4b87      	ldr	r3, [pc, #540]	; (8003b08 <HAL_RCC_OscConfig+0x618>)
 80038ea:	2180      	movs	r1, #128	; 0x80
 80038ec:	0049      	lsls	r1, r1, #1
 80038ee:	430a      	orrs	r2, r1
 80038f0:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80038f2:	f7fd ff1d 	bl	8001730 <HAL_GetTick>
 80038f6:	0003      	movs	r3, r0
 80038f8:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80038fa:	e008      	b.n	800390e <HAL_RCC_OscConfig+0x41e>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80038fc:	f7fd ff18 	bl	8001730 <HAL_GetTick>
 8003900:	0002      	movs	r2, r0
 8003902:	693b      	ldr	r3, [r7, #16]
 8003904:	1ad3      	subs	r3, r2, r3
 8003906:	2b64      	cmp	r3, #100	; 0x64
 8003908:	d901      	bls.n	800390e <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 800390a:	2303      	movs	r3, #3
 800390c:	e24c      	b.n	8003da8 <HAL_RCC_OscConfig+0x8b8>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800390e:	4b7e      	ldr	r3, [pc, #504]	; (8003b08 <HAL_RCC_OscConfig+0x618>)
 8003910:	681a      	ldr	r2, [r3, #0]
 8003912:	2380      	movs	r3, #128	; 0x80
 8003914:	005b      	lsls	r3, r3, #1
 8003916:	4013      	ands	r3, r2
 8003918:	d0f0      	beq.n	80038fc <HAL_RCC_OscConfig+0x40c>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	689b      	ldr	r3, [r3, #8]
 800391e:	2b01      	cmp	r3, #1
 8003920:	d106      	bne.n	8003930 <HAL_RCC_OscConfig+0x440>
 8003922:	4b77      	ldr	r3, [pc, #476]	; (8003b00 <HAL_RCC_OscConfig+0x610>)
 8003924:	6a1a      	ldr	r2, [r3, #32]
 8003926:	4b76      	ldr	r3, [pc, #472]	; (8003b00 <HAL_RCC_OscConfig+0x610>)
 8003928:	2101      	movs	r1, #1
 800392a:	430a      	orrs	r2, r1
 800392c:	621a      	str	r2, [r3, #32]
 800392e:	e02d      	b.n	800398c <HAL_RCC_OscConfig+0x49c>
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	689b      	ldr	r3, [r3, #8]
 8003934:	2b00      	cmp	r3, #0
 8003936:	d10c      	bne.n	8003952 <HAL_RCC_OscConfig+0x462>
 8003938:	4b71      	ldr	r3, [pc, #452]	; (8003b00 <HAL_RCC_OscConfig+0x610>)
 800393a:	6a1a      	ldr	r2, [r3, #32]
 800393c:	4b70      	ldr	r3, [pc, #448]	; (8003b00 <HAL_RCC_OscConfig+0x610>)
 800393e:	2101      	movs	r1, #1
 8003940:	438a      	bics	r2, r1
 8003942:	621a      	str	r2, [r3, #32]
 8003944:	4b6e      	ldr	r3, [pc, #440]	; (8003b00 <HAL_RCC_OscConfig+0x610>)
 8003946:	6a1a      	ldr	r2, [r3, #32]
 8003948:	4b6d      	ldr	r3, [pc, #436]	; (8003b00 <HAL_RCC_OscConfig+0x610>)
 800394a:	2104      	movs	r1, #4
 800394c:	438a      	bics	r2, r1
 800394e:	621a      	str	r2, [r3, #32]
 8003950:	e01c      	b.n	800398c <HAL_RCC_OscConfig+0x49c>
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	689b      	ldr	r3, [r3, #8]
 8003956:	2b05      	cmp	r3, #5
 8003958:	d10c      	bne.n	8003974 <HAL_RCC_OscConfig+0x484>
 800395a:	4b69      	ldr	r3, [pc, #420]	; (8003b00 <HAL_RCC_OscConfig+0x610>)
 800395c:	6a1a      	ldr	r2, [r3, #32]
 800395e:	4b68      	ldr	r3, [pc, #416]	; (8003b00 <HAL_RCC_OscConfig+0x610>)
 8003960:	2104      	movs	r1, #4
 8003962:	430a      	orrs	r2, r1
 8003964:	621a      	str	r2, [r3, #32]
 8003966:	4b66      	ldr	r3, [pc, #408]	; (8003b00 <HAL_RCC_OscConfig+0x610>)
 8003968:	6a1a      	ldr	r2, [r3, #32]
 800396a:	4b65      	ldr	r3, [pc, #404]	; (8003b00 <HAL_RCC_OscConfig+0x610>)
 800396c:	2101      	movs	r1, #1
 800396e:	430a      	orrs	r2, r1
 8003970:	621a      	str	r2, [r3, #32]
 8003972:	e00b      	b.n	800398c <HAL_RCC_OscConfig+0x49c>
 8003974:	4b62      	ldr	r3, [pc, #392]	; (8003b00 <HAL_RCC_OscConfig+0x610>)
 8003976:	6a1a      	ldr	r2, [r3, #32]
 8003978:	4b61      	ldr	r3, [pc, #388]	; (8003b00 <HAL_RCC_OscConfig+0x610>)
 800397a:	2101      	movs	r1, #1
 800397c:	438a      	bics	r2, r1
 800397e:	621a      	str	r2, [r3, #32]
 8003980:	4b5f      	ldr	r3, [pc, #380]	; (8003b00 <HAL_RCC_OscConfig+0x610>)
 8003982:	6a1a      	ldr	r2, [r3, #32]
 8003984:	4b5e      	ldr	r3, [pc, #376]	; (8003b00 <HAL_RCC_OscConfig+0x610>)
 8003986:	2104      	movs	r1, #4
 8003988:	438a      	bics	r2, r1
 800398a:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	689b      	ldr	r3, [r3, #8]
 8003990:	2b00      	cmp	r3, #0
 8003992:	d014      	beq.n	80039be <HAL_RCC_OscConfig+0x4ce>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003994:	f7fd fecc 	bl	8001730 <HAL_GetTick>
 8003998:	0003      	movs	r3, r0
 800399a:	613b      	str	r3, [r7, #16]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800399c:	e009      	b.n	80039b2 <HAL_RCC_OscConfig+0x4c2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800399e:	f7fd fec7 	bl	8001730 <HAL_GetTick>
 80039a2:	0002      	movs	r2, r0
 80039a4:	693b      	ldr	r3, [r7, #16]
 80039a6:	1ad3      	subs	r3, r2, r3
 80039a8:	4a58      	ldr	r2, [pc, #352]	; (8003b0c <HAL_RCC_OscConfig+0x61c>)
 80039aa:	4293      	cmp	r3, r2
 80039ac:	d901      	bls.n	80039b2 <HAL_RCC_OscConfig+0x4c2>
        {
          return HAL_TIMEOUT;
 80039ae:	2303      	movs	r3, #3
 80039b0:	e1fa      	b.n	8003da8 <HAL_RCC_OscConfig+0x8b8>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80039b2:	4b53      	ldr	r3, [pc, #332]	; (8003b00 <HAL_RCC_OscConfig+0x610>)
 80039b4:	6a1b      	ldr	r3, [r3, #32]
 80039b6:	2202      	movs	r2, #2
 80039b8:	4013      	ands	r3, r2
 80039ba:	d0f0      	beq.n	800399e <HAL_RCC_OscConfig+0x4ae>
 80039bc:	e013      	b.n	80039e6 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80039be:	f7fd feb7 	bl	8001730 <HAL_GetTick>
 80039c2:	0003      	movs	r3, r0
 80039c4:	613b      	str	r3, [r7, #16]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80039c6:	e009      	b.n	80039dc <HAL_RCC_OscConfig+0x4ec>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80039c8:	f7fd feb2 	bl	8001730 <HAL_GetTick>
 80039cc:	0002      	movs	r2, r0
 80039ce:	693b      	ldr	r3, [r7, #16]
 80039d0:	1ad3      	subs	r3, r2, r3
 80039d2:	4a4e      	ldr	r2, [pc, #312]	; (8003b0c <HAL_RCC_OscConfig+0x61c>)
 80039d4:	4293      	cmp	r3, r2
 80039d6:	d901      	bls.n	80039dc <HAL_RCC_OscConfig+0x4ec>
        {
          return HAL_TIMEOUT;
 80039d8:	2303      	movs	r3, #3
 80039da:	e1e5      	b.n	8003da8 <HAL_RCC_OscConfig+0x8b8>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80039dc:	4b48      	ldr	r3, [pc, #288]	; (8003b00 <HAL_RCC_OscConfig+0x610>)
 80039de:	6a1b      	ldr	r3, [r3, #32]
 80039e0:	2202      	movs	r2, #2
 80039e2:	4013      	ands	r3, r2
 80039e4:	d1f0      	bne.n	80039c8 <HAL_RCC_OscConfig+0x4d8>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80039e6:	2317      	movs	r3, #23
 80039e8:	18fb      	adds	r3, r7, r3
 80039ea:	781b      	ldrb	r3, [r3, #0]
 80039ec:	2b01      	cmp	r3, #1
 80039ee:	d105      	bne.n	80039fc <HAL_RCC_OscConfig+0x50c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80039f0:	4b43      	ldr	r3, [pc, #268]	; (8003b00 <HAL_RCC_OscConfig+0x610>)
 80039f2:	69da      	ldr	r2, [r3, #28]
 80039f4:	4b42      	ldr	r3, [pc, #264]	; (8003b00 <HAL_RCC_OscConfig+0x610>)
 80039f6:	4946      	ldr	r1, [pc, #280]	; (8003b10 <HAL_RCC_OscConfig+0x620>)
 80039f8:	400a      	ands	r2, r1
 80039fa:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	2210      	movs	r2, #16
 8003a02:	4013      	ands	r3, r2
 8003a04:	d100      	bne.n	8003a08 <HAL_RCC_OscConfig+0x518>
 8003a06:	e08c      	b.n	8003b22 <HAL_RCC_OscConfig+0x632>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	695b      	ldr	r3, [r3, #20]
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d00e      	beq.n	8003a2e <HAL_RCC_OscConfig+0x53e>
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	695b      	ldr	r3, [r3, #20]
 8003a14:	2b01      	cmp	r3, #1
 8003a16:	d00a      	beq.n	8003a2e <HAL_RCC_OscConfig+0x53e>
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	695b      	ldr	r3, [r3, #20]
 8003a1c:	3305      	adds	r3, #5
 8003a1e:	d006      	beq.n	8003a2e <HAL_RCC_OscConfig+0x53e>
 8003a20:	2380      	movs	r3, #128	; 0x80
 8003a22:	009a      	lsls	r2, r3, #2
 8003a24:	4b37      	ldr	r3, [pc, #220]	; (8003b04 <HAL_RCC_OscConfig+0x614>)
 8003a26:	0011      	movs	r1, r2
 8003a28:	0018      	movs	r0, r3
 8003a2a:	f7fc ffa2 	bl	8000972 <assert_failed>
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	699b      	ldr	r3, [r3, #24]
 8003a32:	2b1f      	cmp	r3, #31
 8003a34:	d905      	bls.n	8003a42 <HAL_RCC_OscConfig+0x552>
 8003a36:	4a37      	ldr	r2, [pc, #220]	; (8003b14 <HAL_RCC_OscConfig+0x624>)
 8003a38:	4b32      	ldr	r3, [pc, #200]	; (8003b04 <HAL_RCC_OscConfig+0x614>)
 8003a3a:	0011      	movs	r1, r2
 8003a3c:	0018      	movs	r0, r3
 8003a3e:	f7fc ff98 	bl	8000972 <assert_failed>

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	695b      	ldr	r3, [r3, #20]
 8003a46:	2b01      	cmp	r3, #1
 8003a48:	d12a      	bne.n	8003aa0 <HAL_RCC_OscConfig+0x5b0>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8003a4a:	4b2d      	ldr	r3, [pc, #180]	; (8003b00 <HAL_RCC_OscConfig+0x610>)
 8003a4c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003a4e:	4b2c      	ldr	r3, [pc, #176]	; (8003b00 <HAL_RCC_OscConfig+0x610>)
 8003a50:	2104      	movs	r1, #4
 8003a52:	430a      	orrs	r2, r1
 8003a54:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8003a56:	4b2a      	ldr	r3, [pc, #168]	; (8003b00 <HAL_RCC_OscConfig+0x610>)
 8003a58:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003a5a:	4b29      	ldr	r3, [pc, #164]	; (8003b00 <HAL_RCC_OscConfig+0x610>)
 8003a5c:	2101      	movs	r1, #1
 8003a5e:	430a      	orrs	r2, r1
 8003a60:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003a62:	f7fd fe65 	bl	8001730 <HAL_GetTick>
 8003a66:	0003      	movs	r3, r0
 8003a68:	613b      	str	r3, [r7, #16]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8003a6a:	e008      	b.n	8003a7e <HAL_RCC_OscConfig+0x58e>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8003a6c:	f7fd fe60 	bl	8001730 <HAL_GetTick>
 8003a70:	0002      	movs	r2, r0
 8003a72:	693b      	ldr	r3, [r7, #16]
 8003a74:	1ad3      	subs	r3, r2, r3
 8003a76:	2b02      	cmp	r3, #2
 8003a78:	d901      	bls.n	8003a7e <HAL_RCC_OscConfig+0x58e>
        {
          return HAL_TIMEOUT;
 8003a7a:	2303      	movs	r3, #3
 8003a7c:	e194      	b.n	8003da8 <HAL_RCC_OscConfig+0x8b8>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8003a7e:	4b20      	ldr	r3, [pc, #128]	; (8003b00 <HAL_RCC_OscConfig+0x610>)
 8003a80:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a82:	2202      	movs	r2, #2
 8003a84:	4013      	ands	r3, r2
 8003a86:	d0f1      	beq.n	8003a6c <HAL_RCC_OscConfig+0x57c>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8003a88:	4b1d      	ldr	r3, [pc, #116]	; (8003b00 <HAL_RCC_OscConfig+0x610>)
 8003a8a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a8c:	22f8      	movs	r2, #248	; 0xf8
 8003a8e:	4393      	bics	r3, r2
 8003a90:	0019      	movs	r1, r3
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	699b      	ldr	r3, [r3, #24]
 8003a96:	00da      	lsls	r2, r3, #3
 8003a98:	4b19      	ldr	r3, [pc, #100]	; (8003b00 <HAL_RCC_OscConfig+0x610>)
 8003a9a:	430a      	orrs	r2, r1
 8003a9c:	635a      	str	r2, [r3, #52]	; 0x34
 8003a9e:	e040      	b.n	8003b22 <HAL_RCC_OscConfig+0x632>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	695b      	ldr	r3, [r3, #20]
 8003aa4:	3305      	adds	r3, #5
 8003aa6:	d111      	bne.n	8003acc <HAL_RCC_OscConfig+0x5dc>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8003aa8:	4b15      	ldr	r3, [pc, #84]	; (8003b00 <HAL_RCC_OscConfig+0x610>)
 8003aaa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003aac:	4b14      	ldr	r3, [pc, #80]	; (8003b00 <HAL_RCC_OscConfig+0x610>)
 8003aae:	2104      	movs	r1, #4
 8003ab0:	438a      	bics	r2, r1
 8003ab2:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8003ab4:	4b12      	ldr	r3, [pc, #72]	; (8003b00 <HAL_RCC_OscConfig+0x610>)
 8003ab6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ab8:	22f8      	movs	r2, #248	; 0xf8
 8003aba:	4393      	bics	r3, r2
 8003abc:	0019      	movs	r1, r3
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	699b      	ldr	r3, [r3, #24]
 8003ac2:	00da      	lsls	r2, r3, #3
 8003ac4:	4b0e      	ldr	r3, [pc, #56]	; (8003b00 <HAL_RCC_OscConfig+0x610>)
 8003ac6:	430a      	orrs	r2, r1
 8003ac8:	635a      	str	r2, [r3, #52]	; 0x34
 8003aca:	e02a      	b.n	8003b22 <HAL_RCC_OscConfig+0x632>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8003acc:	4b0c      	ldr	r3, [pc, #48]	; (8003b00 <HAL_RCC_OscConfig+0x610>)
 8003ace:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003ad0:	4b0b      	ldr	r3, [pc, #44]	; (8003b00 <HAL_RCC_OscConfig+0x610>)
 8003ad2:	2104      	movs	r1, #4
 8003ad4:	430a      	orrs	r2, r1
 8003ad6:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8003ad8:	4b09      	ldr	r3, [pc, #36]	; (8003b00 <HAL_RCC_OscConfig+0x610>)
 8003ada:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003adc:	4b08      	ldr	r3, [pc, #32]	; (8003b00 <HAL_RCC_OscConfig+0x610>)
 8003ade:	2101      	movs	r1, #1
 8003ae0:	438a      	bics	r2, r1
 8003ae2:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003ae4:	f7fd fe24 	bl	8001730 <HAL_GetTick>
 8003ae8:	0003      	movs	r3, r0
 8003aea:	613b      	str	r3, [r7, #16]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8003aec:	e014      	b.n	8003b18 <HAL_RCC_OscConfig+0x628>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8003aee:	f7fd fe1f 	bl	8001730 <HAL_GetTick>
 8003af2:	0002      	movs	r2, r0
 8003af4:	693b      	ldr	r3, [r7, #16]
 8003af6:	1ad3      	subs	r3, r2, r3
 8003af8:	2b02      	cmp	r3, #2
 8003afa:	d90d      	bls.n	8003b18 <HAL_RCC_OscConfig+0x628>
        {
          return HAL_TIMEOUT;
 8003afc:	2303      	movs	r3, #3
 8003afe:	e153      	b.n	8003da8 <HAL_RCC_OscConfig+0x8b8>
 8003b00:	40021000 	.word	0x40021000
 8003b04:	08007064 	.word	0x08007064
 8003b08:	40007000 	.word	0x40007000
 8003b0c:	00001388 	.word	0x00001388
 8003b10:	efffffff 	.word	0xefffffff
 8003b14:	00000201 	.word	0x00000201
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8003b18:	4ba5      	ldr	r3, [pc, #660]	; (8003db0 <HAL_RCC_OscConfig+0x8c0>)
 8003b1a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b1c:	2202      	movs	r2, #2
 8003b1e:	4013      	ands	r3, r2
 8003b20:	d1e5      	bne.n	8003aee <HAL_RCC_OscConfig+0x5fe>
  }
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	6a1b      	ldr	r3, [r3, #32]
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d00e      	beq.n	8003b48 <HAL_RCC_OscConfig+0x658>
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	6a1b      	ldr	r3, [r3, #32]
 8003b2e:	2b01      	cmp	r3, #1
 8003b30:	d00a      	beq.n	8003b48 <HAL_RCC_OscConfig+0x658>
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	6a1b      	ldr	r3, [r3, #32]
 8003b36:	2b02      	cmp	r3, #2
 8003b38:	d006      	beq.n	8003b48 <HAL_RCC_OscConfig+0x658>
 8003b3a:	239d      	movs	r3, #157	; 0x9d
 8003b3c:	009a      	lsls	r2, r3, #2
 8003b3e:	4b9d      	ldr	r3, [pc, #628]	; (8003db4 <HAL_RCC_OscConfig+0x8c4>)
 8003b40:	0011      	movs	r1, r2
 8003b42:	0018      	movs	r0, r3
 8003b44:	f7fc ff15 	bl	8000972 <assert_failed>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	6a1b      	ldr	r3, [r3, #32]
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d100      	bne.n	8003b52 <HAL_RCC_OscConfig+0x662>
 8003b50:	e129      	b.n	8003da6 <HAL_RCC_OscConfig+0x8b6>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003b52:	4b97      	ldr	r3, [pc, #604]	; (8003db0 <HAL_RCC_OscConfig+0x8c0>)
 8003b54:	685b      	ldr	r3, [r3, #4]
 8003b56:	220c      	movs	r2, #12
 8003b58:	4013      	ands	r3, r2
 8003b5a:	2b08      	cmp	r3, #8
 8003b5c:	d100      	bne.n	8003b60 <HAL_RCC_OscConfig+0x670>
 8003b5e:	e120      	b.n	8003da2 <HAL_RCC_OscConfig+0x8b2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	6a1b      	ldr	r3, [r3, #32]
 8003b64:	2b02      	cmp	r3, #2
 8003b66:	d000      	beq.n	8003b6a <HAL_RCC_OscConfig+0x67a>
 8003b68:	e100      	b.n	8003d6c <HAL_RCC_OscConfig+0x87c>
      {
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d00b      	beq.n	8003b8a <HAL_RCC_OscConfig+0x69a>
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003b76:	2380      	movs	r3, #128	; 0x80
 8003b78:	025b      	lsls	r3, r3, #9
 8003b7a:	429a      	cmp	r2, r3
 8003b7c:	d005      	beq.n	8003b8a <HAL_RCC_OscConfig+0x69a>
 8003b7e:	4a8e      	ldr	r2, [pc, #568]	; (8003db8 <HAL_RCC_OscConfig+0x8c8>)
 8003b80:	4b8c      	ldr	r3, [pc, #560]	; (8003db4 <HAL_RCC_OscConfig+0x8c4>)
 8003b82:	0011      	movs	r1, r2
 8003b84:	0018      	movs	r0, r3
 8003b86:	f7fc fef4 	bl	8000972 <assert_failed>
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d059      	beq.n	8003c46 <HAL_RCC_OscConfig+0x756>
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003b96:	2380      	movs	r3, #128	; 0x80
 8003b98:	02db      	lsls	r3, r3, #11
 8003b9a:	429a      	cmp	r2, r3
 8003b9c:	d053      	beq.n	8003c46 <HAL_RCC_OscConfig+0x756>
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003ba2:	2380      	movs	r3, #128	; 0x80
 8003ba4:	031b      	lsls	r3, r3, #12
 8003ba6:	429a      	cmp	r2, r3
 8003ba8:	d04d      	beq.n	8003c46 <HAL_RCC_OscConfig+0x756>
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003bae:	23c0      	movs	r3, #192	; 0xc0
 8003bb0:	031b      	lsls	r3, r3, #12
 8003bb2:	429a      	cmp	r2, r3
 8003bb4:	d047      	beq.n	8003c46 <HAL_RCC_OscConfig+0x756>
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003bba:	2380      	movs	r3, #128	; 0x80
 8003bbc:	035b      	lsls	r3, r3, #13
 8003bbe:	429a      	cmp	r2, r3
 8003bc0:	d041      	beq.n	8003c46 <HAL_RCC_OscConfig+0x756>
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003bc6:	23a0      	movs	r3, #160	; 0xa0
 8003bc8:	035b      	lsls	r3, r3, #13
 8003bca:	429a      	cmp	r2, r3
 8003bcc:	d03b      	beq.n	8003c46 <HAL_RCC_OscConfig+0x756>
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003bd2:	23c0      	movs	r3, #192	; 0xc0
 8003bd4:	035b      	lsls	r3, r3, #13
 8003bd6:	429a      	cmp	r2, r3
 8003bd8:	d035      	beq.n	8003c46 <HAL_RCC_OscConfig+0x756>
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003bde:	23e0      	movs	r3, #224	; 0xe0
 8003be0:	035b      	lsls	r3, r3, #13
 8003be2:	429a      	cmp	r2, r3
 8003be4:	d02f      	beq.n	8003c46 <HAL_RCC_OscConfig+0x756>
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003bea:	2380      	movs	r3, #128	; 0x80
 8003bec:	039b      	lsls	r3, r3, #14
 8003bee:	429a      	cmp	r2, r3
 8003bf0:	d029      	beq.n	8003c46 <HAL_RCC_OscConfig+0x756>
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003bf6:	2390      	movs	r3, #144	; 0x90
 8003bf8:	039b      	lsls	r3, r3, #14
 8003bfa:	429a      	cmp	r2, r3
 8003bfc:	d023      	beq.n	8003c46 <HAL_RCC_OscConfig+0x756>
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003c02:	23a0      	movs	r3, #160	; 0xa0
 8003c04:	039b      	lsls	r3, r3, #14
 8003c06:	429a      	cmp	r2, r3
 8003c08:	d01d      	beq.n	8003c46 <HAL_RCC_OscConfig+0x756>
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003c0e:	23b0      	movs	r3, #176	; 0xb0
 8003c10:	039b      	lsls	r3, r3, #14
 8003c12:	429a      	cmp	r2, r3
 8003c14:	d017      	beq.n	8003c46 <HAL_RCC_OscConfig+0x756>
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003c1a:	23c0      	movs	r3, #192	; 0xc0
 8003c1c:	039b      	lsls	r3, r3, #14
 8003c1e:	429a      	cmp	r2, r3
 8003c20:	d011      	beq.n	8003c46 <HAL_RCC_OscConfig+0x756>
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003c26:	23d0      	movs	r3, #208	; 0xd0
 8003c28:	039b      	lsls	r3, r3, #14
 8003c2a:	429a      	cmp	r2, r3
 8003c2c:	d00b      	beq.n	8003c46 <HAL_RCC_OscConfig+0x756>
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003c32:	23e0      	movs	r3, #224	; 0xe0
 8003c34:	039b      	lsls	r3, r3, #14
 8003c36:	429a      	cmp	r2, r3
 8003c38:	d005      	beq.n	8003c46 <HAL_RCC_OscConfig+0x756>
 8003c3a:	4a60      	ldr	r2, [pc, #384]	; (8003dbc <HAL_RCC_OscConfig+0x8cc>)
 8003c3c:	4b5d      	ldr	r3, [pc, #372]	; (8003db4 <HAL_RCC_OscConfig+0x8c4>)
 8003c3e:	0011      	movs	r1, r2
 8003c40:	0018      	movs	r0, r3
 8003c42:	f7fc fe96 	bl	8000972 <assert_failed>
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d041      	beq.n	8003cd2 <HAL_RCC_OscConfig+0x7e2>
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c52:	2b01      	cmp	r3, #1
 8003c54:	d03d      	beq.n	8003cd2 <HAL_RCC_OscConfig+0x7e2>
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c5a:	2b02      	cmp	r3, #2
 8003c5c:	d039      	beq.n	8003cd2 <HAL_RCC_OscConfig+0x7e2>
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c62:	2b03      	cmp	r3, #3
 8003c64:	d035      	beq.n	8003cd2 <HAL_RCC_OscConfig+0x7e2>
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c6a:	2b04      	cmp	r3, #4
 8003c6c:	d031      	beq.n	8003cd2 <HAL_RCC_OscConfig+0x7e2>
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c72:	2b05      	cmp	r3, #5
 8003c74:	d02d      	beq.n	8003cd2 <HAL_RCC_OscConfig+0x7e2>
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c7a:	2b06      	cmp	r3, #6
 8003c7c:	d029      	beq.n	8003cd2 <HAL_RCC_OscConfig+0x7e2>
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c82:	2b07      	cmp	r3, #7
 8003c84:	d025      	beq.n	8003cd2 <HAL_RCC_OscConfig+0x7e2>
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c8a:	2b08      	cmp	r3, #8
 8003c8c:	d021      	beq.n	8003cd2 <HAL_RCC_OscConfig+0x7e2>
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c92:	2b09      	cmp	r3, #9
 8003c94:	d01d      	beq.n	8003cd2 <HAL_RCC_OscConfig+0x7e2>
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c9a:	2b0a      	cmp	r3, #10
 8003c9c:	d019      	beq.n	8003cd2 <HAL_RCC_OscConfig+0x7e2>
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ca2:	2b0b      	cmp	r3, #11
 8003ca4:	d015      	beq.n	8003cd2 <HAL_RCC_OscConfig+0x7e2>
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003caa:	2b0c      	cmp	r3, #12
 8003cac:	d011      	beq.n	8003cd2 <HAL_RCC_OscConfig+0x7e2>
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cb2:	2b0d      	cmp	r3, #13
 8003cb4:	d00d      	beq.n	8003cd2 <HAL_RCC_OscConfig+0x7e2>
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cba:	2b0e      	cmp	r3, #14
 8003cbc:	d009      	beq.n	8003cd2 <HAL_RCC_OscConfig+0x7e2>
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cc2:	2b0f      	cmp	r3, #15
 8003cc4:	d005      	beq.n	8003cd2 <HAL_RCC_OscConfig+0x7e2>
 8003cc6:	4a3e      	ldr	r2, [pc, #248]	; (8003dc0 <HAL_RCC_OscConfig+0x8d0>)
 8003cc8:	4b3a      	ldr	r3, [pc, #232]	; (8003db4 <HAL_RCC_OscConfig+0x8c4>)
 8003cca:	0011      	movs	r1, r2
 8003ccc:	0018      	movs	r0, r3
 8003cce:	f7fc fe50 	bl	8000972 <assert_failed>
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003cd2:	4b37      	ldr	r3, [pc, #220]	; (8003db0 <HAL_RCC_OscConfig+0x8c0>)
 8003cd4:	681a      	ldr	r2, [r3, #0]
 8003cd6:	4b36      	ldr	r3, [pc, #216]	; (8003db0 <HAL_RCC_OscConfig+0x8c0>)
 8003cd8:	493a      	ldr	r1, [pc, #232]	; (8003dc4 <HAL_RCC_OscConfig+0x8d4>)
 8003cda:	400a      	ands	r2, r1
 8003cdc:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003cde:	f7fd fd27 	bl	8001730 <HAL_GetTick>
 8003ce2:	0003      	movs	r3, r0
 8003ce4:	613b      	str	r3, [r7, #16]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003ce6:	e008      	b.n	8003cfa <HAL_RCC_OscConfig+0x80a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003ce8:	f7fd fd22 	bl	8001730 <HAL_GetTick>
 8003cec:	0002      	movs	r2, r0
 8003cee:	693b      	ldr	r3, [r7, #16]
 8003cf0:	1ad3      	subs	r3, r2, r3
 8003cf2:	2b02      	cmp	r3, #2
 8003cf4:	d901      	bls.n	8003cfa <HAL_RCC_OscConfig+0x80a>
          {
            return HAL_TIMEOUT;
 8003cf6:	2303      	movs	r3, #3
 8003cf8:	e056      	b.n	8003da8 <HAL_RCC_OscConfig+0x8b8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003cfa:	4b2d      	ldr	r3, [pc, #180]	; (8003db0 <HAL_RCC_OscConfig+0x8c0>)
 8003cfc:	681a      	ldr	r2, [r3, #0]
 8003cfe:	2380      	movs	r3, #128	; 0x80
 8003d00:	049b      	lsls	r3, r3, #18
 8003d02:	4013      	ands	r3, r2
 8003d04:	d1f0      	bne.n	8003ce8 <HAL_RCC_OscConfig+0x7f8>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003d06:	4b2a      	ldr	r3, [pc, #168]	; (8003db0 <HAL_RCC_OscConfig+0x8c0>)
 8003d08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d0a:	220f      	movs	r2, #15
 8003d0c:	4393      	bics	r3, r2
 8003d0e:	0019      	movs	r1, r3
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d14:	4b26      	ldr	r3, [pc, #152]	; (8003db0 <HAL_RCC_OscConfig+0x8c0>)
 8003d16:	430a      	orrs	r2, r1
 8003d18:	62da      	str	r2, [r3, #44]	; 0x2c
 8003d1a:	4b25      	ldr	r3, [pc, #148]	; (8003db0 <HAL_RCC_OscConfig+0x8c0>)
 8003d1c:	685b      	ldr	r3, [r3, #4]
 8003d1e:	4a2a      	ldr	r2, [pc, #168]	; (8003dc8 <HAL_RCC_OscConfig+0x8d8>)
 8003d20:	4013      	ands	r3, r2
 8003d22:	0019      	movs	r1, r3
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d2c:	431a      	orrs	r2, r3
 8003d2e:	4b20      	ldr	r3, [pc, #128]	; (8003db0 <HAL_RCC_OscConfig+0x8c0>)
 8003d30:	430a      	orrs	r2, r1
 8003d32:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003d34:	4b1e      	ldr	r3, [pc, #120]	; (8003db0 <HAL_RCC_OscConfig+0x8c0>)
 8003d36:	681a      	ldr	r2, [r3, #0]
 8003d38:	4b1d      	ldr	r3, [pc, #116]	; (8003db0 <HAL_RCC_OscConfig+0x8c0>)
 8003d3a:	2180      	movs	r1, #128	; 0x80
 8003d3c:	0449      	lsls	r1, r1, #17
 8003d3e:	430a      	orrs	r2, r1
 8003d40:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d42:	f7fd fcf5 	bl	8001730 <HAL_GetTick>
 8003d46:	0003      	movs	r3, r0
 8003d48:	613b      	str	r3, [r7, #16]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003d4a:	e008      	b.n	8003d5e <HAL_RCC_OscConfig+0x86e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003d4c:	f7fd fcf0 	bl	8001730 <HAL_GetTick>
 8003d50:	0002      	movs	r2, r0
 8003d52:	693b      	ldr	r3, [r7, #16]
 8003d54:	1ad3      	subs	r3, r2, r3
 8003d56:	2b02      	cmp	r3, #2
 8003d58:	d901      	bls.n	8003d5e <HAL_RCC_OscConfig+0x86e>
          {
            return HAL_TIMEOUT;
 8003d5a:	2303      	movs	r3, #3
 8003d5c:	e024      	b.n	8003da8 <HAL_RCC_OscConfig+0x8b8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003d5e:	4b14      	ldr	r3, [pc, #80]	; (8003db0 <HAL_RCC_OscConfig+0x8c0>)
 8003d60:	681a      	ldr	r2, [r3, #0]
 8003d62:	2380      	movs	r3, #128	; 0x80
 8003d64:	049b      	lsls	r3, r3, #18
 8003d66:	4013      	ands	r3, r2
 8003d68:	d0f0      	beq.n	8003d4c <HAL_RCC_OscConfig+0x85c>
 8003d6a:	e01c      	b.n	8003da6 <HAL_RCC_OscConfig+0x8b6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003d6c:	4b10      	ldr	r3, [pc, #64]	; (8003db0 <HAL_RCC_OscConfig+0x8c0>)
 8003d6e:	681a      	ldr	r2, [r3, #0]
 8003d70:	4b0f      	ldr	r3, [pc, #60]	; (8003db0 <HAL_RCC_OscConfig+0x8c0>)
 8003d72:	4914      	ldr	r1, [pc, #80]	; (8003dc4 <HAL_RCC_OscConfig+0x8d4>)
 8003d74:	400a      	ands	r2, r1
 8003d76:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d78:	f7fd fcda 	bl	8001730 <HAL_GetTick>
 8003d7c:	0003      	movs	r3, r0
 8003d7e:	613b      	str	r3, [r7, #16]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003d80:	e008      	b.n	8003d94 <HAL_RCC_OscConfig+0x8a4>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003d82:	f7fd fcd5 	bl	8001730 <HAL_GetTick>
 8003d86:	0002      	movs	r2, r0
 8003d88:	693b      	ldr	r3, [r7, #16]
 8003d8a:	1ad3      	subs	r3, r2, r3
 8003d8c:	2b02      	cmp	r3, #2
 8003d8e:	d901      	bls.n	8003d94 <HAL_RCC_OscConfig+0x8a4>
          {
            return HAL_TIMEOUT;
 8003d90:	2303      	movs	r3, #3
 8003d92:	e009      	b.n	8003da8 <HAL_RCC_OscConfig+0x8b8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003d94:	4b06      	ldr	r3, [pc, #24]	; (8003db0 <HAL_RCC_OscConfig+0x8c0>)
 8003d96:	681a      	ldr	r2, [r3, #0]
 8003d98:	2380      	movs	r3, #128	; 0x80
 8003d9a:	049b      	lsls	r3, r3, #18
 8003d9c:	4013      	ands	r3, r2
 8003d9e:	d1f0      	bne.n	8003d82 <HAL_RCC_OscConfig+0x892>
 8003da0:	e001      	b.n	8003da6 <HAL_RCC_OscConfig+0x8b6>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8003da2:	2301      	movs	r3, #1
 8003da4:	e000      	b.n	8003da8 <HAL_RCC_OscConfig+0x8b8>
    }
  }
  
  return HAL_OK;
 8003da6:	2300      	movs	r3, #0
}
 8003da8:	0018      	movs	r0, r3
 8003daa:	46bd      	mov	sp, r7
 8003dac:	b006      	add	sp, #24
 8003dae:	bd80      	pop	{r7, pc}
 8003db0:	40021000 	.word	0x40021000
 8003db4:	08007064 	.word	0x08007064
 8003db8:	0000027d 	.word	0x0000027d
 8003dbc:	0000027e 	.word	0x0000027e
 8003dc0:	0000027f 	.word	0x0000027f
 8003dc4:	feffffff 	.word	0xfeffffff
 8003dc8:	ffc2ffff 	.word	0xffc2ffff

08003dcc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003dcc:	b580      	push	{r7, lr}
 8003dce:	b084      	sub	sp, #16
 8003dd0:	af00      	add	r7, sp, #0
 8003dd2:	6078      	str	r0, [r7, #4]
 8003dd4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8003dd6:	2300      	movs	r3, #0
 8003dd8:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d105      	bne.n	8003dec <HAL_RCC_ClockConfig+0x20>
 8003de0:	4aac      	ldr	r2, [pc, #688]	; (8004094 <HAL_RCC_ClockConfig+0x2c8>)
 8003de2:	4bad      	ldr	r3, [pc, #692]	; (8004098 <HAL_RCC_ClockConfig+0x2cc>)
 8003de4:	0011      	movs	r1, r2
 8003de6:	0018      	movs	r0, r3
 8003de8:	f7fc fdc3 	bl	8000972 <assert_failed>
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	2201      	movs	r2, #1
 8003df2:	4013      	ands	r3, r2
 8003df4:	d10f      	bne.n	8003e16 <HAL_RCC_ClockConfig+0x4a>
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	2202      	movs	r2, #2
 8003dfc:	4013      	ands	r3, r2
 8003dfe:	d10a      	bne.n	8003e16 <HAL_RCC_ClockConfig+0x4a>
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	2204      	movs	r2, #4
 8003e06:	4013      	ands	r3, r2
 8003e08:	d105      	bne.n	8003e16 <HAL_RCC_ClockConfig+0x4a>
 8003e0a:	4aa4      	ldr	r2, [pc, #656]	; (800409c <HAL_RCC_ClockConfig+0x2d0>)
 8003e0c:	4ba2      	ldr	r3, [pc, #648]	; (8004098 <HAL_RCC_ClockConfig+0x2cc>)
 8003e0e:	0011      	movs	r1, r2
 8003e10:	0018      	movs	r0, r3
 8003e12:	f7fc fdae 	bl	8000972 <assert_failed>
  assert_param(IS_FLASH_LATENCY(FLatency));
 8003e16:	683b      	ldr	r3, [r7, #0]
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d009      	beq.n	8003e30 <HAL_RCC_ClockConfig+0x64>
 8003e1c:	683b      	ldr	r3, [r7, #0]
 8003e1e:	2b01      	cmp	r3, #1
 8003e20:	d006      	beq.n	8003e30 <HAL_RCC_ClockConfig+0x64>
 8003e22:	23b7      	movs	r3, #183	; 0xb7
 8003e24:	009a      	lsls	r2, r3, #2
 8003e26:	4b9c      	ldr	r3, [pc, #624]	; (8004098 <HAL_RCC_ClockConfig+0x2cc>)
 8003e28:	0011      	movs	r1, r2
 8003e2a:	0018      	movs	r0, r3
 8003e2c:	f7fc fda1 	bl	8000972 <assert_failed>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8003e30:	4b9b      	ldr	r3, [pc, #620]	; (80040a0 <HAL_RCC_ClockConfig+0x2d4>)
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	2201      	movs	r2, #1
 8003e36:	4013      	ands	r3, r2
 8003e38:	683a      	ldr	r2, [r7, #0]
 8003e3a:	429a      	cmp	r2, r3
 8003e3c:	d911      	bls.n	8003e62 <HAL_RCC_ClockConfig+0x96>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003e3e:	4b98      	ldr	r3, [pc, #608]	; (80040a0 <HAL_RCC_ClockConfig+0x2d4>)
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	2201      	movs	r2, #1
 8003e44:	4393      	bics	r3, r2
 8003e46:	0019      	movs	r1, r3
 8003e48:	4b95      	ldr	r3, [pc, #596]	; (80040a0 <HAL_RCC_ClockConfig+0x2d4>)
 8003e4a:	683a      	ldr	r2, [r7, #0]
 8003e4c:	430a      	orrs	r2, r1
 8003e4e:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8003e50:	4b93      	ldr	r3, [pc, #588]	; (80040a0 <HAL_RCC_ClockConfig+0x2d4>)
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	2201      	movs	r2, #1
 8003e56:	4013      	ands	r3, r2
 8003e58:	683a      	ldr	r2, [r7, #0]
 8003e5a:	429a      	cmp	r2, r3
 8003e5c:	d001      	beq.n	8003e62 <HAL_RCC_ClockConfig+0x96>
    {
      return HAL_ERROR;
 8003e5e:	2301      	movs	r3, #1
 8003e60:	e114      	b.n	800408c <HAL_RCC_ClockConfig+0x2c0>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	2202      	movs	r2, #2
 8003e68:	4013      	ands	r3, r2
 8003e6a:	d033      	beq.n	8003ed4 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	689b      	ldr	r3, [r3, #8]
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d025      	beq.n	8003ec0 <HAL_RCC_ClockConfig+0xf4>
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	689b      	ldr	r3, [r3, #8]
 8003e78:	2b80      	cmp	r3, #128	; 0x80
 8003e7a:	d021      	beq.n	8003ec0 <HAL_RCC_ClockConfig+0xf4>
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	689b      	ldr	r3, [r3, #8]
 8003e80:	2b90      	cmp	r3, #144	; 0x90
 8003e82:	d01d      	beq.n	8003ec0 <HAL_RCC_ClockConfig+0xf4>
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	689b      	ldr	r3, [r3, #8]
 8003e88:	2ba0      	cmp	r3, #160	; 0xa0
 8003e8a:	d019      	beq.n	8003ec0 <HAL_RCC_ClockConfig+0xf4>
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	689b      	ldr	r3, [r3, #8]
 8003e90:	2bb0      	cmp	r3, #176	; 0xb0
 8003e92:	d015      	beq.n	8003ec0 <HAL_RCC_ClockConfig+0xf4>
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	689b      	ldr	r3, [r3, #8]
 8003e98:	2bc0      	cmp	r3, #192	; 0xc0
 8003e9a:	d011      	beq.n	8003ec0 <HAL_RCC_ClockConfig+0xf4>
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	689b      	ldr	r3, [r3, #8]
 8003ea0:	2bd0      	cmp	r3, #208	; 0xd0
 8003ea2:	d00d      	beq.n	8003ec0 <HAL_RCC_ClockConfig+0xf4>
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	689b      	ldr	r3, [r3, #8]
 8003ea8:	2be0      	cmp	r3, #224	; 0xe0
 8003eaa:	d009      	beq.n	8003ec0 <HAL_RCC_ClockConfig+0xf4>
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	689b      	ldr	r3, [r3, #8]
 8003eb0:	2bf0      	cmp	r3, #240	; 0xf0
 8003eb2:	d005      	beq.n	8003ec0 <HAL_RCC_ClockConfig+0xf4>
 8003eb4:	4a7b      	ldr	r2, [pc, #492]	; (80040a4 <HAL_RCC_ClockConfig+0x2d8>)
 8003eb6:	4b78      	ldr	r3, [pc, #480]	; (8004098 <HAL_RCC_ClockConfig+0x2cc>)
 8003eb8:	0011      	movs	r1, r2
 8003eba:	0018      	movs	r0, r3
 8003ebc:	f7fc fd59 	bl	8000972 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003ec0:	4b79      	ldr	r3, [pc, #484]	; (80040a8 <HAL_RCC_ClockConfig+0x2dc>)
 8003ec2:	685b      	ldr	r3, [r3, #4]
 8003ec4:	22f0      	movs	r2, #240	; 0xf0
 8003ec6:	4393      	bics	r3, r2
 8003ec8:	0019      	movs	r1, r3
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	689a      	ldr	r2, [r3, #8]
 8003ece:	4b76      	ldr	r3, [pc, #472]	; (80040a8 <HAL_RCC_ClockConfig+0x2dc>)
 8003ed0:	430a      	orrs	r2, r1
 8003ed2:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	2201      	movs	r2, #1
 8003eda:	4013      	ands	r3, r2
 8003edc:	d100      	bne.n	8003ee0 <HAL_RCC_ClockConfig+0x114>
 8003ede:	e079      	b.n	8003fd4 <HAL_RCC_ClockConfig+0x208>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	685b      	ldr	r3, [r3, #4]
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d00d      	beq.n	8003f04 <HAL_RCC_ClockConfig+0x138>
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	685b      	ldr	r3, [r3, #4]
 8003eec:	2b01      	cmp	r3, #1
 8003eee:	d009      	beq.n	8003f04 <HAL_RCC_ClockConfig+0x138>
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	685b      	ldr	r3, [r3, #4]
 8003ef4:	2b02      	cmp	r3, #2
 8003ef6:	d005      	beq.n	8003f04 <HAL_RCC_ClockConfig+0x138>
 8003ef8:	4a6c      	ldr	r2, [pc, #432]	; (80040ac <HAL_RCC_ClockConfig+0x2e0>)
 8003efa:	4b67      	ldr	r3, [pc, #412]	; (8004098 <HAL_RCC_ClockConfig+0x2cc>)
 8003efc:	0011      	movs	r1, r2
 8003efe:	0018      	movs	r0, r3
 8003f00:	f7fc fd37 	bl	8000972 <assert_failed>
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	685b      	ldr	r3, [r3, #4]
 8003f08:	2b01      	cmp	r3, #1
 8003f0a:	d107      	bne.n	8003f1c <HAL_RCC_ClockConfig+0x150>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003f0c:	4b66      	ldr	r3, [pc, #408]	; (80040a8 <HAL_RCC_ClockConfig+0x2dc>)
 8003f0e:	681a      	ldr	r2, [r3, #0]
 8003f10:	2380      	movs	r3, #128	; 0x80
 8003f12:	029b      	lsls	r3, r3, #10
 8003f14:	4013      	ands	r3, r2
 8003f16:	d114      	bne.n	8003f42 <HAL_RCC_ClockConfig+0x176>
      {
        return HAL_ERROR;
 8003f18:	2301      	movs	r3, #1
 8003f1a:	e0b7      	b.n	800408c <HAL_RCC_ClockConfig+0x2c0>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	685b      	ldr	r3, [r3, #4]
 8003f20:	2b02      	cmp	r3, #2
 8003f22:	d107      	bne.n	8003f34 <HAL_RCC_ClockConfig+0x168>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003f24:	4b60      	ldr	r3, [pc, #384]	; (80040a8 <HAL_RCC_ClockConfig+0x2dc>)
 8003f26:	681a      	ldr	r2, [r3, #0]
 8003f28:	2380      	movs	r3, #128	; 0x80
 8003f2a:	049b      	lsls	r3, r3, #18
 8003f2c:	4013      	ands	r3, r2
 8003f2e:	d108      	bne.n	8003f42 <HAL_RCC_ClockConfig+0x176>
      {
        return HAL_ERROR;
 8003f30:	2301      	movs	r3, #1
 8003f32:	e0ab      	b.n	800408c <HAL_RCC_ClockConfig+0x2c0>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003f34:	4b5c      	ldr	r3, [pc, #368]	; (80040a8 <HAL_RCC_ClockConfig+0x2dc>)
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	2202      	movs	r2, #2
 8003f3a:	4013      	ands	r3, r2
 8003f3c:	d101      	bne.n	8003f42 <HAL_RCC_ClockConfig+0x176>
      {
        return HAL_ERROR;
 8003f3e:	2301      	movs	r3, #1
 8003f40:	e0a4      	b.n	800408c <HAL_RCC_ClockConfig+0x2c0>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003f42:	4b59      	ldr	r3, [pc, #356]	; (80040a8 <HAL_RCC_ClockConfig+0x2dc>)
 8003f44:	685b      	ldr	r3, [r3, #4]
 8003f46:	2203      	movs	r2, #3
 8003f48:	4393      	bics	r3, r2
 8003f4a:	0019      	movs	r1, r3
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	685a      	ldr	r2, [r3, #4]
 8003f50:	4b55      	ldr	r3, [pc, #340]	; (80040a8 <HAL_RCC_ClockConfig+0x2dc>)
 8003f52:	430a      	orrs	r2, r1
 8003f54:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003f56:	f7fd fbeb 	bl	8001730 <HAL_GetTick>
 8003f5a:	0003      	movs	r3, r0
 8003f5c:	60fb      	str	r3, [r7, #12]
    
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	685b      	ldr	r3, [r3, #4]
 8003f62:	2b01      	cmp	r3, #1
 8003f64:	d111      	bne.n	8003f8a <HAL_RCC_ClockConfig+0x1be>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8003f66:	e009      	b.n	8003f7c <HAL_RCC_ClockConfig+0x1b0>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003f68:	f7fd fbe2 	bl	8001730 <HAL_GetTick>
 8003f6c:	0002      	movs	r2, r0
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	1ad3      	subs	r3, r2, r3
 8003f72:	4a4f      	ldr	r2, [pc, #316]	; (80040b0 <HAL_RCC_ClockConfig+0x2e4>)
 8003f74:	4293      	cmp	r3, r2
 8003f76:	d901      	bls.n	8003f7c <HAL_RCC_ClockConfig+0x1b0>
        {
          return HAL_TIMEOUT;
 8003f78:	2303      	movs	r3, #3
 8003f7a:	e087      	b.n	800408c <HAL_RCC_ClockConfig+0x2c0>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8003f7c:	4b4a      	ldr	r3, [pc, #296]	; (80040a8 <HAL_RCC_ClockConfig+0x2dc>)
 8003f7e:	685b      	ldr	r3, [r3, #4]
 8003f80:	220c      	movs	r2, #12
 8003f82:	4013      	ands	r3, r2
 8003f84:	2b04      	cmp	r3, #4
 8003f86:	d1ef      	bne.n	8003f68 <HAL_RCC_ClockConfig+0x19c>
 8003f88:	e024      	b.n	8003fd4 <HAL_RCC_ClockConfig+0x208>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	685b      	ldr	r3, [r3, #4]
 8003f8e:	2b02      	cmp	r3, #2
 8003f90:	d11b      	bne.n	8003fca <HAL_RCC_ClockConfig+0x1fe>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003f92:	e009      	b.n	8003fa8 <HAL_RCC_ClockConfig+0x1dc>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003f94:	f7fd fbcc 	bl	8001730 <HAL_GetTick>
 8003f98:	0002      	movs	r2, r0
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	1ad3      	subs	r3, r2, r3
 8003f9e:	4a44      	ldr	r2, [pc, #272]	; (80040b0 <HAL_RCC_ClockConfig+0x2e4>)
 8003fa0:	4293      	cmp	r3, r2
 8003fa2:	d901      	bls.n	8003fa8 <HAL_RCC_ClockConfig+0x1dc>
        {
          return HAL_TIMEOUT;
 8003fa4:	2303      	movs	r3, #3
 8003fa6:	e071      	b.n	800408c <HAL_RCC_ClockConfig+0x2c0>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003fa8:	4b3f      	ldr	r3, [pc, #252]	; (80040a8 <HAL_RCC_ClockConfig+0x2dc>)
 8003faa:	685b      	ldr	r3, [r3, #4]
 8003fac:	220c      	movs	r2, #12
 8003fae:	4013      	ands	r3, r2
 8003fb0:	2b08      	cmp	r3, #8
 8003fb2:	d1ef      	bne.n	8003f94 <HAL_RCC_ClockConfig+0x1c8>
 8003fb4:	e00e      	b.n	8003fd4 <HAL_RCC_ClockConfig+0x208>
#endif /* RCC_CFGR_SWS_HSI48 */
    else
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003fb6:	f7fd fbbb 	bl	8001730 <HAL_GetTick>
 8003fba:	0002      	movs	r2, r0
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	1ad3      	subs	r3, r2, r3
 8003fc0:	4a3b      	ldr	r2, [pc, #236]	; (80040b0 <HAL_RCC_ClockConfig+0x2e4>)
 8003fc2:	4293      	cmp	r3, r2
 8003fc4:	d901      	bls.n	8003fca <HAL_RCC_ClockConfig+0x1fe>
        {
          return HAL_TIMEOUT;
 8003fc6:	2303      	movs	r3, #3
 8003fc8:	e060      	b.n	800408c <HAL_RCC_ClockConfig+0x2c0>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8003fca:	4b37      	ldr	r3, [pc, #220]	; (80040a8 <HAL_RCC_ClockConfig+0x2dc>)
 8003fcc:	685b      	ldr	r3, [r3, #4]
 8003fce:	220c      	movs	r2, #12
 8003fd0:	4013      	ands	r3, r2
 8003fd2:	d1f0      	bne.n	8003fb6 <HAL_RCC_ClockConfig+0x1ea>
        }
      }
    }      
  }    
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 8003fd4:	4b32      	ldr	r3, [pc, #200]	; (80040a0 <HAL_RCC_ClockConfig+0x2d4>)
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	2201      	movs	r2, #1
 8003fda:	4013      	ands	r3, r2
 8003fdc:	683a      	ldr	r2, [r7, #0]
 8003fde:	429a      	cmp	r2, r3
 8003fe0:	d211      	bcs.n	8004006 <HAL_RCC_ClockConfig+0x23a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003fe2:	4b2f      	ldr	r3, [pc, #188]	; (80040a0 <HAL_RCC_ClockConfig+0x2d4>)
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	2201      	movs	r2, #1
 8003fe8:	4393      	bics	r3, r2
 8003fea:	0019      	movs	r1, r3
 8003fec:	4b2c      	ldr	r3, [pc, #176]	; (80040a0 <HAL_RCC_ClockConfig+0x2d4>)
 8003fee:	683a      	ldr	r2, [r7, #0]
 8003ff0:	430a      	orrs	r2, r1
 8003ff2:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8003ff4:	4b2a      	ldr	r3, [pc, #168]	; (80040a0 <HAL_RCC_ClockConfig+0x2d4>)
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	2201      	movs	r2, #1
 8003ffa:	4013      	ands	r3, r2
 8003ffc:	683a      	ldr	r2, [r7, #0]
 8003ffe:	429a      	cmp	r2, r3
 8004000:	d001      	beq.n	8004006 <HAL_RCC_ClockConfig+0x23a>
    {
      return HAL_ERROR;
 8004002:	2301      	movs	r3, #1
 8004004:	e042      	b.n	800408c <HAL_RCC_ClockConfig+0x2c0>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	2204      	movs	r2, #4
 800400c:	4013      	ands	r3, r2
 800400e:	d02b      	beq.n	8004068 <HAL_RCC_ClockConfig+0x29c>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	68db      	ldr	r3, [r3, #12]
 8004014:	2b00      	cmp	r3, #0
 8004016:	d01d      	beq.n	8004054 <HAL_RCC_ClockConfig+0x288>
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	68da      	ldr	r2, [r3, #12]
 800401c:	2380      	movs	r3, #128	; 0x80
 800401e:	00db      	lsls	r3, r3, #3
 8004020:	429a      	cmp	r2, r3
 8004022:	d017      	beq.n	8004054 <HAL_RCC_ClockConfig+0x288>
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	68da      	ldr	r2, [r3, #12]
 8004028:	23a0      	movs	r3, #160	; 0xa0
 800402a:	00db      	lsls	r3, r3, #3
 800402c:	429a      	cmp	r2, r3
 800402e:	d011      	beq.n	8004054 <HAL_RCC_ClockConfig+0x288>
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	68da      	ldr	r2, [r3, #12]
 8004034:	23c0      	movs	r3, #192	; 0xc0
 8004036:	00db      	lsls	r3, r3, #3
 8004038:	429a      	cmp	r2, r3
 800403a:	d00b      	beq.n	8004054 <HAL_RCC_ClockConfig+0x288>
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	68da      	ldr	r2, [r3, #12]
 8004040:	23e0      	movs	r3, #224	; 0xe0
 8004042:	00db      	lsls	r3, r3, #3
 8004044:	429a      	cmp	r2, r3
 8004046:	d005      	beq.n	8004054 <HAL_RCC_ClockConfig+0x288>
 8004048:	4a1a      	ldr	r2, [pc, #104]	; (80040b4 <HAL_RCC_ClockConfig+0x2e8>)
 800404a:	4b13      	ldr	r3, [pc, #76]	; (8004098 <HAL_RCC_ClockConfig+0x2cc>)
 800404c:	0011      	movs	r1, r2
 800404e:	0018      	movs	r0, r3
 8004050:	f7fc fc8f 	bl	8000972 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8004054:	4b14      	ldr	r3, [pc, #80]	; (80040a8 <HAL_RCC_ClockConfig+0x2dc>)
 8004056:	685b      	ldr	r3, [r3, #4]
 8004058:	4a17      	ldr	r2, [pc, #92]	; (80040b8 <HAL_RCC_ClockConfig+0x2ec>)
 800405a:	4013      	ands	r3, r2
 800405c:	0019      	movs	r1, r3
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	68da      	ldr	r2, [r3, #12]
 8004062:	4b11      	ldr	r3, [pc, #68]	; (80040a8 <HAL_RCC_ClockConfig+0x2dc>)
 8004064:	430a      	orrs	r2, r1
 8004066:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8004068:	f000 f82c 	bl	80040c4 <HAL_RCC_GetSysClockFreq>
 800406c:	0001      	movs	r1, r0
 800406e:	4b0e      	ldr	r3, [pc, #56]	; (80040a8 <HAL_RCC_ClockConfig+0x2dc>)
 8004070:	685b      	ldr	r3, [r3, #4]
 8004072:	091b      	lsrs	r3, r3, #4
 8004074:	220f      	movs	r2, #15
 8004076:	4013      	ands	r3, r2
 8004078:	4a10      	ldr	r2, [pc, #64]	; (80040bc <HAL_RCC_ClockConfig+0x2f0>)
 800407a:	5cd3      	ldrb	r3, [r2, r3]
 800407c:	000a      	movs	r2, r1
 800407e:	40da      	lsrs	r2, r3
 8004080:	4b0f      	ldr	r3, [pc, #60]	; (80040c0 <HAL_RCC_ClockConfig+0x2f4>)
 8004082:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8004084:	2000      	movs	r0, #0
 8004086:	f7fd fb2b 	bl	80016e0 <HAL_InitTick>
  
  return HAL_OK;
 800408a:	2300      	movs	r3, #0
}
 800408c:	0018      	movs	r0, r3
 800408e:	46bd      	mov	sp, r7
 8004090:	b004      	add	sp, #16
 8004092:	bd80      	pop	{r7, pc}
 8004094:	000002da 	.word	0x000002da
 8004098:	08007064 	.word	0x08007064
 800409c:	000002db 	.word	0x000002db
 80040a0:	40022000 	.word	0x40022000
 80040a4:	000002f3 	.word	0x000002f3
 80040a8:	40021000 	.word	0x40021000
 80040ac:	000002fa 	.word	0x000002fa
 80040b0:	00001388 	.word	0x00001388
 80040b4:	00000363 	.word	0x00000363
 80040b8:	fffff8ff 	.word	0xfffff8ff
 80040bc:	0800716c 	.word	0x0800716c
 80040c0:	20000000 	.word	0x20000000

080040c4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80040c4:	b590      	push	{r4, r7, lr}
 80040c6:	b08f      	sub	sp, #60	; 0x3c
 80040c8:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 80040ca:	2314      	movs	r3, #20
 80040cc:	18fb      	adds	r3, r7, r3
 80040ce:	4a2b      	ldr	r2, [pc, #172]	; (800417c <HAL_RCC_GetSysClockFreq+0xb8>)
 80040d0:	ca13      	ldmia	r2!, {r0, r1, r4}
 80040d2:	c313      	stmia	r3!, {r0, r1, r4}
 80040d4:	6812      	ldr	r2, [r2, #0]
 80040d6:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 80040d8:	1d3b      	adds	r3, r7, #4
 80040da:	4a29      	ldr	r2, [pc, #164]	; (8004180 <HAL_RCC_GetSysClockFreq+0xbc>)
 80040dc:	ca13      	ldmia	r2!, {r0, r1, r4}
 80040de:	c313      	stmia	r3!, {r0, r1, r4}
 80040e0:	6812      	ldr	r2, [r2, #0]
 80040e2:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80040e4:	2300      	movs	r3, #0
 80040e6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80040e8:	2300      	movs	r3, #0
 80040ea:	62bb      	str	r3, [r7, #40]	; 0x28
 80040ec:	2300      	movs	r3, #0
 80040ee:	637b      	str	r3, [r7, #52]	; 0x34
 80040f0:	2300      	movs	r3, #0
 80040f2:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 80040f4:	2300      	movs	r3, #0
 80040f6:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 80040f8:	4b22      	ldr	r3, [pc, #136]	; (8004184 <HAL_RCC_GetSysClockFreq+0xc0>)
 80040fa:	685b      	ldr	r3, [r3, #4]
 80040fc:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80040fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004100:	220c      	movs	r2, #12
 8004102:	4013      	ands	r3, r2
 8004104:	2b04      	cmp	r3, #4
 8004106:	d002      	beq.n	800410e <HAL_RCC_GetSysClockFreq+0x4a>
 8004108:	2b08      	cmp	r3, #8
 800410a:	d003      	beq.n	8004114 <HAL_RCC_GetSysClockFreq+0x50>
 800410c:	e02d      	b.n	800416a <HAL_RCC_GetSysClockFreq+0xa6>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800410e:	4b1e      	ldr	r3, [pc, #120]	; (8004188 <HAL_RCC_GetSysClockFreq+0xc4>)
 8004110:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8004112:	e02d      	b.n	8004170 <HAL_RCC_GetSysClockFreq+0xac>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8004114:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004116:	0c9b      	lsrs	r3, r3, #18
 8004118:	220f      	movs	r2, #15
 800411a:	4013      	ands	r3, r2
 800411c:	2214      	movs	r2, #20
 800411e:	18ba      	adds	r2, r7, r2
 8004120:	5cd3      	ldrb	r3, [r2, r3]
 8004122:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8004124:	4b17      	ldr	r3, [pc, #92]	; (8004184 <HAL_RCC_GetSysClockFreq+0xc0>)
 8004126:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004128:	220f      	movs	r2, #15
 800412a:	4013      	ands	r3, r2
 800412c:	1d3a      	adds	r2, r7, #4
 800412e:	5cd3      	ldrb	r3, [r2, r3]
 8004130:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8004132:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004134:	2380      	movs	r3, #128	; 0x80
 8004136:	025b      	lsls	r3, r3, #9
 8004138:	4013      	ands	r3, r2
 800413a:	d009      	beq.n	8004150 <HAL_RCC_GetSysClockFreq+0x8c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (HSE_VALUE / prediv) * pllmul;
 800413c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800413e:	4812      	ldr	r0, [pc, #72]	; (8004188 <HAL_RCC_GetSysClockFreq+0xc4>)
 8004140:	f7fb ffe2 	bl	8000108 <__udivsi3>
 8004144:	0003      	movs	r3, r0
 8004146:	001a      	movs	r2, r3
 8004148:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800414a:	4353      	muls	r3, r2
 800414c:	637b      	str	r3, [r7, #52]	; 0x34
 800414e:	e009      	b.n	8004164 <HAL_RCC_GetSysClockFreq+0xa0>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (HSI_VALUE / prediv) * pllmul;
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1U) * pllmul);
 8004150:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004152:	000a      	movs	r2, r1
 8004154:	0152      	lsls	r2, r2, #5
 8004156:	1a52      	subs	r2, r2, r1
 8004158:	0193      	lsls	r3, r2, #6
 800415a:	1a9b      	subs	r3, r3, r2
 800415c:	00db      	lsls	r3, r3, #3
 800415e:	185b      	adds	r3, r3, r1
 8004160:	021b      	lsls	r3, r3, #8
 8004162:	637b      	str	r3, [r7, #52]	; 0x34
#endif
      }
      sysclockfreq = pllclk;
 8004164:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004166:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8004168:	e002      	b.n	8004170 <HAL_RCC_GetSysClockFreq+0xac>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800416a:	4b07      	ldr	r3, [pc, #28]	; (8004188 <HAL_RCC_GetSysClockFreq+0xc4>)
 800416c:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800416e:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8004170:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8004172:	0018      	movs	r0, r3
 8004174:	46bd      	mov	sp, r7
 8004176:	b00f      	add	sp, #60	; 0x3c
 8004178:	bd90      	pop	{r4, r7, pc}
 800417a:	46c0      	nop			; (mov r8, r8)
 800417c:	0800709c 	.word	0x0800709c
 8004180:	080070ac 	.word	0x080070ac
 8004184:	40021000 	.word	0x40021000
 8004188:	007a1200 	.word	0x007a1200

0800418c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800418c:	b580      	push	{r7, lr}
 800418e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004190:	4b02      	ldr	r3, [pc, #8]	; (800419c <HAL_RCC_GetHCLKFreq+0x10>)
 8004192:	681b      	ldr	r3, [r3, #0]
}
 8004194:	0018      	movs	r0, r3
 8004196:	46bd      	mov	sp, r7
 8004198:	bd80      	pop	{r7, pc}
 800419a:	46c0      	nop			; (mov r8, r8)
 800419c:	20000000 	.word	0x20000000

080041a0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80041a0:	b580      	push	{r7, lr}
 80041a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 80041a4:	f7ff fff2 	bl	800418c <HAL_RCC_GetHCLKFreq>
 80041a8:	0001      	movs	r1, r0
 80041aa:	4b06      	ldr	r3, [pc, #24]	; (80041c4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80041ac:	685b      	ldr	r3, [r3, #4]
 80041ae:	0a1b      	lsrs	r3, r3, #8
 80041b0:	2207      	movs	r2, #7
 80041b2:	4013      	ands	r3, r2
 80041b4:	4a04      	ldr	r2, [pc, #16]	; (80041c8 <HAL_RCC_GetPCLK1Freq+0x28>)
 80041b6:	5cd3      	ldrb	r3, [r2, r3]
 80041b8:	40d9      	lsrs	r1, r3
 80041ba:	000b      	movs	r3, r1
}    
 80041bc:	0018      	movs	r0, r3
 80041be:	46bd      	mov	sp, r7
 80041c0:	bd80      	pop	{r7, pc}
 80041c2:	46c0      	nop			; (mov r8, r8)
 80041c4:	40021000 	.word	0x40021000
 80041c8:	0800717c 	.word	0x0800717c

080041cc <HAL_TIM_Base_Init>:
  *         parameters in the TIM_HandleTypeDef and create the associated handle.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80041cc:	b580      	push	{r7, lr}
 80041ce:	b082      	sub	sp, #8
 80041d0:	af00      	add	r7, sp, #0
 80041d2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if(htim == NULL)
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d101      	bne.n	80041de <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80041da:	2301      	movs	r3, #1
 80041dc:	e087      	b.n	80042ee <HAL_TIM_Base_Init+0x122>
  }

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	4a45      	ldr	r2, [pc, #276]	; (80042f8 <HAL_TIM_Base_Init+0x12c>)
 80041e4:	4293      	cmp	r3, r2
 80041e6:	d028      	beq.n	800423a <HAL_TIM_Base_Init+0x6e>
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681a      	ldr	r2, [r3, #0]
 80041ec:	2380      	movs	r3, #128	; 0x80
 80041ee:	05db      	lsls	r3, r3, #23
 80041f0:	429a      	cmp	r2, r3
 80041f2:	d022      	beq.n	800423a <HAL_TIM_Base_Init+0x6e>
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	4a40      	ldr	r2, [pc, #256]	; (80042fc <HAL_TIM_Base_Init+0x130>)
 80041fa:	4293      	cmp	r3, r2
 80041fc:	d01d      	beq.n	800423a <HAL_TIM_Base_Init+0x6e>
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	4a3f      	ldr	r2, [pc, #252]	; (8004300 <HAL_TIM_Base_Init+0x134>)
 8004204:	4293      	cmp	r3, r2
 8004206:	d018      	beq.n	800423a <HAL_TIM_Base_Init+0x6e>
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	4a3d      	ldr	r2, [pc, #244]	; (8004304 <HAL_TIM_Base_Init+0x138>)
 800420e:	4293      	cmp	r3, r2
 8004210:	d013      	beq.n	800423a <HAL_TIM_Base_Init+0x6e>
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	4a3c      	ldr	r2, [pc, #240]	; (8004308 <HAL_TIM_Base_Init+0x13c>)
 8004218:	4293      	cmp	r3, r2
 800421a:	d00e      	beq.n	800423a <HAL_TIM_Base_Init+0x6e>
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	4a3a      	ldr	r2, [pc, #232]	; (800430c <HAL_TIM_Base_Init+0x140>)
 8004222:	4293      	cmp	r3, r2
 8004224:	d009      	beq.n	800423a <HAL_TIM_Base_Init+0x6e>
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	4a39      	ldr	r2, [pc, #228]	; (8004310 <HAL_TIM_Base_Init+0x144>)
 800422c:	4293      	cmp	r3, r2
 800422e:	d004      	beq.n	800423a <HAL_TIM_Base_Init+0x6e>
 8004230:	4b38      	ldr	r3, [pc, #224]	; (8004314 <HAL_TIM_Base_Init+0x148>)
 8004232:	21d4      	movs	r1, #212	; 0xd4
 8004234:	0018      	movs	r0, r3
 8004236:	f7fc fb9c 	bl	8000972 <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	689b      	ldr	r3, [r3, #8]
 800423e:	2b00      	cmp	r3, #0
 8004240:	d014      	beq.n	800426c <HAL_TIM_Base_Init+0xa0>
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	689b      	ldr	r3, [r3, #8]
 8004246:	2b10      	cmp	r3, #16
 8004248:	d010      	beq.n	800426c <HAL_TIM_Base_Init+0xa0>
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	689b      	ldr	r3, [r3, #8]
 800424e:	2b20      	cmp	r3, #32
 8004250:	d00c      	beq.n	800426c <HAL_TIM_Base_Init+0xa0>
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	689b      	ldr	r3, [r3, #8]
 8004256:	2b40      	cmp	r3, #64	; 0x40
 8004258:	d008      	beq.n	800426c <HAL_TIM_Base_Init+0xa0>
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	689b      	ldr	r3, [r3, #8]
 800425e:	2b60      	cmp	r3, #96	; 0x60
 8004260:	d004      	beq.n	800426c <HAL_TIM_Base_Init+0xa0>
 8004262:	4b2c      	ldr	r3, [pc, #176]	; (8004314 <HAL_TIM_Base_Init+0x148>)
 8004264:	21d5      	movs	r1, #213	; 0xd5
 8004266:	0018      	movs	r0, r3
 8004268:	f7fc fb83 	bl	8000972 <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	691b      	ldr	r3, [r3, #16]
 8004270:	2b00      	cmp	r3, #0
 8004272:	d010      	beq.n	8004296 <HAL_TIM_Base_Init+0xca>
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	691a      	ldr	r2, [r3, #16]
 8004278:	2380      	movs	r3, #128	; 0x80
 800427a:	005b      	lsls	r3, r3, #1
 800427c:	429a      	cmp	r2, r3
 800427e:	d00a      	beq.n	8004296 <HAL_TIM_Base_Init+0xca>
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	691a      	ldr	r2, [r3, #16]
 8004284:	2380      	movs	r3, #128	; 0x80
 8004286:	009b      	lsls	r3, r3, #2
 8004288:	429a      	cmp	r2, r3
 800428a:	d004      	beq.n	8004296 <HAL_TIM_Base_Init+0xca>
 800428c:	4b21      	ldr	r3, [pc, #132]	; (8004314 <HAL_TIM_Base_Init+0x148>)
 800428e:	21d6      	movs	r1, #214	; 0xd6
 8004290:	0018      	movs	r0, r3
 8004292:	f7fc fb6e 	bl	8000972 <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	699b      	ldr	r3, [r3, #24]
 800429a:	2b00      	cmp	r3, #0
 800429c:	d008      	beq.n	80042b0 <HAL_TIM_Base_Init+0xe4>
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	699b      	ldr	r3, [r3, #24]
 80042a2:	2b80      	cmp	r3, #128	; 0x80
 80042a4:	d004      	beq.n	80042b0 <HAL_TIM_Base_Init+0xe4>
 80042a6:	4b1b      	ldr	r3, [pc, #108]	; (8004314 <HAL_TIM_Base_Init+0x148>)
 80042a8:	21d7      	movs	r1, #215	; 0xd7
 80042aa:	0018      	movs	r0, r3
 80042ac:	f7fc fb61 	bl	8000972 <assert_failed>

  if(htim->State == HAL_TIM_STATE_RESET)
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	223d      	movs	r2, #61	; 0x3d
 80042b4:	5c9b      	ldrb	r3, [r3, r2]
 80042b6:	b2db      	uxtb	r3, r3
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d107      	bne.n	80042cc <HAL_TIM_Base_Init+0x100>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	223c      	movs	r2, #60	; 0x3c
 80042c0:	2100      	movs	r1, #0
 80042c2:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	0018      	movs	r0, r3
 80042c8:	f7fc fd5c 	bl	8000d84 <HAL_TIM_Base_MspInit>
  }

  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	223d      	movs	r2, #61	; 0x3d
 80042d0:	2102      	movs	r1, #2
 80042d2:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681a      	ldr	r2, [r3, #0]
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	3304      	adds	r3, #4
 80042dc:	0019      	movs	r1, r3
 80042de:	0010      	movs	r0, r2
 80042e0:	f001 f996 	bl	8005610 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	223d      	movs	r2, #61	; 0x3d
 80042e8:	2101      	movs	r1, #1
 80042ea:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80042ec:	2300      	movs	r3, #0
}
 80042ee:	0018      	movs	r0, r3
 80042f0:	46bd      	mov	sp, r7
 80042f2:	b002      	add	sp, #8
 80042f4:	bd80      	pop	{r7, pc}
 80042f6:	46c0      	nop			; (mov r8, r8)
 80042f8:	40012c00 	.word	0x40012c00
 80042fc:	40000400 	.word	0x40000400
 8004300:	40001000 	.word	0x40001000
 8004304:	40002000 	.word	0x40002000
 8004308:	40014000 	.word	0x40014000
 800430c:	40014400 	.word	0x40014400
 8004310:	40014800 	.word	0x40014800
 8004314:	080070bc 	.word	0x080070bc

08004318 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM handle
  * @retval HAL status
*/
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8004318:	b580      	push	{r7, lr}
 800431a:	b082      	sub	sp, #8
 800431c:	af00      	add	r7, sp, #0
 800431e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	4a21      	ldr	r2, [pc, #132]	; (80043ac <HAL_TIM_Base_Start+0x94>)
 8004326:	4293      	cmp	r3, r2
 8004328:	d02a      	beq.n	8004380 <HAL_TIM_Base_Start+0x68>
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681a      	ldr	r2, [r3, #0]
 800432e:	2380      	movs	r3, #128	; 0x80
 8004330:	05db      	lsls	r3, r3, #23
 8004332:	429a      	cmp	r2, r3
 8004334:	d024      	beq.n	8004380 <HAL_TIM_Base_Start+0x68>
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	4a1d      	ldr	r2, [pc, #116]	; (80043b0 <HAL_TIM_Base_Start+0x98>)
 800433c:	4293      	cmp	r3, r2
 800433e:	d01f      	beq.n	8004380 <HAL_TIM_Base_Start+0x68>
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	4a1b      	ldr	r2, [pc, #108]	; (80043b4 <HAL_TIM_Base_Start+0x9c>)
 8004346:	4293      	cmp	r3, r2
 8004348:	d01a      	beq.n	8004380 <HAL_TIM_Base_Start+0x68>
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	4a1a      	ldr	r2, [pc, #104]	; (80043b8 <HAL_TIM_Base_Start+0xa0>)
 8004350:	4293      	cmp	r3, r2
 8004352:	d015      	beq.n	8004380 <HAL_TIM_Base_Start+0x68>
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	4a18      	ldr	r2, [pc, #96]	; (80043bc <HAL_TIM_Base_Start+0xa4>)
 800435a:	4293      	cmp	r3, r2
 800435c:	d010      	beq.n	8004380 <HAL_TIM_Base_Start+0x68>
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	4a17      	ldr	r2, [pc, #92]	; (80043c0 <HAL_TIM_Base_Start+0xa8>)
 8004364:	4293      	cmp	r3, r2
 8004366:	d00b      	beq.n	8004380 <HAL_TIM_Base_Start+0x68>
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	4a15      	ldr	r2, [pc, #84]	; (80043c4 <HAL_TIM_Base_Start+0xac>)
 800436e:	4293      	cmp	r3, r2
 8004370:	d006      	beq.n	8004380 <HAL_TIM_Base_Start+0x68>
 8004372:	2398      	movs	r3, #152	; 0x98
 8004374:	005a      	lsls	r2, r3, #1
 8004376:	4b14      	ldr	r3, [pc, #80]	; (80043c8 <HAL_TIM_Base_Start+0xb0>)
 8004378:	0011      	movs	r1, r2
 800437a:	0018      	movs	r0, r3
 800437c:	f7fc faf9 	bl	8000972 <assert_failed>

  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	223d      	movs	r2, #61	; 0x3d
 8004384:	2102      	movs	r1, #2
 8004386:	5499      	strb	r1, [r3, r2]

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	681a      	ldr	r2, [r3, #0]
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	2101      	movs	r1, #1
 8004394:	430a      	orrs	r2, r1
 8004396:	601a      	str	r2, [r3, #0]

  /* Change the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	223d      	movs	r2, #61	; 0x3d
 800439c:	2101      	movs	r1, #1
 800439e:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 80043a0:	2300      	movs	r3, #0
}
 80043a2:	0018      	movs	r0, r3
 80043a4:	46bd      	mov	sp, r7
 80043a6:	b002      	add	sp, #8
 80043a8:	bd80      	pop	{r7, pc}
 80043aa:	46c0      	nop			; (mov r8, r8)
 80043ac:	40012c00 	.word	0x40012c00
 80043b0:	40000400 	.word	0x40000400
 80043b4:	40001000 	.word	0x40001000
 80043b8:	40002000 	.word	0x40002000
 80043bc:	40014000 	.word	0x40014000
 80043c0:	40014400 	.word	0x40014400
 80043c4:	40014800 	.word	0x40014800
 80043c8:	080070bc 	.word	0x080070bc

080043cc <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM handle
  * @retval HAL status
*/
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 80043cc:	b580      	push	{r7, lr}
 80043ce:	b082      	sub	sp, #8
 80043d0:	af00      	add	r7, sp, #0
 80043d2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	4a27      	ldr	r2, [pc, #156]	; (8004478 <HAL_TIM_Base_Stop+0xac>)
 80043da:	4293      	cmp	r3, r2
 80043dc:	d02b      	beq.n	8004436 <HAL_TIM_Base_Stop+0x6a>
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681a      	ldr	r2, [r3, #0]
 80043e2:	2380      	movs	r3, #128	; 0x80
 80043e4:	05db      	lsls	r3, r3, #23
 80043e6:	429a      	cmp	r2, r3
 80043e8:	d025      	beq.n	8004436 <HAL_TIM_Base_Stop+0x6a>
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	4a23      	ldr	r2, [pc, #140]	; (800447c <HAL_TIM_Base_Stop+0xb0>)
 80043f0:	4293      	cmp	r3, r2
 80043f2:	d020      	beq.n	8004436 <HAL_TIM_Base_Stop+0x6a>
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	4a21      	ldr	r2, [pc, #132]	; (8004480 <HAL_TIM_Base_Stop+0xb4>)
 80043fa:	4293      	cmp	r3, r2
 80043fc:	d01b      	beq.n	8004436 <HAL_TIM_Base_Stop+0x6a>
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	4a20      	ldr	r2, [pc, #128]	; (8004484 <HAL_TIM_Base_Stop+0xb8>)
 8004404:	4293      	cmp	r3, r2
 8004406:	d016      	beq.n	8004436 <HAL_TIM_Base_Stop+0x6a>
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	4a1e      	ldr	r2, [pc, #120]	; (8004488 <HAL_TIM_Base_Stop+0xbc>)
 800440e:	4293      	cmp	r3, r2
 8004410:	d011      	beq.n	8004436 <HAL_TIM_Base_Stop+0x6a>
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	4a1d      	ldr	r2, [pc, #116]	; (800448c <HAL_TIM_Base_Stop+0xc0>)
 8004418:	4293      	cmp	r3, r2
 800441a:	d00c      	beq.n	8004436 <HAL_TIM_Base_Stop+0x6a>
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	4a1b      	ldr	r2, [pc, #108]	; (8004490 <HAL_TIM_Base_Stop+0xc4>)
 8004422:	4293      	cmp	r3, r2
 8004424:	d007      	beq.n	8004436 <HAL_TIM_Base_Stop+0x6a>
 8004426:	2348      	movs	r3, #72	; 0x48
 8004428:	33ff      	adds	r3, #255	; 0xff
 800442a:	001a      	movs	r2, r3
 800442c:	4b19      	ldr	r3, [pc, #100]	; (8004494 <HAL_TIM_Base_Stop+0xc8>)
 800442e:	0011      	movs	r1, r2
 8004430:	0018      	movs	r0, r3
 8004432:	f7fc fa9e 	bl	8000972 <assert_failed>

  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	223d      	movs	r2, #61	; 0x3d
 800443a:	2102      	movs	r1, #2
 800443c:	5499      	strb	r1, [r3, r2]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	6a1b      	ldr	r3, [r3, #32]
 8004444:	4a14      	ldr	r2, [pc, #80]	; (8004498 <HAL_TIM_Base_Stop+0xcc>)
 8004446:	4013      	ands	r3, r2
 8004448:	d10d      	bne.n	8004466 <HAL_TIM_Base_Stop+0x9a>
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	6a1b      	ldr	r3, [r3, #32]
 8004450:	4a12      	ldr	r2, [pc, #72]	; (800449c <HAL_TIM_Base_Stop+0xd0>)
 8004452:	4013      	ands	r3, r2
 8004454:	d107      	bne.n	8004466 <HAL_TIM_Base_Stop+0x9a>
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	681a      	ldr	r2, [r3, #0]
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	2101      	movs	r1, #1
 8004462:	438a      	bics	r2, r1
 8004464:	601a      	str	r2, [r3, #0]

  /* Change the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	223d      	movs	r2, #61	; 0x3d
 800446a:	2101      	movs	r1, #1
 800446c:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 800446e:	2300      	movs	r3, #0
}
 8004470:	0018      	movs	r0, r3
 8004472:	46bd      	mov	sp, r7
 8004474:	b002      	add	sp, #8
 8004476:	bd80      	pop	{r7, pc}
 8004478:	40012c00 	.word	0x40012c00
 800447c:	40000400 	.word	0x40000400
 8004480:	40001000 	.word	0x40001000
 8004484:	40002000 	.word	0x40002000
 8004488:	40014000 	.word	0x40014000
 800448c:	40014400 	.word	0x40014400
 8004490:	40014800 	.word	0x40014800
 8004494:	080070bc 	.word	0x080070bc
 8004498:	00001111 	.word	0x00001111
 800449c:	00000444 	.word	0x00000444

080044a0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM handle
  * @retval HAL status
*/
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80044a0:	b580      	push	{r7, lr}
 80044a2:	b082      	sub	sp, #8
 80044a4:	af00      	add	r7, sp, #0
 80044a6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	4a21      	ldr	r2, [pc, #132]	; (8004534 <HAL_TIM_Base_Start_IT+0x94>)
 80044ae:	4293      	cmp	r3, r2
 80044b0:	d02a      	beq.n	8004508 <HAL_TIM_Base_Start_IT+0x68>
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681a      	ldr	r2, [r3, #0]
 80044b6:	2380      	movs	r3, #128	; 0x80
 80044b8:	05db      	lsls	r3, r3, #23
 80044ba:	429a      	cmp	r2, r3
 80044bc:	d024      	beq.n	8004508 <HAL_TIM_Base_Start_IT+0x68>
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	4a1d      	ldr	r2, [pc, #116]	; (8004538 <HAL_TIM_Base_Start_IT+0x98>)
 80044c4:	4293      	cmp	r3, r2
 80044c6:	d01f      	beq.n	8004508 <HAL_TIM_Base_Start_IT+0x68>
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	4a1b      	ldr	r2, [pc, #108]	; (800453c <HAL_TIM_Base_Start_IT+0x9c>)
 80044ce:	4293      	cmp	r3, r2
 80044d0:	d01a      	beq.n	8004508 <HAL_TIM_Base_Start_IT+0x68>
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	4a1a      	ldr	r2, [pc, #104]	; (8004540 <HAL_TIM_Base_Start_IT+0xa0>)
 80044d8:	4293      	cmp	r3, r2
 80044da:	d015      	beq.n	8004508 <HAL_TIM_Base_Start_IT+0x68>
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	4a18      	ldr	r2, [pc, #96]	; (8004544 <HAL_TIM_Base_Start_IT+0xa4>)
 80044e2:	4293      	cmp	r3, r2
 80044e4:	d010      	beq.n	8004508 <HAL_TIM_Base_Start_IT+0x68>
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	4a17      	ldr	r2, [pc, #92]	; (8004548 <HAL_TIM_Base_Start_IT+0xa8>)
 80044ec:	4293      	cmp	r3, r2
 80044ee:	d00b      	beq.n	8004508 <HAL_TIM_Base_Start_IT+0x68>
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	4a15      	ldr	r2, [pc, #84]	; (800454c <HAL_TIM_Base_Start_IT+0xac>)
 80044f6:	4293      	cmp	r3, r2
 80044f8:	d006      	beq.n	8004508 <HAL_TIM_Base_Start_IT+0x68>
 80044fa:	23af      	movs	r3, #175	; 0xaf
 80044fc:	005a      	lsls	r2, r3, #1
 80044fe:	4b14      	ldr	r3, [pc, #80]	; (8004550 <HAL_TIM_Base_Start_IT+0xb0>)
 8004500:	0011      	movs	r1, r2
 8004502:	0018      	movs	r0, r3
 8004504:	f7fc fa35 	bl	8000972 <assert_failed>

   /* Enable the TIM Update interrupt */
   __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	68da      	ldr	r2, [r3, #12]
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	2101      	movs	r1, #1
 8004514:	430a      	orrs	r2, r1
 8004516:	60da      	str	r2, [r3, #12]

   /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	681a      	ldr	r2, [r3, #0]
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	2101      	movs	r1, #1
 8004524:	430a      	orrs	r2, r1
 8004526:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8004528:	2300      	movs	r3, #0
}
 800452a:	0018      	movs	r0, r3
 800452c:	46bd      	mov	sp, r7
 800452e:	b002      	add	sp, #8
 8004530:	bd80      	pop	{r7, pc}
 8004532:	46c0      	nop			; (mov r8, r8)
 8004534:	40012c00 	.word	0x40012c00
 8004538:	40000400 	.word	0x40000400
 800453c:	40001000 	.word	0x40001000
 8004540:	40002000 	.word	0x40002000
 8004544:	40014000 	.word	0x40014000
 8004548:	40014400 	.word	0x40014400
 800454c:	40014800 	.word	0x40014800
 8004550:	080070bc 	.word	0x080070bc

08004554 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM handle
  * @retval HAL status
*/
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8004554:	b580      	push	{r7, lr}
 8004556:	b082      	sub	sp, #8
 8004558:	af00      	add	r7, sp, #0
 800455a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	4a27      	ldr	r2, [pc, #156]	; (8004600 <HAL_TIM_Base_Stop_IT+0xac>)
 8004562:	4293      	cmp	r3, r2
 8004564:	d02a      	beq.n	80045bc <HAL_TIM_Base_Stop_IT+0x68>
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681a      	ldr	r2, [r3, #0]
 800456a:	2380      	movs	r3, #128	; 0x80
 800456c:	05db      	lsls	r3, r3, #23
 800456e:	429a      	cmp	r2, r3
 8004570:	d024      	beq.n	80045bc <HAL_TIM_Base_Stop_IT+0x68>
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	4a23      	ldr	r2, [pc, #140]	; (8004604 <HAL_TIM_Base_Stop_IT+0xb0>)
 8004578:	4293      	cmp	r3, r2
 800457a:	d01f      	beq.n	80045bc <HAL_TIM_Base_Stop_IT+0x68>
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	4a21      	ldr	r2, [pc, #132]	; (8004608 <HAL_TIM_Base_Stop_IT+0xb4>)
 8004582:	4293      	cmp	r3, r2
 8004584:	d01a      	beq.n	80045bc <HAL_TIM_Base_Stop_IT+0x68>
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	4a20      	ldr	r2, [pc, #128]	; (800460c <HAL_TIM_Base_Stop_IT+0xb8>)
 800458c:	4293      	cmp	r3, r2
 800458e:	d015      	beq.n	80045bc <HAL_TIM_Base_Stop_IT+0x68>
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	4a1e      	ldr	r2, [pc, #120]	; (8004610 <HAL_TIM_Base_Stop_IT+0xbc>)
 8004596:	4293      	cmp	r3, r2
 8004598:	d010      	beq.n	80045bc <HAL_TIM_Base_Stop_IT+0x68>
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	4a1d      	ldr	r2, [pc, #116]	; (8004614 <HAL_TIM_Base_Stop_IT+0xc0>)
 80045a0:	4293      	cmp	r3, r2
 80045a2:	d00b      	beq.n	80045bc <HAL_TIM_Base_Stop_IT+0x68>
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	4a1b      	ldr	r2, [pc, #108]	; (8004618 <HAL_TIM_Base_Stop_IT+0xc4>)
 80045aa:	4293      	cmp	r3, r2
 80045ac:	d006      	beq.n	80045bc <HAL_TIM_Base_Stop_IT+0x68>
 80045ae:	23b9      	movs	r3, #185	; 0xb9
 80045b0:	005a      	lsls	r2, r3, #1
 80045b2:	4b1a      	ldr	r3, [pc, #104]	; (800461c <HAL_TIM_Base_Stop_IT+0xc8>)
 80045b4:	0011      	movs	r1, r2
 80045b6:	0018      	movs	r0, r3
 80045b8:	f7fc f9db 	bl	8000972 <assert_failed>
  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	68da      	ldr	r2, [r3, #12]
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	2101      	movs	r1, #1
 80045c8:	438a      	bics	r2, r1
 80045ca:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	6a1b      	ldr	r3, [r3, #32]
 80045d2:	4a13      	ldr	r2, [pc, #76]	; (8004620 <HAL_TIM_Base_Stop_IT+0xcc>)
 80045d4:	4013      	ands	r3, r2
 80045d6:	d10d      	bne.n	80045f4 <HAL_TIM_Base_Stop_IT+0xa0>
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	6a1b      	ldr	r3, [r3, #32]
 80045de:	4a11      	ldr	r2, [pc, #68]	; (8004624 <HAL_TIM_Base_Stop_IT+0xd0>)
 80045e0:	4013      	ands	r3, r2
 80045e2:	d107      	bne.n	80045f4 <HAL_TIM_Base_Stop_IT+0xa0>
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	681a      	ldr	r2, [r3, #0]
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	2101      	movs	r1, #1
 80045f0:	438a      	bics	r2, r1
 80045f2:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80045f4:	2300      	movs	r3, #0
}
 80045f6:	0018      	movs	r0, r3
 80045f8:	46bd      	mov	sp, r7
 80045fa:	b002      	add	sp, #8
 80045fc:	bd80      	pop	{r7, pc}
 80045fe:	46c0      	nop			; (mov r8, r8)
 8004600:	40012c00 	.word	0x40012c00
 8004604:	40000400 	.word	0x40000400
 8004608:	40001000 	.word	0x40001000
 800460c:	40002000 	.word	0x40002000
 8004610:	40014000 	.word	0x40014000
 8004614:	40014400 	.word	0x40014400
 8004618:	40014800 	.word	0x40014800
 800461c:	080070bc 	.word	0x080070bc
 8004620:	00001111 	.word	0x00001111
 8004624:	00000444 	.word	0x00000444

08004628 <HAL_TIM_OC_Init>:
  *         parameters in the TIM_HandleTypeDef and create the associated handle.
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef* htim)
{
 8004628:	b580      	push	{r7, lr}
 800462a:	b082      	sub	sp, #8
 800462c:	af00      	add	r7, sp, #0
 800462e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if(htim == NULL)
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	2b00      	cmp	r3, #0
 8004634:	d101      	bne.n	800463a <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8004636:	2301      	movs	r3, #1
 8004638:	e091      	b.n	800475e <HAL_TIM_OC_Init+0x136>
  }

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	4a4a      	ldr	r2, [pc, #296]	; (8004768 <HAL_TIM_OC_Init+0x140>)
 8004640:	4293      	cmp	r3, r2
 8004642:	d02a      	beq.n	800469a <HAL_TIM_OC_Init+0x72>
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681a      	ldr	r2, [r3, #0]
 8004648:	2380      	movs	r3, #128	; 0x80
 800464a:	05db      	lsls	r3, r3, #23
 800464c:	429a      	cmp	r2, r3
 800464e:	d024      	beq.n	800469a <HAL_TIM_OC_Init+0x72>
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	4a45      	ldr	r2, [pc, #276]	; (800476c <HAL_TIM_OC_Init+0x144>)
 8004656:	4293      	cmp	r3, r2
 8004658:	d01f      	beq.n	800469a <HAL_TIM_OC_Init+0x72>
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	4a44      	ldr	r2, [pc, #272]	; (8004770 <HAL_TIM_OC_Init+0x148>)
 8004660:	4293      	cmp	r3, r2
 8004662:	d01a      	beq.n	800469a <HAL_TIM_OC_Init+0x72>
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	4a42      	ldr	r2, [pc, #264]	; (8004774 <HAL_TIM_OC_Init+0x14c>)
 800466a:	4293      	cmp	r3, r2
 800466c:	d015      	beq.n	800469a <HAL_TIM_OC_Init+0x72>
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	4a41      	ldr	r2, [pc, #260]	; (8004778 <HAL_TIM_OC_Init+0x150>)
 8004674:	4293      	cmp	r3, r2
 8004676:	d010      	beq.n	800469a <HAL_TIM_OC_Init+0x72>
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	4a3f      	ldr	r2, [pc, #252]	; (800477c <HAL_TIM_OC_Init+0x154>)
 800467e:	4293      	cmp	r3, r2
 8004680:	d00b      	beq.n	800469a <HAL_TIM_OC_Init+0x72>
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	4a3e      	ldr	r2, [pc, #248]	; (8004780 <HAL_TIM_OC_Init+0x158>)
 8004688:	4293      	cmp	r3, r2
 800468a:	d006      	beq.n	800469a <HAL_TIM_OC_Init+0x72>
 800468c:	23f5      	movs	r3, #245	; 0xf5
 800468e:	005a      	lsls	r2, r3, #1
 8004690:	4b3c      	ldr	r3, [pc, #240]	; (8004784 <HAL_TIM_OC_Init+0x15c>)
 8004692:	0011      	movs	r1, r2
 8004694:	0018      	movs	r0, r3
 8004696:	f7fc f96c 	bl	8000972 <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	689b      	ldr	r3, [r3, #8]
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d017      	beq.n	80046d2 <HAL_TIM_OC_Init+0xaa>
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	689b      	ldr	r3, [r3, #8]
 80046a6:	2b10      	cmp	r3, #16
 80046a8:	d013      	beq.n	80046d2 <HAL_TIM_OC_Init+0xaa>
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	689b      	ldr	r3, [r3, #8]
 80046ae:	2b20      	cmp	r3, #32
 80046b0:	d00f      	beq.n	80046d2 <HAL_TIM_OC_Init+0xaa>
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	689b      	ldr	r3, [r3, #8]
 80046b6:	2b40      	cmp	r3, #64	; 0x40
 80046b8:	d00b      	beq.n	80046d2 <HAL_TIM_OC_Init+0xaa>
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	689b      	ldr	r3, [r3, #8]
 80046be:	2b60      	cmp	r3, #96	; 0x60
 80046c0:	d007      	beq.n	80046d2 <HAL_TIM_OC_Init+0xaa>
 80046c2:	23ec      	movs	r3, #236	; 0xec
 80046c4:	33ff      	adds	r3, #255	; 0xff
 80046c6:	001a      	movs	r2, r3
 80046c8:	4b2e      	ldr	r3, [pc, #184]	; (8004784 <HAL_TIM_OC_Init+0x15c>)
 80046ca:	0011      	movs	r1, r2
 80046cc:	0018      	movs	r0, r3
 80046ce:	f7fc f950 	bl	8000972 <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	691b      	ldr	r3, [r3, #16]
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d012      	beq.n	8004700 <HAL_TIM_OC_Init+0xd8>
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	691a      	ldr	r2, [r3, #16]
 80046de:	2380      	movs	r3, #128	; 0x80
 80046e0:	005b      	lsls	r3, r3, #1
 80046e2:	429a      	cmp	r2, r3
 80046e4:	d00c      	beq.n	8004700 <HAL_TIM_OC_Init+0xd8>
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	691a      	ldr	r2, [r3, #16]
 80046ea:	2380      	movs	r3, #128	; 0x80
 80046ec:	009b      	lsls	r3, r3, #2
 80046ee:	429a      	cmp	r2, r3
 80046f0:	d006      	beq.n	8004700 <HAL_TIM_OC_Init+0xd8>
 80046f2:	23f6      	movs	r3, #246	; 0xf6
 80046f4:	005a      	lsls	r2, r3, #1
 80046f6:	4b23      	ldr	r3, [pc, #140]	; (8004784 <HAL_TIM_OC_Init+0x15c>)
 80046f8:	0011      	movs	r1, r2
 80046fa:	0018      	movs	r0, r3
 80046fc:	f7fc f939 	bl	8000972 <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	699b      	ldr	r3, [r3, #24]
 8004704:	2b00      	cmp	r3, #0
 8004706:	d00b      	beq.n	8004720 <HAL_TIM_OC_Init+0xf8>
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	699b      	ldr	r3, [r3, #24]
 800470c:	2b80      	cmp	r3, #128	; 0x80
 800470e:	d007      	beq.n	8004720 <HAL_TIM_OC_Init+0xf8>
 8004710:	23ee      	movs	r3, #238	; 0xee
 8004712:	33ff      	adds	r3, #255	; 0xff
 8004714:	001a      	movs	r2, r3
 8004716:	4b1b      	ldr	r3, [pc, #108]	; (8004784 <HAL_TIM_OC_Init+0x15c>)
 8004718:	0011      	movs	r1, r2
 800471a:	0018      	movs	r0, r3
 800471c:	f7fc f929 	bl	8000972 <assert_failed>

  if(htim->State == HAL_TIM_STATE_RESET)
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	223d      	movs	r2, #61	; 0x3d
 8004724:	5c9b      	ldrb	r3, [r3, r2]
 8004726:	b2db      	uxtb	r3, r3
 8004728:	2b00      	cmp	r3, #0
 800472a:	d107      	bne.n	800473c <HAL_TIM_OC_Init+0x114>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	223c      	movs	r2, #60	; 0x3c
 8004730:	2100      	movs	r1, #0
 8004732:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	0018      	movs	r0, r3
 8004738:	f000 f826 	bl	8004788 <HAL_TIM_OC_MspInit>
  }

  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	223d      	movs	r2, #61	; 0x3d
 8004740:	2102      	movs	r1, #2
 8004742:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681a      	ldr	r2, [r3, #0]
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	3304      	adds	r3, #4
 800474c:	0019      	movs	r1, r3
 800474e:	0010      	movs	r0, r2
 8004750:	f000 ff5e 	bl	8005610 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	223d      	movs	r2, #61	; 0x3d
 8004758:	2101      	movs	r1, #1
 800475a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800475c:	2300      	movs	r3, #0
}
 800475e:	0018      	movs	r0, r3
 8004760:	46bd      	mov	sp, r7
 8004762:	b002      	add	sp, #8
 8004764:	bd80      	pop	{r7, pc}
 8004766:	46c0      	nop			; (mov r8, r8)
 8004768:	40012c00 	.word	0x40012c00
 800476c:	40000400 	.word	0x40000400
 8004770:	40001000 	.word	0x40001000
 8004774:	40002000 	.word	0x40002000
 8004778:	40014000 	.word	0x40014000
 800477c:	40014400 	.word	0x40014400
 8004780:	40014800 	.word	0x40014800
 8004784:	080070bc 	.word	0x080070bc

08004788 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8004788:	b580      	push	{r7, lr}
 800478a:	b082      	sub	sp, #8
 800478c:	af00      	add	r7, sp, #0
 800478e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8004790:	46c0      	nop			; (mov r8, r8)
 8004792:	46bd      	mov	sp, r7
 8004794:	b002      	add	sp, #8
 8004796:	bd80      	pop	{r7, pc}

08004798 <HAL_TIM_OC_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected 
  * @retval HAL status
*/
HAL_StatusTypeDef HAL_TIM_OC_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004798:	b580      	push	{r7, lr}
 800479a:	b082      	sub	sp, #8
 800479c:	af00      	add	r7, sp, #0
 800479e:	6078      	str	r0, [r7, #4]
 80047a0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	4a49      	ldr	r2, [pc, #292]	; (80048cc <HAL_TIM_OC_Start+0x134>)
 80047a8:	4293      	cmp	r3, r2
 80047aa:	d10c      	bne.n	80047c6 <HAL_TIM_OC_Start+0x2e>
 80047ac:	683b      	ldr	r3, [r7, #0]
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d100      	bne.n	80047b4 <HAL_TIM_OC_Start+0x1c>
 80047b2:	e054      	b.n	800485e <HAL_TIM_OC_Start+0xc6>
 80047b4:	683b      	ldr	r3, [r7, #0]
 80047b6:	2b04      	cmp	r3, #4
 80047b8:	d051      	beq.n	800485e <HAL_TIM_OC_Start+0xc6>
 80047ba:	683b      	ldr	r3, [r7, #0]
 80047bc:	2b08      	cmp	r3, #8
 80047be:	d04e      	beq.n	800485e <HAL_TIM_OC_Start+0xc6>
 80047c0:	683b      	ldr	r3, [r7, #0]
 80047c2:	2b0c      	cmp	r3, #12
 80047c4:	d04b      	beq.n	800485e <HAL_TIM_OC_Start+0xc6>
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681a      	ldr	r2, [r3, #0]
 80047ca:	2380      	movs	r3, #128	; 0x80
 80047cc:	05db      	lsls	r3, r3, #23
 80047ce:	429a      	cmp	r2, r3
 80047d0:	d10b      	bne.n	80047ea <HAL_TIM_OC_Start+0x52>
 80047d2:	683b      	ldr	r3, [r7, #0]
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d042      	beq.n	800485e <HAL_TIM_OC_Start+0xc6>
 80047d8:	683b      	ldr	r3, [r7, #0]
 80047da:	2b04      	cmp	r3, #4
 80047dc:	d03f      	beq.n	800485e <HAL_TIM_OC_Start+0xc6>
 80047de:	683b      	ldr	r3, [r7, #0]
 80047e0:	2b08      	cmp	r3, #8
 80047e2:	d03c      	beq.n	800485e <HAL_TIM_OC_Start+0xc6>
 80047e4:	683b      	ldr	r3, [r7, #0]
 80047e6:	2b0c      	cmp	r3, #12
 80047e8:	d039      	beq.n	800485e <HAL_TIM_OC_Start+0xc6>
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	4a38      	ldr	r2, [pc, #224]	; (80048d0 <HAL_TIM_OC_Start+0x138>)
 80047f0:	4293      	cmp	r3, r2
 80047f2:	d10b      	bne.n	800480c <HAL_TIM_OC_Start+0x74>
 80047f4:	683b      	ldr	r3, [r7, #0]
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d031      	beq.n	800485e <HAL_TIM_OC_Start+0xc6>
 80047fa:	683b      	ldr	r3, [r7, #0]
 80047fc:	2b04      	cmp	r3, #4
 80047fe:	d02e      	beq.n	800485e <HAL_TIM_OC_Start+0xc6>
 8004800:	683b      	ldr	r3, [r7, #0]
 8004802:	2b08      	cmp	r3, #8
 8004804:	d02b      	beq.n	800485e <HAL_TIM_OC_Start+0xc6>
 8004806:	683b      	ldr	r3, [r7, #0]
 8004808:	2b0c      	cmp	r3, #12
 800480a:	d028      	beq.n	800485e <HAL_TIM_OC_Start+0xc6>
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	4a30      	ldr	r2, [pc, #192]	; (80048d4 <HAL_TIM_OC_Start+0x13c>)
 8004812:	4293      	cmp	r3, r2
 8004814:	d102      	bne.n	800481c <HAL_TIM_OC_Start+0x84>
 8004816:	683b      	ldr	r3, [r7, #0]
 8004818:	2b00      	cmp	r3, #0
 800481a:	d020      	beq.n	800485e <HAL_TIM_OC_Start+0xc6>
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	4a2d      	ldr	r2, [pc, #180]	; (80048d8 <HAL_TIM_OC_Start+0x140>)
 8004822:	4293      	cmp	r3, r2
 8004824:	d105      	bne.n	8004832 <HAL_TIM_OC_Start+0x9a>
 8004826:	683b      	ldr	r3, [r7, #0]
 8004828:	2b00      	cmp	r3, #0
 800482a:	d018      	beq.n	800485e <HAL_TIM_OC_Start+0xc6>
 800482c:	683b      	ldr	r3, [r7, #0]
 800482e:	2b04      	cmp	r3, #4
 8004830:	d015      	beq.n	800485e <HAL_TIM_OC_Start+0xc6>
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	4a29      	ldr	r2, [pc, #164]	; (80048dc <HAL_TIM_OC_Start+0x144>)
 8004838:	4293      	cmp	r3, r2
 800483a:	d102      	bne.n	8004842 <HAL_TIM_OC_Start+0xaa>
 800483c:	683b      	ldr	r3, [r7, #0]
 800483e:	2b00      	cmp	r3, #0
 8004840:	d00d      	beq.n	800485e <HAL_TIM_OC_Start+0xc6>
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	4a26      	ldr	r2, [pc, #152]	; (80048e0 <HAL_TIM_OC_Start+0x148>)
 8004848:	4293      	cmp	r3, r2
 800484a:	d102      	bne.n	8004852 <HAL_TIM_OC_Start+0xba>
 800484c:	683b      	ldr	r3, [r7, #0]
 800484e:	2b00      	cmp	r3, #0
 8004850:	d005      	beq.n	800485e <HAL_TIM_OC_Start+0xc6>
 8004852:	4a24      	ldr	r2, [pc, #144]	; (80048e4 <HAL_TIM_OC_Start+0x14c>)
 8004854:	4b24      	ldr	r3, [pc, #144]	; (80048e8 <HAL_TIM_OC_Start+0x150>)
 8004856:	0011      	movs	r1, r2
 8004858:	0018      	movs	r0, r3
 800485a:	f7fc f88a 	bl	8000972 <assert_failed>

  /* Enable the Output compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	6839      	ldr	r1, [r7, #0]
 8004864:	2201      	movs	r2, #1
 8004866:	0018      	movs	r0, r3
 8004868:	f001 fac8 	bl	8005dfc <TIM_CCxChannelCmd>

  if(IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	4a16      	ldr	r2, [pc, #88]	; (80048cc <HAL_TIM_OC_Start+0x134>)
 8004872:	4293      	cmp	r3, r2
 8004874:	d00e      	beq.n	8004894 <HAL_TIM_OC_Start+0xfc>
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	4a17      	ldr	r2, [pc, #92]	; (80048d8 <HAL_TIM_OC_Start+0x140>)
 800487c:	4293      	cmp	r3, r2
 800487e:	d009      	beq.n	8004894 <HAL_TIM_OC_Start+0xfc>
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	4a15      	ldr	r2, [pc, #84]	; (80048dc <HAL_TIM_OC_Start+0x144>)
 8004886:	4293      	cmp	r3, r2
 8004888:	d004      	beq.n	8004894 <HAL_TIM_OC_Start+0xfc>
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	4a14      	ldr	r2, [pc, #80]	; (80048e0 <HAL_TIM_OC_Start+0x148>)
 8004890:	4293      	cmp	r3, r2
 8004892:	d101      	bne.n	8004898 <HAL_TIM_OC_Start+0x100>
 8004894:	2301      	movs	r3, #1
 8004896:	e000      	b.n	800489a <HAL_TIM_OC_Start+0x102>
 8004898:	2300      	movs	r3, #0
 800489a:	2b00      	cmp	r3, #0
 800489c:	d008      	beq.n	80048b0 <HAL_TIM_OC_Start+0x118>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	2180      	movs	r1, #128	; 0x80
 80048aa:	0209      	lsls	r1, r1, #8
 80048ac:	430a      	orrs	r2, r1
 80048ae:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	681a      	ldr	r2, [r3, #0]
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	2101      	movs	r1, #1
 80048bc:	430a      	orrs	r2, r1
 80048be:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80048c0:	2300      	movs	r3, #0
}
 80048c2:	0018      	movs	r0, r3
 80048c4:	46bd      	mov	sp, r7
 80048c6:	b002      	add	sp, #8
 80048c8:	bd80      	pop	{r7, pc}
 80048ca:	46c0      	nop			; (mov r8, r8)
 80048cc:	40012c00 	.word	0x40012c00
 80048d0:	40000400 	.word	0x40000400
 80048d4:	40002000 	.word	0x40002000
 80048d8:	40014000 	.word	0x40014000
 80048dc:	40014400 	.word	0x40014400
 80048e0:	40014800 	.word	0x40014800
 80048e4:	0000024b 	.word	0x0000024b
 80048e8:	080070bc 	.word	0x080070bc

080048ec <HAL_TIM_OC_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
*/
HAL_StatusTypeDef HAL_TIM_OC_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80048ec:	b580      	push	{r7, lr}
 80048ee:	b082      	sub	sp, #8
 80048f0:	af00      	add	r7, sp, #0
 80048f2:	6078      	str	r0, [r7, #4]
 80048f4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	4a54      	ldr	r2, [pc, #336]	; (8004a4c <HAL_TIM_OC_Stop+0x160>)
 80048fc:	4293      	cmp	r3, r2
 80048fe:	d10c      	bne.n	800491a <HAL_TIM_OC_Stop+0x2e>
 8004900:	683b      	ldr	r3, [r7, #0]
 8004902:	2b00      	cmp	r3, #0
 8004904:	d100      	bne.n	8004908 <HAL_TIM_OC_Stop+0x1c>
 8004906:	e054      	b.n	80049b2 <HAL_TIM_OC_Stop+0xc6>
 8004908:	683b      	ldr	r3, [r7, #0]
 800490a:	2b04      	cmp	r3, #4
 800490c:	d051      	beq.n	80049b2 <HAL_TIM_OC_Stop+0xc6>
 800490e:	683b      	ldr	r3, [r7, #0]
 8004910:	2b08      	cmp	r3, #8
 8004912:	d04e      	beq.n	80049b2 <HAL_TIM_OC_Stop+0xc6>
 8004914:	683b      	ldr	r3, [r7, #0]
 8004916:	2b0c      	cmp	r3, #12
 8004918:	d04b      	beq.n	80049b2 <HAL_TIM_OC_Stop+0xc6>
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	681a      	ldr	r2, [r3, #0]
 800491e:	2380      	movs	r3, #128	; 0x80
 8004920:	05db      	lsls	r3, r3, #23
 8004922:	429a      	cmp	r2, r3
 8004924:	d10b      	bne.n	800493e <HAL_TIM_OC_Stop+0x52>
 8004926:	683b      	ldr	r3, [r7, #0]
 8004928:	2b00      	cmp	r3, #0
 800492a:	d042      	beq.n	80049b2 <HAL_TIM_OC_Stop+0xc6>
 800492c:	683b      	ldr	r3, [r7, #0]
 800492e:	2b04      	cmp	r3, #4
 8004930:	d03f      	beq.n	80049b2 <HAL_TIM_OC_Stop+0xc6>
 8004932:	683b      	ldr	r3, [r7, #0]
 8004934:	2b08      	cmp	r3, #8
 8004936:	d03c      	beq.n	80049b2 <HAL_TIM_OC_Stop+0xc6>
 8004938:	683b      	ldr	r3, [r7, #0]
 800493a:	2b0c      	cmp	r3, #12
 800493c:	d039      	beq.n	80049b2 <HAL_TIM_OC_Stop+0xc6>
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	4a43      	ldr	r2, [pc, #268]	; (8004a50 <HAL_TIM_OC_Stop+0x164>)
 8004944:	4293      	cmp	r3, r2
 8004946:	d10b      	bne.n	8004960 <HAL_TIM_OC_Stop+0x74>
 8004948:	683b      	ldr	r3, [r7, #0]
 800494a:	2b00      	cmp	r3, #0
 800494c:	d031      	beq.n	80049b2 <HAL_TIM_OC_Stop+0xc6>
 800494e:	683b      	ldr	r3, [r7, #0]
 8004950:	2b04      	cmp	r3, #4
 8004952:	d02e      	beq.n	80049b2 <HAL_TIM_OC_Stop+0xc6>
 8004954:	683b      	ldr	r3, [r7, #0]
 8004956:	2b08      	cmp	r3, #8
 8004958:	d02b      	beq.n	80049b2 <HAL_TIM_OC_Stop+0xc6>
 800495a:	683b      	ldr	r3, [r7, #0]
 800495c:	2b0c      	cmp	r3, #12
 800495e:	d028      	beq.n	80049b2 <HAL_TIM_OC_Stop+0xc6>
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	4a3b      	ldr	r2, [pc, #236]	; (8004a54 <HAL_TIM_OC_Stop+0x168>)
 8004966:	4293      	cmp	r3, r2
 8004968:	d102      	bne.n	8004970 <HAL_TIM_OC_Stop+0x84>
 800496a:	683b      	ldr	r3, [r7, #0]
 800496c:	2b00      	cmp	r3, #0
 800496e:	d020      	beq.n	80049b2 <HAL_TIM_OC_Stop+0xc6>
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	4a38      	ldr	r2, [pc, #224]	; (8004a58 <HAL_TIM_OC_Stop+0x16c>)
 8004976:	4293      	cmp	r3, r2
 8004978:	d105      	bne.n	8004986 <HAL_TIM_OC_Stop+0x9a>
 800497a:	683b      	ldr	r3, [r7, #0]
 800497c:	2b00      	cmp	r3, #0
 800497e:	d018      	beq.n	80049b2 <HAL_TIM_OC_Stop+0xc6>
 8004980:	683b      	ldr	r3, [r7, #0]
 8004982:	2b04      	cmp	r3, #4
 8004984:	d015      	beq.n	80049b2 <HAL_TIM_OC_Stop+0xc6>
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	4a34      	ldr	r2, [pc, #208]	; (8004a5c <HAL_TIM_OC_Stop+0x170>)
 800498c:	4293      	cmp	r3, r2
 800498e:	d102      	bne.n	8004996 <HAL_TIM_OC_Stop+0xaa>
 8004990:	683b      	ldr	r3, [r7, #0]
 8004992:	2b00      	cmp	r3, #0
 8004994:	d00d      	beq.n	80049b2 <HAL_TIM_OC_Stop+0xc6>
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	4a31      	ldr	r2, [pc, #196]	; (8004a60 <HAL_TIM_OC_Stop+0x174>)
 800499c:	4293      	cmp	r3, r2
 800499e:	d102      	bne.n	80049a6 <HAL_TIM_OC_Stop+0xba>
 80049a0:	683b      	ldr	r3, [r7, #0]
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d005      	beq.n	80049b2 <HAL_TIM_OC_Stop+0xc6>
 80049a6:	4a2f      	ldr	r2, [pc, #188]	; (8004a64 <HAL_TIM_OC_Stop+0x178>)
 80049a8:	4b2f      	ldr	r3, [pc, #188]	; (8004a68 <HAL_TIM_OC_Stop+0x17c>)
 80049aa:	0011      	movs	r1, r2
 80049ac:	0018      	movs	r0, r3
 80049ae:	f7fb ffe0 	bl	8000972 <assert_failed>

  /* Disable the Output compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	6839      	ldr	r1, [r7, #0]
 80049b8:	2200      	movs	r2, #0
 80049ba:	0018      	movs	r0, r3
 80049bc:	f001 fa1e 	bl	8005dfc <TIM_CCxChannelCmd>

  if(IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	4a21      	ldr	r2, [pc, #132]	; (8004a4c <HAL_TIM_OC_Stop+0x160>)
 80049c6:	4293      	cmp	r3, r2
 80049c8:	d00e      	beq.n	80049e8 <HAL_TIM_OC_Stop+0xfc>
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	4a22      	ldr	r2, [pc, #136]	; (8004a58 <HAL_TIM_OC_Stop+0x16c>)
 80049d0:	4293      	cmp	r3, r2
 80049d2:	d009      	beq.n	80049e8 <HAL_TIM_OC_Stop+0xfc>
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	4a20      	ldr	r2, [pc, #128]	; (8004a5c <HAL_TIM_OC_Stop+0x170>)
 80049da:	4293      	cmp	r3, r2
 80049dc:	d004      	beq.n	80049e8 <HAL_TIM_OC_Stop+0xfc>
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	4a1f      	ldr	r2, [pc, #124]	; (8004a60 <HAL_TIM_OC_Stop+0x174>)
 80049e4:	4293      	cmp	r3, r2
 80049e6:	d101      	bne.n	80049ec <HAL_TIM_OC_Stop+0x100>
 80049e8:	2301      	movs	r3, #1
 80049ea:	e000      	b.n	80049ee <HAL_TIM_OC_Stop+0x102>
 80049ec:	2300      	movs	r3, #0
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d013      	beq.n	8004a1a <HAL_TIM_OC_Stop+0x12e>
  {
    /* Disable the Main Ouput */
    __HAL_TIM_MOE_DISABLE(htim);
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	6a1b      	ldr	r3, [r3, #32]
 80049f8:	4a1c      	ldr	r2, [pc, #112]	; (8004a6c <HAL_TIM_OC_Stop+0x180>)
 80049fa:	4013      	ands	r3, r2
 80049fc:	d10d      	bne.n	8004a1a <HAL_TIM_OC_Stop+0x12e>
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	6a1b      	ldr	r3, [r3, #32]
 8004a04:	4a1a      	ldr	r2, [pc, #104]	; (8004a70 <HAL_TIM_OC_Stop+0x184>)
 8004a06:	4013      	ands	r3, r2
 8004a08:	d107      	bne.n	8004a1a <HAL_TIM_OC_Stop+0x12e>
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	4917      	ldr	r1, [pc, #92]	; (8004a74 <HAL_TIM_OC_Stop+0x188>)
 8004a16:	400a      	ands	r2, r1
 8004a18:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	6a1b      	ldr	r3, [r3, #32]
 8004a20:	4a12      	ldr	r2, [pc, #72]	; (8004a6c <HAL_TIM_OC_Stop+0x180>)
 8004a22:	4013      	ands	r3, r2
 8004a24:	d10d      	bne.n	8004a42 <HAL_TIM_OC_Stop+0x156>
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	6a1b      	ldr	r3, [r3, #32]
 8004a2c:	4a10      	ldr	r2, [pc, #64]	; (8004a70 <HAL_TIM_OC_Stop+0x184>)
 8004a2e:	4013      	ands	r3, r2
 8004a30:	d107      	bne.n	8004a42 <HAL_TIM_OC_Stop+0x156>
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	681a      	ldr	r2, [r3, #0]
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	2101      	movs	r1, #1
 8004a3e:	438a      	bics	r2, r1
 8004a40:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8004a42:	2300      	movs	r3, #0
}
 8004a44:	0018      	movs	r0, r3
 8004a46:	46bd      	mov	sp, r7
 8004a48:	b002      	add	sp, #8
 8004a4a:	bd80      	pop	{r7, pc}
 8004a4c:	40012c00 	.word	0x40012c00
 8004a50:	40000400 	.word	0x40000400
 8004a54:	40002000 	.word	0x40002000
 8004a58:	40014000 	.word	0x40014000
 8004a5c:	40014400 	.word	0x40014400
 8004a60:	40014800 	.word	0x40014800
 8004a64:	0000026b 	.word	0x0000026b
 8004a68:	080070bc 	.word	0x080070bc
 8004a6c:	00001111 	.word	0x00001111
 8004a70:	00000444 	.word	0x00000444
 8004a74:	ffff7fff 	.word	0xffff7fff

08004a78 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004a78:	b580      	push	{r7, lr}
 8004a7a:	b082      	sub	sp, #8
 8004a7c:	af00      	add	r7, sp, #0
 8004a7e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	691b      	ldr	r3, [r3, #16]
 8004a86:	2202      	movs	r2, #2
 8004a88:	4013      	ands	r3, r2
 8004a8a:	2b02      	cmp	r3, #2
 8004a8c:	d124      	bne.n	8004ad8 <HAL_TIM_IRQHandler+0x60>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	68db      	ldr	r3, [r3, #12]
 8004a94:	2202      	movs	r2, #2
 8004a96:	4013      	ands	r3, r2
 8004a98:	2b02      	cmp	r3, #2
 8004a9a:	d11d      	bne.n	8004ad8 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	2203      	movs	r2, #3
 8004aa2:	4252      	negs	r2, r2
 8004aa4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	2201      	movs	r2, #1
 8004aaa:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	699b      	ldr	r3, [r3, #24]
 8004ab2:	2203      	movs	r2, #3
 8004ab4:	4013      	ands	r3, r2
 8004ab6:	d004      	beq.n	8004ac2 <HAL_TIM_IRQHandler+0x4a>
        {
          HAL_TIM_IC_CaptureCallback(htim);
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	0018      	movs	r0, r3
 8004abc:	f000 fd90 	bl	80055e0 <HAL_TIM_IC_CaptureCallback>
 8004ac0:	e007      	b.n	8004ad2 <HAL_TIM_IRQHandler+0x5a>
        }
        /* Output compare event */
        else
        {
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	0018      	movs	r0, r3
 8004ac6:	f000 fd83 	bl	80055d0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	0018      	movs	r0, r3
 8004ace:	f000 fd8f 	bl	80055f0 <HAL_TIM_PWM_PulseFinishedCallback>
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	2200      	movs	r2, #0
 8004ad6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	691b      	ldr	r3, [r3, #16]
 8004ade:	2204      	movs	r2, #4
 8004ae0:	4013      	ands	r3, r2
 8004ae2:	2b04      	cmp	r3, #4
 8004ae4:	d125      	bne.n	8004b32 <HAL_TIM_IRQHandler+0xba>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	68db      	ldr	r3, [r3, #12]
 8004aec:	2204      	movs	r2, #4
 8004aee:	4013      	ands	r3, r2
 8004af0:	2b04      	cmp	r3, #4
 8004af2:	d11e      	bne.n	8004b32 <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	2205      	movs	r2, #5
 8004afa:	4252      	negs	r2, r2
 8004afc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	2202      	movs	r2, #2
 8004b02:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	699a      	ldr	r2, [r3, #24]
 8004b0a:	23c0      	movs	r3, #192	; 0xc0
 8004b0c:	009b      	lsls	r3, r3, #2
 8004b0e:	4013      	ands	r3, r2
 8004b10:	d004      	beq.n	8004b1c <HAL_TIM_IRQHandler+0xa4>
      {
        HAL_TIM_IC_CaptureCallback(htim);
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	0018      	movs	r0, r3
 8004b16:	f000 fd63 	bl	80055e0 <HAL_TIM_IC_CaptureCallback>
 8004b1a:	e007      	b.n	8004b2c <HAL_TIM_IRQHandler+0xb4>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	0018      	movs	r0, r3
 8004b20:	f000 fd56 	bl	80055d0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	0018      	movs	r0, r3
 8004b28:	f000 fd62 	bl	80055f0 <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	2200      	movs	r2, #0
 8004b30:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	691b      	ldr	r3, [r3, #16]
 8004b38:	2208      	movs	r2, #8
 8004b3a:	4013      	ands	r3, r2
 8004b3c:	2b08      	cmp	r3, #8
 8004b3e:	d124      	bne.n	8004b8a <HAL_TIM_IRQHandler+0x112>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	68db      	ldr	r3, [r3, #12]
 8004b46:	2208      	movs	r2, #8
 8004b48:	4013      	ands	r3, r2
 8004b4a:	2b08      	cmp	r3, #8
 8004b4c:	d11d      	bne.n	8004b8a <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	2209      	movs	r2, #9
 8004b54:	4252      	negs	r2, r2
 8004b56:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	2204      	movs	r2, #4
 8004b5c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	69db      	ldr	r3, [r3, #28]
 8004b64:	2203      	movs	r2, #3
 8004b66:	4013      	ands	r3, r2
 8004b68:	d004      	beq.n	8004b74 <HAL_TIM_IRQHandler+0xfc>
      {
        HAL_TIM_IC_CaptureCallback(htim);
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	0018      	movs	r0, r3
 8004b6e:	f000 fd37 	bl	80055e0 <HAL_TIM_IC_CaptureCallback>
 8004b72:	e007      	b.n	8004b84 <HAL_TIM_IRQHandler+0x10c>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	0018      	movs	r0, r3
 8004b78:	f000 fd2a 	bl	80055d0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	0018      	movs	r0, r3
 8004b80:	f000 fd36 	bl	80055f0 <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	2200      	movs	r2, #0
 8004b88:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	691b      	ldr	r3, [r3, #16]
 8004b90:	2210      	movs	r2, #16
 8004b92:	4013      	ands	r3, r2
 8004b94:	2b10      	cmp	r3, #16
 8004b96:	d125      	bne.n	8004be4 <HAL_TIM_IRQHandler+0x16c>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	68db      	ldr	r3, [r3, #12]
 8004b9e:	2210      	movs	r2, #16
 8004ba0:	4013      	ands	r3, r2
 8004ba2:	2b10      	cmp	r3, #16
 8004ba4:	d11e      	bne.n	8004be4 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	2211      	movs	r2, #17
 8004bac:	4252      	negs	r2, r2
 8004bae:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	2208      	movs	r2, #8
 8004bb4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	69da      	ldr	r2, [r3, #28]
 8004bbc:	23c0      	movs	r3, #192	; 0xc0
 8004bbe:	009b      	lsls	r3, r3, #2
 8004bc0:	4013      	ands	r3, r2
 8004bc2:	d004      	beq.n	8004bce <HAL_TIM_IRQHandler+0x156>
      {
        HAL_TIM_IC_CaptureCallback(htim);
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	0018      	movs	r0, r3
 8004bc8:	f000 fd0a 	bl	80055e0 <HAL_TIM_IC_CaptureCallback>
 8004bcc:	e007      	b.n	8004bde <HAL_TIM_IRQHandler+0x166>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	0018      	movs	r0, r3
 8004bd2:	f000 fcfd 	bl	80055d0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	0018      	movs	r0, r3
 8004bda:	f000 fd09 	bl	80055f0 <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	2200      	movs	r2, #0
 8004be2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	691b      	ldr	r3, [r3, #16]
 8004bea:	2201      	movs	r2, #1
 8004bec:	4013      	ands	r3, r2
 8004bee:	2b01      	cmp	r3, #1
 8004bf0:	d10f      	bne.n	8004c12 <HAL_TIM_IRQHandler+0x19a>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) !=RESET)
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	68db      	ldr	r3, [r3, #12]
 8004bf8:	2201      	movs	r2, #1
 8004bfa:	4013      	ands	r3, r2
 8004bfc:	2b01      	cmp	r3, #1
 8004bfe:	d108      	bne.n	8004c12 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	2202      	movs	r2, #2
 8004c06:	4252      	negs	r2, r2
 8004c08:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	0018      	movs	r0, r3
 8004c0e:	f000 fcd7 	bl	80055c0 <HAL_TIM_PeriodElapsedCallback>
    }
  }
  /* TIM Break input event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	691b      	ldr	r3, [r3, #16]
 8004c18:	2280      	movs	r2, #128	; 0x80
 8004c1a:	4013      	ands	r3, r2
 8004c1c:	2b80      	cmp	r3, #128	; 0x80
 8004c1e:	d10f      	bne.n	8004c40 <HAL_TIM_IRQHandler+0x1c8>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	68db      	ldr	r3, [r3, #12]
 8004c26:	2280      	movs	r2, #128	; 0x80
 8004c28:	4013      	ands	r3, r2
 8004c2a:	2b80      	cmp	r3, #128	; 0x80
 8004c2c:	d108      	bne.n	8004c40 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	2281      	movs	r2, #129	; 0x81
 8004c34:	4252      	negs	r2, r2
 8004c36:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	0018      	movs	r0, r3
 8004c3c:	f001 fbe4 	bl	8006408 <HAL_TIMEx_BreakCallback>
    }
  }
  /* TIM Trigger detection event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	691b      	ldr	r3, [r3, #16]
 8004c46:	2240      	movs	r2, #64	; 0x40
 8004c48:	4013      	ands	r3, r2
 8004c4a:	2b40      	cmp	r3, #64	; 0x40
 8004c4c:	d10f      	bne.n	8004c6e <HAL_TIM_IRQHandler+0x1f6>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) !=RESET)
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	68db      	ldr	r3, [r3, #12]
 8004c54:	2240      	movs	r2, #64	; 0x40
 8004c56:	4013      	ands	r3, r2
 8004c58:	2b40      	cmp	r3, #64	; 0x40
 8004c5a:	d108      	bne.n	8004c6e <HAL_TIM_IRQHandler+0x1f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	2241      	movs	r2, #65	; 0x41
 8004c62:	4252      	negs	r2, r2
 8004c64:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	0018      	movs	r0, r3
 8004c6a:	f000 fcc9 	bl	8005600 <HAL_TIM_TriggerCallback>
    }
  }
  /* TIM commutation event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	691b      	ldr	r3, [r3, #16]
 8004c74:	2220      	movs	r2, #32
 8004c76:	4013      	ands	r3, r2
 8004c78:	2b20      	cmp	r3, #32
 8004c7a:	d10f      	bne.n	8004c9c <HAL_TIM_IRQHandler+0x224>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	68db      	ldr	r3, [r3, #12]
 8004c82:	2220      	movs	r2, #32
 8004c84:	4013      	ands	r3, r2
 8004c86:	2b20      	cmp	r3, #32
 8004c88:	d108      	bne.n	8004c9c <HAL_TIM_IRQHandler+0x224>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	2221      	movs	r2, #33	; 0x21
 8004c90:	4252      	negs	r2, r2
 8004c92:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutationCallback(htim);
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	0018      	movs	r0, r3
 8004c98:	f001 fbae 	bl	80063f8 <HAL_TIMEx_CommutationCallback>
    }
  }
}
 8004c9c:	46c0      	nop			; (mov r8, r8)
 8004c9e:	46bd      	mov	sp, r7
 8004ca0:	b002      	add	sp, #8
 8004ca2:	bd80      	pop	{r7, pc}

08004ca4 <HAL_TIM_OC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_OC_InitTypeDef* sConfig, uint32_t Channel)
{
 8004ca4:	b580      	push	{r7, lr}
 8004ca6:	b084      	sub	sp, #16
 8004ca8:	af00      	add	r7, sp, #0
 8004caa:	60f8      	str	r0, [r7, #12]
 8004cac:	60b9      	str	r1, [r7, #8]
 8004cae:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_CHANNELS(Channel));
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d011      	beq.n	8004cda <HAL_TIM_OC_ConfigChannel+0x36>
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	2b04      	cmp	r3, #4
 8004cba:	d00e      	beq.n	8004cda <HAL_TIM_OC_ConfigChannel+0x36>
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	2b08      	cmp	r3, #8
 8004cc0:	d00b      	beq.n	8004cda <HAL_TIM_OC_ConfigChannel+0x36>
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	2b0c      	cmp	r3, #12
 8004cc6:	d008      	beq.n	8004cda <HAL_TIM_OC_ConfigChannel+0x36>
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	2b18      	cmp	r3, #24
 8004ccc:	d005      	beq.n	8004cda <HAL_TIM_OC_ConfigChannel+0x36>
 8004cce:	4a76      	ldr	r2, [pc, #472]	; (8004ea8 <HAL_TIM_OC_ConfigChannel+0x204>)
 8004cd0:	4b76      	ldr	r3, [pc, #472]	; (8004eac <HAL_TIM_OC_ConfigChannel+0x208>)
 8004cd2:	0011      	movs	r1, r2
 8004cd4:	0018      	movs	r0, r3
 8004cd6:	f7fb fe4c 	bl	8000972 <assert_failed>
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
 8004cda:	68bb      	ldr	r3, [r7, #8]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d019      	beq.n	8004d16 <HAL_TIM_OC_ConfigChannel+0x72>
 8004ce2:	68bb      	ldr	r3, [r7, #8]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	2b10      	cmp	r3, #16
 8004ce8:	d015      	beq.n	8004d16 <HAL_TIM_OC_ConfigChannel+0x72>
 8004cea:	68bb      	ldr	r3, [r7, #8]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	2b20      	cmp	r3, #32
 8004cf0:	d011      	beq.n	8004d16 <HAL_TIM_OC_ConfigChannel+0x72>
 8004cf2:	68bb      	ldr	r3, [r7, #8]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	2b30      	cmp	r3, #48	; 0x30
 8004cf8:	d00d      	beq.n	8004d16 <HAL_TIM_OC_ConfigChannel+0x72>
 8004cfa:	68bb      	ldr	r3, [r7, #8]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	2b50      	cmp	r3, #80	; 0x50
 8004d00:	d009      	beq.n	8004d16 <HAL_TIM_OC_ConfigChannel+0x72>
 8004d02:	68bb      	ldr	r3, [r7, #8]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	2b40      	cmp	r3, #64	; 0x40
 8004d08:	d005      	beq.n	8004d16 <HAL_TIM_OC_ConfigChannel+0x72>
 8004d0a:	4a69      	ldr	r2, [pc, #420]	; (8004eb0 <HAL_TIM_OC_ConfigChannel+0x20c>)
 8004d0c:	4b67      	ldr	r3, [pc, #412]	; (8004eac <HAL_TIM_OC_ConfigChannel+0x208>)
 8004d0e:	0011      	movs	r1, r2
 8004d10:	0018      	movs	r0, r3
 8004d12:	f7fb fe2e 	bl	8000972 <assert_failed>
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
 8004d16:	68bb      	ldr	r3, [r7, #8]
 8004d18:	689b      	ldr	r3, [r3, #8]
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d009      	beq.n	8004d32 <HAL_TIM_OC_ConfigChannel+0x8e>
 8004d1e:	68bb      	ldr	r3, [r7, #8]
 8004d20:	689b      	ldr	r3, [r3, #8]
 8004d22:	2b02      	cmp	r3, #2
 8004d24:	d005      	beq.n	8004d32 <HAL_TIM_OC_ConfigChannel+0x8e>
 8004d26:	4a63      	ldr	r2, [pc, #396]	; (8004eb4 <HAL_TIM_OC_ConfigChannel+0x210>)
 8004d28:	4b60      	ldr	r3, [pc, #384]	; (8004eac <HAL_TIM_OC_ConfigChannel+0x208>)
 8004d2a:	0011      	movs	r1, r2
 8004d2c:	0018      	movs	r0, r3
 8004d2e:	f7fb fe20 	bl	8000972 <assert_failed>

  /* Check input state */
  __HAL_LOCK(htim);
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	223c      	movs	r2, #60	; 0x3c
 8004d36:	5c9b      	ldrb	r3, [r3, r2]
 8004d38:	2b01      	cmp	r3, #1
 8004d3a:	d101      	bne.n	8004d40 <HAL_TIM_OC_ConfigChannel+0x9c>
 8004d3c:	2302      	movs	r3, #2
 8004d3e:	e0ae      	b.n	8004e9e <HAL_TIM_OC_ConfigChannel+0x1fa>
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	223c      	movs	r2, #60	; 0x3c
 8004d44:	2101      	movs	r1, #1
 8004d46:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	223d      	movs	r2, #61	; 0x3d
 8004d4c:	2102      	movs	r1, #2
 8004d4e:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	2b04      	cmp	r3, #4
 8004d54:	d03b      	beq.n	8004dce <HAL_TIM_OC_ConfigChannel+0x12a>
 8004d56:	d802      	bhi.n	8004d5e <HAL_TIM_OC_ConfigChannel+0xba>
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d006      	beq.n	8004d6a <HAL_TIM_OC_ConfigChannel+0xc6>
       TIM_OC4_SetConfig(htim->Instance, sConfig);
    }
    break;

    default:
    break;
 8004d5c:	e096      	b.n	8004e8c <HAL_TIM_OC_ConfigChannel+0x1e8>
  switch (Channel)
 8004d5e:	2b08      	cmp	r3, #8
 8004d60:	d058      	beq.n	8004e14 <HAL_TIM_OC_ConfigChannel+0x170>
 8004d62:	2b0c      	cmp	r3, #12
 8004d64:	d100      	bne.n	8004d68 <HAL_TIM_OC_ConfigChannel+0xc4>
 8004d66:	e073      	b.n	8004e50 <HAL_TIM_OC_ConfigChannel+0x1ac>
    break;
 8004d68:	e090      	b.n	8004e8c <HAL_TIM_OC_ConfigChannel+0x1e8>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	4a52      	ldr	r2, [pc, #328]	; (8004eb8 <HAL_TIM_OC_ConfigChannel+0x214>)
 8004d70:	4293      	cmp	r3, r2
 8004d72:	d024      	beq.n	8004dbe <HAL_TIM_OC_ConfigChannel+0x11a>
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	681a      	ldr	r2, [r3, #0]
 8004d78:	2380      	movs	r3, #128	; 0x80
 8004d7a:	05db      	lsls	r3, r3, #23
 8004d7c:	429a      	cmp	r2, r3
 8004d7e:	d01e      	beq.n	8004dbe <HAL_TIM_OC_ConfigChannel+0x11a>
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	4a4d      	ldr	r2, [pc, #308]	; (8004ebc <HAL_TIM_OC_ConfigChannel+0x218>)
 8004d86:	4293      	cmp	r3, r2
 8004d88:	d019      	beq.n	8004dbe <HAL_TIM_OC_ConfigChannel+0x11a>
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	4a4c      	ldr	r2, [pc, #304]	; (8004ec0 <HAL_TIM_OC_ConfigChannel+0x21c>)
 8004d90:	4293      	cmp	r3, r2
 8004d92:	d014      	beq.n	8004dbe <HAL_TIM_OC_ConfigChannel+0x11a>
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	4a4a      	ldr	r2, [pc, #296]	; (8004ec4 <HAL_TIM_OC_ConfigChannel+0x220>)
 8004d9a:	4293      	cmp	r3, r2
 8004d9c:	d00f      	beq.n	8004dbe <HAL_TIM_OC_ConfigChannel+0x11a>
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	4a49      	ldr	r2, [pc, #292]	; (8004ec8 <HAL_TIM_OC_ConfigChannel+0x224>)
 8004da4:	4293      	cmp	r3, r2
 8004da6:	d00a      	beq.n	8004dbe <HAL_TIM_OC_ConfigChannel+0x11a>
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	4a47      	ldr	r2, [pc, #284]	; (8004ecc <HAL_TIM_OC_ConfigChannel+0x228>)
 8004dae:	4293      	cmp	r3, r2
 8004db0:	d005      	beq.n	8004dbe <HAL_TIM_OC_ConfigChannel+0x11a>
 8004db2:	4a47      	ldr	r2, [pc, #284]	; (8004ed0 <HAL_TIM_OC_ConfigChannel+0x22c>)
 8004db4:	4b3d      	ldr	r3, [pc, #244]	; (8004eac <HAL_TIM_OC_ConfigChannel+0x208>)
 8004db6:	0011      	movs	r1, r2
 8004db8:	0018      	movs	r0, r3
 8004dba:	f7fb fdda 	bl	8000972 <assert_failed>
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	68ba      	ldr	r2, [r7, #8]
 8004dc4:	0011      	movs	r1, r2
 8004dc6:	0018      	movs	r0, r3
 8004dc8:	f000 fca4 	bl	8005714 <TIM_OC1_SetConfig>
    break;
 8004dcc:	e05e      	b.n	8004e8c <HAL_TIM_OC_ConfigChannel+0x1e8>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	4a39      	ldr	r2, [pc, #228]	; (8004eb8 <HAL_TIM_OC_ConfigChannel+0x214>)
 8004dd4:	4293      	cmp	r3, r2
 8004dd6:	d015      	beq.n	8004e04 <HAL_TIM_OC_ConfigChannel+0x160>
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	681a      	ldr	r2, [r3, #0]
 8004ddc:	2380      	movs	r3, #128	; 0x80
 8004dde:	05db      	lsls	r3, r3, #23
 8004de0:	429a      	cmp	r2, r3
 8004de2:	d00f      	beq.n	8004e04 <HAL_TIM_OC_ConfigChannel+0x160>
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	4a34      	ldr	r2, [pc, #208]	; (8004ebc <HAL_TIM_OC_ConfigChannel+0x218>)
 8004dea:	4293      	cmp	r3, r2
 8004dec:	d00a      	beq.n	8004e04 <HAL_TIM_OC_ConfigChannel+0x160>
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	4a34      	ldr	r2, [pc, #208]	; (8004ec4 <HAL_TIM_OC_ConfigChannel+0x220>)
 8004df4:	4293      	cmp	r3, r2
 8004df6:	d005      	beq.n	8004e04 <HAL_TIM_OC_ConfigChannel+0x160>
 8004df8:	4a36      	ldr	r2, [pc, #216]	; (8004ed4 <HAL_TIM_OC_ConfigChannel+0x230>)
 8004dfa:	4b2c      	ldr	r3, [pc, #176]	; (8004eac <HAL_TIM_OC_ConfigChannel+0x208>)
 8004dfc:	0011      	movs	r1, r2
 8004dfe:	0018      	movs	r0, r3
 8004e00:	f7fb fdb7 	bl	8000972 <assert_failed>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	68ba      	ldr	r2, [r7, #8]
 8004e0a:	0011      	movs	r1, r2
 8004e0c:	0018      	movs	r0, r3
 8004e0e:	f000 fd45 	bl	800589c <TIM_OC2_SetConfig>
    break;
 8004e12:	e03b      	b.n	8004e8c <HAL_TIM_OC_ConfigChannel+0x1e8>
       assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	4a27      	ldr	r2, [pc, #156]	; (8004eb8 <HAL_TIM_OC_ConfigChannel+0x214>)
 8004e1a:	4293      	cmp	r3, r2
 8004e1c:	d010      	beq.n	8004e40 <HAL_TIM_OC_ConfigChannel+0x19c>
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	681a      	ldr	r2, [r3, #0]
 8004e22:	2380      	movs	r3, #128	; 0x80
 8004e24:	05db      	lsls	r3, r3, #23
 8004e26:	429a      	cmp	r2, r3
 8004e28:	d00a      	beq.n	8004e40 <HAL_TIM_OC_ConfigChannel+0x19c>
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	4a23      	ldr	r2, [pc, #140]	; (8004ebc <HAL_TIM_OC_ConfigChannel+0x218>)
 8004e30:	4293      	cmp	r3, r2
 8004e32:	d005      	beq.n	8004e40 <HAL_TIM_OC_ConfigChannel+0x19c>
 8004e34:	4a28      	ldr	r2, [pc, #160]	; (8004ed8 <HAL_TIM_OC_ConfigChannel+0x234>)
 8004e36:	4b1d      	ldr	r3, [pc, #116]	; (8004eac <HAL_TIM_OC_ConfigChannel+0x208>)
 8004e38:	0011      	movs	r1, r2
 8004e3a:	0018      	movs	r0, r3
 8004e3c:	f7fb fd99 	bl	8000972 <assert_failed>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	68ba      	ldr	r2, [r7, #8]
 8004e46:	0011      	movs	r1, r2
 8004e48:	0018      	movs	r0, r3
 8004e4a:	f000 fde7 	bl	8005a1c <TIM_OC3_SetConfig>
    break;
 8004e4e:	e01d      	b.n	8004e8c <HAL_TIM_OC_ConfigChannel+0x1e8>
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	4a18      	ldr	r2, [pc, #96]	; (8004eb8 <HAL_TIM_OC_ConfigChannel+0x214>)
 8004e56:	4293      	cmp	r3, r2
 8004e58:	d010      	beq.n	8004e7c <HAL_TIM_OC_ConfigChannel+0x1d8>
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	681a      	ldr	r2, [r3, #0]
 8004e5e:	2380      	movs	r3, #128	; 0x80
 8004e60:	05db      	lsls	r3, r3, #23
 8004e62:	429a      	cmp	r2, r3
 8004e64:	d00a      	beq.n	8004e7c <HAL_TIM_OC_ConfigChannel+0x1d8>
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	4a14      	ldr	r2, [pc, #80]	; (8004ebc <HAL_TIM_OC_ConfigChannel+0x218>)
 8004e6c:	4293      	cmp	r3, r2
 8004e6e:	d005      	beq.n	8004e7c <HAL_TIM_OC_ConfigChannel+0x1d8>
 8004e70:	4a1a      	ldr	r2, [pc, #104]	; (8004edc <HAL_TIM_OC_ConfigChannel+0x238>)
 8004e72:	4b0e      	ldr	r3, [pc, #56]	; (8004eac <HAL_TIM_OC_ConfigChannel+0x208>)
 8004e74:	0011      	movs	r1, r2
 8004e76:	0018      	movs	r0, r3
 8004e78:	f7fb fd7b 	bl	8000972 <assert_failed>
       TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	68ba      	ldr	r2, [r7, #8]
 8004e82:	0011      	movs	r1, r2
 8004e84:	0018      	movs	r0, r3
 8004e86:	f000 fe8b 	bl	8005ba0 <TIM_OC4_SetConfig>
    break;
 8004e8a:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	223d      	movs	r2, #61	; 0x3d
 8004e90:	2101      	movs	r1, #1
 8004e92:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	223c      	movs	r2, #60	; 0x3c
 8004e98:	2100      	movs	r1, #0
 8004e9a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004e9c:	2300      	movs	r3, #0
}
 8004e9e:	0018      	movs	r0, r3
 8004ea0:	46bd      	mov	sp, r7
 8004ea2:	b004      	add	sp, #16
 8004ea4:	bd80      	pop	{r7, pc}
 8004ea6:	46c0      	nop			; (mov r8, r8)
 8004ea8:	00000b77 	.word	0x00000b77
 8004eac:	080070bc 	.word	0x080070bc
 8004eb0:	00000b78 	.word	0x00000b78
 8004eb4:	00000b79 	.word	0x00000b79
 8004eb8:	40012c00 	.word	0x40012c00
 8004ebc:	40000400 	.word	0x40000400
 8004ec0:	40002000 	.word	0x40002000
 8004ec4:	40014000 	.word	0x40014000
 8004ec8:	40014400 	.word	0x40014400
 8004ecc:	40014800 	.word	0x40014800
 8004ed0:	00000b84 	.word	0x00000b84
 8004ed4:	00000b8c 	.word	0x00000b8c
 8004ed8:	00000b94 	.word	0x00000b94
 8004edc:	00000b9c 	.word	0x00000b9c

08004ee0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */ 
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef * sClockSourceConfig)
{
 8004ee0:	b580      	push	{r7, lr}
 8004ee2:	b084      	sub	sp, #16
 8004ee4:	af00      	add	r7, sp, #0
 8004ee6:	6078      	str	r0, [r7, #4]
 8004ee8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr = 0U;
 8004eea:	2300      	movs	r3, #0
 8004eec:	60fb      	str	r3, [r7, #12]

  /* Process Locked */
  __HAL_LOCK(htim);
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	223c      	movs	r2, #60	; 0x3c
 8004ef2:	5c9b      	ldrb	r3, [r3, r2]
 8004ef4:	2b01      	cmp	r3, #1
 8004ef6:	d102      	bne.n	8004efe <HAL_TIM_ConfigClockSource+0x1e>
 8004ef8:	2302      	movs	r3, #2
 8004efa:	f000 fb52 	bl	80055a2 <HAL_TIM_ConfigClockSource+0x6c2>
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	223c      	movs	r2, #60	; 0x3c
 8004f02:	2101      	movs	r1, #1
 8004f04:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	223d      	movs	r2, #61	; 0x3d
 8004f0a:	2102      	movs	r1, #2
 8004f0c:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));
 8004f0e:	683b      	ldr	r3, [r7, #0]
 8004f10:	681a      	ldr	r2, [r3, #0]
 8004f12:	2380      	movs	r3, #128	; 0x80
 8004f14:	015b      	lsls	r3, r3, #5
 8004f16:	429a      	cmp	r2, r3
 8004f18:	d02b      	beq.n	8004f72 <HAL_TIM_ConfigClockSource+0x92>
 8004f1a:	683b      	ldr	r3, [r7, #0]
 8004f1c:	681a      	ldr	r2, [r3, #0]
 8004f1e:	2380      	movs	r3, #128	; 0x80
 8004f20:	019b      	lsls	r3, r3, #6
 8004f22:	429a      	cmp	r2, r3
 8004f24:	d025      	beq.n	8004f72 <HAL_TIM_ConfigClockSource+0x92>
 8004f26:	683b      	ldr	r3, [r7, #0]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d021      	beq.n	8004f72 <HAL_TIM_ConfigClockSource+0x92>
 8004f2e:	683b      	ldr	r3, [r7, #0]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	2b10      	cmp	r3, #16
 8004f34:	d01d      	beq.n	8004f72 <HAL_TIM_ConfigClockSource+0x92>
 8004f36:	683b      	ldr	r3, [r7, #0]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	2b20      	cmp	r3, #32
 8004f3c:	d019      	beq.n	8004f72 <HAL_TIM_ConfigClockSource+0x92>
 8004f3e:	683b      	ldr	r3, [r7, #0]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	2b30      	cmp	r3, #48	; 0x30
 8004f44:	d015      	beq.n	8004f72 <HAL_TIM_ConfigClockSource+0x92>
 8004f46:	683b      	ldr	r3, [r7, #0]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	2b40      	cmp	r3, #64	; 0x40
 8004f4c:	d011      	beq.n	8004f72 <HAL_TIM_ConfigClockSource+0x92>
 8004f4e:	683b      	ldr	r3, [r7, #0]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	2b50      	cmp	r3, #80	; 0x50
 8004f54:	d00d      	beq.n	8004f72 <HAL_TIM_ConfigClockSource+0x92>
 8004f56:	683b      	ldr	r3, [r7, #0]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	2b60      	cmp	r3, #96	; 0x60
 8004f5c:	d009      	beq.n	8004f72 <HAL_TIM_ConfigClockSource+0x92>
 8004f5e:	683b      	ldr	r3, [r7, #0]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	2b70      	cmp	r3, #112	; 0x70
 8004f64:	d005      	beq.n	8004f72 <HAL_TIM_ConfigClockSource+0x92>
 8004f66:	4aab      	ldr	r2, [pc, #684]	; (8005214 <HAL_TIM_ConfigClockSource+0x334>)
 8004f68:	4bab      	ldr	r3, [pc, #684]	; (8005218 <HAL_TIM_ConfigClockSource+0x338>)
 8004f6a:	0011      	movs	r1, r2
 8004f6c:	0018      	movs	r0, r3
 8004f6e:	f7fb fd00 	bl	8000972 <assert_failed>

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	689b      	ldr	r3, [r3, #8]
 8004f78:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	2277      	movs	r2, #119	; 0x77
 8004f7e:	4393      	bics	r3, r2
 8004f80:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	4aa5      	ldr	r2, [pc, #660]	; (800521c <HAL_TIM_ConfigClockSource+0x33c>)
 8004f86:	4013      	ands	r3, r2
 8004f88:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	68fa      	ldr	r2, [r7, #12]
 8004f90:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004f92:	683b      	ldr	r3, [r7, #0]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	2b40      	cmp	r3, #64	; 0x40
 8004f98:	d100      	bne.n	8004f9c <HAL_TIM_ConfigClockSource+0xbc>
 8004f9a:	e202      	b.n	80053a2 <HAL_TIM_ConfigClockSource+0x4c2>
 8004f9c:	d80e      	bhi.n	8004fbc <HAL_TIM_ConfigClockSource+0xdc>
 8004f9e:	2b10      	cmp	r3, #16
 8004fa0:	d100      	bne.n	8004fa4 <HAL_TIM_ConfigClockSource+0xc4>
 8004fa2:	e271      	b.n	8005488 <HAL_TIM_ConfigClockSource+0x5a8>
 8004fa4:	d803      	bhi.n	8004fae <HAL_TIM_ConfigClockSource+0xce>
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d100      	bne.n	8004fac <HAL_TIM_ConfigClockSource+0xcc>
 8004faa:	e24b      	b.n	8005444 <HAL_TIM_ConfigClockSource+0x564>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR3);
    }
    break;

  default:
    break;
 8004fac:	e2f0      	b.n	8005590 <HAL_TIM_ConfigClockSource+0x6b0>
  switch (sClockSourceConfig->ClockSource)
 8004fae:	2b20      	cmp	r3, #32
 8004fb0:	d100      	bne.n	8004fb4 <HAL_TIM_ConfigClockSource+0xd4>
 8004fb2:	e28b      	b.n	80054cc <HAL_TIM_ConfigClockSource+0x5ec>
 8004fb4:	2b30      	cmp	r3, #48	; 0x30
 8004fb6:	d100      	bne.n	8004fba <HAL_TIM_ConfigClockSource+0xda>
 8004fb8:	e2c8      	b.n	800554c <HAL_TIM_ConfigClockSource+0x66c>
    break;
 8004fba:	e2e9      	b.n	8005590 <HAL_TIM_ConfigClockSource+0x6b0>
  switch (sClockSourceConfig->ClockSource)
 8004fbc:	2b70      	cmp	r3, #112	; 0x70
 8004fbe:	d049      	beq.n	8005054 <HAL_TIM_ConfigClockSource+0x174>
 8004fc0:	d806      	bhi.n	8004fd0 <HAL_TIM_ConfigClockSource+0xf0>
 8004fc2:	2b50      	cmp	r3, #80	; 0x50
 8004fc4:	d100      	bne.n	8004fc8 <HAL_TIM_ConfigClockSource+0xe8>
 8004fc6:	e149      	b.n	800525c <HAL_TIM_ConfigClockSource+0x37c>
 8004fc8:	2b60      	cmp	r3, #96	; 0x60
 8004fca:	d100      	bne.n	8004fce <HAL_TIM_ConfigClockSource+0xee>
 8004fcc:	e198      	b.n	8005300 <HAL_TIM_ConfigClockSource+0x420>
    break;
 8004fce:	e2df      	b.n	8005590 <HAL_TIM_ConfigClockSource+0x6b0>
  switch (sClockSourceConfig->ClockSource)
 8004fd0:	2280      	movs	r2, #128	; 0x80
 8004fd2:	0152      	lsls	r2, r2, #5
 8004fd4:	4293      	cmp	r3, r2
 8004fd6:	d005      	beq.n	8004fe4 <HAL_TIM_ConfigClockSource+0x104>
 8004fd8:	2280      	movs	r2, #128	; 0x80
 8004fda:	0192      	lsls	r2, r2, #6
 8004fdc:	4293      	cmp	r3, r2
 8004fde:	d100      	bne.n	8004fe2 <HAL_TIM_ConfigClockSource+0x102>
 8004fe0:	e0ab      	b.n	800513a <HAL_TIM_ConfigClockSource+0x25a>
    break;
 8004fe2:	e2d5      	b.n	8005590 <HAL_TIM_ConfigClockSource+0x6b0>
      assert_param(IS_TIM_INSTANCE(htim->Instance));
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	4a8d      	ldr	r2, [pc, #564]	; (8005220 <HAL_TIM_ConfigClockSource+0x340>)
 8004fea:	4293      	cmp	r3, r2
 8004fec:	d029      	beq.n	8005042 <HAL_TIM_ConfigClockSource+0x162>
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	681a      	ldr	r2, [r3, #0]
 8004ff2:	2380      	movs	r3, #128	; 0x80
 8004ff4:	05db      	lsls	r3, r3, #23
 8004ff6:	429a      	cmp	r2, r3
 8004ff8:	d023      	beq.n	8005042 <HAL_TIM_ConfigClockSource+0x162>
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	4a89      	ldr	r2, [pc, #548]	; (8005224 <HAL_TIM_ConfigClockSource+0x344>)
 8005000:	4293      	cmp	r3, r2
 8005002:	d01e      	beq.n	8005042 <HAL_TIM_ConfigClockSource+0x162>
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	4a87      	ldr	r2, [pc, #540]	; (8005228 <HAL_TIM_ConfigClockSource+0x348>)
 800500a:	4293      	cmp	r3, r2
 800500c:	d019      	beq.n	8005042 <HAL_TIM_ConfigClockSource+0x162>
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	4a86      	ldr	r2, [pc, #536]	; (800522c <HAL_TIM_ConfigClockSource+0x34c>)
 8005014:	4293      	cmp	r3, r2
 8005016:	d014      	beq.n	8005042 <HAL_TIM_ConfigClockSource+0x162>
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	4a84      	ldr	r2, [pc, #528]	; (8005230 <HAL_TIM_ConfigClockSource+0x350>)
 800501e:	4293      	cmp	r3, r2
 8005020:	d00f      	beq.n	8005042 <HAL_TIM_ConfigClockSource+0x162>
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	4a83      	ldr	r2, [pc, #524]	; (8005234 <HAL_TIM_ConfigClockSource+0x354>)
 8005028:	4293      	cmp	r3, r2
 800502a:	d00a      	beq.n	8005042 <HAL_TIM_ConfigClockSource+0x162>
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	4a81      	ldr	r2, [pc, #516]	; (8005238 <HAL_TIM_ConfigClockSource+0x358>)
 8005032:	4293      	cmp	r3, r2
 8005034:	d005      	beq.n	8005042 <HAL_TIM_ConfigClockSource+0x162>
 8005036:	4a81      	ldr	r2, [pc, #516]	; (800523c <HAL_TIM_ConfigClockSource+0x35c>)
 8005038:	4b77      	ldr	r3, [pc, #476]	; (8005218 <HAL_TIM_ConfigClockSource+0x338>)
 800503a:	0011      	movs	r1, r2
 800503c:	0018      	movs	r0, r3
 800503e:	f7fb fc98 	bl	8000972 <assert_failed>
      htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	689a      	ldr	r2, [r3, #8]
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	2107      	movs	r1, #7
 800504e:	438a      	bics	r2, r1
 8005050:	609a      	str	r2, [r3, #8]
    break;
 8005052:	e29d      	b.n	8005590 <HAL_TIM_ConfigClockSource+0x6b0>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	4a71      	ldr	r2, [pc, #452]	; (8005220 <HAL_TIM_ConfigClockSource+0x340>)
 800505a:	4293      	cmp	r3, r2
 800505c:	d010      	beq.n	8005080 <HAL_TIM_ConfigClockSource+0x1a0>
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	681a      	ldr	r2, [r3, #0]
 8005062:	2380      	movs	r3, #128	; 0x80
 8005064:	05db      	lsls	r3, r3, #23
 8005066:	429a      	cmp	r2, r3
 8005068:	d00a      	beq.n	8005080 <HAL_TIM_ConfigClockSource+0x1a0>
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	4a6d      	ldr	r2, [pc, #436]	; (8005224 <HAL_TIM_ConfigClockSource+0x344>)
 8005070:	4293      	cmp	r3, r2
 8005072:	d005      	beq.n	8005080 <HAL_TIM_ConfigClockSource+0x1a0>
 8005074:	4a72      	ldr	r2, [pc, #456]	; (8005240 <HAL_TIM_ConfigClockSource+0x360>)
 8005076:	4b68      	ldr	r3, [pc, #416]	; (8005218 <HAL_TIM_ConfigClockSource+0x338>)
 8005078:	0011      	movs	r1, r2
 800507a:	0018      	movs	r0, r3
 800507c:	f7fb fc79 	bl	8000972 <assert_failed>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
 8005080:	683b      	ldr	r3, [r7, #0]
 8005082:	689b      	ldr	r3, [r3, #8]
 8005084:	2b00      	cmp	r3, #0
 8005086:	d017      	beq.n	80050b8 <HAL_TIM_ConfigClockSource+0x1d8>
 8005088:	683b      	ldr	r3, [r7, #0]
 800508a:	689a      	ldr	r2, [r3, #8]
 800508c:	2380      	movs	r3, #128	; 0x80
 800508e:	015b      	lsls	r3, r3, #5
 8005090:	429a      	cmp	r2, r3
 8005092:	d011      	beq.n	80050b8 <HAL_TIM_ConfigClockSource+0x1d8>
 8005094:	683b      	ldr	r3, [r7, #0]
 8005096:	689a      	ldr	r2, [r3, #8]
 8005098:	2380      	movs	r3, #128	; 0x80
 800509a:	019b      	lsls	r3, r3, #6
 800509c:	429a      	cmp	r2, r3
 800509e:	d00b      	beq.n	80050b8 <HAL_TIM_ConfigClockSource+0x1d8>
 80050a0:	683b      	ldr	r3, [r7, #0]
 80050a2:	689a      	ldr	r2, [r3, #8]
 80050a4:	23c0      	movs	r3, #192	; 0xc0
 80050a6:	019b      	lsls	r3, r3, #6
 80050a8:	429a      	cmp	r2, r3
 80050aa:	d005      	beq.n	80050b8 <HAL_TIM_ConfigClockSource+0x1d8>
 80050ac:	4a65      	ldr	r2, [pc, #404]	; (8005244 <HAL_TIM_ConfigClockSource+0x364>)
 80050ae:	4b5a      	ldr	r3, [pc, #360]	; (8005218 <HAL_TIM_ConfigClockSource+0x338>)
 80050b0:	0011      	movs	r1, r2
 80050b2:	0018      	movs	r0, r3
 80050b4:	f7fb fc5d 	bl	8000972 <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 80050b8:	683b      	ldr	r3, [r7, #0]
 80050ba:	685a      	ldr	r2, [r3, #4]
 80050bc:	2380      	movs	r3, #128	; 0x80
 80050be:	021b      	lsls	r3, r3, #8
 80050c0:	429a      	cmp	r2, r3
 80050c2:	d015      	beq.n	80050f0 <HAL_TIM_ConfigClockSource+0x210>
 80050c4:	683b      	ldr	r3, [r7, #0]
 80050c6:	685b      	ldr	r3, [r3, #4]
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	d011      	beq.n	80050f0 <HAL_TIM_ConfigClockSource+0x210>
 80050cc:	683b      	ldr	r3, [r7, #0]
 80050ce:	685b      	ldr	r3, [r3, #4]
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d00d      	beq.n	80050f0 <HAL_TIM_ConfigClockSource+0x210>
 80050d4:	683b      	ldr	r3, [r7, #0]
 80050d6:	685b      	ldr	r3, [r3, #4]
 80050d8:	2b02      	cmp	r3, #2
 80050da:	d009      	beq.n	80050f0 <HAL_TIM_ConfigClockSource+0x210>
 80050dc:	683b      	ldr	r3, [r7, #0]
 80050de:	685b      	ldr	r3, [r3, #4]
 80050e0:	2b0a      	cmp	r3, #10
 80050e2:	d005      	beq.n	80050f0 <HAL_TIM_ConfigClockSource+0x210>
 80050e4:	4a58      	ldr	r2, [pc, #352]	; (8005248 <HAL_TIM_ConfigClockSource+0x368>)
 80050e6:	4b4c      	ldr	r3, [pc, #304]	; (8005218 <HAL_TIM_ConfigClockSource+0x338>)
 80050e8:	0011      	movs	r1, r2
 80050ea:	0018      	movs	r0, r3
 80050ec:	f7fb fc41 	bl	8000972 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 80050f0:	683b      	ldr	r3, [r7, #0]
 80050f2:	68db      	ldr	r3, [r3, #12]
 80050f4:	2b0f      	cmp	r3, #15
 80050f6:	d905      	bls.n	8005104 <HAL_TIM_ConfigClockSource+0x224>
 80050f8:	4a54      	ldr	r2, [pc, #336]	; (800524c <HAL_TIM_ConfigClockSource+0x36c>)
 80050fa:	4b47      	ldr	r3, [pc, #284]	; (8005218 <HAL_TIM_ConfigClockSource+0x338>)
 80050fc:	0011      	movs	r1, r2
 80050fe:	0018      	movs	r0, r3
 8005100:	f7fb fc37 	bl	8000972 <assert_failed>
      TIM_ETR_SetConfig(htim->Instance,
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	6818      	ldr	r0, [r3, #0]
 8005108:	683b      	ldr	r3, [r7, #0]
 800510a:	6899      	ldr	r1, [r3, #8]
 800510c:	683b      	ldr	r3, [r7, #0]
 800510e:	685a      	ldr	r2, [r3, #4]
 8005110:	683b      	ldr	r3, [r7, #0]
 8005112:	68db      	ldr	r3, [r3, #12]
 8005114:	f000 fe50 	bl	8005db8 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	689b      	ldr	r3, [r3, #8]
 800511e:	60fb      	str	r3, [r7, #12]
      tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	2277      	movs	r2, #119	; 0x77
 8005124:	4393      	bics	r3, r2
 8005126:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	2277      	movs	r2, #119	; 0x77
 800512c:	4313      	orrs	r3, r2
 800512e:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	68fa      	ldr	r2, [r7, #12]
 8005136:	609a      	str	r2, [r3, #8]
    break;
 8005138:	e22a      	b.n	8005590 <HAL_TIM_ConfigClockSource+0x6b0>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE2_INSTANCE(htim->Instance));
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	4a38      	ldr	r2, [pc, #224]	; (8005220 <HAL_TIM_ConfigClockSource+0x340>)
 8005140:	4293      	cmp	r3, r2
 8005142:	d010      	beq.n	8005166 <HAL_TIM_ConfigClockSource+0x286>
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	681a      	ldr	r2, [r3, #0]
 8005148:	2380      	movs	r3, #128	; 0x80
 800514a:	05db      	lsls	r3, r3, #23
 800514c:	429a      	cmp	r2, r3
 800514e:	d00a      	beq.n	8005166 <HAL_TIM_ConfigClockSource+0x286>
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	4a33      	ldr	r2, [pc, #204]	; (8005224 <HAL_TIM_ConfigClockSource+0x344>)
 8005156:	4293      	cmp	r3, r2
 8005158:	d005      	beq.n	8005166 <HAL_TIM_ConfigClockSource+0x286>
 800515a:	4a3d      	ldr	r2, [pc, #244]	; (8005250 <HAL_TIM_ConfigClockSource+0x370>)
 800515c:	4b2e      	ldr	r3, [pc, #184]	; (8005218 <HAL_TIM_ConfigClockSource+0x338>)
 800515e:	0011      	movs	r1, r2
 8005160:	0018      	movs	r0, r3
 8005162:	f7fb fc06 	bl	8000972 <assert_failed>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
 8005166:	683b      	ldr	r3, [r7, #0]
 8005168:	689b      	ldr	r3, [r3, #8]
 800516a:	2b00      	cmp	r3, #0
 800516c:	d017      	beq.n	800519e <HAL_TIM_ConfigClockSource+0x2be>
 800516e:	683b      	ldr	r3, [r7, #0]
 8005170:	689a      	ldr	r2, [r3, #8]
 8005172:	2380      	movs	r3, #128	; 0x80
 8005174:	015b      	lsls	r3, r3, #5
 8005176:	429a      	cmp	r2, r3
 8005178:	d011      	beq.n	800519e <HAL_TIM_ConfigClockSource+0x2be>
 800517a:	683b      	ldr	r3, [r7, #0]
 800517c:	689a      	ldr	r2, [r3, #8]
 800517e:	2380      	movs	r3, #128	; 0x80
 8005180:	019b      	lsls	r3, r3, #6
 8005182:	429a      	cmp	r2, r3
 8005184:	d00b      	beq.n	800519e <HAL_TIM_ConfigClockSource+0x2be>
 8005186:	683b      	ldr	r3, [r7, #0]
 8005188:	689a      	ldr	r2, [r3, #8]
 800518a:	23c0      	movs	r3, #192	; 0xc0
 800518c:	019b      	lsls	r3, r3, #6
 800518e:	429a      	cmp	r2, r3
 8005190:	d005      	beq.n	800519e <HAL_TIM_ConfigClockSource+0x2be>
 8005192:	4a30      	ldr	r2, [pc, #192]	; (8005254 <HAL_TIM_ConfigClockSource+0x374>)
 8005194:	4b20      	ldr	r3, [pc, #128]	; (8005218 <HAL_TIM_ConfigClockSource+0x338>)
 8005196:	0011      	movs	r1, r2
 8005198:	0018      	movs	r0, r3
 800519a:	f7fb fbea 	bl	8000972 <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 800519e:	683b      	ldr	r3, [r7, #0]
 80051a0:	685a      	ldr	r2, [r3, #4]
 80051a2:	2380      	movs	r3, #128	; 0x80
 80051a4:	021b      	lsls	r3, r3, #8
 80051a6:	429a      	cmp	r2, r3
 80051a8:	d016      	beq.n	80051d8 <HAL_TIM_ConfigClockSource+0x2f8>
 80051aa:	683b      	ldr	r3, [r7, #0]
 80051ac:	685b      	ldr	r3, [r3, #4]
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d012      	beq.n	80051d8 <HAL_TIM_ConfigClockSource+0x2f8>
 80051b2:	683b      	ldr	r3, [r7, #0]
 80051b4:	685b      	ldr	r3, [r3, #4]
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d00e      	beq.n	80051d8 <HAL_TIM_ConfigClockSource+0x2f8>
 80051ba:	683b      	ldr	r3, [r7, #0]
 80051bc:	685b      	ldr	r3, [r3, #4]
 80051be:	2b02      	cmp	r3, #2
 80051c0:	d00a      	beq.n	80051d8 <HAL_TIM_ConfigClockSource+0x2f8>
 80051c2:	683b      	ldr	r3, [r7, #0]
 80051c4:	685b      	ldr	r3, [r3, #4]
 80051c6:	2b0a      	cmp	r3, #10
 80051c8:	d006      	beq.n	80051d8 <HAL_TIM_ConfigClockSource+0x2f8>
 80051ca:	23ff      	movs	r3, #255	; 0xff
 80051cc:	011a      	lsls	r2, r3, #4
 80051ce:	4b12      	ldr	r3, [pc, #72]	; (8005218 <HAL_TIM_ConfigClockSource+0x338>)
 80051d0:	0011      	movs	r1, r2
 80051d2:	0018      	movs	r0, r3
 80051d4:	f7fb fbcd 	bl	8000972 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 80051d8:	683b      	ldr	r3, [r7, #0]
 80051da:	68db      	ldr	r3, [r3, #12]
 80051dc:	2b0f      	cmp	r3, #15
 80051de:	d905      	bls.n	80051ec <HAL_TIM_ConfigClockSource+0x30c>
 80051e0:	4a1d      	ldr	r2, [pc, #116]	; (8005258 <HAL_TIM_ConfigClockSource+0x378>)
 80051e2:	4b0d      	ldr	r3, [pc, #52]	; (8005218 <HAL_TIM_ConfigClockSource+0x338>)
 80051e4:	0011      	movs	r1, r2
 80051e6:	0018      	movs	r0, r3
 80051e8:	f7fb fbc3 	bl	8000972 <assert_failed>
      TIM_ETR_SetConfig(htim->Instance,
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	6818      	ldr	r0, [r3, #0]
 80051f0:	683b      	ldr	r3, [r7, #0]
 80051f2:	6899      	ldr	r1, [r3, #8]
 80051f4:	683b      	ldr	r3, [r7, #0]
 80051f6:	685a      	ldr	r2, [r3, #4]
 80051f8:	683b      	ldr	r3, [r7, #0]
 80051fa:	68db      	ldr	r3, [r3, #12]
 80051fc:	f000 fddc 	bl	8005db8 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	689a      	ldr	r2, [r3, #8]
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	2180      	movs	r1, #128	; 0x80
 800520c:	01c9      	lsls	r1, r1, #7
 800520e:	430a      	orrs	r2, r1
 8005210:	609a      	str	r2, [r3, #8]
    break;
 8005212:	e1bd      	b.n	8005590 <HAL_TIM_ConfigClockSource+0x6b0>
 8005214:	00000fbd 	.word	0x00000fbd
 8005218:	080070bc 	.word	0x080070bc
 800521c:	ffff00ff 	.word	0xffff00ff
 8005220:	40012c00 	.word	0x40012c00
 8005224:	40000400 	.word	0x40000400
 8005228:	40001000 	.word	0x40001000
 800522c:	40002000 	.word	0x40002000
 8005230:	40014000 	.word	0x40014000
 8005234:	40014400 	.word	0x40014400
 8005238:	40014800 	.word	0x40014800
 800523c:	00000fc9 	.word	0x00000fc9
 8005240:	00000fd2 	.word	0x00000fd2
 8005244:	00000fd5 	.word	0x00000fd5
 8005248:	00000fd6 	.word	0x00000fd6
 800524c:	00000fd7 	.word	0x00000fd7
 8005250:	00000fec 	.word	0x00000fec
 8005254:	00000fef 	.word	0x00000fef
 8005258:	00000ff1 	.word	0x00000ff1
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	4aab      	ldr	r2, [pc, #684]	; (8005510 <HAL_TIM_ConfigClockSource+0x630>)
 8005262:	4293      	cmp	r3, r2
 8005264:	d016      	beq.n	8005294 <HAL_TIM_ConfigClockSource+0x3b4>
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	681a      	ldr	r2, [r3, #0]
 800526a:	2380      	movs	r3, #128	; 0x80
 800526c:	05db      	lsls	r3, r3, #23
 800526e:	429a      	cmp	r2, r3
 8005270:	d010      	beq.n	8005294 <HAL_TIM_ConfigClockSource+0x3b4>
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	4aa7      	ldr	r2, [pc, #668]	; (8005514 <HAL_TIM_ConfigClockSource+0x634>)
 8005278:	4293      	cmp	r3, r2
 800527a:	d00b      	beq.n	8005294 <HAL_TIM_ConfigClockSource+0x3b4>
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	4aa5      	ldr	r2, [pc, #660]	; (8005518 <HAL_TIM_ConfigClockSource+0x638>)
 8005282:	4293      	cmp	r3, r2
 8005284:	d006      	beq.n	8005294 <HAL_TIM_ConfigClockSource+0x3b4>
 8005286:	2380      	movs	r3, #128	; 0x80
 8005288:	015a      	lsls	r2, r3, #5
 800528a:	4ba4      	ldr	r3, [pc, #656]	; (800551c <HAL_TIM_ConfigClockSource+0x63c>)
 800528c:	0011      	movs	r1, r2
 800528e:	0018      	movs	r0, r3
 8005290:	f7fb fb6f 	bl	8000972 <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 8005294:	683b      	ldr	r3, [r7, #0]
 8005296:	685a      	ldr	r2, [r3, #4]
 8005298:	2380      	movs	r3, #128	; 0x80
 800529a:	021b      	lsls	r3, r3, #8
 800529c:	429a      	cmp	r2, r3
 800529e:	d015      	beq.n	80052cc <HAL_TIM_ConfigClockSource+0x3ec>
 80052a0:	683b      	ldr	r3, [r7, #0]
 80052a2:	685b      	ldr	r3, [r3, #4]
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d011      	beq.n	80052cc <HAL_TIM_ConfigClockSource+0x3ec>
 80052a8:	683b      	ldr	r3, [r7, #0]
 80052aa:	685b      	ldr	r3, [r3, #4]
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	d00d      	beq.n	80052cc <HAL_TIM_ConfigClockSource+0x3ec>
 80052b0:	683b      	ldr	r3, [r7, #0]
 80052b2:	685b      	ldr	r3, [r3, #4]
 80052b4:	2b02      	cmp	r3, #2
 80052b6:	d009      	beq.n	80052cc <HAL_TIM_ConfigClockSource+0x3ec>
 80052b8:	683b      	ldr	r3, [r7, #0]
 80052ba:	685b      	ldr	r3, [r3, #4]
 80052bc:	2b0a      	cmp	r3, #10
 80052be:	d005      	beq.n	80052cc <HAL_TIM_ConfigClockSource+0x3ec>
 80052c0:	4a97      	ldr	r2, [pc, #604]	; (8005520 <HAL_TIM_ConfigClockSource+0x640>)
 80052c2:	4b96      	ldr	r3, [pc, #600]	; (800551c <HAL_TIM_ConfigClockSource+0x63c>)
 80052c4:	0011      	movs	r1, r2
 80052c6:	0018      	movs	r0, r3
 80052c8:	f7fb fb53 	bl	8000972 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 80052cc:	683b      	ldr	r3, [r7, #0]
 80052ce:	68db      	ldr	r3, [r3, #12]
 80052d0:	2b0f      	cmp	r3, #15
 80052d2:	d905      	bls.n	80052e0 <HAL_TIM_ConfigClockSource+0x400>
 80052d4:	4a93      	ldr	r2, [pc, #588]	; (8005524 <HAL_TIM_ConfigClockSource+0x644>)
 80052d6:	4b91      	ldr	r3, [pc, #580]	; (800551c <HAL_TIM_ConfigClockSource+0x63c>)
 80052d8:	0011      	movs	r1, r2
 80052da:	0018      	movs	r0, r3
 80052dc:	f7fb fb49 	bl	8000972 <assert_failed>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	6818      	ldr	r0, [r3, #0]
 80052e4:	683b      	ldr	r3, [r7, #0]
 80052e6:	6859      	ldr	r1, [r3, #4]
 80052e8:	683b      	ldr	r3, [r7, #0]
 80052ea:	68db      	ldr	r3, [r3, #12]
 80052ec:	001a      	movs	r2, r3
 80052ee:	f000 fcdb 	bl	8005ca8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	2150      	movs	r1, #80	; 0x50
 80052f8:	0018      	movs	r0, r3
 80052fa:	f000 fd3d 	bl	8005d78 <TIM_ITRx_SetConfig>
    break;
 80052fe:	e147      	b.n	8005590 <HAL_TIM_ConfigClockSource+0x6b0>
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	4a82      	ldr	r2, [pc, #520]	; (8005510 <HAL_TIM_ConfigClockSource+0x630>)
 8005306:	4293      	cmp	r3, r2
 8005308:	d015      	beq.n	8005336 <HAL_TIM_ConfigClockSource+0x456>
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	681a      	ldr	r2, [r3, #0]
 800530e:	2380      	movs	r3, #128	; 0x80
 8005310:	05db      	lsls	r3, r3, #23
 8005312:	429a      	cmp	r2, r3
 8005314:	d00f      	beq.n	8005336 <HAL_TIM_ConfigClockSource+0x456>
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	4a7e      	ldr	r2, [pc, #504]	; (8005514 <HAL_TIM_ConfigClockSource+0x634>)
 800531c:	4293      	cmp	r3, r2
 800531e:	d00a      	beq.n	8005336 <HAL_TIM_ConfigClockSource+0x456>
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	4a7c      	ldr	r2, [pc, #496]	; (8005518 <HAL_TIM_ConfigClockSource+0x638>)
 8005326:	4293      	cmp	r3, r2
 8005328:	d005      	beq.n	8005336 <HAL_TIM_ConfigClockSource+0x456>
 800532a:	4a7f      	ldr	r2, [pc, #508]	; (8005528 <HAL_TIM_ConfigClockSource+0x648>)
 800532c:	4b7b      	ldr	r3, [pc, #492]	; (800551c <HAL_TIM_ConfigClockSource+0x63c>)
 800532e:	0011      	movs	r1, r2
 8005330:	0018      	movs	r0, r3
 8005332:	f7fb fb1e 	bl	8000972 <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 8005336:	683b      	ldr	r3, [r7, #0]
 8005338:	685a      	ldr	r2, [r3, #4]
 800533a:	2380      	movs	r3, #128	; 0x80
 800533c:	021b      	lsls	r3, r3, #8
 800533e:	429a      	cmp	r2, r3
 8005340:	d015      	beq.n	800536e <HAL_TIM_ConfigClockSource+0x48e>
 8005342:	683b      	ldr	r3, [r7, #0]
 8005344:	685b      	ldr	r3, [r3, #4]
 8005346:	2b00      	cmp	r3, #0
 8005348:	d011      	beq.n	800536e <HAL_TIM_ConfigClockSource+0x48e>
 800534a:	683b      	ldr	r3, [r7, #0]
 800534c:	685b      	ldr	r3, [r3, #4]
 800534e:	2b00      	cmp	r3, #0
 8005350:	d00d      	beq.n	800536e <HAL_TIM_ConfigClockSource+0x48e>
 8005352:	683b      	ldr	r3, [r7, #0]
 8005354:	685b      	ldr	r3, [r3, #4]
 8005356:	2b02      	cmp	r3, #2
 8005358:	d009      	beq.n	800536e <HAL_TIM_ConfigClockSource+0x48e>
 800535a:	683b      	ldr	r3, [r7, #0]
 800535c:	685b      	ldr	r3, [r3, #4]
 800535e:	2b0a      	cmp	r3, #10
 8005360:	d005      	beq.n	800536e <HAL_TIM_ConfigClockSource+0x48e>
 8005362:	4a72      	ldr	r2, [pc, #456]	; (800552c <HAL_TIM_ConfigClockSource+0x64c>)
 8005364:	4b6d      	ldr	r3, [pc, #436]	; (800551c <HAL_TIM_ConfigClockSource+0x63c>)
 8005366:	0011      	movs	r1, r2
 8005368:	0018      	movs	r0, r3
 800536a:	f7fb fb02 	bl	8000972 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 800536e:	683b      	ldr	r3, [r7, #0]
 8005370:	68db      	ldr	r3, [r3, #12]
 8005372:	2b0f      	cmp	r3, #15
 8005374:	d905      	bls.n	8005382 <HAL_TIM_ConfigClockSource+0x4a2>
 8005376:	4a6e      	ldr	r2, [pc, #440]	; (8005530 <HAL_TIM_ConfigClockSource+0x650>)
 8005378:	4b68      	ldr	r3, [pc, #416]	; (800551c <HAL_TIM_ConfigClockSource+0x63c>)
 800537a:	0011      	movs	r1, r2
 800537c:	0018      	movs	r0, r3
 800537e:	f7fb faf8 	bl	8000972 <assert_failed>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	6818      	ldr	r0, [r3, #0]
 8005386:	683b      	ldr	r3, [r7, #0]
 8005388:	6859      	ldr	r1, [r3, #4]
 800538a:	683b      	ldr	r3, [r7, #0]
 800538c:	68db      	ldr	r3, [r3, #12]
 800538e:	001a      	movs	r2, r3
 8005390:	f000 fcbc 	bl	8005d0c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	2160      	movs	r1, #96	; 0x60
 800539a:	0018      	movs	r0, r3
 800539c:	f000 fcec 	bl	8005d78 <TIM_ITRx_SetConfig>
    break;
 80053a0:	e0f6      	b.n	8005590 <HAL_TIM_ConfigClockSource+0x6b0>
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	4a5a      	ldr	r2, [pc, #360]	; (8005510 <HAL_TIM_ConfigClockSource+0x630>)
 80053a8:	4293      	cmp	r3, r2
 80053aa:	d015      	beq.n	80053d8 <HAL_TIM_ConfigClockSource+0x4f8>
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	681a      	ldr	r2, [r3, #0]
 80053b0:	2380      	movs	r3, #128	; 0x80
 80053b2:	05db      	lsls	r3, r3, #23
 80053b4:	429a      	cmp	r2, r3
 80053b6:	d00f      	beq.n	80053d8 <HAL_TIM_ConfigClockSource+0x4f8>
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	4a55      	ldr	r2, [pc, #340]	; (8005514 <HAL_TIM_ConfigClockSource+0x634>)
 80053be:	4293      	cmp	r3, r2
 80053c0:	d00a      	beq.n	80053d8 <HAL_TIM_ConfigClockSource+0x4f8>
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	4a54      	ldr	r2, [pc, #336]	; (8005518 <HAL_TIM_ConfigClockSource+0x638>)
 80053c8:	4293      	cmp	r3, r2
 80053ca:	d005      	beq.n	80053d8 <HAL_TIM_ConfigClockSource+0x4f8>
 80053cc:	4a59      	ldr	r2, [pc, #356]	; (8005534 <HAL_TIM_ConfigClockSource+0x654>)
 80053ce:	4b53      	ldr	r3, [pc, #332]	; (800551c <HAL_TIM_ConfigClockSource+0x63c>)
 80053d0:	0011      	movs	r1, r2
 80053d2:	0018      	movs	r0, r3
 80053d4:	f7fb facd 	bl	8000972 <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 80053d8:	683b      	ldr	r3, [r7, #0]
 80053da:	685a      	ldr	r2, [r3, #4]
 80053dc:	2380      	movs	r3, #128	; 0x80
 80053de:	021b      	lsls	r3, r3, #8
 80053e0:	429a      	cmp	r2, r3
 80053e2:	d015      	beq.n	8005410 <HAL_TIM_ConfigClockSource+0x530>
 80053e4:	683b      	ldr	r3, [r7, #0]
 80053e6:	685b      	ldr	r3, [r3, #4]
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	d011      	beq.n	8005410 <HAL_TIM_ConfigClockSource+0x530>
 80053ec:	683b      	ldr	r3, [r7, #0]
 80053ee:	685b      	ldr	r3, [r3, #4]
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	d00d      	beq.n	8005410 <HAL_TIM_ConfigClockSource+0x530>
 80053f4:	683b      	ldr	r3, [r7, #0]
 80053f6:	685b      	ldr	r3, [r3, #4]
 80053f8:	2b02      	cmp	r3, #2
 80053fa:	d009      	beq.n	8005410 <HAL_TIM_ConfigClockSource+0x530>
 80053fc:	683b      	ldr	r3, [r7, #0]
 80053fe:	685b      	ldr	r3, [r3, #4]
 8005400:	2b0a      	cmp	r3, #10
 8005402:	d005      	beq.n	8005410 <HAL_TIM_ConfigClockSource+0x530>
 8005404:	4a4c      	ldr	r2, [pc, #304]	; (8005538 <HAL_TIM_ConfigClockSource+0x658>)
 8005406:	4b45      	ldr	r3, [pc, #276]	; (800551c <HAL_TIM_ConfigClockSource+0x63c>)
 8005408:	0011      	movs	r1, r2
 800540a:	0018      	movs	r0, r3
 800540c:	f7fb fab1 	bl	8000972 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8005410:	683b      	ldr	r3, [r7, #0]
 8005412:	68db      	ldr	r3, [r3, #12]
 8005414:	2b0f      	cmp	r3, #15
 8005416:	d905      	bls.n	8005424 <HAL_TIM_ConfigClockSource+0x544>
 8005418:	4a48      	ldr	r2, [pc, #288]	; (800553c <HAL_TIM_ConfigClockSource+0x65c>)
 800541a:	4b40      	ldr	r3, [pc, #256]	; (800551c <HAL_TIM_ConfigClockSource+0x63c>)
 800541c:	0011      	movs	r1, r2
 800541e:	0018      	movs	r0, r3
 8005420:	f7fb faa7 	bl	8000972 <assert_failed>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	6818      	ldr	r0, [r3, #0]
 8005428:	683b      	ldr	r3, [r7, #0]
 800542a:	6859      	ldr	r1, [r3, #4]
 800542c:	683b      	ldr	r3, [r7, #0]
 800542e:	68db      	ldr	r3, [r3, #12]
 8005430:	001a      	movs	r2, r3
 8005432:	f000 fc39 	bl	8005ca8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	2140      	movs	r1, #64	; 0x40
 800543c:	0018      	movs	r0, r3
 800543e:	f000 fc9b 	bl	8005d78 <TIM_ITRx_SetConfig>
    break;
 8005442:	e0a5      	b.n	8005590 <HAL_TIM_ConfigClockSource+0x6b0>
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	4a31      	ldr	r2, [pc, #196]	; (8005510 <HAL_TIM_ConfigClockSource+0x630>)
 800544a:	4293      	cmp	r3, r2
 800544c:	d015      	beq.n	800547a <HAL_TIM_ConfigClockSource+0x59a>
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	681a      	ldr	r2, [r3, #0]
 8005452:	2380      	movs	r3, #128	; 0x80
 8005454:	05db      	lsls	r3, r3, #23
 8005456:	429a      	cmp	r2, r3
 8005458:	d00f      	beq.n	800547a <HAL_TIM_ConfigClockSource+0x59a>
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	4a2d      	ldr	r2, [pc, #180]	; (8005514 <HAL_TIM_ConfigClockSource+0x634>)
 8005460:	4293      	cmp	r3, r2
 8005462:	d00a      	beq.n	800547a <HAL_TIM_ConfigClockSource+0x59a>
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	4a2b      	ldr	r2, [pc, #172]	; (8005518 <HAL_TIM_ConfigClockSource+0x638>)
 800546a:	4293      	cmp	r3, r2
 800546c:	d005      	beq.n	800547a <HAL_TIM_ConfigClockSource+0x59a>
 800546e:	4a34      	ldr	r2, [pc, #208]	; (8005540 <HAL_TIM_ConfigClockSource+0x660>)
 8005470:	4b2a      	ldr	r3, [pc, #168]	; (800551c <HAL_TIM_ConfigClockSource+0x63c>)
 8005472:	0011      	movs	r1, r2
 8005474:	0018      	movs	r0, r3
 8005476:	f7fb fa7c 	bl	8000972 <assert_failed>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR0);
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	2100      	movs	r1, #0
 8005480:	0018      	movs	r0, r3
 8005482:	f000 fc79 	bl	8005d78 <TIM_ITRx_SetConfig>
    break;
 8005486:	e083      	b.n	8005590 <HAL_TIM_ConfigClockSource+0x6b0>
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	4a20      	ldr	r2, [pc, #128]	; (8005510 <HAL_TIM_ConfigClockSource+0x630>)
 800548e:	4293      	cmp	r3, r2
 8005490:	d015      	beq.n	80054be <HAL_TIM_ConfigClockSource+0x5de>
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	681a      	ldr	r2, [r3, #0]
 8005496:	2380      	movs	r3, #128	; 0x80
 8005498:	05db      	lsls	r3, r3, #23
 800549a:	429a      	cmp	r2, r3
 800549c:	d00f      	beq.n	80054be <HAL_TIM_ConfigClockSource+0x5de>
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	4a1c      	ldr	r2, [pc, #112]	; (8005514 <HAL_TIM_ConfigClockSource+0x634>)
 80054a4:	4293      	cmp	r3, r2
 80054a6:	d00a      	beq.n	80054be <HAL_TIM_ConfigClockSource+0x5de>
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	4a1a      	ldr	r2, [pc, #104]	; (8005518 <HAL_TIM_ConfigClockSource+0x638>)
 80054ae:	4293      	cmp	r3, r2
 80054b0:	d005      	beq.n	80054be <HAL_TIM_ConfigClockSource+0x5de>
 80054b2:	4a24      	ldr	r2, [pc, #144]	; (8005544 <HAL_TIM_ConfigClockSource+0x664>)
 80054b4:	4b19      	ldr	r3, [pc, #100]	; (800551c <HAL_TIM_ConfigClockSource+0x63c>)
 80054b6:	0011      	movs	r1, r2
 80054b8:	0018      	movs	r0, r3
 80054ba:	f7fb fa5a 	bl	8000972 <assert_failed>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR1);
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	2110      	movs	r1, #16
 80054c4:	0018      	movs	r0, r3
 80054c6:	f000 fc57 	bl	8005d78 <TIM_ITRx_SetConfig>
    break;
 80054ca:	e061      	b.n	8005590 <HAL_TIM_ConfigClockSource+0x6b0>
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	4a0f      	ldr	r2, [pc, #60]	; (8005510 <HAL_TIM_ConfigClockSource+0x630>)
 80054d2:	4293      	cmp	r3, r2
 80054d4:	d015      	beq.n	8005502 <HAL_TIM_ConfigClockSource+0x622>
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	681a      	ldr	r2, [r3, #0]
 80054da:	2380      	movs	r3, #128	; 0x80
 80054dc:	05db      	lsls	r3, r3, #23
 80054de:	429a      	cmp	r2, r3
 80054e0:	d00f      	beq.n	8005502 <HAL_TIM_ConfigClockSource+0x622>
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	4a0b      	ldr	r2, [pc, #44]	; (8005514 <HAL_TIM_ConfigClockSource+0x634>)
 80054e8:	4293      	cmp	r3, r2
 80054ea:	d00a      	beq.n	8005502 <HAL_TIM_ConfigClockSource+0x622>
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	4a09      	ldr	r2, [pc, #36]	; (8005518 <HAL_TIM_ConfigClockSource+0x638>)
 80054f2:	4293      	cmp	r3, r2
 80054f4:	d005      	beq.n	8005502 <HAL_TIM_ConfigClockSource+0x622>
 80054f6:	4a14      	ldr	r2, [pc, #80]	; (8005548 <HAL_TIM_ConfigClockSource+0x668>)
 80054f8:	4b08      	ldr	r3, [pc, #32]	; (800551c <HAL_TIM_ConfigClockSource+0x63c>)
 80054fa:	0011      	movs	r1, r2
 80054fc:	0018      	movs	r0, r3
 80054fe:	f7fb fa38 	bl	8000972 <assert_failed>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR2);
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	2120      	movs	r1, #32
 8005508:	0018      	movs	r0, r3
 800550a:	f000 fc35 	bl	8005d78 <TIM_ITRx_SetConfig>
    break;
 800550e:	e03f      	b.n	8005590 <HAL_TIM_ConfigClockSource+0x6b0>
 8005510:	40012c00 	.word	0x40012c00
 8005514:	40000400 	.word	0x40000400
 8005518:	40014000 	.word	0x40014000
 800551c:	080070bc 	.word	0x080070bc
 8005520:	00001003 	.word	0x00001003
 8005524:	00001004 	.word	0x00001004
 8005528:	0000100f 	.word	0x0000100f
 800552c:	00001012 	.word	0x00001012
 8005530:	00001013 	.word	0x00001013
 8005534:	0000101e 	.word	0x0000101e
 8005538:	00001021 	.word	0x00001021
 800553c:	00001022 	.word	0x00001022
 8005540:	0000102d 	.word	0x0000102d
 8005544:	00001035 	.word	0x00001035
 8005548:	0000103d 	.word	0x0000103d
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	4a16      	ldr	r2, [pc, #88]	; (80055ac <HAL_TIM_ConfigClockSource+0x6cc>)
 8005552:	4293      	cmp	r3, r2
 8005554:	d015      	beq.n	8005582 <HAL_TIM_ConfigClockSource+0x6a2>
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	681a      	ldr	r2, [r3, #0]
 800555a:	2380      	movs	r3, #128	; 0x80
 800555c:	05db      	lsls	r3, r3, #23
 800555e:	429a      	cmp	r2, r3
 8005560:	d00f      	beq.n	8005582 <HAL_TIM_ConfigClockSource+0x6a2>
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	4a12      	ldr	r2, [pc, #72]	; (80055b0 <HAL_TIM_ConfigClockSource+0x6d0>)
 8005568:	4293      	cmp	r3, r2
 800556a:	d00a      	beq.n	8005582 <HAL_TIM_ConfigClockSource+0x6a2>
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	4a10      	ldr	r2, [pc, #64]	; (80055b4 <HAL_TIM_ConfigClockSource+0x6d4>)
 8005572:	4293      	cmp	r3, r2
 8005574:	d005      	beq.n	8005582 <HAL_TIM_ConfigClockSource+0x6a2>
 8005576:	4a10      	ldr	r2, [pc, #64]	; (80055b8 <HAL_TIM_ConfigClockSource+0x6d8>)
 8005578:	4b10      	ldr	r3, [pc, #64]	; (80055bc <HAL_TIM_ConfigClockSource+0x6dc>)
 800557a:	0011      	movs	r1, r2
 800557c:	0018      	movs	r0, r3
 800557e:	f7fb f9f8 	bl	8000972 <assert_failed>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR3);
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	2130      	movs	r1, #48	; 0x30
 8005588:	0018      	movs	r0, r3
 800558a:	f000 fbf5 	bl	8005d78 <TIM_ITRx_SetConfig>
    break;
 800558e:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	223d      	movs	r2, #61	; 0x3d
 8005594:	2101      	movs	r1, #1
 8005596:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	223c      	movs	r2, #60	; 0x3c
 800559c:	2100      	movs	r1, #0
 800559e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80055a0:	2300      	movs	r3, #0
}
 80055a2:	0018      	movs	r0, r3
 80055a4:	46bd      	mov	sp, r7
 80055a6:	b004      	add	sp, #16
 80055a8:	bd80      	pop	{r7, pc}
 80055aa:	46c0      	nop			; (mov r8, r8)
 80055ac:	40012c00 	.word	0x40012c00
 80055b0:	40000400 	.word	0x40000400
 80055b4:	40014000 	.word	0x40014000
 80055b8:	00001045 	.word	0x00001045
 80055bc:	080070bc 	.word	0x080070bc

080055c0 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non blocking mode 
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80055c0:	b580      	push	{r7, lr}
 80055c2:	b082      	sub	sp, #8
 80055c4:	af00      	add	r7, sp, #0
 80055c6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the __HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */

}
 80055c8:	46c0      	nop			; (mov r8, r8)
 80055ca:	46bd      	mov	sp, r7
 80055cc:	b002      	add	sp, #8
 80055ce:	bd80      	pop	{r7, pc}

080055d0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non blocking mode 
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80055d0:	b580      	push	{r7, lr}
 80055d2:	b082      	sub	sp, #8
 80055d4:	af00      	add	r7, sp, #0
 80055d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the __HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80055d8:	46c0      	nop			; (mov r8, r8)
 80055da:	46bd      	mov	sp, r7
 80055dc:	b002      	add	sp, #8
 80055de:	bd80      	pop	{r7, pc}

080055e0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non blocking mode 
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80055e0:	b580      	push	{r7, lr}
 80055e2:	b082      	sub	sp, #8
 80055e4:	af00      	add	r7, sp, #0
 80055e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the __HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80055e8:	46c0      	nop			; (mov r8, r8)
 80055ea:	46bd      	mov	sp, r7
 80055ec:	b002      	add	sp, #8
 80055ee:	bd80      	pop	{r7, pc}

080055f0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non blocking mode 
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80055f0:	b580      	push	{r7, lr}
 80055f2:	b082      	sub	sp, #8
 80055f4:	af00      	add	r7, sp, #0
 80055f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the __HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80055f8:	46c0      	nop			; (mov r8, r8)
 80055fa:	46bd      	mov	sp, r7
 80055fc:	b002      	add	sp, #8
 80055fe:	bd80      	pop	{r7, pc}

08005600 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non blocking mode 
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005600:	b580      	push	{r7, lr}
 8005602:	b082      	sub	sp, #8
 8005604:	af00      	add	r7, sp, #0
 8005606:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005608:	46c0      	nop			; (mov r8, r8)
 800560a:	46bd      	mov	sp, r7
 800560c:	b002      	add	sp, #8
 800560e:	bd80      	pop	{r7, pc}

08005610 <TIM_Base_SetConfig>:
  * @param  TIMx TIM periheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005610:	b580      	push	{r7, lr}
 8005612:	b084      	sub	sp, #16
 8005614:	af00      	add	r7, sp, #0
 8005616:	6078      	str	r0, [r7, #4]
 8005618:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1 = 0U;
 800561a:	2300      	movs	r3, #0
 800561c:	60fb      	str	r3, [r7, #12]
  tmpcr1 = TIMx->CR1;
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	4a34      	ldr	r2, [pc, #208]	; (80056f8 <TIM_Base_SetConfig+0xe8>)
 8005628:	4293      	cmp	r3, r2
 800562a:	d008      	beq.n	800563e <TIM_Base_SetConfig+0x2e>
 800562c:	687a      	ldr	r2, [r7, #4]
 800562e:	2380      	movs	r3, #128	; 0x80
 8005630:	05db      	lsls	r3, r3, #23
 8005632:	429a      	cmp	r2, r3
 8005634:	d003      	beq.n	800563e <TIM_Base_SetConfig+0x2e>
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	4a30      	ldr	r2, [pc, #192]	; (80056fc <TIM_Base_SetConfig+0xec>)
 800563a:	4293      	cmp	r3, r2
 800563c:	d108      	bne.n	8005650 <TIM_Base_SetConfig+0x40>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	2270      	movs	r2, #112	; 0x70
 8005642:	4393      	bics	r3, r2
 8005644:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005646:	683b      	ldr	r3, [r7, #0]
 8005648:	685b      	ldr	r3, [r3, #4]
 800564a:	68fa      	ldr	r2, [r7, #12]
 800564c:	4313      	orrs	r3, r2
 800564e:	60fb      	str	r3, [r7, #12]
  }

  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	4a29      	ldr	r2, [pc, #164]	; (80056f8 <TIM_Base_SetConfig+0xe8>)
 8005654:	4293      	cmp	r3, r2
 8005656:	d018      	beq.n	800568a <TIM_Base_SetConfig+0x7a>
 8005658:	687a      	ldr	r2, [r7, #4]
 800565a:	2380      	movs	r3, #128	; 0x80
 800565c:	05db      	lsls	r3, r3, #23
 800565e:	429a      	cmp	r2, r3
 8005660:	d013      	beq.n	800568a <TIM_Base_SetConfig+0x7a>
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	4a25      	ldr	r2, [pc, #148]	; (80056fc <TIM_Base_SetConfig+0xec>)
 8005666:	4293      	cmp	r3, r2
 8005668:	d00f      	beq.n	800568a <TIM_Base_SetConfig+0x7a>
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	4a24      	ldr	r2, [pc, #144]	; (8005700 <TIM_Base_SetConfig+0xf0>)
 800566e:	4293      	cmp	r3, r2
 8005670:	d00b      	beq.n	800568a <TIM_Base_SetConfig+0x7a>
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	4a23      	ldr	r2, [pc, #140]	; (8005704 <TIM_Base_SetConfig+0xf4>)
 8005676:	4293      	cmp	r3, r2
 8005678:	d007      	beq.n	800568a <TIM_Base_SetConfig+0x7a>
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	4a22      	ldr	r2, [pc, #136]	; (8005708 <TIM_Base_SetConfig+0xf8>)
 800567e:	4293      	cmp	r3, r2
 8005680:	d003      	beq.n	800568a <TIM_Base_SetConfig+0x7a>
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	4a21      	ldr	r2, [pc, #132]	; (800570c <TIM_Base_SetConfig+0xfc>)
 8005686:	4293      	cmp	r3, r2
 8005688:	d108      	bne.n	800569c <TIM_Base_SetConfig+0x8c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	4a20      	ldr	r2, [pc, #128]	; (8005710 <TIM_Base_SetConfig+0x100>)
 800568e:	4013      	ands	r3, r2
 8005690:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005692:	683b      	ldr	r3, [r7, #0]
 8005694:	68db      	ldr	r3, [r3, #12]
 8005696:	68fa      	ldr	r2, [r7, #12]
 8005698:	4313      	orrs	r3, r2
 800569a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	2280      	movs	r2, #128	; 0x80
 80056a0:	4393      	bics	r3, r2
 80056a2:	001a      	movs	r2, r3
 80056a4:	683b      	ldr	r3, [r7, #0]
 80056a6:	695b      	ldr	r3, [r3, #20]
 80056a8:	4313      	orrs	r3, r2
 80056aa:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	68fa      	ldr	r2, [r7, #12]
 80056b0:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80056b2:	683b      	ldr	r3, [r7, #0]
 80056b4:	689a      	ldr	r2, [r3, #8]
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 80056ba:	683b      	ldr	r3, [r7, #0]
 80056bc:	681a      	ldr	r2, [r3, #0]
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	4a0c      	ldr	r2, [pc, #48]	; (80056f8 <TIM_Base_SetConfig+0xe8>)
 80056c6:	4293      	cmp	r3, r2
 80056c8:	d00b      	beq.n	80056e2 <TIM_Base_SetConfig+0xd2>
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	4a0d      	ldr	r2, [pc, #52]	; (8005704 <TIM_Base_SetConfig+0xf4>)
 80056ce:	4293      	cmp	r3, r2
 80056d0:	d007      	beq.n	80056e2 <TIM_Base_SetConfig+0xd2>
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	4a0c      	ldr	r2, [pc, #48]	; (8005708 <TIM_Base_SetConfig+0xf8>)
 80056d6:	4293      	cmp	r3, r2
 80056d8:	d003      	beq.n	80056e2 <TIM_Base_SetConfig+0xd2>
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	4a0b      	ldr	r2, [pc, #44]	; (800570c <TIM_Base_SetConfig+0xfc>)
 80056de:	4293      	cmp	r3, r2
 80056e0:	d103      	bne.n	80056ea <TIM_Base_SetConfig+0xda>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80056e2:	683b      	ldr	r3, [r7, #0]
 80056e4:	691a      	ldr	r2, [r3, #16]
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediatly */
  TIMx->EGR = TIM_EGR_UG;
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	2201      	movs	r2, #1
 80056ee:	615a      	str	r2, [r3, #20]
}
 80056f0:	46c0      	nop			; (mov r8, r8)
 80056f2:	46bd      	mov	sp, r7
 80056f4:	b004      	add	sp, #16
 80056f6:	bd80      	pop	{r7, pc}
 80056f8:	40012c00 	.word	0x40012c00
 80056fc:	40000400 	.word	0x40000400
 8005700:	40002000 	.word	0x40002000
 8005704:	40014000 	.word	0x40014000
 8005708:	40014400 	.word	0x40014400
 800570c:	40014800 	.word	0x40014800
 8005710:	fffffcff 	.word	0xfffffcff

08005714 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005714:	b580      	push	{r7, lr}
 8005716:	b086      	sub	sp, #24
 8005718:	af00      	add	r7, sp, #0
 800571a:	6078      	str	r0, [r7, #4]
 800571c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx = 0U;
 800571e:	2300      	movs	r3, #0
 8005720:	60fb      	str	r3, [r7, #12]
  uint32_t tmpccer = 0U;
 8005722:	2300      	movs	r3, #0
 8005724:	617b      	str	r3, [r7, #20]
  uint32_t tmpcr2 = 0U;
 8005726:	2300      	movs	r3, #0
 8005728:	613b      	str	r3, [r7, #16]

   /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	6a1b      	ldr	r3, [r3, #32]
 800572e:	2201      	movs	r2, #1
 8005730:	4393      	bics	r3, r2
 8005732:	001a      	movs	r2, r3
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	6a1b      	ldr	r3, [r3, #32]
 800573c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	685b      	ldr	r3, [r3, #4]
 8005742:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	699b      	ldr	r3, [r3, #24]
 8005748:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	2270      	movs	r2, #112	; 0x70
 800574e:	4393      	bics	r3, r2
 8005750:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	2203      	movs	r2, #3
 8005756:	4393      	bics	r3, r2
 8005758:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800575a:	683b      	ldr	r3, [r7, #0]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	68fa      	ldr	r2, [r7, #12]
 8005760:	4313      	orrs	r3, r2
 8005762:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005764:	697b      	ldr	r3, [r7, #20]
 8005766:	2202      	movs	r2, #2
 8005768:	4393      	bics	r3, r2
 800576a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800576c:	683b      	ldr	r3, [r7, #0]
 800576e:	689b      	ldr	r3, [r3, #8]
 8005770:	697a      	ldr	r2, [r7, #20]
 8005772:	4313      	orrs	r3, r2
 8005774:	617b      	str	r3, [r7, #20]

  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	4a3e      	ldr	r2, [pc, #248]	; (8005874 <TIM_OC1_SetConfig+0x160>)
 800577a:	4293      	cmp	r3, r2
 800577c:	d00b      	beq.n	8005796 <TIM_OC1_SetConfig+0x82>
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	4a3d      	ldr	r2, [pc, #244]	; (8005878 <TIM_OC1_SetConfig+0x164>)
 8005782:	4293      	cmp	r3, r2
 8005784:	d007      	beq.n	8005796 <TIM_OC1_SetConfig+0x82>
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	4a3c      	ldr	r2, [pc, #240]	; (800587c <TIM_OC1_SetConfig+0x168>)
 800578a:	4293      	cmp	r3, r2
 800578c:	d003      	beq.n	8005796 <TIM_OC1_SetConfig+0x82>
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	4a3b      	ldr	r2, [pc, #236]	; (8005880 <TIM_OC1_SetConfig+0x16c>)
 8005792:	4293      	cmp	r3, r2
 8005794:	d11a      	bne.n	80057cc <TIM_OC1_SetConfig+0xb8>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 8005796:	683b      	ldr	r3, [r7, #0]
 8005798:	68db      	ldr	r3, [r3, #12]
 800579a:	2b00      	cmp	r3, #0
 800579c:	d009      	beq.n	80057b2 <TIM_OC1_SetConfig+0x9e>
 800579e:	683b      	ldr	r3, [r7, #0]
 80057a0:	68db      	ldr	r3, [r3, #12]
 80057a2:	2b08      	cmp	r3, #8
 80057a4:	d005      	beq.n	80057b2 <TIM_OC1_SetConfig+0x9e>
 80057a6:	4a37      	ldr	r2, [pc, #220]	; (8005884 <TIM_OC1_SetConfig+0x170>)
 80057a8:	4b37      	ldr	r3, [pc, #220]	; (8005888 <TIM_OC1_SetConfig+0x174>)
 80057aa:	0011      	movs	r1, r2
 80057ac:	0018      	movs	r0, r3
 80057ae:	f7fb f8e0 	bl	8000972 <assert_failed>

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80057b2:	697b      	ldr	r3, [r7, #20]
 80057b4:	2208      	movs	r2, #8
 80057b6:	4393      	bics	r3, r2
 80057b8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80057ba:	683b      	ldr	r3, [r7, #0]
 80057bc:	68db      	ldr	r3, [r3, #12]
 80057be:	697a      	ldr	r2, [r7, #20]
 80057c0:	4313      	orrs	r3, r2
 80057c2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80057c4:	697b      	ldr	r3, [r7, #20]
 80057c6:	2204      	movs	r2, #4
 80057c8:	4393      	bics	r3, r2
 80057ca:	617b      	str	r3, [r7, #20]
  }

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	4a29      	ldr	r2, [pc, #164]	; (8005874 <TIM_OC1_SetConfig+0x160>)
 80057d0:	4293      	cmp	r3, r2
 80057d2:	d00b      	beq.n	80057ec <TIM_OC1_SetConfig+0xd8>
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	4a28      	ldr	r2, [pc, #160]	; (8005878 <TIM_OC1_SetConfig+0x164>)
 80057d8:	4293      	cmp	r3, r2
 80057da:	d007      	beq.n	80057ec <TIM_OC1_SetConfig+0xd8>
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	4a27      	ldr	r2, [pc, #156]	; (800587c <TIM_OC1_SetConfig+0x168>)
 80057e0:	4293      	cmp	r3, r2
 80057e2:	d003      	beq.n	80057ec <TIM_OC1_SetConfig+0xd8>
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	4a26      	ldr	r2, [pc, #152]	; (8005880 <TIM_OC1_SetConfig+0x16c>)
 80057e8:	4293      	cmp	r3, r2
 80057ea:	d131      	bne.n	8005850 <TIM_OC1_SetConfig+0x13c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 80057ec:	683b      	ldr	r3, [r7, #0]
 80057ee:	699a      	ldr	r2, [r3, #24]
 80057f0:	2380      	movs	r3, #128	; 0x80
 80057f2:	009b      	lsls	r3, r3, #2
 80057f4:	429a      	cmp	r2, r3
 80057f6:	d009      	beq.n	800580c <TIM_OC1_SetConfig+0xf8>
 80057f8:	683b      	ldr	r3, [r7, #0]
 80057fa:	699b      	ldr	r3, [r3, #24]
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	d005      	beq.n	800580c <TIM_OC1_SetConfig+0xf8>
 8005800:	4a22      	ldr	r2, [pc, #136]	; (800588c <TIM_OC1_SetConfig+0x178>)
 8005802:	4b21      	ldr	r3, [pc, #132]	; (8005888 <TIM_OC1_SetConfig+0x174>)
 8005804:	0011      	movs	r1, r2
 8005806:	0018      	movs	r0, r3
 8005808:	f7fb f8b3 	bl	8000972 <assert_failed>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 800580c:	683b      	ldr	r3, [r7, #0]
 800580e:	695a      	ldr	r2, [r3, #20]
 8005810:	2380      	movs	r3, #128	; 0x80
 8005812:	005b      	lsls	r3, r3, #1
 8005814:	429a      	cmp	r2, r3
 8005816:	d009      	beq.n	800582c <TIM_OC1_SetConfig+0x118>
 8005818:	683b      	ldr	r3, [r7, #0]
 800581a:	695b      	ldr	r3, [r3, #20]
 800581c:	2b00      	cmp	r3, #0
 800581e:	d005      	beq.n	800582c <TIM_OC1_SetConfig+0x118>
 8005820:	4a1b      	ldr	r2, [pc, #108]	; (8005890 <TIM_OC1_SetConfig+0x17c>)
 8005822:	4b19      	ldr	r3, [pc, #100]	; (8005888 <TIM_OC1_SetConfig+0x174>)
 8005824:	0011      	movs	r1, r2
 8005826:	0018      	movs	r0, r3
 8005828:	f7fb f8a3 	bl	8000972 <assert_failed>

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800582c:	693b      	ldr	r3, [r7, #16]
 800582e:	4a19      	ldr	r2, [pc, #100]	; (8005894 <TIM_OC1_SetConfig+0x180>)
 8005830:	4013      	ands	r3, r2
 8005832:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005834:	693b      	ldr	r3, [r7, #16]
 8005836:	4a18      	ldr	r2, [pc, #96]	; (8005898 <TIM_OC1_SetConfig+0x184>)
 8005838:	4013      	ands	r3, r2
 800583a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800583c:	683b      	ldr	r3, [r7, #0]
 800583e:	695b      	ldr	r3, [r3, #20]
 8005840:	693a      	ldr	r2, [r7, #16]
 8005842:	4313      	orrs	r3, r2
 8005844:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005846:	683b      	ldr	r3, [r7, #0]
 8005848:	699b      	ldr	r3, [r3, #24]
 800584a:	693a      	ldr	r2, [r7, #16]
 800584c:	4313      	orrs	r3, r2
 800584e:	613b      	str	r3, [r7, #16]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	693a      	ldr	r2, [r7, #16]
 8005854:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	68fa      	ldr	r2, [r7, #12]
 800585a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800585c:	683b      	ldr	r3, [r7, #0]
 800585e:	685a      	ldr	r2, [r3, #4]
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	697a      	ldr	r2, [r7, #20]
 8005868:	621a      	str	r2, [r3, #32]
}
 800586a:	46c0      	nop			; (mov r8, r8)
 800586c:	46bd      	mov	sp, r7
 800586e:	b006      	add	sp, #24
 8005870:	bd80      	pop	{r7, pc}
 8005872:	46c0      	nop			; (mov r8, r8)
 8005874:	40012c00 	.word	0x40012c00
 8005878:	40014000 	.word	0x40014000
 800587c:	40014400 	.word	0x40014400
 8005880:	40014800 	.word	0x40014800
 8005884:	00001290 	.word	0x00001290
 8005888:	080070bc 	.word	0x080070bc
 800588c:	0000129d 	.word	0x0000129d
 8005890:	0000129e 	.word	0x0000129e
 8005894:	fffffeff 	.word	0xfffffeff
 8005898:	fffffdff 	.word	0xfffffdff

0800589c <TIM_OC2_SetConfig>:
  * @param  TIMx  to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800589c:	b580      	push	{r7, lr}
 800589e:	b086      	sub	sp, #24
 80058a0:	af00      	add	r7, sp, #0
 80058a2:	6078      	str	r0, [r7, #4]
 80058a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx = 0U;
 80058a6:	2300      	movs	r3, #0
 80058a8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpccer = 0U;
 80058aa:	2300      	movs	r3, #0
 80058ac:	617b      	str	r3, [r7, #20]
  uint32_t tmpcr2 = 0U;
 80058ae:	2300      	movs	r3, #0
 80058b0:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	6a1b      	ldr	r3, [r3, #32]
 80058b6:	2210      	movs	r2, #16
 80058b8:	4393      	bics	r3, r2
 80058ba:	001a      	movs	r2, r3
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	6a1b      	ldr	r3, [r3, #32]
 80058c4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	685b      	ldr	r3, [r3, #4]
 80058ca:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	699b      	ldr	r3, [r3, #24]
 80058d0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	4a45      	ldr	r2, [pc, #276]	; (80059ec <TIM_OC2_SetConfig+0x150>)
 80058d6:	4013      	ands	r3, r2
 80058d8:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	4a44      	ldr	r2, [pc, #272]	; (80059f0 <TIM_OC2_SetConfig+0x154>)
 80058de:	4013      	ands	r3, r2
 80058e0:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80058e2:	683b      	ldr	r3, [r7, #0]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	021b      	lsls	r3, r3, #8
 80058e8:	68fa      	ldr	r2, [r7, #12]
 80058ea:	4313      	orrs	r3, r2
 80058ec:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80058ee:	697b      	ldr	r3, [r7, #20]
 80058f0:	2220      	movs	r2, #32
 80058f2:	4393      	bics	r3, r2
 80058f4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80058f6:	683b      	ldr	r3, [r7, #0]
 80058f8:	689b      	ldr	r3, [r3, #8]
 80058fa:	011b      	lsls	r3, r3, #4
 80058fc:	697a      	ldr	r2, [r7, #20]
 80058fe:	4313      	orrs	r3, r2
 8005900:	617b      	str	r3, [r7, #20]

  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	4a3b      	ldr	r2, [pc, #236]	; (80059f4 <TIM_OC2_SetConfig+0x158>)
 8005906:	4293      	cmp	r3, r2
 8005908:	d11b      	bne.n	8005942 <TIM_OC2_SetConfig+0xa6>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 800590a:	683b      	ldr	r3, [r7, #0]
 800590c:	68db      	ldr	r3, [r3, #12]
 800590e:	2b00      	cmp	r3, #0
 8005910:	d009      	beq.n	8005926 <TIM_OC2_SetConfig+0x8a>
 8005912:	683b      	ldr	r3, [r7, #0]
 8005914:	68db      	ldr	r3, [r3, #12]
 8005916:	2b08      	cmp	r3, #8
 8005918:	d005      	beq.n	8005926 <TIM_OC2_SetConfig+0x8a>
 800591a:	4a37      	ldr	r2, [pc, #220]	; (80059f8 <TIM_OC2_SetConfig+0x15c>)
 800591c:	4b37      	ldr	r3, [pc, #220]	; (80059fc <TIM_OC2_SetConfig+0x160>)
 800591e:	0011      	movs	r1, r2
 8005920:	0018      	movs	r0, r3
 8005922:	f7fb f826 	bl	8000972 <assert_failed>

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005926:	697b      	ldr	r3, [r7, #20]
 8005928:	2280      	movs	r2, #128	; 0x80
 800592a:	4393      	bics	r3, r2
 800592c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800592e:	683b      	ldr	r3, [r7, #0]
 8005930:	68db      	ldr	r3, [r3, #12]
 8005932:	011b      	lsls	r3, r3, #4
 8005934:	697a      	ldr	r2, [r7, #20]
 8005936:	4313      	orrs	r3, r2
 8005938:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800593a:	697b      	ldr	r3, [r7, #20]
 800593c:	2240      	movs	r2, #64	; 0x40
 800593e:	4393      	bics	r3, r2
 8005940:	617b      	str	r3, [r7, #20]

  }

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	4a2b      	ldr	r2, [pc, #172]	; (80059f4 <TIM_OC2_SetConfig+0x158>)
 8005946:	4293      	cmp	r3, r2
 8005948:	d00b      	beq.n	8005962 <TIM_OC2_SetConfig+0xc6>
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	4a2c      	ldr	r2, [pc, #176]	; (8005a00 <TIM_OC2_SetConfig+0x164>)
 800594e:	4293      	cmp	r3, r2
 8005950:	d007      	beq.n	8005962 <TIM_OC2_SetConfig+0xc6>
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	4a2b      	ldr	r2, [pc, #172]	; (8005a04 <TIM_OC2_SetConfig+0x168>)
 8005956:	4293      	cmp	r3, r2
 8005958:	d003      	beq.n	8005962 <TIM_OC2_SetConfig+0xc6>
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	4a2a      	ldr	r2, [pc, #168]	; (8005a08 <TIM_OC2_SetConfig+0x16c>)
 800595e:	4293      	cmp	r3, r2
 8005960:	d133      	bne.n	80059ca <TIM_OC2_SetConfig+0x12e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 8005962:	683b      	ldr	r3, [r7, #0]
 8005964:	699a      	ldr	r2, [r3, #24]
 8005966:	2380      	movs	r3, #128	; 0x80
 8005968:	009b      	lsls	r3, r3, #2
 800596a:	429a      	cmp	r2, r3
 800596c:	d009      	beq.n	8005982 <TIM_OC2_SetConfig+0xe6>
 800596e:	683b      	ldr	r3, [r7, #0]
 8005970:	699b      	ldr	r3, [r3, #24]
 8005972:	2b00      	cmp	r3, #0
 8005974:	d005      	beq.n	8005982 <TIM_OC2_SetConfig+0xe6>
 8005976:	4a25      	ldr	r2, [pc, #148]	; (8005a0c <TIM_OC2_SetConfig+0x170>)
 8005978:	4b20      	ldr	r3, [pc, #128]	; (80059fc <TIM_OC2_SetConfig+0x160>)
 800597a:	0011      	movs	r1, r2
 800597c:	0018      	movs	r0, r3
 800597e:	f7fa fff8 	bl	8000972 <assert_failed>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 8005982:	683b      	ldr	r3, [r7, #0]
 8005984:	695a      	ldr	r2, [r3, #20]
 8005986:	2380      	movs	r3, #128	; 0x80
 8005988:	005b      	lsls	r3, r3, #1
 800598a:	429a      	cmp	r2, r3
 800598c:	d009      	beq.n	80059a2 <TIM_OC2_SetConfig+0x106>
 800598e:	683b      	ldr	r3, [r7, #0]
 8005990:	695b      	ldr	r3, [r3, #20]
 8005992:	2b00      	cmp	r3, #0
 8005994:	d005      	beq.n	80059a2 <TIM_OC2_SetConfig+0x106>
 8005996:	4a1e      	ldr	r2, [pc, #120]	; (8005a10 <TIM_OC2_SetConfig+0x174>)
 8005998:	4b18      	ldr	r3, [pc, #96]	; (80059fc <TIM_OC2_SetConfig+0x160>)
 800599a:	0011      	movs	r1, r2
 800599c:	0018      	movs	r0, r3
 800599e:	f7fa ffe8 	bl	8000972 <assert_failed>

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80059a2:	693b      	ldr	r3, [r7, #16]
 80059a4:	4a1b      	ldr	r2, [pc, #108]	; (8005a14 <TIM_OC2_SetConfig+0x178>)
 80059a6:	4013      	ands	r3, r2
 80059a8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80059aa:	693b      	ldr	r3, [r7, #16]
 80059ac:	4a1a      	ldr	r2, [pc, #104]	; (8005a18 <TIM_OC2_SetConfig+0x17c>)
 80059ae:	4013      	ands	r3, r2
 80059b0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80059b2:	683b      	ldr	r3, [r7, #0]
 80059b4:	695b      	ldr	r3, [r3, #20]
 80059b6:	009b      	lsls	r3, r3, #2
 80059b8:	693a      	ldr	r2, [r7, #16]
 80059ba:	4313      	orrs	r3, r2
 80059bc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80059be:	683b      	ldr	r3, [r7, #0]
 80059c0:	699b      	ldr	r3, [r3, #24]
 80059c2:	009b      	lsls	r3, r3, #2
 80059c4:	693a      	ldr	r2, [r7, #16]
 80059c6:	4313      	orrs	r3, r2
 80059c8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	693a      	ldr	r2, [r7, #16]
 80059ce:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	68fa      	ldr	r2, [r7, #12]
 80059d4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80059d6:	683b      	ldr	r3, [r7, #0]
 80059d8:	685a      	ldr	r2, [r3, #4]
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	697a      	ldr	r2, [r7, #20]
 80059e2:	621a      	str	r2, [r3, #32]
}
 80059e4:	46c0      	nop			; (mov r8, r8)
 80059e6:	46bd      	mov	sp, r7
 80059e8:	b006      	add	sp, #24
 80059ea:	bd80      	pop	{r7, pc}
 80059ec:	ffff8fff 	.word	0xffff8fff
 80059f0:	fffffcff 	.word	0xfffffcff
 80059f4:	40012c00 	.word	0x40012c00
 80059f8:	000012da 	.word	0x000012da
 80059fc:	080070bc 	.word	0x080070bc
 8005a00:	40014000 	.word	0x40014000
 8005a04:	40014400 	.word	0x40014400
 8005a08:	40014800 	.word	0x40014800
 8005a0c:	000012e8 	.word	0x000012e8
 8005a10:	000012e9 	.word	0x000012e9
 8005a14:	fffffbff 	.word	0xfffffbff
 8005a18:	fffff7ff 	.word	0xfffff7ff

08005a1c <TIM_OC3_SetConfig>:
  * @param  TIMx  to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005a1c:	b580      	push	{r7, lr}
 8005a1e:	b086      	sub	sp, #24
 8005a20:	af00      	add	r7, sp, #0
 8005a22:	6078      	str	r0, [r7, #4]
 8005a24:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx = 0U;
 8005a26:	2300      	movs	r3, #0
 8005a28:	60fb      	str	r3, [r7, #12]
  uint32_t tmpccer = 0U;
 8005a2a:	2300      	movs	r3, #0
 8005a2c:	617b      	str	r3, [r7, #20]
  uint32_t tmpcr2 = 0U;
 8005a2e:	2300      	movs	r3, #0
 8005a30:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	6a1b      	ldr	r3, [r3, #32]
 8005a36:	4a4c      	ldr	r2, [pc, #304]	; (8005b68 <TIM_OC3_SetConfig+0x14c>)
 8005a38:	401a      	ands	r2, r3
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	6a1b      	ldr	r3, [r3, #32]
 8005a42:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	685b      	ldr	r3, [r3, #4]
 8005a48:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	69db      	ldr	r3, [r3, #28]
 8005a4e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	2270      	movs	r2, #112	; 0x70
 8005a54:	4393      	bics	r3, r2
 8005a56:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	2203      	movs	r2, #3
 8005a5c:	4393      	bics	r3, r2
 8005a5e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005a60:	683b      	ldr	r3, [r7, #0]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	68fa      	ldr	r2, [r7, #12]
 8005a66:	4313      	orrs	r3, r2
 8005a68:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005a6a:	697b      	ldr	r3, [r7, #20]
 8005a6c:	4a3f      	ldr	r2, [pc, #252]	; (8005b6c <TIM_OC3_SetConfig+0x150>)
 8005a6e:	4013      	ands	r3, r2
 8005a70:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005a72:	683b      	ldr	r3, [r7, #0]
 8005a74:	689b      	ldr	r3, [r3, #8]
 8005a76:	021b      	lsls	r3, r3, #8
 8005a78:	697a      	ldr	r2, [r7, #20]
 8005a7a:	4313      	orrs	r3, r2
 8005a7c:	617b      	str	r3, [r7, #20]

  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	4a3b      	ldr	r2, [pc, #236]	; (8005b70 <TIM_OC3_SetConfig+0x154>)
 8005a82:	4293      	cmp	r3, r2
 8005a84:	d11b      	bne.n	8005abe <TIM_OC3_SetConfig+0xa2>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 8005a86:	683b      	ldr	r3, [r7, #0]
 8005a88:	68db      	ldr	r3, [r3, #12]
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d009      	beq.n	8005aa2 <TIM_OC3_SetConfig+0x86>
 8005a8e:	683b      	ldr	r3, [r7, #0]
 8005a90:	68db      	ldr	r3, [r3, #12]
 8005a92:	2b08      	cmp	r3, #8
 8005a94:	d005      	beq.n	8005aa2 <TIM_OC3_SetConfig+0x86>
 8005a96:	4a37      	ldr	r2, [pc, #220]	; (8005b74 <TIM_OC3_SetConfig+0x158>)
 8005a98:	4b37      	ldr	r3, [pc, #220]	; (8005b78 <TIM_OC3_SetConfig+0x15c>)
 8005a9a:	0011      	movs	r1, r2
 8005a9c:	0018      	movs	r0, r3
 8005a9e:	f7fa ff68 	bl	8000972 <assert_failed>

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005aa2:	697b      	ldr	r3, [r7, #20]
 8005aa4:	4a35      	ldr	r2, [pc, #212]	; (8005b7c <TIM_OC3_SetConfig+0x160>)
 8005aa6:	4013      	ands	r3, r2
 8005aa8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005aaa:	683b      	ldr	r3, [r7, #0]
 8005aac:	68db      	ldr	r3, [r3, #12]
 8005aae:	021b      	lsls	r3, r3, #8
 8005ab0:	697a      	ldr	r2, [r7, #20]
 8005ab2:	4313      	orrs	r3, r2
 8005ab4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005ab6:	697b      	ldr	r3, [r7, #20]
 8005ab8:	4a31      	ldr	r2, [pc, #196]	; (8005b80 <TIM_OC3_SetConfig+0x164>)
 8005aba:	4013      	ands	r3, r2
 8005abc:	617b      	str	r3, [r7, #20]
  }

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	4a2b      	ldr	r2, [pc, #172]	; (8005b70 <TIM_OC3_SetConfig+0x154>)
 8005ac2:	4293      	cmp	r3, r2
 8005ac4:	d00b      	beq.n	8005ade <TIM_OC3_SetConfig+0xc2>
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	4a2e      	ldr	r2, [pc, #184]	; (8005b84 <TIM_OC3_SetConfig+0x168>)
 8005aca:	4293      	cmp	r3, r2
 8005acc:	d007      	beq.n	8005ade <TIM_OC3_SetConfig+0xc2>
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	4a2d      	ldr	r2, [pc, #180]	; (8005b88 <TIM_OC3_SetConfig+0x16c>)
 8005ad2:	4293      	cmp	r3, r2
 8005ad4:	d003      	beq.n	8005ade <TIM_OC3_SetConfig+0xc2>
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	4a2c      	ldr	r2, [pc, #176]	; (8005b8c <TIM_OC3_SetConfig+0x170>)
 8005ada:	4293      	cmp	r3, r2
 8005adc:	d133      	bne.n	8005b46 <TIM_OC3_SetConfig+0x12a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 8005ade:	683b      	ldr	r3, [r7, #0]
 8005ae0:	699a      	ldr	r2, [r3, #24]
 8005ae2:	2380      	movs	r3, #128	; 0x80
 8005ae4:	009b      	lsls	r3, r3, #2
 8005ae6:	429a      	cmp	r2, r3
 8005ae8:	d009      	beq.n	8005afe <TIM_OC3_SetConfig+0xe2>
 8005aea:	683b      	ldr	r3, [r7, #0]
 8005aec:	699b      	ldr	r3, [r3, #24]
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d005      	beq.n	8005afe <TIM_OC3_SetConfig+0xe2>
 8005af2:	4a27      	ldr	r2, [pc, #156]	; (8005b90 <TIM_OC3_SetConfig+0x174>)
 8005af4:	4b20      	ldr	r3, [pc, #128]	; (8005b78 <TIM_OC3_SetConfig+0x15c>)
 8005af6:	0011      	movs	r1, r2
 8005af8:	0018      	movs	r0, r3
 8005afa:	f7fa ff3a 	bl	8000972 <assert_failed>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 8005afe:	683b      	ldr	r3, [r7, #0]
 8005b00:	695a      	ldr	r2, [r3, #20]
 8005b02:	2380      	movs	r3, #128	; 0x80
 8005b04:	005b      	lsls	r3, r3, #1
 8005b06:	429a      	cmp	r2, r3
 8005b08:	d009      	beq.n	8005b1e <TIM_OC3_SetConfig+0x102>
 8005b0a:	683b      	ldr	r3, [r7, #0]
 8005b0c:	695b      	ldr	r3, [r3, #20]
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d005      	beq.n	8005b1e <TIM_OC3_SetConfig+0x102>
 8005b12:	4a20      	ldr	r2, [pc, #128]	; (8005b94 <TIM_OC3_SetConfig+0x178>)
 8005b14:	4b18      	ldr	r3, [pc, #96]	; (8005b78 <TIM_OC3_SetConfig+0x15c>)
 8005b16:	0011      	movs	r1, r2
 8005b18:	0018      	movs	r0, r3
 8005b1a:	f7fa ff2a 	bl	8000972 <assert_failed>

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005b1e:	693b      	ldr	r3, [r7, #16]
 8005b20:	4a1d      	ldr	r2, [pc, #116]	; (8005b98 <TIM_OC3_SetConfig+0x17c>)
 8005b22:	4013      	ands	r3, r2
 8005b24:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005b26:	693b      	ldr	r3, [r7, #16]
 8005b28:	4a1c      	ldr	r2, [pc, #112]	; (8005b9c <TIM_OC3_SetConfig+0x180>)
 8005b2a:	4013      	ands	r3, r2
 8005b2c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005b2e:	683b      	ldr	r3, [r7, #0]
 8005b30:	695b      	ldr	r3, [r3, #20]
 8005b32:	011b      	lsls	r3, r3, #4
 8005b34:	693a      	ldr	r2, [r7, #16]
 8005b36:	4313      	orrs	r3, r2
 8005b38:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005b3a:	683b      	ldr	r3, [r7, #0]
 8005b3c:	699b      	ldr	r3, [r3, #24]
 8005b3e:	011b      	lsls	r3, r3, #4
 8005b40:	693a      	ldr	r2, [r7, #16]
 8005b42:	4313      	orrs	r3, r2
 8005b44:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	693a      	ldr	r2, [r7, #16]
 8005b4a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	68fa      	ldr	r2, [r7, #12]
 8005b50:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005b52:	683b      	ldr	r3, [r7, #0]
 8005b54:	685a      	ldr	r2, [r3, #4]
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	697a      	ldr	r2, [r7, #20]
 8005b5e:	621a      	str	r2, [r3, #32]
}
 8005b60:	46c0      	nop			; (mov r8, r8)
 8005b62:	46bd      	mov	sp, r7
 8005b64:	b006      	add	sp, #24
 8005b66:	bd80      	pop	{r7, pc}
 8005b68:	fffffeff 	.word	0xfffffeff
 8005b6c:	fffffdff 	.word	0xfffffdff
 8005b70:	40012c00 	.word	0x40012c00
 8005b74:	00001325 	.word	0x00001325
 8005b78:	080070bc 	.word	0x080070bc
 8005b7c:	fffff7ff 	.word	0xfffff7ff
 8005b80:	fffffbff 	.word	0xfffffbff
 8005b84:	40014000 	.word	0x40014000
 8005b88:	40014400 	.word	0x40014400
 8005b8c:	40014800 	.word	0x40014800
 8005b90:	00001332 	.word	0x00001332
 8005b94:	00001333 	.word	0x00001333
 8005b98:	ffffefff 	.word	0xffffefff
 8005b9c:	ffffdfff 	.word	0xffffdfff

08005ba0 <TIM_OC4_SetConfig>:
  * @param  TIMx  to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005ba0:	b580      	push	{r7, lr}
 8005ba2:	b086      	sub	sp, #24
 8005ba4:	af00      	add	r7, sp, #0
 8005ba6:	6078      	str	r0, [r7, #4]
 8005ba8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx = 0U;
 8005baa:	2300      	movs	r3, #0
 8005bac:	613b      	str	r3, [r7, #16]
  uint32_t tmpccer = 0U;
 8005bae:	2300      	movs	r3, #0
 8005bb0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpcr2 = 0U;
 8005bb2:	2300      	movs	r3, #0
 8005bb4:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	6a1b      	ldr	r3, [r3, #32]
 8005bba:	4a30      	ldr	r2, [pc, #192]	; (8005c7c <TIM_OC4_SetConfig+0xdc>)
 8005bbc:	401a      	ands	r2, r3
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	6a1b      	ldr	r3, [r3, #32]
 8005bc6:	60fb      	str	r3, [r7, #12]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	685b      	ldr	r3, [r3, #4]
 8005bcc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	69db      	ldr	r3, [r3, #28]
 8005bd2:	613b      	str	r3, [r7, #16]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005bd4:	693b      	ldr	r3, [r7, #16]
 8005bd6:	4a2a      	ldr	r2, [pc, #168]	; (8005c80 <TIM_OC4_SetConfig+0xe0>)
 8005bd8:	4013      	ands	r3, r2
 8005bda:	613b      	str	r3, [r7, #16]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005bdc:	693b      	ldr	r3, [r7, #16]
 8005bde:	4a29      	ldr	r2, [pc, #164]	; (8005c84 <TIM_OC4_SetConfig+0xe4>)
 8005be0:	4013      	ands	r3, r2
 8005be2:	613b      	str	r3, [r7, #16]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005be4:	683b      	ldr	r3, [r7, #0]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	021b      	lsls	r3, r3, #8
 8005bea:	693a      	ldr	r2, [r7, #16]
 8005bec:	4313      	orrs	r3, r2
 8005bee:	613b      	str	r3, [r7, #16]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	4a25      	ldr	r2, [pc, #148]	; (8005c88 <TIM_OC4_SetConfig+0xe8>)
 8005bf4:	4013      	ands	r3, r2
 8005bf6:	60fb      	str	r3, [r7, #12]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005bf8:	683b      	ldr	r3, [r7, #0]
 8005bfa:	689b      	ldr	r3, [r3, #8]
 8005bfc:	031b      	lsls	r3, r3, #12
 8005bfe:	68fa      	ldr	r2, [r7, #12]
 8005c00:	4313      	orrs	r3, r2
 8005c02:	60fb      	str	r3, [r7, #12]

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	4a21      	ldr	r2, [pc, #132]	; (8005c8c <TIM_OC4_SetConfig+0xec>)
 8005c08:	4293      	cmp	r3, r2
 8005c0a:	d00b      	beq.n	8005c24 <TIM_OC4_SetConfig+0x84>
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	4a20      	ldr	r2, [pc, #128]	; (8005c90 <TIM_OC4_SetConfig+0xf0>)
 8005c10:	4293      	cmp	r3, r2
 8005c12:	d007      	beq.n	8005c24 <TIM_OC4_SetConfig+0x84>
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	4a1f      	ldr	r2, [pc, #124]	; (8005c94 <TIM_OC4_SetConfig+0xf4>)
 8005c18:	4293      	cmp	r3, r2
 8005c1a:	d003      	beq.n	8005c24 <TIM_OC4_SetConfig+0x84>
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	4a1e      	ldr	r2, [pc, #120]	; (8005c98 <TIM_OC4_SetConfig+0xf8>)
 8005c20:	4293      	cmp	r3, r2
 8005c22:	d119      	bne.n	8005c58 <TIM_OC4_SetConfig+0xb8>
  {
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 8005c24:	683b      	ldr	r3, [r7, #0]
 8005c26:	695a      	ldr	r2, [r3, #20]
 8005c28:	2380      	movs	r3, #128	; 0x80
 8005c2a:	005b      	lsls	r3, r3, #1
 8005c2c:	429a      	cmp	r2, r3
 8005c2e:	d009      	beq.n	8005c44 <TIM_OC4_SetConfig+0xa4>
 8005c30:	683b      	ldr	r3, [r7, #0]
 8005c32:	695b      	ldr	r3, [r3, #20]
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	d005      	beq.n	8005c44 <TIM_OC4_SetConfig+0xa4>
 8005c38:	4a18      	ldr	r2, [pc, #96]	; (8005c9c <TIM_OC4_SetConfig+0xfc>)
 8005c3a:	4b19      	ldr	r3, [pc, #100]	; (8005ca0 <TIM_OC4_SetConfig+0x100>)
 8005c3c:	0011      	movs	r1, r2
 8005c3e:	0018      	movs	r0, r3
 8005c40:	f7fa fe97 	bl	8000972 <assert_failed>

   /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005c44:	697b      	ldr	r3, [r7, #20]
 8005c46:	4a17      	ldr	r2, [pc, #92]	; (8005ca4 <TIM_OC4_SetConfig+0x104>)
 8005c48:	4013      	ands	r3, r2
 8005c4a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005c4c:	683b      	ldr	r3, [r7, #0]
 8005c4e:	695b      	ldr	r3, [r3, #20]
 8005c50:	019b      	lsls	r3, r3, #6
 8005c52:	697a      	ldr	r2, [r7, #20]
 8005c54:	4313      	orrs	r3, r2
 8005c56:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	697a      	ldr	r2, [r7, #20]
 8005c5c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	693a      	ldr	r2, [r7, #16]
 8005c62:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005c64:	683b      	ldr	r3, [r7, #0]
 8005c66:	685a      	ldr	r2, [r3, #4]
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	68fa      	ldr	r2, [r7, #12]
 8005c70:	621a      	str	r2, [r3, #32]
}
 8005c72:	46c0      	nop			; (mov r8, r8)
 8005c74:	46bd      	mov	sp, r7
 8005c76:	b006      	add	sp, #24
 8005c78:	bd80      	pop	{r7, pc}
 8005c7a:	46c0      	nop			; (mov r8, r8)
 8005c7c:	ffffefff 	.word	0xffffefff
 8005c80:	ffff8fff 	.word	0xffff8fff
 8005c84:	fffffcff 	.word	0xfffffcff
 8005c88:	ffffdfff 	.word	0xffffdfff
 8005c8c:	40012c00 	.word	0x40012c00
 8005c90:	40014000 	.word	0x40014000
 8005c94:	40014400 	.word	0x40014400
 8005c98:	40014800 	.word	0x40014800
 8005c9c:	00001370 	.word	0x00001370
 8005ca0:	080070bc 	.word	0x080070bc
 8005ca4:	ffffbfff 	.word	0xffffbfff

08005ca8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005ca8:	b580      	push	{r7, lr}
 8005caa:	b086      	sub	sp, #24
 8005cac:	af00      	add	r7, sp, #0
 8005cae:	60f8      	str	r0, [r7, #12]
 8005cb0:	60b9      	str	r1, [r7, #8]
 8005cb2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1 = 0U;
 8005cb4:	2300      	movs	r3, #0
 8005cb6:	617b      	str	r3, [r7, #20]
  uint32_t tmpccer = 0U;
 8005cb8:	2300      	movs	r3, #0
 8005cba:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	6a1b      	ldr	r3, [r3, #32]
 8005cc0:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	6a1b      	ldr	r3, [r3, #32]
 8005cc6:	2201      	movs	r2, #1
 8005cc8:	4393      	bics	r3, r2
 8005cca:	001a      	movs	r2, r3
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	699b      	ldr	r3, [r3, #24]
 8005cd4:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005cd6:	697b      	ldr	r3, [r7, #20]
 8005cd8:	22f0      	movs	r2, #240	; 0xf0
 8005cda:	4393      	bics	r3, r2
 8005cdc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	011b      	lsls	r3, r3, #4
 8005ce2:	697a      	ldr	r2, [r7, #20]
 8005ce4:	4313      	orrs	r3, r2
 8005ce6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005ce8:	693b      	ldr	r3, [r7, #16]
 8005cea:	220a      	movs	r2, #10
 8005cec:	4393      	bics	r3, r2
 8005cee:	613b      	str	r3, [r7, #16]
  tmpccer |= TIM_ICPolarity;
 8005cf0:	693a      	ldr	r2, [r7, #16]
 8005cf2:	68bb      	ldr	r3, [r7, #8]
 8005cf4:	4313      	orrs	r3, r2
 8005cf6:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	697a      	ldr	r2, [r7, #20]
 8005cfc:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	693a      	ldr	r2, [r7, #16]
 8005d02:	621a      	str	r2, [r3, #32]
}
 8005d04:	46c0      	nop			; (mov r8, r8)
 8005d06:	46bd      	mov	sp, r7
 8005d08:	b006      	add	sp, #24
 8005d0a:	bd80      	pop	{r7, pc}

08005d0c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005d0c:	b580      	push	{r7, lr}
 8005d0e:	b086      	sub	sp, #24
 8005d10:	af00      	add	r7, sp, #0
 8005d12:	60f8      	str	r0, [r7, #12]
 8005d14:	60b9      	str	r1, [r7, #8]
 8005d16:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1 = 0U;
 8005d18:	2300      	movs	r3, #0
 8005d1a:	617b      	str	r3, [r7, #20]
  uint32_t tmpccer = 0U;
 8005d1c:	2300      	movs	r3, #0
 8005d1e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	6a1b      	ldr	r3, [r3, #32]
 8005d24:	2210      	movs	r2, #16
 8005d26:	4393      	bics	r3, r2
 8005d28:	001a      	movs	r2, r3
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	699b      	ldr	r3, [r3, #24]
 8005d32:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	6a1b      	ldr	r3, [r3, #32]
 8005d38:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005d3a:	697b      	ldr	r3, [r7, #20]
 8005d3c:	4a0d      	ldr	r2, [pc, #52]	; (8005d74 <TIM_TI2_ConfigInputStage+0x68>)
 8005d3e:	4013      	ands	r3, r2
 8005d40:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	031b      	lsls	r3, r3, #12
 8005d46:	697a      	ldr	r2, [r7, #20]
 8005d48:	4313      	orrs	r3, r2
 8005d4a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005d4c:	693b      	ldr	r3, [r7, #16]
 8005d4e:	22a0      	movs	r2, #160	; 0xa0
 8005d50:	4393      	bics	r3, r2
 8005d52:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005d54:	68bb      	ldr	r3, [r7, #8]
 8005d56:	011b      	lsls	r3, r3, #4
 8005d58:	693a      	ldr	r2, [r7, #16]
 8005d5a:	4313      	orrs	r3, r2
 8005d5c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	697a      	ldr	r2, [r7, #20]
 8005d62:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	693a      	ldr	r2, [r7, #16]
 8005d68:	621a      	str	r2, [r3, #32]
}
 8005d6a:	46c0      	nop			; (mov r8, r8)
 8005d6c:	46bd      	mov	sp, r7
 8005d6e:	b006      	add	sp, #24
 8005d70:	bd80      	pop	{r7, pc}
 8005d72:	46c0      	nop			; (mov r8, r8)
 8005d74:	ffff0fff 	.word	0xffff0fff

08005d78 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2 : Filtered Timer Input 2
  *            @arg TIM_TS_ETRF : External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint16_t InputTriggerSource)
{
 8005d78:	b580      	push	{r7, lr}
 8005d7a:	b084      	sub	sp, #16
 8005d7c:	af00      	add	r7, sp, #0
 8005d7e:	6078      	str	r0, [r7, #4]
 8005d80:	000a      	movs	r2, r1
 8005d82:	1cbb      	adds	r3, r7, #2
 8005d84:	801a      	strh	r2, [r3, #0]
  uint32_t tmpsmcr = 0U;
 8005d86:	2300      	movs	r3, #0
 8005d88:	60fb      	str	r3, [r7, #12]

   /* Get the TIMx SMCR register value */
   tmpsmcr = TIMx->SMCR;
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	689b      	ldr	r3, [r3, #8]
 8005d8e:	60fb      	str	r3, [r7, #12]
   /* Reset the TS Bits */
   tmpsmcr &= ~TIM_SMCR_TS;
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	2270      	movs	r2, #112	; 0x70
 8005d94:	4393      	bics	r3, r2
 8005d96:	60fb      	str	r3, [r7, #12]
   /* Set the Input Trigger source and the slave mode*/
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8005d98:	1cbb      	adds	r3, r7, #2
 8005d9a:	881b      	ldrh	r3, [r3, #0]
 8005d9c:	2207      	movs	r2, #7
 8005d9e:	4313      	orrs	r3, r2
 8005da0:	b29b      	uxth	r3, r3
 8005da2:	001a      	movs	r2, r3
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	4313      	orrs	r3, r2
 8005da8:	60fb      	str	r3, [r7, #12]
   /* Write to TIMx SMCR */
   TIMx->SMCR = tmpsmcr;
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	68fa      	ldr	r2, [r7, #12]
 8005dae:	609a      	str	r2, [r3, #8]
}
 8005db0:	46c0      	nop			; (mov r8, r8)
 8005db2:	46bd      	mov	sp, r7
 8005db4:	b004      	add	sp, #16
 8005db6:	bd80      	pop	{r7, pc}

08005db8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef* TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005db8:	b580      	push	{r7, lr}
 8005dba:	b086      	sub	sp, #24
 8005dbc:	af00      	add	r7, sp, #0
 8005dbe:	60f8      	str	r0, [r7, #12]
 8005dc0:	60b9      	str	r1, [r7, #8]
 8005dc2:	607a      	str	r2, [r7, #4]
 8005dc4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr = 0U;
 8005dc6:	2300      	movs	r3, #0
 8005dc8:	617b      	str	r3, [r7, #20]

  tmpsmcr = TIMx->SMCR;
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	689b      	ldr	r3, [r3, #8]
 8005dce:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005dd0:	697b      	ldr	r3, [r7, #20]
 8005dd2:	4a09      	ldr	r2, [pc, #36]	; (8005df8 <TIM_ETR_SetConfig+0x40>)
 8005dd4:	4013      	ands	r3, r2
 8005dd6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005dd8:	683b      	ldr	r3, [r7, #0]
 8005dda:	021a      	lsls	r2, r3, #8
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	431a      	orrs	r2, r3
 8005de0:	68bb      	ldr	r3, [r7, #8]
 8005de2:	4313      	orrs	r3, r2
 8005de4:	697a      	ldr	r2, [r7, #20]
 8005de6:	4313      	orrs	r3, r2
 8005de8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	697a      	ldr	r2, [r7, #20]
 8005dee:	609a      	str	r2, [r3, #8]
}
 8005df0:	46c0      	nop			; (mov r8, r8)
 8005df2:	46bd      	mov	sp, r7
 8005df4:	b006      	add	sp, #24
 8005df6:	bd80      	pop	{r7, pc}
 8005df8:	ffff00ff 	.word	0xffff00ff

08005dfc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_Disable.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef* TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005dfc:	b580      	push	{r7, lr}
 8005dfe:	b086      	sub	sp, #24
 8005e00:	af00      	add	r7, sp, #0
 8005e02:	60f8      	str	r0, [r7, #12]
 8005e04:	60b9      	str	r1, [r7, #8]
 8005e06:	607a      	str	r2, [r7, #4]
  uint32_t tmp = 0U;
 8005e08:	2300      	movs	r3, #0
 8005e0a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	4a28      	ldr	r2, [pc, #160]	; (8005eb0 <TIM_CCxChannelCmd+0xb4>)
 8005e10:	4293      	cmp	r3, r2
 8005e12:	d01e      	beq.n	8005e52 <TIM_CCxChannelCmd+0x56>
 8005e14:	68fa      	ldr	r2, [r7, #12]
 8005e16:	2380      	movs	r3, #128	; 0x80
 8005e18:	05db      	lsls	r3, r3, #23
 8005e1a:	429a      	cmp	r2, r3
 8005e1c:	d019      	beq.n	8005e52 <TIM_CCxChannelCmd+0x56>
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	4a24      	ldr	r2, [pc, #144]	; (8005eb4 <TIM_CCxChannelCmd+0xb8>)
 8005e22:	4293      	cmp	r3, r2
 8005e24:	d015      	beq.n	8005e52 <TIM_CCxChannelCmd+0x56>
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	4a23      	ldr	r2, [pc, #140]	; (8005eb8 <TIM_CCxChannelCmd+0xbc>)
 8005e2a:	4293      	cmp	r3, r2
 8005e2c:	d011      	beq.n	8005e52 <TIM_CCxChannelCmd+0x56>
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	4a22      	ldr	r2, [pc, #136]	; (8005ebc <TIM_CCxChannelCmd+0xc0>)
 8005e32:	4293      	cmp	r3, r2
 8005e34:	d00d      	beq.n	8005e52 <TIM_CCxChannelCmd+0x56>
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	4a21      	ldr	r2, [pc, #132]	; (8005ec0 <TIM_CCxChannelCmd+0xc4>)
 8005e3a:	4293      	cmp	r3, r2
 8005e3c:	d009      	beq.n	8005e52 <TIM_CCxChannelCmd+0x56>
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	4a20      	ldr	r2, [pc, #128]	; (8005ec4 <TIM_CCxChannelCmd+0xc8>)
 8005e42:	4293      	cmp	r3, r2
 8005e44:	d005      	beq.n	8005e52 <TIM_CCxChannelCmd+0x56>
 8005e46:	4a20      	ldr	r2, [pc, #128]	; (8005ec8 <TIM_CCxChannelCmd+0xcc>)
 8005e48:	4b20      	ldr	r3, [pc, #128]	; (8005ecc <TIM_CCxChannelCmd+0xd0>)
 8005e4a:	0011      	movs	r1, r2
 8005e4c:	0018      	movs	r0, r3
 8005e4e:	f7fa fd90 	bl	8000972 <assert_failed>
  assert_param(IS_TIM_CHANNELS(Channel));
 8005e52:	68bb      	ldr	r3, [r7, #8]
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	d011      	beq.n	8005e7c <TIM_CCxChannelCmd+0x80>
 8005e58:	68bb      	ldr	r3, [r7, #8]
 8005e5a:	2b04      	cmp	r3, #4
 8005e5c:	d00e      	beq.n	8005e7c <TIM_CCxChannelCmd+0x80>
 8005e5e:	68bb      	ldr	r3, [r7, #8]
 8005e60:	2b08      	cmp	r3, #8
 8005e62:	d00b      	beq.n	8005e7c <TIM_CCxChannelCmd+0x80>
 8005e64:	68bb      	ldr	r3, [r7, #8]
 8005e66:	2b0c      	cmp	r3, #12
 8005e68:	d008      	beq.n	8005e7c <TIM_CCxChannelCmd+0x80>
 8005e6a:	68bb      	ldr	r3, [r7, #8]
 8005e6c:	2b18      	cmp	r3, #24
 8005e6e:	d005      	beq.n	8005e7c <TIM_CCxChannelCmd+0x80>
 8005e70:	4a17      	ldr	r2, [pc, #92]	; (8005ed0 <TIM_CCxChannelCmd+0xd4>)
 8005e72:	4b16      	ldr	r3, [pc, #88]	; (8005ecc <TIM_CCxChannelCmd+0xd0>)
 8005e74:	0011      	movs	r1, r2
 8005e76:	0018      	movs	r0, r3
 8005e78:	f7fa fd7b 	bl	8000972 <assert_failed>

  tmp = TIM_CCER_CC1E << Channel;
 8005e7c:	2201      	movs	r2, #1
 8005e7e:	68bb      	ldr	r3, [r7, #8]
 8005e80:	409a      	lsls	r2, r3
 8005e82:	0013      	movs	r3, r2
 8005e84:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	6a1b      	ldr	r3, [r3, #32]
 8005e8a:	697a      	ldr	r2, [r7, #20]
 8005e8c:	43d2      	mvns	r2, r2
 8005e8e:	401a      	ands	r2, r3
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |=  (uint32_t)(ChannelState << Channel);
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	6a1a      	ldr	r2, [r3, #32]
 8005e98:	6879      	ldr	r1, [r7, #4]
 8005e9a:	68bb      	ldr	r3, [r7, #8]
 8005e9c:	4099      	lsls	r1, r3
 8005e9e:	000b      	movs	r3, r1
 8005ea0:	431a      	orrs	r2, r3
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	621a      	str	r2, [r3, #32]
}
 8005ea6:	46c0      	nop			; (mov r8, r8)
 8005ea8:	46bd      	mov	sp, r7
 8005eaa:	b006      	add	sp, #24
 8005eac:	bd80      	pop	{r7, pc}
 8005eae:	46c0      	nop			; (mov r8, r8)
 8005eb0:	40012c00 	.word	0x40012c00
 8005eb4:	40000400 	.word	0x40000400
 8005eb8:	40002000 	.word	0x40002000
 8005ebc:	40014000 	.word	0x40014000
 8005ec0:	40014400 	.word	0x40014400
 8005ec4:	40014800 	.word	0x40014800
 8005ec8:	0000155e 	.word	0x0000155e
 8005ecc:	080070bc 	.word	0x080070bc
 8005ed0:	0000155f 	.word	0x0000155f

08005ed4 <HAL_TIMEx_OCN_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_OCN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005ed4:	b580      	push	{r7, lr}
 8005ed6:	b082      	sub	sp, #8
 8005ed8:	af00      	add	r7, sp, #0
 8005eda:	6078      	str	r0, [r7, #4]
 8005edc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	4a24      	ldr	r2, [pc, #144]	; (8005f74 <HAL_TIMEx_OCN_Start+0xa0>)
 8005ee4:	4293      	cmp	r3, r2
 8005ee6:	d108      	bne.n	8005efa <HAL_TIMEx_OCN_Start+0x26>
 8005ee8:	683b      	ldr	r3, [r7, #0]
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d024      	beq.n	8005f38 <HAL_TIMEx_OCN_Start+0x64>
 8005eee:	683b      	ldr	r3, [r7, #0]
 8005ef0:	2b04      	cmp	r3, #4
 8005ef2:	d021      	beq.n	8005f38 <HAL_TIMEx_OCN_Start+0x64>
 8005ef4:	683b      	ldr	r3, [r7, #0]
 8005ef6:	2b08      	cmp	r3, #8
 8005ef8:	d01e      	beq.n	8005f38 <HAL_TIMEx_OCN_Start+0x64>
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	4a1e      	ldr	r2, [pc, #120]	; (8005f78 <HAL_TIMEx_OCN_Start+0xa4>)
 8005f00:	4293      	cmp	r3, r2
 8005f02:	d102      	bne.n	8005f0a <HAL_TIMEx_OCN_Start+0x36>
 8005f04:	683b      	ldr	r3, [r7, #0]
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	d016      	beq.n	8005f38 <HAL_TIMEx_OCN_Start+0x64>
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	4a1b      	ldr	r2, [pc, #108]	; (8005f7c <HAL_TIMEx_OCN_Start+0xa8>)
 8005f10:	4293      	cmp	r3, r2
 8005f12:	d102      	bne.n	8005f1a <HAL_TIMEx_OCN_Start+0x46>
 8005f14:	683b      	ldr	r3, [r7, #0]
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	d00e      	beq.n	8005f38 <HAL_TIMEx_OCN_Start+0x64>
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	4a18      	ldr	r2, [pc, #96]	; (8005f80 <HAL_TIMEx_OCN_Start+0xac>)
 8005f20:	4293      	cmp	r3, r2
 8005f22:	d102      	bne.n	8005f2a <HAL_TIMEx_OCN_Start+0x56>
 8005f24:	683b      	ldr	r3, [r7, #0]
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	d006      	beq.n	8005f38 <HAL_TIMEx_OCN_Start+0x64>
 8005f2a:	23f6      	movs	r3, #246	; 0xf6
 8005f2c:	005a      	lsls	r2, r3, #1
 8005f2e:	4b15      	ldr	r3, [pc, #84]	; (8005f84 <HAL_TIMEx_OCN_Start+0xb0>)
 8005f30:	0011      	movs	r1, r2
 8005f32:	0018      	movs	r0, r3
 8005f34:	f7fa fd1d 	bl	8000972 <assert_failed>

     /* Enable the Capture compare channel N */
     TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	6839      	ldr	r1, [r7, #0]
 8005f3e:	2204      	movs	r2, #4
 8005f40:	0018      	movs	r0, r3
 8005f42:	f000 fa69 	bl	8006418 <TIM_CCxNChannelCmd>

  /* Enable the Main Ouput */
    __HAL_TIM_MOE_ENABLE(htim);
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	2180      	movs	r1, #128	; 0x80
 8005f52:	0209      	lsls	r1, r1, #8
 8005f54:	430a      	orrs	r2, r1
 8005f56:	645a      	str	r2, [r3, #68]	; 0x44

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	681a      	ldr	r2, [r3, #0]
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	2101      	movs	r1, #1
 8005f64:	430a      	orrs	r2, r1
 8005f66:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8005f68:	2300      	movs	r3, #0
}
 8005f6a:	0018      	movs	r0, r3
 8005f6c:	46bd      	mov	sp, r7
 8005f6e:	b002      	add	sp, #8
 8005f70:	bd80      	pop	{r7, pc}
 8005f72:	46c0      	nop			; (mov r8, r8)
 8005f74:	40012c00 	.word	0x40012c00
 8005f78:	40014000 	.word	0x40014000
 8005f7c:	40014400 	.word	0x40014400
 8005f80:	40014800 	.word	0x40014800
 8005f84:	080070f4 	.word	0x080070f4

08005f88 <HAL_TIMEx_OCN_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_OCN_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005f88:	b580      	push	{r7, lr}
 8005f8a:	b082      	sub	sp, #8
 8005f8c:	af00      	add	r7, sp, #0
 8005f8e:	6078      	str	r0, [r7, #4]
 8005f90:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	4a2f      	ldr	r2, [pc, #188]	; (8006054 <HAL_TIMEx_OCN_Stop+0xcc>)
 8005f98:	4293      	cmp	r3, r2
 8005f9a:	d108      	bne.n	8005fae <HAL_TIMEx_OCN_Stop+0x26>
 8005f9c:	683b      	ldr	r3, [r7, #0]
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	d023      	beq.n	8005fea <HAL_TIMEx_OCN_Stop+0x62>
 8005fa2:	683b      	ldr	r3, [r7, #0]
 8005fa4:	2b04      	cmp	r3, #4
 8005fa6:	d020      	beq.n	8005fea <HAL_TIMEx_OCN_Stop+0x62>
 8005fa8:	683b      	ldr	r3, [r7, #0]
 8005faa:	2b08      	cmp	r3, #8
 8005fac:	d01d      	beq.n	8005fea <HAL_TIMEx_OCN_Stop+0x62>
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	4a29      	ldr	r2, [pc, #164]	; (8006058 <HAL_TIMEx_OCN_Stop+0xd0>)
 8005fb4:	4293      	cmp	r3, r2
 8005fb6:	d102      	bne.n	8005fbe <HAL_TIMEx_OCN_Stop+0x36>
 8005fb8:	683b      	ldr	r3, [r7, #0]
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	d015      	beq.n	8005fea <HAL_TIMEx_OCN_Stop+0x62>
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	4a26      	ldr	r2, [pc, #152]	; (800605c <HAL_TIMEx_OCN_Stop+0xd4>)
 8005fc4:	4293      	cmp	r3, r2
 8005fc6:	d102      	bne.n	8005fce <HAL_TIMEx_OCN_Stop+0x46>
 8005fc8:	683b      	ldr	r3, [r7, #0]
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	d00d      	beq.n	8005fea <HAL_TIMEx_OCN_Stop+0x62>
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	4a23      	ldr	r2, [pc, #140]	; (8006060 <HAL_TIMEx_OCN_Stop+0xd8>)
 8005fd4:	4293      	cmp	r3, r2
 8005fd6:	d102      	bne.n	8005fde <HAL_TIMEx_OCN_Stop+0x56>
 8005fd8:	683b      	ldr	r3, [r7, #0]
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	d005      	beq.n	8005fea <HAL_TIMEx_OCN_Stop+0x62>
 8005fde:	4a21      	ldr	r2, [pc, #132]	; (8006064 <HAL_TIMEx_OCN_Stop+0xdc>)
 8005fe0:	4b21      	ldr	r3, [pc, #132]	; (8006068 <HAL_TIMEx_OCN_Stop+0xe0>)
 8005fe2:	0011      	movs	r1, r2
 8005fe4:	0018      	movs	r0, r3
 8005fe6:	f7fa fcc4 	bl	8000972 <assert_failed>

    /* Disable the Capture compare channel N */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_DISABLE);
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	6839      	ldr	r1, [r7, #0]
 8005ff0:	2200      	movs	r2, #0
 8005ff2:	0018      	movs	r0, r3
 8005ff4:	f000 fa10 	bl	8006418 <TIM_CCxNChannelCmd>

  /* Disable the Main Ouput */
    __HAL_TIM_MOE_DISABLE(htim);
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	6a1b      	ldr	r3, [r3, #32]
 8005ffe:	4a1b      	ldr	r2, [pc, #108]	; (800606c <HAL_TIMEx_OCN_Stop+0xe4>)
 8006000:	4013      	ands	r3, r2
 8006002:	d10d      	bne.n	8006020 <HAL_TIMEx_OCN_Stop+0x98>
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	6a1b      	ldr	r3, [r3, #32]
 800600a:	4a19      	ldr	r2, [pc, #100]	; (8006070 <HAL_TIMEx_OCN_Stop+0xe8>)
 800600c:	4013      	ands	r3, r2
 800600e:	d107      	bne.n	8006020 <HAL_TIMEx_OCN_Stop+0x98>
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	4916      	ldr	r1, [pc, #88]	; (8006074 <HAL_TIMEx_OCN_Stop+0xec>)
 800601c:	400a      	ands	r2, r1
 800601e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	6a1b      	ldr	r3, [r3, #32]
 8006026:	4a11      	ldr	r2, [pc, #68]	; (800606c <HAL_TIMEx_OCN_Stop+0xe4>)
 8006028:	4013      	ands	r3, r2
 800602a:	d10d      	bne.n	8006048 <HAL_TIMEx_OCN_Stop+0xc0>
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	6a1b      	ldr	r3, [r3, #32]
 8006032:	4a0f      	ldr	r2, [pc, #60]	; (8006070 <HAL_TIMEx_OCN_Stop+0xe8>)
 8006034:	4013      	ands	r3, r2
 8006036:	d107      	bne.n	8006048 <HAL_TIMEx_OCN_Stop+0xc0>
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	681a      	ldr	r2, [r3, #0]
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	2101      	movs	r1, #1
 8006044:	438a      	bics	r2, r1
 8006046:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8006048:	2300      	movs	r3, #0
}
 800604a:	0018      	movs	r0, r3
 800604c:	46bd      	mov	sp, r7
 800604e:	b002      	add	sp, #8
 8006050:	bd80      	pop	{r7, pc}
 8006052:	46c0      	nop			; (mov r8, r8)
 8006054:	40012c00 	.word	0x40012c00
 8006058:	40014000 	.word	0x40014000
 800605c:	40014400 	.word	0x40014400
 8006060:	40014800 	.word	0x40014800
 8006064:	0000020a 	.word	0x0000020a
 8006068:	080070f4 	.word	0x080070f4
 800606c:	00001111 	.word	0x00001111
 8006070:	00000444 	.word	0x00000444
 8006074:	ffff7fff 	.word	0xffff7fff

08006078 <HAL_TIMEx_MasterConfigSynchronization>:
  *         contains the selected trigger output (TRGO) and the Master/Slave 
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim, TIM_MasterConfigTypeDef * sMasterConfig)
{
 8006078:	b580      	push	{r7, lr}
 800607a:	b082      	sub	sp, #8
 800607c:	af00      	add	r7, sp, #0
 800607e:	6078      	str	r0, [r7, #4]
 8006080:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	4a48      	ldr	r2, [pc, #288]	; (80061a8 <HAL_TIMEx_MasterConfigSynchronization+0x130>)
 8006088:	4293      	cmp	r3, r2
 800608a:	d01a      	beq.n	80060c2 <HAL_TIMEx_MasterConfigSynchronization+0x4a>
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	681a      	ldr	r2, [r3, #0]
 8006090:	2380      	movs	r3, #128	; 0x80
 8006092:	05db      	lsls	r3, r3, #23
 8006094:	429a      	cmp	r2, r3
 8006096:	d014      	beq.n	80060c2 <HAL_TIMEx_MasterConfigSynchronization+0x4a>
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	4a43      	ldr	r2, [pc, #268]	; (80061ac <HAL_TIMEx_MasterConfigSynchronization+0x134>)
 800609e:	4293      	cmp	r3, r2
 80060a0:	d00f      	beq.n	80060c2 <HAL_TIMEx_MasterConfigSynchronization+0x4a>
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	4a42      	ldr	r2, [pc, #264]	; (80061b0 <HAL_TIMEx_MasterConfigSynchronization+0x138>)
 80060a8:	4293      	cmp	r3, r2
 80060aa:	d00a      	beq.n	80060c2 <HAL_TIMEx_MasterConfigSynchronization+0x4a>
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	4a40      	ldr	r2, [pc, #256]	; (80061b4 <HAL_TIMEx_MasterConfigSynchronization+0x13c>)
 80060b2:	4293      	cmp	r3, r2
 80060b4:	d005      	beq.n	80060c2 <HAL_TIMEx_MasterConfigSynchronization+0x4a>
 80060b6:	4a40      	ldr	r2, [pc, #256]	; (80061b8 <HAL_TIMEx_MasterConfigSynchronization+0x140>)
 80060b8:	4b40      	ldr	r3, [pc, #256]	; (80061bc <HAL_TIMEx_MasterConfigSynchronization+0x144>)
 80060ba:	0011      	movs	r1, r2
 80060bc:	0018      	movs	r0, r3
 80060be:	f7fa fc58 	bl	8000972 <assert_failed>
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
 80060c2:	683b      	ldr	r3, [r7, #0]
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	d021      	beq.n	800610e <HAL_TIMEx_MasterConfigSynchronization+0x96>
 80060ca:	683b      	ldr	r3, [r7, #0]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	2b10      	cmp	r3, #16
 80060d0:	d01d      	beq.n	800610e <HAL_TIMEx_MasterConfigSynchronization+0x96>
 80060d2:	683b      	ldr	r3, [r7, #0]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	2b20      	cmp	r3, #32
 80060d8:	d019      	beq.n	800610e <HAL_TIMEx_MasterConfigSynchronization+0x96>
 80060da:	683b      	ldr	r3, [r7, #0]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	2b30      	cmp	r3, #48	; 0x30
 80060e0:	d015      	beq.n	800610e <HAL_TIMEx_MasterConfigSynchronization+0x96>
 80060e2:	683b      	ldr	r3, [r7, #0]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	2b40      	cmp	r3, #64	; 0x40
 80060e8:	d011      	beq.n	800610e <HAL_TIMEx_MasterConfigSynchronization+0x96>
 80060ea:	683b      	ldr	r3, [r7, #0]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	2b50      	cmp	r3, #80	; 0x50
 80060f0:	d00d      	beq.n	800610e <HAL_TIMEx_MasterConfigSynchronization+0x96>
 80060f2:	683b      	ldr	r3, [r7, #0]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	2b60      	cmp	r3, #96	; 0x60
 80060f8:	d009      	beq.n	800610e <HAL_TIMEx_MasterConfigSynchronization+0x96>
 80060fa:	683b      	ldr	r3, [r7, #0]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	2b70      	cmp	r3, #112	; 0x70
 8006100:	d005      	beq.n	800610e <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8006102:	4a2f      	ldr	r2, [pc, #188]	; (80061c0 <HAL_TIMEx_MasterConfigSynchronization+0x148>)
 8006104:	4b2d      	ldr	r3, [pc, #180]	; (80061bc <HAL_TIMEx_MasterConfigSynchronization+0x144>)
 8006106:	0011      	movs	r1, r2
 8006108:	0018      	movs	r0, r3
 800610a:	f7fa fc32 	bl	8000972 <assert_failed>
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
 800610e:	683b      	ldr	r3, [r7, #0]
 8006110:	685b      	ldr	r3, [r3, #4]
 8006112:	2b80      	cmp	r3, #128	; 0x80
 8006114:	d009      	beq.n	800612a <HAL_TIMEx_MasterConfigSynchronization+0xb2>
 8006116:	683b      	ldr	r3, [r7, #0]
 8006118:	685b      	ldr	r3, [r3, #4]
 800611a:	2b00      	cmp	r3, #0
 800611c:	d005      	beq.n	800612a <HAL_TIMEx_MasterConfigSynchronization+0xb2>
 800611e:	4a29      	ldr	r2, [pc, #164]	; (80061c4 <HAL_TIMEx_MasterConfigSynchronization+0x14c>)
 8006120:	4b26      	ldr	r3, [pc, #152]	; (80061bc <HAL_TIMEx_MasterConfigSynchronization+0x144>)
 8006122:	0011      	movs	r1, r2
 8006124:	0018      	movs	r0, r3
 8006126:	f7fa fc24 	bl	8000972 <assert_failed>

  __HAL_LOCK(htim);
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	223c      	movs	r2, #60	; 0x3c
 800612e:	5c9b      	ldrb	r3, [r3, r2]
 8006130:	2b01      	cmp	r3, #1
 8006132:	d101      	bne.n	8006138 <HAL_TIMEx_MasterConfigSynchronization+0xc0>
 8006134:	2302      	movs	r3, #2
 8006136:	e032      	b.n	800619e <HAL_TIMEx_MasterConfigSynchronization+0x126>
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	223c      	movs	r2, #60	; 0x3c
 800613c:	2101      	movs	r1, #1
 800613e:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	223d      	movs	r2, #61	; 0x3d
 8006144:	2102      	movs	r1, #2
 8006146:	5499      	strb	r1, [r3, r2]

  /* Reset the MMS Bits */
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	685a      	ldr	r2, [r3, #4]
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	2170      	movs	r1, #112	; 0x70
 8006154:	438a      	bics	r2, r1
 8006156:	605a      	str	r2, [r3, #4]
  /* Select the TRGO source */
  htim->Instance->CR2 |=  sMasterConfig->MasterOutputTrigger;
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	6859      	ldr	r1, [r3, #4]
 800615e:	683b      	ldr	r3, [r7, #0]
 8006160:	681a      	ldr	r2, [r3, #0]
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	430a      	orrs	r2, r1
 8006168:	605a      	str	r2, [r3, #4]

  /* Reset the MSM Bit */
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	689a      	ldr	r2, [r3, #8]
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	2180      	movs	r1, #128	; 0x80
 8006176:	438a      	bics	r2, r1
 8006178:	609a      	str	r2, [r3, #8]
  /* Set or Reset the MSM Bit */
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	6899      	ldr	r1, [r3, #8]
 8006180:	683b      	ldr	r3, [r7, #0]
 8006182:	685a      	ldr	r2, [r3, #4]
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	430a      	orrs	r2, r1
 800618a:	609a      	str	r2, [r3, #8]

  htim->State = HAL_TIM_STATE_READY;
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	223d      	movs	r2, #61	; 0x3d
 8006190:	2101      	movs	r1, #1
 8006192:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	223c      	movs	r2, #60	; 0x3c
 8006198:	2100      	movs	r1, #0
 800619a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800619c:	2300      	movs	r3, #0
}
 800619e:	0018      	movs	r0, r3
 80061a0:	46bd      	mov	sp, r7
 80061a2:	b002      	add	sp, #8
 80061a4:	bd80      	pop	{r7, pc}
 80061a6:	46c0      	nop			; (mov r8, r8)
 80061a8:	40012c00 	.word	0x40012c00
 80061ac:	40000400 	.word	0x40000400
 80061b0:	40001000 	.word	0x40001000
 80061b4:	40014000 	.word	0x40014000
 80061b8:	00000649 	.word	0x00000649
 80061bc:	080070f4 	.word	0x080070f4
 80061c0:	0000064a 	.word	0x0000064a
 80061c4:	0000064b 	.word	0x0000064b

080061c8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         contains the BDTR Register configuration  information for the TIM peripheral.
  * @retval HAL status
  */    
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80061c8:	b580      	push	{r7, lr}
 80061ca:	b084      	sub	sp, #16
 80061cc:	af00      	add	r7, sp, #0
 80061ce:	6078      	str	r0, [r7, #4]
 80061d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpbdtr = 0;
 80061d2:	2300      	movs	r3, #0
 80061d4:	60fb      	str	r3, [r7, #12]
   
  /* Check the parameters */
  assert_param(IS_TIM_BREAK_INSTANCE(htim->Instance));
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	4a74      	ldr	r2, [pc, #464]	; (80063ac <HAL_TIMEx_ConfigBreakDeadTime+0x1e4>)
 80061dc:	4293      	cmp	r3, r2
 80061de:	d015      	beq.n	800620c <HAL_TIMEx_ConfigBreakDeadTime+0x44>
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	4a72      	ldr	r2, [pc, #456]	; (80063b0 <HAL_TIMEx_ConfigBreakDeadTime+0x1e8>)
 80061e6:	4293      	cmp	r3, r2
 80061e8:	d010      	beq.n	800620c <HAL_TIMEx_ConfigBreakDeadTime+0x44>
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	4a71      	ldr	r2, [pc, #452]	; (80063b4 <HAL_TIMEx_ConfigBreakDeadTime+0x1ec>)
 80061f0:	4293      	cmp	r3, r2
 80061f2:	d00b      	beq.n	800620c <HAL_TIMEx_ConfigBreakDeadTime+0x44>
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	4a6f      	ldr	r2, [pc, #444]	; (80063b8 <HAL_TIMEx_ConfigBreakDeadTime+0x1f0>)
 80061fa:	4293      	cmp	r3, r2
 80061fc:	d006      	beq.n	800620c <HAL_TIMEx_ConfigBreakDeadTime+0x44>
 80061fe:	23ce      	movs	r3, #206	; 0xce
 8006200:	00da      	lsls	r2, r3, #3
 8006202:	4b6e      	ldr	r3, [pc, #440]	; (80063bc <HAL_TIMEx_ConfigBreakDeadTime+0x1f4>)
 8006204:	0011      	movs	r1, r2
 8006206:	0018      	movs	r0, r3
 8006208:	f7fa fbb3 	bl	8000972 <assert_failed>
  assert_param(IS_TIM_OSSR_STATE(sBreakDeadTimeConfig->OffStateRunMode));
 800620c:	683b      	ldr	r3, [r7, #0]
 800620e:	681a      	ldr	r2, [r3, #0]
 8006210:	2380      	movs	r3, #128	; 0x80
 8006212:	011b      	lsls	r3, r3, #4
 8006214:	429a      	cmp	r2, r3
 8006216:	d009      	beq.n	800622c <HAL_TIMEx_ConfigBreakDeadTime+0x64>
 8006218:	683b      	ldr	r3, [r7, #0]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	2b00      	cmp	r3, #0
 800621e:	d005      	beq.n	800622c <HAL_TIMEx_ConfigBreakDeadTime+0x64>
 8006220:	4a67      	ldr	r2, [pc, #412]	; (80063c0 <HAL_TIMEx_ConfigBreakDeadTime+0x1f8>)
 8006222:	4b66      	ldr	r3, [pc, #408]	; (80063bc <HAL_TIMEx_ConfigBreakDeadTime+0x1f4>)
 8006224:	0011      	movs	r1, r2
 8006226:	0018      	movs	r0, r3
 8006228:	f7fa fba3 	bl	8000972 <assert_failed>
  assert_param(IS_TIM_OSSI_STATE(sBreakDeadTimeConfig->OffStateIDLEMode));
 800622c:	683b      	ldr	r3, [r7, #0]
 800622e:	685a      	ldr	r2, [r3, #4]
 8006230:	2380      	movs	r3, #128	; 0x80
 8006232:	00db      	lsls	r3, r3, #3
 8006234:	429a      	cmp	r2, r3
 8006236:	d009      	beq.n	800624c <HAL_TIMEx_ConfigBreakDeadTime+0x84>
 8006238:	683b      	ldr	r3, [r7, #0]
 800623a:	685b      	ldr	r3, [r3, #4]
 800623c:	2b00      	cmp	r3, #0
 800623e:	d005      	beq.n	800624c <HAL_TIMEx_ConfigBreakDeadTime+0x84>
 8006240:	4a60      	ldr	r2, [pc, #384]	; (80063c4 <HAL_TIMEx_ConfigBreakDeadTime+0x1fc>)
 8006242:	4b5e      	ldr	r3, [pc, #376]	; (80063bc <HAL_TIMEx_ConfigBreakDeadTime+0x1f4>)
 8006244:	0011      	movs	r1, r2
 8006246:	0018      	movs	r0, r3
 8006248:	f7fa fb93 	bl	8000972 <assert_failed>
  assert_param(IS_TIM_LOCK_LEVEL(sBreakDeadTimeConfig->LockLevel));
 800624c:	683b      	ldr	r3, [r7, #0]
 800624e:	689b      	ldr	r3, [r3, #8]
 8006250:	2b00      	cmp	r3, #0
 8006252:	d017      	beq.n	8006284 <HAL_TIMEx_ConfigBreakDeadTime+0xbc>
 8006254:	683b      	ldr	r3, [r7, #0]
 8006256:	689a      	ldr	r2, [r3, #8]
 8006258:	2380      	movs	r3, #128	; 0x80
 800625a:	005b      	lsls	r3, r3, #1
 800625c:	429a      	cmp	r2, r3
 800625e:	d011      	beq.n	8006284 <HAL_TIMEx_ConfigBreakDeadTime+0xbc>
 8006260:	683b      	ldr	r3, [r7, #0]
 8006262:	689a      	ldr	r2, [r3, #8]
 8006264:	2380      	movs	r3, #128	; 0x80
 8006266:	009b      	lsls	r3, r3, #2
 8006268:	429a      	cmp	r2, r3
 800626a:	d00b      	beq.n	8006284 <HAL_TIMEx_ConfigBreakDeadTime+0xbc>
 800626c:	683b      	ldr	r3, [r7, #0]
 800626e:	689a      	ldr	r2, [r3, #8]
 8006270:	23c0      	movs	r3, #192	; 0xc0
 8006272:	009b      	lsls	r3, r3, #2
 8006274:	429a      	cmp	r2, r3
 8006276:	d005      	beq.n	8006284 <HAL_TIMEx_ConfigBreakDeadTime+0xbc>
 8006278:	4a53      	ldr	r2, [pc, #332]	; (80063c8 <HAL_TIMEx_ConfigBreakDeadTime+0x200>)
 800627a:	4b50      	ldr	r3, [pc, #320]	; (80063bc <HAL_TIMEx_ConfigBreakDeadTime+0x1f4>)
 800627c:	0011      	movs	r1, r2
 800627e:	0018      	movs	r0, r3
 8006280:	f7fa fb77 	bl	8000972 <assert_failed>
  assert_param(IS_TIM_DEADTIME(sBreakDeadTimeConfig->DeadTime));
 8006284:	683b      	ldr	r3, [r7, #0]
 8006286:	68db      	ldr	r3, [r3, #12]
 8006288:	2bff      	cmp	r3, #255	; 0xff
 800628a:	d905      	bls.n	8006298 <HAL_TIMEx_ConfigBreakDeadTime+0xd0>
 800628c:	4a4f      	ldr	r2, [pc, #316]	; (80063cc <HAL_TIMEx_ConfigBreakDeadTime+0x204>)
 800628e:	4b4b      	ldr	r3, [pc, #300]	; (80063bc <HAL_TIMEx_ConfigBreakDeadTime+0x1f4>)
 8006290:	0011      	movs	r1, r2
 8006292:	0018      	movs	r0, r3
 8006294:	f7fa fb6d 	bl	8000972 <assert_failed>
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
 8006298:	683b      	ldr	r3, [r7, #0]
 800629a:	691a      	ldr	r2, [r3, #16]
 800629c:	2380      	movs	r3, #128	; 0x80
 800629e:	015b      	lsls	r3, r3, #5
 80062a0:	429a      	cmp	r2, r3
 80062a2:	d009      	beq.n	80062b8 <HAL_TIMEx_ConfigBreakDeadTime+0xf0>
 80062a4:	683b      	ldr	r3, [r7, #0]
 80062a6:	691b      	ldr	r3, [r3, #16]
 80062a8:	2b00      	cmp	r3, #0
 80062aa:	d005      	beq.n	80062b8 <HAL_TIMEx_ConfigBreakDeadTime+0xf0>
 80062ac:	4a48      	ldr	r2, [pc, #288]	; (80063d0 <HAL_TIMEx_ConfigBreakDeadTime+0x208>)
 80062ae:	4b43      	ldr	r3, [pc, #268]	; (80063bc <HAL_TIMEx_ConfigBreakDeadTime+0x1f4>)
 80062b0:	0011      	movs	r1, r2
 80062b2:	0018      	movs	r0, r3
 80062b4:	f7fa fb5d 	bl	8000972 <assert_failed>
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
 80062b8:	683b      	ldr	r3, [r7, #0]
 80062ba:	695b      	ldr	r3, [r3, #20]
 80062bc:	2b00      	cmp	r3, #0
 80062be:	d00b      	beq.n	80062d8 <HAL_TIMEx_ConfigBreakDeadTime+0x110>
 80062c0:	683b      	ldr	r3, [r7, #0]
 80062c2:	695a      	ldr	r2, [r3, #20]
 80062c4:	2380      	movs	r3, #128	; 0x80
 80062c6:	019b      	lsls	r3, r3, #6
 80062c8:	429a      	cmp	r2, r3
 80062ca:	d005      	beq.n	80062d8 <HAL_TIMEx_ConfigBreakDeadTime+0x110>
 80062cc:	4a41      	ldr	r2, [pc, #260]	; (80063d4 <HAL_TIMEx_ConfigBreakDeadTime+0x20c>)
 80062ce:	4b3b      	ldr	r3, [pc, #236]	; (80063bc <HAL_TIMEx_ConfigBreakDeadTime+0x1f4>)
 80062d0:	0011      	movs	r1, r2
 80062d2:	0018      	movs	r0, r3
 80062d4:	f7fa fb4d 	bl	8000972 <assert_failed>
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
 80062d8:	683b      	ldr	r3, [r7, #0]
 80062da:	699a      	ldr	r2, [r3, #24]
 80062dc:	2380      	movs	r3, #128	; 0x80
 80062de:	01db      	lsls	r3, r3, #7
 80062e0:	429a      	cmp	r2, r3
 80062e2:	d009      	beq.n	80062f8 <HAL_TIMEx_ConfigBreakDeadTime+0x130>
 80062e4:	683b      	ldr	r3, [r7, #0]
 80062e6:	699b      	ldr	r3, [r3, #24]
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	d005      	beq.n	80062f8 <HAL_TIMEx_ConfigBreakDeadTime+0x130>
 80062ec:	4a3a      	ldr	r2, [pc, #232]	; (80063d8 <HAL_TIMEx_ConfigBreakDeadTime+0x210>)
 80062ee:	4b33      	ldr	r3, [pc, #204]	; (80063bc <HAL_TIMEx_ConfigBreakDeadTime+0x1f4>)
 80062f0:	0011      	movs	r1, r2
 80062f2:	0018      	movs	r0, r3
 80062f4:	f7fa fb3d 	bl	8000972 <assert_failed>

  /* Process Locked */
  __HAL_LOCK(htim);
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	223c      	movs	r2, #60	; 0x3c
 80062fc:	5c9b      	ldrb	r3, [r3, r2]
 80062fe:	2b01      	cmp	r3, #1
 8006300:	d101      	bne.n	8006306 <HAL_TIMEx_ConfigBreakDeadTime+0x13e>
 8006302:	2302      	movs	r3, #2
 8006304:	e04d      	b.n	80063a2 <HAL_TIMEx_ConfigBreakDeadTime+0x1da>
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	223c      	movs	r2, #60	; 0x3c
 800630a:	2101      	movs	r1, #1
 800630c:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	223d      	movs	r2, #61	; 0x3d
 8006312:	2102      	movs	r1, #2
 8006314:	5499      	strb	r1, [r3, r2]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */
  
  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	22ff      	movs	r2, #255	; 0xff
 800631a:	4393      	bics	r3, r2
 800631c:	001a      	movs	r2, r3
 800631e:	683b      	ldr	r3, [r7, #0]
 8006320:	68db      	ldr	r3, [r3, #12]
 8006322:	4313      	orrs	r3, r2
 8006324:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	4a2c      	ldr	r2, [pc, #176]	; (80063dc <HAL_TIMEx_ConfigBreakDeadTime+0x214>)
 800632a:	401a      	ands	r2, r3
 800632c:	683b      	ldr	r3, [r7, #0]
 800632e:	689b      	ldr	r3, [r3, #8]
 8006330:	4313      	orrs	r3, r2
 8006332:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006334:	68fb      	ldr	r3, [r7, #12]
 8006336:	4a2a      	ldr	r2, [pc, #168]	; (80063e0 <HAL_TIMEx_ConfigBreakDeadTime+0x218>)
 8006338:	401a      	ands	r2, r3
 800633a:	683b      	ldr	r3, [r7, #0]
 800633c:	685b      	ldr	r3, [r3, #4]
 800633e:	4313      	orrs	r3, r2
 8006340:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	4a27      	ldr	r2, [pc, #156]	; (80063e4 <HAL_TIMEx_ConfigBreakDeadTime+0x21c>)
 8006346:	401a      	ands	r2, r3
 8006348:	683b      	ldr	r3, [r7, #0]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	4313      	orrs	r3, r2
 800634e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	4a25      	ldr	r2, [pc, #148]	; (80063e8 <HAL_TIMEx_ConfigBreakDeadTime+0x220>)
 8006354:	401a      	ands	r2, r3
 8006356:	683b      	ldr	r3, [r7, #0]
 8006358:	691b      	ldr	r3, [r3, #16]
 800635a:	4313      	orrs	r3, r2
 800635c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	4a22      	ldr	r2, [pc, #136]	; (80063ec <HAL_TIMEx_ConfigBreakDeadTime+0x224>)
 8006362:	401a      	ands	r2, r3
 8006364:	683b      	ldr	r3, [r7, #0]
 8006366:	695b      	ldr	r3, [r3, #20]
 8006368:	4313      	orrs	r3, r2
 800636a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	4a20      	ldr	r2, [pc, #128]	; (80063f0 <HAL_TIMEx_ConfigBreakDeadTime+0x228>)
 8006370:	401a      	ands	r2, r3
 8006372:	683b      	ldr	r3, [r7, #0]
 8006374:	699b      	ldr	r3, [r3, #24]
 8006376:	4313      	orrs	r3, r2
 8006378:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_MOE, sBreakDeadTimeConfig->AutomaticOutput);
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	4a1d      	ldr	r2, [pc, #116]	; (80063f4 <HAL_TIMEx_ConfigBreakDeadTime+0x22c>)
 800637e:	401a      	ands	r2, r3
 8006380:	683b      	ldr	r3, [r7, #0]
 8006382:	699b      	ldr	r3, [r3, #24]
 8006384:	4313      	orrs	r3, r2
 8006386:	60fb      	str	r3, [r7, #12]
  
  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	68fa      	ldr	r2, [r7, #12]
 800638e:	645a      	str	r2, [r3, #68]	; 0x44
  
  htim->State = HAL_TIM_STATE_READY;
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	223d      	movs	r2, #61	; 0x3d
 8006394:	2101      	movs	r1, #1
 8006396:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	223c      	movs	r2, #60	; 0x3c
 800639c:	2100      	movs	r1, #0
 800639e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80063a0:	2300      	movs	r3, #0
}
 80063a2:	0018      	movs	r0, r3
 80063a4:	46bd      	mov	sp, r7
 80063a6:	b004      	add	sp, #16
 80063a8:	bd80      	pop	{r7, pc}
 80063aa:	46c0      	nop			; (mov r8, r8)
 80063ac:	40012c00 	.word	0x40012c00
 80063b0:	40014000 	.word	0x40014000
 80063b4:	40014400 	.word	0x40014400
 80063b8:	40014800 	.word	0x40014800
 80063bc:	080070f4 	.word	0x080070f4
 80063c0:	00000671 	.word	0x00000671
 80063c4:	00000672 	.word	0x00000672
 80063c8:	00000673 	.word	0x00000673
 80063cc:	00000674 	.word	0x00000674
 80063d0:	00000675 	.word	0x00000675
 80063d4:	00000676 	.word	0x00000676
 80063d8:	00000677 	.word	0x00000677
 80063dc:	fffffcff 	.word	0xfffffcff
 80063e0:	fffffbff 	.word	0xfffffbff
 80063e4:	fffff7ff 	.word	0xfffff7ff
 80063e8:	ffffefff 	.word	0xffffefff
 80063ec:	ffffdfff 	.word	0xffffdfff
 80063f0:	ffffbfff 	.word	0xffffbfff
 80063f4:	ffff7fff 	.word	0xffff7fff

080063f8 <HAL_TIMEx_CommutationCallback>:
  * @brief  Hall commutation changed callback in non blocking mode 
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutationCallback(TIM_HandleTypeDef *htim)
{
 80063f8:	b580      	push	{r7, lr}
 80063fa:	b082      	sub	sp, #8
 80063fc:	af00      	add	r7, sp, #0
 80063fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutationCallback could be implemented in the user file
   */
}
 8006400:	46c0      	nop			; (mov r8, r8)
 8006402:	46bd      	mov	sp, r7
 8006404:	b002      	add	sp, #8
 8006406:	bd80      	pop	{r7, pc}

08006408 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non blocking mode 
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006408:	b580      	push	{r7, lr}
 800640a:	b082      	sub	sp, #8
 800640c:	af00      	add	r7, sp, #0
 800640e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006410:	46c0      	nop			; (mov r8, r8)
 8006412:	46bd      	mov	sp, r7
 8006414:	b002      	add	sp, #8
 8006416:	bd80      	pop	{r7, pc}

08006418 <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef* TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 8006418:	b580      	push	{r7, lr}
 800641a:	b086      	sub	sp, #24
 800641c:	af00      	add	r7, sp, #0
 800641e:	60f8      	str	r0, [r7, #12]
 8006420:	60b9      	str	r1, [r7, #8]
 8006422:	607a      	str	r2, [r7, #4]
  uint32_t tmp = 0U;
 8006424:	2300      	movs	r3, #0
 8006426:	617b      	str	r3, [r7, #20]

  tmp = TIM_CCER_CC1NE << Channel;
 8006428:	2204      	movs	r2, #4
 800642a:	68bb      	ldr	r3, [r7, #8]
 800642c:	409a      	lsls	r2, r3
 800642e:	0013      	movs	r3, r2
 8006430:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	6a1b      	ldr	r3, [r3, #32]
 8006436:	697a      	ldr	r2, [r7, #20]
 8006438:	43d2      	mvns	r2, r2
 800643a:	401a      	ands	r2, r3
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |=  (uint32_t)(ChannelNState << Channel);
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	6a1a      	ldr	r2, [r3, #32]
 8006444:	6879      	ldr	r1, [r7, #4]
 8006446:	68bb      	ldr	r3, [r7, #8]
 8006448:	4099      	lsls	r1, r3
 800644a:	000b      	movs	r3, r1
 800644c:	431a      	orrs	r2, r3
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	621a      	str	r2, [r3, #32]
}
 8006452:	46c0      	nop			; (mov r8, r8)
 8006454:	46bd      	mov	sp, r7
 8006456:	b006      	add	sp, #24
 8006458:	bd80      	pop	{r7, pc}
	...

0800645c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800645c:	b580      	push	{r7, lr}
 800645e:	b082      	sub	sp, #8
 8006460:	af00      	add	r7, sp, #0
 8006462:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if(huart == NULL)
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	2b00      	cmp	r3, #0
 8006468:	d101      	bne.n	800646e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800646a:	2301      	movs	r3, #1
 800646c:	e06f      	b.n	800654e <HAL_UART_Init+0xf2>
  }

  if(huart->Init.HwFlowCtl != UART_HWCONTROL_NONE)
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	699b      	ldr	r3, [r3, #24]
 8006472:	2b00      	cmp	r3, #0
 8006474:	d011      	beq.n	800649a <HAL_UART_Init+0x3e>
  {
    /* Check the parameters */
    assert_param(IS_UART_HWFLOW_INSTANCE(huart->Instance));
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	4a37      	ldr	r2, [pc, #220]	; (8006558 <HAL_UART_Init+0xfc>)
 800647c:	4293      	cmp	r3, r2
 800647e:	d01e      	beq.n	80064be <HAL_UART_Init+0x62>
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	4a35      	ldr	r2, [pc, #212]	; (800655c <HAL_UART_Init+0x100>)
 8006486:	4293      	cmp	r3, r2
 8006488:	d019      	beq.n	80064be <HAL_UART_Init+0x62>
 800648a:	2397      	movs	r3, #151	; 0x97
 800648c:	005a      	lsls	r2, r3, #1
 800648e:	4b34      	ldr	r3, [pc, #208]	; (8006560 <HAL_UART_Init+0x104>)
 8006490:	0011      	movs	r1, r2
 8006492:	0018      	movs	r0, r3
 8006494:	f7fa fa6d 	bl	8000972 <assert_failed>
 8006498:	e011      	b.n	80064be <HAL_UART_Init+0x62>
  }
  else
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	4a2e      	ldr	r2, [pc, #184]	; (8006558 <HAL_UART_Init+0xfc>)
 80064a0:	4293      	cmp	r3, r2
 80064a2:	d00c      	beq.n	80064be <HAL_UART_Init+0x62>
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	4a2c      	ldr	r2, [pc, #176]	; (800655c <HAL_UART_Init+0x100>)
 80064aa:	4293      	cmp	r3, r2
 80064ac:	d007      	beq.n	80064be <HAL_UART_Init+0x62>
 80064ae:	2334      	movs	r3, #52	; 0x34
 80064b0:	33ff      	adds	r3, #255	; 0xff
 80064b2:	001a      	movs	r2, r3
 80064b4:	4b2a      	ldr	r3, [pc, #168]	; (8006560 <HAL_UART_Init+0x104>)
 80064b6:	0011      	movs	r1, r2
 80064b8:	0018      	movs	r0, r3
 80064ba:	f7fa fa5a 	bl	8000972 <assert_failed>
  }

  if(huart->gState == HAL_UART_STATE_RESET)
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	2269      	movs	r2, #105	; 0x69
 80064c2:	5c9b      	ldrb	r3, [r3, r2]
 80064c4:	b2db      	uxtb	r3, r3
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	d107      	bne.n	80064da <HAL_UART_Init+0x7e>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	2268      	movs	r2, #104	; 0x68
 80064ce:	2100      	movs	r1, #0
 80064d0:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	0018      	movs	r0, r3
 80064d6:	f7fa fd37 	bl	8000f48 <HAL_UART_MspInit>
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	2269      	movs	r2, #105	; 0x69
 80064de:	2124      	movs	r1, #36	; 0x24
 80064e0:	5499      	strb	r1, [r3, r2]

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	681a      	ldr	r2, [r3, #0]
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	2101      	movs	r1, #1
 80064ee:	438a      	bics	r2, r1
 80064f0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	0018      	movs	r0, r3
 80064f6:	f000 f837 	bl	8006568 <UART_SetConfig>
 80064fa:	0003      	movs	r3, r0
 80064fc:	2b01      	cmp	r3, #1
 80064fe:	d101      	bne.n	8006504 <HAL_UART_Init+0xa8>
  {
    return HAL_ERROR;
 8006500:	2301      	movs	r3, #1
 8006502:	e024      	b.n	800654e <HAL_UART_Init+0xf2>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006508:	2b00      	cmp	r3, #0
 800650a:	d003      	beq.n	8006514 <HAL_UART_Init+0xb8>
  {
    UART_AdvFeatureConfig(huart);
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	0018      	movs	r0, r3
 8006510:	f000 fa4c 	bl	80069ac <UART_AdvFeatureConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register. */
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	685a      	ldr	r2, [r3, #4]
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	4911      	ldr	r1, [pc, #68]	; (8006564 <HAL_UART_Init+0x108>)
 8006520:	400a      	ands	r2, r1
 8006522:	605a      	str	r2, [r3, #4]
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
#endif
#if defined (USART_CR3_SCEN)
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	689a      	ldr	r2, [r3, #8]
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	212a      	movs	r1, #42	; 0x2a
 8006530:	438a      	bics	r2, r1
 8006532:	609a      	str	r2, [r3, #8]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
#endif
#endif

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	681a      	ldr	r2, [r3, #0]
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	2101      	movs	r1, #1
 8006540:	430a      	orrs	r2, r1
 8006542:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	0018      	movs	r0, r3
 8006548:	f000 fba4 	bl	8006c94 <UART_CheckIdleState>
 800654c:	0003      	movs	r3, r0
}
 800654e:	0018      	movs	r0, r3
 8006550:	46bd      	mov	sp, r7
 8006552:	b002      	add	sp, #8
 8006554:	bd80      	pop	{r7, pc}
 8006556:	46c0      	nop			; (mov r8, r8)
 8006558:	40013800 	.word	0x40013800
 800655c:	40004400 	.word	0x40004400
 8006560:	08007130 	.word	0x08007130
 8006564:	ffffb7ff 	.word	0xffffb7ff

08006568 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006568:	b590      	push	{r4, r7, lr}
 800656a:	b087      	sub	sp, #28
 800656c:	af00      	add	r7, sp, #0
 800656e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg                     = 0x00000000U;
 8006570:	2300      	movs	r3, #0
 8006572:	60fb      	str	r3, [r7, #12]
  UART_ClockSourceTypeDef clocksource = UART_CLOCKSOURCE_UNDEFINED;
 8006574:	2317      	movs	r3, #23
 8006576:	18fb      	adds	r3, r7, r3
 8006578:	2210      	movs	r2, #16
 800657a:	701a      	strb	r2, [r3, #0]
  uint16_t brrtemp                    = 0x0000U;
 800657c:	230a      	movs	r3, #10
 800657e:	18fb      	adds	r3, r7, r3
 8006580:	2200      	movs	r2, #0
 8006582:	801a      	strh	r2, [r3, #0]
  uint16_t usartdiv                   = 0x0000U;
 8006584:	2314      	movs	r3, #20
 8006586:	18fb      	adds	r3, r7, r3
 8006588:	2200      	movs	r2, #0
 800658a:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef ret               = HAL_OK;
 800658c:	2313      	movs	r3, #19
 800658e:	18fb      	adds	r3, r7, r3
 8006590:	2200      	movs	r2, #0
 8006592:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	685b      	ldr	r3, [r3, #4]
 8006598:	4ac7      	ldr	r2, [pc, #796]	; (80068b8 <UART_SetConfig+0x350>)
 800659a:	4293      	cmp	r3, r2
 800659c:	d905      	bls.n	80065aa <UART_SetConfig+0x42>
 800659e:	4ac7      	ldr	r2, [pc, #796]	; (80068bc <UART_SetConfig+0x354>)
 80065a0:	4bc7      	ldr	r3, [pc, #796]	; (80068c0 <UART_SetConfig+0x358>)
 80065a2:	0011      	movs	r1, r2
 80065a4:	0018      	movs	r0, r3
 80065a6:	f7fa f9e4 	bl	8000972 <assert_failed>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	689b      	ldr	r3, [r3, #8]
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	d00b      	beq.n	80065ca <UART_SetConfig+0x62>
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	689a      	ldr	r2, [r3, #8]
 80065b6:	2380      	movs	r3, #128	; 0x80
 80065b8:	015b      	lsls	r3, r3, #5
 80065ba:	429a      	cmp	r2, r3
 80065bc:	d005      	beq.n	80065ca <UART_SetConfig+0x62>
 80065be:	4ac1      	ldr	r2, [pc, #772]	; (80068c4 <UART_SetConfig+0x35c>)
 80065c0:	4bbf      	ldr	r3, [pc, #764]	; (80068c0 <UART_SetConfig+0x358>)
 80065c2:	0011      	movs	r1, r2
 80065c4:	0018      	movs	r0, r3
 80065c6:	f7fa f9d4 	bl	8000972 <assert_failed>
  assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	68da      	ldr	r2, [r3, #12]
 80065ce:	2380      	movs	r3, #128	; 0x80
 80065d0:	015b      	lsls	r3, r3, #5
 80065d2:	429a      	cmp	r2, r3
 80065d4:	d015      	beq.n	8006602 <UART_SetConfig+0x9a>
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	68db      	ldr	r3, [r3, #12]
 80065da:	2b00      	cmp	r3, #0
 80065dc:	d011      	beq.n	8006602 <UART_SetConfig+0x9a>
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	68da      	ldr	r2, [r3, #12]
 80065e2:	23c0      	movs	r3, #192	; 0xc0
 80065e4:	019b      	lsls	r3, r3, #6
 80065e6:	429a      	cmp	r2, r3
 80065e8:	d00b      	beq.n	8006602 <UART_SetConfig+0x9a>
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	68da      	ldr	r2, [r3, #12]
 80065ee:	2380      	movs	r3, #128	; 0x80
 80065f0:	019b      	lsls	r3, r3, #6
 80065f2:	429a      	cmp	r2, r3
 80065f4:	d005      	beq.n	8006602 <UART_SetConfig+0x9a>
 80065f6:	4ab4      	ldr	r2, [pc, #720]	; (80068c8 <UART_SetConfig+0x360>)
 80065f8:	4bb1      	ldr	r3, [pc, #708]	; (80068c0 <UART_SetConfig+0x358>)
 80065fa:	0011      	movs	r1, r2
 80065fc:	0018      	movs	r0, r3
 80065fe:	f7fa f9b8 	bl	8000972 <assert_failed>
  assert_param(IS_UART_PARITY(huart->Init.Parity));
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	691b      	ldr	r3, [r3, #16]
 8006606:	2b00      	cmp	r3, #0
 8006608:	d011      	beq.n	800662e <UART_SetConfig+0xc6>
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	691a      	ldr	r2, [r3, #16]
 800660e:	2380      	movs	r3, #128	; 0x80
 8006610:	00db      	lsls	r3, r3, #3
 8006612:	429a      	cmp	r2, r3
 8006614:	d00b      	beq.n	800662e <UART_SetConfig+0xc6>
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	691a      	ldr	r2, [r3, #16]
 800661a:	23c0      	movs	r3, #192	; 0xc0
 800661c:	00db      	lsls	r3, r3, #3
 800661e:	429a      	cmp	r2, r3
 8006620:	d005      	beq.n	800662e <UART_SetConfig+0xc6>
 8006622:	4aaa      	ldr	r2, [pc, #680]	; (80068cc <UART_SetConfig+0x364>)
 8006624:	4ba6      	ldr	r3, [pc, #664]	; (80068c0 <UART_SetConfig+0x358>)
 8006626:	0011      	movs	r1, r2
 8006628:	0018      	movs	r0, r3
 800662a:	f7fa f9a2 	bl	8000972 <assert_failed>
  assert_param(IS_UART_MODE(huart->Init.Mode));
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	695b      	ldr	r3, [r3, #20]
 8006632:	220c      	movs	r2, #12
 8006634:	4393      	bics	r3, r2
 8006636:	d103      	bne.n	8006640 <UART_SetConfig+0xd8>
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	695b      	ldr	r3, [r3, #20]
 800663c:	2b00      	cmp	r3, #0
 800663e:	d105      	bne.n	800664c <UART_SetConfig+0xe4>
 8006640:	4aa3      	ldr	r2, [pc, #652]	; (80068d0 <UART_SetConfig+0x368>)
 8006642:	4b9f      	ldr	r3, [pc, #636]	; (80068c0 <UART_SetConfig+0x358>)
 8006644:	0011      	movs	r1, r2
 8006646:	0018      	movs	r0, r3
 8006648:	f7fa f993 	bl	8000972 <assert_failed>
  assert_param(IS_UART_HARDWARE_FLOW_CONTROL(huart->Init.HwFlowCtl));
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	699b      	ldr	r3, [r3, #24]
 8006650:	2b00      	cmp	r3, #0
 8006652:	d017      	beq.n	8006684 <UART_SetConfig+0x11c>
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	699a      	ldr	r2, [r3, #24]
 8006658:	2380      	movs	r3, #128	; 0x80
 800665a:	005b      	lsls	r3, r3, #1
 800665c:	429a      	cmp	r2, r3
 800665e:	d011      	beq.n	8006684 <UART_SetConfig+0x11c>
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	699a      	ldr	r2, [r3, #24]
 8006664:	2380      	movs	r3, #128	; 0x80
 8006666:	009b      	lsls	r3, r3, #2
 8006668:	429a      	cmp	r2, r3
 800666a:	d00b      	beq.n	8006684 <UART_SetConfig+0x11c>
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	699a      	ldr	r2, [r3, #24]
 8006670:	23c0      	movs	r3, #192	; 0xc0
 8006672:	009b      	lsls	r3, r3, #2
 8006674:	429a      	cmp	r2, r3
 8006676:	d005      	beq.n	8006684 <UART_SetConfig+0x11c>
 8006678:	4a96      	ldr	r2, [pc, #600]	; (80068d4 <UART_SetConfig+0x36c>)
 800667a:	4b91      	ldr	r3, [pc, #580]	; (80068c0 <UART_SetConfig+0x358>)
 800667c:	0011      	movs	r1, r2
 800667e:	0018      	movs	r0, r3
 8006680:	f7fa f977 	bl	8000972 <assert_failed>
  assert_param(IS_UART_ONE_BIT_SAMPLE(huart->Init.OneBitSampling));
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	6a1b      	ldr	r3, [r3, #32]
 8006688:	2b00      	cmp	r3, #0
 800668a:	d00b      	beq.n	80066a4 <UART_SetConfig+0x13c>
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	6a1a      	ldr	r2, [r3, #32]
 8006690:	2380      	movs	r3, #128	; 0x80
 8006692:	011b      	lsls	r3, r3, #4
 8006694:	429a      	cmp	r2, r3
 8006696:	d005      	beq.n	80066a4 <UART_SetConfig+0x13c>
 8006698:	4a8f      	ldr	r2, [pc, #572]	; (80068d8 <UART_SetConfig+0x370>)
 800669a:	4b89      	ldr	r3, [pc, #548]	; (80068c0 <UART_SetConfig+0x358>)
 800669c:	0011      	movs	r1, r2
 800669e:	0018      	movs	r0, r3
 80066a0:	f7fa f967 	bl	8000972 <assert_failed>
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	69db      	ldr	r3, [r3, #28]
 80066a8:	2b00      	cmp	r3, #0
 80066aa:	d00b      	beq.n	80066c4 <UART_SetConfig+0x15c>
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	69da      	ldr	r2, [r3, #28]
 80066b0:	2380      	movs	r3, #128	; 0x80
 80066b2:	021b      	lsls	r3, r3, #8
 80066b4:	429a      	cmp	r2, r3
 80066b6:	d005      	beq.n	80066c4 <UART_SetConfig+0x15c>
 80066b8:	4a88      	ldr	r2, [pc, #544]	; (80068dc <UART_SetConfig+0x374>)
 80066ba:	4b81      	ldr	r3, [pc, #516]	; (80068c0 <UART_SetConfig+0x358>)
 80066bc:	0011      	movs	r1, r2
 80066be:	0018      	movs	r0, r3
 80066c0:	f7fa f957 	bl	8000972 <assert_failed>
   *  the UART Word Length, Parity, Mode and oversampling:
   *  set the M bits according to huart->Init.WordLength value
   *  set PCE and PS bits according to huart->Init.Parity value
   *  set TE and RE bits according to huart->Init.Mode value
   *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	689a      	ldr	r2, [r3, #8]
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	691b      	ldr	r3, [r3, #16]
 80066cc:	431a      	orrs	r2, r3
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	695b      	ldr	r3, [r3, #20]
 80066d2:	431a      	orrs	r2, r3
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	69db      	ldr	r3, [r3, #28]
 80066d8:	4313      	orrs	r3, r2
 80066da:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	4a7f      	ldr	r2, [pc, #508]	; (80068e0 <UART_SetConfig+0x378>)
 80066e4:	4013      	ands	r3, r2
 80066e6:	0019      	movs	r1, r3
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	68fa      	ldr	r2, [r7, #12]
 80066ee:	430a      	orrs	r2, r1
 80066f0:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
   * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	685b      	ldr	r3, [r3, #4]
 80066f8:	4a7a      	ldr	r2, [pc, #488]	; (80068e4 <UART_SetConfig+0x37c>)
 80066fa:	4013      	ands	r3, r2
 80066fc:	0019      	movs	r1, r3
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	68da      	ldr	r2, [r3, #12]
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	430a      	orrs	r2, r1
 8006708:	605a      	str	r2, [r3, #4]
  /* Configure
   * - UART HardWare Flow Control: set CTSE and RTSE bits according
   *   to huart->Init.HwFlowCtl value
   * - one-bit sampling method versus three samples' majority rule according
   *   to huart->Init.OneBitSampling */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	699a      	ldr	r2, [r3, #24]
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	6a1b      	ldr	r3, [r3, #32]
 8006712:	4313      	orrs	r3, r2
 8006714:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	689b      	ldr	r3, [r3, #8]
 800671c:	4a72      	ldr	r2, [pc, #456]	; (80068e8 <UART_SetConfig+0x380>)
 800671e:	4013      	ands	r3, r2
 8006720:	0019      	movs	r1, r3
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	68fa      	ldr	r2, [r7, #12]
 8006728:	430a      	orrs	r2, r1
 800672a:	609a      	str	r2, [r3, #8]

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	4a6e      	ldr	r2, [pc, #440]	; (80068ec <UART_SetConfig+0x384>)
 8006732:	4293      	cmp	r3, r2
 8006734:	d125      	bne.n	8006782 <UART_SetConfig+0x21a>
 8006736:	4b6e      	ldr	r3, [pc, #440]	; (80068f0 <UART_SetConfig+0x388>)
 8006738:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800673a:	2203      	movs	r2, #3
 800673c:	4013      	ands	r3, r2
 800673e:	2b01      	cmp	r3, #1
 8006740:	d00f      	beq.n	8006762 <UART_SetConfig+0x1fa>
 8006742:	d304      	bcc.n	800674e <UART_SetConfig+0x1e6>
 8006744:	2b02      	cmp	r3, #2
 8006746:	d011      	beq.n	800676c <UART_SetConfig+0x204>
 8006748:	2b03      	cmp	r3, #3
 800674a:	d005      	beq.n	8006758 <UART_SetConfig+0x1f0>
 800674c:	e013      	b.n	8006776 <UART_SetConfig+0x20e>
 800674e:	2317      	movs	r3, #23
 8006750:	18fb      	adds	r3, r7, r3
 8006752:	2200      	movs	r2, #0
 8006754:	701a      	strb	r2, [r3, #0]
 8006756:	e022      	b.n	800679e <UART_SetConfig+0x236>
 8006758:	2317      	movs	r3, #23
 800675a:	18fb      	adds	r3, r7, r3
 800675c:	2202      	movs	r2, #2
 800675e:	701a      	strb	r2, [r3, #0]
 8006760:	e01d      	b.n	800679e <UART_SetConfig+0x236>
 8006762:	2317      	movs	r3, #23
 8006764:	18fb      	adds	r3, r7, r3
 8006766:	2204      	movs	r2, #4
 8006768:	701a      	strb	r2, [r3, #0]
 800676a:	e018      	b.n	800679e <UART_SetConfig+0x236>
 800676c:	2317      	movs	r3, #23
 800676e:	18fb      	adds	r3, r7, r3
 8006770:	2208      	movs	r2, #8
 8006772:	701a      	strb	r2, [r3, #0]
 8006774:	e013      	b.n	800679e <UART_SetConfig+0x236>
 8006776:	2317      	movs	r3, #23
 8006778:	18fb      	adds	r3, r7, r3
 800677a:	2210      	movs	r2, #16
 800677c:	701a      	strb	r2, [r3, #0]
 800677e:	46c0      	nop			; (mov r8, r8)
 8006780:	e00d      	b.n	800679e <UART_SetConfig+0x236>
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	4a5b      	ldr	r2, [pc, #364]	; (80068f4 <UART_SetConfig+0x38c>)
 8006788:	4293      	cmp	r3, r2
 800678a:	d104      	bne.n	8006796 <UART_SetConfig+0x22e>
 800678c:	2317      	movs	r3, #23
 800678e:	18fb      	adds	r3, r7, r3
 8006790:	2200      	movs	r2, #0
 8006792:	701a      	strb	r2, [r3, #0]
 8006794:	e003      	b.n	800679e <UART_SetConfig+0x236>
 8006796:	2317      	movs	r3, #23
 8006798:	18fb      	adds	r3, r7, r3
 800679a:	2210      	movs	r2, #16
 800679c:	701a      	strb	r2, [r3, #0]
  
  /* Check UART Over Sampling to set Baud Rate Register */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	69da      	ldr	r2, [r3, #28]
 80067a2:	2380      	movs	r3, #128	; 0x80
 80067a4:	021b      	lsls	r3, r3, #8
 80067a6:	429a      	cmp	r2, r3
 80067a8:	d000      	beq.n	80067ac <UART_SetConfig+0x244>
 80067aa:	e077      	b.n	800689c <UART_SetConfig+0x334>
  {
    switch (clocksource)
 80067ac:	2317      	movs	r3, #23
 80067ae:	18fb      	adds	r3, r7, r3
 80067b0:	781b      	ldrb	r3, [r3, #0]
 80067b2:	2b02      	cmp	r3, #2
 80067b4:	d01c      	beq.n	80067f0 <UART_SetConfig+0x288>
 80067b6:	dc02      	bgt.n	80067be <UART_SetConfig+0x256>
 80067b8:	2b00      	cmp	r3, #0
 80067ba:	d005      	beq.n	80067c8 <UART_SetConfig+0x260>
 80067bc:	e04f      	b.n	800685e <UART_SetConfig+0x2f6>
 80067be:	2b04      	cmp	r3, #4
 80067c0:	d027      	beq.n	8006812 <UART_SetConfig+0x2aa>
 80067c2:	2b08      	cmp	r3, #8
 80067c4:	d039      	beq.n	800683a <UART_SetConfig+0x2d2>
 80067c6:	e04a      	b.n	800685e <UART_SetConfig+0x2f6>
    {
      case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 80067c8:	f7fd fcea 	bl	80041a0 <HAL_RCC_GetPCLK1Freq>
 80067cc:	0003      	movs	r3, r0
 80067ce:	005a      	lsls	r2, r3, #1
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	685b      	ldr	r3, [r3, #4]
 80067d4:	085b      	lsrs	r3, r3, #1
 80067d6:	18d2      	adds	r2, r2, r3
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	685b      	ldr	r3, [r3, #4]
 80067dc:	0019      	movs	r1, r3
 80067de:	0010      	movs	r0, r2
 80067e0:	f7f9 fc92 	bl	8000108 <__udivsi3>
 80067e4:	0003      	movs	r3, r0
 80067e6:	001a      	movs	r2, r3
 80067e8:	2314      	movs	r3, #20
 80067ea:	18fb      	adds	r3, r7, r3
 80067ec:	801a      	strh	r2, [r3, #0]
        break;
 80067ee:	e03b      	b.n	8006868 <UART_SetConfig+0x300>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	685b      	ldr	r3, [r3, #4]
 80067f4:	085b      	lsrs	r3, r3, #1
 80067f6:	4a40      	ldr	r2, [pc, #256]	; (80068f8 <UART_SetConfig+0x390>)
 80067f8:	189a      	adds	r2, r3, r2
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	685b      	ldr	r3, [r3, #4]
 80067fe:	0019      	movs	r1, r3
 8006800:	0010      	movs	r0, r2
 8006802:	f7f9 fc81 	bl	8000108 <__udivsi3>
 8006806:	0003      	movs	r3, r0
 8006808:	001a      	movs	r2, r3
 800680a:	2314      	movs	r3, #20
 800680c:	18fb      	adds	r3, r7, r3
 800680e:	801a      	strh	r2, [r3, #0]
        break;
 8006810:	e02a      	b.n	8006868 <UART_SetConfig+0x300>
      case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8006812:	f7fd fc57 	bl	80040c4 <HAL_RCC_GetSysClockFreq>
 8006816:	0003      	movs	r3, r0
 8006818:	005a      	lsls	r2, r3, #1
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	685b      	ldr	r3, [r3, #4]
 800681e:	085b      	lsrs	r3, r3, #1
 8006820:	18d2      	adds	r2, r2, r3
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	685b      	ldr	r3, [r3, #4]
 8006826:	0019      	movs	r1, r3
 8006828:	0010      	movs	r0, r2
 800682a:	f7f9 fc6d 	bl	8000108 <__udivsi3>
 800682e:	0003      	movs	r3, r0
 8006830:	001a      	movs	r2, r3
 8006832:	2314      	movs	r3, #20
 8006834:	18fb      	adds	r3, r7, r3
 8006836:	801a      	strh	r2, [r3, #0]
        break;
 8006838:	e016      	b.n	8006868 <UART_SetConfig+0x300>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	685b      	ldr	r3, [r3, #4]
 800683e:	085b      	lsrs	r3, r3, #1
 8006840:	2280      	movs	r2, #128	; 0x80
 8006842:	0252      	lsls	r2, r2, #9
 8006844:	189a      	adds	r2, r3, r2
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	685b      	ldr	r3, [r3, #4]
 800684a:	0019      	movs	r1, r3
 800684c:	0010      	movs	r0, r2
 800684e:	f7f9 fc5b 	bl	8000108 <__udivsi3>
 8006852:	0003      	movs	r3, r0
 8006854:	001a      	movs	r2, r3
 8006856:	2314      	movs	r3, #20
 8006858:	18fb      	adds	r3, r7, r3
 800685a:	801a      	strh	r2, [r3, #0]
        break;
 800685c:	e004      	b.n	8006868 <UART_SetConfig+0x300>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 800685e:	2313      	movs	r3, #19
 8006860:	18fb      	adds	r3, r7, r3
 8006862:	2201      	movs	r2, #1
 8006864:	701a      	strb	r2, [r3, #0]
        break;
 8006866:	46c0      	nop			; (mov r8, r8)
    }

    brrtemp = usartdiv & 0xFFF0U;
 8006868:	200a      	movs	r0, #10
 800686a:	183b      	adds	r3, r7, r0
 800686c:	2414      	movs	r4, #20
 800686e:	193a      	adds	r2, r7, r4
 8006870:	8812      	ldrh	r2, [r2, #0]
 8006872:	210f      	movs	r1, #15
 8006874:	438a      	bics	r2, r1
 8006876:	801a      	strh	r2, [r3, #0]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006878:	193b      	adds	r3, r7, r4
 800687a:	881b      	ldrh	r3, [r3, #0]
 800687c:	105b      	asrs	r3, r3, #1
 800687e:	b29b      	uxth	r3, r3
 8006880:	2207      	movs	r2, #7
 8006882:	4013      	ands	r3, r2
 8006884:	b299      	uxth	r1, r3
 8006886:	183b      	adds	r3, r7, r0
 8006888:	183a      	adds	r2, r7, r0
 800688a:	8812      	ldrh	r2, [r2, #0]
 800688c:	430a      	orrs	r2, r1
 800688e:	801a      	strh	r2, [r3, #0]
    huart->Instance->BRR = brrtemp;
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	183a      	adds	r2, r7, r0
 8006896:	8812      	ldrh	r2, [r2, #0]
 8006898:	60da      	str	r2, [r3, #12]
 800689a:	e07d      	b.n	8006998 <UART_SetConfig+0x430>
  }
  else
  {
    switch (clocksource)
 800689c:	2317      	movs	r3, #23
 800689e:	18fb      	adds	r3, r7, r3
 80068a0:	781b      	ldrb	r3, [r3, #0]
 80068a2:	2b02      	cmp	r3, #2
 80068a4:	d03d      	beq.n	8006922 <UART_SetConfig+0x3ba>
 80068a6:	dc02      	bgt.n	80068ae <UART_SetConfig+0x346>
 80068a8:	2b00      	cmp	r3, #0
 80068aa:	d027      	beq.n	80068fc <UART_SetConfig+0x394>
 80068ac:	e06f      	b.n	800698e <UART_SetConfig+0x426>
 80068ae:	2b04      	cmp	r3, #4
 80068b0:	d048      	beq.n	8006944 <UART_SetConfig+0x3dc>
 80068b2:	2b08      	cmp	r3, #8
 80068b4:	d059      	beq.n	800696a <UART_SetConfig+0x402>
 80068b6:	e06a      	b.n	800698e <UART_SetConfig+0x426>
 80068b8:	005b8d80 	.word	0x005b8d80
 80068bc:	00000846 	.word	0x00000846
 80068c0:	08007130 	.word	0x08007130
 80068c4:	00000847 	.word	0x00000847
 80068c8:	00000848 	.word	0x00000848
 80068cc:	00000849 	.word	0x00000849
 80068d0:	0000084a 	.word	0x0000084a
 80068d4:	0000084b 	.word	0x0000084b
 80068d8:	0000084c 	.word	0x0000084c
 80068dc:	0000084d 	.word	0x0000084d
 80068e0:	ffff69f3 	.word	0xffff69f3
 80068e4:	ffffcfff 	.word	0xffffcfff
 80068e8:	fffff4ff 	.word	0xfffff4ff
 80068ec:	40013800 	.word	0x40013800
 80068f0:	40021000 	.word	0x40021000
 80068f4:	40004400 	.word	0x40004400
 80068f8:	00f42400 	.word	0x00f42400
    {
      case UART_CLOCKSOURCE_PCLK1:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 80068fc:	f7fd fc50 	bl	80041a0 <HAL_RCC_GetPCLK1Freq>
 8006900:	0002      	movs	r2, r0
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	685b      	ldr	r3, [r3, #4]
 8006906:	085b      	lsrs	r3, r3, #1
 8006908:	18d2      	adds	r2, r2, r3
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	685b      	ldr	r3, [r3, #4]
 800690e:	0019      	movs	r1, r3
 8006910:	0010      	movs	r0, r2
 8006912:	f7f9 fbf9 	bl	8000108 <__udivsi3>
 8006916:	0003      	movs	r3, r0
 8006918:	b29a      	uxth	r2, r3
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	60da      	str	r2, [r3, #12]
        break;
 8006920:	e03a      	b.n	8006998 <UART_SetConfig+0x430>
      case UART_CLOCKSOURCE_HSI:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	685b      	ldr	r3, [r3, #4]
 8006926:	085b      	lsrs	r3, r3, #1
 8006928:	4a1f      	ldr	r2, [pc, #124]	; (80069a8 <UART_SetConfig+0x440>)
 800692a:	189a      	adds	r2, r3, r2
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	685b      	ldr	r3, [r3, #4]
 8006930:	0019      	movs	r1, r3
 8006932:	0010      	movs	r0, r2
 8006934:	f7f9 fbe8 	bl	8000108 <__udivsi3>
 8006938:	0003      	movs	r3, r0
 800693a:	b29a      	uxth	r2, r3
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	60da      	str	r2, [r3, #12]
        break;
 8006942:	e029      	b.n	8006998 <UART_SetConfig+0x430>
      case UART_CLOCKSOURCE_SYSCLK:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8006944:	f7fd fbbe 	bl	80040c4 <HAL_RCC_GetSysClockFreq>
 8006948:	0002      	movs	r2, r0
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	685b      	ldr	r3, [r3, #4]
 800694e:	085b      	lsrs	r3, r3, #1
 8006950:	18d2      	adds	r2, r2, r3
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	685b      	ldr	r3, [r3, #4]
 8006956:	0019      	movs	r1, r3
 8006958:	0010      	movs	r0, r2
 800695a:	f7f9 fbd5 	bl	8000108 <__udivsi3>
 800695e:	0003      	movs	r3, r0
 8006960:	b29a      	uxth	r2, r3
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	60da      	str	r2, [r3, #12]
        break;
 8006968:	e016      	b.n	8006998 <UART_SetConfig+0x430>
      case UART_CLOCKSOURCE_LSE:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	685b      	ldr	r3, [r3, #4]
 800696e:	085b      	lsrs	r3, r3, #1
 8006970:	2280      	movs	r2, #128	; 0x80
 8006972:	0212      	lsls	r2, r2, #8
 8006974:	189a      	adds	r2, r3, r2
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	685b      	ldr	r3, [r3, #4]
 800697a:	0019      	movs	r1, r3
 800697c:	0010      	movs	r0, r2
 800697e:	f7f9 fbc3 	bl	8000108 <__udivsi3>
 8006982:	0003      	movs	r3, r0
 8006984:	b29a      	uxth	r2, r3
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	60da      	str	r2, [r3, #12]
        break;
 800698c:	e004      	b.n	8006998 <UART_SetConfig+0x430>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 800698e:	2313      	movs	r3, #19
 8006990:	18fb      	adds	r3, r7, r3
 8006992:	2201      	movs	r2, #1
 8006994:	701a      	strb	r2, [r3, #0]
        break;
 8006996:	46c0      	nop			; (mov r8, r8)
    }
  }

  return ret;
 8006998:	2313      	movs	r3, #19
 800699a:	18fb      	adds	r3, r7, r3
 800699c:	781b      	ldrb	r3, [r3, #0]

}
 800699e:	0018      	movs	r0, r3
 80069a0:	46bd      	mov	sp, r7
 80069a2:	b007      	add	sp, #28
 80069a4:	bd90      	pop	{r4, r7, pc}
 80069a6:	46c0      	nop			; (mov r8, r8)
 80069a8:	007a1200 	.word	0x007a1200

080069ac <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80069ac:	b580      	push	{r7, lr}
 80069ae:	b082      	sub	sp, #8
 80069b0:	af00      	add	r7, sp, #0
 80069b2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069b8:	2bff      	cmp	r3, #255	; 0xff
 80069ba:	d905      	bls.n	80069c8 <UART_AdvFeatureConfig+0x1c>
 80069bc:	4a9f      	ldr	r2, [pc, #636]	; (8006c3c <UART_AdvFeatureConfig+0x290>)
 80069be:	4ba0      	ldr	r3, [pc, #640]	; (8006c40 <UART_AdvFeatureConfig+0x294>)
 80069c0:	0011      	movs	r1, r2
 80069c2:	0018      	movs	r0, r3
 80069c4:	f7f9 ffd5 	bl	8000972 <assert_failed>

  /* if required, configure TX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069cc:	2201      	movs	r2, #1
 80069ce:	4013      	ands	r3, r2
 80069d0:	d01b      	beq.n	8006a0a <UART_AdvFeatureConfig+0x5e>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80069d6:	2b00      	cmp	r3, #0
 80069d8:	d00b      	beq.n	80069f2 <UART_AdvFeatureConfig+0x46>
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80069de:	2380      	movs	r3, #128	; 0x80
 80069e0:	029b      	lsls	r3, r3, #10
 80069e2:	429a      	cmp	r2, r3
 80069e4:	d005      	beq.n	80069f2 <UART_AdvFeatureConfig+0x46>
 80069e6:	4a97      	ldr	r2, [pc, #604]	; (8006c44 <UART_AdvFeatureConfig+0x298>)
 80069e8:	4b95      	ldr	r3, [pc, #596]	; (8006c40 <UART_AdvFeatureConfig+0x294>)
 80069ea:	0011      	movs	r1, r2
 80069ec:	0018      	movs	r0, r3
 80069ee:	f7f9 ffc0 	bl	8000972 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	685b      	ldr	r3, [r3, #4]
 80069f8:	4a93      	ldr	r2, [pc, #588]	; (8006c48 <UART_AdvFeatureConfig+0x29c>)
 80069fa:	4013      	ands	r3, r2
 80069fc:	0019      	movs	r1, r3
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	430a      	orrs	r2, r1
 8006a08:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a0e:	2202      	movs	r2, #2
 8006a10:	4013      	ands	r3, r2
 8006a12:	d01b      	beq.n	8006a4c <UART_AdvFeatureConfig+0xa0>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a18:	2b00      	cmp	r3, #0
 8006a1a:	d00b      	beq.n	8006a34 <UART_AdvFeatureConfig+0x88>
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006a20:	2380      	movs	r3, #128	; 0x80
 8006a22:	025b      	lsls	r3, r3, #9
 8006a24:	429a      	cmp	r2, r3
 8006a26:	d005      	beq.n	8006a34 <UART_AdvFeatureConfig+0x88>
 8006a28:	4a88      	ldr	r2, [pc, #544]	; (8006c4c <UART_AdvFeatureConfig+0x2a0>)
 8006a2a:	4b85      	ldr	r3, [pc, #532]	; (8006c40 <UART_AdvFeatureConfig+0x294>)
 8006a2c:	0011      	movs	r1, r2
 8006a2e:	0018      	movs	r0, r3
 8006a30:	f7f9 ff9f 	bl	8000972 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	685b      	ldr	r3, [r3, #4]
 8006a3a:	4a85      	ldr	r2, [pc, #532]	; (8006c50 <UART_AdvFeatureConfig+0x2a4>)
 8006a3c:	4013      	ands	r3, r2
 8006a3e:	0019      	movs	r1, r3
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	430a      	orrs	r2, r1
 8006a4a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a50:	2204      	movs	r2, #4
 8006a52:	4013      	ands	r3, r2
 8006a54:	d01b      	beq.n	8006a8e <UART_AdvFeatureConfig+0xe2>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a5a:	2b00      	cmp	r3, #0
 8006a5c:	d00b      	beq.n	8006a76 <UART_AdvFeatureConfig+0xca>
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006a62:	2380      	movs	r3, #128	; 0x80
 8006a64:	02db      	lsls	r3, r3, #11
 8006a66:	429a      	cmp	r2, r3
 8006a68:	d005      	beq.n	8006a76 <UART_AdvFeatureConfig+0xca>
 8006a6a:	4a7a      	ldr	r2, [pc, #488]	; (8006c54 <UART_AdvFeatureConfig+0x2a8>)
 8006a6c:	4b74      	ldr	r3, [pc, #464]	; (8006c40 <UART_AdvFeatureConfig+0x294>)
 8006a6e:	0011      	movs	r1, r2
 8006a70:	0018      	movs	r0, r3
 8006a72:	f7f9 ff7e 	bl	8000972 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	685b      	ldr	r3, [r3, #4]
 8006a7c:	4a76      	ldr	r2, [pc, #472]	; (8006c58 <UART_AdvFeatureConfig+0x2ac>)
 8006a7e:	4013      	ands	r3, r2
 8006a80:	0019      	movs	r1, r3
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	430a      	orrs	r2, r1
 8006a8c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a92:	2208      	movs	r2, #8
 8006a94:	4013      	ands	r3, r2
 8006a96:	d01b      	beq.n	8006ad0 <UART_AdvFeatureConfig+0x124>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006a9c:	2b00      	cmp	r3, #0
 8006a9e:	d00b      	beq.n	8006ab8 <UART_AdvFeatureConfig+0x10c>
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006aa4:	2380      	movs	r3, #128	; 0x80
 8006aa6:	021b      	lsls	r3, r3, #8
 8006aa8:	429a      	cmp	r2, r3
 8006aaa:	d005      	beq.n	8006ab8 <UART_AdvFeatureConfig+0x10c>
 8006aac:	4a6b      	ldr	r2, [pc, #428]	; (8006c5c <UART_AdvFeatureConfig+0x2b0>)
 8006aae:	4b64      	ldr	r3, [pc, #400]	; (8006c40 <UART_AdvFeatureConfig+0x294>)
 8006ab0:	0011      	movs	r1, r2
 8006ab2:	0018      	movs	r0, r3
 8006ab4:	f7f9 ff5d 	bl	8000972 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	685b      	ldr	r3, [r3, #4]
 8006abe:	4a68      	ldr	r2, [pc, #416]	; (8006c60 <UART_AdvFeatureConfig+0x2b4>)
 8006ac0:	4013      	ands	r3, r2
 8006ac2:	0019      	movs	r1, r3
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	430a      	orrs	r2, r1
 8006ace:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ad4:	2210      	movs	r2, #16
 8006ad6:	4013      	ands	r3, r2
 8006ad8:	d01b      	beq.n	8006b12 <UART_AdvFeatureConfig+0x166>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ade:	2b00      	cmp	r3, #0
 8006ae0:	d00b      	beq.n	8006afa <UART_AdvFeatureConfig+0x14e>
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006ae6:	2380      	movs	r3, #128	; 0x80
 8006ae8:	015b      	lsls	r3, r3, #5
 8006aea:	429a      	cmp	r2, r3
 8006aec:	d005      	beq.n	8006afa <UART_AdvFeatureConfig+0x14e>
 8006aee:	4a5d      	ldr	r2, [pc, #372]	; (8006c64 <UART_AdvFeatureConfig+0x2b8>)
 8006af0:	4b53      	ldr	r3, [pc, #332]	; (8006c40 <UART_AdvFeatureConfig+0x294>)
 8006af2:	0011      	movs	r1, r2
 8006af4:	0018      	movs	r0, r3
 8006af6:	f7f9 ff3c 	bl	8000972 <assert_failed>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	689b      	ldr	r3, [r3, #8]
 8006b00:	4a59      	ldr	r2, [pc, #356]	; (8006c68 <UART_AdvFeatureConfig+0x2bc>)
 8006b02:	4013      	ands	r3, r2
 8006b04:	0019      	movs	r1, r3
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	430a      	orrs	r2, r1
 8006b10:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b16:	2220      	movs	r2, #32
 8006b18:	4013      	ands	r3, r2
 8006b1a:	d01b      	beq.n	8006b54 <UART_AdvFeatureConfig+0x1a8>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006b20:	2b00      	cmp	r3, #0
 8006b22:	d00b      	beq.n	8006b3c <UART_AdvFeatureConfig+0x190>
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006b28:	2380      	movs	r3, #128	; 0x80
 8006b2a:	019b      	lsls	r3, r3, #6
 8006b2c:	429a      	cmp	r2, r3
 8006b2e:	d005      	beq.n	8006b3c <UART_AdvFeatureConfig+0x190>
 8006b30:	4a4e      	ldr	r2, [pc, #312]	; (8006c6c <UART_AdvFeatureConfig+0x2c0>)
 8006b32:	4b43      	ldr	r3, [pc, #268]	; (8006c40 <UART_AdvFeatureConfig+0x294>)
 8006b34:	0011      	movs	r1, r2
 8006b36:	0018      	movs	r0, r3
 8006b38:	f7f9 ff1b 	bl	8000972 <assert_failed>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	689b      	ldr	r3, [r3, #8]
 8006b42:	4a4b      	ldr	r2, [pc, #300]	; (8006c70 <UART_AdvFeatureConfig+0x2c4>)
 8006b44:	4013      	ands	r3, r2
 8006b46:	0019      	movs	r1, r3
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	430a      	orrs	r2, r1
 8006b52:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b58:	2240      	movs	r2, #64	; 0x40
 8006b5a:	4013      	ands	r3, r2
 8006b5c:	d048      	beq.n	8006bf0 <UART_AdvFeatureConfig+0x244>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	4a44      	ldr	r2, [pc, #272]	; (8006c74 <UART_AdvFeatureConfig+0x2c8>)
 8006b64:	4293      	cmp	r3, r2
 8006b66:	d005      	beq.n	8006b74 <UART_AdvFeatureConfig+0x1c8>
 8006b68:	4a43      	ldr	r2, [pc, #268]	; (8006c78 <UART_AdvFeatureConfig+0x2cc>)
 8006b6a:	4b35      	ldr	r3, [pc, #212]	; (8006c40 <UART_AdvFeatureConfig+0x294>)
 8006b6c:	0011      	movs	r1, r2
 8006b6e:	0018      	movs	r0, r3
 8006b70:	f7f9 feff 	bl	8000972 <assert_failed>
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b78:	2b00      	cmp	r3, #0
 8006b7a:	d00b      	beq.n	8006b94 <UART_AdvFeatureConfig+0x1e8>
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006b80:	2380      	movs	r3, #128	; 0x80
 8006b82:	035b      	lsls	r3, r3, #13
 8006b84:	429a      	cmp	r2, r3
 8006b86:	d005      	beq.n	8006b94 <UART_AdvFeatureConfig+0x1e8>
 8006b88:	4a3c      	ldr	r2, [pc, #240]	; (8006c7c <UART_AdvFeatureConfig+0x2d0>)
 8006b8a:	4b2d      	ldr	r3, [pc, #180]	; (8006c40 <UART_AdvFeatureConfig+0x294>)
 8006b8c:	0011      	movs	r1, r2
 8006b8e:	0018      	movs	r0, r3
 8006b90:	f7f9 feef 	bl	8000972 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	685b      	ldr	r3, [r3, #4]
 8006b9a:	4a39      	ldr	r2, [pc, #228]	; (8006c80 <UART_AdvFeatureConfig+0x2d4>)
 8006b9c:	4013      	ands	r3, r2
 8006b9e:	0019      	movs	r1, r3
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	430a      	orrs	r2, r1
 8006baa:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006bb0:	2380      	movs	r3, #128	; 0x80
 8006bb2:	035b      	lsls	r3, r3, #13
 8006bb4:	429a      	cmp	r2, r3
 8006bb6:	d11b      	bne.n	8006bf0 <UART_AdvFeatureConfig+0x244>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006bbc:	2b00      	cmp	r3, #0
 8006bbe:	d00b      	beq.n	8006bd8 <UART_AdvFeatureConfig+0x22c>
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006bc4:	2380      	movs	r3, #128	; 0x80
 8006bc6:	039b      	lsls	r3, r3, #14
 8006bc8:	429a      	cmp	r2, r3
 8006bca:	d005      	beq.n	8006bd8 <UART_AdvFeatureConfig+0x22c>
 8006bcc:	4a2d      	ldr	r2, [pc, #180]	; (8006c84 <UART_AdvFeatureConfig+0x2d8>)
 8006bce:	4b1c      	ldr	r3, [pc, #112]	; (8006c40 <UART_AdvFeatureConfig+0x294>)
 8006bd0:	0011      	movs	r1, r2
 8006bd2:	0018      	movs	r0, r3
 8006bd4:	f7f9 fecd 	bl	8000972 <assert_failed>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	685b      	ldr	r3, [r3, #4]
 8006bde:	4a2a      	ldr	r2, [pc, #168]	; (8006c88 <UART_AdvFeatureConfig+0x2dc>)
 8006be0:	4013      	ands	r3, r2
 8006be2:	0019      	movs	r1, r3
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	430a      	orrs	r2, r1
 8006bee:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bf4:	2280      	movs	r2, #128	; 0x80
 8006bf6:	4013      	ands	r3, r2
 8006bf8:	d01b      	beq.n	8006c32 <UART_AdvFeatureConfig+0x286>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006bfe:	2b00      	cmp	r3, #0
 8006c00:	d00b      	beq.n	8006c1a <UART_AdvFeatureConfig+0x26e>
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006c06:	2380      	movs	r3, #128	; 0x80
 8006c08:	031b      	lsls	r3, r3, #12
 8006c0a:	429a      	cmp	r2, r3
 8006c0c:	d005      	beq.n	8006c1a <UART_AdvFeatureConfig+0x26e>
 8006c0e:	4a1f      	ldr	r2, [pc, #124]	; (8006c8c <UART_AdvFeatureConfig+0x2e0>)
 8006c10:	4b0b      	ldr	r3, [pc, #44]	; (8006c40 <UART_AdvFeatureConfig+0x294>)
 8006c12:	0011      	movs	r1, r2
 8006c14:	0018      	movs	r0, r3
 8006c16:	f7f9 feac 	bl	8000972 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	685b      	ldr	r3, [r3, #4]
 8006c20:	4a1b      	ldr	r2, [pc, #108]	; (8006c90 <UART_AdvFeatureConfig+0x2e4>)
 8006c22:	4013      	ands	r3, r2
 8006c24:	0019      	movs	r1, r3
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	430a      	orrs	r2, r1
 8006c30:	605a      	str	r2, [r3, #4]
  }
}
 8006c32:	46c0      	nop			; (mov r8, r8)
 8006c34:	46bd      	mov	sp, r7
 8006c36:	b002      	add	sp, #8
 8006c38:	bd80      	pop	{r7, pc}
 8006c3a:	46c0      	nop			; (mov r8, r8)
 8006c3c:	000008a9 	.word	0x000008a9
 8006c40:	08007130 	.word	0x08007130
 8006c44:	000008ae 	.word	0x000008ae
 8006c48:	fffdffff 	.word	0xfffdffff
 8006c4c:	000008b5 	.word	0x000008b5
 8006c50:	fffeffff 	.word	0xfffeffff
 8006c54:	000008bc 	.word	0x000008bc
 8006c58:	fffbffff 	.word	0xfffbffff
 8006c5c:	000008c3 	.word	0x000008c3
 8006c60:	ffff7fff 	.word	0xffff7fff
 8006c64:	000008ca 	.word	0x000008ca
 8006c68:	ffffefff 	.word	0xffffefff
 8006c6c:	000008d1 	.word	0x000008d1
 8006c70:	ffffdfff 	.word	0xffffdfff
 8006c74:	40013800 	.word	0x40013800
 8006c78:	000008d8 	.word	0x000008d8
 8006c7c:	000008d9 	.word	0x000008d9
 8006c80:	ffefffff 	.word	0xffefffff
 8006c84:	000008de 	.word	0x000008de
 8006c88:	ff9fffff 	.word	0xff9fffff
 8006c8c:	000008e6 	.word	0x000008e6
 8006c90:	fff7ffff 	.word	0xfff7ffff

08006c94 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006c94:	b580      	push	{r7, lr}
 8006c96:	b086      	sub	sp, #24
 8006c98:	af02      	add	r7, sp, #8
 8006c9a:	6078      	str	r0, [r7, #4]
#if !defined(STM32F030x6) && !defined(STM32F030x8)&& !defined(STM32F070xB)&& !defined(STM32F070x6)&& !defined(STM32F030xC)
  uint32_t tickstart = 0U;
 8006c9c:	2300      	movs	r3, #0
 8006c9e:	60fb      	str	r3, [r7, #12]
#endif /* !defined(STM32F030x6) && !defined(STM32F030x8)&& !defined(STM32F070xB)&& !defined(STM32F070x6)&& !defined(STM32F030xC) */

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	2200      	movs	r2, #0
 8006ca4:	66da      	str	r2, [r3, #108]	; 0x6c

#if !defined(STM32F030x6) && !defined(STM32F030x8)&& !defined(STM32F070xB)&& !defined(STM32F070x6)&& !defined(STM32F030xC)
  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8006ca6:	f7fa fd43 	bl	8001730 <HAL_GetTick>
 8006caa:	0003      	movs	r3, r0
 8006cac:	60fb      	str	r3, [r7, #12]

  /* TEACK and REACK bits in ISR are checked only when available (not available on all F0 devices).
     Bits are defined for some specific devices, and are available only for UART instances supporting WakeUp from Stop Mode feature. 
  */
  if (IS_UART_WAKEUP_FROMSTOP_INSTANCE(huart->Instance))
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	4a1f      	ldr	r2, [pc, #124]	; (8006d30 <UART_CheckIdleState+0x9c>)
 8006cb4:	4293      	cmp	r3, r2
 8006cb6:	d129      	bne.n	8006d0c <UART_CheckIdleState+0x78>
  {
    /* Check if the Transmitter is enabled */
    if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	2208      	movs	r2, #8
 8006cc0:	4013      	ands	r3, r2
 8006cc2:	2b08      	cmp	r3, #8
 8006cc4:	d10d      	bne.n	8006ce2 <UART_CheckIdleState+0x4e>
    {
      /* Wait until TEACK flag is set */
      if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006cc6:	68fa      	ldr	r2, [r7, #12]
 8006cc8:	2380      	movs	r3, #128	; 0x80
 8006cca:	0399      	lsls	r1, r3, #14
 8006ccc:	6878      	ldr	r0, [r7, #4]
 8006cce:	4b19      	ldr	r3, [pc, #100]	; (8006d34 <UART_CheckIdleState+0xa0>)
 8006cd0:	9300      	str	r3, [sp, #0]
 8006cd2:	0013      	movs	r3, r2
 8006cd4:	2200      	movs	r2, #0
 8006cd6:	f000 f82f 	bl	8006d38 <UART_WaitOnFlagUntilTimeout>
 8006cda:	1e03      	subs	r3, r0, #0
 8006cdc:	d001      	beq.n	8006ce2 <UART_CheckIdleState+0x4e>
      {
        /* Timeout occurred */
        return HAL_TIMEOUT;
 8006cde:	2303      	movs	r3, #3
 8006ce0:	e021      	b.n	8006d26 <UART_CheckIdleState+0x92>
      }
    }

    /* Check if the Receiver is enabled */
    if((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	2204      	movs	r2, #4
 8006cea:	4013      	ands	r3, r2
 8006cec:	2b04      	cmp	r3, #4
 8006cee:	d10d      	bne.n	8006d0c <UART_CheckIdleState+0x78>
    {
      /* Wait until REACK flag is set */
      if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006cf0:	68fa      	ldr	r2, [r7, #12]
 8006cf2:	2380      	movs	r3, #128	; 0x80
 8006cf4:	03d9      	lsls	r1, r3, #15
 8006cf6:	6878      	ldr	r0, [r7, #4]
 8006cf8:	4b0e      	ldr	r3, [pc, #56]	; (8006d34 <UART_CheckIdleState+0xa0>)
 8006cfa:	9300      	str	r3, [sp, #0]
 8006cfc:	0013      	movs	r3, r2
 8006cfe:	2200      	movs	r2, #0
 8006d00:	f000 f81a 	bl	8006d38 <UART_WaitOnFlagUntilTimeout>
 8006d04:	1e03      	subs	r3, r0, #0
 8006d06:	d001      	beq.n	8006d0c <UART_CheckIdleState+0x78>
      {
        /* Timeout occurred */
        return HAL_TIMEOUT;
 8006d08:	2303      	movs	r3, #3
 8006d0a:	e00c      	b.n	8006d26 <UART_CheckIdleState+0x92>
    }
  }
#endif /* !defined(STM32F030x6) && !defined(STM32F030x8)&& !defined(STM32F070xB)&& !defined(STM32F070x6)&& !defined(STM32F030xC) */

  /* Initialize the UART State */
  huart->gState  = HAL_UART_STATE_READY;
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	2269      	movs	r2, #105	; 0x69
 8006d10:	2120      	movs	r1, #32
 8006d12:	5499      	strb	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	226a      	movs	r2, #106	; 0x6a
 8006d18:	2120      	movs	r1, #32
 8006d1a:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	2268      	movs	r2, #104	; 0x68
 8006d20:	2100      	movs	r1, #0
 8006d22:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006d24:	2300      	movs	r3, #0
}
 8006d26:	0018      	movs	r0, r3
 8006d28:	46bd      	mov	sp, r7
 8006d2a:	b004      	add	sp, #16
 8006d2c:	bd80      	pop	{r7, pc}
 8006d2e:	46c0      	nop			; (mov r8, r8)
 8006d30:	40013800 	.word	0x40013800
 8006d34:	01ffffff 	.word	0x01ffffff

08006d38 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8006d38:	b580      	push	{r7, lr}
 8006d3a:	b084      	sub	sp, #16
 8006d3c:	af00      	add	r7, sp, #0
 8006d3e:	60f8      	str	r0, [r7, #12]
 8006d40:	60b9      	str	r1, [r7, #8]
 8006d42:	603b      	str	r3, [r7, #0]
 8006d44:	1dfb      	adds	r3, r7, #7
 8006d46:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006d48:	e02b      	b.n	8006da2 <UART_WaitOnFlagUntilTimeout+0x6a>
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 8006d4a:	69bb      	ldr	r3, [r7, #24]
 8006d4c:	3301      	adds	r3, #1
 8006d4e:	d028      	beq.n	8006da2 <UART_WaitOnFlagUntilTimeout+0x6a>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8006d50:	69bb      	ldr	r3, [r7, #24]
 8006d52:	2b00      	cmp	r3, #0
 8006d54:	d007      	beq.n	8006d66 <UART_WaitOnFlagUntilTimeout+0x2e>
 8006d56:	f7fa fceb 	bl	8001730 <HAL_GetTick>
 8006d5a:	0002      	movs	r2, r0
 8006d5c:	683b      	ldr	r3, [r7, #0]
 8006d5e:	1ad3      	subs	r3, r2, r3
 8006d60:	69ba      	ldr	r2, [r7, #24]
 8006d62:	429a      	cmp	r2, r3
 8006d64:	d21d      	bcs.n	8006da2 <UART_WaitOnFlagUntilTimeout+0x6a>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006d66:	68fb      	ldr	r3, [r7, #12]
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	681a      	ldr	r2, [r3, #0]
 8006d6c:	68fb      	ldr	r3, [r7, #12]
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	4916      	ldr	r1, [pc, #88]	; (8006dcc <UART_WaitOnFlagUntilTimeout+0x94>)
 8006d72:	400a      	ands	r2, r1
 8006d74:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006d76:	68fb      	ldr	r3, [r7, #12]
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	689a      	ldr	r2, [r3, #8]
 8006d7c:	68fb      	ldr	r3, [r7, #12]
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	2101      	movs	r1, #1
 8006d82:	438a      	bics	r2, r1
 8006d84:	609a      	str	r2, [r3, #8]

        huart->gState  = HAL_UART_STATE_READY;
 8006d86:	68fb      	ldr	r3, [r7, #12]
 8006d88:	2269      	movs	r2, #105	; 0x69
 8006d8a:	2120      	movs	r1, #32
 8006d8c:	5499      	strb	r1, [r3, r2]
        huart->RxState = HAL_UART_STATE_READY;
 8006d8e:	68fb      	ldr	r3, [r7, #12]
 8006d90:	226a      	movs	r2, #106	; 0x6a
 8006d92:	2120      	movs	r1, #32
 8006d94:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8006d96:	68fb      	ldr	r3, [r7, #12]
 8006d98:	2268      	movs	r2, #104	; 0x68
 8006d9a:	2100      	movs	r1, #0
 8006d9c:	5499      	strb	r1, [r3, r2]
        return HAL_TIMEOUT;
 8006d9e:	2303      	movs	r3, #3
 8006da0:	e00f      	b.n	8006dc2 <UART_WaitOnFlagUntilTimeout+0x8a>
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006da2:	68fb      	ldr	r3, [r7, #12]
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	69db      	ldr	r3, [r3, #28]
 8006da8:	68ba      	ldr	r2, [r7, #8]
 8006daa:	4013      	ands	r3, r2
 8006dac:	68ba      	ldr	r2, [r7, #8]
 8006dae:	1ad3      	subs	r3, r2, r3
 8006db0:	425a      	negs	r2, r3
 8006db2:	4153      	adcs	r3, r2
 8006db4:	b2db      	uxtb	r3, r3
 8006db6:	001a      	movs	r2, r3
 8006db8:	1dfb      	adds	r3, r7, #7
 8006dba:	781b      	ldrb	r3, [r3, #0]
 8006dbc:	429a      	cmp	r2, r3
 8006dbe:	d0c4      	beq.n	8006d4a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006dc0:	2300      	movs	r3, #0
}
 8006dc2:	0018      	movs	r0, r3
 8006dc4:	46bd      	mov	sp, r7
 8006dc6:	b004      	add	sp, #16
 8006dc8:	bd80      	pop	{r7, pc}
 8006dca:	46c0      	nop			; (mov r8, r8)
 8006dcc:	fffffe5f 	.word	0xfffffe5f

08006dd0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8006dd0:	480d      	ldr	r0, [pc, #52]	; (8006e08 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8006dd2:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8006dd4:	480d      	ldr	r0, [pc, #52]	; (8006e0c <LoopForever+0x6>)
  ldr r1, =_edata
 8006dd6:	490e      	ldr	r1, [pc, #56]	; (8006e10 <LoopForever+0xa>)
  ldr r2, =_sidata
 8006dd8:	4a0e      	ldr	r2, [pc, #56]	; (8006e14 <LoopForever+0xe>)
  movs r3, #0
 8006dda:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8006ddc:	e002      	b.n	8006de4 <LoopCopyDataInit>

08006dde <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8006dde:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8006de0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8006de2:	3304      	adds	r3, #4

08006de4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8006de4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8006de6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8006de8:	d3f9      	bcc.n	8006dde <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8006dea:	4a0b      	ldr	r2, [pc, #44]	; (8006e18 <LoopForever+0x12>)
  ldr r4, =_ebss
 8006dec:	4c0b      	ldr	r4, [pc, #44]	; (8006e1c <LoopForever+0x16>)
  movs r3, #0
 8006dee:	2300      	movs	r3, #0
  b LoopFillZerobss
 8006df0:	e001      	b.n	8006df6 <LoopFillZerobss>

08006df2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8006df2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8006df4:	3204      	adds	r2, #4

08006df6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8006df6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8006df8:	d3fb      	bcc.n	8006df2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8006dfa:	f7f9 fe71 	bl	8000ae0 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8006dfe:	f000 f811 	bl	8006e24 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8006e02:	f7f9 fcfb 	bl	80007fc <main>

08006e06 <LoopForever>:

LoopForever:
    b LoopForever
 8006e06:	e7fe      	b.n	8006e06 <LoopForever>
  ldr   r0, =_estack
 8006e08:	20001fff 	.word	0x20001fff
  ldr r0, =_sdata
 8006e0c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8006e10:	200003c8 	.word	0x200003c8
  ldr r2, =_sidata
 8006e14:	0800718c 	.word	0x0800718c
  ldr r2, =_sbss
 8006e18:	200003c8 	.word	0x200003c8
  ldr r4, =_ebss
 8006e1c:	2000066c 	.word	0x2000066c

08006e20 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8006e20:	e7fe      	b.n	8006e20 <ADC1_COMP_IRQHandler>
	...

08006e24 <__libc_init_array>:
 8006e24:	b570      	push	{r4, r5, r6, lr}
 8006e26:	2600      	movs	r6, #0
 8006e28:	4d0c      	ldr	r5, [pc, #48]	; (8006e5c <__libc_init_array+0x38>)
 8006e2a:	4c0d      	ldr	r4, [pc, #52]	; (8006e60 <__libc_init_array+0x3c>)
 8006e2c:	1b64      	subs	r4, r4, r5
 8006e2e:	10a4      	asrs	r4, r4, #2
 8006e30:	42a6      	cmp	r6, r4
 8006e32:	d109      	bne.n	8006e48 <__libc_init_array+0x24>
 8006e34:	2600      	movs	r6, #0
 8006e36:	f000 f821 	bl	8006e7c <_init>
 8006e3a:	4d0a      	ldr	r5, [pc, #40]	; (8006e64 <__libc_init_array+0x40>)
 8006e3c:	4c0a      	ldr	r4, [pc, #40]	; (8006e68 <__libc_init_array+0x44>)
 8006e3e:	1b64      	subs	r4, r4, r5
 8006e40:	10a4      	asrs	r4, r4, #2
 8006e42:	42a6      	cmp	r6, r4
 8006e44:	d105      	bne.n	8006e52 <__libc_init_array+0x2e>
 8006e46:	bd70      	pop	{r4, r5, r6, pc}
 8006e48:	00b3      	lsls	r3, r6, #2
 8006e4a:	58eb      	ldr	r3, [r5, r3]
 8006e4c:	4798      	blx	r3
 8006e4e:	3601      	adds	r6, #1
 8006e50:	e7ee      	b.n	8006e30 <__libc_init_array+0xc>
 8006e52:	00b3      	lsls	r3, r6, #2
 8006e54:	58eb      	ldr	r3, [r5, r3]
 8006e56:	4798      	blx	r3
 8006e58:	3601      	adds	r6, #1
 8006e5a:	e7f2      	b.n	8006e42 <__libc_init_array+0x1e>
 8006e5c:	08007184 	.word	0x08007184
 8006e60:	08007184 	.word	0x08007184
 8006e64:	08007184 	.word	0x08007184
 8006e68:	08007188 	.word	0x08007188

08006e6c <memset>:
 8006e6c:	0003      	movs	r3, r0
 8006e6e:	1812      	adds	r2, r2, r0
 8006e70:	4293      	cmp	r3, r2
 8006e72:	d100      	bne.n	8006e76 <memset+0xa>
 8006e74:	4770      	bx	lr
 8006e76:	7019      	strb	r1, [r3, #0]
 8006e78:	3301      	adds	r3, #1
 8006e7a:	e7f9      	b.n	8006e70 <memset+0x4>

08006e7c <_init>:
 8006e7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006e7e:	46c0      	nop			; (mov r8, r8)
 8006e80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006e82:	bc08      	pop	{r3}
 8006e84:	469e      	mov	lr, r3
 8006e86:	4770      	bx	lr

08006e88 <_fini>:
 8006e88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006e8a:	46c0      	nop			; (mov r8, r8)
 8006e8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006e8e:	bc08      	pop	{r3}
 8006e90:	469e      	mov	lr, r3
 8006e92:	4770      	bx	lr
